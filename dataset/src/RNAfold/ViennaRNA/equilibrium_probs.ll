; ModuleID = 'equilibrium_probs.c'
source_filename = "equilibrium_probs.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vrna_fc_s = type { i32, i32, i32, i32*, i32*, i32*, i32*, i32*, i32, %struct.vrna_sequence_s*, %struct.vrna_alignment_s*, %struct.vrna_hc_s*, %struct.vrna_mx_mfe_s*, %struct.vrna_mx_pf_s*, %struct.vrna_param_s*, %struct.vrna_exp_param_s*, i32*, i32*, void (i8, i8*)*, i8*, void (i8*)*, %struct.vrna_structured_domains_s*, %struct.vrna_unstructured_domain_s*, %struct.vrna_gr_aux_s*, %union.anon.9, i32, i32, i16*, i16*, i32*, i32*, i32*, i32*, i32*, i32, i8**, %struct.vrna_zsc_dat_s* }
%struct.vrna_sequence_s = type { i32, i8*, i8*, i16*, i16*, i16*, i32 }
%struct.vrna_alignment_s = type { i32, %struct.vrna_sequence_s*, i8**, i32*, i64*, i64*, i8*, i32** }
%struct.vrna_hc_s = type { i32, i32, i8, %union.anon, i32*, i32*, i32*, i32*, i8 (i32, i32, i32, i32, i8, i8*)*, i8*, void (i8*)*, %struct.vrna_hc_depot_s* }
%union.anon = type { %struct.anon }
%struct.anon = type { i8* }
%struct.vrna_hc_depot_s = type opaque
%struct.vrna_mx_mfe_s = type { i32, i32, i32, %union.anon.1 }
%union.anon.1 = type { %struct.anon.4 }
%struct.anon.4 = type { i32***, i32**, i32**, i32*, i32*, i32***, i32**, i32**, i32*, i32*, i32***, i32**, i32**, i32*, i32*, i32***, i32**, i32**, i32*, i32*, i32***, i32**, i32**, i32*, i32*, i32***, i32**, i32**, i32*, i32*, i32**, i32*, i32*, i32, i32, i32**, i32*, i32*, i32, i32, i32**, i32*, i32*, i32, i32, i32**, i32*, i32*, i32, i32, i32*, i32*, i32*, i32*, i32*, i32*, i32, i32, i32, i32 }
%struct.vrna_mx_pf_s = type { i32, i32, double*, double*, %union.anon.5 }
%union.anon.5 = type { %struct.anon.8 }
%struct.anon.8 = type { double***, i32**, i32**, i32*, i32*, double***, i32**, i32**, i32*, i32*, double***, i32**, i32**, i32*, i32*, double***, i32**, i32**, i32*, i32*, double***, i32**, i32**, i32*, i32*, double**, i32*, i32*, i32, i32, double**, i32*, i32*, i32, i32, double**, i32*, i32*, i32, i32, double**, i32*, i32*, i32, i32, double*, double*, double*, double*, double*, double, double, double, double }
%struct.vrna_param_s = type { i32, [8 x [8 x i32]], [31 x i32], [31 x i32], [31 x i32], [8 x [5 x [5 x i32]]], [8 x [5 x [5 x i32]]], [8 x [5 x [5 x i32]]], [8 x [5 x [5 x i32]]], [8 x [5 x [5 x i32]]], [8 x [5 x [5 x i32]]], [8 x [5 x i32]], [8 x [5 x i32]], [8 x [8 x [5 x [5 x i32]]]], [8 x [8 x [5 x [5 x [5 x i32]]]]], [8 x [8 x [5 x [5 x [5 x [5 x i32]]]]]], [5 x i32], double, i32, [8 x i32], i32, i32, i32, [200 x i32], [1401 x i8], [40 x i32], [241 x i8], [40 x i32], [1801 x i8], i32, i32, i32, [8 x [46 x i32]], i32, i32, double, %struct.vrna_md_s, [256 x i8] }
%struct.vrna_md_s = type { double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, [64 x i8], i32, i32, i32, i32, i32, double, double, double, [8 x i32], [21 x i16], [21 x [21 x i32]], [7 x [7 x float]] }
%struct.vrna_exp_param_s = type { i32, [8 x [8 x double]], [31 x double], [31 x double], [31 x double], [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]], [8 x [5 x double]], [8 x [5 x double]], [8 x [8 x [5 x [5 x double]]]], [8 x [8 x [5 x [5 x [5 x double]]]]], [8 x [8 x [5 x [5 x [5 x [5 x double]]]]]], [5 x [31 x double]], double, double, [8 x double], double, double, double, [40 x double], [40 x double], [40 x double], [1401 x i8], [40 x double], [241 x i8], [1801 x i8], double, double, double, [8 x [46 x double]], double, i32, double, double, double, double, %struct.vrna_md_s, [256 x i8] }
%struct.vrna_structured_domains_s = type { i8 }
%struct.vrna_unstructured_domain_s = type { i32, i32*, i32, i8**, i8**, i32*, double*, i32*, void (%struct.vrna_fc_s*, i8*)*, void (%struct.vrna_fc_s*, i8*)*, i32 (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, i8*, void (i8*)*, void (%struct.vrna_fc_s*, i32, i32, i32, double, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i32, i8*)* }
%struct.vrna_gr_aux_s = type { void (%struct.vrna_fc_s*, i8, i8*)*, i32 (%struct.vrna_fc_s*, i32, i32, i8*)*, i32 (%struct.vrna_fc_s*, i32, i32, i8*)*, i32 (%struct.vrna_fc_s*, i32, i32, i8*)*, i32 (%struct.vrna_fc_s*, i32, i32, i8*)*, void (%struct.vrna_fc_s*, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i8*)*, void (%struct.vrna_fc_s*, i32, i32, i8*)*, i8*, void (i8*)* }
%union.anon.9 = type { %struct.anon.14 }
%struct.anon.14 = type { i8**, i32, i8*, i16*, i16**, i16**, i16**, i8**, i32**, i32*, i32**, i16*, %struct.vrna_sc_s**, i32 }
%struct.vrna_sc_s = type { i32, i32, i8, i32**, double**, i32*, %struct.vrna_sc_bp_storage_t**, %union.anon.11, i32*, double*, i32 (i32, i32, i32, i32, i8, i8*)*, %struct.vrna_basepair_s* (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)*, i8*, void (i8*)* }
%struct.vrna_sc_bp_storage_t = type { i32, i32, i32 }
%union.anon.11 = type { %struct.anon.12 }
%struct.anon.12 = type { i32*, double* }
%struct.vrna_basepair_s = type { i32, i32 }
%struct.vrna_zsc_dat_s = type opaque
%struct.anon.6 = type { double*, double*, double*, double*, double*, double*, double*, double*, double, double*, double, double, double }
%struct.vrna_elem_prob_s = type { i32, i32, float, i32 }
%struct.helper_arrays = type { double*, double*, double*, i32, double**, double* }
%struct.constraints_helper = type { %struct.hc_ext_def_dat, i8 (i32, i32, i32, i32, i8, i8*)*, %struct.hc_hp_def_dat, i8 (i32, i32, i32, i32, i8, i8*)*, %struct.hc_int_def_dat, i8 (i32, i32, i32, i32, i8*)*, %struct.hc_mb_def_dat, i8 (i32, i32, i32, i32, i8, i8*)*, %struct.sc_ext_exp_dat, %struct.sc_hp_exp_dat, %struct.sc_int_exp_dat, %struct.sc_mb_exp_dat }
%struct.hc_ext_def_dat = type { i32, i8*, i8**, i32*, i32*, i8*, i8 (i32, i32, i32, i32, i8, i8*)* }
%struct.hc_hp_def_dat = type { i32, i8*, i8**, i32*, i32*, i8*, i8 (i32, i32, i32, i32, i8, i8*)* }
%struct.hc_int_def_dat = type { i8*, i8**, i32*, i32, i32*, i8*, i8 (i32, i32, i32, i32, i8, i8*)* }
%struct.hc_mb_def_dat = type { i8*, i8**, i32*, i32, i32*, i8*, i8 (i32, i32, i32, i32, i8, i8*)* }
%struct.sc_ext_exp_dat = type { double**, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)*, double (i32, i32, %struct.sc_ext_exp_dat*)*, double (i32, i32, i32, %struct.sc_ext_exp_dat*)*, double (i32, i32, i32, i32, i8, i8*)*, i8*, i32, i32**, double***, double (i32, i32, i32, i32, i8, i8*)**, i8** }
%struct.sc_hp_exp_dat = type { i32, i32, i32**, i32*, double**, double***, double*, double**, double**, double***, double (i32, i32, i32, i32, i8, i8*)*, i8*, double (i32, i32, i32, i32, i8, i8*)**, i8**, double (i32, i32, %struct.sc_hp_exp_dat*)*, double (i32, i32, %struct.sc_hp_exp_dat*)* }
%struct.sc_int_exp_dat = type { i32, i32, i32**, i32*, double**, double***, double*, double**, double**, double***, double*, double**, double (i32, i32, i32, i32, i8, i8*)*, i8*, double (i32, i32, i32, i32, i8, i8*)**, i8**, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* }
%struct.sc_mb_exp_dat = type { i32, i32, i32**, i32*, double**, double***, double*, double**, double**, double***, double (i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, i8, i8*)*, i8*, double (i32, i32, i32, i32, i8, i8*)**, i8** }
%struct.anon.10 = type { i8*, i16*, i16*, i8*, i8*, %struct.vrna_sc_s* }
%struct.anon.0 = type { i8** }
%struct.anon.13 = type { i32**, double** }

@.str = private unnamed_addr constant [83 x i8] c"vrna_mean_bp_distance_pr: p == NULL. You need to supply a valid probability matrix\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"vrna_mean_bp_distance: run vrna_pf_fold first!\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"vrna_mean_bp_distance: exp_matrices == NULL!\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"vrna_mean_bp_distance: probs==NULL!\00", align 1
@.str.4 = private unnamed_addr constant [72 x i8] c"vrna_co_pf_probs: numeric instability detected, probability below zero!\00", align 1
@.str.5 = private unnamed_addr constant [84 x i8] c"%d overflows occurred while backtracking;\0Ayou might try a smaller pf_scale than %g\0A\00", align 1
@.str.6 = private unnamed_addr constant [66 x i8] c"bppm calculations have to be done after calling forward recursion\00", align 1
@.str.7 = private unnamed_addr constant [54 x i8] c"hc_cb@exterior_loops.c: Unrecognized decomposition %d\00", align 1
@.str.8 = private unnamed_addr constant [56 x i8] c"hc_sn@multibranch_hc.inc: Unrecognized decomposition %d\00", align 1
@.str.9 = private unnamed_addr constant [70 x i8] c"hc_mb_cb_def_window@multibranch_hc.inc: Unrecognized decomposition %d\00", align 1
@.str.10 = private unnamed_addr constant [63 x i8] c"hc_mb_cb_def@multibranch_hc.inc: Unrecognized decomposition %d\00", align 1
@.str.11 = private unnamed_addr constant [34 x i8] c"P close to overflow: %d %d %g %g\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @vrna_pr_structure(%struct.vrna_fc_s* noundef %0, i8* noundef %1) #0 {
  %3 = alloca double, align 8
  %4 = alloca %struct.vrna_fc_s*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca %struct.vrna_exp_param_s*, align 8
  %13 = alloca i32, align 4
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %4, align 8
  store i8* %1, i8** %5, align 8
  %14 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %15 = icmp ne %struct.vrna_fc_s* %14, null
  br i1 %15, label %16, label %155

16:                                               ; preds = %2
  %17 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %18 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %17, i32 0, i32 15
  %19 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %18, align 8
  %20 = icmp ne %struct.vrna_exp_param_s* %19, null
  br i1 %20, label %21, label %155

21:                                               ; preds = %16
  %22 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %23 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %22, i32 0, i32 13
  %24 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %23, align 8
  %25 = icmp ne %struct.vrna_mx_pf_s* %24, null
  br i1 %25, label %26, label %155

26:                                               ; preds = %21
  %27 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %28 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %27, i32 0, i32 13
  %29 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %28, align 8
  %30 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %29, i32 0, i32 4
  %31 = bitcast %union.anon.5* %30 to %struct.anon.6*
  %32 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %31, i32 0, i32 0
  %33 = load double*, double** %32, align 8
  %34 = icmp ne double* %33, null
  br i1 %34, label %35, label %155

35:                                               ; preds = %26
  %36 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %37 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %36, i32 0, i32 15
  %38 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %37, align 8
  store %struct.vrna_exp_param_s* %38, %struct.vrna_exp_param_s** %12, align 8
  %39 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %40 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %39, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %6, align 4
  %42 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %43 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %42, i32 0, i32 14
  %44 = load %struct.vrna_param_s*, %struct.vrna_param_s** %43, align 8
  %45 = getelementptr inbounds %struct.vrna_param_s, %struct.vrna_param_s* %44, i32 0, i32 36
  %46 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %45, i32 0, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = srem i32 %47, 2
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %50, label %72

50:                                               ; preds = %35
  %51 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %52 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %51, i32 0, i32 14
  %53 = load %struct.vrna_param_s*, %struct.vrna_param_s** %52, align 8
  %54 = getelementptr inbounds %struct.vrna_param_s, %struct.vrna_param_s* %53, i32 0, i32 36
  %55 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %54, i32 0, i32 3
  %56 = load i32, i32* %55, align 4
  store i32 %56, i32* %13, align 4
  %57 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %58 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %57, i32 0, i32 14
  %59 = load %struct.vrna_param_s*, %struct.vrna_param_s** %58, align 8
  %60 = getelementptr inbounds %struct.vrna_param_s, %struct.vrna_param_s* %59, i32 0, i32 36
  %61 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %60, i32 0, i32 3
  store i32 2, i32* %61, align 4
  %62 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %63 = load i8*, i8** %5, align 8
  %64 = call float @vrna_eval_structure(%struct.vrna_fc_s* noundef %62, i8* noundef %63)
  %65 = fpext float %64 to double
  store double %65, double* %7, align 8
  %66 = load i32, i32* %13, align 4
  %67 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %68 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %67, i32 0, i32 14
  %69 = load %struct.vrna_param_s*, %struct.vrna_param_s** %68, align 8
  %70 = getelementptr inbounds %struct.vrna_param_s, %struct.vrna_param_s* %69, i32 0, i32 36
  %71 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %70, i32 0, i32 3
  store i32 %66, i32* %71, align 4
  br label %77

72:                                               ; preds = %35
  %73 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %74 = load i8*, i8** %5, align 8
  %75 = call float @vrna_eval_structure(%struct.vrna_fc_s* noundef %73, i8* noundef %74)
  %76 = fpext float %75 to double
  store double %76, double* %7, align 8
  br label %77

77:                                               ; preds = %72, %50
  %78 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %12, align 8
  %79 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %78, i32 0, i32 36
  %80 = load double, double* %79, align 8
  %81 = fdiv double %80, 1.000000e+03
  store double %81, double* %8, align 8
  %82 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %12, align 8
  %83 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %82, i32 0, i32 40
  %84 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %83, i32 0, i32 9
  %85 = load i32, i32* %84, align 4
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %95

87:                                               ; preds = %77
  %88 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %89 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %88, i32 0, i32 13
  %90 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %89, align 8
  %91 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %90, i32 0, i32 4
  %92 = bitcast %union.anon.5* %91 to %struct.anon.6*
  %93 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %92, i32 0, i32 8
  %94 = load double, double* %93, align 8
  br label %113

95:                                               ; preds = %77
  %96 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %97 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %96, i32 0, i32 13
  %98 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %97, align 8
  %99 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %98, i32 0, i32 4
  %100 = bitcast %union.anon.5* %99 to %struct.anon.6*
  %101 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %100, i32 0, i32 0
  %102 = load double*, double** %101, align 8
  %103 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %104 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %103, i32 0, i32 16
  %105 = load i32*, i32** %104, align 8
  %106 = getelementptr inbounds i32, i32* %105, i64 1
  %107 = load i32, i32* %106, align 4
  %108 = load i32, i32* %6, align 4
  %109 = sub i32 %107, %108
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds double, double* %102, i64 %110
  %112 = load double, double* %111, align 8
  br label %113

113:                                              ; preds = %95, %87
  %114 = phi double [ %94, %87 ], [ %112, %95 ]
  store double %114, double* %9, align 8
  %115 = load double, double* %9, align 8
  %116 = call double @log(double noundef %115) #5
  %117 = fneg double %116
  %118 = load i32, i32* %6, align 4
  %119 = uitofp i32 %118 to double
  %120 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %12, align 8
  %121 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %120, i32 0, i32 37
  %122 = load double, double* %121, align 8
  %123 = call double @log(double noundef %122) #5
  %124 = fneg double %119
  %125 = call double @llvm.fmuladd.f64(double %124, double %123, double %117)
  %126 = load double, double* %8, align 8
  %127 = fmul double %125, %126
  store double %127, double* %10, align 8
  %128 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %129 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %128, i32 0, i32 0
  %130 = load i32, i32* %129, align 8
  %131 = icmp eq i32 %130, 1
  br i1 %131, label %132, label %147

132:                                              ; preds = %113
  %133 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %134 = load i8*, i8** %5, align 8
  %135 = call float @vrna_eval_covar_structure(%struct.vrna_fc_s* noundef %133, i8* noundef %134)
  %136 = fpext float %135 to double
  %137 = load double, double* %7, align 8
  %138 = fsub double %137, %136
  store double %138, double* %7, align 8
  %139 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %140 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %139, i32 0, i32 24
  %141 = bitcast %union.anon.9* %140 to %struct.anon.14*
  %142 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %141, i32 0, i32 1
  %143 = load i32, i32* %142, align 8
  %144 = uitofp i32 %143 to double
  %145 = load double, double* %10, align 8
  %146 = fdiv double %145, %144
  store double %146, double* %10, align 8
  br label %147

147:                                              ; preds = %132, %113
  %148 = load double, double* %10, align 8
  %149 = load double, double* %7, align 8
  %150 = fsub double %148, %149
  %151 = load double, double* %8, align 8
  %152 = fdiv double %150, %151
  %153 = call double @exp(double noundef %152) #5
  store double %153, double* %11, align 8
  %154 = load double, double* %11, align 8
  store double %154, double* %3, align 8
  br label %156

155:                                              ; preds = %26, %21, %16, %2
  store double -1.000000e+00, double* %3, align 8
  br label %156

156:                                              ; preds = %155, %147
  %157 = load double, double* %3, align 8
  ret double %157
}

declare dso_local float @vrna_eval_structure(%struct.vrna_fc_s* noundef, i8* noundef) #1

; Function Attrs: nounwind
declare dso_local double @log(double noundef) #2

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fmuladd.f64(double, double, double) #3

declare dso_local float @vrna_eval_covar_structure(%struct.vrna_fc_s* noundef, i8* noundef) #1

; Function Attrs: nounwind
declare dso_local double @exp(double noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @vrna_pr_energy(%struct.vrna_fc_s* noundef %0, double noundef %1) #0 {
  %3 = alloca double, align 8
  %4 = alloca %struct.vrna_fc_s*, align 8
  %5 = alloca double, align 8
  %6 = alloca i32, align 4
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca %struct.vrna_exp_param_s*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %4, align 8
  store double %1, double* %5, align 8
  %12 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %13 = icmp ne %struct.vrna_fc_s* %12, null
  br i1 %13, label %14, label %111

14:                                               ; preds = %2
  %15 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %16 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %15, i32 0, i32 15
  %17 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %16, align 8
  %18 = icmp ne %struct.vrna_exp_param_s* %17, null
  br i1 %18, label %19, label %111

19:                                               ; preds = %14
  %20 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %21 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %20, i32 0, i32 13
  %22 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %21, align 8
  %23 = icmp ne %struct.vrna_mx_pf_s* %22, null
  br i1 %23, label %24, label %111

24:                                               ; preds = %19
  %25 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %26 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %25, i32 0, i32 13
  %27 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %26, align 8
  %28 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %27, i32 0, i32 4
  %29 = bitcast %union.anon.5* %28 to %struct.anon.6*
  %30 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %29, i32 0, i32 0
  %31 = load double*, double** %30, align 8
  %32 = icmp ne double* %31, null
  br i1 %32, label %33, label %111

33:                                               ; preds = %24
  %34 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %35 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %34, i32 0, i32 15
  %36 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %35, align 8
  store %struct.vrna_exp_param_s* %36, %struct.vrna_exp_param_s** %11, align 8
  %37 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %38 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %37, i32 0, i32 1
  %39 = load i32, i32* %38, align 4
  store i32 %39, i32* %6, align 4
  %40 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %11, align 8
  %41 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %40, i32 0, i32 36
  %42 = load double, double* %41, align 8
  %43 = fdiv double %42, 1.000000e+03
  store double %43, double* %7, align 8
  %44 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %11, align 8
  %45 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %44, i32 0, i32 40
  %46 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %45, i32 0, i32 9
  %47 = load i32, i32* %46, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %57

49:                                               ; preds = %33
  %50 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %51 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %50, i32 0, i32 13
  %52 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %51, align 8
  %53 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %52, i32 0, i32 4
  %54 = bitcast %union.anon.5* %53 to %struct.anon.6*
  %55 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %54, i32 0, i32 8
  %56 = load double, double* %55, align 8
  br label %75

57:                                               ; preds = %33
  %58 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %59 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %58, i32 0, i32 13
  %60 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %59, align 8
  %61 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %60, i32 0, i32 4
  %62 = bitcast %union.anon.5* %61 to %struct.anon.6*
  %63 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %62, i32 0, i32 0
  %64 = load double*, double** %63, align 8
  %65 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %66 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %65, i32 0, i32 16
  %67 = load i32*, i32** %66, align 8
  %68 = getelementptr inbounds i32, i32* %67, i64 1
  %69 = load i32, i32* %68, align 4
  %70 = load i32, i32* %6, align 4
  %71 = sub i32 %69, %70
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds double, double* %64, i64 %72
  %74 = load double, double* %73, align 8
  br label %75

75:                                               ; preds = %57, %49
  %76 = phi double [ %56, %49 ], [ %74, %57 ]
  store double %76, double* %8, align 8
  %77 = load double, double* %8, align 8
  %78 = call double @log(double noundef %77) #5
  %79 = fneg double %78
  %80 = load i32, i32* %6, align 4
  %81 = uitofp i32 %80 to double
  %82 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %11, align 8
  %83 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %82, i32 0, i32 37
  %84 = load double, double* %83, align 8
  %85 = call double @log(double noundef %84) #5
  %86 = fneg double %81
  %87 = call double @llvm.fmuladd.f64(double %86, double %85, double %79)
  %88 = load double, double* %7, align 8
  %89 = fmul double %87, %88
  store double %89, double* %9, align 8
  %90 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %91 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %90, i32 0, i32 0
  %92 = load i32, i32* %91, align 8
  %93 = icmp eq i32 %92, 1
  br i1 %93, label %94, label %103

94:                                               ; preds = %75
  %95 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %96 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %95, i32 0, i32 24
  %97 = bitcast %union.anon.9* %96 to %struct.anon.14*
  %98 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %97, i32 0, i32 1
  %99 = load i32, i32* %98, align 8
  %100 = uitofp i32 %99 to double
  %101 = load double, double* %9, align 8
  %102 = fdiv double %101, %100
  store double %102, double* %9, align 8
  br label %103

103:                                              ; preds = %94, %75
  %104 = load double, double* %9, align 8
  %105 = load double, double* %5, align 8
  %106 = fsub double %104, %105
  %107 = load double, double* %7, align 8
  %108 = fdiv double %106, %107
  %109 = call double @exp(double noundef %108) #5
  store double %109, double* %10, align 8
  %110 = load double, double* %10, align 8
  store double %110, double* %3, align 8
  br label %112

111:                                              ; preds = %24, %19, %14, %2
  store double -1.000000e+00, double* %3, align 8
  br label %112

112:                                              ; preds = %111, %103
  %113 = load double, double* %3, align 8
  ret double %113
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @vrna_pairing_probs(%struct.vrna_fc_s* noundef %0, i8* noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.vrna_fc_s*, align 8
  %5 = alloca i8*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %4, align 8
  store i8* %1, i8** %5, align 8
  %6 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %7 = icmp ne %struct.vrna_fc_s* %6, null
  br i1 %7, label %8, label %12

8:                                                ; preds = %2
  %9 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %10 = load i8*, i8** %5, align 8
  %11 = call i32 @pf_create_bppm(%struct.vrna_fc_s* noundef %9, i8* noundef %10)
  store i32 %11, i32* %3, align 4
  br label %13

12:                                               ; preds = %2
  store i32 0, i32* %3, align 4
  br label %13

13:                                               ; preds = %12, %8
  %14 = load i32, i32* %3, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @pf_create_bppm(%struct.vrna_fc_s* noundef %0, i8* noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.vrna_fc_s*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i32, align 4
  %15 = alloca double, align 8
  %16 = alloca double*, align 8
  %17 = alloca double*, align 8
  %18 = alloca double*, align 8
  %19 = alloca double*, align 8
  %20 = alloca double*, align 8
  %21 = alloca i32, align 4
  %22 = alloca %struct.vrna_hc_s*, align 8
  %23 = alloca %struct.vrna_sc_s*, align 8
  %24 = alloca i32*, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca %struct.vrna_exp_param_s*, align 8
  %30 = alloca %struct.vrna_mx_pf_s*, align 8
  %31 = alloca %struct.vrna_md_s*, align 8
  %32 = alloca %struct.vrna_unstructured_domain_s*, align 8
  %33 = alloca double, align 8
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca %struct.vrna_elem_prob_s*, align 8
  %37 = alloca double*, align 8
  %38 = alloca double**, align 8
  %39 = alloca double**, align 8
  %40 = alloca double**, align 8
  %41 = alloca %struct.helper_arrays*, align 8
  %42 = alloca %struct.constraints_helper*, align 8
  %43 = alloca void (%struct.vrna_fc_s*, i32, %struct.vrna_elem_prob_s**, i32*, i32*, double*, i32*, %struct.constraints_helper*)*, align 8
  %44 = alloca void (%struct.vrna_fc_s*, i32, %struct.helper_arrays*, double*, i32*, %struct.constraints_helper*)*, align 8
  %45 = alloca %struct.vrna_basepair_s*, align 8
  %46 = alloca %struct.vrna_basepair_s*, align 8
  %47 = alloca double, align 8
  %48 = alloca i8*, align 8
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 0, i32* %14, align 4
  store double 0.000000e+00, double* %15, align 8
  %52 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %53 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %52, i32 0, i32 1
  %54 = load i32, i32* %53, align 4
  store i32 %54, i32* %7, align 4
  %55 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %56 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %55, i32 0, i32 0
  %57 = load i32, i32* %56, align 8
  %58 = icmp eq i32 %57, 1
  br i1 %58, label %59, label %65

59:                                               ; preds = %2
  %60 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %61 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %60, i32 0, i32 24
  %62 = bitcast %union.anon.9* %61 to %struct.anon.14*
  %63 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %62, i32 0, i32 9
  %64 = load i32*, i32** %63, align 8
  br label %66

65:                                               ; preds = %2
  br label %66

66:                                               ; preds = %65, %59
  %67 = phi i32* [ %64, %59 ], [ null, %65 ]
  store i32* %67, i32** %12, align 8
  %68 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %69 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %68, i32 0, i32 15
  %70 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %69, align 8
  store %struct.vrna_exp_param_s* %70, %struct.vrna_exp_param_s** %29, align 8
  %71 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %29, align 8
  %72 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %71, i32 0, i32 40
  store %struct.vrna_md_s* %72, %struct.vrna_md_s** %31, align 8
  %73 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %74 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %73, i32 0, i32 16
  %75 = load i32*, i32** %74, align 8
  store i32* %75, i32** %24, align 8
  %76 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %77 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %76, i32 0, i32 17
  %78 = load i32*, i32** %77, align 8
  store i32* %78, i32** %13, align 8
  %79 = load %struct.vrna_md_s*, %struct.vrna_md_s** %31, align 8
  %80 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %79, i32 0, i32 9
  %81 = load i32, i32* %80, align 4
  store i32 %81, i32* %25, align 4
  %82 = load %struct.vrna_md_s*, %struct.vrna_md_s** %31, align 8
  %83 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %82, i32 0, i32 10
  %84 = load i32, i32* %83, align 8
  store i32 %84, i32* %21, align 4
  %85 = load %struct.vrna_md_s*, %struct.vrna_md_s** %31, align 8
  %86 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %85, i32 0, i32 18
  %87 = load i32, i32* %86, align 4
  store i32 %87, i32* %26, align 4
  %88 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %89 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %88, i32 0, i32 11
  %90 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %89, align 8
  store %struct.vrna_hc_s* %90, %struct.vrna_hc_s** %22, align 8
  %91 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %92 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %91, i32 0, i32 24
  %93 = bitcast %union.anon.9* %92 to %struct.anon.10*
  %94 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %93, i32 0, i32 5
  %95 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %94, align 8
  store %struct.vrna_sc_s* %95, %struct.vrna_sc_s** %23, align 8
  %96 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %97 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %96, i32 0, i32 22
  %98 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %97, align 8
  store %struct.vrna_unstructured_domain_s* %98, %struct.vrna_unstructured_domain_s** %32, align 8
  %99 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %100 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %99, i32 0, i32 13
  %101 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %100, align 8
  store %struct.vrna_mx_pf_s* %101, %struct.vrna_mx_pf_s** %30, align 8
  %102 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %30, align 8
  %103 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %102, i32 0, i32 4
  %104 = bitcast %union.anon.5* %103 to %struct.anon.6*
  %105 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %104, i32 0, i32 1
  %106 = load double*, double** %105, align 8
  store double* %106, double** %16, align 8
  %107 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %30, align 8
  %108 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %107, i32 0, i32 4
  %109 = bitcast %union.anon.5* %108 to %struct.anon.6*
  %110 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %109, i32 0, i32 7
  %111 = load double*, double** %110, align 8
  store double* %111, double** %17, align 8
  %112 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %30, align 8
  %113 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %112, i32 0, i32 4
  %114 = bitcast %union.anon.5* %113 to %struct.anon.6*
  %115 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %114, i32 0, i32 4
  %116 = load double*, double** %115, align 8
  store double* %116, double** %18, align 8
  %117 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %30, align 8
  %118 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %117, i32 0, i32 4
  %119 = bitcast %union.anon.5* %118 to %struct.anon.6*
  %120 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %119, i32 0, i32 5
  %121 = load double*, double** %120, align 8
  store double* %121, double** %19, align 8
  %122 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %30, align 8
  %123 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %122, i32 0, i32 4
  %124 = bitcast %union.anon.5* %123 to %struct.anon.6*
  %125 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %124, i32 0, i32 6
  %126 = load double*, double** %125, align 8
  store double* %126, double** %20, align 8
  %127 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %32, align 8
  %128 = icmp ne %struct.vrna_unstructured_domain_s* %127, null
  br i1 %128, label %129, label %134

129:                                              ; preds = %66
  %130 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %32, align 8
  %131 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %130, i32 0, i32 11
  %132 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %131, align 8
  %133 = icmp ne double (%struct.vrna_fc_s*, i32, i32, i32, i8*)* %132, null
  br label %134

134:                                              ; preds = %129, %66
  %135 = phi i1 [ false, %66 ], [ %133, %129 ]
  %136 = zext i1 %135 to i64
  %137 = select i1 %135, i32 1, i32 0
  store i32 %137, i32* %27, align 4
  %138 = load i32, i32* %27, align 4
  %139 = icmp ne i32 %138, 0
  br i1 %139, label %140, label %145

140:                                              ; preds = %134
  %141 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %32, align 8
  %142 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %141, i32 0, i32 14
  %143 = load void (%struct.vrna_fc_s*, i32, i32, i32, double, i8*)*, void (%struct.vrna_fc_s*, i32, i32, i32, double, i8*)** %142, align 8
  %144 = icmp ne void (%struct.vrna_fc_s*, i32, i32, i32, double, i8*)* %143, null
  br label %145

145:                                              ; preds = %140, %134
  %146 = phi i1 [ false, %134 ], [ %144, %140 ]
  %147 = zext i1 %146 to i64
  %148 = select i1 %146, i32 1, i32 0
  store i32 %148, i32* %28, align 4
  %149 = load double*, double** %16, align 8
  %150 = icmp ne double* %149, null
  br i1 %150, label %151, label %852

151:                                              ; preds = %145
  %152 = load double*, double** %18, align 8
  %153 = icmp ne double* %152, null
  br i1 %153, label %154, label %852

154:                                              ; preds = %151
  %155 = load i32, i32* %25, align 4
  %156 = icmp ne i32 %155, 0
  br i1 %156, label %157, label %164

157:                                              ; preds = %154
  %158 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %30, align 8
  %159 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %158, i32 0, i32 4
  %160 = bitcast %union.anon.5* %159 to %struct.anon.6*
  %161 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %160, i32 0, i32 9
  %162 = load double*, double** %161, align 8
  %163 = icmp ne double* %162, null
  br i1 %163, label %170, label %852

164:                                              ; preds = %154
  %165 = load double*, double** %19, align 8
  %166 = icmp ne double* %165, null
  br i1 %166, label %167, label %852

167:                                              ; preds = %164
  %168 = load double*, double** %20, align 8
  %169 = icmp ne double* %168, null
  br i1 %169, label %170, label %852

170:                                              ; preds = %167, %157
  %171 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %29, align 8
  %172 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %171, i32 0, i32 40
  %173 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %172, i32 0, i32 10
  %174 = load i32, i32* %173, align 8
  store i32 %174, i32* %21, align 4
  %175 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %29, align 8
  %176 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %175, i32 0, i32 36
  %177 = load double, double* %176, align 8
  %178 = fdiv double %177, 1.000000e+01
  store double %178, double* %33, align 8
  store i32 5, i32* %34, align 4
  store i32 0, i32* %35, align 4
  %179 = load i32, i32* %34, align 4
  %180 = sext i32 %179 to i64
  %181 = mul i64 16, %180
  %182 = trunc i64 %181 to i32
  %183 = call i8* @vrna_alloc(i32 noundef %182)
  %184 = bitcast i8* %183 to %struct.vrna_elem_prob_s*
  store %struct.vrna_elem_prob_s* %184, %struct.vrna_elem_prob_s** %36, align 8
  store double* null, double** %37, align 8
  store double** null, double*** %38, align 8
  store double** null, double*** %39, align 8
  store double** null, double*** %40, align 8
  %185 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %186 = call %struct.helper_arrays* @get_ml_helper_arrays(%struct.vrna_fc_s* noundef %185)
  store %struct.helper_arrays* %186, %struct.helper_arrays** %41, align 8
  %187 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %188 = call %struct.constraints_helper* @get_constraints_helper(%struct.vrna_fc_s* noundef %187)
  store %struct.constraints_helper* %188, %struct.constraints_helper** %42, align 8
  %189 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %190 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %189, i32 0, i32 0
  %191 = load i32, i32* %190, align 8
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %194

193:                                              ; preds = %170
  store void (%struct.vrna_fc_s*, i32, %struct.vrna_elem_prob_s**, i32*, i32*, double*, i32*, %struct.constraints_helper*)* @compute_bpp_internal, void (%struct.vrna_fc_s*, i32, %struct.vrna_elem_prob_s**, i32*, i32*, double*, i32*, %struct.constraints_helper*)** %43, align 8
  store void (%struct.vrna_fc_s*, i32, %struct.helper_arrays*, double*, i32*, %struct.constraints_helper*)* @compute_bpp_multibranch, void (%struct.vrna_fc_s*, i32, %struct.helper_arrays*, double*, i32*, %struct.constraints_helper*)** %44, align 8
  br label %195

194:                                              ; preds = %170
  store void (%struct.vrna_fc_s*, i32, %struct.vrna_elem_prob_s**, i32*, i32*, double*, i32*, %struct.constraints_helper*)* @compute_bpp_internal_comparative, void (%struct.vrna_fc_s*, i32, %struct.vrna_elem_prob_s**, i32*, i32*, double*, i32*, %struct.constraints_helper*)** %43, align 8
  store void (%struct.vrna_fc_s*, i32, %struct.helper_arrays*, double*, i32*, %struct.constraints_helper*)* @compute_bpp_multibranch_comparative, void (%struct.vrna_fc_s*, i32, %struct.helper_arrays*, double*, i32*, %struct.constraints_helper*)** %44, align 8
  br label %195

195:                                              ; preds = %194, %193
  store double 0.000000e+00, double* %15, align 8
  %196 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %197 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %196, i32 0, i32 8
  %198 = load i32, i32* %197, align 8
  %199 = icmp ugt i32 %198, 1
  br i1 %199, label %200, label %288

200:                                              ; preds = %195
  %201 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %202 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %201, i32 0, i32 8
  %203 = load i32, i32* %202, align 8
  %204 = zext i32 %203 to i64
  %205 = mul i64 8, %204
  %206 = trunc i64 %205 to i32
  %207 = call i8* @vrna_alloc(i32 noundef %206)
  %208 = bitcast i8* %207 to double*
  store double* %208, double** %37, align 8
  %209 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %210 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %209, i32 0, i32 8
  %211 = load i32, i32* %210, align 8
  %212 = zext i32 %211 to i64
  %213 = mul i64 8, %212
  %214 = trunc i64 %213 to i32
  %215 = call i8* @vrna_alloc(i32 noundef %214)
  %216 = bitcast i8* %215 to double**
  store double** %216, double*** %38, align 8
  store i32 0, i32* %6, align 4
  br label %217

217:                                              ; preds = %235, %200
  %218 = load i32, i32* %6, align 4
  %219 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %220 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %219, i32 0, i32 8
  %221 = load i32, i32* %220, align 8
  %222 = icmp ult i32 %218, %221
  br i1 %222, label %223, label %238

223:                                              ; preds = %217
  %224 = load i32, i32* %7, align 4
  %225 = add nsw i32 %224, 1
  %226 = sext i32 %225 to i64
  %227 = mul i64 8, %226
  %228 = trunc i64 %227 to i32
  %229 = call i8* @vrna_alloc(i32 noundef %228)
  %230 = bitcast i8* %229 to double*
  %231 = load double**, double*** %38, align 8
  %232 = load i32, i32* %6, align 4
  %233 = zext i32 %232 to i64
  %234 = getelementptr inbounds double*, double** %231, i64 %233
  store double* %230, double** %234, align 8
  br label %235

235:                                              ; preds = %223
  %236 = load i32, i32* %6, align 4
  %237 = add i32 %236, 1
  store i32 %237, i32* %6, align 4
  br label %217, !llvm.loop !4

238:                                              ; preds = %217
  %239 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %240 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %239, i32 0, i32 8
  %241 = load i32, i32* %240, align 8
  %242 = zext i32 %241 to i64
  %243 = mul i64 8, %242
  %244 = trunc i64 %243 to i32
  %245 = call i8* @vrna_alloc(i32 noundef %244)
  %246 = bitcast i8* %245 to double**
  store double** %246, double*** %39, align 8
  %247 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %248 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %247, i32 0, i32 8
  %249 = load i32, i32* %248, align 8
  %250 = zext i32 %249 to i64
  %251 = mul i64 8, %250
  %252 = trunc i64 %251 to i32
  %253 = call i8* @vrna_alloc(i32 noundef %252)
  %254 = bitcast i8* %253 to double**
  store double** %254, double*** %40, align 8
  store i32 0, i32* %6, align 4
  br label %255

255:                                              ; preds = %284, %238
  %256 = load i32, i32* %6, align 4
  %257 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %258 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %257, i32 0, i32 8
  %259 = load i32, i32* %258, align 8
  %260 = icmp ult i32 %256, %259
  br i1 %260, label %261, label %287

261:                                              ; preds = %255
  %262 = load i32, i32* %7, align 4
  %263 = add nsw i32 %262, 1
  %264 = sext i32 %263 to i64
  %265 = mul i64 8, %264
  %266 = trunc i64 %265 to i32
  %267 = call i8* @vrna_alloc(i32 noundef %266)
  %268 = bitcast i8* %267 to double*
  %269 = load double**, double*** %39, align 8
  %270 = load i32, i32* %6, align 4
  %271 = zext i32 %270 to i64
  %272 = getelementptr inbounds double*, double** %269, i64 %271
  store double* %268, double** %272, align 8
  %273 = load i32, i32* %7, align 4
  %274 = add nsw i32 %273, 1
  %275 = sext i32 %274 to i64
  %276 = mul i64 8, %275
  %277 = trunc i64 %276 to i32
  %278 = call i8* @vrna_alloc(i32 noundef %277)
  %279 = bitcast i8* %278 to double*
  %280 = load double**, double*** %40, align 8
  %281 = load i32, i32* %6, align 4
  %282 = zext i32 %281 to i64
  %283 = getelementptr inbounds double*, double** %280, i64 %282
  store double* %279, double** %283, align 8
  br label %284

284:                                              ; preds = %261
  %285 = load i32, i32* %6, align 4
  %286 = add i32 %285, 1
  store i32 %286, i32* %6, align 4
  br label %255, !llvm.loop !6

287:                                              ; preds = %255
  br label %288

288:                                              ; preds = %287, %195
  store i32 1, i32* %8, align 4
  br label %289

289:                                              ; preds = %326, %288
  %290 = load i32, i32* %8, align 4
  %291 = load i32, i32* %7, align 4
  %292 = icmp sle i32 %290, %291
  br i1 %292, label %293, label %329

293:                                              ; preds = %289
  %294 = load i32, i32* %8, align 4
  store i32 %294, i32* %9, align 4
  br label %295

295:                                              ; preds = %322, %293
  %296 = load i32, i32* %9, align 4
  %297 = load i32, i32* %8, align 4
  %298 = load i32, i32* %26, align 4
  %299 = add nsw i32 %297, %298
  %300 = load i32, i32* %7, align 4
  %301 = icmp slt i32 %299, %300
  br i1 %301, label %302, label %306

302:                                              ; preds = %295
  %303 = load i32, i32* %8, align 4
  %304 = load i32, i32* %26, align 4
  %305 = add nsw i32 %303, %304
  br label %308

306:                                              ; preds = %295
  %307 = load i32, i32* %7, align 4
  br label %308

308:                                              ; preds = %306, %302
  %309 = phi i32 [ %305, %302 ], [ %307, %306 ]
  %310 = icmp sle i32 %296, %309
  br i1 %310, label %311, label %325

311:                                              ; preds = %308
  %312 = load double*, double** %18, align 8
  %313 = load i32*, i32** %24, align 8
  %314 = load i32, i32* %8, align 4
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds i32, i32* %313, i64 %315
  %317 = load i32, i32* %316, align 4
  %318 = load i32, i32* %9, align 4
  %319 = sub nsw i32 %317, %318
  %320 = sext i32 %319 to i64
  %321 = getelementptr inbounds double, double* %312, i64 %320
  store double 0.000000e+00, double* %321, align 8
  br label %322

322:                                              ; preds = %311
  %323 = load i32, i32* %9, align 4
  %324 = add nsw i32 %323, 1
  store i32 %324, i32* %9, align 4
  br label %295, !llvm.loop !7

325:                                              ; preds = %308
  br label %326

326:                                              ; preds = %325
  %327 = load i32, i32* %8, align 4
  %328 = add nsw i32 %327, 1
  store i32 %328, i32* %8, align 4
  br label %289, !llvm.loop !8

329:                                              ; preds = %289
  %330 = load i32, i32* %25, align 4
  %331 = icmp ne i32 %330, 0
  br i1 %331, label %332, label %335

332:                                              ; preds = %329
  %333 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %334 = load %struct.constraints_helper*, %struct.constraints_helper** %42, align 8
  call void @bppm_circ(%struct.vrna_fc_s* noundef %333, %struct.constraints_helper* noundef %334)
  br label %338

335:                                              ; preds = %329
  %336 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %337 = load %struct.constraints_helper*, %struct.constraints_helper** %42, align 8
  call void @compute_bpp_external(%struct.vrna_fc_s* noundef %336, %struct.constraints_helper* noundef %337)
  br label %338

338:                                              ; preds = %335, %332
  %339 = load i32, i32* %7, align 4
  store i32 %339, i32* %10, align 4
  %340 = load void (%struct.vrna_fc_s*, i32, %struct.vrna_elem_prob_s**, i32*, i32*, double*, i32*, %struct.constraints_helper*)*, void (%struct.vrna_fc_s*, i32, %struct.vrna_elem_prob_s**, i32*, i32*, double*, i32*, %struct.constraints_helper*)** %43, align 8
  %341 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %342 = load i32, i32* %10, align 4
  %343 = load %struct.constraints_helper*, %struct.constraints_helper** %42, align 8
  call void %340(%struct.vrna_fc_s* noundef %341, i32 noundef %342, %struct.vrna_elem_prob_s** noundef %36, i32* noundef %35, i32* noundef %34, double* noundef %15, i32* noundef %14, %struct.constraints_helper* noundef %343)
  %344 = load i32, i32* %7, align 4
  %345 = sub nsw i32 %344, 1
  store i32 %345, i32* %10, align 4
  br label %346

346:                                              ; preds = %379, %338
  %347 = load i32, i32* %10, align 4
  %348 = load i32, i32* %26, align 4
  %349 = add nsw i32 %348, 1
  %350 = icmp sgt i32 %347, %349
  br i1 %350, label %351, label %382

351:                                              ; preds = %346
  %352 = load void (%struct.vrna_fc_s*, i32, %struct.vrna_elem_prob_s**, i32*, i32*, double*, i32*, %struct.constraints_helper*)*, void (%struct.vrna_fc_s*, i32, %struct.vrna_elem_prob_s**, i32*, i32*, double*, i32*, %struct.constraints_helper*)** %43, align 8
  %353 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %354 = load i32, i32* %10, align 4
  %355 = load %struct.constraints_helper*, %struct.constraints_helper** %42, align 8
  call void %352(%struct.vrna_fc_s* noundef %353, i32 noundef %354, %struct.vrna_elem_prob_s** noundef %36, i32* noundef %35, i32* noundef %34, double* noundef %15, i32* noundef %14, %struct.constraints_helper* noundef %355)
  %356 = load void (%struct.vrna_fc_s*, i32, %struct.helper_arrays*, double*, i32*, %struct.constraints_helper*)*, void (%struct.vrna_fc_s*, i32, %struct.helper_arrays*, double*, i32*, %struct.constraints_helper*)** %44, align 8
  %357 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %358 = load i32, i32* %10, align 4
  %359 = load %struct.helper_arrays*, %struct.helper_arrays** %41, align 8
  %360 = load %struct.constraints_helper*, %struct.constraints_helper** %42, align 8
  call void %356(%struct.vrna_fc_s* noundef %357, i32 noundef %358, %struct.helper_arrays* noundef %359, double* noundef %15, i32* noundef %14, %struct.constraints_helper* noundef %360)
  %361 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %362 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %361, i32 0, i32 8
  %363 = load i32, i32* %362, align 8
  %364 = icmp ugt i32 %363, 1
  br i1 %364, label %365, label %378

365:                                              ; preds = %351
  %366 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %367 = load i32, i32* %10, align 4
  %368 = load double*, double** %37, align 8
  %369 = load double**, double*** %38, align 8
  call void @multistrand_update_Y5(%struct.vrna_fc_s* noundef %366, i32 noundef %367, double* noundef %368, double** noundef %369)
  %370 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %371 = load i32, i32* %10, align 4
  %372 = load double**, double*** %39, align 8
  %373 = load double**, double*** %40, align 8
  call void @multistrand_update_Y3(%struct.vrna_fc_s* noundef %370, i32 noundef %371, double** noundef %372, double** noundef %373)
  %374 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %375 = load i32, i32* %10, align 4
  %376 = load double*, double** %37, align 8
  %377 = load double**, double*** %39, align 8
  call void @multistrand_contrib(%struct.vrna_fc_s* noundef %374, i32 noundef %375, double* noundef %376, double** noundef %377, double* noundef %15, i32* noundef %14)
  br label %378

378:                                              ; preds = %365, %351
  br label %379

379:                                              ; preds = %378
  %380 = load i32, i32* %10, align 4
  %381 = add nsw i32 %380, -1
  store i32 %381, i32* %10, align 4
  br label %346, !llvm.loop !9

382:                                              ; preds = %346
  %383 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %384 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %383, i32 0, i32 0
  %385 = load i32, i32* %384, align 8
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %387, label %584

387:                                              ; preds = %382
  %388 = load i32, i32* %28, align 4
  %389 = icmp ne i32 %388, 0
  br i1 %389, label %390, label %395

390:                                              ; preds = %387
  %391 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  call void @ud_outside_ext_loops(%struct.vrna_fc_s* noundef %391)
  %392 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  call void @ud_outside_hp_loops(%struct.vrna_fc_s* noundef %392)
  %393 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  call void @ud_outside_int_loops(%struct.vrna_fc_s* noundef %393)
  %394 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  call void @ud_outside_mb_loops(%struct.vrna_fc_s* noundef %394)
  br label %395

395:                                              ; preds = %390, %387
  %396 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %23, align 8
  %397 = icmp ne %struct.vrna_sc_s* %396, null
  br i1 %397, label %398, label %583

398:                                              ; preds = %395
  %399 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %23, align 8
  %400 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %399, i32 0, i32 10
  %401 = load i32 (i32, i32, i32, i32, i8, i8*)*, i32 (i32, i32, i32, i32, i8, i8*)** %400, align 8
  %402 = icmp ne i32 (i32, i32, i32, i32, i8, i8*)* %401, null
  br i1 %402, label %403, label %583

403:                                              ; preds = %398
  %404 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %23, align 8
  %405 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %404, i32 0, i32 11
  %406 = load %struct.vrna_basepair_s* (i32, i32, i32, i32, i8, i8*)*, %struct.vrna_basepair_s* (i32, i32, i32, i32, i8, i8*)** %405, align 8
  %407 = icmp ne %struct.vrna_basepair_s* (i32, i32, i32, i32, i8, i8*)* %406, null
  br i1 %407, label %408, label %583

408:                                              ; preds = %403
  store i32 1, i32* %8, align 4
  br label %409

409:                                              ; preds = %534, %408
  %410 = load i32, i32* %8, align 4
  %411 = load i32, i32* %7, align 4
  %412 = icmp sle i32 %410, %411
  br i1 %412, label %413, label %537

413:                                              ; preds = %409
  %414 = load i32, i32* %8, align 4
  %415 = load i32, i32* %26, align 4
  %416 = add nsw i32 %414, %415
  %417 = add nsw i32 %416, 1
  store i32 %417, i32* %9, align 4
  br label %418

418:                                              ; preds = %530, %413
  %419 = load i32, i32* %9, align 4
  %420 = load i32, i32* %7, align 4
  %421 = icmp sle i32 %419, %420
  br i1 %421, label %422, label %533

422:                                              ; preds = %418
  %423 = load i32*, i32** %24, align 8
  %424 = load i32, i32* %8, align 4
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds i32, i32* %423, i64 %425
  %427 = load i32, i32* %426, align 4
  %428 = load i32, i32* %9, align 4
  %429 = sub nsw i32 %427, %428
  store i32 %429, i32* %11, align 4
  %430 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %22, align 8
  %431 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %430, i32 0, i32 3
  %432 = bitcast %union.anon* %431 to %struct.anon*
  %433 = getelementptr inbounds %struct.anon, %struct.anon* %432, i32 0, i32 0
  %434 = load i8*, i8** %433, align 8
  %435 = load i32, i32* %8, align 4
  %436 = load i32, i32* %7, align 4
  %437 = mul nsw i32 %435, %436
  %438 = load i32, i32* %9, align 4
  %439 = add nsw i32 %437, %438
  %440 = sext i32 %439 to i64
  %441 = getelementptr inbounds i8, i8* %434, i64 %440
  %442 = load i8, i8* %441, align 1
  %443 = zext i8 %442 to i32
  %444 = and i32 %443, 2
  %445 = icmp ne i32 %444, 0
  br i1 %445, label %446, label %529

446:                                              ; preds = %422
  %447 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %23, align 8
  %448 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %447, i32 0, i32 11
  %449 = load %struct.vrna_basepair_s* (i32, i32, i32, i32, i8, i8*)*, %struct.vrna_basepair_s* (i32, i32, i32, i32, i8, i8*)** %448, align 8
  %450 = load i32, i32* %8, align 4
  %451 = load i32, i32* %9, align 4
  %452 = load i32, i32* %8, align 4
  %453 = load i32, i32* %9, align 4
  %454 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %23, align 8
  %455 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %454, i32 0, i32 13
  %456 = load i8*, i8** %455, align 8
  %457 = call %struct.vrna_basepair_s* %449(i32 noundef %450, i32 noundef %451, i32 noundef %452, i32 noundef %453, i8 noundef zeroext 1, i8* noundef %456)
  store %struct.vrna_basepair_s* %457, %struct.vrna_basepair_s** %46, align 8
  %458 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %46, align 8
  %459 = icmp ne %struct.vrna_basepair_s* %458, null
  br i1 %459, label %460, label %526

460:                                              ; preds = %446
  %461 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %462 = load i32, i32* %8, align 4
  %463 = load i32, i32* %9, align 4
  %464 = call double @vrna_exp_E_hp_loop(%struct.vrna_fc_s* noundef %461, i32 noundef %462, i32 noundef %463)
  store double %464, double* %47, align 8
  %465 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %46, align 8
  store %struct.vrna_basepair_s* %465, %struct.vrna_basepair_s** %45, align 8
  br label %466

466:                                              ; preds = %522, %460
  %467 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %45, align 8
  %468 = icmp ne %struct.vrna_basepair_s* %467, null
  br i1 %468, label %469, label %474

469:                                              ; preds = %466
  %470 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %45, align 8
  %471 = getelementptr inbounds %struct.vrna_basepair_s, %struct.vrna_basepair_s* %470, i32 0, i32 0
  %472 = load i32, i32* %471, align 4
  %473 = icmp ne i32 %472, 0
  br label %474

474:                                              ; preds = %469, %466
  %475 = phi i1 [ false, %466 ], [ %473, %469 ]
  br i1 %475, label %476, label %525

476:                                              ; preds = %474
  %477 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %45, align 8
  %478 = getelementptr inbounds %struct.vrna_basepair_s, %struct.vrna_basepair_s* %477, i32 0, i32 0
  %479 = load i32, i32* %478, align 4
  %480 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %36, align 8
  %481 = load i32, i32* %35, align 4
  %482 = sext i32 %481 to i64
  %483 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %480, i64 %482
  %484 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %483, i32 0, i32 0
  store i32 %479, i32* %484, align 4
  %485 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %45, align 8
  %486 = getelementptr inbounds %struct.vrna_basepair_s, %struct.vrna_basepair_s* %485, i32 0, i32 1
  %487 = load i32, i32* %486, align 4
  %488 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %36, align 8
  %489 = load i32, i32* %35, align 4
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %488, i64 %490
  %492 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %491, i32 0, i32 1
  store i32 %487, i32* %492, align 4
  %493 = load double*, double** %18, align 8
  %494 = load i32, i32* %11, align 4
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds double, double* %493, i64 %495
  %497 = load double, double* %496, align 8
  %498 = load double, double* %47, align 8
  %499 = fmul double %497, %498
  %500 = fptrunc double %499 to float
  %501 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %36, align 8
  %502 = load i32, i32* %35, align 4
  %503 = add nsw i32 %502, 1
  store i32 %503, i32* %35, align 4
  %504 = sext i32 %502 to i64
  %505 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %501, i64 %504
  %506 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %505, i32 0, i32 2
  store float %500, float* %506, align 4
  %507 = load i32, i32* %35, align 4
  %508 = load i32, i32* %34, align 4
  %509 = icmp eq i32 %507, %508
  br i1 %509, label %510, label %521

510:                                              ; preds = %476
  %511 = load i32, i32* %34, align 4
  %512 = add nsw i32 %511, 5
  store i32 %512, i32* %34, align 4
  %513 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %36, align 8
  %514 = bitcast %struct.vrna_elem_prob_s* %513 to i8*
  %515 = load i32, i32* %34, align 4
  %516 = sext i32 %515 to i64
  %517 = mul i64 16, %516
  %518 = trunc i64 %517 to i32
  %519 = call i8* @vrna_realloc(i8* noundef %514, i32 noundef %518)
  %520 = bitcast i8* %519 to %struct.vrna_elem_prob_s*
  store %struct.vrna_elem_prob_s* %520, %struct.vrna_elem_prob_s** %36, align 8
  br label %521

521:                                              ; preds = %510, %476
  br label %522

522:                                              ; preds = %521
  %523 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %45, align 8
  %524 = getelementptr inbounds %struct.vrna_basepair_s, %struct.vrna_basepair_s* %523, i32 1
  store %struct.vrna_basepair_s* %524, %struct.vrna_basepair_s** %45, align 8
  br label %466, !llvm.loop !10

525:                                              ; preds = %474
  br label %526

526:                                              ; preds = %525, %446
  %527 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %46, align 8
  %528 = bitcast %struct.vrna_basepair_s* %527 to i8*
  call void @free(i8* noundef %528) #5
  br label %529

529:                                              ; preds = %526, %422
  br label %530

530:                                              ; preds = %529
  %531 = load i32, i32* %9, align 4
  %532 = add nsw i32 %531, 1
  store i32 %532, i32* %9, align 4
  br label %418, !llvm.loop !11

533:                                              ; preds = %418
  br label %534

534:                                              ; preds = %533
  %535 = load i32, i32* %8, align 4
  %536 = add nsw i32 %535, 1
  store i32 %536, i32* %8, align 4
  br label %409, !llvm.loop !12

537:                                              ; preds = %409
  store i32 0, i32* %8, align 4
  br label %538

538:                                              ; preds = %579, %537
  %539 = load i32, i32* %8, align 4
  %540 = load i32, i32* %35, align 4
  %541 = icmp slt i32 %539, %540
  br i1 %541, label %542, label %582

542:                                              ; preds = %538
  %543 = load i32*, i32** %24, align 8
  %544 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %36, align 8
  %545 = load i32, i32* %8, align 4
  %546 = sext i32 %545 to i64
  %547 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %544, i64 %546
  %548 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %547, i32 0, i32 0
  %549 = load i32, i32* %548, align 4
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds i32, i32* %543, i64 %550
  %552 = load i32, i32* %551, align 4
  %553 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %36, align 8
  %554 = load i32, i32* %8, align 4
  %555 = sext i32 %554 to i64
  %556 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %553, i64 %555
  %557 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %556, i32 0, i32 1
  %558 = load i32, i32* %557, align 4
  %559 = sub nsw i32 %552, %558
  store i32 %559, i32* %11, align 4
  %560 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %36, align 8
  %561 = load i32, i32* %8, align 4
  %562 = sext i32 %561 to i64
  %563 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %560, i64 %562
  %564 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %563, i32 0, i32 2
  %565 = load float, float* %564, align 4
  %566 = fpext float %565 to double
  %567 = load double*, double** %16, align 8
  %568 = load i32, i32* %11, align 4
  %569 = sext i32 %568 to i64
  %570 = getelementptr inbounds double, double* %567, i64 %569
  %571 = load double, double* %570, align 8
  %572 = fdiv double %566, %571
  %573 = load double*, double** %18, align 8
  %574 = load i32, i32* %11, align 4
  %575 = sext i32 %574 to i64
  %576 = getelementptr inbounds double, double* %573, i64 %575
  %577 = load double, double* %576, align 8
  %578 = fadd double %577, %572
  store double %578, double* %576, align 8
  br label %579

579:                                              ; preds = %542
  %580 = load i32, i32* %8, align 4
  %581 = add nsw i32 %580, 1
  store i32 %581, i32* %8, align 4
  br label %538, !llvm.loop !13

582:                                              ; preds = %538
  br label %583

583:                                              ; preds = %582, %403, %398, %395
  br label %584

584:                                              ; preds = %583, %382
  store i32 1, i32* %8, align 4
  br label %585

585:                                              ; preds = %749, %584
  %586 = load i32, i32* %8, align 4
  %587 = load i32, i32* %7, align 4
  %588 = icmp sle i32 %586, %587
  br i1 %588, label %589, label %752

589:                                              ; preds = %585
  %590 = load i32, i32* %8, align 4
  %591 = load i32, i32* %26, align 4
  %592 = add nsw i32 %590, %591
  %593 = add nsw i32 %592, 1
  store i32 %593, i32* %9, align 4
  br label %594

594:                                              ; preds = %745, %589
  %595 = load i32, i32* %9, align 4
  %596 = load i32, i32* %7, align 4
  %597 = icmp sle i32 %595, %596
  br i1 %597, label %598, label %748

598:                                              ; preds = %594
  %599 = load i32*, i32** %24, align 8
  %600 = load i32, i32* %8, align 4
  %601 = sext i32 %600 to i64
  %602 = getelementptr inbounds i32, i32* %599, i64 %601
  %603 = load i32, i32* %602, align 4
  %604 = load i32, i32* %9, align 4
  %605 = sub nsw i32 %603, %604
  store i32 %605, i32* %11, align 4
  %606 = load i32, i32* %21, align 4
  %607 = icmp ne i32 %606, 0
  br i1 %607, label %608, label %696

608:                                              ; preds = %598
  %609 = load double*, double** %16, align 8
  %610 = load i32, i32* %11, align 4
  %611 = sext i32 %610 to i64
  %612 = getelementptr inbounds double, double* %609, i64 %611
  %613 = load double, double* %612, align 8
  %614 = fcmp ogt double %613, 0.000000e+00
  br i1 %614, label %615, label %655

615:                                              ; preds = %608
  %616 = load double*, double** %16, align 8
  %617 = load i32, i32* %11, align 4
  %618 = sext i32 %617 to i64
  %619 = getelementptr inbounds double, double* %616, i64 %618
  %620 = load double, double* %619, align 8
  %621 = load double*, double** %18, align 8
  %622 = load i32, i32* %11, align 4
  %623 = sext i32 %622 to i64
  %624 = getelementptr inbounds double, double* %621, i64 %623
  %625 = load double, double* %624, align 8
  %626 = fmul double %625, %620
  store double %626, double* %624, align 8
  %627 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %628 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %627, i32 0, i32 0
  %629 = load i32, i32* %628, align 8
  %630 = icmp eq i32 %629, 1
  br i1 %630, label %631, label %654

631:                                              ; preds = %615
  %632 = load i32*, i32** %12, align 8
  %633 = load i32*, i32** %13, align 8
  %634 = load i32, i32* %9, align 4
  %635 = sext i32 %634 to i64
  %636 = getelementptr inbounds i32, i32* %633, i64 %635
  %637 = load i32, i32* %636, align 4
  %638 = load i32, i32* %8, align 4
  %639 = add nsw i32 %637, %638
  %640 = sext i32 %639 to i64
  %641 = getelementptr inbounds i32, i32* %632, i64 %640
  %642 = load i32, i32* %641, align 4
  %643 = sub nsw i32 0, %642
  %644 = sitofp i32 %643 to double
  %645 = load double, double* %33, align 8
  %646 = fdiv double %644, %645
  %647 = call double @exp(double noundef %646) #5
  %648 = load double*, double** %18, align 8
  %649 = load i32, i32* %11, align 4
  %650 = sext i32 %649 to i64
  %651 = getelementptr inbounds double, double* %648, i64 %650
  %652 = load double, double* %651, align 8
  %653 = fmul double %652, %647
  store double %653, double* %651, align 8
  br label %654

654:                                              ; preds = %631, %615
  br label %695

655:                                              ; preds = %608
  %656 = load double*, double** %17, align 8
  %657 = load i32, i32* %11, align 4
  %658 = sext i32 %657 to i64
  %659 = getelementptr inbounds double, double* %656, i64 %658
  %660 = load double, double* %659, align 8
  %661 = fcmp ogt double %660, 0.000000e+00
  br i1 %661, label %662, label %694

662:                                              ; preds = %655
  %663 = load double*, double** %19, align 8
  %664 = load i32, i32* %8, align 4
  %665 = sub nsw i32 %664, 1
  %666 = sext i32 %665 to i64
  %667 = getelementptr inbounds double, double* %663, i64 %666
  %668 = load double, double* %667, align 8
  %669 = load double*, double** %17, align 8
  %670 = load i32, i32* %11, align 4
  %671 = sext i32 %670 to i64
  %672 = getelementptr inbounds double, double* %669, i64 %671
  %673 = load double, double* %672, align 8
  %674 = fmul double %668, %673
  %675 = load double*, double** %20, align 8
  %676 = load i32, i32* %9, align 4
  %677 = add nsw i32 %676, 1
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds double, double* %675, i64 %678
  %680 = load double, double* %679, align 8
  %681 = fmul double %674, %680
  %682 = load double*, double** %19, align 8
  %683 = load i32, i32* %7, align 4
  %684 = sext i32 %683 to i64
  %685 = getelementptr inbounds double, double* %682, i64 %684
  %686 = load double, double* %685, align 8
  %687 = fdiv double %681, %686
  %688 = load double*, double** %18, align 8
  %689 = load i32, i32* %11, align 4
  %690 = sext i32 %689 to i64
  %691 = getelementptr inbounds double, double* %688, i64 %690
  %692 = load double, double* %691, align 8
  %693 = fadd double %692, %687
  store double %693, double* %691, align 8
  br label %694

694:                                              ; preds = %662, %655
  br label %695

695:                                              ; preds = %694, %654
  br label %744

696:                                              ; preds = %598
  %697 = load double*, double** %16, align 8
  %698 = load i32, i32* %11, align 4
  %699 = sext i32 %698 to i64
  %700 = getelementptr inbounds double, double* %697, i64 %699
  %701 = load double, double* %700, align 8
  %702 = fcmp ogt double %701, 0.000000e+00
  br i1 %702, label %703, label %743

703:                                              ; preds = %696
  %704 = load double*, double** %16, align 8
  %705 = load i32, i32* %11, align 4
  %706 = sext i32 %705 to i64
  %707 = getelementptr inbounds double, double* %704, i64 %706
  %708 = load double, double* %707, align 8
  %709 = load double*, double** %18, align 8
  %710 = load i32, i32* %11, align 4
  %711 = sext i32 %710 to i64
  %712 = getelementptr inbounds double, double* %709, i64 %711
  %713 = load double, double* %712, align 8
  %714 = fmul double %713, %708
  store double %714, double* %712, align 8
  %715 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %716 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %715, i32 0, i32 0
  %717 = load i32, i32* %716, align 8
  %718 = icmp eq i32 %717, 1
  br i1 %718, label %719, label %742

719:                                              ; preds = %703
  %720 = load i32*, i32** %12, align 8
  %721 = load i32*, i32** %13, align 8
  %722 = load i32, i32* %9, align 4
  %723 = sext i32 %722 to i64
  %724 = getelementptr inbounds i32, i32* %721, i64 %723
  %725 = load i32, i32* %724, align 4
  %726 = load i32, i32* %8, align 4
  %727 = add nsw i32 %725, %726
  %728 = sext i32 %727 to i64
  %729 = getelementptr inbounds i32, i32* %720, i64 %728
  %730 = load i32, i32* %729, align 4
  %731 = sub nsw i32 0, %730
  %732 = sitofp i32 %731 to double
  %733 = load double, double* %33, align 8
  %734 = fdiv double %732, %733
  %735 = call double @exp(double noundef %734) #5
  %736 = load double*, double** %18, align 8
  %737 = load i32, i32* %11, align 4
  %738 = sext i32 %737 to i64
  %739 = getelementptr inbounds double, double* %736, i64 %738
  %740 = load double, double* %739, align 8
  %741 = fmul double %740, %735
  store double %741, double* %739, align 8
  br label %742

742:                                              ; preds = %719, %703
  br label %743

743:                                              ; preds = %742, %696
  br label %744

744:                                              ; preds = %743, %695
  br label %745

745:                                              ; preds = %744
  %746 = load i32, i32* %9, align 4
  %747 = add nsw i32 %746, 1
  store i32 %747, i32* %9, align 4
  br label %594, !llvm.loop !14

748:                                              ; preds = %594
  br label %749

749:                                              ; preds = %748
  %750 = load i32, i32* %8, align 4
  %751 = add nsw i32 %750, 1
  store i32 %751, i32* %8, align 4
  br label %585, !llvm.loop !15

752:                                              ; preds = %585
  %753 = load i8*, i8** %5, align 8
  %754 = icmp ne i8* %753, null
  br i1 %754, label %755, label %768

755:                                              ; preds = %752
  %756 = load double*, double** %18, align 8
  %757 = load i32, i32* %7, align 4
  %758 = call i8* @vrna_db_from_probs(double* noundef %756, i32 noundef %757)
  store i8* %758, i8** %48, align 8
  %759 = load i8*, i8** %5, align 8
  %760 = load i8*, i8** %48, align 8
  %761 = load i32, i32* %7, align 4
  %762 = sext i32 %761 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %759, i8* align 1 %760, i64 %762, i1 false)
  %763 = load i8*, i8** %5, align 8
  %764 = load i32, i32* %7, align 4
  %765 = sext i32 %764 to i64
  %766 = getelementptr inbounds i8, i8* %763, i64 %765
  store i8 0, i8* %766, align 1
  %767 = load i8*, i8** %48, align 8
  call void @free(i8* noundef %767) #5
  br label %768

768:                                              ; preds = %755, %752
  %769 = load i32, i32* %14, align 4
  %770 = icmp sgt i32 %769, 0
  br i1 %770, label %771, label %776

771:                                              ; preds = %768
  %772 = load i32, i32* %14, align 4
  %773 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %29, align 8
  %774 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %773, i32 0, i32 37
  %775 = load double, double* %774, align 8
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([84 x i8], [84 x i8]* @.str.5, i64 0, i64 0), i32 noundef %772, double noundef %775)
  br label %776

776:                                              ; preds = %771, %768
  %777 = load %struct.helper_arrays*, %struct.helper_arrays** %41, align 8
  call void @free_ml_helper_arrays(%struct.helper_arrays* noundef %777)
  %778 = load %struct.constraints_helper*, %struct.constraints_helper** %42, align 8
  call void @free_constraints_helper(%struct.constraints_helper* noundef %778)
  %779 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %36, align 8
  %780 = bitcast %struct.vrna_elem_prob_s* %779 to i8*
  call void @free(i8* noundef %780) #5
  %781 = load double*, double** %37, align 8
  %782 = bitcast double* %781 to i8*
  call void @free(i8* noundef %782) #5
  %783 = load double**, double*** %38, align 8
  %784 = icmp ne double** %783, null
  br i1 %784, label %785, label %803

785:                                              ; preds = %776
  store i32 0, i32* %49, align 4
  br label %786

786:                                              ; preds = %799, %785
  %787 = load i32, i32* %49, align 4
  %788 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %789 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %788, i32 0, i32 8
  %790 = load i32, i32* %789, align 8
  %791 = icmp ult i32 %787, %790
  br i1 %791, label %792, label %802

792:                                              ; preds = %786
  %793 = load double**, double*** %38, align 8
  %794 = load i32, i32* %49, align 4
  %795 = zext i32 %794 to i64
  %796 = getelementptr inbounds double*, double** %793, i64 %795
  %797 = load double*, double** %796, align 8
  %798 = bitcast double* %797 to i8*
  call void @free(i8* noundef %798) #5
  br label %799

799:                                              ; preds = %792
  %800 = load i32, i32* %49, align 4
  %801 = add i32 %800, 1
  store i32 %801, i32* %49, align 4
  br label %786, !llvm.loop !16

802:                                              ; preds = %786
  br label %803

803:                                              ; preds = %802, %776
  %804 = load double**, double*** %38, align 8
  %805 = bitcast double** %804 to i8*
  call void @free(i8* noundef %805) #5
  %806 = load double**, double*** %39, align 8
  %807 = icmp ne double** %806, null
  br i1 %807, label %808, label %826

808:                                              ; preds = %803
  store i32 0, i32* %50, align 4
  br label %809

809:                                              ; preds = %822, %808
  %810 = load i32, i32* %50, align 4
  %811 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %812 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %811, i32 0, i32 8
  %813 = load i32, i32* %812, align 8
  %814 = icmp ult i32 %810, %813
  br i1 %814, label %815, label %825

815:                                              ; preds = %809
  %816 = load double**, double*** %39, align 8
  %817 = load i32, i32* %50, align 4
  %818 = zext i32 %817 to i64
  %819 = getelementptr inbounds double*, double** %816, i64 %818
  %820 = load double*, double** %819, align 8
  %821 = bitcast double* %820 to i8*
  call void @free(i8* noundef %821) #5
  br label %822

822:                                              ; preds = %815
  %823 = load i32, i32* %50, align 4
  %824 = add i32 %823, 1
  store i32 %824, i32* %50, align 4
  br label %809, !llvm.loop !17

825:                                              ; preds = %809
  br label %826

826:                                              ; preds = %825, %803
  %827 = load double**, double*** %39, align 8
  %828 = bitcast double** %827 to i8*
  call void @free(i8* noundef %828) #5
  %829 = load double**, double*** %40, align 8
  %830 = icmp ne double** %829, null
  br i1 %830, label %831, label %849

831:                                              ; preds = %826
  store i32 0, i32* %51, align 4
  br label %832

832:                                              ; preds = %845, %831
  %833 = load i32, i32* %51, align 4
  %834 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %835 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %834, i32 0, i32 8
  %836 = load i32, i32* %835, align 8
  %837 = icmp ult i32 %833, %836
  br i1 %837, label %838, label %848

838:                                              ; preds = %832
  %839 = load double**, double*** %40, align 8
  %840 = load i32, i32* %51, align 4
  %841 = zext i32 %840 to i64
  %842 = getelementptr inbounds double*, double** %839, i64 %841
  %843 = load double*, double** %842, align 8
  %844 = bitcast double* %843 to i8*
  call void @free(i8* noundef %844) #5
  br label %845

845:                                              ; preds = %838
  %846 = load i32, i32* %51, align 4
  %847 = add i32 %846, 1
  store i32 %847, i32* %51, align 4
  br label %832, !llvm.loop !18

848:                                              ; preds = %832
  br label %849

849:                                              ; preds = %848, %826
  %850 = load double**, double*** %40, align 8
  %851 = bitcast double** %850 to i8*
  call void @free(i8* noundef %851) #5
  br label %853

852:                                              ; preds = %167, %164, %157, %151, %145
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([66 x i8], [66 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %854

853:                                              ; preds = %849
  store i32 1, i32* %3, align 4
  br label %854

854:                                              ; preds = %853, %852
  %855 = load i32, i32* %3, align 4
  ret i32 %855
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @vrna_mean_bp_distance_pr(i32 noundef %0, double* noundef %1) #0 {
  %3 = alloca double, align 8
  %4 = alloca i32, align 4
  %5 = alloca double*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca double, align 8
  store i32 %0, i32* %4, align 4
  store double* %1, double** %5, align 8
  %8 = load i32, i32* %4, align 4
  %9 = call i32* @vrna_idx_row_wise(i32 noundef %8)
  store i32* %9, i32** %6, align 8
  %10 = load double*, double** %5, align 8
  %11 = icmp ne double* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([83 x i8], [83 x i8]* @.str, i64 0, i64 0))
  store double 1.000000e+05, double* %3, align 8
  br label %21

13:                                               ; preds = %2
  %14 = load double*, double** %5, align 8
  %15 = load i32, i32* %4, align 4
  %16 = load i32*, i32** %6, align 8
  %17 = call double @wrap_mean_bp_distance(double* noundef %14, i32 noundef %15, i32* noundef %16, i32 noundef 3)
  store double %17, double* %7, align 8
  %18 = load i32*, i32** %6, align 8
  %19 = bitcast i32* %18 to i8*
  call void @free(i8* noundef %19) #5
  %20 = load double, double* %7, align 8
  store double %20, double* %3, align 8
  br label %21

21:                                               ; preds = %13, %12
  %22 = load double, double* %3, align 8
  ret double %22
}

declare dso_local i32* @vrna_idx_row_wise(i32 noundef) #1

declare dso_local void @vrna_message_warning(i8* noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal double @wrap_mean_bp_distance(double* noundef %0, i32 noundef %1, i32* noundef %2, i32 noundef %3) #0 {
  %5 = alloca double*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  store double* %0, double** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32* %2, i32** %7, align 8
  store i32 %3, i32* %8, align 4
  store double 0.000000e+00, double* %11, align 8
  store i32 1, i32* %9, align 4
  br label %12

12:                                               ; preds = %55, %4
  %13 = load i32, i32* %9, align 4
  %14 = load i32, i32* %6, align 4
  %15 = icmp sle i32 %13, %14
  br i1 %15, label %16, label %58

16:                                               ; preds = %12
  %17 = load i32, i32* %9, align 4
  %18 = load i32, i32* %8, align 4
  %19 = add nsw i32 %17, %18
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* %10, align 4
  br label %21

21:                                               ; preds = %51, %16
  %22 = load i32, i32* %10, align 4
  %23 = load i32, i32* %6, align 4
  %24 = icmp sle i32 %22, %23
  br i1 %24, label %25, label %54

25:                                               ; preds = %21
  %26 = load double*, double** %5, align 8
  %27 = load i32*, i32** %7, align 8
  %28 = load i32, i32* %9, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i32, i32* %27, i64 %29
  %31 = load i32, i32* %30, align 4
  %32 = load i32, i32* %10, align 4
  %33 = sub nsw i32 %31, %32
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds double, double* %26, i64 %34
  %36 = load double, double* %35, align 8
  %37 = load double*, double** %5, align 8
  %38 = load i32*, i32** %7, align 8
  %39 = load i32, i32* %9, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i32, i32* %38, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = load i32, i32* %10, align 4
  %44 = sub nsw i32 %42, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds double, double* %37, i64 %45
  %47 = load double, double* %46, align 8
  %48 = fsub double 1.000000e+00, %47
  %49 = load double, double* %11, align 8
  %50 = call double @llvm.fmuladd.f64(double %36, double %48, double %49)
  store double %50, double* %11, align 8
  br label %51

51:                                               ; preds = %25
  %52 = load i32, i32* %10, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %10, align 4
  br label %21, !llvm.loop !19

54:                                               ; preds = %21
  br label %55

55:                                               ; preds = %54
  %56 = load i32, i32* %9, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %9, align 4
  br label %12, !llvm.loop !20

58:                                               ; preds = %12
  %59 = load double, double* %11, align 8
  %60 = fmul double 2.000000e+00, %59
  ret double %60
}

; Function Attrs: nounwind
declare dso_local void @free(i8* noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @vrna_mean_bp_distance(%struct.vrna_fc_s* noundef %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca %struct.vrna_fc_s*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %3, align 8
  %4 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %5 = icmp ne %struct.vrna_fc_s* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0))
  br label %46

7:                                                ; preds = %1
  %8 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %9 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %8, i32 0, i32 13
  %10 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %9, align 8
  %11 = icmp ne %struct.vrna_mx_pf_s* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %7
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0))
  br label %45

13:                                               ; preds = %7
  %14 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %15 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %14, i32 0, i32 13
  %16 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %15, align 8
  %17 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %16, i32 0, i32 4
  %18 = bitcast %union.anon.5* %17 to %struct.anon.6*
  %19 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %18, i32 0, i32 4
  %20 = load double*, double** %19, align 8
  %21 = icmp ne double* %20, null
  br i1 %21, label %23, label %22

22:                                               ; preds = %13
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0))
  br label %44

23:                                               ; preds = %13
  %24 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %25 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %24, i32 0, i32 13
  %26 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %25, align 8
  %27 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %26, i32 0, i32 4
  %28 = bitcast %union.anon.5* %27 to %struct.anon.6*
  %29 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %28, i32 0, i32 4
  %30 = load double*, double** %29, align 8
  %31 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %32 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %31, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %35 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %34, i32 0, i32 16
  %36 = load i32*, i32** %35, align 8
  %37 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %38 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %37, i32 0, i32 15
  %39 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %38, align 8
  %40 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %39, i32 0, i32 40
  %41 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %40, i32 0, i32 18
  %42 = load i32, i32* %41, align 4
  %43 = call double @wrap_mean_bp_distance(double* noundef %30, i32 noundef %33, i32* noundef %36, i32 noundef %42)
  store double %43, double* %2, align 8
  br label %47

44:                                               ; preds = %22
  br label %45

45:                                               ; preds = %44, %12
  br label %46

46:                                               ; preds = %45, %6
  store double 1.000000e+05, double* %2, align 8
  br label %47

47:                                               ; preds = %46, %23
  %48 = load double, double* %2, align 8
  ret double %48
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @vrna_ensemble_defect_pt(%struct.vrna_fc_s* noundef %0, i16* noundef %1) #0 {
  %3 = alloca %struct.vrna_fc_s*, align 8
  %4 = alloca i16*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  %10 = alloca double*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca double, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %3, align 8
  store i16* %1, i16** %4, align 8
  store double -1.000000e+00, double* %9, align 8
  %13 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %14 = icmp ne %struct.vrna_fc_s* %13, null
  br i1 %14, label %15, label %172

15:                                               ; preds = %2
  %16 = load i16*, i16** %4, align 8
  %17 = icmp ne i16* %16, null
  br i1 %17, label %18, label %172

18:                                               ; preds = %15
  %19 = load i16*, i16** %4, align 8
  %20 = getelementptr inbounds i16, i16* %19, i64 0
  %21 = load i16, i16* %20, align 2
  %22 = sext i16 %21 to i32
  %23 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %24 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %23, i32 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %22, %25
  br i1 %26, label %27, label %172

27:                                               ; preds = %18
  %28 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %29 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %28, i32 0, i32 13
  %30 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %29, align 8
  %31 = icmp ne %struct.vrna_mx_pf_s* %30, null
  br i1 %31, label %32, label %172

32:                                               ; preds = %27
  %33 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %34 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %33, i32 0, i32 13
  %35 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %34, align 8
  %36 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %35, i32 0, i32 4
  %37 = bitcast %union.anon.5* %36 to %struct.anon.6*
  %38 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %37, i32 0, i32 4
  %39 = load double*, double** %38, align 8
  %40 = icmp ne double* %39, null
  br i1 %40, label %41, label %172

41:                                               ; preds = %32
  %42 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %43 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %42, i32 0, i32 1
  %44 = load i32, i32* %43, align 4
  store i32 %44, i32* %7, align 4
  %45 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %46 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %45, i32 0, i32 13
  %47 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %46, align 8
  %48 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %47, i32 0, i32 4
  %49 = bitcast %union.anon.5* %48 to %struct.anon.6*
  %50 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %49, i32 0, i32 4
  %51 = load double*, double** %50, align 8
  store double* %51, double** %10, align 8
  %52 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %53 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %52, i32 0, i32 16
  %54 = load i32*, i32** %53, align 8
  store i32* %54, i32** %11, align 8
  store double 0.000000e+00, double* %9, align 8
  store i32 1, i32* %5, align 4
  br label %55

55:                                               ; preds = %164, %41
  %56 = load i32, i32* %5, align 4
  %57 = load i32, i32* %7, align 4
  %58 = icmp ule i32 %56, %57
  br i1 %58, label %59, label %167

59:                                               ; preds = %55
  %60 = load i32*, i32** %11, align 8
  %61 = load i32, i32* %5, align 4
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds i32, i32* %60, i64 %62
  %64 = load i32, i32* %63, align 4
  store i32 %64, i32* %8, align 4
  store double 0.000000e+00, double* %12, align 8
  store i32 1, i32* %6, align 4
  br label %65

65:                                               ; preds = %83, %59
  %66 = load i32, i32* %6, align 4
  %67 = load i32, i32* %5, align 4
  %68 = icmp ult i32 %66, %67
  br i1 %68, label %69, label %86

69:                                               ; preds = %65
  %70 = load double*, double** %10, align 8
  %71 = load i32*, i32** %11, align 8
  %72 = load i32, i32* %6, align 4
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds i32, i32* %71, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = load i32, i32* %5, align 4
  %77 = sub i32 %75, %76
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds double, double* %70, i64 %78
  %80 = load double, double* %79, align 8
  %81 = load double, double* %12, align 8
  %82 = fadd double %81, %80
  store double %82, double* %12, align 8
  br label %83

83:                                               ; preds = %69
  %84 = load i32, i32* %6, align 4
  %85 = add i32 %84, 1
  store i32 %85, i32* %6, align 4
  br label %65, !llvm.loop !21

86:                                               ; preds = %65
  %87 = load i32, i32* %5, align 4
  %88 = add i32 %87, 1
  store i32 %88, i32* %6, align 4
  br label %89

89:                                               ; preds = %103, %86
  %90 = load i32, i32* %6, align 4
  %91 = load i32, i32* %7, align 4
  %92 = icmp ule i32 %90, %91
  br i1 %92, label %93, label %106

93:                                               ; preds = %89
  %94 = load double*, double** %10, align 8
  %95 = load i32, i32* %8, align 4
  %96 = load i32, i32* %6, align 4
  %97 = sub i32 %95, %96
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds double, double* %94, i64 %98
  %100 = load double, double* %99, align 8
  %101 = load double, double* %12, align 8
  %102 = fadd double %101, %100
  store double %102, double* %12, align 8
  br label %103

103:                                              ; preds = %93
  %104 = load i32, i32* %6, align 4
  %105 = add i32 %104, 1
  store i32 %105, i32* %6, align 4
  br label %89, !llvm.loop !22

106:                                              ; preds = %89
  %107 = load i16*, i16** %4, align 8
  %108 = load i32, i32* %5, align 4
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds i16, i16* %107, i64 %109
  %111 = load i16, i16* %110, align 2
  %112 = sext i16 %111 to i32
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %118

114:                                              ; preds = %106
  %115 = load double, double* %12, align 8
  %116 = load double, double* %9, align 8
  %117 = fadd double %116, %115
  store double %117, double* %9, align 8
  br label %163

118:                                              ; preds = %106
  %119 = load i16*, i16** %4, align 8
  %120 = load i32, i32* %5, align 4
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds i16, i16* %119, i64 %121
  %123 = load i16, i16* %122, align 2
  %124 = sext i16 %123 to i32
  %125 = load i32, i32* %5, align 4
  %126 = icmp ugt i32 %124, %125
  br i1 %126, label %127, label %143

127:                                              ; preds = %118
  %128 = load double*, double** %10, align 8
  %129 = load i32, i32* %8, align 4
  %130 = load i16*, i16** %4, align 8
  %131 = load i32, i32* %5, align 4
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds i16, i16* %130, i64 %132
  %134 = load i16, i16* %133, align 2
  %135 = sext i16 %134 to i32
  %136 = sub nsw i32 %129, %135
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds double, double* %128, i64 %137
  %139 = load double, double* %138, align 8
  %140 = fsub double 1.000000e+00, %139
  %141 = load double, double* %9, align 8
  %142 = fadd double %141, %140
  store double %142, double* %9, align 8
  br label %162

143:                                              ; preds = %118
  %144 = load double*, double** %10, align 8
  %145 = load i32*, i32** %11, align 8
  %146 = load i16*, i16** %4, align 8
  %147 = load i32, i32* %5, align 4
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds i16, i16* %146, i64 %148
  %150 = load i16, i16* %149, align 2
  %151 = sext i16 %150 to i64
  %152 = getelementptr inbounds i32, i32* %145, i64 %151
  %153 = load i32, i32* %152, align 4
  %154 = load i32, i32* %5, align 4
  %155 = sub i32 %153, %154
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds double, double* %144, i64 %156
  %158 = load double, double* %157, align 8
  %159 = fsub double 1.000000e+00, %158
  %160 = load double, double* %9, align 8
  %161 = fadd double %160, %159
  store double %161, double* %9, align 8
  br label %162

162:                                              ; preds = %143, %127
  br label %163

163:                                              ; preds = %162, %114
  br label %164

164:                                              ; preds = %163
  %165 = load i32, i32* %5, align 4
  %166 = add i32 %165, 1
  store i32 %166, i32* %5, align 4
  br label %55, !llvm.loop !23

167:                                              ; preds = %55
  %168 = load i32, i32* %7, align 4
  %169 = uitofp i32 %168 to double
  %170 = load double, double* %9, align 8
  %171 = fdiv double %170, %169
  store double %171, double* %9, align 8
  br label %172

172:                                              ; preds = %167, %32, %27, %18, %15, %2
  %173 = load double, double* %9, align 8
  ret double %173
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @vrna_ensemble_defect(%struct.vrna_fc_s* noundef %0, i8* noundef %1) #0 {
  %3 = alloca %struct.vrna_fc_s*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca double, align 8
  %6 = alloca i16*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %3, align 8
  store i8* %1, i8** %4, align 8
  store double -1.000000e+00, double* %5, align 8
  %7 = load i8*, i8** %4, align 8
  %8 = call i16* @vrna_ptable(i8* noundef %7)
  store i16* %8, i16** %6, align 8
  %9 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %10 = load i16*, i16** %6, align 8
  %11 = call double @vrna_ensemble_defect_pt(%struct.vrna_fc_s* noundef %9, i16* noundef %10)
  store double %11, double* %5, align 8
  %12 = load i16*, i16** %6, align 8
  %13 = bitcast i16* %12 to i8*
  call void @free(i8* noundef %13) #5
  %14 = load double, double* %5, align 8
  ret double %14
}

declare dso_local i16* @vrna_ptable(i8* noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double* @vrna_positional_entropy(%struct.vrna_fc_s* noundef %0) #0 {
  %2 = alloca %struct.vrna_fc_s*, align 8
  %3 = alloca double*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca double*, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %2, align 8
  store double* null, double** %3, align 8
  %15 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %16 = icmp ne %struct.vrna_fc_s* %15, null
  br i1 %16, label %17, label %191

17:                                               ; preds = %1
  %18 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %19 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %18, i32 0, i32 13
  %20 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %19, align 8
  %21 = icmp ne %struct.vrna_mx_pf_s* %20, null
  br i1 %21, label %22, label %191

22:                                               ; preds = %17
  %23 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %24 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %23, i32 0, i32 13
  %25 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %24, align 8
  %26 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %25, i32 0, i32 4
  %27 = bitcast %union.anon.5* %26 to %struct.anon.6*
  %28 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %27, i32 0, i32 4
  %29 = load double*, double** %28, align 8
  %30 = icmp ne double* %29, null
  br i1 %30, label %31, label %191

31:                                               ; preds = %22
  %32 = call double @log(double noundef 2.000000e+00) #5
  store double %32, double* %11, align 8
  %33 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %34 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %33, i32 0, i32 1
  %35 = load i32, i32* %34, align 4
  store i32 %35, i32* %6, align 4
  %36 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %37 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %36, i32 0, i32 16
  %38 = load i32*, i32** %37, align 8
  store i32* %38, i32** %7, align 8
  %39 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %40 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %39, i32 0, i32 13
  %41 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %40, align 8
  %42 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %41, i32 0, i32 4
  %43 = bitcast %union.anon.5* %42 to %struct.anon.6*
  %44 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %43, i32 0, i32 4
  %45 = load double*, double** %44, align 8
  store double* %45, double** %10, align 8
  %46 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %47 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %46, i32 0, i32 15
  %48 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %47, align 8
  %49 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %48, i32 0, i32 40
  %50 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %49, i32 0, i32 18
  %51 = load i32, i32* %50, align 4
  store i32 %51, i32* %9, align 4
  %52 = load i32, i32* %6, align 4
  %53 = add i32 %52, 1
  %54 = zext i32 %53 to i64
  %55 = mul i64 8, %54
  %56 = trunc i64 %55 to i32
  %57 = call i8* @vrna_alloc(i32 noundef %56)
  %58 = bitcast i8* %57 to double*
  store double* %58, double** %3, align 8
  %59 = load i32, i32* %6, align 4
  %60 = add i32 %59, 1
  %61 = zext i32 %60 to i64
  %62 = mul i64 8, %61
  %63 = trunc i64 %62 to i32
  %64 = call i8* @vrna_alloc(i32 noundef %63)
  %65 = bitcast i8* %64 to double*
  store double* %65, double** %14, align 8
  %66 = load i32, i32* %6, align 4
  %67 = uitofp i32 %66 to double
  %68 = load double*, double** %3, align 8
  %69 = getelementptr inbounds double, double* %68, i64 0
  store double %67, double* %69, align 8
  store i32 1, i32* %4, align 4
  br label %70

70:                                               ; preds = %138, %31
  %71 = load i32, i32* %4, align 4
  %72 = load i32, i32* %6, align 4
  %73 = icmp ule i32 %71, %72
  br i1 %73, label %74, label %141

74:                                               ; preds = %70
  %75 = load i32*, i32** %7, align 8
  %76 = load i32, i32* %4, align 4
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds i32, i32* %75, i64 %77
  %79 = load i32, i32* %78, align 4
  store i32 %79, i32* %8, align 4
  %80 = load i32, i32* %4, align 4
  %81 = load i32, i32* %9, align 4
  %82 = add i32 %80, %81
  %83 = add i32 %82, 1
  store i32 %83, i32* %5, align 4
  br label %84

84:                                               ; preds = %134, %74
  %85 = load i32, i32* %5, align 4
  %86 = load i32, i32* %6, align 4
  %87 = icmp ule i32 %85, %86
  br i1 %87, label %88, label %137

88:                                               ; preds = %84
  %89 = load double*, double** %10, align 8
  %90 = load i32, i32* %8, align 4
  %91 = load i32, i32* %5, align 4
  %92 = sub i32 %90, %91
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds double, double* %89, i64 %93
  %95 = load double, double* %94, align 8
  store double %95, double* %13, align 8
  %96 = load double, double* %13, align 8
  %97 = fcmp ogt double %96, 0.000000e+00
  br i1 %97, label %98, label %103

98:                                               ; preds = %88
  %99 = load double, double* %13, align 8
  %100 = load double, double* %13, align 8
  %101 = call double @log(double noundef %100) #5
  %102 = fmul double %99, %101
  br label %104

103:                                              ; preds = %88
  br label %104

104:                                              ; preds = %103, %98
  %105 = phi double [ %102, %98 ], [ 0.000000e+00, %103 ]
  store double %105, double* %12, align 8
  %106 = load double, double* %12, align 8
  %107 = load double*, double** %3, align 8
  %108 = load i32, i32* %4, align 4
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds double, double* %107, i64 %109
  %111 = load double, double* %110, align 8
  %112 = fadd double %111, %106
  store double %112, double* %110, align 8
  %113 = load double, double* %12, align 8
  %114 = load double*, double** %3, align 8
  %115 = load i32, i32* %5, align 4
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds double, double* %114, i64 %116
  %118 = load double, double* %117, align 8
  %119 = fadd double %118, %113
  store double %119, double* %117, align 8
  %120 = load double, double* %13, align 8
  %121 = load double*, double** %14, align 8
  %122 = load i32, i32* %4, align 4
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds double, double* %121, i64 %123
  %125 = load double, double* %124, align 8
  %126 = fadd double %125, %120
  store double %126, double* %124, align 8
  %127 = load double, double* %13, align 8
  %128 = load double*, double** %14, align 8
  %129 = load i32, i32* %5, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds double, double* %128, i64 %130
  %132 = load double, double* %131, align 8
  %133 = fadd double %132, %127
  store double %133, double* %131, align 8
  br label %134

134:                                              ; preds = %104
  %135 = load i32, i32* %5, align 4
  %136 = add i32 %135, 1
  store i32 %136, i32* %5, align 4
  br label %84, !llvm.loop !24

137:                                              ; preds = %84
  br label %138

138:                                              ; preds = %137
  %139 = load i32, i32* %4, align 4
  %140 = add i32 %139, 1
  store i32 %140, i32* %4, align 4
  br label %70, !llvm.loop !25

141:                                              ; preds = %70
  store i32 1, i32* %4, align 4
  br label %142

142:                                              ; preds = %185, %141
  %143 = load i32, i32* %4, align 4
  %144 = load i32, i32* %6, align 4
  %145 = icmp ule i32 %143, %144
  br i1 %145, label %146, label %188

146:                                              ; preds = %142
  %147 = load double*, double** %14, align 8
  %148 = load i32, i32* %4, align 4
  %149 = zext i32 %148 to i64
  %150 = getelementptr inbounds double, double* %147, i64 %149
  %151 = load double, double* %150, align 8
  %152 = fcmp olt double %151, 1.000000e+00
  br i1 %152, label %153, label %168

153:                                              ; preds = %146
  %154 = load double*, double** %14, align 8
  %155 = load i32, i32* %4, align 4
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds double, double* %154, i64 %156
  %158 = load double, double* %157, align 8
  %159 = fsub double 1.000000e+00, %158
  %160 = load double*, double** %14, align 8
  %161 = load i32, i32* %4, align 4
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds double, double* %160, i64 %162
  %164 = load double, double* %163, align 8
  %165 = fsub double 1.000000e+00, %164
  %166 = call double @log(double noundef %165) #5
  %167 = fmul double %159, %166
  br label %169

168:                                              ; preds = %146
  br label %169

169:                                              ; preds = %168, %153
  %170 = phi double [ %167, %153 ], [ 0.000000e+00, %168 ]
  %171 = load double*, double** %3, align 8
  %172 = load i32, i32* %4, align 4
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds double, double* %171, i64 %173
  %175 = load double, double* %174, align 8
  %176 = fadd double %175, %170
  store double %176, double* %174, align 8
  %177 = load double, double* %11, align 8
  %178 = fneg double %177
  %179 = load double*, double** %3, align 8
  %180 = load i32, i32* %4, align 4
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds double, double* %179, i64 %181
  %183 = load double, double* %182, align 8
  %184 = fdiv double %183, %178
  store double %184, double* %182, align 8
  br label %185

185:                                              ; preds = %169
  %186 = load i32, i32* %4, align 4
  %187 = add i32 %186, 1
  store i32 %187, i32* %4, align 4
  br label %142, !llvm.loop !26

188:                                              ; preds = %142
  %189 = load double*, double** %14, align 8
  %190 = bitcast double* %189 to i8*
  call void @free(i8* noundef %190) #5
  br label %191

191:                                              ; preds = %188, %22, %17, %1
  %192 = load double*, double** %3, align 8
  ret double* %192
}

declare dso_local i8* @vrna_alloc(i32 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.vrna_elem_prob_s* @vrna_stack_prob(%struct.vrna_fc_s* noundef %0, double noundef %1) #0 {
  %3 = alloca %struct.vrna_fc_s*, align 8
  %4 = alloca double, align 8
  %5 = alloca %struct.vrna_elem_prob_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca double*, align 8
  %17 = alloca double*, align 8
  %18 = alloca double*, align 8
  %19 = alloca double, align 8
  %20 = alloca %struct.vrna_exp_param_s*, align 8
  %21 = alloca %struct.vrna_mx_pf_s*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %3, align 8
  store double %1, double* %4, align 8
  store i32 256, i32* %8, align 4
  store %struct.vrna_elem_prob_s* null, %struct.vrna_elem_prob_s** %5, align 8
  store i32 0, i32* %14, align 4
  %22 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %23 = icmp ne %struct.vrna_fc_s* %22, null
  br i1 %23, label %24, label %234

24:                                               ; preds = %2
  %25 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %26 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %25, i32 0, i32 15
  %27 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %26, align 8
  store %struct.vrna_exp_param_s* %27, %struct.vrna_exp_param_s** %20, align 8
  %28 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %29 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %28, i32 0, i32 1
  %30 = load i32, i32* %29, align 4
  store i32 %30, i32* %10, align 4
  %31 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %32 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %31, i32 0, i32 16
  %33 = load i32*, i32** %32, align 8
  store i32* %33, i32** %11, align 8
  %34 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %35 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %34, i32 0, i32 17
  %36 = load i32*, i32** %35, align 8
  store i32* %36, i32** %12, align 8
  %37 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %20, align 8
  %38 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %37, i32 0, i32 40
  %39 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %38, i32 0, i32 25
  %40 = getelementptr inbounds [8 x i32], [8 x i32]* %39, i64 0, i64 0
  store i32* %40, i32** %13, align 8
  %41 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %42 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %41, i32 0, i32 24
  %43 = bitcast %union.anon.9* %42 to %struct.anon.10*
  %44 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %43, i32 0, i32 3
  %45 = load i8*, i8** %44, align 8
  store i8* %45, i8** %15, align 8
  %46 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %47 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %46, i32 0, i32 13
  %48 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %47, align 8
  store %struct.vrna_mx_pf_s* %48, %struct.vrna_mx_pf_s** %21, align 8
  %49 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %21, align 8
  %50 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %49, i32 0, i32 4
  %51 = bitcast %union.anon.5* %50 to %struct.anon.6*
  %52 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %51, i32 0, i32 1
  %53 = load double*, double** %52, align 8
  store double* %53, double** %16, align 8
  %54 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %21, align 8
  %55 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %54, i32 0, i32 4
  %56 = bitcast %union.anon.5* %55 to %struct.anon.6*
  %57 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %56, i32 0, i32 4
  %58 = load double*, double** %57, align 8
  store double* %58, double** %17, align 8
  %59 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %21, align 8
  %60 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %59, i32 0, i32 2
  %61 = load double*, double** %60, align 8
  store double* %61, double** %18, align 8
  %62 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %20, align 8
  %63 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %62, i32 0, i32 40
  %64 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %63, i32 0, i32 18
  %65 = load i32, i32* %64, align 4
  store i32 %65, i32* %9, align 4
  %66 = load i32, i32* %8, align 4
  %67 = sext i32 %66 to i64
  %68 = mul i64 %67, 16
  %69 = trunc i64 %68 to i32
  %70 = call i8* @vrna_alloc(i32 noundef %69)
  %71 = bitcast i8* %70 to %struct.vrna_elem_prob_s*
  store %struct.vrna_elem_prob_s* %71, %struct.vrna_elem_prob_s** %5, align 8
  store i32 1, i32* %6, align 4
  br label %72

72:                                               ; preds = %225, %24
  %73 = load i32, i32* %6, align 4
  %74 = load i32, i32* %10, align 4
  %75 = icmp slt i32 %73, %74
  br i1 %75, label %76, label %228

76:                                               ; preds = %72
  %77 = load i32, i32* %6, align 4
  %78 = load i32, i32* %9, align 4
  %79 = add nsw i32 %77, %78
  %80 = add nsw i32 %79, 3
  store i32 %80, i32* %7, align 4
  br label %81

81:                                               ; preds = %221, %76
  %82 = load i32, i32* %7, align 4
  %83 = load i32, i32* %10, align 4
  %84 = icmp sle i32 %82, %83
  br i1 %84, label %85, label %224

85:                                               ; preds = %81
  %86 = load double*, double** %17, align 8
  %87 = load i32*, i32** %11, align 8
  %88 = load i32, i32* %6, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, i32* %87, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = load i32, i32* %7, align 4
  %93 = sub nsw i32 %91, %92
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds double, double* %86, i64 %94
  %96 = load double, double* %95, align 8
  store double %96, double* %19, align 8
  %97 = load double, double* %4, align 8
  %98 = fcmp olt double %96, %97
  br i1 %98, label %99, label %100

99:                                               ; preds = %85
  br label %221

100:                                              ; preds = %85
  %101 = load double*, double** %16, align 8
  %102 = load i32*, i32** %11, align 8
  %103 = load i32, i32* %6, align 4
  %104 = add nsw i32 %103, 1
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i32, i32* %102, i64 %105
  %107 = load i32, i32* %106, align 4
  %108 = load i32, i32* %7, align 4
  %109 = sub nsw i32 %108, 1
  %110 = sub nsw i32 %107, %109
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds double, double* %101, i64 %111
  %113 = load double, double* %112, align 8
  %114 = fcmp olt double %113, 0x3810000000000000
  br i1 %114, label %115, label %116

115:                                              ; preds = %100
  br label %221

116:                                              ; preds = %100
  %117 = load double*, double** %16, align 8
  %118 = load i32*, i32** %11, align 8
  %119 = load i32, i32* %6, align 4
  %120 = add nsw i32 %119, 1
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i32, i32* %118, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = load i32, i32* %7, align 4
  %125 = sub nsw i32 %124, 1
  %126 = sub nsw i32 %123, %125
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds double, double* %117, i64 %127
  %129 = load double, double* %128, align 8
  %130 = load double*, double** %16, align 8
  %131 = load i32*, i32** %11, align 8
  %132 = load i32, i32* %6, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i32, i32* %131, i64 %133
  %135 = load i32, i32* %134, align 4
  %136 = load i32, i32* %7, align 4
  %137 = sub nsw i32 %135, %136
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds double, double* %130, i64 %138
  %140 = load double, double* %139, align 8
  %141 = fdiv double %129, %140
  %142 = load double, double* %19, align 8
  %143 = fmul double %142, %141
  store double %143, double* %19, align 8
  %144 = load i32*, i32** %12, align 8
  %145 = load i32, i32* %7, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i32, i32* %144, i64 %146
  %148 = load i32, i32* %147, align 4
  %149 = load i32, i32* %6, align 4
  %150 = add nsw i32 %148, %149
  %151 = load i8*, i8** %15, align 8
  %152 = call i32 @vrna_get_ptype(i32 noundef %150, i8* noundef %151)
  %153 = load i32*, i32** %13, align 8
  %154 = load i32*, i32** %12, align 8
  %155 = load i32, i32* %7, align 4
  %156 = sub nsw i32 %155, 1
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i32, i32* %154, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = load i32, i32* %6, align 4
  %161 = add nsw i32 %159, %160
  %162 = add nsw i32 %161, 1
  %163 = load i8*, i8** %15, align 8
  %164 = call i32 @vrna_get_ptype(i32 noundef %162, i8* noundef %163)
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds i32, i32* %153, i64 %165
  %167 = load i32, i32* %166, align 4
  %168 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %20, align 8
  %169 = call double @exp_E_IntLoop(i32 noundef 0, i32 noundef 0, i32 noundef %152, i32 noundef %167, i16 noundef signext 0, i16 noundef signext 0, i16 noundef signext 0, i16 noundef signext 0, %struct.vrna_exp_param_s* noundef %168)
  %170 = load double*, double** %18, align 8
  %171 = getelementptr inbounds double, double* %170, i64 2
  %172 = load double, double* %171, align 8
  %173 = fmul double %169, %172
  %174 = load double, double* %19, align 8
  %175 = fmul double %174, %173
  store double %175, double* %19, align 8
  %176 = load double, double* %19, align 8
  %177 = load double, double* %4, align 8
  %178 = fcmp ogt double %176, %177
  br i1 %178, label %179, label %220

179:                                              ; preds = %116
  %180 = load i32, i32* %6, align 4
  %181 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %5, align 8
  %182 = load i32, i32* %14, align 4
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %181, i64 %183
  %185 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %184, i32 0, i32 0
  store i32 %180, i32* %185, align 4
  %186 = load i32, i32* %7, align 4
  %187 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %5, align 8
  %188 = load i32, i32* %14, align 4
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %187, i64 %189
  %191 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %190, i32 0, i32 1
  store i32 %186, i32* %191, align 4
  %192 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %5, align 8
  %193 = load i32, i32* %14, align 4
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %192, i64 %194
  %196 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %195, i32 0, i32 3
  store i32 0, i32* %196, align 4
  %197 = load double, double* %19, align 8
  %198 = fptrunc double %197 to float
  %199 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %5, align 8
  %200 = load i32, i32* %14, align 4
  %201 = add nsw i32 %200, 1
  store i32 %201, i32* %14, align 4
  %202 = sext i32 %200 to i64
  %203 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %199, i64 %202
  %204 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %203, i32 0, i32 2
  store float %198, float* %204, align 4
  %205 = load i32, i32* %14, align 4
  %206 = load i32, i32* %8, align 4
  %207 = icmp sge i32 %205, %206
  br i1 %207, label %208, label %219

208:                                              ; preds = %179
  %209 = load i32, i32* %8, align 4
  %210 = mul nsw i32 %209, 2
  store i32 %210, i32* %8, align 4
  %211 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %5, align 8
  %212 = bitcast %struct.vrna_elem_prob_s* %211 to i8*
  %213 = load i32, i32* %8, align 4
  %214 = sext i32 %213 to i64
  %215 = mul i64 %214, 16
  %216 = trunc i64 %215 to i32
  %217 = call i8* @vrna_realloc(i8* noundef %212, i32 noundef %216)
  %218 = bitcast i8* %217 to %struct.vrna_elem_prob_s*
  store %struct.vrna_elem_prob_s* %218, %struct.vrna_elem_prob_s** %5, align 8
  br label %219

219:                                              ; preds = %208, %179
  br label %220

220:                                              ; preds = %219, %116
  br label %221

221:                                              ; preds = %220, %115, %99
  %222 = load i32, i32* %7, align 4
  %223 = add nsw i32 %222, 1
  store i32 %223, i32* %7, align 4
  br label %81, !llvm.loop !27

224:                                              ; preds = %81
  br label %225

225:                                              ; preds = %224
  %226 = load i32, i32* %6, align 4
  %227 = add nsw i32 %226, 1
  store i32 %227, i32* %6, align 4
  br label %72, !llvm.loop !28

228:                                              ; preds = %72
  %229 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %5, align 8
  %230 = load i32, i32* %14, align 4
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %229, i64 %231
  %233 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %232, i32 0, i32 0
  store i32 0, i32* %233, align 4
  br label %234

234:                                              ; preds = %228, %2
  %235 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %5, align 8
  ret %struct.vrna_elem_prob_s* %235
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @exp_E_IntLoop(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i16 noundef signext %4, i16 noundef signext %5, i16 noundef signext %6, i16 noundef signext %7, %struct.vrna_exp_param_s* noundef %8) #0 {
  %10 = alloca double, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i16, align 2
  %16 = alloca i16, align 2
  %17 = alloca i16, align 2
  %18 = alloca i16, align 2
  %19 = alloca %struct.vrna_exp_param_s*, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca double, align 8
  %24 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  store i32 %1, i32* %12, align 4
  store i32 %2, i32* %13, align 4
  store i32 %3, i32* %14, align 4
  store i16 %4, i16* %15, align 2
  store i16 %5, i16* %16, align 2
  store i16 %6, i16* %17, align 2
  store i16 %7, i16* %18, align 2
  store %struct.vrna_exp_param_s* %8, %struct.vrna_exp_param_s** %19, align 8
  store i32 0, i32* %22, align 4
  store double 0.000000e+00, double* %23, align 8
  %25 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %26 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %25, i32 0, i32 40
  %27 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %26, i32 0, i32 7
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* %24, align 4
  %29 = load i32, i32* %24, align 4
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %44

31:                                               ; preds = %9
  %32 = load i32, i32* %14, align 4
  %33 = icmp eq i32 %32, 3
  br i1 %33, label %43, label %34

34:                                               ; preds = %31
  %35 = load i32, i32* %14, align 4
  %36 = icmp eq i32 %35, 4
  br i1 %36, label %43, label %37

37:                                               ; preds = %34
  %38 = load i32, i32* %13, align 4
  %39 = icmp eq i32 %38, 3
  br i1 %39, label %43, label %40

40:                                               ; preds = %37
  %41 = load i32, i32* %13, align 4
  %42 = icmp eq i32 %41, 4
  br i1 %42, label %43, label %44

43:                                               ; preds = %40, %37, %34, %31
  store i32 1, i32* %22, align 4
  br label %44

44:                                               ; preds = %43, %40, %9
  %45 = load i32, i32* %11, align 4
  %46 = load i32, i32* %12, align 4
  %47 = icmp sgt i32 %45, %46
  br i1 %47, label %48, label %51

48:                                               ; preds = %44
  %49 = load i32, i32* %11, align 4
  store i32 %49, i32* %20, align 4
  %50 = load i32, i32* %12, align 4
  store i32 %50, i32* %21, align 4
  br label %54

51:                                               ; preds = %44
  %52 = load i32, i32* %12, align 4
  store i32 %52, i32* %20, align 4
  %53 = load i32, i32* %11, align 4
  store i32 %53, i32* %21, align 4
  br label %54

54:                                               ; preds = %51, %48
  %55 = load i32, i32* %20, align 4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %67

57:                                               ; preds = %54
  %58 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %59 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %58, i32 0, i32 1
  %60 = load i32, i32* %13, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [8 x [8 x double]], [8 x [8 x double]]* %59, i64 0, i64 %61
  %63 = load i32, i32* %14, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [8 x double], [8 x double]* %62, i64 0, i64 %64
  %66 = load double, double* %65, align 8
  store double %66, double* %23, align 8
  br label %347

67:                                               ; preds = %54
  %68 = load i32, i32* %22, align 4
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %346, label %70

70:                                               ; preds = %67
  %71 = load i32, i32* %21, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %115

73:                                               ; preds = %70
  %74 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %75 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %74, i32 0, i32 3
  %76 = load i32, i32* %20, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [31 x double], [31 x double]* %75, i64 0, i64 %77
  %79 = load double, double* %78, align 8
  store double %79, double* %23, align 8
  %80 = load i32, i32* %20, align 4
  %81 = icmp eq i32 %80, 1
  br i1 %81, label %82, label %94

82:                                               ; preds = %73
  %83 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %84 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %83, i32 0, i32 1
  %85 = load i32, i32* %13, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [8 x [8 x double]], [8 x [8 x double]]* %84, i64 0, i64 %86
  %88 = load i32, i32* %14, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [8 x double], [8 x double]* %87, i64 0, i64 %89
  %91 = load double, double* %90, align 8
  %92 = load double, double* %23, align 8
  %93 = fmul double %92, %91
  store double %93, double* %23, align 8
  br label %113

94:                                               ; preds = %73
  %95 = load i32, i32* %13, align 4
  %96 = icmp sgt i32 %95, 2
  br i1 %96, label %97, label %103

97:                                               ; preds = %94
  %98 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %99 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %98, i32 0, i32 21
  %100 = load double, double* %99, align 8
  %101 = load double, double* %23, align 8
  %102 = fmul double %101, %100
  store double %102, double* %23, align 8
  br label %103

103:                                              ; preds = %97, %94
  %104 = load i32, i32* %14, align 4
  %105 = icmp sgt i32 %104, 2
  br i1 %105, label %106, label %112

106:                                              ; preds = %103
  %107 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %108 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %107, i32 0, i32 21
  %109 = load double, double* %108, align 8
  %110 = load double, double* %23, align 8
  %111 = fmul double %110, %109
  store double %111, double* %23, align 8
  br label %112

112:                                              ; preds = %106, %103
  br label %113

113:                                              ; preds = %112, %82
  %114 = load double, double* %23, align 8
  store double %114, double* %10, align 8
  br label %349

115:                                              ; preds = %70
  %116 = load i32, i32* %21, align 4
  %117 = icmp eq i32 %116, 1
  br i1 %117, label %118, label %227

118:                                              ; preds = %115
  %119 = load i32, i32* %20, align 4
  %120 = icmp eq i32 %119, 1
  br i1 %120, label %121, label %137

121:                                              ; preds = %118
  %122 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %123 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %122, i32 0, i32 13
  %124 = load i32, i32* %13, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [8 x [8 x [5 x [5 x double]]]], [8 x [8 x [5 x [5 x double]]]]* %123, i64 0, i64 %125
  %127 = load i32, i32* %14, align 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]]* %126, i64 0, i64 %128
  %130 = load i16, i16* %15, align 2
  %131 = sext i16 %130 to i64
  %132 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %129, i64 0, i64 %131
  %133 = load i16, i16* %16, align 2
  %134 = sext i16 %133 to i64
  %135 = getelementptr inbounds [5 x double], [5 x double]* %132, i64 0, i64 %134
  %136 = load double, double* %135, align 8
  store double %136, double* %10, align 8
  br label %349

137:                                              ; preds = %118
  %138 = load i32, i32* %20, align 4
  %139 = icmp eq i32 %138, 2
  br i1 %139, label %140, label %181

140:                                              ; preds = %137
  %141 = load i32, i32* %11, align 4
  %142 = icmp eq i32 %141, 1
  br i1 %142, label %143, label %162

143:                                              ; preds = %140
  %144 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %145 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %144, i32 0, i32 14
  %146 = load i32, i32* %13, align 4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds [8 x [8 x [5 x [5 x [5 x double]]]]], [8 x [8 x [5 x [5 x [5 x double]]]]]* %145, i64 0, i64 %147
  %149 = load i32, i32* %14, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds [8 x [5 x [5 x [5 x double]]]], [8 x [5 x [5 x [5 x double]]]]* %148, i64 0, i64 %150
  %152 = load i16, i16* %15, align 2
  %153 = sext i16 %152 to i64
  %154 = getelementptr inbounds [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %151, i64 0, i64 %153
  %155 = load i16, i16* %18, align 2
  %156 = sext i16 %155 to i64
  %157 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %154, i64 0, i64 %156
  %158 = load i16, i16* %16, align 2
  %159 = sext i16 %158 to i64
  %160 = getelementptr inbounds [5 x double], [5 x double]* %157, i64 0, i64 %159
  %161 = load double, double* %160, align 8
  store double %161, double* %10, align 8
  br label %349

162:                                              ; preds = %140
  %163 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %164 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %163, i32 0, i32 14
  %165 = load i32, i32* %14, align 4
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds [8 x [8 x [5 x [5 x [5 x double]]]]], [8 x [8 x [5 x [5 x [5 x double]]]]]* %164, i64 0, i64 %166
  %168 = load i32, i32* %13, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds [8 x [5 x [5 x [5 x double]]]], [8 x [5 x [5 x [5 x double]]]]* %167, i64 0, i64 %169
  %171 = load i16, i16* %18, align 2
  %172 = sext i16 %171 to i64
  %173 = getelementptr inbounds [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %170, i64 0, i64 %172
  %174 = load i16, i16* %15, align 2
  %175 = sext i16 %174 to i64
  %176 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %173, i64 0, i64 %175
  %177 = load i16, i16* %17, align 2
  %178 = sext i16 %177 to i64
  %179 = getelementptr inbounds [5 x double], [5 x double]* %176, i64 0, i64 %178
  %180 = load double, double* %179, align 8
  store double %180, double* %10, align 8
  br label %349

181:                                              ; preds = %137
  %182 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %183 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %182, i32 0, i32 4
  %184 = load i32, i32* %20, align 4
  %185 = load i32, i32* %21, align 4
  %186 = add nsw i32 %184, %185
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds [31 x double], [31 x double]* %183, i64 0, i64 %187
  %189 = load double, double* %188, align 8
  %190 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %191 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %190, i32 0, i32 8
  %192 = load i32, i32* %13, align 4
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]]* %191, i64 0, i64 %193
  %195 = load i16, i16* %15, align 2
  %196 = sext i16 %195 to i64
  %197 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %194, i64 0, i64 %196
  %198 = load i16, i16* %16, align 2
  %199 = sext i16 %198 to i64
  %200 = getelementptr inbounds [5 x double], [5 x double]* %197, i64 0, i64 %199
  %201 = load double, double* %200, align 8
  %202 = fmul double %189, %201
  %203 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %204 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %203, i32 0, i32 8
  %205 = load i32, i32* %14, align 4
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]]* %204, i64 0, i64 %206
  %208 = load i16, i16* %18, align 2
  %209 = sext i16 %208 to i64
  %210 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %207, i64 0, i64 %209
  %211 = load i16, i16* %17, align 2
  %212 = sext i16 %211 to i64
  %213 = getelementptr inbounds [5 x double], [5 x double]* %210, i64 0, i64 %212
  %214 = load double, double* %213, align 8
  %215 = fmul double %202, %214
  store double %215, double* %23, align 8
  %216 = load double, double* %23, align 8
  %217 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %218 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %217, i32 0, i32 16
  %219 = getelementptr inbounds [5 x [31 x double]], [5 x [31 x double]]* %218, i64 0, i64 2
  %220 = load i32, i32* %20, align 4
  %221 = load i32, i32* %21, align 4
  %222 = sub nsw i32 %220, %221
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds [31 x double], [31 x double]* %219, i64 0, i64 %223
  %225 = load double, double* %224, align 8
  %226 = fmul double %216, %225
  store double %226, double* %10, align 8
  br label %349

227:                                              ; preds = %115
  %228 = load i32, i32* %21, align 4
  %229 = icmp eq i32 %228, 2
  br i1 %229, label %230, label %298

230:                                              ; preds = %227
  %231 = load i32, i32* %20, align 4
  %232 = icmp eq i32 %231, 2
  br i1 %232, label %233, label %255

233:                                              ; preds = %230
  %234 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %235 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %234, i32 0, i32 15
  %236 = load i32, i32* %13, align 4
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds [8 x [8 x [5 x [5 x [5 x [5 x double]]]]]], [8 x [8 x [5 x [5 x [5 x [5 x double]]]]]]* %235, i64 0, i64 %237
  %239 = load i32, i32* %14, align 4
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds [8 x [5 x [5 x [5 x [5 x double]]]]], [8 x [5 x [5 x [5 x [5 x double]]]]]* %238, i64 0, i64 %240
  %242 = load i16, i16* %15, align 2
  %243 = sext i16 %242 to i64
  %244 = getelementptr inbounds [5 x [5 x [5 x [5 x double]]]], [5 x [5 x [5 x [5 x double]]]]* %241, i64 0, i64 %243
  %245 = load i16, i16* %17, align 2
  %246 = sext i16 %245 to i64
  %247 = getelementptr inbounds [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %244, i64 0, i64 %246
  %248 = load i16, i16* %18, align 2
  %249 = sext i16 %248 to i64
  %250 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %247, i64 0, i64 %249
  %251 = load i16, i16* %16, align 2
  %252 = sext i16 %251 to i64
  %253 = getelementptr inbounds [5 x double], [5 x double]* %250, i64 0, i64 %252
  %254 = load double, double* %253, align 8
  store double %254, double* %10, align 8
  br label %349

255:                                              ; preds = %230
  %256 = load i32, i32* %20, align 4
  %257 = icmp eq i32 %256, 3
  br i1 %257, label %258, label %296

258:                                              ; preds = %255
  %259 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %260 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %259, i32 0, i32 4
  %261 = getelementptr inbounds [31 x double], [31 x double]* %260, i64 0, i64 5
  %262 = load double, double* %261, align 8
  %263 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %264 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %263, i32 0, i32 7
  %265 = load i32, i32* %13, align 4
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]]* %264, i64 0, i64 %266
  %268 = load i16, i16* %15, align 2
  %269 = sext i16 %268 to i64
  %270 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %267, i64 0, i64 %269
  %271 = load i16, i16* %16, align 2
  %272 = sext i16 %271 to i64
  %273 = getelementptr inbounds [5 x double], [5 x double]* %270, i64 0, i64 %272
  %274 = load double, double* %273, align 8
  %275 = fmul double %262, %274
  %276 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %277 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %276, i32 0, i32 7
  %278 = load i32, i32* %14, align 4
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]]* %277, i64 0, i64 %279
  %281 = load i16, i16* %18, align 2
  %282 = sext i16 %281 to i64
  %283 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %280, i64 0, i64 %282
  %284 = load i16, i16* %17, align 2
  %285 = sext i16 %284 to i64
  %286 = getelementptr inbounds [5 x double], [5 x double]* %283, i64 0, i64 %285
  %287 = load double, double* %286, align 8
  %288 = fmul double %275, %287
  store double %288, double* %23, align 8
  %289 = load double, double* %23, align 8
  %290 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %291 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %290, i32 0, i32 16
  %292 = getelementptr inbounds [5 x [31 x double]], [5 x [31 x double]]* %291, i64 0, i64 2
  %293 = getelementptr inbounds [31 x double], [31 x double]* %292, i64 0, i64 1
  %294 = load double, double* %293, align 8
  %295 = fmul double %289, %294
  store double %295, double* %10, align 8
  br label %349

296:                                              ; preds = %255
  br label %297

297:                                              ; preds = %296
  br label %298

298:                                              ; preds = %297, %227
  br label %299

299:                                              ; preds = %298
  br label %300

300:                                              ; preds = %299
  %301 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %302 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %301, i32 0, i32 4
  %303 = load i32, i32* %20, align 4
  %304 = load i32, i32* %21, align 4
  %305 = add nsw i32 %303, %304
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds [31 x double], [31 x double]* %302, i64 0, i64 %306
  %308 = load double, double* %307, align 8
  %309 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %310 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %309, i32 0, i32 6
  %311 = load i32, i32* %13, align 4
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]]* %310, i64 0, i64 %312
  %314 = load i16, i16* %15, align 2
  %315 = sext i16 %314 to i64
  %316 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %313, i64 0, i64 %315
  %317 = load i16, i16* %16, align 2
  %318 = sext i16 %317 to i64
  %319 = getelementptr inbounds [5 x double], [5 x double]* %316, i64 0, i64 %318
  %320 = load double, double* %319, align 8
  %321 = fmul double %308, %320
  %322 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %323 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %322, i32 0, i32 6
  %324 = load i32, i32* %14, align 4
  %325 = sext i32 %324 to i64
  %326 = getelementptr inbounds [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]]* %323, i64 0, i64 %325
  %327 = load i16, i16* %18, align 2
  %328 = sext i16 %327 to i64
  %329 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %326, i64 0, i64 %328
  %330 = load i16, i16* %17, align 2
  %331 = sext i16 %330 to i64
  %332 = getelementptr inbounds [5 x double], [5 x double]* %329, i64 0, i64 %331
  %333 = load double, double* %332, align 8
  %334 = fmul double %321, %333
  store double %334, double* %23, align 8
  %335 = load double, double* %23, align 8
  %336 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %19, align 8
  %337 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %336, i32 0, i32 16
  %338 = getelementptr inbounds [5 x [31 x double]], [5 x [31 x double]]* %337, i64 0, i64 2
  %339 = load i32, i32* %20, align 4
  %340 = load i32, i32* %21, align 4
  %341 = sub nsw i32 %339, %340
  %342 = sext i32 %341 to i64
  %343 = getelementptr inbounds [31 x double], [31 x double]* %338, i64 0, i64 %342
  %344 = load double, double* %343, align 8
  %345 = fmul double %335, %344
  store double %345, double* %10, align 8
  br label %349

346:                                              ; preds = %67
  br label %347

347:                                              ; preds = %346, %57
  %348 = load double, double* %23, align 8
  store double %348, double* %10, align 8
  br label %349

349:                                              ; preds = %347, %300, %258, %233, %181, %162, %143, %121, %113
  %350 = load double, double* %10, align 8
  ret double %350
}

declare dso_local i32 @vrna_get_ptype(i32 noundef, i8* noundef) #1

declare dso_local i8* @vrna_realloc(i8* noundef, i32 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @vrna_pf_dimer_probs(double noundef %0, double noundef %1, double noundef %2, %struct.vrna_elem_prob_s* noundef %3, %struct.vrna_elem_prob_s* noundef %4, %struct.vrna_elem_prob_s* noundef %5, i32 noundef %6, %struct.vrna_exp_param_s* noundef %7) #0 {
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca %struct.vrna_elem_prob_s*, align 8
  %13 = alloca %struct.vrna_elem_prob_s*, align 8
  %14 = alloca %struct.vrna_elem_prob_s*, align 8
  %15 = alloca i32, align 4
  %16 = alloca %struct.vrna_exp_param_s*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  %21 = alloca %struct.vrna_elem_prob_s*, align 8
  %22 = alloca %struct.vrna_elem_prob_s*, align 8
  %23 = alloca i32, align 4
  %24 = alloca float, align 4
  store double %0, double* %9, align 8
  store double %1, double* %10, align 8
  store double %2, double* %11, align 8
  store %struct.vrna_elem_prob_s* %3, %struct.vrna_elem_prob_s** %12, align 8
  store %struct.vrna_elem_prob_s* %4, %struct.vrna_elem_prob_s** %13, align 8
  store %struct.vrna_elem_prob_s* %5, %struct.vrna_elem_prob_s** %14, align 8
  store i32 %6, i32* %15, align 4
  store %struct.vrna_exp_param_s* %7, %struct.vrna_exp_param_s** %16, align 8
  %25 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %16, align 8
  %26 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %25, i32 0, i32 36
  %27 = load double, double* %26, align 8
  %28 = fdiv double %27, 1.000000e+03
  store double %28, double* %20, align 8
  %29 = load double, double* %20, align 8
  %30 = fdiv double 1.000000e+00, %29
  %31 = load double, double* %9, align 8
  %32 = load double, double* %10, align 8
  %33 = fsub double %31, %32
  %34 = load double, double* %11, align 8
  %35 = fsub double %33, %34
  %36 = fmul double %30, %35
  %37 = call double @exp(double noundef %36) #5
  %38 = fsub double 1.000000e+00, %37
  store double %38, double* %19, align 8
  store i32 0, i32* %23, align 4
  %39 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %13, align 8
  store %struct.vrna_elem_prob_s* %39, %struct.vrna_elem_prob_s** %21, align 8
  %40 = load double, double* %19, align 8
  %41 = fcmp ogt double %40, 0.000000e+00
  br i1 %41, label %42, label %161

42:                                               ; preds = %8
  %43 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %12, align 8
  store %struct.vrna_elem_prob_s* %43, %struct.vrna_elem_prob_s** %22, align 8
  br label %44

44:                                               ; preds = %157, %42
  %45 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %22, align 8
  %46 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %45, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %160

49:                                               ; preds = %44
  store float 0.000000e+00, float* %24, align 4
  %50 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %22, align 8
  %51 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %50, i32 0, i32 0
  %52 = load i32, i32* %51, align 4
  store i32 %52, i32* %17, align 4
  %53 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %22, align 8
  %54 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %53, i32 0, i32 1
  %55 = load i32, i32* %54, align 4
  store i32 %55, i32* %18, align 4
  br label %56

56:                                               ; preds = %71, %49
  %57 = load i32, i32* %23, align 4
  %58 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %21, align 8
  %59 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %58, i32 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = add nsw i32 %57, %60
  %62 = load i32, i32* %17, align 4
  %63 = icmp slt i32 %61, %62
  br i1 %63, label %64, label %69

64:                                               ; preds = %56
  %65 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %21, align 8
  %66 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %65, i32 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = icmp sgt i32 %67, 0
  br label %69

69:                                               ; preds = %64, %56
  %70 = phi i1 [ false, %56 ], [ %68, %64 ]
  br i1 %70, label %71, label %74

71:                                               ; preds = %69
  %72 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %21, align 8
  %73 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %72, i32 1
  store %struct.vrna_elem_prob_s* %73, %struct.vrna_elem_prob_s** %21, align 8
  br label %56, !llvm.loop !29

74:                                               ; preds = %69
  %75 = load i32, i32* %23, align 4
  %76 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %21, align 8
  %77 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %76, i32 0, i32 0
  %78 = load i32, i32* %77, align 4
  %79 = add nsw i32 %75, %78
  %80 = load i32, i32* %17, align 4
  %81 = icmp eq i32 %79, %80
  br i1 %81, label %82, label %102

82:                                               ; preds = %74
  br label %83

83:                                               ; preds = %98, %82
  %84 = load i32, i32* %23, align 4
  %85 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %21, align 8
  %86 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %85, i32 0, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = add nsw i32 %84, %87
  %89 = load i32, i32* %18, align 4
  %90 = icmp slt i32 %88, %89
  br i1 %90, label %91, label %96

91:                                               ; preds = %83
  %92 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %21, align 8
  %93 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %92, i32 0, i32 1
  %94 = load i32, i32* %93, align 4
  %95 = icmp sgt i32 %94, 0
  br label %96

96:                                               ; preds = %91, %83
  %97 = phi i1 [ false, %83 ], [ %95, %91 ]
  br i1 %97, label %98, label %101

98:                                               ; preds = %96
  %99 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %21, align 8
  %100 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %99, i32 1
  store %struct.vrna_elem_prob_s* %100, %struct.vrna_elem_prob_s** %21, align 8
  br label %83, !llvm.loop !30

101:                                              ; preds = %96
  br label %102

102:                                              ; preds = %101, %74
  %103 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %21, align 8
  %104 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %103, i32 0, i32 1
  %105 = load i32, i32* %104, align 4
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %102
  %108 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %14, align 8
  store %struct.vrna_elem_prob_s* %108, %struct.vrna_elem_prob_s** %21, align 8
  %109 = load i32, i32* %15, align 4
  store i32 %109, i32* %23, align 4
  br label %110

110:                                              ; preds = %107, %102
  %111 = load i32, i32* %23, align 4
  %112 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %21, align 8
  %113 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %112, i32 0, i32 0
  %114 = load i32, i32* %113, align 4
  %115 = add nsw i32 %111, %114
  %116 = load i32, i32* %17, align 4
  %117 = icmp eq i32 %115, %116
  br i1 %117, label %118, label %132

118:                                              ; preds = %110
  %119 = load i32, i32* %23, align 4
  %120 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %21, align 8
  %121 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %120, i32 0, i32 1
  %122 = load i32, i32* %121, align 4
  %123 = add nsw i32 %119, %122
  %124 = load i32, i32* %18, align 4
  %125 = icmp eq i32 %123, %124
  br i1 %125, label %126, label %132

126:                                              ; preds = %118
  %127 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %21, align 8
  %128 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %127, i32 0, i32 2
  %129 = load float, float* %128, align 4
  store float %129, float* %24, align 4
  %130 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %21, align 8
  %131 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %130, i32 1
  store %struct.vrna_elem_prob_s* %131, %struct.vrna_elem_prob_s** %21, align 8
  br label %132

132:                                              ; preds = %126, %118, %110
  %133 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %22, align 8
  %134 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %133, i32 0, i32 2
  %135 = load float, float* %134, align 4
  %136 = fpext float %135 to double
  %137 = load double, double* %19, align 8
  %138 = fsub double 1.000000e+00, %137
  %139 = load float, float* %24, align 4
  %140 = fpext float %139 to double
  %141 = fneg double %138
  %142 = call double @llvm.fmuladd.f64(double %141, double %140, double %136)
  %143 = load double, double* %19, align 8
  %144 = fdiv double %142, %143
  %145 = fptrunc double %144 to float
  %146 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %22, align 8
  %147 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %146, i32 0, i32 2
  store float %145, float* %147, align 4
  %148 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %22, align 8
  %149 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %148, i32 0, i32 2
  %150 = load float, float* %149, align 4
  %151 = fpext float %150 to double
  %152 = fcmp olt double %151, 0.000000e+00
  br i1 %152, label %153, label %156

153:                                              ; preds = %132
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([72 x i8], [72 x i8]* @.str.4, i64 0, i64 0))
  %154 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %22, align 8
  %155 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %154, i32 0, i32 2
  store float 0.000000e+00, float* %155, align 4
  br label %156

156:                                              ; preds = %153, %132
  br label %157

157:                                              ; preds = %156
  %158 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %22, align 8
  %159 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %158, i32 1
  store %struct.vrna_elem_prob_s* %159, %struct.vrna_elem_prob_s** %22, align 8
  br label %44, !llvm.loop !31

160:                                              ; preds = %44
  br label %161

161:                                              ; preds = %160, %8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.helper_arrays* @get_ml_helper_arrays(%struct.vrna_fc_s* noundef %0) #0 {
  %2 = alloca %struct.vrna_fc_s*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.vrna_unstructured_domain_s*, align 8
  %7 = alloca %struct.helper_arrays*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %2, align 8
  %8 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %9 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %8, i32 0, i32 1
  %10 = load i32, i32* %9, align 4
  store i32 %10, i32* %3, align 4
  %11 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %12 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %11, i32 0, i32 22
  %13 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %12, align 8
  store %struct.vrna_unstructured_domain_s* %13, %struct.vrna_unstructured_domain_s** %6, align 8
  %14 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %6, align 8
  %15 = icmp ne %struct.vrna_unstructured_domain_s* %14, null
  br i1 %15, label %16, label %21

16:                                               ; preds = %1
  %17 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %6, align 8
  %18 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %17, i32 0, i32 11
  %19 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %18, align 8
  %20 = icmp ne double (%struct.vrna_fc_s*, i32, i32, i32, i8*)* %19, null
  br label %21

21:                                               ; preds = %16, %1
  %22 = phi i1 [ false, %1 ], [ %20, %16 ]
  %23 = zext i1 %22 to i64
  %24 = select i1 %22, i32 1, i32 0
  store i32 %24, i32* %5, align 4
  %25 = call i8* @vrna_alloc(i32 noundef 48)
  %26 = bitcast i8* %25 to %struct.helper_arrays*
  store %struct.helper_arrays* %26, %struct.helper_arrays** %7, align 8
  %27 = load i32, i32* %3, align 4
  %28 = add i32 %27, 2
  %29 = zext i32 %28 to i64
  %30 = mul i64 8, %29
  %31 = trunc i64 %30 to i32
  %32 = call i8* @vrna_alloc(i32 noundef %31)
  %33 = bitcast i8* %32 to double*
  %34 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %35 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %34, i32 0, i32 0
  store double* %33, double** %35, align 8
  %36 = load i32, i32* %3, align 4
  %37 = add i32 %36, 2
  %38 = zext i32 %37 to i64
  %39 = mul i64 8, %38
  %40 = trunc i64 %39 to i32
  %41 = call i8* @vrna_alloc(i32 noundef %40)
  %42 = bitcast i8* %41 to double*
  %43 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %44 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %43, i32 0, i32 1
  store double* %42, double** %44, align 8
  %45 = load i32, i32* %3, align 4
  %46 = add i32 %45, 2
  %47 = zext i32 %46 to i64
  %48 = mul i64 8, %47
  %49 = trunc i64 %48 to i32
  %50 = call i8* @vrna_alloc(i32 noundef %49)
  %51 = bitcast i8* %50 to double*
  %52 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %53 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %52, i32 0, i32 2
  store double* %51, double** %53, align 8
  %54 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %55 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %54, i32 0, i32 3
  store i32 0, i32* %55, align 8
  %56 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %57 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %56, i32 0, i32 4
  store double** null, double*** %57, align 8
  %58 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %59 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %58, i32 0, i32 5
  store double* null, double** %59, align 8
  %60 = load i32, i32* %5, align 4
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %159

62:                                               ; preds = %21
  store i32 0, i32* %4, align 4
  br label %63

63:                                               ; preds = %92, %62
  %64 = load i32, i32* %4, align 4
  %65 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %6, align 8
  %66 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %65, i32 0, i32 0
  %67 = load i32, i32* %66, align 8
  %68 = icmp ult i32 %64, %67
  br i1 %68, label %69, label %95

69:                                               ; preds = %63
  %70 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %71 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %70, i32 0, i32 3
  %72 = load i32, i32* %71, align 8
  %73 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %6, align 8
  %74 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %73, i32 0, i32 1
  %75 = load i32*, i32** %74, align 8
  %76 = load i32, i32* %4, align 4
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds i32, i32* %75, i64 %77
  %79 = load i32, i32* %78, align 4
  %80 = icmp ult i32 %72, %79
  br i1 %80, label %81, label %91

81:                                               ; preds = %69
  %82 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %6, align 8
  %83 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %82, i32 0, i32 1
  %84 = load i32*, i32** %83, align 8
  %85 = load i32, i32* %4, align 4
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds i32, i32* %84, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %90 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %89, i32 0, i32 3
  store i32 %88, i32* %90, align 8
  br label %91

91:                                               ; preds = %81, %69
  br label %92

92:                                               ; preds = %91
  %93 = load i32, i32* %4, align 4
  %94 = add i32 %93, 1
  store i32 %94, i32* %4, align 4
  br label %63, !llvm.loop !32

95:                                               ; preds = %63
  %96 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %97 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %96, i32 0, i32 3
  %98 = load i32, i32* %97, align 8
  %99 = add nsw i32 %98, 1
  %100 = sext i32 %99 to i64
  %101 = mul i64 8, %100
  %102 = trunc i64 %101 to i32
  %103 = call i8* @vrna_alloc(i32 noundef %102)
  %104 = bitcast i8* %103 to double**
  %105 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %106 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %105, i32 0, i32 4
  store double** %104, double*** %106, align 8
  store i32 0, i32* %4, align 4
  br label %107

107:                                              ; preds = %127, %95
  %108 = load i32, i32* %4, align 4
  %109 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %110 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %109, i32 0, i32 3
  %111 = load i32, i32* %110, align 8
  %112 = icmp ule i32 %108, %111
  br i1 %112, label %113, label %130

113:                                              ; preds = %107
  %114 = load i32, i32* %3, align 4
  %115 = add i32 %114, 2
  %116 = zext i32 %115 to i64
  %117 = mul i64 8, %116
  %118 = trunc i64 %117 to i32
  %119 = call i8* @vrna_alloc(i32 noundef %118)
  %120 = bitcast i8* %119 to double*
  %121 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %122 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %121, i32 0, i32 4
  %123 = load double**, double*** %122, align 8
  %124 = load i32, i32* %4, align 4
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds double*, double** %123, i64 %125
  store double* %120, double** %126, align 8
  br label %127

127:                                              ; preds = %113
  %128 = load i32, i32* %4, align 4
  %129 = add i32 %128, 1
  store i32 %129, i32* %4, align 4
  br label %107, !llvm.loop !33

130:                                              ; preds = %107
  %131 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %132 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %131, i32 0, i32 3
  %133 = load i32, i32* %132, align 8
  %134 = add nsw i32 %133, 1
  %135 = sext i32 %134 to i64
  %136 = mul i64 8, %135
  %137 = trunc i64 %136 to i32
  %138 = call i8* @vrna_alloc(i32 noundef %137)
  %139 = bitcast i8* %138 to double*
  %140 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %141 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %140, i32 0, i32 5
  store double* %139, double** %141, align 8
  store i32 0, i32* %4, align 4
  br label %142

142:                                              ; preds = %155, %130
  %143 = load i32, i32* %4, align 4
  %144 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %145 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %144, i32 0, i32 3
  %146 = load i32, i32* %145, align 8
  %147 = icmp ule i32 %143, %146
  br i1 %147, label %148, label %158

148:                                              ; preds = %142
  %149 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  %150 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %149, i32 0, i32 5
  %151 = load double*, double** %150, align 8
  %152 = load i32, i32* %4, align 4
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds double, double* %151, i64 %153
  store double 0.000000e+00, double* %154, align 8
  br label %155

155:                                              ; preds = %148
  %156 = load i32, i32* %4, align 4
  %157 = add i32 %156, 1
  store i32 %157, i32* %4, align 4
  br label %142, !llvm.loop !34

158:                                              ; preds = %142
  br label %159

159:                                              ; preds = %158, %21
  %160 = load %struct.helper_arrays*, %struct.helper_arrays** %7, align 8
  ret %struct.helper_arrays* %160
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.constraints_helper* @get_constraints_helper(%struct.vrna_fc_s* noundef %0) #0 {
  %2 = alloca %struct.vrna_fc_s*, align 8
  %3 = alloca %struct.constraints_helper*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %2, align 8
  %4 = call i8* @vrna_alloc(i32 noundef 752)
  %5 = bitcast i8* %4 to %struct.constraints_helper*
  store %struct.constraints_helper* %5, %struct.constraints_helper** %3, align 8
  %6 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %7 = load %struct.constraints_helper*, %struct.constraints_helper** %3, align 8
  %8 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %7, i32 0, i32 0
  %9 = call i8 (i32, i32, i32, i32, i8, i8*)* @prepare_hc_ext_def(%struct.vrna_fc_s* noundef %6, %struct.hc_ext_def_dat* noundef %8)
  %10 = load %struct.constraints_helper*, %struct.constraints_helper** %3, align 8
  %11 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %10, i32 0, i32 1
  store i8 (i32, i32, i32, i32, i8, i8*)* %9, i8 (i32, i32, i32, i32, i8, i8*)** %11, align 8
  %12 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %13 = load %struct.constraints_helper*, %struct.constraints_helper** %3, align 8
  %14 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %13, i32 0, i32 2
  %15 = call i8 (i32, i32, i32, i32, i8, i8*)* @prepare_hc_hp_def(%struct.vrna_fc_s* noundef %12, %struct.hc_hp_def_dat* noundef %14)
  %16 = load %struct.constraints_helper*, %struct.constraints_helper** %3, align 8
  %17 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %16, i32 0, i32 3
  store i8 (i32, i32, i32, i32, i8, i8*)* %15, i8 (i32, i32, i32, i32, i8, i8*)** %17, align 8
  %18 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %19 = load %struct.constraints_helper*, %struct.constraints_helper** %3, align 8
  %20 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %19, i32 0, i32 4
  %21 = call i8 (i32, i32, i32, i32, i8*)* @prepare_hc_int_def(%struct.vrna_fc_s* noundef %18, %struct.hc_int_def_dat* noundef %20)
  %22 = load %struct.constraints_helper*, %struct.constraints_helper** %3, align 8
  %23 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %22, i32 0, i32 5
  store i8 (i32, i32, i32, i32, i8*)* %21, i8 (i32, i32, i32, i32, i8*)** %23, align 8
  %24 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %25 = load %struct.constraints_helper*, %struct.constraints_helper** %3, align 8
  %26 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %25, i32 0, i32 6
  %27 = call i8 (i32, i32, i32, i32, i8, i8*)* @prepare_hc_mb_def(%struct.vrna_fc_s* noundef %24, %struct.hc_mb_def_dat* noundef %26)
  %28 = load %struct.constraints_helper*, %struct.constraints_helper** %3, align 8
  %29 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %28, i32 0, i32 7
  store i8 (i32, i32, i32, i32, i8, i8*)* %27, i8 (i32, i32, i32, i32, i8, i8*)** %29, align 8
  %30 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %31 = load %struct.constraints_helper*, %struct.constraints_helper** %3, align 8
  %32 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %31, i32 0, i32 8
  call void @init_sc_ext_exp(%struct.vrna_fc_s* noundef %30, %struct.sc_ext_exp_dat* noundef %32)
  %33 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %34 = load %struct.constraints_helper*, %struct.constraints_helper** %3, align 8
  %35 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %34, i32 0, i32 9
  call void @init_sc_hp_exp(%struct.vrna_fc_s* noundef %33, %struct.sc_hp_exp_dat* noundef %35)
  %36 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %37 = load %struct.constraints_helper*, %struct.constraints_helper** %3, align 8
  %38 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %37, i32 0, i32 10
  call void @init_sc_int_exp(%struct.vrna_fc_s* noundef %36, %struct.sc_int_exp_dat* noundef %38)
  %39 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %40 = load %struct.constraints_helper*, %struct.constraints_helper** %3, align 8
  %41 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %40, i32 0, i32 11
  call void @init_sc_mb_exp(%struct.vrna_fc_s* noundef %39, %struct.sc_mb_exp_dat* noundef %41)
  %42 = load %struct.constraints_helper*, %struct.constraints_helper** %3, align 8
  ret %struct.constraints_helper* %42
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @compute_bpp_internal(%struct.vrna_fc_s* noundef %0, i32 noundef %1, %struct.vrna_elem_prob_s** noundef %2, i32* noundef %3, i32* noundef %4, double* noundef %5, i32* noundef %6, %struct.constraints_helper* noundef %7) #0 {
  %9 = alloca %struct.vrna_fc_s*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.vrna_elem_prob_s**, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca double*, align 8
  %15 = alloca i32*, align 8
  %16 = alloca %struct.constraints_helper*, align 8
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i8*, align 8
  %20 = alloca i16*, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32*, align 8
  %30 = alloca i32*, align 8
  %31 = alloca i32*, align 8
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i32*, align 8
  %35 = alloca double, align 8
  %36 = alloca double, align 8
  %37 = alloca double*, align 8
  %38 = alloca double*, align 8
  %39 = alloca double*, align 8
  %40 = alloca double, align 8
  %41 = alloca %struct.vrna_exp_param_s*, align 8
  %42 = alloca %struct.vrna_md_s*, align 8
  %43 = alloca %struct.vrna_hc_s*, align 8
  %44 = alloca %struct.vrna_sc_s*, align 8
  %45 = alloca %struct.vrna_unstructured_domain_s*, align 8
  %46 = alloca %struct.hc_int_def_dat*, align 8
  %47 = alloca i8 (i32, i32, i32, i32, i8*)*, align 8
  %48 = alloca %struct.sc_int_exp_dat*, align 8
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca double, align 8
  %52 = alloca double, align 8
  %53 = alloca %struct.vrna_basepair_s*, align 8
  %54 = alloca %struct.vrna_basepair_s*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %9, align 8
  store i32 %1, i32* %10, align 4
  store %struct.vrna_elem_prob_s** %2, %struct.vrna_elem_prob_s*** %11, align 8
  store i32* %3, i32** %12, align 8
  store i32* %4, i32** %13, align 8
  store double* %5, double** %14, align 8
  store i32* %6, i32** %15, align 8
  store %struct.constraints_helper* %7, %struct.constraints_helper** %16, align 8
  %55 = load %struct.constraints_helper*, %struct.constraints_helper** %16, align 8
  %56 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %55, i32 0, i32 4
  store %struct.hc_int_def_dat* %56, %struct.hc_int_def_dat** %46, align 8
  %57 = load %struct.constraints_helper*, %struct.constraints_helper** %16, align 8
  %58 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %57, i32 0, i32 5
  %59 = load i8 (i32, i32, i32, i32, i8*)*, i8 (i32, i32, i32, i32, i8*)** %58, align 8
  store i8 (i32, i32, i32, i32, i8*)* %59, i8 (i32, i32, i32, i32, i8*)** %47, align 8
  %60 = load %struct.constraints_helper*, %struct.constraints_helper** %16, align 8
  %61 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %60, i32 0, i32 10
  store %struct.sc_int_exp_dat* %61, %struct.sc_int_exp_dat** %48, align 8
  %62 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %63 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %62, i32 0, i32 1
  %64 = load i32, i32* %63, align 4
  store i32 %64, i32* %24, align 4
  %65 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %66 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %65, i32 0, i32 24
  %67 = bitcast %union.anon.9* %66 to %struct.anon.10*
  %68 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %67, i32 0, i32 3
  %69 = load i8*, i8** %68, align 8
  store i8* %69, i8** %19, align 8
  %70 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %71 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %70, i32 0, i32 24
  %72 = bitcast %union.anon.9* %71 to %struct.anon.10*
  %73 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %72, i32 0, i32 1
  %74 = load i16*, i16** %73, align 8
  store i16* %74, i16** %20, align 8
  %75 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %76 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %75, i32 0, i32 16
  %77 = load i32*, i32** %76, align 8
  store i32* %77, i32** %29, align 8
  %78 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %79 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %78, i32 0, i32 17
  %80 = load i32*, i32** %79, align 8
  store i32* %80, i32** %30, align 8
  %81 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %82 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %81, i32 0, i32 15
  %83 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %82, align 8
  store %struct.vrna_exp_param_s* %83, %struct.vrna_exp_param_s** %41, align 8
  %84 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %41, align 8
  %85 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %84, i32 0, i32 40
  store %struct.vrna_md_s* %85, %struct.vrna_md_s** %42, align 8
  %86 = load %struct.vrna_md_s*, %struct.vrna_md_s** %42, align 8
  %87 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %86, i32 0, i32 18
  %88 = load i32, i32* %87, align 4
  store i32 %88, i32* %32, align 4
  %89 = load %struct.vrna_md_s*, %struct.vrna_md_s** %42, align 8
  %90 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %89, i32 0, i32 25
  %91 = getelementptr inbounds [8 x i32], [8 x i32]* %90, i64 0, i64 0
  store i32* %91, i32** %31, align 8
  %92 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %93 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %92, i32 0, i32 11
  %94 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %93, align 8
  store %struct.vrna_hc_s* %94, %struct.vrna_hc_s** %43, align 8
  %95 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %96 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %95, i32 0, i32 24
  %97 = bitcast %union.anon.9* %96 to %struct.anon.10*
  %98 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %97, i32 0, i32 5
  %99 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %98, align 8
  store %struct.vrna_sc_s* %99, %struct.vrna_sc_s** %44, align 8
  %100 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %101 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %100, i32 0, i32 22
  %102 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %101, align 8
  store %struct.vrna_unstructured_domain_s* %102, %struct.vrna_unstructured_domain_s** %45, align 8
  %103 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %45, align 8
  %104 = icmp ne %struct.vrna_unstructured_domain_s* %103, null
  br i1 %104, label %105, label %110

105:                                              ; preds = %8
  %106 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %45, align 8
  %107 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %106, i32 0, i32 11
  %108 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %107, align 8
  %109 = icmp ne double (%struct.vrna_fc_s*, i32, i32, i32, i8*)* %108, null
  br label %110

110:                                              ; preds = %105, %8
  %111 = phi i1 [ false, %8 ], [ %109, %105 ]
  %112 = zext i1 %111 to i64
  %113 = select i1 %111, i32 1, i32 0
  store i32 %113, i32* %33, align 4
  %114 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %43, align 8
  %115 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %114, i32 0, i32 6
  %116 = load i32*, i32** %115, align 8
  store i32* %116, i32** %34, align 8
  %117 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %118 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %117, i32 0, i32 13
  %119 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %118, align 8
  %120 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %119, i32 0, i32 4
  %121 = bitcast %union.anon.5* %120 to %struct.anon.6*
  %122 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %121, i32 0, i32 1
  %123 = load double*, double** %122, align 8
  store double* %123, double** %37, align 8
  %124 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %125 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %124, i32 0, i32 13
  %126 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %125, align 8
  %127 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %126, i32 0, i32 4
  %128 = bitcast %union.anon.5* %127 to %struct.anon.6*
  %129 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %128, i32 0, i32 4
  %130 = load double*, double** %129, align 8
  store double* %130, double** %38, align 8
  %131 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %132 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %131, i32 0, i32 13
  %133 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %132, align 8
  %134 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %133, i32 0, i32 2
  %135 = load double*, double** %134, align 8
  store double* %135, double** %39, align 8
  store double 0x7FEFFFFFFFFFFFFF, double* %40, align 8
  store i32 1, i32* %23, align 4
  br label %136

136:                                              ; preds = %581, %110
  %137 = load i32, i32* %23, align 4
  %138 = load i32, i32* %10, align 4
  %139 = load i32, i32* %32, align 4
  %140 = sub nsw i32 %138, %139
  %141 = icmp slt i32 %137, %140
  br i1 %141, label %142, label %584

142:                                              ; preds = %136
  %143 = load i32*, i32** %29, align 8
  %144 = load i32, i32* %23, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i32, i32* %143, i64 %145
  %147 = load i32, i32* %146, align 4
  %148 = load i32, i32* %10, align 4
  %149 = sub nsw i32 %147, %148
  store i32 %149, i32* %26, align 4
  %150 = load double*, double** %37, align 8
  %151 = load i32, i32* %26, align 4
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds double, double* %150, i64 %152
  %154 = load double, double* %153, align 8
  %155 = fcmp oeq double %154, 0.000000e+00
  br i1 %155, label %156, label %157

156:                                              ; preds = %142
  br label %581

157:                                              ; preds = %142
  %158 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %43, align 8
  %159 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %158, i32 0, i32 3
  %160 = bitcast %union.anon* %159 to %struct.anon*
  %161 = getelementptr inbounds %struct.anon, %struct.anon* %160, i32 0, i32 0
  %162 = load i8*, i8** %161, align 8
  %163 = load i32, i32* %10, align 4
  %164 = load i32, i32* %24, align 4
  %165 = mul nsw i32 %163, %164
  %166 = load i32, i32* %23, align 4
  %167 = add nsw i32 %165, %166
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i8, i8* %162, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  %172 = and i32 %171, 8
  %173 = icmp ne i32 %172, 0
  br i1 %173, label %174, label %529

174:                                              ; preds = %157
  %175 = load i32*, i32** %31, align 8
  %176 = load i32*, i32** %30, align 8
  %177 = load i32, i32* %10, align 4
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i32, i32* %176, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = load i32, i32* %23, align 4
  %182 = add nsw i32 %180, %181
  %183 = load i8*, i8** %19, align 8
  %184 = call i32 @vrna_get_ptype(i32 noundef %182, i8* noundef %183)
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds i32, i32* %175, i64 %185
  %187 = load i32, i32* %186, align 4
  %188 = trunc i32 %187 to i8
  store i8 %188, i8* %18, align 1
  %189 = load i32, i32* %23, align 4
  %190 = sub nsw i32 %189, 30
  %191 = sub nsw i32 %190, 1
  %192 = icmp sgt i32 1, %191
  br i1 %192, label %193, label %194

193:                                              ; preds = %174
  br label %198

194:                                              ; preds = %174
  %195 = load i32, i32* %23, align 4
  %196 = sub nsw i32 %195, 30
  %197 = sub nsw i32 %196, 1
  br label %198

198:                                              ; preds = %194, %193
  %199 = phi i32 [ 1, %193 ], [ %197, %194 ]
  store i32 %199, i32* %21, align 4
  br label %200

200:                                              ; preds = %525, %198
  %201 = load i32, i32* %21, align 4
  %202 = load i32, i32* %23, align 4
  %203 = sub nsw i32 %202, 1
  %204 = icmp sle i32 %201, %203
  br i1 %204, label %205, label %528

205:                                              ; preds = %200
  %206 = load i32, i32* %23, align 4
  %207 = load i32, i32* %21, align 4
  %208 = sub nsw i32 %206, %207
  %209 = sub nsw i32 %208, 1
  store i32 %209, i32* %27, align 4
  %210 = load i32*, i32** %34, align 8
  %211 = load i32, i32* %21, align 4
  %212 = add nsw i32 %211, 1
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i32, i32* %210, i64 %213
  %215 = load i32, i32* %214, align 4
  %216 = load i32, i32* %27, align 4
  %217 = icmp slt i32 %215, %216
  br i1 %217, label %218, label %219

218:                                              ; preds = %205
  br label %525

219:                                              ; preds = %205
  %220 = load i32, i32* %10, align 4
  %221 = add nsw i32 %220, 1
  %222 = add nsw i32 %221, 30
  %223 = load i32, i32* %27, align 4
  %224 = sub nsw i32 %222, %223
  store i32 %224, i32* %49, align 4
  %225 = load i32, i32* %49, align 4
  %226 = load i32, i32* %24, align 4
  %227 = icmp sgt i32 %225, %226
  br i1 %227, label %228, label %230

228:                                              ; preds = %219
  %229 = load i32, i32* %24, align 4
  store i32 %229, i32* %49, align 4
  br label %230

230:                                              ; preds = %228, %219
  %231 = load i32, i32* %49, align 4
  %232 = load i32, i32* %10, align 4
  %233 = add nsw i32 %232, 1
  %234 = load i32*, i32** %34, align 8
  %235 = load i32, i32* %10, align 4
  %236 = add nsw i32 %235, 1
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds i32, i32* %234, i64 %237
  %239 = load i32, i32* %238, align 4
  %240 = add nsw i32 %233, %239
  %241 = icmp sgt i32 %231, %240
  br i1 %241, label %242, label %252

242:                                              ; preds = %230
  %243 = load i32, i32* %10, align 4
  %244 = add nsw i32 %243, 1
  %245 = load i32*, i32** %34, align 8
  %246 = load i32, i32* %10, align 4
  %247 = add nsw i32 %246, 1
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds i32, i32* %245, i64 %248
  %250 = load i32, i32* %249, align 4
  %251 = add nsw i32 %244, %250
  store i32 %251, i32* %49, align 4
  br label %252

252:                                              ; preds = %242, %230
  store i32 0, i32* %28, align 4
  %253 = load i32, i32* %10, align 4
  %254 = add nsw i32 %253, 1
  store i32 %254, i32* %22, align 4
  br label %255

255:                                              ; preds = %519, %252
  %256 = load i32, i32* %22, align 4
  %257 = load i32, i32* %49, align 4
  %258 = icmp sle i32 %256, %257
  br i1 %258, label %259, label %524

259:                                              ; preds = %255
  %260 = load i32*, i32** %29, align 8
  %261 = load i32, i32* %21, align 4
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds i32, i32* %260, i64 %262
  %264 = load i32, i32* %263, align 4
  %265 = load i32, i32* %22, align 4
  %266 = sub nsw i32 %264, %265
  store i32 %266, i32* %25, align 4
  %267 = load double*, double** %38, align 8
  %268 = load i32, i32* %25, align 4
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds double, double* %267, i64 %269
  %271 = load double, double* %270, align 8
  %272 = fcmp oeq double %271, 0.000000e+00
  br i1 %272, label %273, label %274

273:                                              ; preds = %259
  br label %519

274:                                              ; preds = %259
  %275 = load i8 (i32, i32, i32, i32, i8*)*, i8 (i32, i32, i32, i32, i8*)** %47, align 8
  %276 = load i32, i32* %21, align 4
  %277 = load i32, i32* %22, align 4
  %278 = load i32, i32* %23, align 4
  %279 = load i32, i32* %10, align 4
  %280 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %46, align 8
  %281 = bitcast %struct.hc_int_def_dat* %280 to i8*
  %282 = call zeroext i8 %275(i32 noundef %276, i32 noundef %277, i32 noundef %278, i32 noundef %279, i8* noundef %281)
  %283 = icmp ne i8 %282, 0
  br i1 %283, label %284, label %518

284:                                              ; preds = %274
  %285 = load i32*, i32** %30, align 8
  %286 = load i32, i32* %22, align 4
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds i32, i32* %285, i64 %287
  %289 = load i32, i32* %288, align 4
  %290 = load i32, i32* %21, align 4
  %291 = add nsw i32 %289, %290
  store i32 %291, i32* %50, align 4
  %292 = load i32, i32* %50, align 4
  %293 = load i8*, i8** %19, align 8
  %294 = call i32 @vrna_get_ptype(i32 noundef %292, i8* noundef %293)
  %295 = trunc i32 %294 to i8
  store i8 %295, i8* %17, align 1
  %296 = load double*, double** %38, align 8
  %297 = load i32, i32* %25, align 4
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds double, double* %296, i64 %298
  %300 = load double, double* %299, align 8
  %301 = load i32, i32* %27, align 4
  %302 = load i32, i32* %28, align 4
  %303 = load i8, i8* %17, align 1
  %304 = zext i8 %303 to i32
  %305 = load i8, i8* %18, align 1
  %306 = zext i8 %305 to i32
  %307 = load i16*, i16** %20, align 8
  %308 = load i32, i32* %21, align 4
  %309 = add nsw i32 %308, 1
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds i16, i16* %307, i64 %310
  %312 = load i16, i16* %311, align 2
  %313 = load i16*, i16** %20, align 8
  %314 = load i32, i32* %22, align 4
  %315 = sub nsw i32 %314, 1
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds i16, i16* %313, i64 %316
  %318 = load i16, i16* %317, align 2
  %319 = load i16*, i16** %20, align 8
  %320 = load i32, i32* %23, align 4
  %321 = sub nsw i32 %320, 1
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds i16, i16* %319, i64 %322
  %324 = load i16, i16* %323, align 2
  %325 = load i16*, i16** %20, align 8
  %326 = load i32, i32* %10, align 4
  %327 = add nsw i32 %326, 1
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds i16, i16* %325, i64 %328
  %330 = load i16, i16* %329, align 2
  %331 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %41, align 8
  %332 = call double @exp_E_IntLoop(i32 noundef %301, i32 noundef %302, i32 noundef %304, i32 noundef %306, i16 noundef signext %312, i16 noundef signext %318, i16 noundef signext %324, i16 noundef signext %330, %struct.vrna_exp_param_s* noundef %331)
  %333 = fmul double %300, %332
  %334 = load double*, double** %39, align 8
  %335 = load i32, i32* %27, align 4
  %336 = load i32, i32* %28, align 4
  %337 = add nsw i32 %335, %336
  %338 = add nsw i32 %337, 2
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds double, double* %334, i64 %339
  %341 = load double, double* %340, align 8
  %342 = fmul double %333, %341
  store double %342, double* %36, align 8
  %343 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %48, align 8
  %344 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %343, i32 0, i32 16
  %345 = load double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %344, align 8
  %346 = icmp ne double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %345, null
  br i1 %346, label %347, label %359

347:                                              ; preds = %284
  %348 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %48, align 8
  %349 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %348, i32 0, i32 16
  %350 = load double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %349, align 8
  %351 = load i32, i32* %21, align 4
  %352 = load i32, i32* %22, align 4
  %353 = load i32, i32* %23, align 4
  %354 = load i32, i32* %10, align 4
  %355 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %48, align 8
  %356 = call double %350(i32 noundef %351, i32 noundef %352, i32 noundef %353, i32 noundef %354, %struct.sc_int_exp_dat* noundef %355)
  %357 = load double, double* %36, align 8
  %358 = fmul double %357, %356
  store double %358, double* %36, align 8
  br label %359

359:                                              ; preds = %347, %284
  %360 = load i32, i32* %33, align 4
  %361 = icmp ne i32 %360, 0
  br i1 %361, label %362, label %410

362:                                              ; preds = %359
  store double 0.000000e+00, double* %52, align 8
  store double 0.000000e+00, double* %51, align 8
  %363 = load i32, i32* %27, align 4
  %364 = icmp sgt i32 %363, 0
  br i1 %364, label %365, label %378

365:                                              ; preds = %362
  %366 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %45, align 8
  %367 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %366, i32 0, i32 11
  %368 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %367, align 8
  %369 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %370 = load i32, i32* %21, align 4
  %371 = add nsw i32 %370, 1
  %372 = load i32, i32* %23, align 4
  %373 = sub nsw i32 %372, 1
  %374 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %45, align 8
  %375 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %374, i32 0, i32 12
  %376 = load i8*, i8** %375, align 8
  %377 = call double %368(%struct.vrna_fc_s* noundef %369, i32 noundef %371, i32 noundef %373, i32 noundef 4, i8* noundef %376)
  store double %377, double* %51, align 8
  br label %378

378:                                              ; preds = %365, %362
  %379 = load i32, i32* %28, align 4
  %380 = icmp sgt i32 %379, 0
  br i1 %380, label %381, label %394

381:                                              ; preds = %378
  %382 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %45, align 8
  %383 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %382, i32 0, i32 11
  %384 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %383, align 8
  %385 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %386 = load i32, i32* %10, align 4
  %387 = add nsw i32 %386, 1
  %388 = load i32, i32* %22, align 4
  %389 = sub nsw i32 %388, 1
  %390 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %45, align 8
  %391 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %390, i32 0, i32 12
  %392 = load i8*, i8** %391, align 8
  %393 = call double %384(%struct.vrna_fc_s* noundef %385, i32 noundef %387, i32 noundef %389, i32 noundef 4, i8* noundef %392)
  store double %393, double* %52, align 8
  br label %394

394:                                              ; preds = %381, %378
  %395 = load double, double* %36, align 8
  store double %395, double* %35, align 8
  %396 = load double, double* %35, align 8
  %397 = load double, double* %51, align 8
  %398 = load double, double* %36, align 8
  %399 = call double @llvm.fmuladd.f64(double %396, double %397, double %398)
  store double %399, double* %36, align 8
  %400 = load double, double* %35, align 8
  %401 = load double, double* %52, align 8
  %402 = load double, double* %36, align 8
  %403 = call double @llvm.fmuladd.f64(double %400, double %401, double %402)
  store double %403, double* %36, align 8
  %404 = load double, double* %35, align 8
  %405 = load double, double* %51, align 8
  %406 = fmul double %404, %405
  %407 = load double, double* %52, align 8
  %408 = load double, double* %36, align 8
  %409 = call double @llvm.fmuladd.f64(double %406, double %407, double %408)
  store double %409, double* %36, align 8
  br label %410

410:                                              ; preds = %394, %359
  %411 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %44, align 8
  %412 = icmp ne %struct.vrna_sc_s* %411, null
  br i1 %412, label %413, label %510

413:                                              ; preds = %410
  %414 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %44, align 8
  %415 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %414, i32 0, i32 12
  %416 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %415, align 8
  %417 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %416, null
  br i1 %417, label %418, label %510

418:                                              ; preds = %413
  %419 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %44, align 8
  %420 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %419, i32 0, i32 11
  %421 = load %struct.vrna_basepair_s* (i32, i32, i32, i32, i8, i8*)*, %struct.vrna_basepair_s* (i32, i32, i32, i32, i8, i8*)** %420, align 8
  %422 = icmp ne %struct.vrna_basepair_s* (i32, i32, i32, i32, i8, i8*)* %421, null
  br i1 %422, label %423, label %510

423:                                              ; preds = %418
  %424 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %44, align 8
  %425 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %424, i32 0, i32 11
  %426 = load %struct.vrna_basepair_s* (i32, i32, i32, i32, i8, i8*)*, %struct.vrna_basepair_s* (i32, i32, i32, i32, i8, i8*)** %425, align 8
  %427 = load i32, i32* %21, align 4
  %428 = load i32, i32* %22, align 4
  %429 = load i32, i32* %23, align 4
  %430 = load i32, i32* %10, align 4
  %431 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %44, align 8
  %432 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %431, i32 0, i32 13
  %433 = load i8*, i8** %432, align 8
  %434 = call %struct.vrna_basepair_s* %426(i32 noundef %427, i32 noundef %428, i32 noundef %429, i32 noundef %430, i8 noundef zeroext 2, i8* noundef %433)
  store %struct.vrna_basepair_s* %434, %struct.vrna_basepair_s** %54, align 8
  %435 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %54, align 8
  store %struct.vrna_basepair_s* %435, %struct.vrna_basepair_s** %53, align 8
  br label %436

436:                                              ; preds = %504, %423
  %437 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %53, align 8
  %438 = icmp ne %struct.vrna_basepair_s* %437, null
  br i1 %438, label %439, label %444

439:                                              ; preds = %436
  %440 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %53, align 8
  %441 = getelementptr inbounds %struct.vrna_basepair_s, %struct.vrna_basepair_s* %440, i32 0, i32 0
  %442 = load i32, i32* %441, align 4
  %443 = icmp ne i32 %442, 0
  br label %444

444:                                              ; preds = %439, %436
  %445 = phi i1 [ false, %436 ], [ %443, %439 ]
  br i1 %445, label %446, label %507

446:                                              ; preds = %444
  %447 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %53, align 8
  %448 = getelementptr inbounds %struct.vrna_basepair_s, %struct.vrna_basepair_s* %447, i32 0, i32 0
  %449 = load i32, i32* %448, align 4
  %450 = load %struct.vrna_elem_prob_s**, %struct.vrna_elem_prob_s*** %11, align 8
  %451 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %450, align 8
  %452 = load i32*, i32** %12, align 8
  %453 = load i32, i32* %452, align 4
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %451, i64 %454
  %456 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %455, i32 0, i32 0
  store i32 %449, i32* %456, align 4
  %457 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %53, align 8
  %458 = getelementptr inbounds %struct.vrna_basepair_s, %struct.vrna_basepair_s* %457, i32 0, i32 1
  %459 = load i32, i32* %458, align 4
  %460 = load %struct.vrna_elem_prob_s**, %struct.vrna_elem_prob_s*** %11, align 8
  %461 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %460, align 8
  %462 = load i32*, i32** %12, align 8
  %463 = load i32, i32* %462, align 4
  %464 = sext i32 %463 to i64
  %465 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %461, i64 %464
  %466 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %465, i32 0, i32 1
  store i32 %459, i32* %466, align 4
  %467 = load double, double* %36, align 8
  %468 = load double*, double** %37, align 8
  %469 = load i32, i32* %26, align 4
  %470 = sext i32 %469 to i64
  %471 = getelementptr inbounds double, double* %468, i64 %470
  %472 = load double, double* %471, align 8
  %473 = fmul double %467, %472
  %474 = fptrunc double %473 to float
  %475 = load %struct.vrna_elem_prob_s**, %struct.vrna_elem_prob_s*** %11, align 8
  %476 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %475, align 8
  %477 = load i32*, i32** %12, align 8
  %478 = load i32, i32* %477, align 4
  %479 = add nsw i32 %478, 1
  store i32 %479, i32* %477, align 4
  %480 = sext i32 %478 to i64
  %481 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %476, i64 %480
  %482 = getelementptr inbounds %struct.vrna_elem_prob_s, %struct.vrna_elem_prob_s* %481, i32 0, i32 2
  store float %474, float* %482, align 4
  %483 = load i32*, i32** %12, align 8
  %484 = load i32, i32* %483, align 4
  %485 = load i32*, i32** %13, align 8
  %486 = load i32, i32* %485, align 4
  %487 = icmp eq i32 %484, %486
  br i1 %487, label %488, label %503

488:                                              ; preds = %446
  %489 = load i32*, i32** %13, align 8
  %490 = load i32, i32* %489, align 4
  %491 = add nsw i32 %490, 5
  store i32 %491, i32* %489, align 4
  %492 = load %struct.vrna_elem_prob_s**, %struct.vrna_elem_prob_s*** %11, align 8
  %493 = load %struct.vrna_elem_prob_s*, %struct.vrna_elem_prob_s** %492, align 8
  %494 = bitcast %struct.vrna_elem_prob_s* %493 to i8*
  %495 = load i32*, i32** %13, align 8
  %496 = load i32, i32* %495, align 4
  %497 = sext i32 %496 to i64
  %498 = mul i64 16, %497
  %499 = trunc i64 %498 to i32
  %500 = call i8* @vrna_realloc(i8* noundef %494, i32 noundef %499)
  %501 = bitcast i8* %500 to %struct.vrna_elem_prob_s*
  %502 = load %struct.vrna_elem_prob_s**, %struct.vrna_elem_prob_s*** %11, align 8
  store %struct.vrna_elem_prob_s* %501, %struct.vrna_elem_prob_s** %502, align 8
  br label %503

503:                                              ; preds = %488, %446
  br label %504

504:                                              ; preds = %503
  %505 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %53, align 8
  %506 = getelementptr inbounds %struct.vrna_basepair_s, %struct.vrna_basepair_s* %505, i32 1
  store %struct.vrna_basepair_s* %506, %struct.vrna_basepair_s** %53, align 8
  br label %436, !llvm.loop !35

507:                                              ; preds = %444
  %508 = load %struct.vrna_basepair_s*, %struct.vrna_basepair_s** %54, align 8
  %509 = bitcast %struct.vrna_basepair_s* %508 to i8*
  call void @free(i8* noundef %509) #5
  br label %510

510:                                              ; preds = %507, %418, %413, %410
  %511 = load double, double* %36, align 8
  %512 = load double*, double** %38, align 8
  %513 = load i32, i32* %26, align 4
  %514 = sext i32 %513 to i64
  %515 = getelementptr inbounds double, double* %512, i64 %514
  %516 = load double, double* %515, align 8
  %517 = fadd double %516, %511
  store double %517, double* %515, align 8
  br label %518

518:                                              ; preds = %510, %274
  br label %519

519:                                              ; preds = %518, %273
  %520 = load i32, i32* %22, align 4
  %521 = add nsw i32 %520, 1
  store i32 %521, i32* %22, align 4
  %522 = load i32, i32* %28, align 4
  %523 = add nsw i32 %522, 1
  store i32 %523, i32* %28, align 4
  br label %255, !llvm.loop !36

524:                                              ; preds = %255
  br label %525

525:                                              ; preds = %524, %218
  %526 = load i32, i32* %21, align 4
  %527 = add nsw i32 %526, 1
  store i32 %527, i32* %21, align 4
  br label %200, !llvm.loop !37

528:                                              ; preds = %200
  br label %529

529:                                              ; preds = %528, %157
  %530 = load double*, double** %38, align 8
  %531 = load i32, i32* %26, align 4
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds double, double* %530, i64 %532
  %534 = load double, double* %533, align 8
  %535 = load double*, double** %14, align 8
  %536 = load double, double* %535, align 8
  %537 = fcmp ogt double %534, %536
  br i1 %537, label %538, label %564

538:                                              ; preds = %529
  %539 = load double*, double** %38, align 8
  %540 = load i32, i32* %26, align 4
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds double, double* %539, i64 %541
  %543 = load double, double* %542, align 8
  %544 = load double*, double** %14, align 8
  store double %543, double* %544, align 8
  %545 = load double*, double** %14, align 8
  %546 = load double, double* %545, align 8
  %547 = load double, double* %40, align 8
  %548 = fdiv double %547, 1.000000e+01
  %549 = fcmp ogt double %546, %548
  br i1 %549, label %550, label %563

550:                                              ; preds = %538
  %551 = load i32, i32* %23, align 4
  %552 = load i32, i32* %10, align 4
  %553 = load double*, double** %38, align 8
  %554 = load i32, i32* %26, align 4
  %555 = sext i32 %554 to i64
  %556 = getelementptr inbounds double, double* %553, i64 %555
  %557 = load double, double* %556, align 8
  %558 = load double*, double** %37, align 8
  %559 = load i32, i32* %26, align 4
  %560 = sext i32 %559 to i64
  %561 = getelementptr inbounds double, double* %558, i64 %560
  %562 = load double, double* %561, align 8
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([34 x i8], [34 x i8]* @.str.11, i64 0, i64 0), i32 noundef %551, i32 noundef %552, double noundef %557, double noundef %562)
  br label %563

563:                                              ; preds = %550, %538
  br label %564

564:                                              ; preds = %563, %529
  %565 = load double*, double** %38, align 8
  %566 = load i32, i32* %26, align 4
  %567 = sext i32 %566 to i64
  %568 = getelementptr inbounds double, double* %565, i64 %567
  %569 = load double, double* %568, align 8
  %570 = load double, double* %40, align 8
  %571 = fcmp oge double %569, %570
  br i1 %571, label %572, label %580

572:                                              ; preds = %564
  %573 = load i32*, i32** %15, align 8
  %574 = load i32, i32* %573, align 4
  %575 = add nsw i32 %574, 1
  store i32 %575, i32* %573, align 4
  %576 = load double*, double** %38, align 8
  %577 = load i32, i32* %26, align 4
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds double, double* %576, i64 %578
  store double 0x47EFFFFFE0000000, double* %579, align 8
  br label %580

580:                                              ; preds = %572, %564
  br label %581

581:                                              ; preds = %580, %156
  %582 = load i32, i32* %23, align 4
  %583 = add nsw i32 %582, 1
  store i32 %583, i32* %23, align 4
  br label %136, !llvm.loop !38

584:                                              ; preds = %136
  %585 = load %struct.vrna_md_s*, %struct.vrna_md_s** %42, align 8
  %586 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %585, i32 0, i32 10
  %587 = load i32, i32* %586, align 8
  %588 = icmp ne i32 %587, 0
  br i1 %588, label %589, label %592

589:                                              ; preds = %584
  %590 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %591 = load i32, i32* %10, align 4
  call void @compute_gquad_prob_internal(%struct.vrna_fc_s* noundef %590, i32 noundef %591)
  br label %592

592:                                              ; preds = %589, %584
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @compute_bpp_multibranch(%struct.vrna_fc_s* noundef %0, i32 noundef %1, %struct.helper_arrays* noundef %2, double* noundef %3, i32* noundef %4, %struct.constraints_helper* noundef %5) #0 {
  %7 = alloca %struct.vrna_fc_s*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.helper_arrays*, align 8
  %10 = alloca double*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca %struct.constraints_helper*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i8*, align 8
  %15 = alloca i16*, align 8
  %16 = alloca i16*, align 8
  %17 = alloca i16, align 2
  %18 = alloca i16, align 2
  %19 = alloca i32*, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32*, align 8
  %32 = alloca i32*, align 8
  %33 = alloca i32*, align 8
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca double, align 8
  %37 = alloca double, align 8
  %38 = alloca double, align 8
  %39 = alloca double, align 8
  %40 = alloca double, align 8
  %41 = alloca double*, align 8
  %42 = alloca double*, align 8
  %43 = alloca double*, align 8
  %44 = alloca double*, align 8
  %45 = alloca double*, align 8
  %46 = alloca double*, align 8
  %47 = alloca double, align 8
  %48 = alloca double, align 8
  %49 = alloca double, align 8
  %50 = alloca %struct.vrna_exp_param_s*, align 8
  %51 = alloca %struct.vrna_md_s*, align 8
  %52 = alloca %struct.vrna_unstructured_domain_s*, align 8
  %53 = alloca %struct.hc_mb_def_dat*, align 8
  %54 = alloca i8 (i32, i32, i32, i32, i8, i8*)*, align 8
  %55 = alloca %struct.sc_mb_exp_dat*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %7, align 8
  store i32 %1, i32* %8, align 4
  store %struct.helper_arrays* %2, %struct.helper_arrays** %9, align 8
  store double* %3, double** %10, align 8
  store i32* %4, i32** %11, align 8
  store %struct.constraints_helper* %5, %struct.constraints_helper** %12, align 8
  %56 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %57 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %56, i32 0, i32 1
  %58 = load i32, i32* %57, align 4
  store i32 %58, i32* %24, align 4
  %59 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %60 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %59, i32 0, i32 3
  %61 = load i32*, i32** %60, align 8
  store i32* %61, i32** %19, align 8
  %62 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %63 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %62, i32 0, i32 24
  %64 = bitcast %union.anon.9* %63 to %struct.anon.10*
  %65 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %64, i32 0, i32 2
  %66 = load i16*, i16** %65, align 8
  store i16* %66, i16** %15, align 8
  %67 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %68 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %67, i32 0, i32 24
  %69 = bitcast %union.anon.9* %68 to %struct.anon.10*
  %70 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %69, i32 0, i32 1
  %71 = load i16*, i16** %70, align 8
  store i16* %71, i16** %16, align 8
  %72 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %73 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %72, i32 0, i32 16
  %74 = load i32*, i32** %73, align 8
  store i32* %74, i32** %31, align 8
  %75 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %76 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %75, i32 0, i32 17
  %77 = load i32*, i32** %76, align 8
  store i32* %77, i32** %32, align 8
  %78 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %79 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %78, i32 0, i32 15
  %80 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %79, align 8
  store %struct.vrna_exp_param_s* %80, %struct.vrna_exp_param_s** %50, align 8
  %81 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %50, align 8
  %82 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %81, i32 0, i32 40
  store %struct.vrna_md_s* %82, %struct.vrna_md_s** %51, align 8
  %83 = load %struct.vrna_md_s*, %struct.vrna_md_s** %51, align 8
  %84 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %83, i32 0, i32 18
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %30, align 4
  %86 = load %struct.vrna_md_s*, %struct.vrna_md_s** %51, align 8
  %87 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %86, i32 0, i32 25
  %88 = getelementptr inbounds [8 x i32], [8 x i32]* %87, i64 0, i64 0
  store i32* %88, i32** %33, align 8
  %89 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %90 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %89, i32 0, i32 24
  %91 = bitcast %union.anon.9* %90 to %struct.anon.10*
  %92 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %91, i32 0, i32 3
  %93 = load i8*, i8** %92, align 8
  store i8* %93, i8** %14, align 8
  %94 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %95 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %94, i32 0, i32 13
  %96 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %95, align 8
  %97 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %96, i32 0, i32 4
  %98 = bitcast %union.anon.5* %97 to %struct.anon.6*
  %99 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %98, i32 0, i32 1
  %100 = load double*, double** %99, align 8
  store double* %100, double** %41, align 8
  %101 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %102 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %101, i32 0, i32 13
  %103 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %102, align 8
  %104 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %103, i32 0, i32 4
  %105 = bitcast %union.anon.5* %104 to %struct.anon.6*
  %106 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %105, i32 0, i32 2
  %107 = load double*, double** %106, align 8
  store double* %107, double** %43, align 8
  %108 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %109 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %108, i32 0, i32 13
  %110 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %109, align 8
  %111 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %110, i32 0, i32 4
  %112 = bitcast %union.anon.5* %111 to %struct.anon.6*
  %113 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %112, i32 0, i32 7
  %114 = load double*, double** %113, align 8
  store double* %114, double** %44, align 8
  %115 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %116 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %115, i32 0, i32 13
  %117 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %116, align 8
  %118 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %117, i32 0, i32 4
  %119 = bitcast %union.anon.5* %118 to %struct.anon.6*
  %120 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %119, i32 0, i32 4
  %121 = load double*, double** %120, align 8
  store double* %121, double** %42, align 8
  %122 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %123 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %122, i32 0, i32 13
  %124 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %123, align 8
  %125 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %124, i32 0, i32 2
  %126 = load double*, double** %125, align 8
  store double* %126, double** %45, align 8
  %127 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %128 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %127, i32 0, i32 13
  %129 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %128, align 8
  %130 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %129, i32 0, i32 3
  %131 = load double*, double** %130, align 8
  store double* %131, double** %46, align 8
  %132 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %50, align 8
  %133 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %132, i32 0, i32 20
  %134 = load double, double* %133, align 8
  store double %134, double* %47, align 8
  %135 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %136 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %135, i32 0, i32 22
  %137 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %136, align 8
  store %struct.vrna_unstructured_domain_s* %137, %struct.vrna_unstructured_domain_s** %52, align 8
  %138 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %52, align 8
  %139 = icmp ne %struct.vrna_unstructured_domain_s* %138, null
  br i1 %139, label %140, label %145

140:                                              ; preds = %6
  %141 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %52, align 8
  %142 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %141, i32 0, i32 11
  %143 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %142, align 8
  %144 = icmp ne double (%struct.vrna_fc_s*, i32, i32, i32, i8*)* %143, null
  br label %145

145:                                              ; preds = %140, %6
  %146 = phi i1 [ false, %6 ], [ %144, %140 ]
  %147 = zext i1 %146 to i64
  %148 = select i1 %146, i32 1, i32 0
  store i32 %148, i32* %35, align 4
  %149 = load %struct.vrna_md_s*, %struct.vrna_md_s** %51, align 8
  %150 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %149, i32 0, i32 10
  %151 = load i32, i32* %150, align 8
  store i32 %151, i32* %34, align 4
  %152 = load i32, i32* %34, align 4
  %153 = icmp ne i32 %152, 0
  br i1 %153, label %154, label %157

154:                                              ; preds = %145
  %155 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %50, align 8
  %156 = call double @exp_E_MLstem(i32 noundef 0, i32 noundef -1, i32 noundef -1, %struct.vrna_exp_param_s* noundef %155)
  br label %158

157:                                              ; preds = %145
  br label %158

158:                                              ; preds = %157, %154
  %159 = phi double [ %156, %154 ], [ 0.000000e+00, %157 ]
  store double %159, double* %48, align 8
  %160 = load %struct.constraints_helper*, %struct.constraints_helper** %12, align 8
  %161 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %160, i32 0, i32 6
  store %struct.hc_mb_def_dat* %161, %struct.hc_mb_def_dat** %53, align 8
  %162 = load %struct.constraints_helper*, %struct.constraints_helper** %12, align 8
  %163 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %162, i32 0, i32 7
  %164 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %163, align 8
  store i8 (i32, i32, i32, i32, i8, i8*)* %164, i8 (i32, i32, i32, i32, i8, i8*)** %54, align 8
  %165 = load %struct.constraints_helper*, %struct.constraints_helper** %12, align 8
  %166 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %165, i32 0, i32 11
  store %struct.sc_mb_exp_dat* %166, %struct.sc_mb_exp_dat** %55, align 8
  store double 0.000000e+00, double* %38, align 8
  store double 0x7FEFFFFFFFFFFFFF, double* %49, align 8
  %167 = load i32*, i32** %19, align 8
  %168 = load i32, i32* %8, align 4
  %169 = add nsw i32 %168, 1
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i32, i32* %167, i64 %170
  %172 = load i32, i32* %171, align 4
  %173 = load i32*, i32** %19, align 8
  %174 = load i32, i32* %8, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds i32, i32* %173, i64 %175
  %177 = load i32, i32* %176, align 4
  %178 = icmp ne i32 %172, %177
  br i1 %178, label %179, label %195

179:                                              ; preds = %158
  store i32 0, i32* %21, align 4
  br label %180

180:                                              ; preds = %191, %179
  %181 = load i32, i32* %21, align 4
  %182 = load i32, i32* %24, align 4
  %183 = icmp sle i32 %181, %182
  br i1 %183, label %184, label %194

184:                                              ; preds = %180
  %185 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %186 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %185, i32 0, i32 0
  %187 = load double*, double** %186, align 8
  %188 = load i32, i32* %21, align 4
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds double, double* %187, i64 %189
  store double 0.000000e+00, double* %190, align 8
  br label %191

191:                                              ; preds = %184
  %192 = load i32, i32* %21, align 4
  %193 = add nsw i32 %192, 1
  store i32 %193, i32* %21, align 4
  br label %180, !llvm.loop !39

194:                                              ; preds = %180
  br label %1113

195:                                              ; preds = %158
  store i32 2, i32* %23, align 4
  br label %196

196:                                              ; preds = %1109, %195
  %197 = load i32, i32* %23, align 4
  %198 = load i32, i32* %8, align 4
  %199 = load i32, i32* %30, align 4
  %200 = sub nsw i32 %198, %199
  %201 = icmp slt i32 %197, %200
  br i1 %201, label %202, label %1112

202:                                              ; preds = %196
  %203 = load i32*, i32** %31, align 8
  %204 = load i32, i32* %23, align 4
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds i32, i32* %203, i64 %205
  %207 = load i32, i32* %206, align 4
  %208 = load i32, i32* %8, align 4
  %209 = sub nsw i32 %207, %208
  store i32 %209, i32* %28, align 4
  %210 = load i32, i32* %23, align 4
  %211 = sub nsw i32 %210, 1
  store i32 %211, i32* %21, align 4
  store double 0.000000e+00, double* %40, align 8
  store double 0.000000e+00, double* %39, align 8
  %212 = load i32*, i32** %31, align 8
  %213 = load i32, i32* %21, align 4
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds i32, i32* %212, i64 %214
  %216 = load i32, i32* %215, align 4
  %217 = load i32, i32* %8, align 4
  %218 = add nsw i32 %217, 2
  %219 = sub nsw i32 %216, %218
  store i32 %219, i32* %27, align 4
  %220 = load i32*, i32** %31, align 8
  %221 = load i32, i32* %8, align 4
  %222 = add nsw i32 %221, 1
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds i32, i32* %220, i64 %223
  %225 = load i32, i32* %224, align 4
  %226 = load i32, i32* %8, align 4
  %227 = add nsw i32 %226, 1
  %228 = sub nsw i32 %225, %227
  store i32 %228, i32* %29, align 4
  %229 = load i16*, i16** %16, align 8
  %230 = load i32, i32* %21, align 4
  %231 = add nsw i32 %230, 1
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds i16, i16* %229, i64 %232
  %234 = load i16, i16* %233, align 2
  store i16 %234, i16* %18, align 2
  %235 = load i32*, i32** %19, align 8
  %236 = load i32, i32* %23, align 4
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds i32, i32* %235, i64 %237
  %239 = load i32, i32* %238, align 4
  %240 = load i32*, i32** %19, align 8
  %241 = load i32, i32* %21, align 4
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds i32, i32* %240, i64 %242
  %244 = load i32, i32* %243, align 4
  %245 = icmp eq i32 %239, %244
  br i1 %245, label %246, label %412

246:                                              ; preds = %202
  %247 = load i32, i32* %8, align 4
  %248 = add nsw i32 %247, 2
  store i32 %248, i32* %22, align 4
  br label %249

249:                                              ; preds = %325, %246
  %250 = load i32, i32* %22, align 4
  %251 = load i32, i32* %24, align 4
  %252 = icmp sle i32 %250, %251
  br i1 %252, label %253, label %332

253:                                              ; preds = %249
  %254 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %54, align 8
  %255 = load i32, i32* %21, align 4
  %256 = load i32, i32* %22, align 4
  %257 = load i32, i32* %21, align 4
  %258 = add nsw i32 %257, 1
  %259 = load i32, i32* %22, align 4
  %260 = sub nsw i32 %259, 1
  %261 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %53, align 8
  %262 = bitcast %struct.hc_mb_def_dat* %261 to i8*
  %263 = call zeroext i8 %254(i32 noundef %255, i32 noundef %256, i32 noundef %258, i32 noundef %260, i8 noundef zeroext 3, i8* noundef %262)
  %264 = icmp ne i8 %263, 0
  br i1 %264, label %265, label %324

265:                                              ; preds = %253
  %266 = load i16*, i16** %15, align 8
  %267 = load i32, i32* %22, align 4
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds i16, i16* %266, i64 %268
  %270 = load i16, i16* %269, align 2
  %271 = sext i16 %270 to i32
  %272 = load i16*, i16** %15, align 8
  %273 = load i32, i32* %21, align 4
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds i16, i16* %272, i64 %274
  %276 = load i16, i16* %275, align 2
  %277 = sext i16 %276 to i32
  %278 = load %struct.vrna_md_s*, %struct.vrna_md_s** %51, align 8
  %279 = call i32 @vrna_get_ptype_md(i32 noundef %271, i32 noundef %277, %struct.vrna_md_s* noundef %278)
  %280 = trunc i32 %279 to i8
  store i8 %280, i8* %13, align 1
  %281 = load double*, double** %42, align 8
  %282 = load i32, i32* %27, align 4
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds double, double* %281, i64 %283
  %285 = load double, double* %284, align 8
  %286 = load i8, i8* %13, align 1
  %287 = zext i8 %286 to i32
  %288 = load i16*, i16** %16, align 8
  %289 = load i32, i32* %22, align 4
  %290 = sub nsw i32 %289, 1
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds i16, i16* %288, i64 %291
  %293 = load i16, i16* %292, align 2
  %294 = sext i16 %293 to i32
  %295 = load i16, i16* %18, align 2
  %296 = sext i16 %295 to i32
  %297 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %50, align 8
  %298 = call double @exp_E_MLstem(i32 noundef %287, i32 noundef %294, i32 noundef %296, %struct.vrna_exp_param_s* noundef %297)
  %299 = fmul double %285, %298
  %300 = load double*, double** %43, align 8
  %301 = load i32, i32* %29, align 4
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds double, double* %300, i64 %302
  %304 = load double, double* %303, align 8
  %305 = fmul double %299, %304
  store double %305, double* %37, align 8
  %306 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %307 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %306, i32 0, i32 10
  %308 = load double (i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, %struct.sc_mb_exp_dat*)** %307, align 8
  %309 = icmp ne double (i32, i32, %struct.sc_mb_exp_dat*)* %308, null
  br i1 %309, label %310, label %320

310:                                              ; preds = %265
  %311 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %312 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %311, i32 0, i32 10
  %313 = load double (i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, %struct.sc_mb_exp_dat*)** %312, align 8
  %314 = load i32, i32* %21, align 4
  %315 = load i32, i32* %22, align 4
  %316 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %317 = call double %313(i32 noundef %314, i32 noundef %315, %struct.sc_mb_exp_dat* noundef %316)
  %318 = load double, double* %37, align 8
  %319 = fmul double %318, %317
  store double %319, double* %37, align 8
  br label %320

320:                                              ; preds = %310, %265
  %321 = load double, double* %37, align 8
  %322 = load double, double* %39, align 8
  %323 = fadd double %322, %321
  store double %323, double* %39, align 8
  br label %324

324:                                              ; preds = %320, %253
  br label %325

325:                                              ; preds = %324
  %326 = load i32, i32* %22, align 4
  %327 = add nsw i32 %326, 1
  store i32 %327, i32* %22, align 4
  %328 = load i32, i32* %27, align 4
  %329 = add nsw i32 %328, -1
  store i32 %329, i32* %27, align 4
  %330 = load i32, i32* %29, align 4
  %331 = add nsw i32 %330, -1
  store i32 %331, i32* %29, align 4
  br label %249, !llvm.loop !40

332:                                              ; preds = %249
  %333 = load i32*, i32** %31, align 8
  %334 = load i32, i32* %21, align 4
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds i32, i32* %333, i64 %335
  %337 = load i32, i32* %336, align 4
  store i32 %337, i32* %26, align 4
  %338 = load i32*, i32** %32, align 8
  %339 = load i32, i32* %8, align 4
  %340 = add nsw i32 %339, 1
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds i32, i32* %338, i64 %341
  %343 = load i32, i32* %342, align 4
  %344 = load i32, i32* %21, align 4
  %345 = add nsw i32 %343, %344
  %346 = load i8*, i8** %14, align 8
  %347 = call i32 @vrna_get_ptype(i32 noundef %345, i8* noundef %346)
  %348 = trunc i32 %347 to i8
  store i8 %348, i8* %13, align 1
  %349 = load i32*, i32** %33, align 8
  %350 = load i8, i8* %13, align 1
  %351 = zext i8 %350 to i64
  %352 = getelementptr inbounds i32, i32* %349, i64 %351
  %353 = load i32, i32* %352, align 4
  %354 = trunc i32 %353 to i8
  store i8 %354, i8* %13, align 1
  %355 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %54, align 8
  %356 = load i32, i32* %21, align 4
  %357 = load i32, i32* %8, align 4
  %358 = add nsw i32 %357, 1
  %359 = load i32, i32* %21, align 4
  %360 = add nsw i32 %359, 1
  %361 = load i32, i32* %8, align 4
  %362 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %53, align 8
  %363 = bitcast %struct.hc_mb_def_dat* %362 to i8*
  %364 = call zeroext i8 %355(i32 noundef %356, i32 noundef %358, i32 noundef %360, i32 noundef %361, i8 noundef zeroext 3, i8* noundef %363)
  %365 = icmp ne i8 %364, 0
  br i1 %365, label %366, label %411

366:                                              ; preds = %332
  %367 = load double*, double** %42, align 8
  %368 = load i32, i32* %26, align 4
  %369 = load i32, i32* %8, align 4
  %370 = add nsw i32 %369, 1
  %371 = sub nsw i32 %368, %370
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds double, double* %367, i64 %372
  %374 = load double, double* %373, align 8
  %375 = load i8, i8* %13, align 1
  %376 = zext i8 %375 to i32
  %377 = load i16*, i16** %16, align 8
  %378 = load i32, i32* %8, align 4
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds i16, i16* %377, i64 %379
  %381 = load i16, i16* %380, align 2
  %382 = sext i16 %381 to i32
  %383 = load i16*, i16** %16, align 8
  %384 = load i32, i32* %21, align 4
  %385 = add nsw i32 %384, 1
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds i16, i16* %383, i64 %386
  %388 = load i16, i16* %387, align 2
  %389 = sext i16 %388 to i32
  %390 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %50, align 8
  %391 = call double @exp_E_MLstem(i32 noundef %376, i32 noundef %382, i32 noundef %389, %struct.vrna_exp_param_s* noundef %390)
  %392 = fmul double %374, %391
  %393 = load double, double* %47, align 8
  %394 = fmul double %392, %393
  store double %394, double* %40, align 8
  %395 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %396 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %395, i32 0, i32 10
  %397 = load double (i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, %struct.sc_mb_exp_dat*)** %396, align 8
  %398 = icmp ne double (i32, i32, %struct.sc_mb_exp_dat*)* %397, null
  br i1 %398, label %399, label %410

399:                                              ; preds = %366
  %400 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %401 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %400, i32 0, i32 10
  %402 = load double (i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, %struct.sc_mb_exp_dat*)** %401, align 8
  %403 = load i32, i32* %21, align 4
  %404 = load i32, i32* %8, align 4
  %405 = add nsw i32 %404, 1
  %406 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %407 = call double %402(i32 noundef %403, i32 noundef %405, %struct.sc_mb_exp_dat* noundef %406)
  %408 = load double, double* %40, align 8
  %409 = fmul double %408, %407
  store double %409, double* %40, align 8
  br label %410

410:                                              ; preds = %399, %366
  br label %411

411:                                              ; preds = %410, %332
  br label %412

412:                                              ; preds = %411, %202
  %413 = load double, double* %47, align 8
  %414 = load double, double* %39, align 8
  %415 = fmul double %414, %413
  store double %415, double* %39, align 8
  %416 = load double, double* %39, align 8
  %417 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %418 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %417, i32 0, i32 2
  %419 = load double*, double** %418, align 8
  %420 = load i32, i32* %21, align 4
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds double, double* %419, i64 %421
  store double %416, double* %422, align 8
  %423 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %54, align 8
  %424 = load i32, i32* %23, align 4
  %425 = load i32, i32* %8, align 4
  %426 = add nsw i32 %425, 1
  %427 = load i32, i32* %23, align 4
  %428 = load i32, i32* %8, align 4
  %429 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %53, align 8
  %430 = bitcast %struct.hc_mb_def_dat* %429 to i8*
  %431 = call zeroext i8 %423(i32 noundef %424, i32 noundef %426, i32 noundef %427, i32 noundef %428, i8 noundef zeroext 7, i8* noundef %430)
  %432 = icmp ne i8 %431, 0
  br i1 %432, label %433, label %578

433:                                              ; preds = %412
  %434 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %435 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %434, i32 0, i32 1
  %436 = load double*, double** %435, align 8
  %437 = load i32, i32* %21, align 4
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds double, double* %436, i64 %438
  %440 = load double, double* %439, align 8
  %441 = load double*, double** %46, align 8
  %442 = getelementptr inbounds double, double* %441, i64 1
  %443 = load double, double* %442, align 8
  %444 = fmul double %440, %443
  store double %444, double* %37, align 8
  %445 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %446 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %445, i32 0, i32 13
  %447 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %446, align 8
  %448 = icmp ne double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* %447, null
  br i1 %448, label %449, label %462

449:                                              ; preds = %433
  %450 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %451 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %450, i32 0, i32 13
  %452 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %451, align 8
  %453 = load i32, i32* %23, align 4
  %454 = load i32, i32* %8, align 4
  %455 = add nsw i32 %454, 1
  %456 = load i32, i32* %23, align 4
  %457 = load i32, i32* %8, align 4
  %458 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %459 = call double %452(i32 noundef %453, i32 noundef %455, i32 noundef %456, i32 noundef %457, %struct.sc_mb_exp_dat* noundef %458)
  %460 = load double, double* %37, align 8
  %461 = fmul double %460, %459
  store double %461, double* %37, align 8
  br label %462

462:                                              ; preds = %449, %433
  %463 = load i32, i32* %35, align 4
  %464 = icmp ne i32 %463, 0
  br i1 %464, label %465, label %568

465:                                              ; preds = %462
  store i32 0, i32* %20, align 4
  br label %466

466:                                              ; preds = %553, %465
  %467 = load i32, i32* %20, align 4
  %468 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %52, align 8
  %469 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %468, i32 0, i32 0
  %470 = load i32, i32* %469, align 8
  %471 = icmp slt i32 %467, %470
  br i1 %471, label %472, label %556

472:                                              ; preds = %466
  %473 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %52, align 8
  %474 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %473, i32 0, i32 1
  %475 = load i32*, i32** %474, align 8
  %476 = load i32, i32* %20, align 4
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds i32, i32* %475, i64 %477
  %479 = load i32, i32* %478, align 4
  store i32 %479, i32* %25, align 4
  %480 = load i32, i32* %8, align 4
  %481 = load i32, i32* %25, align 4
  %482 = add nsw i32 %480, %481
  %483 = load i32, i32* %24, align 4
  %484 = icmp slt i32 %482, %483
  br i1 %484, label %485, label %552

485:                                              ; preds = %472
  %486 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %54, align 8
  %487 = load i32, i32* %23, align 4
  %488 = load i32, i32* %8, align 4
  %489 = load i32, i32* %25, align 4
  %490 = add nsw i32 %488, %489
  %491 = load i32, i32* %23, align 4
  %492 = load i32, i32* %8, align 4
  %493 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %53, align 8
  %494 = bitcast %struct.hc_mb_def_dat* %493 to i8*
  %495 = call zeroext i8 %486(i32 noundef %487, i32 noundef %490, i32 noundef %491, i32 noundef %492, i8 noundef zeroext 7, i8* noundef %494)
  %496 = icmp ne i8 %495, 0
  br i1 %496, label %497, label %551

497:                                              ; preds = %485
  %498 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %52, align 8
  %499 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %498, i32 0, i32 11
  %500 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %499, align 8
  %501 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %502 = load i32, i32* %8, align 4
  %503 = add nsw i32 %502, 1
  %504 = load i32, i32* %8, align 4
  %505 = load i32, i32* %25, align 4
  %506 = add nsw i32 %504, %505
  %507 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %52, align 8
  %508 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %507, i32 0, i32 12
  %509 = load i8*, i8** %508, align 8
  %510 = call double %500(%struct.vrna_fc_s* noundef %501, i32 noundef %503, i32 noundef %506, i32 noundef 24, i8* noundef %509)
  %511 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %512 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %511, i32 0, i32 4
  %513 = load double**, double*** %512, align 8
  %514 = load i32, i32* %25, align 4
  %515 = sext i32 %514 to i64
  %516 = getelementptr inbounds double*, double** %513, i64 %515
  %517 = load double*, double** %516, align 8
  %518 = load i32, i32* %21, align 4
  %519 = sext i32 %518 to i64
  %520 = getelementptr inbounds double, double* %517, i64 %519
  %521 = load double, double* %520, align 8
  %522 = fmul double %510, %521
  %523 = load double*, double** %46, align 8
  %524 = load i32, i32* %25, align 4
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds double, double* %523, i64 %525
  %527 = load double, double* %526, align 8
  %528 = fmul double %522, %527
  store double %528, double* %36, align 8
  %529 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %530 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %529, i32 0, i32 13
  %531 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %530, align 8
  %532 = icmp ne double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* %531, null
  br i1 %532, label %533, label %547

533:                                              ; preds = %497
  %534 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %535 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %534, i32 0, i32 13
  %536 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %535, align 8
  %537 = load i32, i32* %23, align 4
  %538 = load i32, i32* %8, align 4
  %539 = load i32, i32* %25, align 4
  %540 = add nsw i32 %538, %539
  %541 = load i32, i32* %23, align 4
  %542 = load i32, i32* %8, align 4
  %543 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %544 = call double %536(i32 noundef %537, i32 noundef %540, i32 noundef %541, i32 noundef %542, %struct.sc_mb_exp_dat* noundef %543)
  %545 = load double, double* %36, align 8
  %546 = fmul double %545, %544
  store double %546, double* %36, align 8
  br label %547

547:                                              ; preds = %533, %497
  %548 = load double, double* %36, align 8
  %549 = load double, double* %37, align 8
  %550 = fadd double %549, %548
  store double %550, double* %37, align 8
  br label %551

551:                                              ; preds = %547, %485
  br label %552

552:                                              ; preds = %551, %472
  br label %553

553:                                              ; preds = %552
  %554 = load i32, i32* %20, align 4
  %555 = add nsw i32 %554, 1
  store i32 %555, i32* %20, align 4
  br label %466, !llvm.loop !41

556:                                              ; preds = %466
  %557 = load double, double* %37, align 8
  %558 = load double, double* %40, align 8
  %559 = fadd double %557, %558
  %560 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %561 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %560, i32 0, i32 4
  %562 = load double**, double*** %561, align 8
  %563 = getelementptr inbounds double*, double** %562, i64 0
  %564 = load double*, double** %563, align 8
  %565 = load i32, i32* %21, align 4
  %566 = sext i32 %565 to i64
  %567 = getelementptr inbounds double, double* %564, i64 %566
  store double %559, double* %567, align 8
  br label %568

568:                                              ; preds = %556, %462
  %569 = load double, double* %37, align 8
  %570 = load double, double* %40, align 8
  %571 = fadd double %569, %570
  %572 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %573 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %572, i32 0, i32 0
  %574 = load double*, double** %573, align 8
  %575 = load i32, i32* %21, align 4
  %576 = sext i32 %575 to i64
  %577 = getelementptr inbounds double, double* %574, i64 %576
  store double %571, double* %577, align 8
  br label %599

578:                                              ; preds = %412
  %579 = load double, double* %40, align 8
  %580 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %581 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %580, i32 0, i32 0
  %582 = load double*, double** %581, align 8
  %583 = load i32, i32* %21, align 4
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds double, double* %582, i64 %584
  store double %579, double* %585, align 8
  %586 = load i32, i32* %35, align 4
  %587 = icmp ne i32 %586, 0
  br i1 %587, label %588, label %598

588:                                              ; preds = %578
  %589 = load double, double* %40, align 8
  %590 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %591 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %590, i32 0, i32 4
  %592 = load double**, double*** %591, align 8
  %593 = getelementptr inbounds double*, double** %592, i64 0
  %594 = load double*, double** %593, align 8
  %595 = load i32, i32* %21, align 4
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds double, double* %594, i64 %596
  store double %589, double* %597, align 8
  br label %598

598:                                              ; preds = %588, %578
  br label %599

599:                                              ; preds = %598, %568
  %600 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %54, align 8
  %601 = load i32, i32* %21, align 4
  %602 = load i32, i32* %8, align 4
  %603 = load i32, i32* %21, align 4
  %604 = add nsw i32 %603, 1
  %605 = load i32, i32* %8, align 4
  %606 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %53, align 8
  %607 = bitcast %struct.hc_mb_def_dat* %606 to i8*
  %608 = call zeroext i8 %600(i32 noundef %601, i32 noundef %602, i32 noundef %604, i32 noundef %605, i8 noundef zeroext 7, i8* noundef %607)
  %609 = icmp ne i8 %608, 0
  br i1 %609, label %610, label %750

610:                                              ; preds = %599
  %611 = load double, double* %38, align 8
  %612 = load double*, double** %46, align 8
  %613 = getelementptr inbounds double, double* %612, i64 1
  %614 = load double, double* %613, align 8
  %615 = fmul double %611, %614
  store double %615, double* %37, align 8
  %616 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %617 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %616, i32 0, i32 13
  %618 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %617, align 8
  %619 = icmp ne double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* %618, null
  br i1 %619, label %620, label %633

620:                                              ; preds = %610
  %621 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %622 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %621, i32 0, i32 13
  %623 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %622, align 8
  %624 = load i32, i32* %21, align 4
  %625 = load i32, i32* %8, align 4
  %626 = load i32, i32* %21, align 4
  %627 = add nsw i32 %626, 1
  %628 = load i32, i32* %8, align 4
  %629 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %630 = call double %623(i32 noundef %624, i32 noundef %625, i32 noundef %627, i32 noundef %628, %struct.sc_mb_exp_dat* noundef %629)
  %631 = load double, double* %37, align 8
  %632 = fmul double %631, %630
  store double %632, double* %37, align 8
  br label %633

633:                                              ; preds = %620, %610
  %634 = load i32, i32* %35, align 4
  %635 = icmp ne i32 %634, 0
  br i1 %635, label %636, label %740

636:                                              ; preds = %633
  store i32 0, i32* %20, align 4
  br label %637

637:                                              ; preds = %723, %636
  %638 = load i32, i32* %20, align 4
  %639 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %52, align 8
  %640 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %639, i32 0, i32 0
  %641 = load i32, i32* %640, align 8
  %642 = icmp slt i32 %638, %641
  br i1 %642, label %643, label %726

643:                                              ; preds = %637
  %644 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %52, align 8
  %645 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %644, i32 0, i32 1
  %646 = load i32*, i32** %645, align 8
  %647 = load i32, i32* %20, align 4
  %648 = sext i32 %647 to i64
  %649 = getelementptr inbounds i32, i32* %646, i64 %648
  %650 = load i32, i32* %649, align 4
  store i32 %650, i32* %25, align 4
  %651 = load i32, i32* %25, align 4
  %652 = add nsw i32 1, %651
  %653 = load i32, i32* %21, align 4
  %654 = icmp sle i32 %652, %653
  br i1 %654, label %655, label %722

655:                                              ; preds = %643
  %656 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %54, align 8
  %657 = load i32, i32* %21, align 4
  %658 = load i32, i32* %25, align 4
  %659 = sub nsw i32 %657, %658
  %660 = add nsw i32 %659, 1
  %661 = load i32, i32* %8, align 4
  %662 = load i32, i32* %21, align 4
  %663 = add nsw i32 %662, 1
  %664 = load i32, i32* %8, align 4
  %665 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %53, align 8
  %666 = bitcast %struct.hc_mb_def_dat* %665 to i8*
  %667 = call zeroext i8 %656(i32 noundef %660, i32 noundef %661, i32 noundef %663, i32 noundef %664, i8 noundef zeroext 7, i8* noundef %666)
  %668 = icmp ne i8 %667, 0
  br i1 %668, label %669, label %721

669:                                              ; preds = %655
  %670 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %52, align 8
  %671 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %670, i32 0, i32 11
  %672 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %671, align 8
  %673 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %674 = load i32, i32* %21, align 4
  %675 = load i32, i32* %25, align 4
  %676 = sub nsw i32 %674, %675
  %677 = add nsw i32 %676, 1
  %678 = load i32, i32* %21, align 4
  %679 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %52, align 8
  %680 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %679, i32 0, i32 12
  %681 = load i8*, i8** %680, align 8
  %682 = call double %672(%struct.vrna_fc_s* noundef %673, i32 noundef %677, i32 noundef %678, i32 noundef 24, i8* noundef %681)
  %683 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %684 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %683, i32 0, i32 5
  %685 = load double*, double** %684, align 8
  %686 = load i32, i32* %25, align 4
  %687 = sext i32 %686 to i64
  %688 = getelementptr inbounds double, double* %685, i64 %687
  %689 = load double, double* %688, align 8
  %690 = fmul double %682, %689
  %691 = load double*, double** %46, align 8
  %692 = load i32, i32* %25, align 4
  %693 = sext i32 %692 to i64
  %694 = getelementptr inbounds double, double* %691, i64 %693
  %695 = load double, double* %694, align 8
  %696 = fmul double %690, %695
  store double %696, double* %36, align 8
  %697 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %698 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %697, i32 0, i32 13
  %699 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %698, align 8
  %700 = icmp ne double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* %699, null
  br i1 %700, label %701, label %717

701:                                              ; preds = %669
  %702 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %703 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %702, i32 0, i32 13
  %704 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %703, align 8
  %705 = load i32, i32* %21, align 4
  %706 = load i32, i32* %25, align 4
  %707 = sub nsw i32 %705, %706
  %708 = add nsw i32 %707, 1
  %709 = load i32, i32* %8, align 4
  %710 = load i32, i32* %21, align 4
  %711 = add nsw i32 %710, 1
  %712 = load i32, i32* %8, align 4
  %713 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %714 = call double %704(i32 noundef %708, i32 noundef %709, i32 noundef %711, i32 noundef %712, %struct.sc_mb_exp_dat* noundef %713)
  %715 = load double, double* %36, align 8
  %716 = fmul double %715, %714
  store double %716, double* %36, align 8
  br label %717

717:                                              ; preds = %701, %669
  %718 = load double, double* %36, align 8
  %719 = load double, double* %37, align 8
  %720 = fadd double %719, %718
  store double %720, double* %37, align 8
  br label %721

721:                                              ; preds = %717, %655
  br label %722

722:                                              ; preds = %721, %643
  br label %723

723:                                              ; preds = %722
  %724 = load i32, i32* %20, align 4
  %725 = add nsw i32 %724, 1
  store i32 %725, i32* %20, align 4
  br label %637, !llvm.loop !42

726:                                              ; preds = %637
  %727 = load double, double* %37, align 8
  %728 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %729 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %728, i32 0, i32 2
  %730 = load double*, double** %729, align 8
  %731 = load i32, i32* %21, align 4
  %732 = sext i32 %731 to i64
  %733 = getelementptr inbounds double, double* %730, i64 %732
  %734 = load double, double* %733, align 8
  %735 = fadd double %727, %734
  %736 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %737 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %736, i32 0, i32 5
  %738 = load double*, double** %737, align 8
  %739 = getelementptr inbounds double, double* %738, i64 0
  store double %735, double* %739, align 8
  br label %740

740:                                              ; preds = %726, %633
  %741 = load double, double* %37, align 8
  %742 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %743 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %742, i32 0, i32 2
  %744 = load double*, double** %743, align 8
  %745 = load i32, i32* %21, align 4
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds double, double* %744, i64 %746
  %748 = load double, double* %747, align 8
  %749 = fadd double %741, %748
  store double %749, double* %38, align 8
  br label %773

750:                                              ; preds = %599
  %751 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %752 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %751, i32 0, i32 2
  %753 = load double*, double** %752, align 8
  %754 = load i32, i32* %21, align 4
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds double, double* %753, i64 %755
  %757 = load double, double* %756, align 8
  store double %757, double* %38, align 8
  %758 = load i32, i32* %35, align 4
  %759 = icmp ne i32 %758, 0
  br i1 %759, label %760, label %772

760:                                              ; preds = %750
  %761 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %762 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %761, i32 0, i32 2
  %763 = load double*, double** %762, align 8
  %764 = load i32, i32* %21, align 4
  %765 = sext i32 %764 to i64
  %766 = getelementptr inbounds double, double* %763, i64 %765
  %767 = load double, double* %766, align 8
  %768 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %769 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %768, i32 0, i32 5
  %770 = load double*, double** %769, align 8
  %771 = getelementptr inbounds double, double* %770, i64 0
  store double %767, double* %771, align 8
  br label %772

772:                                              ; preds = %760, %750
  br label %773

773:                                              ; preds = %772, %740
  %774 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %775 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %774, i32 0, i32 2
  %776 = load double*, double** %775, align 8
  %777 = load i32, i32* %21, align 4
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds double, double* %776, i64 %778
  %780 = load double, double* %779, align 8
  %781 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %782 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %781, i32 0, i32 0
  %783 = load double*, double** %782, align 8
  %784 = load i32, i32* %21, align 4
  %785 = sext i32 %784 to i64
  %786 = getelementptr inbounds double, double* %783, i64 %785
  %787 = load double, double* %786, align 8
  %788 = fadd double %780, %787
  %789 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %790 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %789, i32 0, i32 2
  %791 = load double*, double** %790, align 8
  %792 = load i32, i32* %21, align 4
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds double, double* %791, i64 %793
  store double %788, double* %794, align 8
  %795 = load i8*, i8** %14, align 8
  %796 = load i32*, i32** %32, align 8
  %797 = load i32, i32* %8, align 4
  %798 = sext i32 %797 to i64
  %799 = getelementptr inbounds i32, i32* %796, i64 %798
  %800 = load i32, i32* %799, align 4
  %801 = load i32, i32* %23, align 4
  %802 = add nsw i32 %800, %801
  %803 = sext i32 %802 to i64
  %804 = getelementptr inbounds i8, i8* %795, i64 %803
  %805 = load i8, i8* %804, align 1
  store i8 %805, i8* %13, align 1
  %806 = load i32, i32* %34, align 4
  %807 = icmp ne i32 %806, 0
  br i1 %807, label %808, label %820

808:                                              ; preds = %773
  %809 = load i8, i8* %13, align 1
  %810 = icmp ne i8 %809, 0
  br i1 %810, label %819, label %811

811:                                              ; preds = %808
  %812 = load double*, double** %44, align 8
  %813 = load i32, i32* %28, align 4
  %814 = sext i32 %813 to i64
  %815 = getelementptr inbounds double, double* %812, i64 %814
  %816 = load double, double* %815, align 8
  %817 = fcmp oeq double %816, 0.000000e+00
  br i1 %817, label %818, label %819

818:                                              ; preds = %811
  br label %1109

819:                                              ; preds = %811, %808
  br label %829

820:                                              ; preds = %773
  %821 = load double*, double** %41, align 8
  %822 = load i32, i32* %28, align 4
  %823 = sext i32 %822 to i64
  %824 = getelementptr inbounds double, double* %821, i64 %823
  %825 = load double, double* %824, align 8
  %826 = fcmp oeq double %825, 0.000000e+00
  br i1 %826, label %827, label %828

827:                                              ; preds = %820
  br label %1109

828:                                              ; preds = %820
  br label %829

829:                                              ; preds = %828, %819
  %830 = load double, double* %38, align 8
  store double %830, double* %36, align 8
  %831 = load i32*, i32** %19, align 8
  %832 = load i32, i32* %23, align 4
  %833 = sext i32 %832 to i64
  %834 = getelementptr inbounds i32, i32* %831, i64 %833
  %835 = load i32, i32* %834, align 4
  %836 = load i32*, i32** %19, align 8
  %837 = load i32, i32* %23, align 4
  %838 = sub nsw i32 %837, 1
  %839 = sext i32 %838 to i64
  %840 = getelementptr inbounds i32, i32* %836, i64 %839
  %841 = load i32, i32* %840, align 4
  %842 = icmp eq i32 %835, %841
  br i1 %842, label %843, label %927

843:                                              ; preds = %829
  %844 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %845 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %844, i32 0, i32 14
  %846 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %845, align 8
  %847 = icmp ne double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* %846, null
  br i1 %847, label %848, label %893

848:                                              ; preds = %843
  store i32 1, i32* %21, align 4
  br label %849

849:                                              ; preds = %889, %848
  %850 = load i32, i32* %21, align 4
  %851 = load i32, i32* %23, align 4
  %852 = sub nsw i32 %851, 2
  %853 = icmp sle i32 %850, %852
  br i1 %853, label %854, label %892

854:                                              ; preds = %849
  %855 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %856 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %855, i32 0, i32 2
  %857 = load double*, double** %856, align 8
  %858 = load i32, i32* %21, align 4
  %859 = sext i32 %858 to i64
  %860 = getelementptr inbounds double, double* %857, i64 %859
  %861 = load double, double* %860, align 8
  %862 = load double*, double** %43, align 8
  %863 = load i32*, i32** %31, align 8
  %864 = load i32, i32* %21, align 4
  %865 = add nsw i32 %864, 1
  %866 = sext i32 %865 to i64
  %867 = getelementptr inbounds i32, i32* %863, i64 %866
  %868 = load i32, i32* %867, align 4
  %869 = load i32, i32* %23, align 4
  %870 = sub nsw i32 %869, 1
  %871 = sub nsw i32 %868, %870
  %872 = sext i32 %871 to i64
  %873 = getelementptr inbounds double, double* %862, i64 %872
  %874 = load double, double* %873, align 8
  %875 = fmul double %861, %874
  %876 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %877 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %876, i32 0, i32 14
  %878 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %877, align 8
  %879 = load i32, i32* %21, align 4
  %880 = add nsw i32 %879, 1
  %881 = load i32, i32* %8, align 4
  %882 = load i32, i32* %23, align 4
  %883 = sub nsw i32 %882, 1
  %884 = load i32, i32* %23, align 4
  %885 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %886 = call double %878(i32 noundef %880, i32 noundef %881, i32 noundef %883, i32 noundef %884, %struct.sc_mb_exp_dat* noundef %885)
  %887 = load double, double* %36, align 8
  %888 = call double @llvm.fmuladd.f64(double %875, double %886, double %887)
  store double %888, double* %36, align 8
  br label %889

889:                                              ; preds = %854
  %890 = load i32, i32* %21, align 4
  %891 = add nsw i32 %890, 1
  store i32 %891, i32* %21, align 4
  br label %849, !llvm.loop !43

892:                                              ; preds = %849
  br label %926

893:                                              ; preds = %843
  store i32 1, i32* %21, align 4
  br label %894

894:                                              ; preds = %922, %893
  %895 = load i32, i32* %21, align 4
  %896 = load i32, i32* %23, align 4
  %897 = sub nsw i32 %896, 2
  %898 = icmp sle i32 %895, %897
  br i1 %898, label %899, label %925

899:                                              ; preds = %894
  %900 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %901 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %900, i32 0, i32 2
  %902 = load double*, double** %901, align 8
  %903 = load i32, i32* %21, align 4
  %904 = sext i32 %903 to i64
  %905 = getelementptr inbounds double, double* %902, i64 %904
  %906 = load double, double* %905, align 8
  %907 = load double*, double** %43, align 8
  %908 = load i32*, i32** %31, align 8
  %909 = load i32, i32* %21, align 4
  %910 = add nsw i32 %909, 1
  %911 = sext i32 %910 to i64
  %912 = getelementptr inbounds i32, i32* %908, i64 %911
  %913 = load i32, i32* %912, align 4
  %914 = load i32, i32* %23, align 4
  %915 = sub nsw i32 %914, 1
  %916 = sub nsw i32 %913, %915
  %917 = sext i32 %916 to i64
  %918 = getelementptr inbounds double, double* %907, i64 %917
  %919 = load double, double* %918, align 8
  %920 = load double, double* %36, align 8
  %921 = call double @llvm.fmuladd.f64(double %906, double %919, double %920)
  store double %921, double* %36, align 8
  br label %922

922:                                              ; preds = %899
  %923 = load i32, i32* %21, align 4
  %924 = add nsw i32 %923, 1
  store i32 %924, i32* %21, align 4
  br label %894, !llvm.loop !44

925:                                              ; preds = %894
  br label %926

926:                                              ; preds = %925, %892
  br label %927

927:                                              ; preds = %926, %829
  %928 = load i32, i32* %23, align 4
  %929 = icmp sgt i32 %928, 1
  br i1 %929, label %930, label %951

930:                                              ; preds = %927
  %931 = load i32*, i32** %19, align 8
  %932 = load i32, i32* %23, align 4
  %933 = sext i32 %932 to i64
  %934 = getelementptr inbounds i32, i32* %931, i64 %933
  %935 = load i32, i32* %934, align 4
  %936 = load i32*, i32** %19, align 8
  %937 = load i32, i32* %23, align 4
  %938 = sub nsw i32 %937, 1
  %939 = sext i32 %938 to i64
  %940 = getelementptr inbounds i32, i32* %936, i64 %939
  %941 = load i32, i32* %940, align 4
  %942 = icmp eq i32 %935, %941
  br i1 %942, label %943, label %951

943:                                              ; preds = %930
  %944 = load i16*, i16** %16, align 8
  %945 = load i32, i32* %23, align 4
  %946 = sub nsw i32 %945, 1
  %947 = sext i32 %946 to i64
  %948 = getelementptr inbounds i16, i16* %944, i64 %947
  %949 = load i16, i16* %948, align 2
  %950 = sext i16 %949 to i32
  br label %952

951:                                              ; preds = %930, %927
  br label %952

952:                                              ; preds = %951, %943
  %953 = phi i32 [ %950, %943 ], [ -1, %951 ]
  %954 = trunc i32 %953 to i16
  store i16 %954, i16* %17, align 2
  %955 = load i32, i32* %8, align 4
  %956 = load i32, i32* %24, align 4
  %957 = icmp slt i32 %955, %956
  br i1 %957, label %958, label %979

958:                                              ; preds = %952
  %959 = load i32*, i32** %19, align 8
  %960 = load i32, i32* %8, align 4
  %961 = add nsw i32 %960, 1
  %962 = sext i32 %961 to i64
  %963 = getelementptr inbounds i32, i32* %959, i64 %962
  %964 = load i32, i32* %963, align 4
  %965 = load i32*, i32** %19, align 8
  %966 = load i32, i32* %8, align 4
  %967 = sext i32 %966 to i64
  %968 = getelementptr inbounds i32, i32* %965, i64 %967
  %969 = load i32, i32* %968, align 4
  %970 = icmp eq i32 %964, %969
  br i1 %970, label %971, label %979

971:                                              ; preds = %958
  %972 = load i16*, i16** %16, align 8
  %973 = load i32, i32* %8, align 4
  %974 = add nsw i32 %973, 1
  %975 = sext i32 %974 to i64
  %976 = getelementptr inbounds i16, i16* %972, i64 %975
  %977 = load i16, i16* %976, align 2
  %978 = sext i16 %977 to i32
  br label %980

979:                                              ; preds = %958, %952
  br label %980

980:                                              ; preds = %979, %971
  %981 = phi i32 [ %978, %971 ], [ -1, %979 ]
  %982 = trunc i32 %981 to i16
  store i16 %982, i16* %18, align 2
  %983 = load i32, i32* %34, align 4
  %984 = icmp ne i32 %983, 0
  br i1 %984, label %985, label %1002

985:                                              ; preds = %980
  %986 = load double*, double** %41, align 8
  %987 = load i32, i32* %28, align 4
  %988 = sext i32 %987 to i64
  %989 = getelementptr inbounds double, double* %986, i64 %988
  %990 = load double, double* %989, align 8
  %991 = fcmp oeq double %990, 0.000000e+00
  br i1 %991, label %992, label %1002

992:                                              ; preds = %985
  %993 = load double*, double** %44, align 8
  %994 = load i32, i32* %28, align 4
  %995 = sext i32 %994 to i64
  %996 = getelementptr inbounds double, double* %993, i64 %995
  %997 = load double, double* %996, align 8
  %998 = load double, double* %48, align 8
  %999 = fmul double %997, %998
  %1000 = load double, double* %36, align 8
  %1001 = fmul double %1000, %999
  store double %1001, double* %36, align 8
  br label %1029

1002:                                             ; preds = %985, %980
  %1003 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %54, align 8
  %1004 = load i32, i32* %23, align 4
  %1005 = load i32, i32* %8, align 4
  %1006 = load i32, i32* %23, align 4
  %1007 = load i32, i32* %8, align 4
  %1008 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %53, align 8
  %1009 = bitcast %struct.hc_mb_def_dat* %1008 to i8*
  %1010 = call zeroext i8 %1003(i32 noundef %1004, i32 noundef %1005, i32 noundef %1006, i32 noundef %1007, i8 noundef zeroext 6, i8* noundef %1009)
  %1011 = icmp ne i8 %1010, 0
  br i1 %1011, label %1012, label %1028

1012:                                             ; preds = %1002
  %1013 = load i8, i8* %13, align 1
  %1014 = zext i8 %1013 to i32
  %1015 = icmp eq i32 %1014, 0
  br i1 %1015, label %1016, label %1017

1016:                                             ; preds = %1012
  store i8 7, i8* %13, align 1
  br label %1017

1017:                                             ; preds = %1016, %1012
  %1018 = load i8, i8* %13, align 1
  %1019 = zext i8 %1018 to i32
  %1020 = load i16, i16* %17, align 2
  %1021 = sext i16 %1020 to i32
  %1022 = load i16, i16* %18, align 2
  %1023 = sext i16 %1022 to i32
  %1024 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %50, align 8
  %1025 = call double @exp_E_MLstem(i32 noundef %1019, i32 noundef %1021, i32 noundef %1023, %struct.vrna_exp_param_s* noundef %1024)
  %1026 = load double, double* %36, align 8
  %1027 = fmul double %1026, %1025
  store double %1027, double* %36, align 8
  br label %1028

1028:                                             ; preds = %1017, %1002
  br label %1029

1029:                                             ; preds = %1028, %992
  %1030 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %1031 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %1030, i32 0, i32 12
  %1032 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %1031, align 8
  %1033 = icmp ne double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* %1032, null
  br i1 %1033, label %1034, label %1046

1034:                                             ; preds = %1029
  %1035 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %1036 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %1035, i32 0, i32 12
  %1037 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %1036, align 8
  %1038 = load i32, i32* %23, align 4
  %1039 = load i32, i32* %8, align 4
  %1040 = load i32, i32* %23, align 4
  %1041 = load i32, i32* %8, align 4
  %1042 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %55, align 8
  %1043 = call double %1037(i32 noundef %1038, i32 noundef %1039, i32 noundef %1040, i32 noundef %1041, %struct.sc_mb_exp_dat* noundef %1042)
  %1044 = load double, double* %36, align 8
  %1045 = fmul double %1044, %1043
  store double %1045, double* %36, align 8
  br label %1046

1046:                                             ; preds = %1034, %1029
  %1047 = load double, double* %36, align 8
  %1048 = load double*, double** %45, align 8
  %1049 = getelementptr inbounds double, double* %1048, i64 2
  %1050 = load double, double* %1049, align 8
  %1051 = load double*, double** %42, align 8
  %1052 = load i32, i32* %28, align 4
  %1053 = sext i32 %1052 to i64
  %1054 = getelementptr inbounds double, double* %1051, i64 %1053
  %1055 = load double, double* %1054, align 8
  %1056 = call double @llvm.fmuladd.f64(double %1047, double %1050, double %1055)
  store double %1056, double* %1054, align 8
  %1057 = load double*, double** %42, align 8
  %1058 = load i32, i32* %28, align 4
  %1059 = sext i32 %1058 to i64
  %1060 = getelementptr inbounds double, double* %1057, i64 %1059
  %1061 = load double, double* %1060, align 8
  %1062 = load double*, double** %10, align 8
  %1063 = load double, double* %1062, align 8
  %1064 = fcmp ogt double %1061, %1063
  br i1 %1064, label %1065, label %1091

1065:                                             ; preds = %1046
  %1066 = load double*, double** %42, align 8
  %1067 = load i32, i32* %28, align 4
  %1068 = sext i32 %1067 to i64
  %1069 = getelementptr inbounds double, double* %1066, i64 %1068
  %1070 = load double, double* %1069, align 8
  %1071 = load double*, double** %10, align 8
  store double %1070, double* %1071, align 8
  %1072 = load double*, double** %10, align 8
  %1073 = load double, double* %1072, align 8
  %1074 = load double, double* %49, align 8
  %1075 = fdiv double %1074, 1.000000e+01
  %1076 = fcmp ogt double %1073, %1075
  br i1 %1076, label %1077, label %1090

1077:                                             ; preds = %1065
  %1078 = load i32, i32* %23, align 4
  %1079 = load i32, i32* %8, align 4
  %1080 = load double*, double** %42, align 8
  %1081 = load i32, i32* %28, align 4
  %1082 = sext i32 %1081 to i64
  %1083 = getelementptr inbounds double, double* %1080, i64 %1082
  %1084 = load double, double* %1083, align 8
  %1085 = load double*, double** %41, align 8
  %1086 = load i32, i32* %28, align 4
  %1087 = sext i32 %1086 to i64
  %1088 = getelementptr inbounds double, double* %1085, i64 %1087
  %1089 = load double, double* %1088, align 8
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([34 x i8], [34 x i8]* @.str.11, i64 0, i64 0), i32 noundef %1078, i32 noundef %1079, double noundef %1084, double noundef %1089)
  br label %1090

1090:                                             ; preds = %1077, %1065
  br label %1091

1091:                                             ; preds = %1090, %1046
  %1092 = load double*, double** %42, align 8
  %1093 = load i32, i32* %28, align 4
  %1094 = sext i32 %1093 to i64
  %1095 = getelementptr inbounds double, double* %1092, i64 %1094
  %1096 = load double, double* %1095, align 8
  %1097 = load double, double* %49, align 8
  %1098 = fcmp oge double %1096, %1097
  br i1 %1098, label %1099, label %1107

1099:                                             ; preds = %1091
  %1100 = load i32*, i32** %11, align 8
  %1101 = load i32, i32* %1100, align 4
  %1102 = add nsw i32 %1101, 1
  store i32 %1102, i32* %1100, align 4
  %1103 = load double*, double** %42, align 8
  %1104 = load i32, i32* %28, align 4
  %1105 = sext i32 %1104 to i64
  %1106 = getelementptr inbounds double, double* %1103, i64 %1105
  store double 0x47EFFFFFE0000000, double* %1106, align 8
  br label %1107

1107:                                             ; preds = %1099, %1091
  %1108 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  call void @rotate_ml_helper_arrays_inner(%struct.helper_arrays* noundef %1108)
  br label %1109

1109:                                             ; preds = %1107, %827, %818
  %1110 = load i32, i32* %23, align 4
  %1111 = add nsw i32 %1110, 1
  store i32 %1111, i32* %23, align 4
  br label %196, !llvm.loop !45

1112:                                             ; preds = %196
  br label %1113

1113:                                             ; preds = %1112, %194
  %1114 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  call void @rotate_ml_helper_arrays_outer(%struct.helper_arrays* noundef %1114)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @compute_bpp_internal_comparative(%struct.vrna_fc_s* noundef %0, i32 noundef %1, %struct.vrna_elem_prob_s** noundef %2, i32* noundef %3, i32* noundef %4, double* noundef %5, i32* noundef %6, %struct.constraints_helper* noundef %7) #0 {
  %9 = alloca %struct.vrna_fc_s*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.vrna_elem_prob_s**, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca double*, align 8
  %15 = alloca i32*, align 8
  %16 = alloca %struct.constraints_helper*, align 8
  %17 = alloca i16**, align 8
  %18 = alloca i16**, align 8
  %19 = alloca i16**, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32*, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32**, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32*, align 8
  %34 = alloca i32*, align 8
  %35 = alloca i32, align 4
  %36 = alloca i32*, align 8
  %37 = alloca i32*, align 8
  %38 = alloca double, align 8
  %39 = alloca double*, align 8
  %40 = alloca double*, align 8
  %41 = alloca double*, align 8
  %42 = alloca double, align 8
  %43 = alloca double, align 8
  %44 = alloca double, align 8
  %45 = alloca %struct.vrna_exp_param_s*, align 8
  %46 = alloca %struct.vrna_md_s*, align 8
  %47 = alloca %struct.vrna_hc_s*, align 8
  %48 = alloca i8 (i32, i32, i32, i32, i8*)*, align 8
  %49 = alloca %struct.hc_int_def_dat*, align 8
  %50 = alloca %struct.sc_int_exp_dat*, align 8
  %51 = alloca i32, align 4
  %52 = alloca i32, align 4
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %9, align 8
  store i32 %1, i32* %10, align 4
  store %struct.vrna_elem_prob_s** %2, %struct.vrna_elem_prob_s*** %11, align 8
  store i32* %3, i32** %12, align 8
  store i32* %4, i32** %13, align 8
  store double* %5, double** %14, align 8
  store i32* %6, i32** %15, align 8
  store %struct.constraints_helper* %7, %struct.constraints_helper** %16, align 8
  %53 = load %struct.constraints_helper*, %struct.constraints_helper** %16, align 8
  %54 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %53, i32 0, i32 5
  %55 = load i8 (i32, i32, i32, i32, i8*)*, i8 (i32, i32, i32, i32, i8*)** %54, align 8
  store i8 (i32, i32, i32, i32, i8*)* %55, i8 (i32, i32, i32, i32, i8*)** %48, align 8
  %56 = load %struct.constraints_helper*, %struct.constraints_helper** %16, align 8
  %57 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %56, i32 0, i32 4
  store %struct.hc_int_def_dat* %57, %struct.hc_int_def_dat** %49, align 8
  %58 = load %struct.constraints_helper*, %struct.constraints_helper** %16, align 8
  %59 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %58, i32 0, i32 10
  store %struct.sc_int_exp_dat* %59, %struct.sc_int_exp_dat** %50, align 8
  %60 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %61 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %60, i32 0, i32 1
  %62 = load i32, i32* %61, align 4
  store i32 %62, i32* %28, align 4
  %63 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %64 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %63, i32 0, i32 24
  %65 = bitcast %union.anon.9* %64 to %struct.anon.14*
  %66 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %65, i32 0, i32 1
  %67 = load i32, i32* %66, align 8
  store i32 %67, i32* %23, align 4
  %68 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %69 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %68, i32 0, i32 24
  %70 = bitcast %union.anon.9* %69 to %struct.anon.14*
  %71 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %70, i32 0, i32 9
  %72 = load i32*, i32** %71, align 8
  store i32* %72, i32** %36, align 8
  %73 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %74 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %73, i32 0, i32 24
  %75 = bitcast %union.anon.9* %74 to %struct.anon.14*
  %76 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %75, i32 0, i32 4
  %77 = load i16**, i16*** %76, align 8
  store i16** %77, i16*** %17, align 8
  %78 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %79 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %78, i32 0, i32 24
  %80 = bitcast %union.anon.9* %79 to %struct.anon.14*
  %81 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %80, i32 0, i32 5
  %82 = load i16**, i16*** %81, align 8
  store i16** %82, i16*** %18, align 8
  %83 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %84 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %83, i32 0, i32 24
  %85 = bitcast %union.anon.9* %84 to %struct.anon.14*
  %86 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %85, i32 0, i32 6
  %87 = load i16**, i16*** %86, align 8
  store i16** %87, i16*** %19, align 8
  %88 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %89 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %88, i32 0, i32 24
  %90 = bitcast %union.anon.9* %89 to %struct.anon.14*
  %91 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %90, i32 0, i32 8
  %92 = load i32**, i32*** %91, align 8
  store i32** %92, i32*** %24, align 8
  %93 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %94 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %93, i32 0, i32 16
  %95 = load i32*, i32** %94, align 8
  store i32* %95, i32** %33, align 8
  %96 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %97 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %96, i32 0, i32 17
  %98 = load i32*, i32** %97, align 8
  store i32* %98, i32** %34, align 8
  %99 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %100 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %99, i32 0, i32 15
  %101 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %100, align 8
  store %struct.vrna_exp_param_s* %101, %struct.vrna_exp_param_s** %45, align 8
  %102 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %45, align 8
  %103 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %102, i32 0, i32 40
  store %struct.vrna_md_s* %103, %struct.vrna_md_s** %46, align 8
  %104 = load %struct.vrna_md_s*, %struct.vrna_md_s** %46, align 8
  %105 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %104, i32 0, i32 18
  %106 = load i32, i32* %105, align 4
  store i32 %106, i32* %35, align 4
  %107 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %108 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %107, i32 0, i32 11
  %109 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %108, align 8
  store %struct.vrna_hc_s* %109, %struct.vrna_hc_s** %47, align 8
  %110 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %47, align 8
  %111 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %110, i32 0, i32 6
  %112 = load i32*, i32** %111, align 8
  store i32* %112, i32** %37, align 8
  %113 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %114 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %113, i32 0, i32 13
  %115 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %114, align 8
  %116 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %115, i32 0, i32 4
  %117 = bitcast %union.anon.5* %116 to %struct.anon.6*
  %118 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %117, i32 0, i32 1
  %119 = load double*, double** %118, align 8
  store double* %119, double** %39, align 8
  %120 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %121 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %120, i32 0, i32 13
  %122 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %121, align 8
  %123 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %122, i32 0, i32 4
  %124 = bitcast %union.anon.5* %123 to %struct.anon.6*
  %125 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %124, i32 0, i32 4
  %126 = load double*, double** %125, align 8
  store double* %126, double** %40, align 8
  %127 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %128 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %127, i32 0, i32 13
  %129 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %128, align 8
  %130 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %129, i32 0, i32 2
  %131 = load double*, double** %130, align 8
  store double* %131, double** %41, align 8
  %132 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %45, align 8
  %133 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %132, i32 0, i32 36
  %134 = load double, double* %133, align 8
  %135 = fdiv double %134, 1.000000e+01
  store double %135, double* %44, align 8
  store double 0x7FEFFFFFFFFFFFFF, double* %43, align 8
  %136 = load i32, i32* %23, align 4
  %137 = zext i32 %136 to i64
  %138 = mul i64 4, %137
  %139 = trunc i64 %138 to i32
  %140 = call i8* @vrna_alloc(i32 noundef %139)
  %141 = bitcast i8* %140 to i32*
  store i32* %141, i32** %21, align 8
  store i32 1, i32* %27, align 4
  br label %142

142:                                              ; preds = %548, %8
  %143 = load i32, i32* %27, align 4
  %144 = load i32, i32* %10, align 4
  %145 = load i32, i32* %35, align 4
  %146 = sub nsw i32 %144, %145
  %147 = icmp slt i32 %143, %146
  br i1 %147, label %148, label %551

148:                                              ; preds = %142
  %149 = load i32*, i32** %33, align 8
  %150 = load i32, i32* %27, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i32, i32* %149, i64 %151
  %153 = load i32, i32* %152, align 4
  %154 = load i32, i32* %10, align 4
  %155 = sub nsw i32 %153, %154
  store i32 %155, i32* %30, align 4
  %156 = load double*, double** %39, align 8
  %157 = load i32, i32* %30, align 4
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds double, double* %156, i64 %158
  %160 = load double, double* %159, align 8
  %161 = fcmp oeq double %160, 0.000000e+00
  br i1 %161, label %162, label %163

162:                                              ; preds = %148
  br label %548

163:                                              ; preds = %148
  %164 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %47, align 8
  %165 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %164, i32 0, i32 3
  %166 = bitcast %union.anon* %165 to %struct.anon*
  %167 = getelementptr inbounds %struct.anon, %struct.anon* %166, i32 0, i32 0
  %168 = load i8*, i8** %167, align 8
  %169 = load i32, i32* %10, align 4
  %170 = load i32, i32* %28, align 4
  %171 = mul nsw i32 %169, %170
  %172 = load i32, i32* %27, align 4
  %173 = add nsw i32 %171, %172
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds i8, i8* %168, i64 %174
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = and i32 %177, 8
  %179 = icmp ne i32 %178, 0
  br i1 %179, label %180, label %496

180:                                              ; preds = %163
  %181 = load i32*, i32** %36, align 8
  %182 = load i32*, i32** %34, align 8
  %183 = load i32, i32* %10, align 4
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds i32, i32* %182, i64 %184
  %186 = load i32, i32* %185, align 4
  %187 = load i32, i32* %27, align 4
  %188 = add nsw i32 %186, %187
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i32, i32* %181, i64 %189
  %191 = load i32, i32* %190, align 4
  %192 = sitofp i32 %191 to double
  %193 = load double, double* %44, align 8
  %194 = fdiv double %192, %193
  %195 = call double @exp(double noundef %194) #5
  store double %195, double* %42, align 8
  store i32 0, i32* %22, align 4
  br label %196

196:                                              ; preds = %227, %180
  %197 = load i32, i32* %22, align 4
  %198 = load i32, i32* %23, align 4
  %199 = icmp ult i32 %197, %198
  br i1 %199, label %200, label %230

200:                                              ; preds = %196
  %201 = load i16**, i16*** %17, align 8
  %202 = load i32, i32* %22, align 4
  %203 = zext i32 %202 to i64
  %204 = getelementptr inbounds i16*, i16** %201, i64 %203
  %205 = load i16*, i16** %204, align 8
  %206 = load i32, i32* %10, align 4
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds i16, i16* %205, i64 %207
  %209 = load i16, i16* %208, align 2
  %210 = sext i16 %209 to i32
  %211 = load i16**, i16*** %17, align 8
  %212 = load i32, i32* %22, align 4
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds i16*, i16** %211, i64 %213
  %215 = load i16*, i16** %214, align 8
  %216 = load i32, i32* %27, align 4
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i16, i16* %215, i64 %217
  %219 = load i16, i16* %218, align 2
  %220 = sext i16 %219 to i32
  %221 = load %struct.vrna_md_s*, %struct.vrna_md_s** %46, align 8
  %222 = call i32 @vrna_get_ptype_md(i32 noundef %210, i32 noundef %220, %struct.vrna_md_s* noundef %221)
  %223 = load i32*, i32** %21, align 8
  %224 = load i32, i32* %22, align 4
  %225 = zext i32 %224 to i64
  %226 = getelementptr inbounds i32, i32* %223, i64 %225
  store i32 %222, i32* %226, align 4
  br label %227

227:                                              ; preds = %200
  %228 = load i32, i32* %22, align 4
  %229 = add i32 %228, 1
  store i32 %229, i32* %22, align 4
  br label %196, !llvm.loop !46

230:                                              ; preds = %196
  %231 = load i32, i32* %27, align 4
  %232 = sub nsw i32 %231, 30
  %233 = sub nsw i32 %232, 1
  %234 = icmp sgt i32 1, %233
  br i1 %234, label %235, label %236

235:                                              ; preds = %230
  br label %240

236:                                              ; preds = %230
  %237 = load i32, i32* %27, align 4
  %238 = sub nsw i32 %237, 30
  %239 = sub nsw i32 %238, 1
  br label %240

240:                                              ; preds = %236, %235
  %241 = phi i32 [ 1, %235 ], [ %239, %236 ]
  store i32 %241, i32* %25, align 4
  br label %242

242:                                              ; preds = %492, %240
  %243 = load i32, i32* %25, align 4
  %244 = load i32, i32* %27, align 4
  %245 = sub nsw i32 %244, 1
  %246 = icmp sle i32 %243, %245
  br i1 %246, label %247, label %495

247:                                              ; preds = %242
  %248 = load i32, i32* %27, align 4
  %249 = load i32, i32* %25, align 4
  %250 = sub nsw i32 %248, %249
  %251 = sub nsw i32 %250, 1
  store i32 %251, i32* %31, align 4
  %252 = load i32*, i32** %37, align 8
  %253 = load i32, i32* %25, align 4
  %254 = add nsw i32 %253, 1
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds i32, i32* %252, i64 %255
  %257 = load i32, i32* %256, align 4
  %258 = load i32, i32* %31, align 4
  %259 = icmp slt i32 %257, %258
  br i1 %259, label %260, label %261

260:                                              ; preds = %247
  br label %492

261:                                              ; preds = %247
  %262 = load i32, i32* %10, align 4
  %263 = add nsw i32 %262, 1
  store i32 %263, i32* %26, align 4
  br label %264

264:                                              ; preds = %488, %261
  %265 = load i32, i32* %26, align 4
  %266 = load i32, i32* %10, align 4
  %267 = add nsw i32 %266, 30
  %268 = load i32, i32* %27, align 4
  %269 = sub nsw i32 %267, %268
  %270 = load i32, i32* %25, align 4
  %271 = add nsw i32 %269, %270
  %272 = add nsw i32 %271, 2
  %273 = load i32, i32* %28, align 4
  %274 = icmp slt i32 %272, %273
  br i1 %274, label %275, label %283

275:                                              ; preds = %264
  %276 = load i32, i32* %10, align 4
  %277 = add nsw i32 %276, 30
  %278 = load i32, i32* %27, align 4
  %279 = sub nsw i32 %277, %278
  %280 = load i32, i32* %25, align 4
  %281 = add nsw i32 %279, %280
  %282 = add nsw i32 %281, 2
  br label %285

283:                                              ; preds = %264
  %284 = load i32, i32* %28, align 4
  br label %285

285:                                              ; preds = %283, %275
  %286 = phi i32 [ %282, %275 ], [ %284, %283 ]
  %287 = icmp sle i32 %265, %286
  br i1 %287, label %288, label %491

288:                                              ; preds = %285
  %289 = load i32*, i32** %33, align 8
  %290 = load i32, i32* %25, align 4
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds i32, i32* %289, i64 %291
  %293 = load i32, i32* %292, align 4
  %294 = load i32, i32* %26, align 4
  %295 = sub nsw i32 %293, %294
  store i32 %295, i32* %29, align 4
  %296 = load double*, double** %40, align 8
  %297 = load i32, i32* %29, align 4
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds double, double* %296, i64 %298
  %300 = load double, double* %299, align 8
  %301 = fcmp oeq double %300, 0.000000e+00
  br i1 %301, label %302, label %303

302:                                              ; preds = %288
  br label %488

303:                                              ; preds = %288
  %304 = load i32, i32* %26, align 4
  %305 = load i32, i32* %10, align 4
  %306 = sub nsw i32 %304, %305
  %307 = sub nsw i32 %306, 1
  store i32 %307, i32* %32, align 4
  %308 = load i32*, i32** %37, align 8
  %309 = load i32, i32* %10, align 4
  %310 = add nsw i32 %309, 1
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i32, i32* %308, i64 %311
  %313 = load i32, i32* %312, align 4
  %314 = load i32, i32* %32, align 4
  %315 = icmp slt i32 %313, %314
  br i1 %315, label %316, label %317

316:                                              ; preds = %303
  br label %491

317:                                              ; preds = %303
  %318 = load i8 (i32, i32, i32, i32, i8*)*, i8 (i32, i32, i32, i32, i8*)** %48, align 8
  %319 = load i32, i32* %25, align 4
  %320 = load i32, i32* %26, align 4
  %321 = load i32, i32* %27, align 4
  %322 = load i32, i32* %10, align 4
  %323 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %49, align 8
  %324 = bitcast %struct.hc_int_def_dat* %323 to i8*
  %325 = call zeroext i8 %318(i32 noundef %319, i32 noundef %320, i32 noundef %321, i32 noundef %322, i8* noundef %324)
  %326 = icmp ne i8 %325, 0
  br i1 %326, label %327, label %487

327:                                              ; preds = %317
  %328 = load double*, double** %40, align 8
  %329 = load i32, i32* %29, align 4
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds double, double* %328, i64 %330
  %332 = load double, double* %331, align 8
  %333 = load double*, double** %41, align 8
  %334 = load i32, i32* %31, align 4
  %335 = load i32, i32* %32, align 4
  %336 = add nsw i32 %334, %335
  %337 = add nsw i32 %336, 2
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds double, double* %333, i64 %338
  %340 = load double, double* %339, align 8
  %341 = fmul double %332, %340
  %342 = load double, double* %42, align 8
  %343 = fmul double %341, %342
  store double %343, double* %38, align 8
  store i32 0, i32* %22, align 4
  br label %344

344:                                              ; preds = %459, %327
  %345 = load i32, i32* %22, align 4
  %346 = load i32, i32* %23, align 4
  %347 = icmp ult i32 %345, %346
  br i1 %347, label %348, label %462

348:                                              ; preds = %344
  %349 = load i32**, i32*** %24, align 8
  %350 = load i32, i32* %22, align 4
  %351 = zext i32 %350 to i64
  %352 = getelementptr inbounds i32*, i32** %349, i64 %351
  %353 = load i32*, i32** %352, align 8
  %354 = load i32, i32* %27, align 4
  %355 = sub nsw i32 %354, 1
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds i32, i32* %353, i64 %356
  %358 = load i32, i32* %357, align 4
  %359 = load i32**, i32*** %24, align 8
  %360 = load i32, i32* %22, align 4
  %361 = zext i32 %360 to i64
  %362 = getelementptr inbounds i32*, i32** %359, i64 %361
  %363 = load i32*, i32** %362, align 8
  %364 = load i32, i32* %25, align 4
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds i32, i32* %363, i64 %365
  %367 = load i32, i32* %366, align 4
  %368 = sub i32 %358, %367
  store i32 %368, i32* %51, align 4
  %369 = load i32**, i32*** %24, align 8
  %370 = load i32, i32* %22, align 4
  %371 = zext i32 %370 to i64
  %372 = getelementptr inbounds i32*, i32** %369, i64 %371
  %373 = load i32*, i32** %372, align 8
  %374 = load i32, i32* %26, align 4
  %375 = sub nsw i32 %374, 1
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds i32, i32* %373, i64 %376
  %378 = load i32, i32* %377, align 4
  %379 = load i32**, i32*** %24, align 8
  %380 = load i32, i32* %22, align 4
  %381 = zext i32 %380 to i64
  %382 = getelementptr inbounds i32*, i32** %379, i64 %381
  %383 = load i32*, i32** %382, align 8
  %384 = load i32, i32* %10, align 4
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds i32, i32* %383, i64 %385
  %387 = load i32, i32* %386, align 4
  %388 = sub i32 %378, %387
  store i32 %388, i32* %52, align 4
  %389 = load i16**, i16*** %17, align 8
  %390 = load i32, i32* %22, align 4
  %391 = zext i32 %390 to i64
  %392 = getelementptr inbounds i16*, i16** %389, i64 %391
  %393 = load i16*, i16** %392, align 8
  %394 = load i32, i32* %25, align 4
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds i16, i16* %393, i64 %395
  %397 = load i16, i16* %396, align 2
  %398 = sext i16 %397 to i32
  %399 = load i16**, i16*** %17, align 8
  %400 = load i32, i32* %22, align 4
  %401 = zext i32 %400 to i64
  %402 = getelementptr inbounds i16*, i16** %399, i64 %401
  %403 = load i16*, i16** %402, align 8
  %404 = load i32, i32* %26, align 4
  %405 = sext i32 %404 to i64
  %406 = getelementptr inbounds i16, i16* %403, i64 %405
  %407 = load i16, i16* %406, align 2
  %408 = sext i16 %407 to i32
  %409 = load %struct.vrna_md_s*, %struct.vrna_md_s** %46, align 8
  %410 = call i32 @vrna_get_ptype_md(i32 noundef %398, i32 noundef %408, %struct.vrna_md_s* noundef %409)
  store i32 %410, i32* %20, align 4
  %411 = load i32, i32* %51, align 4
  %412 = load i32, i32* %52, align 4
  %413 = load i32, i32* %20, align 4
  %414 = load i32*, i32** %21, align 8
  %415 = load i32, i32* %22, align 4
  %416 = zext i32 %415 to i64
  %417 = getelementptr inbounds i32, i32* %414, i64 %416
  %418 = load i32, i32* %417, align 4
  %419 = load i16**, i16*** %19, align 8
  %420 = load i32, i32* %22, align 4
  %421 = zext i32 %420 to i64
  %422 = getelementptr inbounds i16*, i16** %419, i64 %421
  %423 = load i16*, i16** %422, align 8
  %424 = load i32, i32* %25, align 4
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds i16, i16* %423, i64 %425
  %427 = load i16, i16* %426, align 2
  %428 = load i16**, i16*** %18, align 8
  %429 = load i32, i32* %22, align 4
  %430 = zext i32 %429 to i64
  %431 = getelementptr inbounds i16*, i16** %428, i64 %430
  %432 = load i16*, i16** %431, align 8
  %433 = load i32, i32* %26, align 4
  %434 = sext i32 %433 to i64
  %435 = getelementptr inbounds i16, i16* %432, i64 %434
  %436 = load i16, i16* %435, align 2
  %437 = load i16**, i16*** %18, align 8
  %438 = load i32, i32* %22, align 4
  %439 = zext i32 %438 to i64
  %440 = getelementptr inbounds i16*, i16** %437, i64 %439
  %441 = load i16*, i16** %440, align 8
  %442 = load i32, i32* %27, align 4
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds i16, i16* %441, i64 %443
  %445 = load i16, i16* %444, align 2
  %446 = load i16**, i16*** %19, align 8
  %447 = load i32, i32* %22, align 4
  %448 = zext i32 %447 to i64
  %449 = getelementptr inbounds i16*, i16** %446, i64 %448
  %450 = load i16*, i16** %449, align 8
  %451 = load i32, i32* %10, align 4
  %452 = sext i32 %451 to i64
  %453 = getelementptr inbounds i16, i16* %450, i64 %452
  %454 = load i16, i16* %453, align 2
  %455 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %45, align 8
  %456 = call double @exp_E_IntLoop(i32 noundef %411, i32 noundef %412, i32 noundef %413, i32 noundef %418, i16 noundef signext %427, i16 noundef signext %436, i16 noundef signext %445, i16 noundef signext %454, %struct.vrna_exp_param_s* noundef %455)
  %457 = load double, double* %38, align 8
  %458 = fmul double %457, %456
  store double %458, double* %38, align 8
  br label %459

459:                                              ; preds = %348
  %460 = load i32, i32* %22, align 4
  %461 = add i32 %460, 1
  store i32 %461, i32* %22, align 4
  br label %344, !llvm.loop !47

462:                                              ; preds = %344
  %463 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %50, align 8
  %464 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %463, i32 0, i32 16
  %465 = load double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %464, align 8
  %466 = icmp ne double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %465, null
  br i1 %466, label %467, label %479

467:                                              ; preds = %462
  %468 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %50, align 8
  %469 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %468, i32 0, i32 16
  %470 = load double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %469, align 8
  %471 = load i32, i32* %25, align 4
  %472 = load i32, i32* %26, align 4
  %473 = load i32, i32* %27, align 4
  %474 = load i32, i32* %10, align 4
  %475 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %50, align 8
  %476 = call double %470(i32 noundef %471, i32 noundef %472, i32 noundef %473, i32 noundef %474, %struct.sc_int_exp_dat* noundef %475)
  %477 = load double, double* %38, align 8
  %478 = fmul double %477, %476
  store double %478, double* %38, align 8
  br label %479

479:                                              ; preds = %467, %462
  %480 = load double, double* %38, align 8
  %481 = load double*, double** %40, align 8
  %482 = load i32, i32* %30, align 4
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds double, double* %481, i64 %483
  %485 = load double, double* %484, align 8
  %486 = fadd double %485, %480
  store double %486, double* %484, align 8
  br label %487

487:                                              ; preds = %479, %317
  br label %488

488:                                              ; preds = %487, %302
  %489 = load i32, i32* %26, align 4
  %490 = add nsw i32 %489, 1
  store i32 %490, i32* %26, align 4
  br label %264, !llvm.loop !48

491:                                              ; preds = %316, %285
  br label %492

492:                                              ; preds = %491, %260
  %493 = load i32, i32* %25, align 4
  %494 = add nsw i32 %493, 1
  store i32 %494, i32* %25, align 4
  br label %242, !llvm.loop !49

495:                                              ; preds = %242
  br label %496

496:                                              ; preds = %495, %163
  %497 = load double*, double** %40, align 8
  %498 = load i32, i32* %30, align 4
  %499 = sext i32 %498 to i64
  %500 = getelementptr inbounds double, double* %497, i64 %499
  %501 = load double, double* %500, align 8
  %502 = load double*, double** %14, align 8
  %503 = load double, double* %502, align 8
  %504 = fcmp ogt double %501, %503
  br i1 %504, label %505, label %531

505:                                              ; preds = %496
  %506 = load double*, double** %40, align 8
  %507 = load i32, i32* %30, align 4
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds double, double* %506, i64 %508
  %510 = load double, double* %509, align 8
  %511 = load double*, double** %14, align 8
  store double %510, double* %511, align 8
  %512 = load double*, double** %14, align 8
  %513 = load double, double* %512, align 8
  %514 = load double, double* %43, align 8
  %515 = fdiv double %514, 1.000000e+01
  %516 = fcmp ogt double %513, %515
  br i1 %516, label %517, label %530

517:                                              ; preds = %505
  %518 = load i32, i32* %27, align 4
  %519 = load i32, i32* %10, align 4
  %520 = load double*, double** %40, align 8
  %521 = load i32, i32* %30, align 4
  %522 = sext i32 %521 to i64
  %523 = getelementptr inbounds double, double* %520, i64 %522
  %524 = load double, double* %523, align 8
  %525 = load double*, double** %39, align 8
  %526 = load i32, i32* %30, align 4
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds double, double* %525, i64 %527
  %529 = load double, double* %528, align 8
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([34 x i8], [34 x i8]* @.str.11, i64 0, i64 0), i32 noundef %518, i32 noundef %519, double noundef %524, double noundef %529)
  br label %530

530:                                              ; preds = %517, %505
  br label %531

531:                                              ; preds = %530, %496
  %532 = load double*, double** %40, align 8
  %533 = load i32, i32* %30, align 4
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds double, double* %532, i64 %534
  %536 = load double, double* %535, align 8
  %537 = load double, double* %43, align 8
  %538 = fcmp oge double %536, %537
  br i1 %538, label %539, label %547

539:                                              ; preds = %531
  %540 = load i32*, i32** %15, align 8
  %541 = load i32, i32* %540, align 4
  %542 = add nsw i32 %541, 1
  store i32 %542, i32* %540, align 4
  %543 = load double*, double** %40, align 8
  %544 = load i32, i32* %30, align 4
  %545 = sext i32 %544 to i64
  %546 = getelementptr inbounds double, double* %543, i64 %545
  store double 0x47EFFFFFE0000000, double* %546, align 8
  br label %547

547:                                              ; preds = %539, %531
  br label %548

548:                                              ; preds = %547, %162
  %549 = load i32, i32* %27, align 4
  %550 = add nsw i32 %549, 1
  store i32 %550, i32* %27, align 4
  br label %142, !llvm.loop !50

551:                                              ; preds = %142
  %552 = load i32*, i32** %21, align 8
  %553 = bitcast i32* %552 to i8*
  call void @free(i8* noundef %553) #5
  %554 = load %struct.vrna_md_s*, %struct.vrna_md_s** %46, align 8
  %555 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %554, i32 0, i32 10
  %556 = load i32, i32* %555, align 8
  %557 = icmp ne i32 %556, 0
  br i1 %557, label %558, label %561

558:                                              ; preds = %551
  %559 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %9, align 8
  %560 = load i32, i32* %10, align 4
  call void @compute_gquad_prob_internal_comparative(%struct.vrna_fc_s* noundef %559, i32 noundef %560)
  br label %561

561:                                              ; preds = %558, %551
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @compute_bpp_multibranch_comparative(%struct.vrna_fc_s* noundef %0, i32 noundef %1, %struct.helper_arrays* noundef %2, double* noundef %3, i32* noundef %4, %struct.constraints_helper* noundef %5) #0 {
  %7 = alloca %struct.vrna_fc_s*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.helper_arrays*, align 8
  %10 = alloca double*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca %struct.constraints_helper*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i16**, align 8
  %15 = alloca i16**, align 8
  %16 = alloca i16**, align 8
  %17 = alloca i32**, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32*, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32*, align 8
  %31 = alloca i32*, align 8
  %32 = alloca i32*, align 8
  %33 = alloca i32, align 4
  %34 = alloca double, align 8
  %35 = alloca double, align 8
  %36 = alloca double, align 8
  %37 = alloca double, align 8
  %38 = alloca double, align 8
  %39 = alloca double*, align 8
  %40 = alloca double*, align 8
  %41 = alloca double*, align 8
  %42 = alloca double*, align 8
  %43 = alloca double*, align 8
  %44 = alloca double*, align 8
  %45 = alloca double, align 8
  %46 = alloca double, align 8
  %47 = alloca double, align 8
  %48 = alloca double, align 8
  %49 = alloca %struct.vrna_exp_param_s*, align 8
  %50 = alloca %struct.vrna_md_s*, align 8
  %51 = alloca %struct.vrna_hc_s*, align 8
  %52 = alloca %struct.vrna_sc_s**, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %7, align 8
  store i32 %1, i32* %8, align 4
  store %struct.helper_arrays* %2, %struct.helper_arrays** %9, align 8
  store double* %3, double** %10, align 8
  store i32* %4, i32** %11, align 8
  store %struct.constraints_helper* %5, %struct.constraints_helper** %12, align 8
  %53 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %54 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %53, i32 0, i32 1
  %55 = load i32, i32* %54, align 4
  store i32 %55, i32* %24, align 4
  %56 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %57 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %56, i32 0, i32 24
  %58 = bitcast %union.anon.9* %57 to %struct.anon.14*
  %59 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %58, i32 0, i32 1
  %60 = load i32, i32* %59, align 8
  store i32 %60, i32* %19, align 4
  %61 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %62 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %61, i32 0, i32 24
  %63 = bitcast %union.anon.9* %62 to %struct.anon.14*
  %64 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %63, i32 0, i32 4
  %65 = load i16**, i16*** %64, align 8
  store i16** %65, i16*** %14, align 8
  %66 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %67 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %66, i32 0, i32 24
  %68 = bitcast %union.anon.9* %67 to %struct.anon.14*
  %69 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %68, i32 0, i32 5
  %70 = load i16**, i16*** %69, align 8
  store i16** %70, i16*** %15, align 8
  %71 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %72 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %71, i32 0, i32 24
  %73 = bitcast %union.anon.9* %72 to %struct.anon.14*
  %74 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %73, i32 0, i32 6
  %75 = load i16**, i16*** %74, align 8
  store i16** %75, i16*** %16, align 8
  %76 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %77 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %76, i32 0, i32 24
  %78 = bitcast %union.anon.9* %77 to %struct.anon.14*
  %79 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %78, i32 0, i32 8
  %80 = load i32**, i32*** %79, align 8
  store i32** %80, i32*** %17, align 8
  %81 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %82 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %81, i32 0, i32 3
  %83 = load i32*, i32** %82, align 8
  store i32* %83, i32** %20, align 8
  %84 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %85 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %84, i32 0, i32 24
  %86 = bitcast %union.anon.9* %85 to %struct.anon.14*
  %87 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %86, i32 0, i32 9
  %88 = load i32*, i32** %87, align 8
  store i32* %88, i32** %32, align 8
  %89 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %90 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %89, i32 0, i32 16
  %91 = load i32*, i32** %90, align 8
  store i32* %91, i32** %30, align 8
  %92 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %93 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %92, i32 0, i32 17
  %94 = load i32*, i32** %93, align 8
  store i32* %94, i32** %31, align 8
  %95 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %96 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %95, i32 0, i32 15
  %97 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %96, align 8
  store %struct.vrna_exp_param_s* %97, %struct.vrna_exp_param_s** %49, align 8
  %98 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %49, align 8
  %99 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %98, i32 0, i32 40
  store %struct.vrna_md_s* %99, %struct.vrna_md_s** %50, align 8
  %100 = load %struct.vrna_md_s*, %struct.vrna_md_s** %50, align 8
  %101 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %100, i32 0, i32 18
  %102 = load i32, i32* %101, align 4
  store i32 %102, i32* %29, align 4
  %103 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %104 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %103, i32 0, i32 13
  %105 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %104, align 8
  %106 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %105, i32 0, i32 4
  %107 = bitcast %union.anon.5* %106 to %struct.anon.6*
  %108 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %107, i32 0, i32 1
  %109 = load double*, double** %108, align 8
  store double* %109, double** %39, align 8
  %110 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %111 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %110, i32 0, i32 13
  %112 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %111, align 8
  %113 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %112, i32 0, i32 4
  %114 = bitcast %union.anon.5* %113 to %struct.anon.6*
  %115 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %114, i32 0, i32 2
  %116 = load double*, double** %115, align 8
  store double* %116, double** %41, align 8
  %117 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %118 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %117, i32 0, i32 13
  %119 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %118, align 8
  %120 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %119, i32 0, i32 4
  %121 = bitcast %union.anon.5* %120 to %struct.anon.6*
  %122 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %121, i32 0, i32 7
  %123 = load double*, double** %122, align 8
  store double* %123, double** %42, align 8
  %124 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %125 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %124, i32 0, i32 13
  %126 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %125, align 8
  %127 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %126, i32 0, i32 4
  %128 = bitcast %union.anon.5* %127 to %struct.anon.6*
  %129 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %128, i32 0, i32 4
  %130 = load double*, double** %129, align 8
  store double* %130, double** %40, align 8
  %131 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %132 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %131, i32 0, i32 13
  %133 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %132, align 8
  %134 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %133, i32 0, i32 2
  %135 = load double*, double** %134, align 8
  store double* %135, double** %43, align 8
  %136 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %137 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %136, i32 0, i32 13
  %138 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %137, align 8
  %139 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %138, i32 0, i32 3
  %140 = load double*, double** %139, align 8
  store double* %140, double** %44, align 8
  %141 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %49, align 8
  %142 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %141, i32 0, i32 20
  %143 = load double, double* %142, align 8
  store double %143, double* %45, align 8
  %144 = load %struct.vrna_md_s*, %struct.vrna_md_s** %50, align 8
  %145 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %144, i32 0, i32 10
  %146 = load i32, i32* %145, align 8
  store i32 %146, i32* %33, align 4
  %147 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %148 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %147, i32 0, i32 11
  %149 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %148, align 8
  store %struct.vrna_hc_s* %149, %struct.vrna_hc_s** %51, align 8
  %150 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %151 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %150, i32 0, i32 24
  %152 = bitcast %union.anon.9* %151 to %struct.anon.14*
  %153 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %152, i32 0, i32 12
  %154 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %153, align 8
  store %struct.vrna_sc_s** %154, %struct.vrna_sc_s*** %52, align 8
  %155 = load i32, i32* %33, align 4
  %156 = icmp ne i32 %155, 0
  br i1 %156, label %157, label %163

157:                                              ; preds = %6
  %158 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %49, align 8
  %159 = call double @exp_E_MLstem(i32 noundef 0, i32 noundef -1, i32 noundef -1, %struct.vrna_exp_param_s* noundef %158)
  %160 = load i32, i32* %19, align 4
  %161 = uitofp i32 %160 to double
  %162 = call double @pow(double noundef %159, double noundef %161) #5
  br label %164

163:                                              ; preds = %6
  br label %164

164:                                              ; preds = %163, %157
  %165 = phi double [ %162, %157 ], [ 0.000000e+00, %163 ]
  store double %165, double* %46, align 8
  %166 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %49, align 8
  %167 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %166, i32 0, i32 36
  %168 = load double, double* %167, align 8
  %169 = fdiv double %168, 1.000000e+01
  store double %169, double* %48, align 8
  store double 0.000000e+00, double* %36, align 8
  store double 0x7FEFFFFFFFFFFFFF, double* %47, align 8
  %170 = load i32*, i32** %20, align 8
  %171 = load i32, i32* %8, align 4
  %172 = add nsw i32 %171, 1
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i32, i32* %170, i64 %173
  %175 = load i32, i32* %174, align 4
  %176 = load i32*, i32** %20, align 8
  %177 = load i32, i32* %8, align 4
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i32, i32* %176, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = icmp ne i32 %175, %180
  br i1 %181, label %182, label %198

182:                                              ; preds = %164
  store i32 0, i32* %21, align 4
  br label %183

183:                                              ; preds = %194, %182
  %184 = load i32, i32* %21, align 4
  %185 = load i32, i32* %24, align 4
  %186 = icmp sle i32 %184, %185
  br i1 %186, label %187, label %197

187:                                              ; preds = %183
  %188 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %189 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %188, i32 0, i32 0
  %190 = load double*, double** %189, align 8
  %191 = load i32, i32* %21, align 4
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds double, double* %190, i64 %192
  store double 0.000000e+00, double* %193, align 8
  br label %194

194:                                              ; preds = %187
  %195 = load i32, i32* %21, align 4
  %196 = add nsw i32 %195, 1
  store i32 %196, i32* %21, align 4
  br label %183, !llvm.loop !51

197:                                              ; preds = %183
  br label %1051

198:                                              ; preds = %164
  store i32 2, i32* %23, align 4
  br label %199

199:                                              ; preds = %1047, %198
  %200 = load i32, i32* %23, align 4
  %201 = load i32, i32* %8, align 4
  %202 = load i32, i32* %29, align 4
  %203 = sub nsw i32 %201, %202
  %204 = icmp slt i32 %200, %203
  br i1 %204, label %205, label %1050

205:                                              ; preds = %199
  %206 = load i32*, i32** %30, align 8
  %207 = load i32, i32* %23, align 4
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i32, i32* %206, i64 %208
  %210 = load i32, i32* %209, align 4
  %211 = load i32, i32* %8, align 4
  %212 = sub nsw i32 %210, %211
  store i32 %212, i32* %26, align 4
  %213 = load i32, i32* %23, align 4
  %214 = sub nsw i32 %213, 1
  store i32 %214, i32* %21, align 4
  store double 0.000000e+00, double* %38, align 8
  store double 0.000000e+00, double* %37, align 8
  %215 = load i32*, i32** %30, align 8
  %216 = load i32, i32* %21, align 4
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i32, i32* %215, i64 %217
  %219 = load i32, i32* %218, align 4
  %220 = load i32, i32* %8, align 4
  %221 = add nsw i32 %220, 2
  %222 = sub nsw i32 %219, %221
  store i32 %222, i32* %27, align 4
  %223 = load i32*, i32** %30, align 8
  %224 = load i32, i32* %8, align 4
  %225 = add nsw i32 %224, 1
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds i32, i32* %223, i64 %226
  %228 = load i32, i32* %227, align 4
  %229 = load i32, i32* %8, align 4
  %230 = add nsw i32 %229, 1
  %231 = sub nsw i32 %228, %230
  store i32 %231, i32* %28, align 4
  %232 = load i32*, i32** %20, align 8
  %233 = load i32, i32* %23, align 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds i32, i32* %232, i64 %234
  %236 = load i32, i32* %235, align 4
  %237 = load i32*, i32** %20, align 8
  %238 = load i32, i32* %21, align 4
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i32, i32* %237, i64 %239
  %241 = load i32, i32* %240, align 4
  %242 = icmp eq i32 %236, %241
  br i1 %242, label %243, label %568

243:                                              ; preds = %205
  %244 = load i32, i32* %8, align 4
  %245 = add nsw i32 %244, 2
  store i32 %245, i32* %22, align 4
  br label %246

246:                                              ; preds = %408, %243
  %247 = load i32, i32* %22, align 4
  %248 = load i32, i32* %24, align 4
  %249 = icmp sle i32 %247, %248
  br i1 %249, label %250, label %415

250:                                              ; preds = %246
  %251 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %51, align 8
  %252 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %251, i32 0, i32 3
  %253 = bitcast %union.anon* %252 to %struct.anon*
  %254 = getelementptr inbounds %struct.anon, %struct.anon* %253, i32 0, i32 0
  %255 = load i8*, i8** %254, align 8
  %256 = load i32, i32* %21, align 4
  %257 = load i32, i32* %24, align 4
  %258 = mul nsw i32 %256, %257
  %259 = load i32, i32* %22, align 4
  %260 = add nsw i32 %258, %259
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds i8, i8* %255, i64 %261
  %263 = load i8, i8* %262, align 1
  %264 = zext i8 %263 to i32
  %265 = and i32 %264, 16
  %266 = icmp ne i32 %265, 0
  br i1 %266, label %267, label %407

267:                                              ; preds = %250
  %268 = load i32*, i32** %20, align 8
  %269 = load i32, i32* %22, align 4
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i32, i32* %268, i64 %270
  %272 = load i32, i32* %271, align 4
  %273 = load i32*, i32** %20, align 8
  %274 = load i32, i32* %22, align 4
  %275 = sub nsw i32 %274, 1
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i32, i32* %273, i64 %276
  %278 = load i32, i32* %277, align 4
  %279 = icmp eq i32 %272, %278
  br i1 %279, label %280, label %407

280:                                              ; preds = %267
  %281 = load double*, double** %40, align 8
  %282 = load i32, i32* %27, align 4
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds double, double* %281, i64 %283
  %285 = load double, double* %284, align 8
  %286 = load double*, double** %41, align 8
  %287 = load i32, i32* %28, align 4
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds double, double* %286, i64 %288
  %290 = load double, double* %289, align 8
  %291 = fmul double %285, %290
  store double %291, double* %35, align 8
  store i32 0, i32* %18, align 4
  br label %292

292:                                              ; preds = %346, %280
  %293 = load i32, i32* %18, align 4
  %294 = load i32, i32* %19, align 4
  %295 = icmp ult i32 %293, %294
  br i1 %295, label %296, label %349

296:                                              ; preds = %292
  %297 = load i16**, i16*** %14, align 8
  %298 = load i32, i32* %18, align 4
  %299 = zext i32 %298 to i64
  %300 = getelementptr inbounds i16*, i16** %297, i64 %299
  %301 = load i16*, i16** %300, align 8
  %302 = load i32, i32* %22, align 4
  %303 = sext i32 %302 to i64
  %304 = getelementptr inbounds i16, i16* %301, i64 %303
  %305 = load i16, i16* %304, align 2
  %306 = sext i16 %305 to i32
  %307 = load i16**, i16*** %14, align 8
  %308 = load i32, i32* %18, align 4
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds i16*, i16** %307, i64 %309
  %311 = load i16*, i16** %310, align 8
  %312 = load i32, i32* %21, align 4
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds i16, i16* %311, i64 %313
  %315 = load i16, i16* %314, align 2
  %316 = sext i16 %315 to i32
  %317 = load %struct.vrna_md_s*, %struct.vrna_md_s** %50, align 8
  %318 = call i32 @vrna_get_ptype_md(i32 noundef %306, i32 noundef %316, %struct.vrna_md_s* noundef %317)
  %319 = trunc i32 %318 to i8
  store i8 %319, i8* %13, align 1
  %320 = load i8, i8* %13, align 1
  %321 = zext i8 %320 to i32
  %322 = load i16**, i16*** %15, align 8
  %323 = load i32, i32* %18, align 4
  %324 = zext i32 %323 to i64
  %325 = getelementptr inbounds i16*, i16** %322, i64 %324
  %326 = load i16*, i16** %325, align 8
  %327 = load i32, i32* %22, align 4
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds i16, i16* %326, i64 %328
  %330 = load i16, i16* %329, align 2
  %331 = sext i16 %330 to i32
  %332 = load i16**, i16*** %16, align 8
  %333 = load i32, i32* %18, align 4
  %334 = zext i32 %333 to i64
  %335 = getelementptr inbounds i16*, i16** %332, i64 %334
  %336 = load i16*, i16** %335, align 8
  %337 = load i32, i32* %21, align 4
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds i16, i16* %336, i64 %338
  %340 = load i16, i16* %339, align 2
  %341 = sext i16 %340 to i32
  %342 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %49, align 8
  %343 = call double @exp_E_MLstem(i32 noundef %321, i32 noundef %331, i32 noundef %341, %struct.vrna_exp_param_s* noundef %342)
  %344 = load double, double* %35, align 8
  %345 = fmul double %344, %343
  store double %345, double* %35, align 8
  br label %346

346:                                              ; preds = %296
  %347 = load i32, i32* %18, align 4
  %348 = add i32 %347, 1
  store i32 %348, i32* %18, align 4
  br label %292, !llvm.loop !52

349:                                              ; preds = %292
  %350 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %351 = icmp ne %struct.vrna_sc_s** %350, null
  br i1 %351, label %352, label %403

352:                                              ; preds = %349
  store i32 0, i32* %18, align 4
  br label %353

353:                                              ; preds = %399, %352
  %354 = load i32, i32* %18, align 4
  %355 = load i32, i32* %19, align 4
  %356 = icmp ult i32 %354, %355
  br i1 %356, label %357, label %402

357:                                              ; preds = %353
  %358 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %359 = load i32, i32* %18, align 4
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %358, i64 %360
  %362 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %361, align 8
  %363 = icmp ne %struct.vrna_sc_s* %362, null
  br i1 %363, label %364, label %398

364:                                              ; preds = %357
  %365 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %366 = load i32, i32* %18, align 4
  %367 = zext i32 %366 to i64
  %368 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %365, i64 %367
  %369 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %368, align 8
  %370 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %369, i32 0, i32 7
  %371 = bitcast %union.anon.11* %370 to %struct.anon.12*
  %372 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %371, i32 0, i32 1
  %373 = load double*, double** %372, align 8
  %374 = icmp ne double* %373, null
  br i1 %374, label %375, label %397

375:                                              ; preds = %364
  %376 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %377 = load i32, i32* %18, align 4
  %378 = zext i32 %377 to i64
  %379 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %376, i64 %378
  %380 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %379, align 8
  %381 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %380, i32 0, i32 7
  %382 = bitcast %union.anon.11* %381 to %struct.anon.12*
  %383 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %382, i32 0, i32 1
  %384 = load double*, double** %383, align 8
  %385 = load i32*, i32** %31, align 8
  %386 = load i32, i32* %22, align 4
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds i32, i32* %385, i64 %387
  %389 = load i32, i32* %388, align 4
  %390 = load i32, i32* %21, align 4
  %391 = add nsw i32 %389, %390
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds double, double* %384, i64 %392
  %394 = load double, double* %393, align 8
  %395 = load double, double* %35, align 8
  %396 = fmul double %395, %394
  store double %396, double* %35, align 8
  br label %397

397:                                              ; preds = %375, %364
  br label %398

398:                                              ; preds = %397, %357
  br label %399

399:                                              ; preds = %398
  %400 = load i32, i32* %18, align 4
  %401 = add i32 %400, 1
  store i32 %401, i32* %18, align 4
  br label %353, !llvm.loop !53

402:                                              ; preds = %353
  br label %403

403:                                              ; preds = %402, %349
  %404 = load double, double* %35, align 8
  %405 = load double, double* %37, align 8
  %406 = fadd double %405, %404
  store double %406, double* %37, align 8
  br label %407

407:                                              ; preds = %403, %267, %250
  br label %408

408:                                              ; preds = %407
  %409 = load i32, i32* %22, align 4
  %410 = add nsw i32 %409, 1
  store i32 %410, i32* %22, align 4
  %411 = load i32, i32* %27, align 4
  %412 = add nsw i32 %411, -1
  store i32 %412, i32* %27, align 4
  %413 = load i32, i32* %28, align 4
  %414 = add nsw i32 %413, -1
  store i32 %414, i32* %28, align 4
  br label %246, !llvm.loop !54

415:                                              ; preds = %246
  %416 = load i32*, i32** %30, align 8
  %417 = load i32, i32* %21, align 4
  %418 = sext i32 %417 to i64
  %419 = getelementptr inbounds i32, i32* %416, i64 %418
  %420 = load i32, i32* %419, align 4
  store i32 %420, i32* %25, align 4
  %421 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %51, align 8
  %422 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %421, i32 0, i32 3
  %423 = bitcast %union.anon* %422 to %struct.anon*
  %424 = getelementptr inbounds %struct.anon, %struct.anon* %423, i32 0, i32 0
  %425 = load i8*, i8** %424, align 8
  %426 = load i32, i32* %8, align 4
  %427 = add nsw i32 %426, 1
  %428 = load i32, i32* %24, align 4
  %429 = mul nsw i32 %427, %428
  %430 = load i32, i32* %21, align 4
  %431 = add nsw i32 %429, %430
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds i8, i8* %425, i64 %432
  %434 = load i8, i8* %433, align 1
  %435 = zext i8 %434 to i32
  %436 = and i32 %435, 16
  %437 = icmp ne i32 %436, 0
  br i1 %437, label %438, label %567

438:                                              ; preds = %415
  %439 = load double*, double** %40, align 8
  %440 = load i32, i32* %25, align 4
  %441 = load i32, i32* %8, align 4
  %442 = add nsw i32 %441, 1
  %443 = sub nsw i32 %440, %442
  %444 = sext i32 %443 to i64
  %445 = getelementptr inbounds double, double* %439, i64 %444
  %446 = load double, double* %445, align 8
  %447 = load double, double* %45, align 8
  %448 = load i32, i32* %19, align 4
  %449 = uitofp i32 %448 to double
  %450 = call double @pow(double noundef %447, double noundef %449) #5
  %451 = fmul double %446, %450
  store double %451, double* %38, align 8
  store i32 0, i32* %18, align 4
  br label %452

452:                                              ; preds = %508, %438
  %453 = load i32, i32* %18, align 4
  %454 = load i32, i32* %19, align 4
  %455 = icmp ult i32 %453, %454
  br i1 %455, label %456, label %511

456:                                              ; preds = %452
  %457 = load i16**, i16*** %14, align 8
  %458 = load i32, i32* %18, align 4
  %459 = zext i32 %458 to i64
  %460 = getelementptr inbounds i16*, i16** %457, i64 %459
  %461 = load i16*, i16** %460, align 8
  %462 = load i32, i32* %8, align 4
  %463 = add nsw i32 %462, 1
  %464 = sext i32 %463 to i64
  %465 = getelementptr inbounds i16, i16* %461, i64 %464
  %466 = load i16, i16* %465, align 2
  %467 = sext i16 %466 to i32
  %468 = load i16**, i16*** %14, align 8
  %469 = load i32, i32* %18, align 4
  %470 = zext i32 %469 to i64
  %471 = getelementptr inbounds i16*, i16** %468, i64 %470
  %472 = load i16*, i16** %471, align 8
  %473 = load i32, i32* %21, align 4
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds i16, i16* %472, i64 %474
  %476 = load i16, i16* %475, align 2
  %477 = sext i16 %476 to i32
  %478 = load %struct.vrna_md_s*, %struct.vrna_md_s** %50, align 8
  %479 = call i32 @vrna_get_ptype_md(i32 noundef %467, i32 noundef %477, %struct.vrna_md_s* noundef %478)
  %480 = trunc i32 %479 to i8
  store i8 %480, i8* %13, align 1
  %481 = load i8, i8* %13, align 1
  %482 = zext i8 %481 to i32
  %483 = load i16**, i16*** %15, align 8
  %484 = load i32, i32* %18, align 4
  %485 = zext i32 %484 to i64
  %486 = getelementptr inbounds i16*, i16** %483, i64 %485
  %487 = load i16*, i16** %486, align 8
  %488 = load i32, i32* %8, align 4
  %489 = add nsw i32 %488, 1
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds i16, i16* %487, i64 %490
  %492 = load i16, i16* %491, align 2
  %493 = sext i16 %492 to i32
  %494 = load i16**, i16*** %16, align 8
  %495 = load i32, i32* %18, align 4
  %496 = zext i32 %495 to i64
  %497 = getelementptr inbounds i16*, i16** %494, i64 %496
  %498 = load i16*, i16** %497, align 8
  %499 = load i32, i32* %21, align 4
  %500 = sext i32 %499 to i64
  %501 = getelementptr inbounds i16, i16* %498, i64 %500
  %502 = load i16, i16* %501, align 2
  %503 = sext i16 %502 to i32
  %504 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %49, align 8
  %505 = call double @exp_E_MLstem(i32 noundef %482, i32 noundef %493, i32 noundef %503, %struct.vrna_exp_param_s* noundef %504)
  %506 = load double, double* %38, align 8
  %507 = fmul double %506, %505
  store double %507, double* %38, align 8
  br label %508

508:                                              ; preds = %456
  %509 = load i32, i32* %18, align 4
  %510 = add i32 %509, 1
  store i32 %510, i32* %18, align 4
  br label %452, !llvm.loop !55

511:                                              ; preds = %452
  %512 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %513 = icmp ne %struct.vrna_sc_s** %512, null
  br i1 %513, label %514, label %566

514:                                              ; preds = %511
  store i32 0, i32* %18, align 4
  br label %515

515:                                              ; preds = %562, %514
  %516 = load i32, i32* %18, align 4
  %517 = load i32, i32* %19, align 4
  %518 = icmp ult i32 %516, %517
  br i1 %518, label %519, label %565

519:                                              ; preds = %515
  %520 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %521 = load i32, i32* %18, align 4
  %522 = zext i32 %521 to i64
  %523 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %520, i64 %522
  %524 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %523, align 8
  %525 = icmp ne %struct.vrna_sc_s* %524, null
  br i1 %525, label %526, label %561

526:                                              ; preds = %519
  %527 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %528 = load i32, i32* %18, align 4
  %529 = zext i32 %528 to i64
  %530 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %527, i64 %529
  %531 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %530, align 8
  %532 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %531, i32 0, i32 7
  %533 = bitcast %union.anon.11* %532 to %struct.anon.12*
  %534 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %533, i32 0, i32 1
  %535 = load double*, double** %534, align 8
  %536 = icmp ne double* %535, null
  br i1 %536, label %537, label %560

537:                                              ; preds = %526
  %538 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %539 = load i32, i32* %18, align 4
  %540 = zext i32 %539 to i64
  %541 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %538, i64 %540
  %542 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %541, align 8
  %543 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %542, i32 0, i32 7
  %544 = bitcast %union.anon.11* %543 to %struct.anon.12*
  %545 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %544, i32 0, i32 1
  %546 = load double*, double** %545, align 8
  %547 = load i32*, i32** %31, align 8
  %548 = load i32, i32* %8, align 4
  %549 = add nsw i32 %548, 1
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds i32, i32* %547, i64 %550
  %552 = load i32, i32* %551, align 4
  %553 = load i32, i32* %21, align 4
  %554 = add nsw i32 %552, %553
  %555 = sext i32 %554 to i64
  %556 = getelementptr inbounds double, double* %546, i64 %555
  %557 = load double, double* %556, align 8
  %558 = load double, double* %38, align 8
  %559 = fmul double %558, %557
  store double %559, double* %38, align 8
  br label %560

560:                                              ; preds = %537, %526
  br label %561

561:                                              ; preds = %560, %519
  br label %562

562:                                              ; preds = %561
  %563 = load i32, i32* %18, align 4
  %564 = add i32 %563, 1
  store i32 %564, i32* %18, align 4
  br label %515, !llvm.loop !56

565:                                              ; preds = %515
  br label %566

566:                                              ; preds = %565, %511
  br label %567

567:                                              ; preds = %566, %415
  br label %568

568:                                              ; preds = %567, %205
  %569 = load double, double* %45, align 8
  %570 = load i32, i32* %19, align 4
  %571 = uitofp i32 %570 to double
  %572 = call double @pow(double noundef %569, double noundef %571) #5
  %573 = load double, double* %37, align 8
  %574 = fmul double %573, %572
  store double %574, double* %37, align 8
  %575 = load double, double* %37, align 8
  %576 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %577 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %576, i32 0, i32 2
  %578 = load double*, double** %577, align 8
  %579 = load i32, i32* %21, align 4
  %580 = sext i32 %579 to i64
  %581 = getelementptr inbounds double, double* %578, i64 %580
  store double %575, double* %581, align 8
  %582 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %51, align 8
  %583 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %582, i32 0, i32 7
  %584 = load i32*, i32** %583, align 8
  %585 = load i32, i32* %8, align 4
  %586 = add nsw i32 %585, 1
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds i32, i32* %584, i64 %587
  %589 = load i32, i32* %588, align 4
  %590 = icmp ne i32 %589, 0
  br i1 %590, label %591, label %667

591:                                              ; preds = %568
  %592 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %593 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %592, i32 0, i32 1
  %594 = load double*, double** %593, align 8
  %595 = load i32, i32* %21, align 4
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds double, double* %594, i64 %596
  %598 = load double, double* %597, align 8
  %599 = load double*, double** %44, align 8
  %600 = getelementptr inbounds double, double* %599, i64 1
  %601 = load double, double* %600, align 8
  %602 = fmul double %598, %601
  store double %602, double* %35, align 8
  %603 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %604 = icmp ne %struct.vrna_sc_s** %603, null
  br i1 %604, label %605, label %657

605:                                              ; preds = %591
  store i32 0, i32* %18, align 4
  br label %606

606:                                              ; preds = %653, %605
  %607 = load i32, i32* %18, align 4
  %608 = load i32, i32* %19, align 4
  %609 = icmp ult i32 %607, %608
  br i1 %609, label %610, label %656

610:                                              ; preds = %606
  %611 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %612 = load i32, i32* %18, align 4
  %613 = zext i32 %612 to i64
  %614 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %611, i64 %613
  %615 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %614, align 8
  %616 = icmp ne %struct.vrna_sc_s* %615, null
  br i1 %616, label %617, label %652

617:                                              ; preds = %610
  %618 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %619 = load i32, i32* %18, align 4
  %620 = zext i32 %619 to i64
  %621 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %618, i64 %620
  %622 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %621, align 8
  %623 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %622, i32 0, i32 4
  %624 = load double**, double*** %623, align 8
  %625 = icmp ne double** %624, null
  br i1 %625, label %626, label %651

626:                                              ; preds = %617
  %627 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %628 = load i32, i32* %18, align 4
  %629 = zext i32 %628 to i64
  %630 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %627, i64 %629
  %631 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %630, align 8
  %632 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %631, i32 0, i32 4
  %633 = load double**, double*** %632, align 8
  %634 = load i32**, i32*** %17, align 8
  %635 = load i32, i32* %18, align 4
  %636 = zext i32 %635 to i64
  %637 = getelementptr inbounds i32*, i32** %634, i64 %636
  %638 = load i32*, i32** %637, align 8
  %639 = load i32, i32* %8, align 4
  %640 = add nsw i32 %639, 1
  %641 = sext i32 %640 to i64
  %642 = getelementptr inbounds i32, i32* %638, i64 %641
  %643 = load i32, i32* %642, align 4
  %644 = zext i32 %643 to i64
  %645 = getelementptr inbounds double*, double** %633, i64 %644
  %646 = load double*, double** %645, align 8
  %647 = getelementptr inbounds double, double* %646, i64 1
  %648 = load double, double* %647, align 8
  %649 = load double, double* %35, align 8
  %650 = fmul double %649, %648
  store double %650, double* %35, align 8
  br label %651

651:                                              ; preds = %626, %617
  br label %652

652:                                              ; preds = %651, %610
  br label %653

653:                                              ; preds = %652
  %654 = load i32, i32* %18, align 4
  %655 = add i32 %654, 1
  store i32 %655, i32* %18, align 4
  br label %606, !llvm.loop !57

656:                                              ; preds = %606
  br label %657

657:                                              ; preds = %656, %591
  %658 = load double, double* %35, align 8
  %659 = load double, double* %38, align 8
  %660 = fadd double %658, %659
  %661 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %662 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %661, i32 0, i32 0
  %663 = load double*, double** %662, align 8
  %664 = load i32, i32* %21, align 4
  %665 = sext i32 %664 to i64
  %666 = getelementptr inbounds double, double* %663, i64 %665
  store double %660, double* %666, align 8
  br label %675

667:                                              ; preds = %568
  %668 = load double, double* %38, align 8
  %669 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %670 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %669, i32 0, i32 0
  %671 = load double*, double** %670, align 8
  %672 = load i32, i32* %21, align 4
  %673 = sext i32 %672 to i64
  %674 = getelementptr inbounds double, double* %671, i64 %673
  store double %668, double* %674, align 8
  br label %675

675:                                              ; preds = %667, %657
  %676 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %51, align 8
  %677 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %676, i32 0, i32 7
  %678 = load i32*, i32** %677, align 8
  %679 = load i32, i32* %21, align 4
  %680 = sext i32 %679 to i64
  %681 = getelementptr inbounds i32, i32* %678, i64 %680
  %682 = load i32, i32* %681, align 4
  %683 = icmp ne i32 %682, 0
  br i1 %683, label %684, label %753

684:                                              ; preds = %675
  %685 = load double, double* %36, align 8
  %686 = load double*, double** %44, align 8
  %687 = getelementptr inbounds double, double* %686, i64 1
  %688 = load double, double* %687, align 8
  %689 = fmul double %685, %688
  store double %689, double* %35, align 8
  %690 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %691 = icmp ne %struct.vrna_sc_s** %690, null
  br i1 %691, label %692, label %743

692:                                              ; preds = %684
  store i32 0, i32* %18, align 4
  br label %693

693:                                              ; preds = %739, %692
  %694 = load i32, i32* %18, align 4
  %695 = load i32, i32* %19, align 4
  %696 = icmp ult i32 %694, %695
  br i1 %696, label %697, label %742

697:                                              ; preds = %693
  %698 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %699 = load i32, i32* %18, align 4
  %700 = zext i32 %699 to i64
  %701 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %698, i64 %700
  %702 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %701, align 8
  %703 = icmp ne %struct.vrna_sc_s* %702, null
  br i1 %703, label %704, label %738

704:                                              ; preds = %697
  %705 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %706 = load i32, i32* %18, align 4
  %707 = zext i32 %706 to i64
  %708 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %705, i64 %707
  %709 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %708, align 8
  %710 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %709, i32 0, i32 4
  %711 = load double**, double*** %710, align 8
  %712 = icmp ne double** %711, null
  br i1 %712, label %713, label %737

713:                                              ; preds = %704
  %714 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %52, align 8
  %715 = load i32, i32* %18, align 4
  %716 = zext i32 %715 to i64
  %717 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %714, i64 %716
  %718 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %717, align 8
  %719 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %718, i32 0, i32 4
  %720 = load double**, double*** %719, align 8
  %721 = load i32**, i32*** %17, align 8
  %722 = load i32, i32* %18, align 4
  %723 = zext i32 %722 to i64
  %724 = getelementptr inbounds i32*, i32** %721, i64 %723
  %725 = load i32*, i32** %724, align 8
  %726 = load i32, i32* %21, align 4
  %727 = sext i32 %726 to i64
  %728 = getelementptr inbounds i32, i32* %725, i64 %727
  %729 = load i32, i32* %728, align 4
  %730 = zext i32 %729 to i64
  %731 = getelementptr inbounds double*, double** %720, i64 %730
  %732 = load double*, double** %731, align 8
  %733 = getelementptr inbounds double, double* %732, i64 1
  %734 = load double, double* %733, align 8
  %735 = load double, double* %35, align 8
  %736 = fmul double %735, %734
  store double %736, double* %35, align 8
  br label %737

737:                                              ; preds = %713, %704
  br label %738

738:                                              ; preds = %737, %697
  br label %739

739:                                              ; preds = %738
  %740 = load i32, i32* %18, align 4
  %741 = add i32 %740, 1
  store i32 %741, i32* %18, align 4
  br label %693, !llvm.loop !58

742:                                              ; preds = %693
  br label %743

743:                                              ; preds = %742, %684
  %744 = load double, double* %35, align 8
  %745 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %746 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %745, i32 0, i32 2
  %747 = load double*, double** %746, align 8
  %748 = load i32, i32* %21, align 4
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds double, double* %747, i64 %749
  %751 = load double, double* %750, align 8
  %752 = fadd double %744, %751
  store double %752, double* %36, align 8
  br label %761

753:                                              ; preds = %675
  %754 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %755 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %754, i32 0, i32 2
  %756 = load double*, double** %755, align 8
  %757 = load i32, i32* %21, align 4
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds double, double* %756, i64 %758
  %760 = load double, double* %759, align 8
  store double %760, double* %36, align 8
  br label %761

761:                                              ; preds = %753, %743
  %762 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %763 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %762, i32 0, i32 2
  %764 = load double*, double** %763, align 8
  %765 = load i32, i32* %21, align 4
  %766 = sext i32 %765 to i64
  %767 = getelementptr inbounds double, double* %764, i64 %766
  %768 = load double, double* %767, align 8
  %769 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %770 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %769, i32 0, i32 0
  %771 = load double*, double** %770, align 8
  %772 = load i32, i32* %21, align 4
  %773 = sext i32 %772 to i64
  %774 = getelementptr inbounds double, double* %771, i64 %773
  %775 = load double, double* %774, align 8
  %776 = fadd double %768, %775
  %777 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %778 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %777, i32 0, i32 2
  %779 = load double*, double** %778, align 8
  %780 = load i32, i32* %21, align 4
  %781 = sext i32 %780 to i64
  %782 = getelementptr inbounds double, double* %779, i64 %781
  store double %776, double* %782, align 8
  %783 = load i32, i32* %33, align 4
  %784 = icmp ne i32 %783, 0
  br i1 %784, label %785, label %801

785:                                              ; preds = %761
  %786 = load double*, double** %39, align 8
  %787 = load i32, i32* %26, align 4
  %788 = sext i32 %787 to i64
  %789 = getelementptr inbounds double, double* %786, i64 %788
  %790 = load double, double* %789, align 8
  %791 = fcmp oeq double %790, 0.000000e+00
  br i1 %791, label %792, label %800

792:                                              ; preds = %785
  %793 = load double*, double** %42, align 8
  %794 = load i32, i32* %26, align 4
  %795 = sext i32 %794 to i64
  %796 = getelementptr inbounds double, double* %793, i64 %795
  %797 = load double, double* %796, align 8
  %798 = fcmp oeq double %797, 0.000000e+00
  br i1 %798, label %799, label %800

799:                                              ; preds = %792
  br label %1047

800:                                              ; preds = %792, %785
  br label %810

801:                                              ; preds = %761
  %802 = load double*, double** %39, align 8
  %803 = load i32, i32* %26, align 4
  %804 = sext i32 %803 to i64
  %805 = getelementptr inbounds double, double* %802, i64 %804
  %806 = load double, double* %805, align 8
  %807 = fcmp oeq double %806, 0.000000e+00
  br i1 %807, label %808, label %809

808:                                              ; preds = %801
  br label %1047

809:                                              ; preds = %801
  br label %810

810:                                              ; preds = %809, %800
  %811 = load double, double* %36, align 8
  store double %811, double* %34, align 8
  %812 = load i32*, i32** %20, align 8
  %813 = load i32, i32* %23, align 4
  %814 = sext i32 %813 to i64
  %815 = getelementptr inbounds i32, i32* %812, i64 %814
  %816 = load i32, i32* %815, align 4
  %817 = load i32*, i32** %20, align 8
  %818 = load i32, i32* %23, align 4
  %819 = sub nsw i32 %818, 1
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds i32, i32* %817, i64 %820
  %822 = load i32, i32* %821, align 4
  %823 = icmp eq i32 %816, %822
  br i1 %823, label %824, label %871

824:                                              ; preds = %810
  store i32 1, i32* %21, align 4
  br label %825

825:                                              ; preds = %867, %824
  %826 = load i32, i32* %21, align 4
  %827 = load i32, i32* %23, align 4
  %828 = sub nsw i32 %827, 2
  %829 = icmp sle i32 %826, %828
  br i1 %829, label %830, label %870

830:                                              ; preds = %825
  %831 = load i32*, i32** %20, align 8
  %832 = load i32, i32* %21, align 4
  %833 = add nsw i32 %832, 1
  %834 = sext i32 %833 to i64
  %835 = getelementptr inbounds i32, i32* %831, i64 %834
  %836 = load i32, i32* %835, align 4
  %837 = load i32*, i32** %20, align 8
  %838 = load i32, i32* %21, align 4
  %839 = sext i32 %838 to i64
  %840 = getelementptr inbounds i32, i32* %837, i64 %839
  %841 = load i32, i32* %840, align 4
  %842 = icmp eq i32 %836, %841
  br i1 %842, label %843, label %866

843:                                              ; preds = %830
  %844 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  %845 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %844, i32 0, i32 2
  %846 = load double*, double** %845, align 8
  %847 = load i32, i32* %21, align 4
  %848 = sext i32 %847 to i64
  %849 = getelementptr inbounds double, double* %846, i64 %848
  %850 = load double, double* %849, align 8
  %851 = load double*, double** %41, align 8
  %852 = load i32*, i32** %30, align 8
  %853 = load i32, i32* %21, align 4
  %854 = add nsw i32 %853, 1
  %855 = sext i32 %854 to i64
  %856 = getelementptr inbounds i32, i32* %852, i64 %855
  %857 = load i32, i32* %856, align 4
  %858 = load i32, i32* %23, align 4
  %859 = sub nsw i32 %858, 1
  %860 = sub nsw i32 %857, %859
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds double, double* %851, i64 %861
  %863 = load double, double* %862, align 8
  %864 = load double, double* %34, align 8
  %865 = call double @llvm.fmuladd.f64(double %850, double %863, double %864)
  store double %865, double* %34, align 8
  br label %866

866:                                              ; preds = %843, %830
  br label %867

867:                                              ; preds = %866
  %868 = load i32, i32* %21, align 4
  %869 = add nsw i32 %868, 1
  store i32 %869, i32* %21, align 4
  br label %825, !llvm.loop !59

870:                                              ; preds = %825
  br label %871

871:                                              ; preds = %870, %810
  %872 = load i32, i32* %33, align 4
  %873 = icmp ne i32 %872, 0
  br i1 %873, label %874, label %891

874:                                              ; preds = %871
  %875 = load double*, double** %39, align 8
  %876 = load i32, i32* %26, align 4
  %877 = sext i32 %876 to i64
  %878 = getelementptr inbounds double, double* %875, i64 %877
  %879 = load double, double* %878, align 8
  %880 = fcmp oeq double %879, 0.000000e+00
  br i1 %880, label %881, label %891

881:                                              ; preds = %874
  %882 = load double*, double** %42, align 8
  %883 = load i32, i32* %26, align 4
  %884 = sext i32 %883 to i64
  %885 = getelementptr inbounds double, double* %882, i64 %884
  %886 = load double, double* %885, align 8
  %887 = load double, double* %46, align 8
  %888 = fmul double %886, %887
  %889 = load double, double* %34, align 8
  %890 = fmul double %889, %888
  store double %890, double* %34, align 8
  br label %968

891:                                              ; preds = %874, %871
  %892 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %51, align 8
  %893 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %892, i32 0, i32 3
  %894 = bitcast %union.anon* %893 to %struct.anon*
  %895 = getelementptr inbounds %struct.anon, %struct.anon* %894, i32 0, i32 0
  %896 = load i8*, i8** %895, align 8
  %897 = load i32, i32* %8, align 4
  %898 = load i32, i32* %24, align 4
  %899 = mul nsw i32 %897, %898
  %900 = load i32, i32* %23, align 4
  %901 = add nsw i32 %899, %900
  %902 = sext i32 %901 to i64
  %903 = getelementptr inbounds i8, i8* %896, i64 %902
  %904 = load i8, i8* %903, align 1
  %905 = zext i8 %904 to i32
  %906 = and i32 %905, 32
  %907 = icmp ne i32 %906, 0
  br i1 %907, label %908, label %967

908:                                              ; preds = %891
  store i32 0, i32* %18, align 4
  br label %909

909:                                              ; preds = %963, %908
  %910 = load i32, i32* %18, align 4
  %911 = load i32, i32* %19, align 4
  %912 = icmp ult i32 %910, %911
  br i1 %912, label %913, label %966

913:                                              ; preds = %909
  %914 = load i16**, i16*** %14, align 8
  %915 = load i32, i32* %18, align 4
  %916 = zext i32 %915 to i64
  %917 = getelementptr inbounds i16*, i16** %914, i64 %916
  %918 = load i16*, i16** %917, align 8
  %919 = load i32, i32* %23, align 4
  %920 = sext i32 %919 to i64
  %921 = getelementptr inbounds i16, i16* %918, i64 %920
  %922 = load i16, i16* %921, align 2
  %923 = sext i16 %922 to i32
  %924 = load i16**, i16*** %14, align 8
  %925 = load i32, i32* %18, align 4
  %926 = zext i32 %925 to i64
  %927 = getelementptr inbounds i16*, i16** %924, i64 %926
  %928 = load i16*, i16** %927, align 8
  %929 = load i32, i32* %8, align 4
  %930 = sext i32 %929 to i64
  %931 = getelementptr inbounds i16, i16* %928, i64 %930
  %932 = load i16, i16* %931, align 2
  %933 = sext i16 %932 to i32
  %934 = load %struct.vrna_md_s*, %struct.vrna_md_s** %50, align 8
  %935 = call i32 @vrna_get_ptype_md(i32 noundef %923, i32 noundef %933, %struct.vrna_md_s* noundef %934)
  %936 = trunc i32 %935 to i8
  store i8 %936, i8* %13, align 1
  %937 = load i8, i8* %13, align 1
  %938 = zext i8 %937 to i32
  %939 = load i16**, i16*** %15, align 8
  %940 = load i32, i32* %18, align 4
  %941 = zext i32 %940 to i64
  %942 = getelementptr inbounds i16*, i16** %939, i64 %941
  %943 = load i16*, i16** %942, align 8
  %944 = load i32, i32* %23, align 4
  %945 = sext i32 %944 to i64
  %946 = getelementptr inbounds i16, i16* %943, i64 %945
  %947 = load i16, i16* %946, align 2
  %948 = sext i16 %947 to i32
  %949 = load i16**, i16*** %16, align 8
  %950 = load i32, i32* %18, align 4
  %951 = zext i32 %950 to i64
  %952 = getelementptr inbounds i16*, i16** %949, i64 %951
  %953 = load i16*, i16** %952, align 8
  %954 = load i32, i32* %8, align 4
  %955 = sext i32 %954 to i64
  %956 = getelementptr inbounds i16, i16* %953, i64 %955
  %957 = load i16, i16* %956, align 2
  %958 = sext i16 %957 to i32
  %959 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %49, align 8
  %960 = call double @exp_E_MLstem(i32 noundef %938, i32 noundef %948, i32 noundef %958, %struct.vrna_exp_param_s* noundef %959)
  %961 = load double, double* %34, align 8
  %962 = fmul double %961, %960
  store double %962, double* %34, align 8
  br label %963

963:                                              ; preds = %913
  %964 = load i32, i32* %18, align 4
  %965 = add i32 %964, 1
  store i32 %965, i32* %18, align 4
  br label %909, !llvm.loop !60

966:                                              ; preds = %909
  br label %967

967:                                              ; preds = %966, %891
  br label %968

968:                                              ; preds = %967, %881
  %969 = load double, double* %34, align 8
  %970 = load double*, double** %43, align 8
  %971 = getelementptr inbounds double, double* %970, i64 2
  %972 = load double, double* %971, align 8
  %973 = fmul double %969, %972
  %974 = load i32*, i32** %32, align 8
  %975 = load i32*, i32** %31, align 8
  %976 = load i32, i32* %8, align 4
  %977 = sext i32 %976 to i64
  %978 = getelementptr inbounds i32, i32* %975, i64 %977
  %979 = load i32, i32* %978, align 4
  %980 = load i32, i32* %23, align 4
  %981 = add nsw i32 %979, %980
  %982 = sext i32 %981 to i64
  %983 = getelementptr inbounds i32, i32* %974, i64 %982
  %984 = load i32, i32* %983, align 4
  %985 = sitofp i32 %984 to double
  %986 = load double, double* %48, align 8
  %987 = fdiv double %985, %986
  %988 = call double @exp(double noundef %987) #5
  %989 = load double*, double** %40, align 8
  %990 = load i32, i32* %26, align 4
  %991 = sext i32 %990 to i64
  %992 = getelementptr inbounds double, double* %989, i64 %991
  %993 = load double, double* %992, align 8
  %994 = call double @llvm.fmuladd.f64(double %973, double %988, double %993)
  store double %994, double* %992, align 8
  %995 = load double*, double** %40, align 8
  %996 = load i32, i32* %26, align 4
  %997 = sext i32 %996 to i64
  %998 = getelementptr inbounds double, double* %995, i64 %997
  %999 = load double, double* %998, align 8
  %1000 = load double*, double** %10, align 8
  %1001 = load double, double* %1000, align 8
  %1002 = fcmp ogt double %999, %1001
  br i1 %1002, label %1003, label %1029

1003:                                             ; preds = %968
  %1004 = load double*, double** %40, align 8
  %1005 = load i32, i32* %26, align 4
  %1006 = sext i32 %1005 to i64
  %1007 = getelementptr inbounds double, double* %1004, i64 %1006
  %1008 = load double, double* %1007, align 8
  %1009 = load double*, double** %10, align 8
  store double %1008, double* %1009, align 8
  %1010 = load double*, double** %10, align 8
  %1011 = load double, double* %1010, align 8
  %1012 = load double, double* %47, align 8
  %1013 = fdiv double %1012, 1.000000e+01
  %1014 = fcmp ogt double %1011, %1013
  br i1 %1014, label %1015, label %1028

1015:                                             ; preds = %1003
  %1016 = load i32, i32* %23, align 4
  %1017 = load i32, i32* %8, align 4
  %1018 = load double*, double** %40, align 8
  %1019 = load i32, i32* %26, align 4
  %1020 = sext i32 %1019 to i64
  %1021 = getelementptr inbounds double, double* %1018, i64 %1020
  %1022 = load double, double* %1021, align 8
  %1023 = load double*, double** %39, align 8
  %1024 = load i32, i32* %26, align 4
  %1025 = sext i32 %1024 to i64
  %1026 = getelementptr inbounds double, double* %1023, i64 %1025
  %1027 = load double, double* %1026, align 8
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([34 x i8], [34 x i8]* @.str.11, i64 0, i64 0), i32 noundef %1016, i32 noundef %1017, double noundef %1022, double noundef %1027)
  br label %1028

1028:                                             ; preds = %1015, %1003
  br label %1029

1029:                                             ; preds = %1028, %968
  %1030 = load double*, double** %40, align 8
  %1031 = load i32, i32* %26, align 4
  %1032 = sext i32 %1031 to i64
  %1033 = getelementptr inbounds double, double* %1030, i64 %1032
  %1034 = load double, double* %1033, align 8
  %1035 = load double, double* %47, align 8
  %1036 = fcmp oge double %1034, %1035
  br i1 %1036, label %1037, label %1045

1037:                                             ; preds = %1029
  %1038 = load i32*, i32** %11, align 8
  %1039 = load i32, i32* %1038, align 4
  %1040 = add nsw i32 %1039, 1
  store i32 %1040, i32* %1038, align 4
  %1041 = load double*, double** %40, align 8
  %1042 = load i32, i32* %26, align 4
  %1043 = sext i32 %1042 to i64
  %1044 = getelementptr inbounds double, double* %1041, i64 %1043
  store double 0x47EFFFFFE0000000, double* %1044, align 8
  br label %1045

1045:                                             ; preds = %1037, %1029
  %1046 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  call void @rotate_ml_helper_arrays_inner(%struct.helper_arrays* noundef %1046)
  br label %1047

1047:                                             ; preds = %1045, %808, %799
  %1048 = load i32, i32* %23, align 4
  %1049 = add nsw i32 %1048, 1
  store i32 %1049, i32* %23, align 4
  br label %199, !llvm.loop !61

1050:                                             ; preds = %199
  br label %1051

1051:                                             ; preds = %1050, %197
  %1052 = load %struct.helper_arrays*, %struct.helper_arrays** %9, align 8
  call void @rotate_ml_helper_arrays_outer(%struct.helper_arrays* noundef %1052)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @bppm_circ(%struct.vrna_fc_s* noundef %0, %struct.constraints_helper* noundef %1) #0 {
  %3 = alloca %struct.vrna_fc_s*, align 8
  %4 = alloca %struct.constraints_helper*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8, align 1
  %8 = alloca i16*, align 8
  %9 = alloca i16*, align 8
  %10 = alloca i16**, align 8
  %11 = alloca i16**, align 8
  %12 = alloca i16**, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32*, align 8
  %18 = alloca i32**, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i32*, align 8
  %27 = alloca i32*, align 8
  %28 = alloca i32, align 4
  %29 = alloca double, align 8
  %30 = alloca double, align 8
  %31 = alloca double, align 8
  %32 = alloca double*, align 8
  %33 = alloca double*, align 8
  %34 = alloca double*, align 8
  %35 = alloca double*, align 8
  %36 = alloca double*, align 8
  %37 = alloca double*, align 8
  %38 = alloca double, align 8
  %39 = alloca %struct.vrna_hc_s*, align 8
  %40 = alloca %struct.vrna_exp_param_s*, align 8
  %41 = alloca %struct.vrna_mx_pf_s*, align 8
  %42 = alloca %struct.vrna_md_s*, align 8
  %43 = alloca %struct.hc_mb_def_dat*, align 8
  %44 = alloca i8 (i32, i32, i32, i32, i8, i8*)*, align 8
  %45 = alloca %struct.sc_int_exp_dat*, align 8
  %46 = alloca %struct.sc_mb_exp_dat*, align 8
  %47 = alloca double (%struct.vrna_fc_s*, i32, i32)*, align 8
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca i32, align 4
  %53 = alloca i32, align 4
  %54 = alloca i32, align 4
  %55 = alloca i32, align 4
  %56 = alloca i32, align 4
  %57 = alloca i32, align 4
  %58 = alloca i32, align 4
  %59 = alloca i32, align 4
  %60 = alloca i32, align 4
  %61 = alloca i32, align 4
  %62 = alloca double, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %3, align 8
  store %struct.constraints_helper* %1, %struct.constraints_helper** %4, align 8
  %63 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %64 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %63, i32 0, i32 1
  %65 = load i32, i32* %64, align 4
  store i32 %65, i32* %19, align 4
  %66 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %67 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %66, i32 0, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %2
  br label %77

71:                                               ; preds = %2
  %72 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %73 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %72, i32 0, i32 24
  %74 = bitcast %union.anon.9* %73 to %struct.anon.14*
  %75 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %74, i32 0, i32 1
  %76 = load i32, i32* %75, align 8
  br label %77

77:                                               ; preds = %71, %70
  %78 = phi i32 [ 1, %70 ], [ %76, %71 ]
  store i32 %78, i32* %14, align 4
  %79 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %80 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %79, i32 0, i32 0
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %77
  br label %90

84:                                               ; preds = %77
  %85 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %86 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %85, i32 0, i32 24
  %87 = bitcast %union.anon.9* %86 to %struct.anon.14*
  %88 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %87, i32 0, i32 4
  %89 = load i16**, i16*** %88, align 8
  br label %90

90:                                               ; preds = %84, %83
  %91 = phi i16** [ null, %83 ], [ %89, %84 ]
  store i16** %91, i16*** %10, align 8
  %92 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %93 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %92, i32 0, i32 0
  %94 = load i32, i32* %93, align 8
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %90
  br label %103

97:                                               ; preds = %90
  %98 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %99 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %98, i32 0, i32 24
  %100 = bitcast %union.anon.9* %99 to %struct.anon.14*
  %101 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %100, i32 0, i32 5
  %102 = load i16**, i16*** %101, align 8
  br label %103

103:                                              ; preds = %97, %96
  %104 = phi i16** [ null, %96 ], [ %102, %97 ]
  store i16** %104, i16*** %11, align 8
  %105 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %106 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %105, i32 0, i32 0
  %107 = load i32, i32* %106, align 8
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %103
  br label %116

110:                                              ; preds = %103
  %111 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %112 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %111, i32 0, i32 24
  %113 = bitcast %union.anon.9* %112 to %struct.anon.14*
  %114 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %113, i32 0, i32 6
  %115 = load i16**, i16*** %114, align 8
  br label %116

116:                                              ; preds = %110, %109
  %117 = phi i16** [ null, %109 ], [ %115, %110 ]
  store i16** %117, i16*** %12, align 8
  %118 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %119 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %118, i32 0, i32 0
  %120 = load i32, i32* %119, align 8
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %116
  br label %129

123:                                              ; preds = %116
  %124 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %125 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %124, i32 0, i32 24
  %126 = bitcast %union.anon.9* %125 to %struct.anon.14*
  %127 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %126, i32 0, i32 8
  %128 = load i32**, i32*** %127, align 8
  br label %129

129:                                              ; preds = %123, %122
  %130 = phi i32** [ null, %122 ], [ %128, %123 ]
  store i32** %130, i32*** %18, align 8
  %131 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %132 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %131, i32 0, i32 15
  %133 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %132, align 8
  store %struct.vrna_exp_param_s* %133, %struct.vrna_exp_param_s** %40, align 8
  %134 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %40, align 8
  %135 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %134, i32 0, i32 40
  store %struct.vrna_md_s* %135, %struct.vrna_md_s** %42, align 8
  %136 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %137 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %136, i32 0, i32 0
  %138 = load i32, i32* %137, align 8
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %146

140:                                              ; preds = %129
  %141 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %142 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %141, i32 0, i32 24
  %143 = bitcast %union.anon.9* %142 to %struct.anon.10*
  %144 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %143, i32 0, i32 2
  %145 = load i16*, i16** %144, align 8
  br label %147

146:                                              ; preds = %129
  br label %147

147:                                              ; preds = %146, %140
  %148 = phi i16* [ %145, %140 ], [ null, %146 ]
  store i16* %148, i16** %8, align 8
  %149 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %150 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %149, i32 0, i32 0
  %151 = load i32, i32* %150, align 8
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %159

153:                                              ; preds = %147
  %154 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %155 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %154, i32 0, i32 24
  %156 = bitcast %union.anon.9* %155 to %struct.anon.10*
  %157 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %156, i32 0, i32 1
  %158 = load i16*, i16** %157, align 8
  br label %160

159:                                              ; preds = %147
  br label %160

160:                                              ; preds = %159, %153
  %161 = phi i16* [ %158, %153 ], [ null, %159 ]
  store i16* %161, i16** %9, align 8
  %162 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %163 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %162, i32 0, i32 16
  %164 = load i32*, i32** %163, align 8
  store i32* %164, i32** %26, align 8
  %165 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %166 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %165, i32 0, i32 17
  %167 = load i32*, i32** %166, align 8
  store i32* %167, i32** %27, align 8
  %168 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %169 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %168, i32 0, i32 0
  %170 = load i32, i32* %169, align 8
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %178

172:                                              ; preds = %160
  %173 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %174 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %173, i32 0, i32 24
  %175 = bitcast %union.anon.9* %174 to %struct.anon.10*
  %176 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %175, i32 0, i32 3
  %177 = load i8*, i8** %176, align 8
  br label %179

178:                                              ; preds = %160
  br label %179

179:                                              ; preds = %178, %172
  %180 = phi i8* [ %177, %172 ], [ null, %178 ]
  store i8* %180, i8** %5, align 8
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  store i32* null, i32** %17, align 8
  %181 = load %struct.vrna_md_s*, %struct.vrna_md_s** %42, align 8
  %182 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %181, i32 0, i32 18
  %183 = load i32, i32* %182, align 4
  store i32 %183, i32* %28, align 4
  %184 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %185 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %184, i32 0, i32 11
  %186 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %185, align 8
  store %struct.vrna_hc_s* %186, %struct.vrna_hc_s** %39, align 8
  %187 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %188 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %187, i32 0, i32 13
  %189 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %188, align 8
  store %struct.vrna_mx_pf_s* %189, %struct.vrna_mx_pf_s** %41, align 8
  %190 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %41, align 8
  %191 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %190, i32 0, i32 4
  %192 = bitcast %union.anon.5* %191 to %struct.anon.6*
  %193 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %192, i32 0, i32 1
  %194 = load double*, double** %193, align 8
  store double* %194, double** %32, align 8
  %195 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %41, align 8
  %196 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %195, i32 0, i32 4
  %197 = bitcast %union.anon.5* %196 to %struct.anon.6*
  %198 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %197, i32 0, i32 2
  %199 = load double*, double** %198, align 8
  store double* %199, double** %33, align 8
  %200 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %41, align 8
  %201 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %200, i32 0, i32 4
  %202 = bitcast %union.anon.5* %201 to %struct.anon.6*
  %203 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %202, i32 0, i32 3
  %204 = load double*, double** %203, align 8
  store double* %204, double** %34, align 8
  %205 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %41, align 8
  %206 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %205, i32 0, i32 4
  %207 = bitcast %union.anon.5* %206 to %struct.anon.6*
  %208 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %207, i32 0, i32 4
  %209 = load double*, double** %208, align 8
  store double* %209, double** %35, align 8
  %210 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %41, align 8
  %211 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %210, i32 0, i32 2
  %212 = load double*, double** %211, align 8
  store double* %212, double** %36, align 8
  %213 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %41, align 8
  %214 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %213, i32 0, i32 3
  %215 = load double*, double** %214, align 8
  store double* %215, double** %37, align 8
  %216 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %41, align 8
  %217 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %216, i32 0, i32 4
  %218 = bitcast %union.anon.5* %217 to %struct.anon.6*
  %219 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %218, i32 0, i32 8
  %220 = load double, double* %219, align 8
  store double %220, double* %38, align 8
  %221 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %39, align 8
  %222 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %221, i32 0, i32 3
  %223 = bitcast %union.anon* %222 to %struct.anon*
  %224 = getelementptr inbounds %struct.anon, %struct.anon* %223, i32 0, i32 0
  %225 = load i8*, i8** %224, align 8
  store i8* %225, i8** %6, align 8
  %226 = load %struct.constraints_helper*, %struct.constraints_helper** %4, align 8
  %227 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %226, i32 0, i32 6
  store %struct.hc_mb_def_dat* %227, %struct.hc_mb_def_dat** %43, align 8
  %228 = load %struct.constraints_helper*, %struct.constraints_helper** %4, align 8
  %229 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %228, i32 0, i32 7
  %230 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %229, align 8
  store i8 (i32, i32, i32, i32, i8, i8*)* %230, i8 (i32, i32, i32, i32, i8, i8*)** %44, align 8
  %231 = load %struct.constraints_helper*, %struct.constraints_helper** %4, align 8
  %232 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %231, i32 0, i32 10
  store %struct.sc_int_exp_dat* %232, %struct.sc_int_exp_dat** %45, align 8
  %233 = load %struct.constraints_helper*, %struct.constraints_helper** %4, align 8
  %234 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %233, i32 0, i32 11
  store %struct.sc_mb_exp_dat* %234, %struct.sc_mb_exp_dat** %46, align 8
  %235 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %40, align 8
  %236 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %235, i32 0, i32 20
  %237 = load double, double* %236, align 8
  store double %237, double* %31, align 8
  %238 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %40, align 8
  %239 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %238, i32 0, i32 40
  %240 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %239, i32 0, i32 25
  %241 = getelementptr inbounds [8 x i32], [8 x i32]* %240, i64 0, i64 0
  store i32* %241, i32** %25, align 8
  %242 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %243 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %242, i32 0, i32 0
  %244 = load i32, i32* %243, align 8
  switch i32 %244, label %253 [
    i32 0, label %245
    i32 1, label %246
  ]

245:                                              ; preds = %179
  store double (%struct.vrna_fc_s*, i32, i32)* @numerator_single, double (%struct.vrna_fc_s*, i32, i32)** %47, align 8
  store i32* null, i32** %17, align 8
  br label %254

246:                                              ; preds = %179
  store double (%struct.vrna_fc_s*, i32, i32)* @numerator_comparative, double (%struct.vrna_fc_s*, i32, i32)** %47, align 8
  %247 = load i32, i32* %14, align 4
  %248 = zext i32 %247 to i64
  %249 = mul i64 4, %248
  %250 = trunc i64 %249 to i32
  %251 = call i8* @vrna_alloc(i32 noundef %250)
  %252 = bitcast i8* %251 to i32*
  store i32* %252, i32** %17, align 8
  br label %254

253:                                              ; preds = %179
  store double (%struct.vrna_fc_s*, i32, i32)* null, double (%struct.vrna_fc_s*, i32, i32)** %47, align 8
  br label %254

254:                                              ; preds = %253, %246, %245
  store i32 1, i32* %20, align 4
  br label %255

255:                                              ; preds = %1707, %254
  %256 = load i32, i32* %20, align 4
  %257 = load i32, i32* %19, align 4
  %258 = icmp sle i32 %256, %257
  br i1 %258, label %259, label %1710

259:                                              ; preds = %255
  %260 = load i32, i32* %20, align 4
  store i32 %260, i32* %21, align 4
  br label %261

261:                                              ; preds = %288, %259
  %262 = load i32, i32* %21, align 4
  %263 = load i32, i32* %20, align 4
  %264 = load i32, i32* %28, align 4
  %265 = add nsw i32 %263, %264
  %266 = load i32, i32* %19, align 4
  %267 = icmp slt i32 %265, %266
  br i1 %267, label %268, label %272

268:                                              ; preds = %261
  %269 = load i32, i32* %20, align 4
  %270 = load i32, i32* %28, align 4
  %271 = add nsw i32 %269, %270
  br label %274

272:                                              ; preds = %261
  %273 = load i32, i32* %19, align 4
  br label %274

274:                                              ; preds = %272, %268
  %275 = phi i32 [ %271, %268 ], [ %273, %272 ]
  %276 = icmp sle i32 %262, %275
  br i1 %276, label %277, label %291

277:                                              ; preds = %274
  %278 = load double*, double** %35, align 8
  %279 = load i32*, i32** %26, align 8
  %280 = load i32, i32* %20, align 4
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds i32, i32* %279, i64 %281
  %283 = load i32, i32* %282, align 4
  %284 = load i32, i32* %21, align 4
  %285 = sub nsw i32 %283, %284
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds double, double* %278, i64 %286
  store double 0.000000e+00, double* %287, align 8
  br label %288

288:                                              ; preds = %277
  %289 = load i32, i32* %21, align 4
  %290 = add nsw i32 %289, 1
  store i32 %290, i32* %21, align 4
  br label %261, !llvm.loop !62

291:                                              ; preds = %274
  %292 = load i32, i32* %20, align 4
  %293 = load i32, i32* %28, align 4
  %294 = add nsw i32 %292, %293
  %295 = add nsw i32 %294, 1
  store i32 %295, i32* %21, align 4
  br label %296

296:                                              ; preds = %1703, %291
  %297 = load i32, i32* %21, align 4
  %298 = load i32, i32* %19, align 4
  %299 = icmp sle i32 %297, %298
  br i1 %299, label %300, label %1706

300:                                              ; preds = %296
  %301 = load i32*, i32** %26, align 8
  %302 = load i32, i32* %20, align 4
  %303 = sext i32 %302 to i64
  %304 = getelementptr inbounds i32, i32* %301, i64 %303
  %305 = load i32, i32* %304, align 4
  %306 = load i32, i32* %21, align 4
  %307 = sub nsw i32 %305, %306
  store i32 %307, i32* %24, align 4
  %308 = load double*, double** %32, align 8
  %309 = load i32, i32* %24, align 4
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds double, double* %308, i64 %310
  %312 = load double, double* %311, align 8
  %313 = fcmp ogt double %312, 0.000000e+00
  br i1 %313, label %314, label %1697

314:                                              ; preds = %300
  %315 = load double (%struct.vrna_fc_s*, i32, i32)*, double (%struct.vrna_fc_s*, i32, i32)** %47, align 8
  %316 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %317 = load i32, i32* %20, align 4
  %318 = load i32, i32* %21, align 4
  %319 = call double %315(%struct.vrna_fc_s* noundef %316, i32 noundef %317, i32 noundef %318)
  %320 = load double, double* %38, align 8
  %321 = fdiv double %319, %320
  %322 = load double*, double** %35, align 8
  %323 = load i32, i32* %24, align 4
  %324 = sext i32 %323 to i64
  %325 = getelementptr inbounds double, double* %322, i64 %324
  store double %321, double* %325, align 8
  %326 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %327 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %326, i32 0, i32 0
  %328 = load i32, i32* %327, align 8
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %330, label %359

330:                                              ; preds = %314
  %331 = load i16*, i16** %8, align 8
  %332 = load i32, i32* %20, align 4
  %333 = sext i32 %332 to i64
  %334 = getelementptr inbounds i16, i16* %331, i64 %333
  %335 = load i16, i16* %334, align 2
  %336 = sext i16 %335 to i32
  %337 = load i16*, i16** %8, align 8
  %338 = load i32, i32* %21, align 4
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds i16, i16* %337, i64 %339
  %341 = load i16, i16* %340, align 2
  %342 = sext i16 %341 to i32
  %343 = load %struct.vrna_md_s*, %struct.vrna_md_s** %42, align 8
  %344 = call i32 @vrna_get_ptype_md(i32 noundef %336, i32 noundef %342, %struct.vrna_md_s* noundef %343)
  store i32 %344, i32* %15, align 4
  %345 = load i16*, i16** %8, align 8
  %346 = load i32, i32* %21, align 4
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds i16, i16* %345, i64 %347
  %349 = load i16, i16* %348, align 2
  %350 = sext i16 %349 to i32
  %351 = load i16*, i16** %8, align 8
  %352 = load i32, i32* %20, align 4
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds i16, i16* %351, i64 %353
  %355 = load i16, i16* %354, align 2
  %356 = sext i16 %355 to i32
  %357 = load %struct.vrna_md_s*, %struct.vrna_md_s** %42, align 8
  %358 = call i32 @vrna_get_ptype_md(i32 noundef %350, i32 noundef %356, %struct.vrna_md_s* noundef %357)
  store i32 %358, i32* %16, align 4
  br label %395

359:                                              ; preds = %314
  store i32 0, i32* %13, align 4
  br label %360

360:                                              ; preds = %391, %359
  %361 = load i32, i32* %13, align 4
  %362 = load i32, i32* %14, align 4
  %363 = icmp ult i32 %361, %362
  br i1 %363, label %364, label %394

364:                                              ; preds = %360
  %365 = load i16**, i16*** %10, align 8
  %366 = load i32, i32* %13, align 4
  %367 = zext i32 %366 to i64
  %368 = getelementptr inbounds i16*, i16** %365, i64 %367
  %369 = load i16*, i16** %368, align 8
  %370 = load i32, i32* %21, align 4
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds i16, i16* %369, i64 %371
  %373 = load i16, i16* %372, align 2
  %374 = sext i16 %373 to i32
  %375 = load i16**, i16*** %10, align 8
  %376 = load i32, i32* %13, align 4
  %377 = zext i32 %376 to i64
  %378 = getelementptr inbounds i16*, i16** %375, i64 %377
  %379 = load i16*, i16** %378, align 8
  %380 = load i32, i32* %20, align 4
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds i16, i16* %379, i64 %381
  %383 = load i16, i16* %382, align 2
  %384 = sext i16 %383 to i32
  %385 = load %struct.vrna_md_s*, %struct.vrna_md_s** %42, align 8
  %386 = call i32 @vrna_get_ptype_md(i32 noundef %374, i32 noundef %384, %struct.vrna_md_s* noundef %385)
  %387 = load i32*, i32** %17, align 8
  %388 = load i32, i32* %13, align 4
  %389 = zext i32 %388 to i64
  %390 = getelementptr inbounds i32, i32* %387, i64 %389
  store i32 %386, i32* %390, align 4
  br label %391

391:                                              ; preds = %364
  %392 = load i32, i32* %13, align 4
  %393 = add i32 %392, 1
  store i32 %393, i32* %13, align 4
  br label %360, !llvm.loop !63

394:                                              ; preds = %360
  br label %395

395:                                              ; preds = %394, %330
  %396 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %397 = load i32, i32* %21, align 4
  %398 = load i32, i32* %20, align 4
  %399 = call double @vrna_exp_E_hp_loop(%struct.vrna_fc_s* noundef %396, i32 noundef %397, i32 noundef %398)
  store double %399, double* %30, align 8
  %400 = load i8*, i8** %6, align 8
  %401 = load i32, i32* %20, align 4
  %402 = load i32, i32* %19, align 4
  %403 = mul nsw i32 %401, %402
  %404 = load i32, i32* %21, align 4
  %405 = add nsw i32 %403, %404
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds i8, i8* %400, i64 %406
  %408 = load i8, i8* %407, align 1
  %409 = zext i8 %408 to i32
  %410 = and i32 %409, 4
  %411 = icmp ne i32 %410, 0
  br i1 %411, label %412, label %1152

412:                                              ; preds = %395
  store i32 1, i32* %22, align 4
  br label %413

413:                                              ; preds = %774, %412
  %414 = load i32, i32* %22, align 4
  %415 = load i32, i32* %20, align 4
  %416 = load i32, i32* %28, align 4
  %417 = sub nsw i32 %415, %416
  %418 = sub nsw i32 %417, 1
  %419 = icmp slt i32 %414, %418
  br i1 %419, label %420, label %777

420:                                              ; preds = %413
  %421 = load i32, i32* %22, align 4
  %422 = sub nsw i32 %421, 1
  store i32 %422, i32* %48, align 4
  %423 = load i32, i32* %19, align 4
  %424 = load i32, i32* %21, align 4
  %425 = sub nsw i32 %423, %424
  store i32 %425, i32* %49, align 4
  %426 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %39, align 8
  %427 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %426, i32 0, i32 6
  %428 = load i32*, i32** %427, align 8
  %429 = load i32, i32* %21, align 4
  %430 = add nsw i32 %429, 1
  %431 = sext i32 %430 to i64
  %432 = getelementptr inbounds i32, i32* %428, i64 %431
  %433 = load i32, i32* %432, align 4
  %434 = load i32, i32* %48, align 4
  %435 = load i32, i32* %49, align 4
  %436 = add nsw i32 %434, %435
  %437 = icmp slt i32 %433, %436
  br i1 %437, label %438, label %439

438:                                              ; preds = %420
  br label %777

439:                                              ; preds = %420
  %440 = load i32, i32* %48, align 4
  %441 = load i32, i32* %49, align 4
  %442 = add nsw i32 %440, %441
  %443 = icmp sgt i32 %442, 30
  br i1 %443, label %444, label %445

444:                                              ; preds = %439
  br label %777

445:                                              ; preds = %439
  %446 = load i32, i32* %48, align 4
  %447 = load i32, i32* %49, align 4
  %448 = add nsw i32 %446, %447
  %449 = load i32, i32* %20, align 4
  %450 = add nsw i32 %448, %449
  %451 = sub nsw i32 %450, 1
  %452 = sub nsw i32 %451, 30
  store i32 %452, i32* %50, align 4
  %453 = load i32, i32* %50, align 4
  %454 = load i32, i32* %22, align 4
  %455 = load i32, i32* %28, align 4
  %456 = add nsw i32 %454, %455
  %457 = add nsw i32 %456, 1
  %458 = icmp slt i32 %453, %457
  br i1 %458, label %459, label %464

459:                                              ; preds = %445
  %460 = load i32, i32* %22, align 4
  %461 = load i32, i32* %28, align 4
  %462 = add nsw i32 %460, %461
  %463 = add nsw i32 %462, 1
  store i32 %463, i32* %50, align 4
  br label %464

464:                                              ; preds = %459, %445
  %465 = load i32, i32* %50, align 4
  store i32 %465, i32* %23, align 4
  br label %466

466:                                              ; preds = %770, %464
  %467 = load i32, i32* %23, align 4
  %468 = load i32, i32* %20, align 4
  %469 = icmp slt i32 %467, %468
  br i1 %469, label %470, label %773

470:                                              ; preds = %466
  %471 = load i32, i32* %20, align 4
  %472 = load i32, i32* %23, align 4
  %473 = sub nsw i32 %471, %472
  %474 = sub nsw i32 %473, 1
  store i32 %474, i32* %51, align 4
  %475 = load i32, i32* %48, align 4
  %476 = load i32, i32* %51, align 4
  %477 = add nsw i32 %475, %476
  %478 = load i32, i32* %49, align 4
  %479 = add nsw i32 %477, %478
  %480 = icmp sgt i32 %479, 30
  br i1 %480, label %481, label %482

481:                                              ; preds = %470
  br label %770

482:                                              ; preds = %470
  %483 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %39, align 8
  %484 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %483, i32 0, i32 6
  %485 = load i32*, i32** %484, align 8
  %486 = load i32, i32* %23, align 4
  %487 = add nsw i32 %486, 1
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds i32, i32* %485, i64 %488
  %490 = load i32, i32* %489, align 4
  %491 = load i32, i32* %51, align 4
  %492 = icmp slt i32 %490, %491
  br i1 %492, label %493, label %494

493:                                              ; preds = %482
  br label %770

494:                                              ; preds = %482
  %495 = load double*, double** %32, align 8
  %496 = load i32*, i32** %26, align 8
  %497 = load i32, i32* %22, align 4
  %498 = sext i32 %497 to i64
  %499 = getelementptr inbounds i32, i32* %496, i64 %498
  %500 = load i32, i32* %499, align 4
  %501 = load i32, i32* %23, align 4
  %502 = sub nsw i32 %500, %501
  %503 = sext i32 %502 to i64
  %504 = getelementptr inbounds double, double* %495, i64 %503
  %505 = load double, double* %504, align 8
  %506 = fcmp oeq double %505, 0.000000e+00
  br i1 %506, label %507, label %508

507:                                              ; preds = %494
  br label %770

508:                                              ; preds = %494
  %509 = load i8*, i8** %6, align 8
  %510 = load i32, i32* %22, align 4
  %511 = load i32, i32* %19, align 4
  %512 = mul nsw i32 %510, %511
  %513 = load i32, i32* %23, align 4
  %514 = add nsw i32 %512, %513
  %515 = sext i32 %514 to i64
  %516 = getelementptr inbounds i8, i8* %509, i64 %515
  %517 = load i8, i8* %516, align 1
  %518 = zext i8 %517 to i32
  %519 = and i32 %518, 4
  %520 = icmp ne i32 %519, 0
  %521 = zext i1 %520 to i64
  %522 = select i1 %520, i32 1, i32 0
  %523 = trunc i32 %522 to i8
  store i8 %523, i8* %7, align 1
  %524 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %39, align 8
  %525 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %524, i32 0, i32 8
  %526 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %525, align 8
  %527 = icmp ne i8 (i32, i32, i32, i32, i8, i8*)* %526, null
  br i1 %527, label %528, label %540

528:                                              ; preds = %508
  %529 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %39, align 8
  %530 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %529, i32 0, i32 8
  %531 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %530, align 8
  %532 = load i32, i32* %22, align 4
  %533 = load i32, i32* %23, align 4
  %534 = load i32, i32* %20, align 4
  %535 = load i32, i32* %21, align 4
  %536 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %39, align 8
  %537 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %536, i32 0, i32 9
  %538 = load i8*, i8** %537, align 8
  %539 = call zeroext i8 %531(i32 noundef %532, i32 noundef %533, i32 noundef %534, i32 noundef %535, i8 noundef zeroext 2, i8* noundef %538)
  store i8 %539, i8* %7, align 1
  br label %540

540:                                              ; preds = %528, %508
  %541 = load i8, i8* %7, align 1
  %542 = icmp ne i8 %541, 0
  br i1 %542, label %543, label %769

543:                                              ; preds = %540
  %544 = load double*, double** %32, align 8
  %545 = load i32*, i32** %26, align 8
  %546 = load i32, i32* %22, align 4
  %547 = sext i32 %546 to i64
  %548 = getelementptr inbounds i32, i32* %545, i64 %547
  %549 = load i32, i32* %548, align 4
  %550 = load i32, i32* %23, align 4
  %551 = sub nsw i32 %549, %550
  %552 = sext i32 %551 to i64
  %553 = getelementptr inbounds double, double* %544, i64 %552
  %554 = load double, double* %553, align 8
  store double %554, double* %29, align 8
  %555 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %556 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %555, i32 0, i32 0
  %557 = load i32, i32* %556, align 8
  %558 = icmp eq i32 %557, 0
  br i1 %558, label %559, label %607

559:                                              ; preds = %543
  %560 = load i32*, i32** %27, align 8
  %561 = load i32, i32* %23, align 4
  %562 = sext i32 %561 to i64
  %563 = getelementptr inbounds i32, i32* %560, i64 %562
  %564 = load i32, i32* %563, align 4
  %565 = load i32, i32* %22, align 4
  %566 = add nsw i32 %564, %565
  %567 = load i8*, i8** %5, align 8
  %568 = call i32 @vrna_get_ptype(i32 noundef %566, i8* noundef %567)
  store i32 %568, i32* %54, align 4
  %569 = load i32, i32* %48, align 4
  %570 = load i32, i32* %49, align 4
  %571 = add nsw i32 %569, %570
  %572 = load i32, i32* %51, align 4
  %573 = load i32, i32* %16, align 4
  %574 = load i32*, i32** %25, align 8
  %575 = load i32, i32* %54, align 4
  %576 = sext i32 %575 to i64
  %577 = getelementptr inbounds i32, i32* %574, i64 %576
  %578 = load i32, i32* %577, align 4
  %579 = load i16*, i16** %9, align 8
  %580 = load i32, i32* %21, align 4
  %581 = add nsw i32 %580, 1
  %582 = sext i32 %581 to i64
  %583 = getelementptr inbounds i16, i16* %579, i64 %582
  %584 = load i16, i16* %583, align 2
  %585 = load i16*, i16** %9, align 8
  %586 = load i32, i32* %20, align 4
  %587 = sub nsw i32 %586, 1
  %588 = sext i32 %587 to i64
  %589 = getelementptr inbounds i16, i16* %585, i64 %588
  %590 = load i16, i16* %589, align 2
  %591 = load i16*, i16** %9, align 8
  %592 = load i32, i32* %22, align 4
  %593 = sub nsw i32 %592, 1
  %594 = sext i32 %593 to i64
  %595 = getelementptr inbounds i16, i16* %591, i64 %594
  %596 = load i16, i16* %595, align 2
  %597 = load i16*, i16** %9, align 8
  %598 = load i32, i32* %23, align 4
  %599 = add nsw i32 %598, 1
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds i16, i16* %597, i64 %600
  %602 = load i16, i16* %601, align 2
  %603 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %40, align 8
  %604 = call double @exp_E_IntLoop(i32 noundef %571, i32 noundef %572, i32 noundef %573, i32 noundef %578, i16 noundef signext %584, i16 noundef signext %590, i16 noundef signext %596, i16 noundef signext %602, %struct.vrna_exp_param_s* noundef %603)
  %605 = load double, double* %29, align 8
  %606 = fmul double %605, %604
  store double %606, double* %29, align 8
  br label %739

607:                                              ; preds = %543
  store i32 0, i32* %13, align 4
  br label %608

608:                                              ; preds = %735, %607
  %609 = load i32, i32* %13, align 4
  %610 = load i32, i32* %14, align 4
  %611 = icmp ult i32 %609, %610
  br i1 %611, label %612, label %738

612:                                              ; preds = %608
  %613 = load i32**, i32*** %18, align 8
  %614 = load i32, i32* %13, align 4
  %615 = zext i32 %614 to i64
  %616 = getelementptr inbounds i32*, i32** %613, i64 %615
  %617 = load i32*, i32** %616, align 8
  %618 = load i32, i32* %20, align 4
  %619 = sub nsw i32 %618, 1
  %620 = sext i32 %619 to i64
  %621 = getelementptr inbounds i32, i32* %617, i64 %620
  %622 = load i32, i32* %621, align 4
  store i32 %622, i32* %52, align 4
  %623 = load i32**, i32*** %18, align 8
  %624 = load i32, i32* %13, align 4
  %625 = zext i32 %624 to i64
  %626 = getelementptr inbounds i32*, i32** %623, i64 %625
  %627 = load i32*, i32** %626, align 8
  %628 = load i32, i32* %23, align 4
  %629 = sext i32 %628 to i64
  %630 = getelementptr inbounds i32, i32* %627, i64 %629
  %631 = load i32, i32* %630, align 4
  %632 = load i32, i32* %52, align 4
  %633 = sub i32 %632, %631
  store i32 %633, i32* %52, align 4
  %634 = load i32**, i32*** %18, align 8
  %635 = load i32, i32* %13, align 4
  %636 = zext i32 %635 to i64
  %637 = getelementptr inbounds i32*, i32** %634, i64 %636
  %638 = load i32*, i32** %637, align 8
  %639 = load i32, i32* %19, align 4
  %640 = sext i32 %639 to i64
  %641 = getelementptr inbounds i32, i32* %638, i64 %640
  %642 = load i32, i32* %641, align 4
  %643 = load i32**, i32*** %18, align 8
  %644 = load i32, i32* %13, align 4
  %645 = zext i32 %644 to i64
  %646 = getelementptr inbounds i32*, i32** %643, i64 %645
  %647 = load i32*, i32** %646, align 8
  %648 = load i32, i32* %21, align 4
  %649 = sext i32 %648 to i64
  %650 = getelementptr inbounds i32, i32* %647, i64 %649
  %651 = load i32, i32* %650, align 4
  %652 = sub i32 %642, %651
  store i32 %652, i32* %53, align 4
  %653 = load i32**, i32*** %18, align 8
  %654 = load i32, i32* %13, align 4
  %655 = zext i32 %654 to i64
  %656 = getelementptr inbounds i32*, i32** %653, i64 %655
  %657 = load i32*, i32** %656, align 8
  %658 = load i32, i32* %22, align 4
  %659 = sub nsw i32 %658, 1
  %660 = sext i32 %659 to i64
  %661 = getelementptr inbounds i32, i32* %657, i64 %660
  %662 = load i32, i32* %661, align 4
  %663 = load i32, i32* %53, align 4
  %664 = add i32 %663, %662
  store i32 %664, i32* %53, align 4
  %665 = load i16**, i16*** %10, align 8
  %666 = load i32, i32* %13, align 4
  %667 = zext i32 %666 to i64
  %668 = getelementptr inbounds i16*, i16** %665, i64 %667
  %669 = load i16*, i16** %668, align 8
  %670 = load i32, i32* %23, align 4
  %671 = sext i32 %670 to i64
  %672 = getelementptr inbounds i16, i16* %669, i64 %671
  %673 = load i16, i16* %672, align 2
  %674 = sext i16 %673 to i32
  %675 = load i16**, i16*** %10, align 8
  %676 = load i32, i32* %13, align 4
  %677 = zext i32 %676 to i64
  %678 = getelementptr inbounds i16*, i16** %675, i64 %677
  %679 = load i16*, i16** %678, align 8
  %680 = load i32, i32* %22, align 4
  %681 = sext i32 %680 to i64
  %682 = getelementptr inbounds i16, i16* %679, i64 %681
  %683 = load i16, i16* %682, align 2
  %684 = sext i16 %683 to i32
  %685 = load %struct.vrna_md_s*, %struct.vrna_md_s** %42, align 8
  %686 = call i32 @vrna_get_ptype_md(i32 noundef %674, i32 noundef %684, %struct.vrna_md_s* noundef %685)
  store i32 %686, i32* %54, align 4
  %687 = load i32, i32* %53, align 4
  %688 = load i32, i32* %52, align 4
  %689 = load i32*, i32** %17, align 8
  %690 = load i32, i32* %13, align 4
  %691 = zext i32 %690 to i64
  %692 = getelementptr inbounds i32, i32* %689, i64 %691
  %693 = load i32, i32* %692, align 4
  %694 = load i32, i32* %54, align 4
  %695 = load i16**, i16*** %12, align 8
  %696 = load i32, i32* %13, align 4
  %697 = zext i32 %696 to i64
  %698 = getelementptr inbounds i16*, i16** %695, i64 %697
  %699 = load i16*, i16** %698, align 8
  %700 = load i32, i32* %21, align 4
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds i16, i16* %699, i64 %701
  %703 = load i16, i16* %702, align 2
  %704 = load i16**, i16*** %11, align 8
  %705 = load i32, i32* %13, align 4
  %706 = zext i32 %705 to i64
  %707 = getelementptr inbounds i16*, i16** %704, i64 %706
  %708 = load i16*, i16** %707, align 8
  %709 = load i32, i32* %20, align 4
  %710 = sext i32 %709 to i64
  %711 = getelementptr inbounds i16, i16* %708, i64 %710
  %712 = load i16, i16* %711, align 2
  %713 = load i16**, i16*** %11, align 8
  %714 = load i32, i32* %13, align 4
  %715 = zext i32 %714 to i64
  %716 = getelementptr inbounds i16*, i16** %713, i64 %715
  %717 = load i16*, i16** %716, align 8
  %718 = load i32, i32* %22, align 4
  %719 = sext i32 %718 to i64
  %720 = getelementptr inbounds i16, i16* %717, i64 %719
  %721 = load i16, i16* %720, align 2
  %722 = load i16**, i16*** %12, align 8
  %723 = load i32, i32* %13, align 4
  %724 = zext i32 %723 to i64
  %725 = getelementptr inbounds i16*, i16** %722, i64 %724
  %726 = load i16*, i16** %725, align 8
  %727 = load i32, i32* %23, align 4
  %728 = sext i32 %727 to i64
  %729 = getelementptr inbounds i16, i16* %726, i64 %728
  %730 = load i16, i16* %729, align 2
  %731 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %40, align 8
  %732 = call double @exp_E_IntLoop(i32 noundef %687, i32 noundef %688, i32 noundef %693, i32 noundef %694, i16 noundef signext %703, i16 noundef signext %712, i16 noundef signext %721, i16 noundef signext %730, %struct.vrna_exp_param_s* noundef %731)
  %733 = load double, double* %29, align 8
  %734 = fmul double %733, %732
  store double %734, double* %29, align 8
  br label %735

735:                                              ; preds = %612
  %736 = load i32, i32* %13, align 4
  %737 = add i32 %736, 1
  store i32 %737, i32* %13, align 4
  br label %608, !llvm.loop !64

738:                                              ; preds = %608
  br label %739

739:                                              ; preds = %738, %559
  %740 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %45, align 8
  %741 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %740, i32 0, i32 17
  %742 = load double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %741, align 8
  %743 = icmp ne double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %742, null
  br i1 %743, label %744, label %756

744:                                              ; preds = %739
  %745 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %45, align 8
  %746 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %745, i32 0, i32 17
  %747 = load double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %746, align 8
  %748 = load i32, i32* %22, align 4
  %749 = load i32, i32* %23, align 4
  %750 = load i32, i32* %20, align 4
  %751 = load i32, i32* %21, align 4
  %752 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %45, align 8
  %753 = call double %747(i32 noundef %748, i32 noundef %749, i32 noundef %750, i32 noundef %751, %struct.sc_int_exp_dat* noundef %752)
  %754 = load double, double* %29, align 8
  %755 = fmul double %754, %753
  store double %755, double* %29, align 8
  br label %756

756:                                              ; preds = %744, %739
  %757 = load double, double* %29, align 8
  %758 = load double*, double** %36, align 8
  %759 = load i32, i32* %48, align 4
  %760 = load i32, i32* %51, align 4
  %761 = add nsw i32 %759, %760
  %762 = load i32, i32* %49, align 4
  %763 = add nsw i32 %761, %762
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds double, double* %758, i64 %764
  %766 = load double, double* %765, align 8
  %767 = load double, double* %30, align 8
  %768 = call double @llvm.fmuladd.f64(double %757, double %766, double %767)
  store double %768, double* %30, align 8
  br label %769

769:                                              ; preds = %756, %540
  br label %770

770:                                              ; preds = %769, %507, %493, %481
  %771 = load i32, i32* %23, align 4
  %772 = add nsw i32 %771, 1
  store i32 %772, i32* %23, align 4
  br label %466, !llvm.loop !65

773:                                              ; preds = %466
  br label %774

774:                                              ; preds = %773
  %775 = load i32, i32* %22, align 4
  %776 = add nsw i32 %775, 1
  store i32 %776, i32* %22, align 4
  br label %413, !llvm.loop !66

777:                                              ; preds = %444, %438, %413
  %778 = load i32, i32* %21, align 4
  %779 = add nsw i32 %778, 1
  store i32 %779, i32* %22, align 4
  br label %780

780:                                              ; preds = %1148, %777
  %781 = load i32, i32* %22, align 4
  %782 = load i32, i32* %19, align 4
  %783 = load i32, i32* %28, align 4
  %784 = sub nsw i32 %782, %783
  %785 = icmp slt i32 %781, %784
  br i1 %785, label %786, label %1151

786:                                              ; preds = %780
  %787 = load i32, i32* %22, align 4
  %788 = load i32, i32* %21, align 4
  %789 = sub nsw i32 %787, %788
  %790 = sub nsw i32 %789, 1
  store i32 %790, i32* %55, align 4
  %791 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %39, align 8
  %792 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %791, i32 0, i32 6
  %793 = load i32*, i32** %792, align 8
  %794 = load i32, i32* %21, align 4
  %795 = add nsw i32 %794, 1
  %796 = sext i32 %795 to i64
  %797 = getelementptr inbounds i32, i32* %793, i64 %796
  %798 = load i32, i32* %797, align 4
  %799 = load i32, i32* %55, align 4
  %800 = icmp slt i32 %798, %799
  br i1 %800, label %801, label %802

801:                                              ; preds = %786
  br label %1151

802:                                              ; preds = %786
  %803 = load i32, i32* %55, align 4
  %804 = load i32, i32* %20, align 4
  %805 = add nsw i32 %803, %804
  %806 = sub nsw i32 %805, 1
  %807 = icmp sgt i32 %806, 30
  br i1 %807, label %808, label %809

808:                                              ; preds = %802
  br label %1151

809:                                              ; preds = %802
  %810 = load i32, i32* %55, align 4
  %811 = load i32, i32* %20, align 4
  %812 = add nsw i32 %810, %811
  %813 = sub nsw i32 %812, 1
  %814 = load i32, i32* %19, align 4
  %815 = add nsw i32 %813, %814
  %816 = sub nsw i32 %815, 30
  store i32 %816, i32* %56, align 4
  %817 = load i32, i32* %56, align 4
  %818 = load i32, i32* %22, align 4
  %819 = load i32, i32* %28, align 4
  %820 = add nsw i32 %818, %819
  %821 = add nsw i32 %820, 1
  %822 = icmp slt i32 %817, %821
  br i1 %822, label %823, label %828

823:                                              ; preds = %809
  %824 = load i32, i32* %22, align 4
  %825 = load i32, i32* %28, align 4
  %826 = add nsw i32 %824, %825
  %827 = add nsw i32 %826, 1
  store i32 %827, i32* %56, align 4
  br label %828

828:                                              ; preds = %823, %809
  %829 = load i32, i32* %56, align 4
  store i32 %829, i32* %23, align 4
  br label %830

830:                                              ; preds = %1144, %828
  %831 = load i32, i32* %23, align 4
  %832 = load i32, i32* %19, align 4
  %833 = icmp sle i32 %831, %832
  br i1 %833, label %834, label %1147

834:                                              ; preds = %830
  %835 = load i32, i32* %20, align 4
  %836 = sub nsw i32 %835, 1
  store i32 %836, i32* %57, align 4
  %837 = load i32, i32* %19, align 4
  %838 = load i32, i32* %23, align 4
  %839 = sub nsw i32 %837, %838
  store i32 %839, i32* %58, align 4
  %840 = load i32, i32* %55, align 4
  %841 = load i32, i32* %57, align 4
  %842 = add nsw i32 %840, %841
  %843 = load i32, i32* %58, align 4
  %844 = add nsw i32 %842, %843
  %845 = icmp sgt i32 %844, 30
  br i1 %845, label %846, label %847

846:                                              ; preds = %834
  br label %1144

847:                                              ; preds = %834
  %848 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %39, align 8
  %849 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %848, i32 0, i32 6
  %850 = load i32*, i32** %849, align 8
  %851 = load i32, i32* %23, align 4
  %852 = add nsw i32 %851, 1
  %853 = sext i32 %852 to i64
  %854 = getelementptr inbounds i32, i32* %850, i64 %853
  %855 = load i32, i32* %854, align 4
  %856 = load i32, i32* %57, align 4
  %857 = load i32, i32* %58, align 4
  %858 = add nsw i32 %856, %857
  %859 = icmp slt i32 %855, %858
  br i1 %859, label %860, label %861

860:                                              ; preds = %847
  br label %1144

861:                                              ; preds = %847
  %862 = load double*, double** %32, align 8
  %863 = load i32*, i32** %26, align 8
  %864 = load i32, i32* %22, align 4
  %865 = sext i32 %864 to i64
  %866 = getelementptr inbounds i32, i32* %863, i64 %865
  %867 = load i32, i32* %866, align 4
  %868 = load i32, i32* %23, align 4
  %869 = sub nsw i32 %867, %868
  %870 = sext i32 %869 to i64
  %871 = getelementptr inbounds double, double* %862, i64 %870
  %872 = load double, double* %871, align 8
  %873 = fcmp oeq double %872, 0.000000e+00
  br i1 %873, label %874, label %875

874:                                              ; preds = %861
  br label %1144

875:                                              ; preds = %861
  %876 = load i8*, i8** %6, align 8
  %877 = load i32, i32* %22, align 4
  %878 = load i32, i32* %19, align 4
  %879 = mul nsw i32 %877, %878
  %880 = load i32, i32* %23, align 4
  %881 = add nsw i32 %879, %880
  %882 = sext i32 %881 to i64
  %883 = getelementptr inbounds i8, i8* %876, i64 %882
  %884 = load i8, i8* %883, align 1
  %885 = zext i8 %884 to i32
  %886 = and i32 %885, 4
  %887 = icmp ne i32 %886, 0
  %888 = zext i1 %887 to i64
  %889 = select i1 %887, i32 1, i32 0
  %890 = trunc i32 %889 to i8
  store i8 %890, i8* %7, align 1
  %891 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %39, align 8
  %892 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %891, i32 0, i32 8
  %893 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %892, align 8
  %894 = icmp ne i8 (i32, i32, i32, i32, i8, i8*)* %893, null
  br i1 %894, label %895, label %916

895:                                              ; preds = %875
  %896 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %39, align 8
  %897 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %896, i32 0, i32 8
  %898 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %897, align 8
  %899 = load i32, i32* %20, align 4
  %900 = load i32, i32* %21, align 4
  %901 = load i32, i32* %22, align 4
  %902 = load i32, i32* %23, align 4
  %903 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %39, align 8
  %904 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %903, i32 0, i32 9
  %905 = load i8*, i8** %904, align 8
  %906 = call zeroext i8 %898(i32 noundef %899, i32 noundef %900, i32 noundef %901, i32 noundef %902, i8 noundef zeroext 2, i8* noundef %905)
  %907 = zext i8 %906 to i32
  %908 = icmp ne i32 %907, 0
  br i1 %908, label %909, label %912

909:                                              ; preds = %895
  %910 = load i8, i8* %7, align 1
  %911 = zext i8 %910 to i32
  br label %913

912:                                              ; preds = %895
  br label %913

913:                                              ; preds = %912, %909
  %914 = phi i32 [ %911, %909 ], [ 0, %912 ]
  %915 = trunc i32 %914 to i8
  store i8 %915, i8* %7, align 1
  br label %916

916:                                              ; preds = %913, %875
  %917 = load i8, i8* %7, align 1
  %918 = icmp ne i8 %917, 0
  br i1 %918, label %919, label %1143

919:                                              ; preds = %916
  %920 = load double*, double** %32, align 8
  %921 = load i32*, i32** %26, align 8
  %922 = load i32, i32* %22, align 4
  %923 = sext i32 %922 to i64
  %924 = getelementptr inbounds i32, i32* %921, i64 %923
  %925 = load i32, i32* %924, align 4
  %926 = load i32, i32* %23, align 4
  %927 = sub nsw i32 %925, %926
  %928 = sext i32 %927 to i64
  %929 = getelementptr inbounds double, double* %920, i64 %928
  %930 = load double, double* %929, align 8
  store double %930, double* %29, align 8
  %931 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %932 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %931, i32 0, i32 0
  %933 = load i32, i32* %932, align 8
  %934 = icmp eq i32 %933, 0
  br i1 %934, label %935, label %983

935:                                              ; preds = %919
  %936 = load i32*, i32** %27, align 8
  %937 = load i32, i32* %23, align 4
  %938 = sext i32 %937 to i64
  %939 = getelementptr inbounds i32, i32* %936, i64 %938
  %940 = load i32, i32* %939, align 4
  %941 = load i32, i32* %22, align 4
  %942 = add nsw i32 %940, %941
  %943 = load i8*, i8** %5, align 8
  %944 = call i32 @vrna_get_ptype(i32 noundef %942, i8* noundef %943)
  store i32 %944, i32* %61, align 4
  %945 = load i32, i32* %57, align 4
  %946 = load i32, i32* %58, align 4
  %947 = add nsw i32 %945, %946
  %948 = load i32, i32* %55, align 4
  %949 = load i32*, i32** %25, align 8
  %950 = load i32, i32* %61, align 4
  %951 = sext i32 %950 to i64
  %952 = getelementptr inbounds i32, i32* %949, i64 %951
  %953 = load i32, i32* %952, align 4
  %954 = load i32, i32* %16, align 4
  %955 = load i16*, i16** %9, align 8
  %956 = load i32, i32* %23, align 4
  %957 = add nsw i32 %956, 1
  %958 = sext i32 %957 to i64
  %959 = getelementptr inbounds i16, i16* %955, i64 %958
  %960 = load i16, i16* %959, align 2
  %961 = load i16*, i16** %9, align 8
  %962 = load i32, i32* %22, align 4
  %963 = sub nsw i32 %962, 1
  %964 = sext i32 %963 to i64
  %965 = getelementptr inbounds i16, i16* %961, i64 %964
  %966 = load i16, i16* %965, align 2
  %967 = load i16*, i16** %9, align 8
  %968 = load i32, i32* %20, align 4
  %969 = sub nsw i32 %968, 1
  %970 = sext i32 %969 to i64
  %971 = getelementptr inbounds i16, i16* %967, i64 %970
  %972 = load i16, i16* %971, align 2
  %973 = load i16*, i16** %9, align 8
  %974 = load i32, i32* %21, align 4
  %975 = add nsw i32 %974, 1
  %976 = sext i32 %975 to i64
  %977 = getelementptr inbounds i16, i16* %973, i64 %976
  %978 = load i16, i16* %977, align 2
  %979 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %40, align 8
  %980 = call double @exp_E_IntLoop(i32 noundef %947, i32 noundef %948, i32 noundef %953, i32 noundef %954, i16 noundef signext %960, i16 noundef signext %966, i16 noundef signext %972, i16 noundef signext %978, %struct.vrna_exp_param_s* noundef %979)
  %981 = load double, double* %29, align 8
  %982 = fmul double %981, %980
  store double %982, double* %29, align 8
  br label %1113

983:                                              ; preds = %919
  store i32 0, i32* %13, align 4
  br label %984

984:                                              ; preds = %1109, %983
  %985 = load i32, i32* %13, align 4
  %986 = load i32, i32* %14, align 4
  %987 = icmp ult i32 %985, %986
  br i1 %987, label %988, label %1112

988:                                              ; preds = %984
  %989 = load i32**, i32*** %18, align 8
  %990 = load i32, i32* %13, align 4
  %991 = zext i32 %990 to i64
  %992 = getelementptr inbounds i32*, i32** %989, i64 %991
  %993 = load i32*, i32** %992, align 8
  %994 = load i32, i32* %22, align 4
  %995 = sext i32 %994 to i64
  %996 = getelementptr inbounds i32, i32* %993, i64 %995
  %997 = load i32, i32* %996, align 4
  %998 = load i32**, i32*** %18, align 8
  %999 = load i32, i32* %13, align 4
  %1000 = zext i32 %999 to i64
  %1001 = getelementptr inbounds i32*, i32** %998, i64 %1000
  %1002 = load i32*, i32** %1001, align 8
  %1003 = load i32, i32* %21, align 4
  %1004 = add nsw i32 %1003, 1
  %1005 = sext i32 %1004 to i64
  %1006 = getelementptr inbounds i32, i32* %1002, i64 %1005
  %1007 = load i32, i32* %1006, align 4
  %1008 = sub i32 %997, %1007
  store i32 %1008, i32* %60, align 4
  %1009 = load i32**, i32*** %18, align 8
  %1010 = load i32, i32* %13, align 4
  %1011 = zext i32 %1010 to i64
  %1012 = getelementptr inbounds i32*, i32** %1009, i64 %1011
  %1013 = load i32*, i32** %1012, align 8
  %1014 = load i32, i32* %20, align 4
  %1015 = sub nsw i32 %1014, 1
  %1016 = sext i32 %1015 to i64
  %1017 = getelementptr inbounds i32, i32* %1013, i64 %1016
  %1018 = load i32, i32* %1017, align 4
  %1019 = load i32**, i32*** %18, align 8
  %1020 = load i32, i32* %13, align 4
  %1021 = zext i32 %1020 to i64
  %1022 = getelementptr inbounds i32*, i32** %1019, i64 %1021
  %1023 = load i32*, i32** %1022, align 8
  %1024 = load i32, i32* %19, align 4
  %1025 = sext i32 %1024 to i64
  %1026 = getelementptr inbounds i32, i32* %1023, i64 %1025
  %1027 = load i32, i32* %1026, align 4
  %1028 = add i32 %1018, %1027
  %1029 = load i32**, i32*** %18, align 8
  %1030 = load i32, i32* %13, align 4
  %1031 = zext i32 %1030 to i64
  %1032 = getelementptr inbounds i32*, i32** %1029, i64 %1031
  %1033 = load i32*, i32** %1032, align 8
  %1034 = load i32, i32* %23, align 4
  %1035 = sext i32 %1034 to i64
  %1036 = getelementptr inbounds i32, i32* %1033, i64 %1035
  %1037 = load i32, i32* %1036, align 4
  %1038 = sub i32 %1028, %1037
  store i32 %1038, i32* %59, align 4
  %1039 = load i16**, i16*** %10, align 8
  %1040 = load i32, i32* %13, align 4
  %1041 = zext i32 %1040 to i64
  %1042 = getelementptr inbounds i16*, i16** %1039, i64 %1041
  %1043 = load i16*, i16** %1042, align 8
  %1044 = load i32, i32* %23, align 4
  %1045 = sext i32 %1044 to i64
  %1046 = getelementptr inbounds i16, i16* %1043, i64 %1045
  %1047 = load i16, i16* %1046, align 2
  %1048 = sext i16 %1047 to i32
  %1049 = load i16**, i16*** %10, align 8
  %1050 = load i32, i32* %13, align 4
  %1051 = zext i32 %1050 to i64
  %1052 = getelementptr inbounds i16*, i16** %1049, i64 %1051
  %1053 = load i16*, i16** %1052, align 8
  %1054 = load i32, i32* %22, align 4
  %1055 = sext i32 %1054 to i64
  %1056 = getelementptr inbounds i16, i16* %1053, i64 %1055
  %1057 = load i16, i16* %1056, align 2
  %1058 = sext i16 %1057 to i32
  %1059 = load %struct.vrna_md_s*, %struct.vrna_md_s** %42, align 8
  %1060 = call i32 @vrna_get_ptype_md(i32 noundef %1048, i32 noundef %1058, %struct.vrna_md_s* noundef %1059)
  store i32 %1060, i32* %61, align 4
  %1061 = load i32, i32* %59, align 4
  %1062 = load i32, i32* %60, align 4
  %1063 = load i32, i32* %61, align 4
  %1064 = load i32*, i32** %17, align 8
  %1065 = load i32, i32* %13, align 4
  %1066 = zext i32 %1065 to i64
  %1067 = getelementptr inbounds i32, i32* %1064, i64 %1066
  %1068 = load i32, i32* %1067, align 4
  %1069 = load i16**, i16*** %12, align 8
  %1070 = load i32, i32* %13, align 4
  %1071 = zext i32 %1070 to i64
  %1072 = getelementptr inbounds i16*, i16** %1069, i64 %1071
  %1073 = load i16*, i16** %1072, align 8
  %1074 = load i32, i32* %23, align 4
  %1075 = sext i32 %1074 to i64
  %1076 = getelementptr inbounds i16, i16* %1073, i64 %1075
  %1077 = load i16, i16* %1076, align 2
  %1078 = load i16**, i16*** %11, align 8
  %1079 = load i32, i32* %13, align 4
  %1080 = zext i32 %1079 to i64
  %1081 = getelementptr inbounds i16*, i16** %1078, i64 %1080
  %1082 = load i16*, i16** %1081, align 8
  %1083 = load i32, i32* %22, align 4
  %1084 = sext i32 %1083 to i64
  %1085 = getelementptr inbounds i16, i16* %1082, i64 %1084
  %1086 = load i16, i16* %1085, align 2
  %1087 = load i16**, i16*** %11, align 8
  %1088 = load i32, i32* %13, align 4
  %1089 = zext i32 %1088 to i64
  %1090 = getelementptr inbounds i16*, i16** %1087, i64 %1089
  %1091 = load i16*, i16** %1090, align 8
  %1092 = load i32, i32* %20, align 4
  %1093 = sext i32 %1092 to i64
  %1094 = getelementptr inbounds i16, i16* %1091, i64 %1093
  %1095 = load i16, i16* %1094, align 2
  %1096 = load i16**, i16*** %12, align 8
  %1097 = load i32, i32* %13, align 4
  %1098 = zext i32 %1097 to i64
  %1099 = getelementptr inbounds i16*, i16** %1096, i64 %1098
  %1100 = load i16*, i16** %1099, align 8
  %1101 = load i32, i32* %21, align 4
  %1102 = sext i32 %1101 to i64
  %1103 = getelementptr inbounds i16, i16* %1100, i64 %1102
  %1104 = load i16, i16* %1103, align 2
  %1105 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %40, align 8
  %1106 = call double @exp_E_IntLoop(i32 noundef %1061, i32 noundef %1062, i32 noundef %1063, i32 noundef %1068, i16 noundef signext %1077, i16 noundef signext %1086, i16 noundef signext %1095, i16 noundef signext %1104, %struct.vrna_exp_param_s* noundef %1105)
  %1107 = load double, double* %29, align 8
  %1108 = fmul double %1107, %1106
  store double %1108, double* %29, align 8
  br label %1109

1109:                                             ; preds = %988
  %1110 = load i32, i32* %13, align 4
  %1111 = add i32 %1110, 1
  store i32 %1111, i32* %13, align 4
  br label %984, !llvm.loop !67

1112:                                             ; preds = %984
  br label %1113

1113:                                             ; preds = %1112, %935
  %1114 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %45, align 8
  %1115 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %1114, i32 0, i32 17
  %1116 = load double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %1115, align 8
  %1117 = icmp ne double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %1116, null
  br i1 %1117, label %1118, label %1130

1118:                                             ; preds = %1113
  %1119 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %45, align 8
  %1120 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %1119, i32 0, i32 17
  %1121 = load double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %1120, align 8
  %1122 = load i32, i32* %20, align 4
  %1123 = load i32, i32* %21, align 4
  %1124 = load i32, i32* %22, align 4
  %1125 = load i32, i32* %23, align 4
  %1126 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %45, align 8
  %1127 = call double %1121(i32 noundef %1122, i32 noundef %1123, i32 noundef %1124, i32 noundef %1125, %struct.sc_int_exp_dat* noundef %1126)
  %1128 = load double, double* %29, align 8
  %1129 = fmul double %1128, %1127
  store double %1129, double* %29, align 8
  br label %1130

1130:                                             ; preds = %1118, %1113
  %1131 = load double, double* %29, align 8
  %1132 = load double*, double** %36, align 8
  %1133 = load i32, i32* %55, align 4
  %1134 = load i32, i32* %57, align 4
  %1135 = add nsw i32 %1133, %1134
  %1136 = load i32, i32* %58, align 4
  %1137 = add nsw i32 %1135, %1136
  %1138 = sext i32 %1137 to i64
  %1139 = getelementptr inbounds double, double* %1132, i64 %1138
  %1140 = load double, double* %1139, align 8
  %1141 = load double, double* %30, align 8
  %1142 = call double @llvm.fmuladd.f64(double %1131, double %1140, double %1141)
  store double %1142, double* %30, align 8
  br label %1143

1143:                                             ; preds = %1130, %916
  br label %1144

1144:                                             ; preds = %1143, %874, %860, %846
  %1145 = load i32, i32* %23, align 4
  %1146 = add nsw i32 %1145, 1
  store i32 %1146, i32* %23, align 4
  br label %830, !llvm.loop !68

1147:                                             ; preds = %830
  br label %1148

1148:                                             ; preds = %1147
  %1149 = load i32, i32* %22, align 4
  %1150 = add nsw i32 %1149, 1
  store i32 %1150, i32* %22, align 4
  br label %780, !llvm.loop !69

1151:                                             ; preds = %808, %801, %780
  br label %1152

1152:                                             ; preds = %1151, %395
  %1153 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %44, align 8
  %1154 = load i32, i32* %20, align 4
  %1155 = load i32, i32* %21, align 4
  %1156 = load i32, i32* %20, align 4
  %1157 = sub nsw i32 %1156, 1
  %1158 = load i32, i32* %21, align 4
  %1159 = add nsw i32 %1158, 1
  %1160 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %43, align 8
  %1161 = bitcast %struct.hc_mb_def_dat* %1160 to i8*
  %1162 = call zeroext i8 %1153(i32 noundef %1154, i32 noundef %1155, i32 noundef %1157, i32 noundef %1159, i8 noundef zeroext 23, i8* noundef %1161)
  %1163 = icmp ne i8 %1162, 0
  br i1 %1163, label %1164, label %1689

1164:                                             ; preds = %1152
  store double 1.000000e+00, double* %62, align 8
  %1165 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1166 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %1165, i32 0, i32 11
  %1167 = load double (i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, %struct.sc_mb_exp_dat*)** %1166, align 8
  %1168 = icmp ne double (i32, i32, %struct.sc_mb_exp_dat*)* %1167, null
  br i1 %1168, label %1169, label %1177

1169:                                             ; preds = %1164
  %1170 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1171 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %1170, i32 0, i32 11
  %1172 = load double (i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, %struct.sc_mb_exp_dat*)** %1171, align 8
  %1173 = load i32, i32* %20, align 4
  %1174 = load i32, i32* %21, align 4
  %1175 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1176 = call double %1172(i32 noundef %1173, i32 noundef %1174, %struct.sc_mb_exp_dat* noundef %1175)
  store double %1176, double* %62, align 8
  br label %1177

1177:                                             ; preds = %1169, %1164
  %1178 = load i32, i32* %20, align 4
  %1179 = load i32, i32* %28, align 4
  %1180 = add nsw i32 %1179, 2
  %1181 = icmp sgt i32 %1178, %1180
  br i1 %1181, label %1182, label %1293

1182:                                             ; preds = %1177
  %1183 = load i32, i32* %21, align 4
  %1184 = load i32, i32* %19, align 4
  %1185 = load i32, i32* %28, align 4
  %1186 = sub nsw i32 %1184, %1185
  %1187 = sub nsw i32 %1186, 1
  %1188 = icmp slt i32 %1183, %1187
  br i1 %1188, label %1189, label %1293

1189:                                             ; preds = %1182
  %1190 = load double*, double** %33, align 8
  %1191 = load i32*, i32** %26, align 8
  %1192 = getelementptr inbounds i32, i32* %1191, i64 1
  %1193 = load i32, i32* %1192, align 4
  %1194 = load i32, i32* %20, align 4
  %1195 = sub nsw i32 %1193, %1194
  %1196 = add nsw i32 %1195, 1
  %1197 = sext i32 %1196 to i64
  %1198 = getelementptr inbounds double, double* %1190, i64 %1197
  %1199 = load double, double* %1198, align 8
  %1200 = load double*, double** %33, align 8
  %1201 = load i32*, i32** %26, align 8
  %1202 = load i32, i32* %21, align 4
  %1203 = add nsw i32 %1202, 1
  %1204 = sext i32 %1203 to i64
  %1205 = getelementptr inbounds i32, i32* %1201, i64 %1204
  %1206 = load i32, i32* %1205, align 4
  %1207 = load i32, i32* %19, align 4
  %1208 = sub nsw i32 %1206, %1207
  %1209 = sext i32 %1208 to i64
  %1210 = getelementptr inbounds double, double* %1200, i64 %1209
  %1211 = load double, double* %1210, align 8
  %1212 = fmul double %1199, %1211
  store double %1212, double* %29, align 8
  %1213 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %1214 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %1213, i32 0, i32 0
  %1215 = load i32, i32* %1214, align 8
  %1216 = icmp eq i32 %1215, 0
  br i1 %1216, label %1217, label %1239

1217:                                             ; preds = %1189
  %1218 = load i32, i32* %15, align 4
  %1219 = load i16*, i16** %9, align 8
  %1220 = load i32, i32* %20, align 4
  %1221 = sub nsw i32 %1220, 1
  %1222 = sext i32 %1221 to i64
  %1223 = getelementptr inbounds i16, i16* %1219, i64 %1222
  %1224 = load i16, i16* %1223, align 2
  %1225 = sext i16 %1224 to i32
  %1226 = load i16*, i16** %9, align 8
  %1227 = load i32, i32* %21, align 4
  %1228 = add nsw i32 %1227, 1
  %1229 = sext i32 %1228 to i64
  %1230 = getelementptr inbounds i16, i16* %1226, i64 %1229
  %1231 = load i16, i16* %1230, align 2
  %1232 = sext i16 %1231 to i32
  %1233 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %40, align 8
  %1234 = call double @exp_E_MLstem(i32 noundef %1218, i32 noundef %1225, i32 noundef %1232, %struct.vrna_exp_param_s* noundef %1233)
  %1235 = load double, double* %31, align 8
  %1236 = fmul double %1234, %1235
  %1237 = load double, double* %29, align 8
  %1238 = fmul double %1237, %1236
  store double %1238, double* %29, align 8
  br label %1288

1239:                                             ; preds = %1189
  store i32 0, i32* %13, align 4
  br label %1240

1240:                                             ; preds = %1278, %1239
  %1241 = load i32, i32* %13, align 4
  %1242 = load i32, i32* %14, align 4
  %1243 = icmp ult i32 %1241, %1242
  br i1 %1243, label %1244, label %1281

1244:                                             ; preds = %1240
  %1245 = load i32*, i32** %25, align 8
  %1246 = load i32*, i32** %17, align 8
  %1247 = load i32, i32* %13, align 4
  %1248 = zext i32 %1247 to i64
  %1249 = getelementptr inbounds i32, i32* %1246, i64 %1248
  %1250 = load i32, i32* %1249, align 4
  %1251 = zext i32 %1250 to i64
  %1252 = getelementptr inbounds i32, i32* %1245, i64 %1251
  %1253 = load i32, i32* %1252, align 4
  %1254 = load i16**, i16*** %11, align 8
  %1255 = load i32, i32* %13, align 4
  %1256 = zext i32 %1255 to i64
  %1257 = getelementptr inbounds i16*, i16** %1254, i64 %1256
  %1258 = load i16*, i16** %1257, align 8
  %1259 = load i32, i32* %20, align 4
  %1260 = sext i32 %1259 to i64
  %1261 = getelementptr inbounds i16, i16* %1258, i64 %1260
  %1262 = load i16, i16* %1261, align 2
  %1263 = sext i16 %1262 to i32
  %1264 = load i16**, i16*** %12, align 8
  %1265 = load i32, i32* %13, align 4
  %1266 = zext i32 %1265 to i64
  %1267 = getelementptr inbounds i16*, i16** %1264, i64 %1266
  %1268 = load i16*, i16** %1267, align 8
  %1269 = load i32, i32* %21, align 4
  %1270 = sext i32 %1269 to i64
  %1271 = getelementptr inbounds i16, i16* %1268, i64 %1270
  %1272 = load i16, i16* %1271, align 2
  %1273 = sext i16 %1272 to i32
  %1274 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %40, align 8
  %1275 = call double @exp_E_MLstem(i32 noundef %1253, i32 noundef %1263, i32 noundef %1273, %struct.vrna_exp_param_s* noundef %1274)
  %1276 = load double, double* %29, align 8
  %1277 = fmul double %1276, %1275
  store double %1277, double* %29, align 8
  br label %1278

1278:                                             ; preds = %1244
  %1279 = load i32, i32* %13, align 4
  %1280 = add i32 %1279, 1
  store i32 %1280, i32* %13, align 4
  br label %1240, !llvm.loop !70

1281:                                             ; preds = %1240
  %1282 = load double, double* %31, align 8
  %1283 = load i32, i32* %14, align 4
  %1284 = uitofp i32 %1283 to double
  %1285 = call double @pow(double noundef %1282, double noundef %1284) #5
  %1286 = load double, double* %29, align 8
  %1287 = fmul double %1286, %1285
  store double %1287, double* %29, align 8
  br label %1288

1288:                                             ; preds = %1281, %1217
  %1289 = load double, double* %29, align 8
  %1290 = load double, double* %62, align 8
  %1291 = load double, double* %30, align 8
  %1292 = call double @llvm.fmuladd.f64(double %1289, double %1290, double %1291)
  store double %1292, double* %30, align 8
  br label %1293

1293:                                             ; preds = %1288, %1182, %1177
  %1294 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %39, align 8
  %1295 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %1294, i32 0, i32 7
  %1296 = load i32*, i32** %1295, align 8
  %1297 = load i32, i32* %21, align 4
  %1298 = add nsw i32 %1297, 1
  %1299 = sext i32 %1298 to i64
  %1300 = getelementptr inbounds i32, i32* %1296, i64 %1299
  %1301 = load i32, i32* %1300, align 4
  %1302 = load i32, i32* %19, align 4
  %1303 = load i32, i32* %21, align 4
  %1304 = sub nsw i32 %1302, %1303
  %1305 = icmp sge i32 %1301, %1304
  br i1 %1305, label %1306, label %1491

1306:                                             ; preds = %1293
  %1307 = load i32, i32* %28, align 4
  %1308 = add nsw i32 %1307, 2
  store i32 %1308, i32* %22, align 4
  br label %1309

1309:                                             ; preds = %1487, %1306
  %1310 = load i32, i32* %22, align 4
  %1311 = load i32, i32* %20, align 4
  %1312 = load i32, i32* %28, align 4
  %1313 = sub nsw i32 %1311, %1312
  %1314 = sub nsw i32 %1313, 2
  %1315 = icmp slt i32 %1310, %1314
  br i1 %1315, label %1316, label %1490

1316:                                             ; preds = %1309
  %1317 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %44, align 8
  %1318 = load i32, i32* %20, align 4
  %1319 = load i32, i32* %19, align 4
  %1320 = load i32, i32* %20, align 4
  %1321 = load i32, i32* %21, align 4
  %1322 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %43, align 8
  %1323 = bitcast %struct.hc_mb_def_dat* %1322 to i8*
  %1324 = call zeroext i8 %1317(i32 noundef %1318, i32 noundef %1319, i32 noundef %1320, i32 noundef %1321, i8 noundef zeroext 7, i8* noundef %1323)
  %1325 = zext i8 %1324 to i32
  %1326 = icmp ne i32 %1325, 0
  br i1 %1326, label %1327, label %1486

1327:                                             ; preds = %1316
  %1328 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %44, align 8
  %1329 = load i32, i32* %20, align 4
  %1330 = sub nsw i32 %1329, 1
  %1331 = load i32, i32* %22, align 4
  %1332 = load i32, i32* %22, align 4
  %1333 = add nsw i32 %1332, 1
  %1334 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %43, align 8
  %1335 = bitcast %struct.hc_mb_def_dat* %1334 to i8*
  %1336 = call zeroext i8 %1328(i32 noundef 1, i32 noundef %1330, i32 noundef %1331, i32 noundef %1333, i8 noundef zeroext 5, i8* noundef %1335)
  %1337 = zext i8 %1336 to i32
  %1338 = icmp ne i32 %1337, 0
  br i1 %1338, label %1339, label %1486

1339:                                             ; preds = %1327
  %1340 = load double*, double** %33, align 8
  %1341 = load i32*, i32** %26, align 8
  %1342 = getelementptr inbounds i32, i32* %1341, i64 1
  %1343 = load i32, i32* %1342, align 4
  %1344 = load i32, i32* %22, align 4
  %1345 = sub nsw i32 %1343, %1344
  %1346 = sext i32 %1345 to i64
  %1347 = getelementptr inbounds double, double* %1340, i64 %1346
  %1348 = load double, double* %1347, align 8
  %1349 = load double*, double** %34, align 8
  %1350 = load i32*, i32** %27, align 8
  %1351 = load i32, i32* %20, align 4
  %1352 = sub nsw i32 %1351, 1
  %1353 = sext i32 %1352 to i64
  %1354 = getelementptr inbounds i32, i32* %1350, i64 %1353
  %1355 = load i32, i32* %1354, align 4
  %1356 = load i32, i32* %22, align 4
  %1357 = add nsw i32 %1355, %1356
  %1358 = add nsw i32 %1357, 1
  %1359 = sext i32 %1358 to i64
  %1360 = getelementptr inbounds double, double* %1349, i64 %1359
  %1361 = load double, double* %1360, align 8
  %1362 = fmul double %1348, %1361
  %1363 = load double*, double** %37, align 8
  %1364 = load i32, i32* %19, align 4
  %1365 = load i32, i32* %21, align 4
  %1366 = sub nsw i32 %1364, %1365
  %1367 = sext i32 %1366 to i64
  %1368 = getelementptr inbounds double, double* %1363, i64 %1367
  %1369 = load double, double* %1368, align 8
  %1370 = fmul double %1362, %1369
  store double %1370, double* %29, align 8
  %1371 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %1372 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %1371, i32 0, i32 0
  %1373 = load i32, i32* %1372, align 8
  %1374 = icmp eq i32 %1373, 0
  br i1 %1374, label %1375, label %1397

1375:                                             ; preds = %1339
  %1376 = load i32, i32* %15, align 4
  %1377 = load i16*, i16** %9, align 8
  %1378 = load i32, i32* %20, align 4
  %1379 = sub nsw i32 %1378, 1
  %1380 = sext i32 %1379 to i64
  %1381 = getelementptr inbounds i16, i16* %1377, i64 %1380
  %1382 = load i16, i16* %1381, align 2
  %1383 = sext i16 %1382 to i32
  %1384 = load i16*, i16** %9, align 8
  %1385 = load i32, i32* %21, align 4
  %1386 = add nsw i32 %1385, 1
  %1387 = sext i32 %1386 to i64
  %1388 = getelementptr inbounds i16, i16* %1384, i64 %1387
  %1389 = load i16, i16* %1388, align 2
  %1390 = sext i16 %1389 to i32
  %1391 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %40, align 8
  %1392 = call double @exp_E_MLstem(i32 noundef %1376, i32 noundef %1383, i32 noundef %1390, %struct.vrna_exp_param_s* noundef %1391)
  %1393 = load double, double* %31, align 8
  %1394 = fmul double %1392, %1393
  %1395 = load double, double* %29, align 8
  %1396 = fmul double %1395, %1394
  store double %1396, double* %29, align 8
  br label %1446

1397:                                             ; preds = %1339
  store i32 0, i32* %13, align 4
  br label %1398

1398:                                             ; preds = %1436, %1397
  %1399 = load i32, i32* %13, align 4
  %1400 = load i32, i32* %14, align 4
  %1401 = icmp ult i32 %1399, %1400
  br i1 %1401, label %1402, label %1439

1402:                                             ; preds = %1398
  %1403 = load i32*, i32** %25, align 8
  %1404 = load i32*, i32** %17, align 8
  %1405 = load i32, i32* %13, align 4
  %1406 = zext i32 %1405 to i64
  %1407 = getelementptr inbounds i32, i32* %1404, i64 %1406
  %1408 = load i32, i32* %1407, align 4
  %1409 = zext i32 %1408 to i64
  %1410 = getelementptr inbounds i32, i32* %1403, i64 %1409
  %1411 = load i32, i32* %1410, align 4
  %1412 = load i16**, i16*** %11, align 8
  %1413 = load i32, i32* %13, align 4
  %1414 = zext i32 %1413 to i64
  %1415 = getelementptr inbounds i16*, i16** %1412, i64 %1414
  %1416 = load i16*, i16** %1415, align 8
  %1417 = load i32, i32* %20, align 4
  %1418 = sext i32 %1417 to i64
  %1419 = getelementptr inbounds i16, i16* %1416, i64 %1418
  %1420 = load i16, i16* %1419, align 2
  %1421 = sext i16 %1420 to i32
  %1422 = load i16**, i16*** %12, align 8
  %1423 = load i32, i32* %13, align 4
  %1424 = zext i32 %1423 to i64
  %1425 = getelementptr inbounds i16*, i16** %1422, i64 %1424
  %1426 = load i16*, i16** %1425, align 8
  %1427 = load i32, i32* %21, align 4
  %1428 = sext i32 %1427 to i64
  %1429 = getelementptr inbounds i16, i16* %1426, i64 %1428
  %1430 = load i16, i16* %1429, align 2
  %1431 = sext i16 %1430 to i32
  %1432 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %40, align 8
  %1433 = call double @exp_E_MLstem(i32 noundef %1411, i32 noundef %1421, i32 noundef %1431, %struct.vrna_exp_param_s* noundef %1432)
  %1434 = load double, double* %29, align 8
  %1435 = fmul double %1434, %1433
  store double %1435, double* %29, align 8
  br label %1436

1436:                                             ; preds = %1402
  %1437 = load i32, i32* %13, align 4
  %1438 = add i32 %1437, 1
  store i32 %1438, i32* %13, align 4
  br label %1398, !llvm.loop !71

1439:                                             ; preds = %1398
  %1440 = load double, double* %31, align 8
  %1441 = load i32, i32* %14, align 4
  %1442 = uitofp i32 %1441 to double
  %1443 = call double @pow(double noundef %1440, double noundef %1442) #5
  %1444 = load double, double* %29, align 8
  %1445 = fmul double %1444, %1443
  store double %1445, double* %29, align 8
  br label %1446

1446:                                             ; preds = %1439, %1375
  %1447 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1448 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %1447, i32 0, i32 13
  %1449 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %1448, align 8
  %1450 = icmp ne double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* %1449, null
  br i1 %1450, label %1451, label %1463

1451:                                             ; preds = %1446
  %1452 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1453 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %1452, i32 0, i32 13
  %1454 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %1453, align 8
  %1455 = load i32, i32* %20, align 4
  %1456 = load i32, i32* %19, align 4
  %1457 = load i32, i32* %20, align 4
  %1458 = load i32, i32* %21, align 4
  %1459 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1460 = call double %1454(i32 noundef %1455, i32 noundef %1456, i32 noundef %1457, i32 noundef %1458, %struct.sc_mb_exp_dat* noundef %1459)
  %1461 = load double, double* %29, align 8
  %1462 = fmul double %1461, %1460
  store double %1462, double* %29, align 8
  br label %1463

1463:                                             ; preds = %1451, %1446
  %1464 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1465 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %1464, i32 0, i32 14
  %1466 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %1465, align 8
  %1467 = icmp ne double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* %1466, null
  br i1 %1467, label %1468, label %1481

1468:                                             ; preds = %1463
  %1469 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1470 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %1469, i32 0, i32 14
  %1471 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %1470, align 8
  %1472 = load i32, i32* %20, align 4
  %1473 = sub nsw i32 %1472, 1
  %1474 = load i32, i32* %22, align 4
  %1475 = load i32, i32* %22, align 4
  %1476 = add nsw i32 %1475, 1
  %1477 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1478 = call double %1471(i32 noundef 1, i32 noundef %1473, i32 noundef %1474, i32 noundef %1476, %struct.sc_mb_exp_dat* noundef %1477)
  %1479 = load double, double* %29, align 8
  %1480 = fmul double %1479, %1478
  store double %1480, double* %29, align 8
  br label %1481

1481:                                             ; preds = %1468, %1463
  %1482 = load double, double* %29, align 8
  %1483 = load double, double* %62, align 8
  %1484 = load double, double* %30, align 8
  %1485 = call double @llvm.fmuladd.f64(double %1482, double %1483, double %1484)
  store double %1485, double* %30, align 8
  br label %1486

1486:                                             ; preds = %1481, %1327, %1316
  br label %1487

1487:                                             ; preds = %1486
  %1488 = load i32, i32* %22, align 4
  %1489 = add nsw i32 %1488, 1
  store i32 %1489, i32* %22, align 4
  br label %1309, !llvm.loop !72

1490:                                             ; preds = %1309
  br label %1491

1491:                                             ; preds = %1490, %1293
  %1492 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %39, align 8
  %1493 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %1492, i32 0, i32 7
  %1494 = load i32*, i32** %1493, align 8
  %1495 = getelementptr inbounds i32, i32* %1494, i64 1
  %1496 = load i32, i32* %1495, align 4
  %1497 = load i32, i32* %20, align 4
  %1498 = sub nsw i32 %1497, 1
  %1499 = icmp sge i32 %1496, %1498
  br i1 %1499, label %1500, label %1688

1500:                                             ; preds = %1491
  %1501 = load i32, i32* %21, align 4
  %1502 = load i32, i32* %28, align 4
  %1503 = add nsw i32 %1501, %1502
  %1504 = add nsw i32 %1503, 2
  store i32 %1504, i32* %22, align 4
  br label %1505

1505:                                             ; preds = %1684, %1500
  %1506 = load i32, i32* %22, align 4
  %1507 = load i32, i32* %19, align 4
  %1508 = load i32, i32* %28, align 4
  %1509 = sub nsw i32 %1507, %1508
  %1510 = sub nsw i32 %1509, 1
  %1511 = icmp slt i32 %1506, %1510
  br i1 %1511, label %1512, label %1687

1512:                                             ; preds = %1505
  %1513 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %44, align 8
  %1514 = load i32, i32* %21, align 4
  %1515 = load i32, i32* %20, align 4
  %1516 = load i32, i32* %21, align 4
  %1517 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %43, align 8
  %1518 = bitcast %struct.hc_mb_def_dat* %1517 to i8*
  %1519 = call zeroext i8 %1513(i32 noundef 1, i32 noundef %1514, i32 noundef %1515, i32 noundef %1516, i8 noundef zeroext 7, i8* noundef %1518)
  %1520 = zext i8 %1519 to i32
  %1521 = icmp ne i32 %1520, 0
  br i1 %1521, label %1522, label %1683

1522:                                             ; preds = %1512
  %1523 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %44, align 8
  %1524 = load i32, i32* %21, align 4
  %1525 = add nsw i32 %1524, 1
  %1526 = load i32, i32* %19, align 4
  %1527 = load i32, i32* %22, align 4
  %1528 = load i32, i32* %22, align 4
  %1529 = add nsw i32 %1528, 1
  %1530 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %43, align 8
  %1531 = bitcast %struct.hc_mb_def_dat* %1530 to i8*
  %1532 = call zeroext i8 %1523(i32 noundef %1525, i32 noundef %1526, i32 noundef %1527, i32 noundef %1529, i8 noundef zeroext 5, i8* noundef %1531)
  %1533 = zext i8 %1532 to i32
  %1534 = icmp ne i32 %1533, 0
  br i1 %1534, label %1535, label %1683

1535:                                             ; preds = %1522
  %1536 = load double*, double** %33, align 8
  %1537 = load i32*, i32** %26, align 8
  %1538 = load i32, i32* %21, align 4
  %1539 = add nsw i32 %1538, 1
  %1540 = sext i32 %1539 to i64
  %1541 = getelementptr inbounds i32, i32* %1537, i64 %1540
  %1542 = load i32, i32* %1541, align 4
  %1543 = load i32, i32* %22, align 4
  %1544 = sub nsw i32 %1542, %1543
  %1545 = sext i32 %1544 to i64
  %1546 = getelementptr inbounds double, double* %1536, i64 %1545
  %1547 = load double, double* %1546, align 8
  %1548 = load double*, double** %34, align 8
  %1549 = load i32*, i32** %27, align 8
  %1550 = load i32, i32* %19, align 4
  %1551 = sext i32 %1550 to i64
  %1552 = getelementptr inbounds i32, i32* %1549, i64 %1551
  %1553 = load i32, i32* %1552, align 4
  %1554 = load i32, i32* %22, align 4
  %1555 = add nsw i32 %1553, %1554
  %1556 = add nsw i32 %1555, 1
  %1557 = sext i32 %1556 to i64
  %1558 = getelementptr inbounds double, double* %1548, i64 %1557
  %1559 = load double, double* %1558, align 8
  %1560 = fmul double %1547, %1559
  %1561 = load double*, double** %37, align 8
  %1562 = load i32, i32* %20, align 4
  %1563 = sub nsw i32 %1562, 1
  %1564 = sext i32 %1563 to i64
  %1565 = getelementptr inbounds double, double* %1561, i64 %1564
  %1566 = load double, double* %1565, align 8
  %1567 = fmul double %1560, %1566
  store double %1567, double* %29, align 8
  %1568 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %1569 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %1568, i32 0, i32 0
  %1570 = load i32, i32* %1569, align 8
  %1571 = icmp eq i32 %1570, 0
  br i1 %1571, label %1572, label %1594

1572:                                             ; preds = %1535
  %1573 = load i32, i32* %15, align 4
  %1574 = load i16*, i16** %9, align 8
  %1575 = load i32, i32* %20, align 4
  %1576 = sub nsw i32 %1575, 1
  %1577 = sext i32 %1576 to i64
  %1578 = getelementptr inbounds i16, i16* %1574, i64 %1577
  %1579 = load i16, i16* %1578, align 2
  %1580 = sext i16 %1579 to i32
  %1581 = load i16*, i16** %9, align 8
  %1582 = load i32, i32* %21, align 4
  %1583 = add nsw i32 %1582, 1
  %1584 = sext i32 %1583 to i64
  %1585 = getelementptr inbounds i16, i16* %1581, i64 %1584
  %1586 = load i16, i16* %1585, align 2
  %1587 = sext i16 %1586 to i32
  %1588 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %40, align 8
  %1589 = call double @exp_E_MLstem(i32 noundef %1573, i32 noundef %1580, i32 noundef %1587, %struct.vrna_exp_param_s* noundef %1588)
  %1590 = load double, double* %31, align 8
  %1591 = fmul double %1589, %1590
  %1592 = load double, double* %29, align 8
  %1593 = fmul double %1592, %1591
  store double %1593, double* %29, align 8
  br label %1643

1594:                                             ; preds = %1535
  store i32 0, i32* %13, align 4
  br label %1595

1595:                                             ; preds = %1633, %1594
  %1596 = load i32, i32* %13, align 4
  %1597 = load i32, i32* %14, align 4
  %1598 = icmp ult i32 %1596, %1597
  br i1 %1598, label %1599, label %1636

1599:                                             ; preds = %1595
  %1600 = load i32*, i32** %25, align 8
  %1601 = load i32*, i32** %17, align 8
  %1602 = load i32, i32* %13, align 4
  %1603 = zext i32 %1602 to i64
  %1604 = getelementptr inbounds i32, i32* %1601, i64 %1603
  %1605 = load i32, i32* %1604, align 4
  %1606 = zext i32 %1605 to i64
  %1607 = getelementptr inbounds i32, i32* %1600, i64 %1606
  %1608 = load i32, i32* %1607, align 4
  %1609 = load i16**, i16*** %11, align 8
  %1610 = load i32, i32* %13, align 4
  %1611 = zext i32 %1610 to i64
  %1612 = getelementptr inbounds i16*, i16** %1609, i64 %1611
  %1613 = load i16*, i16** %1612, align 8
  %1614 = load i32, i32* %20, align 4
  %1615 = sext i32 %1614 to i64
  %1616 = getelementptr inbounds i16, i16* %1613, i64 %1615
  %1617 = load i16, i16* %1616, align 2
  %1618 = sext i16 %1617 to i32
  %1619 = load i16**, i16*** %12, align 8
  %1620 = load i32, i32* %13, align 4
  %1621 = zext i32 %1620 to i64
  %1622 = getelementptr inbounds i16*, i16** %1619, i64 %1621
  %1623 = load i16*, i16** %1622, align 8
  %1624 = load i32, i32* %21, align 4
  %1625 = sext i32 %1624 to i64
  %1626 = getelementptr inbounds i16, i16* %1623, i64 %1625
  %1627 = load i16, i16* %1626, align 2
  %1628 = sext i16 %1627 to i32
  %1629 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %40, align 8
  %1630 = call double @exp_E_MLstem(i32 noundef %1608, i32 noundef %1618, i32 noundef %1628, %struct.vrna_exp_param_s* noundef %1629)
  %1631 = load double, double* %29, align 8
  %1632 = fmul double %1631, %1630
  store double %1632, double* %29, align 8
  br label %1633

1633:                                             ; preds = %1599
  %1634 = load i32, i32* %13, align 4
  %1635 = add i32 %1634, 1
  store i32 %1635, i32* %13, align 4
  br label %1595, !llvm.loop !73

1636:                                             ; preds = %1595
  %1637 = load double, double* %31, align 8
  %1638 = load i32, i32* %14, align 4
  %1639 = uitofp i32 %1638 to double
  %1640 = call double @pow(double noundef %1637, double noundef %1639) #5
  %1641 = load double, double* %29, align 8
  %1642 = fmul double %1641, %1640
  store double %1642, double* %29, align 8
  br label %1643

1643:                                             ; preds = %1636, %1572
  %1644 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1645 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %1644, i32 0, i32 13
  %1646 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %1645, align 8
  %1647 = icmp ne double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* %1646, null
  br i1 %1647, label %1648, label %1659

1648:                                             ; preds = %1643
  %1649 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1650 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %1649, i32 0, i32 13
  %1651 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %1650, align 8
  %1652 = load i32, i32* %21, align 4
  %1653 = load i32, i32* %20, align 4
  %1654 = load i32, i32* %21, align 4
  %1655 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1656 = call double %1651(i32 noundef 1, i32 noundef %1652, i32 noundef %1653, i32 noundef %1654, %struct.sc_mb_exp_dat* noundef %1655)
  %1657 = load double, double* %29, align 8
  %1658 = fmul double %1657, %1656
  store double %1658, double* %29, align 8
  br label %1659

1659:                                             ; preds = %1648, %1643
  %1660 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1661 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %1660, i32 0, i32 14
  %1662 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %1661, align 8
  %1663 = icmp ne double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* %1662, null
  br i1 %1663, label %1664, label %1678

1664:                                             ; preds = %1659
  %1665 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1666 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %1665, i32 0, i32 14
  %1667 = load double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)*, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %1666, align 8
  %1668 = load i32, i32* %21, align 4
  %1669 = add nsw i32 %1668, 1
  %1670 = load i32, i32* %19, align 4
  %1671 = load i32, i32* %22, align 4
  %1672 = load i32, i32* %22, align 4
  %1673 = add nsw i32 %1672, 1
  %1674 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %46, align 8
  %1675 = call double %1667(i32 noundef %1669, i32 noundef %1670, i32 noundef %1671, i32 noundef %1673, %struct.sc_mb_exp_dat* noundef %1674)
  %1676 = load double, double* %29, align 8
  %1677 = fmul double %1676, %1675
  store double %1677, double* %29, align 8
  br label %1678

1678:                                             ; preds = %1664, %1659
  %1679 = load double, double* %29, align 8
  %1680 = load double, double* %62, align 8
  %1681 = load double, double* %30, align 8
  %1682 = call double @llvm.fmuladd.f64(double %1679, double %1680, double %1681)
  store double %1682, double* %30, align 8
  br label %1683

1683:                                             ; preds = %1678, %1522, %1512
  br label %1684

1684:                                             ; preds = %1683
  %1685 = load i32, i32* %22, align 4
  %1686 = add nsw i32 %1685, 1
  store i32 %1686, i32* %22, align 4
  br label %1505, !llvm.loop !74

1687:                                             ; preds = %1505
  br label %1688

1688:                                             ; preds = %1687, %1491
  br label %1689

1689:                                             ; preds = %1688, %1152
  %1690 = load double, double* %30, align 8
  %1691 = load double*, double** %35, align 8
  %1692 = load i32, i32* %24, align 4
  %1693 = sext i32 %1692 to i64
  %1694 = getelementptr inbounds double, double* %1691, i64 %1693
  %1695 = load double, double* %1694, align 8
  %1696 = fmul double %1695, %1690
  store double %1696, double* %1694, align 8
  br label %1702

1697:                                             ; preds = %300
  %1698 = load double*, double** %35, align 8
  %1699 = load i32, i32* %24, align 4
  %1700 = sext i32 %1699 to i64
  %1701 = getelementptr inbounds double, double* %1698, i64 %1700
  store double 0.000000e+00, double* %1701, align 8
  br label %1702

1702:                                             ; preds = %1697, %1689
  br label %1703

1703:                                             ; preds = %1702
  %1704 = load i32, i32* %21, align 4
  %1705 = add nsw i32 %1704, 1
  store i32 %1705, i32* %21, align 4
  br label %296, !llvm.loop !75

1706:                                             ; preds = %296
  br label %1707

1707:                                             ; preds = %1706
  %1708 = load i32, i32* %20, align 4
  %1709 = add nsw i32 %1708, 1
  store i32 %1709, i32* %20, align 4
  br label %255, !llvm.loop !76

1710:                                             ; preds = %255
  %1711 = load i32*, i32** %17, align 8
  %1712 = bitcast i32* %1711 to i8*
  call void @free(i8* noundef %1712) #5
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @compute_bpp_external(%struct.vrna_fc_s* noundef %0, %struct.constraints_helper* noundef %1) #0 {
  %3 = alloca %struct.vrna_fc_s*, align 8
  %4 = alloca %struct.constraints_helper*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  %11 = alloca double*, align 8
  %12 = alloca double*, align 8
  %13 = alloca double*, align 8
  %14 = alloca double*, align 8
  %15 = alloca %struct.vrna_exp_param_s*, align 8
  %16 = alloca %struct.vrna_md_s*, align 8
  %17 = alloca %struct.vrna_mx_pf_s*, align 8
  %18 = alloca %struct.hc_ext_def_dat*, align 8
  %19 = alloca i8 (i32, i32, i32, i32, i8, i8*)*, align 8
  %20 = alloca double (%struct.vrna_fc_s*, i32, i32, %struct.constraints_helper*)*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %3, align 8
  store %struct.constraints_helper* %1, %struct.constraints_helper** %4, align 8
  %21 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %22 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %21, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %7, align 4
  %24 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %25 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %24, i32 0, i32 16
  %26 = load i32*, i32** %25, align 8
  store i32* %26, i32** %9, align 8
  %27 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %28 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %27, i32 0, i32 15
  %29 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %28, align 8
  store %struct.vrna_exp_param_s* %29, %struct.vrna_exp_param_s** %15, align 8
  %30 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %15, align 8
  %31 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %30, i32 0, i32 40
  store %struct.vrna_md_s* %31, %struct.vrna_md_s** %16, align 8
  %32 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %33 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %32, i32 0, i32 13
  %34 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %33, align 8
  store %struct.vrna_mx_pf_s* %34, %struct.vrna_mx_pf_s** %17, align 8
  %35 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %17, align 8
  %36 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %35, i32 0, i32 4
  %37 = bitcast %union.anon.5* %36 to %struct.anon.6*
  %38 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %37, i32 0, i32 1
  %39 = load double*, double** %38, align 8
  store double* %39, double** %14, align 8
  %40 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %17, align 8
  %41 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %40, i32 0, i32 4
  %42 = bitcast %union.anon.5* %41 to %struct.anon.6*
  %43 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %42, i32 0, i32 4
  %44 = load double*, double** %43, align 8
  store double* %44, double** %11, align 8
  %45 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %17, align 8
  %46 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %45, i32 0, i32 4
  %47 = bitcast %union.anon.5* %46 to %struct.anon.6*
  %48 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %47, i32 0, i32 5
  %49 = load double*, double** %48, align 8
  store double* %49, double** %12, align 8
  %50 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %17, align 8
  %51 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %50, i32 0, i32 4
  %52 = bitcast %union.anon.5* %51 to %struct.anon.6*
  %53 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %52, i32 0, i32 6
  %54 = load double*, double** %53, align 8
  store double* %54, double** %13, align 8
  %55 = load %struct.vrna_md_s*, %struct.vrna_md_s** %16, align 8
  %56 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %55, i32 0, i32 18
  %57 = load i32, i32* %56, align 4
  store i32 %57, i32* %8, align 4
  %58 = load %struct.constraints_helper*, %struct.constraints_helper** %4, align 8
  %59 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %58, i32 0, i32 0
  store %struct.hc_ext_def_dat* %59, %struct.hc_ext_def_dat** %18, align 8
  %60 = load %struct.constraints_helper*, %struct.constraints_helper** %4, align 8
  %61 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %60, i32 0, i32 1
  %62 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %61, align 8
  store i8 (i32, i32, i32, i32, i8, i8*)* %62, i8 (i32, i32, i32, i32, i8, i8*)** %19, align 8
  %63 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %64 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %63, i32 0, i32 0
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %65, 0
  %67 = zext i1 %66 to i64
  %68 = select i1 %66, double (%struct.vrna_fc_s*, i32, i32, %struct.constraints_helper*)* @contrib_ext_pair, double (%struct.vrna_fc_s*, i32, i32, %struct.constraints_helper*)* @contrib_ext_pair_comparative
  store double (%struct.vrna_fc_s*, i32, i32, %struct.constraints_helper*)* %68, double (%struct.vrna_fc_s*, i32, i32, %struct.constraints_helper*)** %20, align 8
  store i32 1, i32* %5, align 4
  br label %69

69:                                               ; preds = %151, %2
  %70 = load i32, i32* %5, align 4
  %71 = load i32, i32* %7, align 4
  %72 = icmp ule i32 %70, %71
  br i1 %72, label %73, label %154

73:                                               ; preds = %69
  %74 = load i32, i32* %5, align 4
  %75 = load i32, i32* %8, align 4
  %76 = add i32 %74, %75
  %77 = add i32 %76, 1
  store i32 %77, i32* %6, align 4
  br label %78

78:                                               ; preds = %147, %73
  %79 = load i32, i32* %6, align 4
  %80 = load i32, i32* %7, align 4
  %81 = icmp ule i32 %79, %80
  br i1 %81, label %82, label %150

82:                                               ; preds = %78
  %83 = load i32*, i32** %9, align 8
  %84 = load i32, i32* %5, align 4
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i32, i32* %83, i64 %85
  %87 = load i32, i32* %86, align 4
  %88 = load i32, i32* %6, align 4
  %89 = sub i32 %87, %88
  store i32 %89, i32* %10, align 4
  %90 = load double*, double** %11, align 8
  %91 = load i32, i32* %10, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds double, double* %90, i64 %92
  store double 0.000000e+00, double* %93, align 8
  %94 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %19, align 8
  %95 = load i32, i32* %7, align 4
  %96 = load i32, i32* %5, align 4
  %97 = load i32, i32* %6, align 4
  %98 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %18, align 8
  %99 = bitcast %struct.hc_ext_def_dat* %98 to i8*
  %100 = call zeroext i8 %94(i32 noundef 1, i32 noundef %95, i32 noundef %96, i32 noundef %97, i8 noundef zeroext 17, i8* noundef %99)
  %101 = zext i8 %100 to i32
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %103, label %146

103:                                              ; preds = %82
  %104 = load double*, double** %14, align 8
  %105 = load i32, i32* %10, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds double, double* %104, i64 %106
  %108 = load double, double* %107, align 8
  %109 = fcmp ogt double %108, 0.000000e+00
  br i1 %109, label %110, label %146

110:                                              ; preds = %103
  %111 = load double*, double** %12, align 8
  %112 = load i32, i32* %5, align 4
  %113 = sub i32 %112, 1
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds double, double* %111, i64 %114
  %116 = load double, double* %115, align 8
  %117 = load double*, double** %13, align 8
  %118 = load i32, i32* %6, align 4
  %119 = add i32 %118, 1
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds double, double* %117, i64 %120
  %122 = load double, double* %121, align 8
  %123 = fmul double %116, %122
  %124 = load double*, double** %12, align 8
  %125 = load i32, i32* %7, align 4
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds double, double* %124, i64 %126
  %128 = load double, double* %127, align 8
  %129 = fdiv double %123, %128
  %130 = load double*, double** %11, align 8
  %131 = load i32, i32* %10, align 4
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds double, double* %130, i64 %132
  store double %129, double* %133, align 8
  %134 = load double (%struct.vrna_fc_s*, i32, i32, %struct.constraints_helper*)*, double (%struct.vrna_fc_s*, i32, i32, %struct.constraints_helper*)** %20, align 8
  %135 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %136 = load i32, i32* %5, align 4
  %137 = load i32, i32* %6, align 4
  %138 = load %struct.constraints_helper*, %struct.constraints_helper** %4, align 8
  %139 = call double %134(%struct.vrna_fc_s* noundef %135, i32 noundef %136, i32 noundef %137, %struct.constraints_helper* noundef %138)
  %140 = load double*, double** %11, align 8
  %141 = load i32, i32* %10, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds double, double* %140, i64 %142
  %144 = load double, double* %143, align 8
  %145 = fmul double %144, %139
  store double %145, double* %143, align 8
  br label %146

146:                                              ; preds = %110, %103, %82
  br label %147

147:                                              ; preds = %146
  %148 = load i32, i32* %6, align 4
  %149 = add i32 %148, 1
  store i32 %149, i32* %6, align 4
  br label %78, !llvm.loop !77

150:                                              ; preds = %78
  br label %151

151:                                              ; preds = %150
  %152 = load i32, i32* %5, align 4
  %153 = add i32 %152, 1
  store i32 %153, i32* %5, align 4
  br label %69, !llvm.loop !78

154:                                              ; preds = %69
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @multistrand_update_Y5(%struct.vrna_fc_s* noundef %0, i32 noundef %1, double* noundef %2, double** noundef %3) #0 {
  %5 = alloca %struct.vrna_fc_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca double*, align 8
  %8 = alloca double**, align 8
  %9 = alloca i16*, align 8
  %10 = alloca i16*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32*, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32*, align 8
  %19 = alloca double*, align 8
  %20 = alloca double*, align 8
  %21 = alloca double*, align 8
  %22 = alloca %struct.vrna_md_s*, align 8
  %23 = alloca %struct.vrna_exp_param_s*, align 8
  %24 = alloca i32, align 4
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store double* %2, double** %7, align 8
  store double** %3, double*** %8, align 8
  %25 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %26 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %25, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %16, align 4
  %28 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %29 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %28, i32 0, i32 3
  %30 = load i32*, i32** %29, align 8
  store i32* %30, i32** %14, align 8
  %31 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %32 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %31, i32 0, i32 7
  %33 = load i32*, i32** %32, align 8
  store i32* %33, i32** %13, align 8
  %34 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %35 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %34, i32 0, i32 16
  %36 = load i32*, i32** %35, align 8
  store i32* %36, i32** %18, align 8
  %37 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %38 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %37, i32 0, i32 13
  %39 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %38, align 8
  %40 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %39, i32 0, i32 4
  %41 = bitcast %union.anon.5* %40 to %struct.anon.6*
  %42 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %41, i32 0, i32 0
  %43 = load double*, double** %42, align 8
  store double* %43, double** %20, align 8
  %44 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %45 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %44, i32 0, i32 13
  %46 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %45, align 8
  %47 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %46, i32 0, i32 4
  %48 = bitcast %union.anon.5* %47 to %struct.anon.6*
  %49 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %48, i32 0, i32 4
  %50 = load double*, double** %49, align 8
  store double* %50, double** %19, align 8
  %51 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %52 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %51, i32 0, i32 13
  %53 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %52, align 8
  %54 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %53, i32 0, i32 2
  %55 = load double*, double** %54, align 8
  store double* %55, double** %21, align 8
  %56 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %57 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %56, i32 0, i32 15
  %58 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %57, align 8
  store %struct.vrna_exp_param_s* %58, %struct.vrna_exp_param_s** %23, align 8
  %59 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %23, align 8
  %60 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %59, i32 0, i32 40
  store %struct.vrna_md_s* %60, %struct.vrna_md_s** %22, align 8
  %61 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %62 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %61, i32 0, i32 24
  %63 = bitcast %union.anon.9* %62 to %struct.anon.10*
  %64 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %63, i32 0, i32 2
  %65 = load i16*, i16** %64, align 8
  store i16* %65, i16** %9, align 8
  %66 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %67 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %66, i32 0, i32 24
  %68 = bitcast %union.anon.9* %67 to %struct.anon.10*
  %69 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %68, i32 0, i32 1
  %70 = load i16*, i16** %69, align 8
  store i16* %70, i16** %10, align 8
  store i32 0, i32* %12, align 4
  br label %71

71:                                               ; preds = %425, %4
  %72 = load i32, i32* %12, align 4
  %73 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %74 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %73, i32 0, i32 8
  %75 = load i32, i32* %74, align 8
  %76 = icmp ult i32 %72, %75
  br i1 %76, label %77, label %428

77:                                               ; preds = %71
  %78 = load double*, double** %7, align 8
  %79 = load i32, i32* %12, align 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds double, double* %78, i64 %80
  store double 0.000000e+00, double* %81, align 8
  %82 = load i32*, i32** %13, align 8
  %83 = load i32, i32* %12, align 4
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds i32, i32* %82, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = load i32, i32* %6, align 4
  %88 = icmp ult i32 %86, %87
  br i1 %88, label %89, label %424

89:                                               ; preds = %77
  %90 = load i32*, i32** %14, align 8
  %91 = load i32, i32* %6, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i32, i32* %90, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = load i32*, i32** %14, align 8
  %96 = load i32, i32* %6, align 4
  %97 = add nsw i32 %96, 1
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i32, i32* %95, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = icmp eq i32 %94, %100
  br i1 %101, label %102, label %424

102:                                              ; preds = %89
  %103 = load i32*, i32** %13, align 8
  %104 = load i32, i32* %12, align 4
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds i32, i32* %103, i64 %105
  %107 = load i32, i32* %106, align 4
  store i32 %107, i32* %17, align 4
  %108 = load i32, i32* %6, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %24, align 4
  %110 = load double**, double*** %8, align 8
  %111 = load i32, i32* %12, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds double*, double** %110, i64 %112
  %114 = load double*, double** %113, align 8
  %115 = load i32, i32* %24, align 4
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds double, double* %114, i64 %116
  store double 0.000000e+00, double* %117, align 8
  %118 = load double*, double** %19, align 8
  %119 = load i32*, i32** %18, align 8
  %120 = load i32, i32* %17, align 4
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds i32, i32* %119, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = load i32, i32* %24, align 4
  %125 = sub i32 %123, %124
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds double, double* %118, i64 %126
  %128 = load double, double* %127, align 8
  %129 = fcmp ogt double %128, 0.000000e+00
  br i1 %129, label %130, label %180

130:                                              ; preds = %102
  %131 = load i16*, i16** %9, align 8
  %132 = load i32, i32* %24, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds i16, i16* %131, i64 %133
  %135 = load i16, i16* %134, align 2
  %136 = sext i16 %135 to i32
  %137 = load i16*, i16** %9, align 8
  %138 = load i32, i32* %17, align 4
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds i16, i16* %137, i64 %139
  %141 = load i16, i16* %140, align 2
  %142 = sext i16 %141 to i32
  %143 = load %struct.vrna_md_s*, %struct.vrna_md_s** %22, align 8
  %144 = call i32 @vrna_get_ptype_md(i32 noundef %136, i32 noundef %142, %struct.vrna_md_s* noundef %143)
  store i32 %144, i32* %15, align 4
  %145 = load double*, double** %19, align 8
  %146 = load i32*, i32** %18, align 8
  %147 = load i32, i32* %17, align 4
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds i32, i32* %146, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = load i32, i32* %24, align 4
  %152 = sub i32 %150, %151
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds double, double* %145, i64 %153
  %155 = load double, double* %154, align 8
  %156 = load i32, i32* %15, align 4
  %157 = load i16*, i16** %10, align 8
  %158 = load i32, i32* %24, align 4
  %159 = sub i32 %158, 1
  %160 = zext i32 %159 to i64
  %161 = getelementptr inbounds i16, i16* %157, i64 %160
  %162 = load i16, i16* %161, align 2
  %163 = sext i16 %162 to i32
  %164 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %23, align 8
  %165 = call double @vrna_exp_E_ext_stem(i32 noundef %156, i32 noundef %163, i32 noundef -1, %struct.vrna_exp_param_s* noundef %164)
  %166 = fmul double %155, %165
  %167 = load double*, double** %21, align 8
  %168 = getelementptr inbounds double, double* %167, i64 2
  %169 = load double, double* %168, align 8
  %170 = load double**, double*** %8, align 8
  %171 = load i32, i32* %12, align 4
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds double*, double** %170, i64 %172
  %174 = load double*, double** %173, align 8
  %175 = load i32, i32* %24, align 4
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds double, double* %174, i64 %176
  %178 = load double, double* %177, align 8
  %179 = call double @llvm.fmuladd.f64(double %166, double %169, double %178)
  store double %179, double* %177, align 8
  br label %180

180:                                              ; preds = %130, %102
  store i32 1, i32* %11, align 4
  br label %181

181:                                              ; preds = %282, %180
  %182 = load i32, i32* %11, align 4
  %183 = load i32, i32* %17, align 4
  %184 = icmp ult i32 %182, %183
  br i1 %184, label %185, label %285

185:                                              ; preds = %181
  %186 = load double*, double** %19, align 8
  %187 = load i32*, i32** %18, align 8
  %188 = load i32, i32* %11, align 4
  %189 = zext i32 %188 to i64
  %190 = getelementptr inbounds i32, i32* %187, i64 %189
  %191 = load i32, i32* %190, align 4
  %192 = load i32, i32* %24, align 4
  %193 = sub i32 %191, %192
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds double, double* %186, i64 %194
  %196 = load double, double* %195, align 8
  %197 = fcmp ogt double %196, 0.000000e+00
  br i1 %197, label %198, label %281

198:                                              ; preds = %185
  %199 = load i32*, i32** %14, align 8
  %200 = load i32, i32* %11, align 4
  %201 = zext i32 %200 to i64
  %202 = getelementptr inbounds i32, i32* %199, i64 %201
  %203 = load i32, i32* %202, align 4
  %204 = load i32*, i32** %14, align 8
  %205 = load i32, i32* %11, align 4
  %206 = add i32 %205, 1
  %207 = zext i32 %206 to i64
  %208 = getelementptr inbounds i32, i32* %204, i64 %207
  %209 = load i32, i32* %208, align 4
  %210 = icmp eq i32 %203, %209
  br i1 %210, label %211, label %281

211:                                              ; preds = %198
  %212 = load i16*, i16** %9, align 8
  %213 = load i32, i32* %24, align 4
  %214 = zext i32 %213 to i64
  %215 = getelementptr inbounds i16, i16* %212, i64 %214
  %216 = load i16, i16* %215, align 2
  %217 = sext i16 %216 to i32
  %218 = load i16*, i16** %9, align 8
  %219 = load i32, i32* %11, align 4
  %220 = zext i32 %219 to i64
  %221 = getelementptr inbounds i16, i16* %218, i64 %220
  %222 = load i16, i16* %221, align 2
  %223 = sext i16 %222 to i32
  %224 = load %struct.vrna_md_s*, %struct.vrna_md_s** %22, align 8
  %225 = call i32 @vrna_get_ptype_md(i32 noundef %217, i32 noundef %223, %struct.vrna_md_s* noundef %224)
  store i32 %225, i32* %15, align 4
  %226 = load double*, double** %19, align 8
  %227 = load i32*, i32** %18, align 8
  %228 = load i32, i32* %11, align 4
  %229 = zext i32 %228 to i64
  %230 = getelementptr inbounds i32, i32* %227, i64 %229
  %231 = load i32, i32* %230, align 4
  %232 = load i32, i32* %24, align 4
  %233 = sub i32 %231, %232
  %234 = zext i32 %233 to i64
  %235 = getelementptr inbounds double, double* %226, i64 %234
  %236 = load double, double* %235, align 8
  %237 = load i32, i32* %15, align 4
  %238 = load i16*, i16** %10, align 8
  %239 = load i32, i32* %24, align 4
  %240 = sub i32 %239, 1
  %241 = zext i32 %240 to i64
  %242 = getelementptr inbounds i16, i16* %238, i64 %241
  %243 = load i16, i16* %242, align 2
  %244 = sext i16 %243 to i32
  %245 = load i16*, i16** %10, align 8
  %246 = load i32, i32* %11, align 4
  %247 = add i32 %246, 1
  %248 = zext i32 %247 to i64
  %249 = getelementptr inbounds i16, i16* %245, i64 %248
  %250 = load i16, i16* %249, align 2
  %251 = sext i16 %250 to i32
  %252 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %23, align 8
  %253 = call double @vrna_exp_E_ext_stem(i32 noundef %237, i32 noundef %244, i32 noundef %251, %struct.vrna_exp_param_s* noundef %252)
  %254 = fmul double %236, %253
  %255 = load double*, double** %20, align 8
  %256 = load i32*, i32** %18, align 8
  %257 = load i32, i32* %11, align 4
  %258 = add i32 %257, 1
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds i32, i32* %256, i64 %259
  %261 = load i32, i32* %260, align 4
  %262 = load i32, i32* %17, align 4
  %263 = sub i32 %261, %262
  %264 = zext i32 %263 to i64
  %265 = getelementptr inbounds double, double* %255, i64 %264
  %266 = load double, double* %265, align 8
  %267 = fmul double %254, %266
  %268 = load double*, double** %21, align 8
  %269 = getelementptr inbounds double, double* %268, i64 2
  %270 = load double, double* %269, align 8
  %271 = load double**, double*** %8, align 8
  %272 = load i32, i32* %12, align 4
  %273 = zext i32 %272 to i64
  %274 = getelementptr inbounds double*, double** %271, i64 %273
  %275 = load double*, double** %274, align 8
  %276 = load i32, i32* %24, align 4
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds double, double* %275, i64 %277
  %279 = load double, double* %278, align 8
  %280 = call double @llvm.fmuladd.f64(double %267, double %270, double %279)
  store double %280, double* %278, align 8
  br label %281

281:                                              ; preds = %211, %198, %185
  br label %282

282:                                              ; preds = %281
  %283 = load i32, i32* %11, align 4
  %284 = add i32 %283, 1
  store i32 %284, i32* %11, align 4
  br label %181, !llvm.loop !79

285:                                              ; preds = %181
  %286 = load double*, double** %19, align 8
  %287 = load i32*, i32** %18, align 8
  %288 = load i32, i32* %11, align 4
  %289 = zext i32 %288 to i64
  %290 = getelementptr inbounds i32, i32* %287, i64 %289
  %291 = load i32, i32* %290, align 4
  %292 = load i32, i32* %24, align 4
  %293 = sub i32 %291, %292
  %294 = zext i32 %293 to i64
  %295 = getelementptr inbounds double, double* %286, i64 %294
  %296 = load double, double* %295, align 8
  %297 = fcmp ogt double %296, 0.000000e+00
  br i1 %297, label %298, label %368

298:                                              ; preds = %285
  %299 = load i32*, i32** %14, align 8
  %300 = load i32, i32* %11, align 4
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds i32, i32* %299, i64 %301
  %303 = load i32, i32* %302, align 4
  %304 = load i32*, i32** %14, align 8
  %305 = load i32, i32* %11, align 4
  %306 = add i32 %305, 1
  %307 = zext i32 %306 to i64
  %308 = getelementptr inbounds i32, i32* %304, i64 %307
  %309 = load i32, i32* %308, align 4
  %310 = icmp eq i32 %303, %309
  br i1 %310, label %311, label %368

311:                                              ; preds = %298
  %312 = load i16*, i16** %9, align 8
  %313 = load i32, i32* %24, align 4
  %314 = zext i32 %313 to i64
  %315 = getelementptr inbounds i16, i16* %312, i64 %314
  %316 = load i16, i16* %315, align 2
  %317 = sext i16 %316 to i32
  %318 = load i16*, i16** %9, align 8
  %319 = load i32, i32* %11, align 4
  %320 = zext i32 %319 to i64
  %321 = getelementptr inbounds i16, i16* %318, i64 %320
  %322 = load i16, i16* %321, align 2
  %323 = sext i16 %322 to i32
  %324 = load %struct.vrna_md_s*, %struct.vrna_md_s** %22, align 8
  %325 = call i32 @vrna_get_ptype_md(i32 noundef %317, i32 noundef %323, %struct.vrna_md_s* noundef %324)
  store i32 %325, i32* %15, align 4
  %326 = load double*, double** %19, align 8
  %327 = load i32*, i32** %18, align 8
  %328 = load i32, i32* %11, align 4
  %329 = zext i32 %328 to i64
  %330 = getelementptr inbounds i32, i32* %327, i64 %329
  %331 = load i32, i32* %330, align 4
  %332 = load i32, i32* %24, align 4
  %333 = sub i32 %331, %332
  %334 = zext i32 %333 to i64
  %335 = getelementptr inbounds double, double* %326, i64 %334
  %336 = load double, double* %335, align 8
  %337 = load i32, i32* %15, align 4
  %338 = load i16*, i16** %10, align 8
  %339 = load i32, i32* %24, align 4
  %340 = sub i32 %339, 1
  %341 = zext i32 %340 to i64
  %342 = getelementptr inbounds i16, i16* %338, i64 %341
  %343 = load i16, i16* %342, align 2
  %344 = sext i16 %343 to i32
  %345 = load i16*, i16** %10, align 8
  %346 = load i32, i32* %11, align 4
  %347 = add i32 %346, 1
  %348 = zext i32 %347 to i64
  %349 = getelementptr inbounds i16, i16* %345, i64 %348
  %350 = load i16, i16* %349, align 2
  %351 = sext i16 %350 to i32
  %352 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %23, align 8
  %353 = call double @vrna_exp_E_ext_stem(i32 noundef %337, i32 noundef %344, i32 noundef %351, %struct.vrna_exp_param_s* noundef %352)
  %354 = fmul double %336, %353
  %355 = load double*, double** %21, align 8
  %356 = getelementptr inbounds double, double* %355, i64 2
  %357 = load double, double* %356, align 8
  %358 = load double**, double*** %8, align 8
  %359 = load i32, i32* %12, align 4
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds double*, double** %358, i64 %360
  %362 = load double*, double** %361, align 8
  %363 = load i32, i32* %24, align 4
  %364 = zext i32 %363 to i64
  %365 = getelementptr inbounds double, double* %362, i64 %364
  %366 = load double, double* %365, align 8
  %367 = call double @llvm.fmuladd.f64(double %354, double %357, double %366)
  store double %367, double* %365, align 8
  br label %368

368:                                              ; preds = %311, %298, %285
  %369 = load double**, double*** %8, align 8
  %370 = load i32, i32* %12, align 4
  %371 = zext i32 %370 to i64
  %372 = getelementptr inbounds double*, double** %369, i64 %371
  %373 = load double*, double** %372, align 8
  %374 = load i32, i32* %6, align 4
  %375 = add nsw i32 %374, 1
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds double, double* %373, i64 %376
  %378 = load double, double* %377, align 8
  %379 = load double*, double** %7, align 8
  %380 = load i32, i32* %12, align 4
  %381 = zext i32 %380 to i64
  %382 = getelementptr inbounds double, double* %379, i64 %381
  %383 = load double, double* %382, align 8
  %384 = fadd double %383, %378
  store double %384, double* %382, align 8
  %385 = load i32, i32* %6, align 4
  %386 = add nsw i32 %385, 2
  store i32 %386, i32* %24, align 4
  br label %387

387:                                              ; preds = %420, %368
  %388 = load i32, i32* %24, align 4
  %389 = load i32, i32* %16, align 4
  %390 = icmp ule i32 %388, %389
  br i1 %390, label %391, label %423

391:                                              ; preds = %387
  %392 = load double*, double** %20, align 8
  %393 = load i32*, i32** %18, align 8
  %394 = load i32, i32* %6, align 4
  %395 = add nsw i32 %394, 1
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds i32, i32* %393, i64 %396
  %398 = load i32, i32* %397, align 4
  %399 = load i32, i32* %24, align 4
  %400 = sub i32 %399, 1
  %401 = sub i32 %398, %400
  %402 = zext i32 %401 to i64
  %403 = getelementptr inbounds double, double* %392, i64 %402
  %404 = load double, double* %403, align 8
  %405 = load double**, double*** %8, align 8
  %406 = load i32, i32* %12, align 4
  %407 = zext i32 %406 to i64
  %408 = getelementptr inbounds double*, double** %405, i64 %407
  %409 = load double*, double** %408, align 8
  %410 = load i32, i32* %24, align 4
  %411 = zext i32 %410 to i64
  %412 = getelementptr inbounds double, double* %409, i64 %411
  %413 = load double, double* %412, align 8
  %414 = load double*, double** %7, align 8
  %415 = load i32, i32* %12, align 4
  %416 = zext i32 %415 to i64
  %417 = getelementptr inbounds double, double* %414, i64 %416
  %418 = load double, double* %417, align 8
  %419 = call double @llvm.fmuladd.f64(double %404, double %413, double %418)
  store double %419, double* %417, align 8
  br label %420

420:                                              ; preds = %391
  %421 = load i32, i32* %24, align 4
  %422 = add i32 %421, 1
  store i32 %422, i32* %24, align 4
  br label %387, !llvm.loop !80

423:                                              ; preds = %387
  br label %424

424:                                              ; preds = %423, %89, %77
  br label %425

425:                                              ; preds = %424
  %426 = load i32, i32* %12, align 4
  %427 = add i32 %426, 1
  store i32 %427, i32* %12, align 4
  br label %71, !llvm.loop !81

428:                                              ; preds = %71
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @multistrand_update_Y3(%struct.vrna_fc_s* noundef %0, i32 noundef %1, double** noundef %2, double** noundef %3) #0 {
  %5 = alloca %struct.vrna_fc_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca double**, align 8
  %8 = alloca double**, align 8
  %9 = alloca i16*, align 8
  %10 = alloca i16*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32*, align 8
  %19 = alloca i32*, align 8
  %20 = alloca i32*, align 8
  %21 = alloca double*, align 8
  %22 = alloca double*, align 8
  %23 = alloca double*, align 8
  %24 = alloca %struct.vrna_md_s*, align 8
  %25 = alloca %struct.vrna_exp_param_s*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store double** %2, double*** %7, align 8
  store double** %3, double*** %8, align 8
  %26 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %27 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %26, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* %15, align 4
  %29 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %30 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %29, i32 0, i32 3
  %31 = load i32*, i32** %30, align 8
  store i32* %31, i32** %19, align 8
  %32 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %33 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %32, i32 0, i32 6
  %34 = load i32*, i32** %33, align 8
  store i32* %34, i32** %18, align 8
  %35 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %36 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %35, i32 0, i32 24
  %37 = bitcast %union.anon.9* %36 to %struct.anon.10*
  %38 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %37, i32 0, i32 2
  %39 = load i16*, i16** %38, align 8
  store i16* %39, i16** %9, align 8
  %40 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %41 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %40, i32 0, i32 24
  %42 = bitcast %union.anon.9* %41 to %struct.anon.10*
  %43 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %42, i32 0, i32 1
  %44 = load i16*, i16** %43, align 8
  store i16* %44, i16** %10, align 8
  %45 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %46 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %45, i32 0, i32 16
  %47 = load i32*, i32** %46, align 8
  store i32* %47, i32** %20, align 8
  %48 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %49 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %48, i32 0, i32 13
  %50 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %49, align 8
  %51 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %50, i32 0, i32 4
  %52 = bitcast %union.anon.5* %51 to %struct.anon.6*
  %53 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %52, i32 0, i32 0
  %54 = load double*, double** %53, align 8
  store double* %54, double** %21, align 8
  %55 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %56 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %55, i32 0, i32 13
  %57 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %56, align 8
  %58 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %57, i32 0, i32 4
  %59 = bitcast %union.anon.5* %58 to %struct.anon.6*
  %60 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %59, i32 0, i32 4
  %61 = load double*, double** %60, align 8
  store double* %61, double** %22, align 8
  %62 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %63 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %62, i32 0, i32 13
  %64 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %63, align 8
  %65 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %64, i32 0, i32 2
  %66 = load double*, double** %65, align 8
  store double* %66, double** %23, align 8
  %67 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %68 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %67, i32 0, i32 15
  %69 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %68, align 8
  store %struct.vrna_exp_param_s* %69, %struct.vrna_exp_param_s** %25, align 8
  %70 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %25, align 8
  %71 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %70, i32 0, i32 40
  store %struct.vrna_md_s* %71, %struct.vrna_md_s** %24, align 8
  store i32 0, i32* %14, align 4
  br label %72

72:                                               ; preds = %398, %4
  %73 = load i32, i32* %14, align 4
  %74 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %75 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %74, i32 0, i32 8
  %76 = load i32, i32* %75, align 8
  %77 = icmp ult i32 %73, %76
  br i1 %77, label %78, label %401

78:                                               ; preds = %72
  %79 = load i32*, i32** %18, align 8
  %80 = load i32, i32* %14, align 4
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i32, i32* %79, i64 %81
  %83 = load i32, i32* %82, align 4
  store i32 %83, i32* %16, align 4
  %84 = load i32, i32* %16, align 4
  %85 = load i32, i32* %6, align 4
  %86 = add nsw i32 %85, 1
  %87 = icmp eq i32 %84, %86
  br i1 %87, label %88, label %397

88:                                               ; preds = %78
  store i32 1, i32* %11, align 4
  br label %89

89:                                               ; preds = %286, %88
  %90 = load i32, i32* %11, align 4
  %91 = load i32, i32* %16, align 4
  %92 = icmp ult i32 %90, %91
  br i1 %92, label %93, label %289

93:                                               ; preds = %89
  %94 = load double**, double*** %8, align 8
  %95 = load i32, i32* %14, align 4
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds double*, double** %94, i64 %96
  %98 = load double*, double** %97, align 8
  %99 = load i32, i32* %11, align 4
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds double, double* %98, i64 %100
  store double 0.000000e+00, double* %101, align 8
  %102 = load i32*, i32** %19, align 8
  %103 = load i32, i32* %11, align 4
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds i32, i32* %102, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = load i32*, i32** %19, align 8
  %108 = load i32, i32* %11, align 4
  %109 = add i32 %108, 1
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i32, i32* %107, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = icmp eq i32 %106, %112
  br i1 %113, label %114, label %285

114:                                              ; preds = %93
  %115 = load double*, double** %22, align 8
  %116 = load i32*, i32** %20, align 8
  %117 = load i32, i32* %11, align 4
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds i32, i32* %116, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = load i32, i32* %16, align 4
  %122 = sub i32 %120, %121
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds double, double* %115, i64 %123
  %125 = load double, double* %124, align 8
  %126 = fcmp ogt double %125, 0.000000e+00
  br i1 %126, label %127, label %177

127:                                              ; preds = %114
  %128 = load i16*, i16** %9, align 8
  %129 = load i32, i32* %16, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds i16, i16* %128, i64 %130
  %132 = load i16, i16* %131, align 2
  %133 = sext i16 %132 to i32
  %134 = load i16*, i16** %9, align 8
  %135 = load i32, i32* %11, align 4
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds i16, i16* %134, i64 %136
  %138 = load i16, i16* %137, align 2
  %139 = sext i16 %138 to i32
  %140 = load %struct.vrna_md_s*, %struct.vrna_md_s** %24, align 8
  %141 = call i32 @vrna_get_ptype_md(i32 noundef %133, i32 noundef %139, %struct.vrna_md_s* noundef %140)
  store i32 %141, i32* %17, align 4
  %142 = load double*, double** %22, align 8
  %143 = load i32*, i32** %20, align 8
  %144 = load i32, i32* %11, align 4
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds i32, i32* %143, i64 %145
  %147 = load i32, i32* %146, align 4
  %148 = load i32, i32* %16, align 4
  %149 = sub i32 %147, %148
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds double, double* %142, i64 %150
  %152 = load double, double* %151, align 8
  %153 = load i32, i32* %17, align 4
  %154 = load i16*, i16** %10, align 8
  %155 = load i32, i32* %11, align 4
  %156 = add i32 %155, 1
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds i16, i16* %154, i64 %157
  %159 = load i16, i16* %158, align 2
  %160 = sext i16 %159 to i32
  %161 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %25, align 8
  %162 = call double @vrna_exp_E_ext_stem(i32 noundef %153, i32 noundef -1, i32 noundef %160, %struct.vrna_exp_param_s* noundef %161)
  %163 = fmul double %152, %162
  %164 = load double*, double** %23, align 8
  %165 = getelementptr inbounds double, double* %164, i64 2
  %166 = load double, double* %165, align 8
  %167 = load double**, double*** %8, align 8
  %168 = load i32, i32* %14, align 4
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds double*, double** %167, i64 %169
  %171 = load double*, double** %170, align 8
  %172 = load i32, i32* %11, align 4
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds double, double* %171, i64 %173
  %175 = load double, double* %174, align 8
  %176 = call double @llvm.fmuladd.f64(double %163, double %166, double %175)
  store double %176, double* %174, align 8
  br label %177

177:                                              ; preds = %127, %114
  %178 = load i32, i32* %16, align 4
  %179 = add i32 %178, 1
  store i32 %179, i32* %12, align 4
  br label %180

180:                                              ; preds = %281, %177
  %181 = load i32, i32* %12, align 4
  %182 = load i32, i32* %15, align 4
  %183 = icmp ule i32 %181, %182
  br i1 %183, label %184, label %284

184:                                              ; preds = %180
  %185 = load double*, double** %22, align 8
  %186 = load i32*, i32** %20, align 8
  %187 = load i32, i32* %11, align 4
  %188 = zext i32 %187 to i64
  %189 = getelementptr inbounds i32, i32* %186, i64 %188
  %190 = load i32, i32* %189, align 4
  %191 = load i32, i32* %12, align 4
  %192 = sub i32 %190, %191
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds double, double* %185, i64 %193
  %195 = load double, double* %194, align 8
  %196 = fcmp ogt double %195, 0.000000e+00
  br i1 %196, label %197, label %280

197:                                              ; preds = %184
  %198 = load i32*, i32** %19, align 8
  %199 = load i32, i32* %12, align 4
  %200 = sub i32 %199, 1
  %201 = zext i32 %200 to i64
  %202 = getelementptr inbounds i32, i32* %198, i64 %201
  %203 = load i32, i32* %202, align 4
  %204 = load i32*, i32** %19, align 8
  %205 = load i32, i32* %12, align 4
  %206 = zext i32 %205 to i64
  %207 = getelementptr inbounds i32, i32* %204, i64 %206
  %208 = load i32, i32* %207, align 4
  %209 = icmp eq i32 %203, %208
  br i1 %209, label %210, label %280

210:                                              ; preds = %197
  %211 = load i16*, i16** %9, align 8
  %212 = load i32, i32* %12, align 4
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds i16, i16* %211, i64 %213
  %215 = load i16, i16* %214, align 2
  %216 = sext i16 %215 to i32
  %217 = load i16*, i16** %9, align 8
  %218 = load i32, i32* %11, align 4
  %219 = zext i32 %218 to i64
  %220 = getelementptr inbounds i16, i16* %217, i64 %219
  %221 = load i16, i16* %220, align 2
  %222 = sext i16 %221 to i32
  %223 = load %struct.vrna_md_s*, %struct.vrna_md_s** %24, align 8
  %224 = call i32 @vrna_get_ptype_md(i32 noundef %216, i32 noundef %222, %struct.vrna_md_s* noundef %223)
  store i32 %224, i32* %17, align 4
  %225 = load double*, double** %22, align 8
  %226 = load i32*, i32** %20, align 8
  %227 = load i32, i32* %11, align 4
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds i32, i32* %226, i64 %228
  %230 = load i32, i32* %229, align 4
  %231 = load i32, i32* %12, align 4
  %232 = sub i32 %230, %231
  %233 = zext i32 %232 to i64
  %234 = getelementptr inbounds double, double* %225, i64 %233
  %235 = load double, double* %234, align 8
  %236 = load i32, i32* %17, align 4
  %237 = load i16*, i16** %10, align 8
  %238 = load i32, i32* %12, align 4
  %239 = sub i32 %238, 1
  %240 = zext i32 %239 to i64
  %241 = getelementptr inbounds i16, i16* %237, i64 %240
  %242 = load i16, i16* %241, align 2
  %243 = sext i16 %242 to i32
  %244 = load i16*, i16** %10, align 8
  %245 = load i32, i32* %11, align 4
  %246 = add i32 %245, 1
  %247 = zext i32 %246 to i64
  %248 = getelementptr inbounds i16, i16* %244, i64 %247
  %249 = load i16, i16* %248, align 2
  %250 = sext i16 %249 to i32
  %251 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %25, align 8
  %252 = call double @vrna_exp_E_ext_stem(i32 noundef %236, i32 noundef %243, i32 noundef %250, %struct.vrna_exp_param_s* noundef %251)
  %253 = fmul double %235, %252
  %254 = load double*, double** %21, align 8
  %255 = load i32*, i32** %20, align 8
  %256 = load i32, i32* %16, align 4
  %257 = zext i32 %256 to i64
  %258 = getelementptr inbounds i32, i32* %255, i64 %257
  %259 = load i32, i32* %258, align 4
  %260 = load i32, i32* %12, align 4
  %261 = sub i32 %260, 1
  %262 = sub i32 %259, %261
  %263 = zext i32 %262 to i64
  %264 = getelementptr inbounds double, double* %254, i64 %263
  %265 = load double, double* %264, align 8
  %266 = fmul double %253, %265
  %267 = load double*, double** %23, align 8
  %268 = getelementptr inbounds double, double* %267, i64 2
  %269 = load double, double* %268, align 8
  %270 = load double**, double*** %8, align 8
  %271 = load i32, i32* %14, align 4
  %272 = zext i32 %271 to i64
  %273 = getelementptr inbounds double*, double** %270, i64 %272
  %274 = load double*, double** %273, align 8
  %275 = load i32, i32* %11, align 4
  %276 = zext i32 %275 to i64
  %277 = getelementptr inbounds double, double* %274, i64 %276
  %278 = load double, double* %277, align 8
  %279 = call double @llvm.fmuladd.f64(double %266, double %269, double %278)
  store double %279, double* %277, align 8
  br label %280

280:                                              ; preds = %210, %197, %184
  br label %281

281:                                              ; preds = %280
  %282 = load i32, i32* %12, align 4
  %283 = add i32 %282, 1
  store i32 %283, i32* %12, align 4
  br label %180, !llvm.loop !82

284:                                              ; preds = %180
  br label %285

285:                                              ; preds = %284, %93
  br label %286

286:                                              ; preds = %285
  %287 = load i32, i32* %11, align 4
  %288 = add i32 %287, 1
  store i32 %288, i32* %11, align 4
  br label %89, !llvm.loop !83

289:                                              ; preds = %89
  store i32 1, i32* %13, align 4
  br label %290

290:                                              ; preds = %393, %289
  %291 = load i32, i32* %13, align 4
  %292 = load i32, i32* %16, align 4
  %293 = icmp ult i32 %291, %292
  br i1 %293, label %294, label %396

294:                                              ; preds = %290
  %295 = load double**, double*** %7, align 8
  %296 = load i32, i32* %14, align 4
  %297 = zext i32 %296 to i64
  %298 = getelementptr inbounds double*, double** %295, i64 %297
  %299 = load double*, double** %298, align 8
  %300 = load i32, i32* %13, align 4
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds double, double* %299, i64 %301
  store double 0.000000e+00, double* %302, align 8
  %303 = load i32*, i32** %19, align 8
  %304 = load i32, i32* %13, align 4
  %305 = sub i32 %304, 1
  %306 = zext i32 %305 to i64
  %307 = getelementptr inbounds i32, i32* %303, i64 %306
  %308 = load i32, i32* %307, align 4
  %309 = load i32*, i32** %19, align 8
  %310 = load i32, i32* %13, align 4
  %311 = zext i32 %310 to i64
  %312 = getelementptr inbounds i32, i32* %309, i64 %311
  %313 = load i32, i32* %312, align 4
  %314 = icmp eq i32 %308, %313
  br i1 %314, label %315, label %392

315:                                              ; preds = %294
  store i32 1, i32* %11, align 4
  br label %316

316:                                              ; preds = %368, %315
  %317 = load i32, i32* %11, align 4
  %318 = load i32, i32* %13, align 4
  %319 = sub i32 %318, 1
  %320 = icmp ult i32 %317, %319
  br i1 %320, label %321, label %371

321:                                              ; preds = %316
  %322 = load i32*, i32** %19, align 8
  %323 = load i32, i32* %11, align 4
  %324 = zext i32 %323 to i64
  %325 = getelementptr inbounds i32, i32* %322, i64 %324
  %326 = load i32, i32* %325, align 4
  %327 = load i32*, i32** %19, align 8
  %328 = load i32, i32* %11, align 4
  %329 = add i32 %328, 1
  %330 = zext i32 %329 to i64
  %331 = getelementptr inbounds i32, i32* %327, i64 %330
  %332 = load i32, i32* %331, align 4
  %333 = icmp eq i32 %326, %332
  br i1 %333, label %334, label %367

334:                                              ; preds = %321
  %335 = load double*, double** %21, align 8
  %336 = load i32*, i32** %20, align 8
  %337 = load i32, i32* %11, align 4
  %338 = add i32 %337, 1
  %339 = zext i32 %338 to i64
  %340 = getelementptr inbounds i32, i32* %336, i64 %339
  %341 = load i32, i32* %340, align 4
  %342 = load i32, i32* %13, align 4
  %343 = sub i32 %342, 1
  %344 = sub i32 %341, %343
  %345 = zext i32 %344 to i64
  %346 = getelementptr inbounds double, double* %335, i64 %345
  %347 = load double, double* %346, align 8
  %348 = load double**, double*** %8, align 8
  %349 = load i32, i32* %14, align 4
  %350 = zext i32 %349 to i64
  %351 = getelementptr inbounds double*, double** %348, i64 %350
  %352 = load double*, double** %351, align 8
  %353 = load i32, i32* %11, align 4
  %354 = zext i32 %353 to i64
  %355 = getelementptr inbounds double, double* %352, i64 %354
  %356 = load double, double* %355, align 8
  %357 = load double**, double*** %7, align 8
  %358 = load i32, i32* %14, align 4
  %359 = zext i32 %358 to i64
  %360 = getelementptr inbounds double*, double** %357, i64 %359
  %361 = load double*, double** %360, align 8
  %362 = load i32, i32* %13, align 4
  %363 = zext i32 %362 to i64
  %364 = getelementptr inbounds double, double* %361, i64 %363
  %365 = load double, double* %364, align 8
  %366 = call double @llvm.fmuladd.f64(double %347, double %356, double %365)
  store double %366, double* %364, align 8
  br label %367

367:                                              ; preds = %334, %321
  br label %368

368:                                              ; preds = %367
  %369 = load i32, i32* %11, align 4
  %370 = add i32 %369, 1
  store i32 %370, i32* %11, align 4
  br label %316, !llvm.loop !84

371:                                              ; preds = %316
  %372 = load double**, double*** %8, align 8
  %373 = load i32, i32* %14, align 4
  %374 = zext i32 %373 to i64
  %375 = getelementptr inbounds double*, double** %372, i64 %374
  %376 = load double*, double** %375, align 8
  %377 = load i32, i32* %13, align 4
  %378 = sub i32 %377, 1
  %379 = zext i32 %378 to i64
  %380 = getelementptr inbounds double, double* %376, i64 %379
  %381 = load double, double* %380, align 8
  %382 = load double**, double*** %7, align 8
  %383 = load i32, i32* %14, align 4
  %384 = zext i32 %383 to i64
  %385 = getelementptr inbounds double*, double** %382, i64 %384
  %386 = load double*, double** %385, align 8
  %387 = load i32, i32* %13, align 4
  %388 = zext i32 %387 to i64
  %389 = getelementptr inbounds double, double* %386, i64 %388
  %390 = load double, double* %389, align 8
  %391 = fadd double %390, %381
  store double %391, double* %389, align 8
  br label %392

392:                                              ; preds = %371, %294
  br label %393

393:                                              ; preds = %392
  %394 = load i32, i32* %13, align 4
  %395 = add i32 %394, 1
  store i32 %395, i32* %13, align 4
  br label %290, !llvm.loop !85

396:                                              ; preds = %290
  br label %397

397:                                              ; preds = %396, %78
  br label %398

398:                                              ; preds = %397
  %399 = load i32, i32* %14, align 4
  %400 = add i32 %399, 1
  store i32 %400, i32* %14, align 4
  br label %72, !llvm.loop !86

401:                                              ; preds = %72
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @multistrand_contrib(%struct.vrna_fc_s* noundef %0, i32 noundef %1, double* noundef %2, double** noundef %3, double* noundef %4, i32* noundef %5) #0 {
  %7 = alloca %struct.vrna_fc_s*, align 8
  %8 = alloca i32, align 4
  %9 = alloca double*, align 8
  %10 = alloca double**, align 8
  %11 = alloca double*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i16*, align 8
  %14 = alloca i16*, align 8
  %15 = alloca i16, align 2
  %16 = alloca i16, align 2
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32*, align 8
  %21 = alloca i32*, align 8
  %22 = alloca i32*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32*, align 8
  %27 = alloca i32, align 4
  %28 = alloca double*, align 8
  %29 = alloca double*, align 8
  %30 = alloca double*, align 8
  %31 = alloca double, align 8
  %32 = alloca %struct.vrna_md_s*, align 8
  %33 = alloca %struct.vrna_exp_param_s*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %7, align 8
  store i32 %1, i32* %8, align 4
  store double* %2, double** %9, align 8
  store double** %3, double*** %10, align 8
  store double* %4, double** %11, align 8
  store i32* %5, i32** %12, align 8
  %34 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %35 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %34, i32 0, i32 3
  %36 = load i32*, i32** %35, align 8
  store i32* %36, i32** %20, align 8
  %37 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %38 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %37, i32 0, i32 6
  %39 = load i32*, i32** %38, align 8
  store i32* %39, i32** %22, align 8
  %40 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %41 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %40, i32 0, i32 7
  %42 = load i32*, i32** %41, align 8
  store i32* %42, i32** %21, align 8
  %43 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %44 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %43, i32 0, i32 24
  %45 = bitcast %union.anon.9* %44 to %struct.anon.10*
  %46 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %45, i32 0, i32 2
  %47 = load i16*, i16** %46, align 8
  store i16* %47, i16** %13, align 8
  %48 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %49 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %48, i32 0, i32 24
  %50 = bitcast %union.anon.9* %49 to %struct.anon.10*
  %51 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %50, i32 0, i32 1
  %52 = load i16*, i16** %51, align 8
  store i16* %52, i16** %14, align 8
  %53 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %54 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %53, i32 0, i32 15
  %55 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %54, align 8
  store %struct.vrna_exp_param_s* %55, %struct.vrna_exp_param_s** %33, align 8
  %56 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %33, align 8
  %57 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %56, i32 0, i32 40
  store %struct.vrna_md_s* %57, %struct.vrna_md_s** %32, align 8
  %58 = load %struct.vrna_md_s*, %struct.vrna_md_s** %32, align 8
  %59 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %58, i32 0, i32 18
  %60 = load i32, i32* %59, align 4
  store i32 %60, i32* %18, align 4
  %61 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %62 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %61, i32 0, i32 16
  %63 = load i32*, i32** %62, align 8
  store i32* %63, i32** %26, align 8
  %64 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %65 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %64, i32 0, i32 13
  %66 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %65, align 8
  %67 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %66, i32 0, i32 4
  %68 = bitcast %union.anon.5* %67 to %struct.anon.6*
  %69 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %68, i32 0, i32 0
  %70 = load double*, double** %69, align 8
  store double* %70, double** %28, align 8
  %71 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %72 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %71, i32 0, i32 13
  %73 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %72, align 8
  %74 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %73, i32 0, i32 4
  %75 = bitcast %union.anon.5* %74 to %struct.anon.6*
  %76 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %75, i32 0, i32 1
  %77 = load double*, double** %76, align 8
  store double* %77, double** %29, align 8
  %78 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %79 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %78, i32 0, i32 13
  %80 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %79, align 8
  %81 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %80, i32 0, i32 4
  %82 = bitcast %union.anon.5* %81 to %struct.anon.6*
  %83 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %82, i32 0, i32 4
  %84 = load double*, double** %83, align 8
  store double* %84, double** %30, align 8
  %85 = load i32, i32* %8, align 4
  %86 = load i32, i32* %18, align 4
  %87 = sub i32 %85, %86
  %88 = sub i32 %87, 1
  store i32 %88, i32* %17, align 4
  br label %89

89:                                               ; preds = %320, %6
  %90 = load i32, i32* %17, align 4
  %91 = icmp ugt i32 %90, 1
  br i1 %91, label %92, label %323

92:                                               ; preds = %89
  %93 = load i32*, i32** %26, align 8
  %94 = load i32, i32* %17, align 4
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds i32, i32* %93, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = load i32, i32* %8, align 4
  %99 = sub nsw i32 %97, %98
  store i32 %99, i32* %27, align 4
  %100 = load double*, double** %29, align 8
  %101 = load i32, i32* %27, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds double, double* %100, i64 %102
  %104 = load double, double* %103, align 8
  %105 = fcmp ogt double %104, 0.000000e+00
  br i1 %105, label %106, label %319

106:                                              ; preds = %92
  store double 0.000000e+00, double* %31, align 8
  store i32 0, i32* %19, align 4
  br label %107

107:                                              ; preds = %239, %106
  %108 = load i32, i32* %19, align 4
  %109 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %7, align 8
  %110 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %109, i32 0, i32 8
  %111 = load i32, i32* %110, align 8
  %112 = icmp ult i32 %108, %111
  br i1 %112, label %113, label %242

113:                                              ; preds = %107
  %114 = load i32*, i32** %21, align 8
  %115 = load i32, i32* %19, align 4
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds i32, i32* %114, i64 %116
  %118 = load i32, i32* %117, align 4
  store i32 %118, i32* %23, align 4
  %119 = load i32*, i32** %22, align 8
  %120 = load i32, i32* %19, align 4
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds i32, i32* %119, i64 %121
  %123 = load i32, i32* %122, align 4
  store i32 %123, i32* %24, align 4
  %124 = load i32, i32* %23, align 4
  %125 = load i32, i32* %17, align 4
  %126 = sub i32 %125, 1
  %127 = icmp eq i32 %124, %126
  br i1 %127, label %128, label %136

128:                                              ; preds = %113
  %129 = load double*, double** %9, align 8
  %130 = load i32, i32* %19, align 4
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds double, double* %129, i64 %131
  %133 = load double, double* %132, align 8
  %134 = load double, double* %31, align 8
  %135 = fadd double %134, %133
  store double %135, double* %31, align 8
  br label %238

136:                                              ; preds = %113
  %137 = load i32, i32* %23, align 4
  %138 = load i32, i32* %17, align 4
  %139 = sub i32 %138, 1
  %140 = icmp ult i32 %137, %139
  br i1 %140, label %141, label %175

141:                                              ; preds = %136
  %142 = load i32*, i32** %20, align 8
  %143 = load i32, i32* %17, align 4
  %144 = sub i32 %143, 1
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds i32, i32* %142, i64 %145
  %147 = load i32, i32* %146, align 4
  %148 = load i32*, i32** %20, align 8
  %149 = load i32, i32* %17, align 4
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds i32, i32* %148, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = icmp eq i32 %147, %152
  br i1 %153, label %154, label %175

154:                                              ; preds = %141
  %155 = load double*, double** %9, align 8
  %156 = load i32, i32* %19, align 4
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds double, double* %155, i64 %157
  %159 = load double, double* %158, align 8
  %160 = load double*, double** %28, align 8
  %161 = load i32*, i32** %26, align 8
  %162 = load i32, i32* %23, align 4
  %163 = add i32 %162, 1
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds i32, i32* %161, i64 %164
  %166 = load i32, i32* %165, align 4
  %167 = load i32, i32* %17, align 4
  %168 = sub i32 %167, 1
  %169 = sub i32 %166, %168
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds double, double* %160, i64 %170
  %172 = load double, double* %171, align 8
  %173 = load double, double* %31, align 8
  %174 = call double @llvm.fmuladd.f64(double %159, double %172, double %173)
  store double %174, double* %31, align 8
  br label %237

175:                                              ; preds = %141, %136
  %176 = load i32, i32* %24, align 4
  %177 = load i32, i32* %8, align 4
  %178 = add nsw i32 %177, 1
  %179 = icmp eq i32 %176, %178
  br i1 %179, label %180, label %192

180:                                              ; preds = %175
  %181 = load double**, double*** %10, align 8
  %182 = load i32, i32* %19, align 4
  %183 = zext i32 %182 to i64
  %184 = getelementptr inbounds double*, double** %181, i64 %183
  %185 = load double*, double** %184, align 8
  %186 = load i32, i32* %17, align 4
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds double, double* %185, i64 %187
  %189 = load double, double* %188, align 8
  %190 = load double, double* %31, align 8
  %191 = fadd double %190, %189
  store double %191, double* %31, align 8
  br label %236

192:                                              ; preds = %175
  %193 = load i32, i32* %24, align 4
  %194 = load i32, i32* %8, align 4
  %195 = add nsw i32 %194, 1
  %196 = icmp ugt i32 %193, %195
  br i1 %196, label %197, label %235

197:                                              ; preds = %192
  %198 = load i32*, i32** %20, align 8
  %199 = load i32, i32* %8, align 4
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds i32, i32* %198, i64 %200
  %202 = load i32, i32* %201, align 4
  %203 = load i32*, i32** %20, align 8
  %204 = load i32, i32* %8, align 4
  %205 = add nsw i32 %204, 1
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i32, i32* %203, i64 %206
  %208 = load i32, i32* %207, align 4
  %209 = icmp eq i32 %202, %208
  br i1 %209, label %210, label %235

210:                                              ; preds = %197
  %211 = load double**, double*** %10, align 8
  %212 = load i32, i32* %19, align 4
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds double*, double** %211, i64 %213
  %215 = load double*, double** %214, align 8
  %216 = load i32, i32* %17, align 4
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds double, double* %215, i64 %217
  %219 = load double, double* %218, align 8
  %220 = load double*, double** %28, align 8
  %221 = load i32*, i32** %26, align 8
  %222 = load i32, i32* %8, align 4
  %223 = add nsw i32 %222, 1
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds i32, i32* %221, i64 %224
  %226 = load i32, i32* %225, align 4
  %227 = load i32, i32* %24, align 4
  %228 = sub i32 %227, 1
  %229 = sub i32 %226, %228
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds double, double* %220, i64 %230
  %232 = load double, double* %231, align 8
  %233 = load double, double* %31, align 8
  %234 = call double @llvm.fmuladd.f64(double %219, double %232, double %233)
  store double %234, double* %31, align 8
  br label %235

235:                                              ; preds = %210, %197, %192
  br label %236

236:                                              ; preds = %235, %180
  br label %237

237:                                              ; preds = %236, %154
  br label %238

238:                                              ; preds = %237, %128
  br label %239

239:                                              ; preds = %238
  %240 = load i32, i32* %19, align 4
  %241 = add i32 %240, 1
  store i32 %241, i32* %19, align 4
  br label %107, !llvm.loop !87

242:                                              ; preds = %107
  %243 = load i16*, i16** %13, align 8
  %244 = load i32, i32* %17, align 4
  %245 = zext i32 %244 to i64
  %246 = getelementptr inbounds i16, i16* %243, i64 %245
  %247 = load i16, i16* %246, align 2
  %248 = sext i16 %247 to i32
  %249 = load i16*, i16** %13, align 8
  %250 = load i32, i32* %8, align 4
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds i16, i16* %249, i64 %251
  %253 = load i16, i16* %252, align 2
  %254 = sext i16 %253 to i32
  %255 = load %struct.vrna_md_s*, %struct.vrna_md_s** %32, align 8
  %256 = call i32 @vrna_get_ptype_md(i32 noundef %248, i32 noundef %254, %struct.vrna_md_s* noundef %255)
  store i32 %256, i32* %25, align 4
  %257 = load i32*, i32** %20, align 8
  %258 = load i32, i32* %17, align 4
  %259 = sub i32 %258, 1
  %260 = zext i32 %259 to i64
  %261 = getelementptr inbounds i32, i32* %257, i64 %260
  %262 = load i32, i32* %261, align 4
  %263 = load i32*, i32** %20, align 8
  %264 = load i32, i32* %17, align 4
  %265 = zext i32 %264 to i64
  %266 = getelementptr inbounds i32, i32* %263, i64 %265
  %267 = load i32, i32* %266, align 4
  %268 = icmp eq i32 %262, %267
  br i1 %268, label %269, label %277

269:                                              ; preds = %242
  %270 = load i16*, i16** %14, align 8
  %271 = load i32, i32* %17, align 4
  %272 = sub i32 %271, 1
  %273 = zext i32 %272 to i64
  %274 = getelementptr inbounds i16, i16* %270, i64 %273
  %275 = load i16, i16* %274, align 2
  %276 = sext i16 %275 to i32
  br label %278

277:                                              ; preds = %242
  br label %278

278:                                              ; preds = %277, %269
  %279 = phi i32 [ %276, %269 ], [ -1, %277 ]
  %280 = trunc i32 %279 to i16
  store i16 %280, i16* %15, align 2
  %281 = load i32*, i32** %20, align 8
  %282 = load i32, i32* %8, align 4
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds i32, i32* %281, i64 %283
  %285 = load i32, i32* %284, align 4
  %286 = load i32*, i32** %20, align 8
  %287 = load i32, i32* %8, align 4
  %288 = add nsw i32 %287, 1
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds i32, i32* %286, i64 %289
  %291 = load i32, i32* %290, align 4
  %292 = icmp eq i32 %285, %291
  br i1 %292, label %293, label %301

293:                                              ; preds = %278
  %294 = load i16*, i16** %14, align 8
  %295 = load i32, i32* %8, align 4
  %296 = add nsw i32 %295, 1
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds i16, i16* %294, i64 %297
  %299 = load i16, i16* %298, align 2
  %300 = sext i16 %299 to i32
  br label %302

301:                                              ; preds = %278
  br label %302

302:                                              ; preds = %301, %293
  %303 = phi i32 [ %300, %293 ], [ -1, %301 ]
  %304 = trunc i32 %303 to i16
  store i16 %304, i16* %16, align 2
  %305 = load double, double* %31, align 8
  %306 = load i32, i32* %25, align 4
  %307 = load i16, i16* %15, align 2
  %308 = sext i16 %307 to i32
  %309 = load i16, i16* %16, align 2
  %310 = sext i16 %309 to i32
  %311 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %33, align 8
  %312 = call double @vrna_exp_E_ext_stem(i32 noundef %306, i32 noundef %308, i32 noundef %310, %struct.vrna_exp_param_s* noundef %311)
  %313 = load double*, double** %30, align 8
  %314 = load i32, i32* %27, align 4
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds double, double* %313, i64 %315
  %317 = load double, double* %316, align 8
  %318 = call double @llvm.fmuladd.f64(double %305, double %312, double %317)
  store double %318, double* %316, align 8
  br label %319

319:                                              ; preds = %302, %92
  br label %320

320:                                              ; preds = %319
  %321 = load i32, i32* %17, align 4
  %322 = add i32 %321, -1
  store i32 %322, i32* %17, align 4
  br label %89, !llvm.loop !88

323:                                              ; preds = %89
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @ud_outside_ext_loops(%struct.vrna_fc_s* noundef %0) #0 {
  %2 = alloca %struct.vrna_fc_s*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca double*, align 8
  %11 = alloca double*, align 8
  %12 = alloca double, align 8
  %13 = alloca double*, align 8
  %14 = alloca %struct.vrna_sc_s*, align 8
  %15 = alloca %struct.vrna_unstructured_domain_s*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %2, align 8
  %16 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %17 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %16, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %6, align 4
  %19 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %20 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %19, i32 0, i32 13
  %21 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %20, align 8
  %22 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %21, i32 0, i32 4
  %23 = bitcast %union.anon.5* %22 to %struct.anon.6*
  %24 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %23, i32 0, i32 5
  %25 = load double*, double** %24, align 8
  store double* %25, double** %10, align 8
  %26 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %27 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %26, i32 0, i32 13
  %28 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %27, align 8
  %29 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %28, i32 0, i32 4
  %30 = bitcast %union.anon.5* %29 to %struct.anon.6*
  %31 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %30, i32 0, i32 6
  %32 = load double*, double** %31, align 8
  store double* %32, double** %11, align 8
  %33 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %34 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %33, i32 0, i32 13
  %35 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %34, align 8
  %36 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %35, i32 0, i32 2
  %37 = load double*, double** %36, align 8
  store double* %37, double** %13, align 8
  %38 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %39 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %38, i32 0, i32 11
  %40 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %39, align 8
  %41 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %40, i32 0, i32 4
  %42 = load i32*, i32** %41, align 8
  store i32* %42, i32** %9, align 8
  %43 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %44 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %43, i32 0, i32 22
  %45 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %44, align 8
  store %struct.vrna_unstructured_domain_s* %45, %struct.vrna_unstructured_domain_s** %15, align 8
  %46 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %47 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %46, i32 0, i32 24
  %48 = bitcast %union.anon.9* %47 to %struct.anon.10*
  %49 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %48, i32 0, i32 5
  %50 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %49, align 8
  store %struct.vrna_sc_s* %50, %struct.vrna_sc_s** %14, align 8
  store i32 1, i32* %3, align 4
  br label %51

51:                                               ; preds = %169, %1
  %52 = load i32, i32* %3, align 4
  %53 = load i32, i32* %6, align 4
  %54 = icmp sle i32 %52, %53
  br i1 %54, label %55, label %172

55:                                               ; preds = %51
  %56 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %57 = load i32, i32* %3, align 4
  %58 = call i32* @vrna_ud_get_motif_size_at(%struct.vrna_fc_s* noundef %56, i32 noundef %57, i32 noundef 1)
  store i32* %58, i32** %8, align 8
  %59 = load i32*, i32** %8, align 8
  %60 = icmp ne i32* %59, null
  br i1 %60, label %61, label %166

61:                                               ; preds = %55
  store i32 0, i32* %7, align 4
  br label %62

62:                                               ; preds = %162, %61
  %63 = load i32*, i32** %8, align 8
  %64 = load i32, i32* %7, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32, i32* %63, i64 %65
  %67 = load i32, i32* %66, align 4
  store i32 %67, i32* %5, align 4
  %68 = icmp ne i32 -1, %67
  br i1 %68, label %69, label %165

69:                                               ; preds = %62
  %70 = load i32, i32* %3, align 4
  %71 = load i32, i32* %5, align 4
  %72 = add nsw i32 %70, %71
  %73 = sub nsw i32 %72, 1
  store i32 %73, i32* %4, align 4
  %74 = load i32, i32* %4, align 4
  %75 = load i32, i32* %6, align 4
  %76 = icmp sle i32 %74, %75
  br i1 %76, label %77, label %162

77:                                               ; preds = %69
  %78 = load i32*, i32** %9, align 8
  %79 = load i32, i32* %3, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i32, i32* %78, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = load i32, i32* %5, align 4
  %84 = icmp sge i32 %82, %83
  br i1 %84, label %85, label %161

85:                                               ; preds = %77
  %86 = load double*, double** %10, align 8
  %87 = load i32, i32* %3, align 4
  %88 = sub nsw i32 %87, 1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds double, double* %86, i64 %89
  %91 = load double, double* %90, align 8
  %92 = load double*, double** %11, align 8
  %93 = load i32, i32* %4, align 4
  %94 = add nsw i32 %93, 1
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds double, double* %92, i64 %95
  %97 = load double, double* %96, align 8
  %98 = fmul double %91, %97
  %99 = load double*, double** %10, align 8
  %100 = load i32, i32* %6, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds double, double* %99, i64 %101
  %103 = load double, double* %102, align 8
  %104 = fdiv double %98, %103
  store double %104, double* %12, align 8
  %105 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %15, align 8
  %106 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %105, i32 0, i32 11
  %107 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %106, align 8
  %108 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %109 = load i32, i32* %3, align 4
  %110 = load i32, i32* %4, align 4
  %111 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %15, align 8
  %112 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %111, i32 0, i32 12
  %113 = load i8*, i8** %112, align 8
  %114 = call double %107(%struct.vrna_fc_s* noundef %108, i32 noundef %109, i32 noundef %110, i32 noundef 17, i8* noundef %113)
  %115 = load double, double* %12, align 8
  %116 = fmul double %115, %114
  store double %116, double* %12, align 8
  %117 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %14, align 8
  %118 = icmp ne %struct.vrna_sc_s* %117, null
  br i1 %118, label %119, label %139

119:                                              ; preds = %85
  %120 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %14, align 8
  %121 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %120, i32 0, i32 4
  %122 = load double**, double*** %121, align 8
  %123 = icmp ne double** %122, null
  br i1 %123, label %124, label %138

124:                                              ; preds = %119
  %125 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %14, align 8
  %126 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %125, i32 0, i32 4
  %127 = load double**, double*** %126, align 8
  %128 = load i32, i32* %3, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds double*, double** %127, i64 %129
  %131 = load double*, double** %130, align 8
  %132 = load i32, i32* %5, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds double, double* %131, i64 %133
  %135 = load double, double* %134, align 8
  %136 = load double, double* %12, align 8
  %137 = fmul double %136, %135
  store double %137, double* %12, align 8
  br label %138

138:                                              ; preds = %124, %119
  br label %139

139:                                              ; preds = %138, %85
  %140 = load double*, double** %13, align 8
  %141 = load i32, i32* %5, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds double, double* %140, i64 %142
  %144 = load double, double* %143, align 8
  %145 = load double, double* %12, align 8
  %146 = fmul double %145, %144
  store double %146, double* %12, align 8
  %147 = load double, double* %12, align 8
  %148 = fcmp ogt double %147, 0.000000e+00
  br i1 %148, label %149, label %160

149:                                              ; preds = %139
  %150 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %15, align 8
  %151 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %150, i32 0, i32 14
  %152 = load void (%struct.vrna_fc_s*, i32, i32, i32, double, i8*)*, void (%struct.vrna_fc_s*, i32, i32, i32, double, i8*)** %151, align 8
  %153 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %154 = load i32, i32* %3, align 4
  %155 = load i32, i32* %4, align 4
  %156 = load double, double* %12, align 8
  %157 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %15, align 8
  %158 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %157, i32 0, i32 12
  %159 = load i8*, i8** %158, align 8
  call void %152(%struct.vrna_fc_s* noundef %153, i32 noundef %154, i32 noundef %155, i32 noundef 17, double noundef %156, i8* noundef %159)
  br label %160

160:                                              ; preds = %149, %139
  br label %161

161:                                              ; preds = %160, %77
  br label %162

162:                                              ; preds = %161, %69
  %163 = load i32, i32* %7, align 4
  %164 = add nsw i32 %163, 1
  store i32 %164, i32* %7, align 4
  br label %62, !llvm.loop !89

165:                                              ; preds = %62
  br label %166

166:                                              ; preds = %165, %55
  %167 = load i32*, i32** %8, align 8
  %168 = bitcast i32* %167 to i8*
  call void @free(i8* noundef %168) #5
  br label %169

169:                                              ; preds = %166
  %170 = load i32, i32* %3, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %3, align 4
  br label %51, !llvm.loop !90

172:                                              ; preds = %51
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @ud_outside_hp_loops(%struct.vrna_fc_s* noundef %0) #0 {
  %2 = alloca %struct.vrna_fc_s*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double*, align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca %struct.vrna_unstructured_domain_s*, align 8
  %21 = alloca %struct.vrna_unstructured_domain_s*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %2, align 8
  %22 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %23 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %22, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  store i32 %24, i32* %10, align 4
  %25 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %26 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %25, i32 0, i32 16
  %27 = load i32*, i32** %26, align 8
  store i32* %27, i32** %8, align 8
  %28 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %29 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %28, i32 0, i32 13
  %30 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %29, align 8
  %31 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %30, i32 0, i32 4
  %32 = bitcast %union.anon.5* %31 to %struct.anon.6*
  %33 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %32, i32 0, i32 4
  %34 = load double*, double** %33, align 8
  store double* %34, double** %17, align 8
  %35 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %36 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %35, i32 0, i32 11
  %37 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %36, align 8
  %38 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %37, i32 0, i32 5
  %39 = load i32*, i32** %38, align 8
  store i32* %39, i32** %13, align 8
  %40 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %41 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %40, i32 0, i32 22
  %42 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %41, align 8
  store %struct.vrna_unstructured_domain_s* %42, %struct.vrna_unstructured_domain_s** %20, align 8
  store i32 1, i32* %3, align 4
  br label %43

43:                                               ; preds = %225, %1
  %44 = load i32, i32* %3, align 4
  %45 = load i32, i32* %10, align 4
  %46 = icmp sle i32 %44, %45
  br i1 %46, label %47, label %228

47:                                               ; preds = %43
  %48 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %49 = load i32, i32* %3, align 4
  %50 = call i32* @vrna_ud_get_motif_size_at(%struct.vrna_fc_s* noundef %48, i32 noundef %49, i32 noundef 2)
  store i32* %50, i32** %12, align 8
  %51 = load i32*, i32** %12, align 8
  %52 = icmp ne i32* %51, null
  br i1 %52, label %53, label %222

53:                                               ; preds = %47
  store i32 0, i32* %11, align 4
  br label %54

54:                                               ; preds = %218, %53
  %55 = load i32*, i32** %12, align 8
  %56 = load i32, i32* %11, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %55, i64 %57
  %59 = load i32, i32* %58, align 4
  store i32 %59, i32* %9, align 4
  %60 = icmp ne i32 -1, %59
  br i1 %60, label %61, label %221

61:                                               ; preds = %54
  store double 0.000000e+00, double* %15, align 8
  %62 = load i32, i32* %3, align 4
  %63 = load i32, i32* %9, align 4
  %64 = add nsw i32 %62, %63
  %65 = sub nsw i32 %64, 1
  store i32 %65, i32* %4, align 4
  %66 = load i32, i32* %4, align 4
  %67 = load i32, i32* %10, align 4
  %68 = icmp slt i32 %66, %67
  br i1 %68, label %69, label %204

69:                                               ; preds = %61
  %70 = load i32*, i32** %13, align 8
  %71 = load i32, i32* %3, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i32, i32* %70, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = load i32, i32* %9, align 4
  %76 = icmp sge i32 %74, %75
  br i1 %76, label %77, label %203

77:                                               ; preds = %69
  %78 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %20, align 8
  %79 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %78, i32 0, i32 11
  %80 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %79, align 8
  %81 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %82 = load i32, i32* %3, align 4
  %83 = load i32, i32* %4, align 4
  %84 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %20, align 8
  %85 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %84, i32 0, i32 12
  %86 = load i8*, i8** %85, align 8
  %87 = call double %80(%struct.vrna_fc_s* noundef %81, i32 noundef %82, i32 noundef %83, i32 noundef 18, i8* noundef %86)
  store double %87, double* %16, align 8
  store i32 1, i32* %5, align 4
  br label %88

88:                                               ; preds = %199, %77
  %89 = load i32, i32* %5, align 4
  %90 = load i32, i32* %3, align 4
  %91 = icmp slt i32 %89, %90
  br i1 %91, label %92, label %202

92:                                               ; preds = %88
  %93 = load i32, i32* %4, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %6, align 4
  br label %95

95:                                               ; preds = %195, %92
  %96 = load i32, i32* %6, align 4
  %97 = load i32, i32* %10, align 4
  %98 = icmp sle i32 %96, %97
  br i1 %98, label %99, label %198

99:                                               ; preds = %95
  %100 = load i32*, i32** %8, align 8
  %101 = load i32, i32* %5, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i32, i32* %100, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = load i32, i32* %6, align 4
  %106 = sub nsw i32 %104, %105
  store i32 %106, i32* %7, align 4
  %107 = load double*, double** %17, align 8
  %108 = load i32, i32* %7, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds double, double* %107, i64 %109
  %111 = load double, double* %110, align 8
  %112 = fcmp ogt double %111, 0.000000e+00
  br i1 %112, label %113, label %194

113:                                              ; preds = %99
  %114 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %115 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %114, i32 0, i32 22
  %116 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %115, align 8
  store %struct.vrna_unstructured_domain_s* %116, %struct.vrna_unstructured_domain_s** %21, align 8
  %117 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %118 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %117, i32 0, i32 22
  store %struct.vrna_unstructured_domain_s* null, %struct.vrna_unstructured_domain_s** %118, align 8
  %119 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %120 = load i32, i32* %5, align 4
  %121 = load i32, i32* %6, align 4
  %122 = call double @vrna_exp_E_hp_loop(%struct.vrna_fc_s* noundef %119, i32 noundef %120, i32 noundef %121)
  store double %122, double* %14, align 8
  %123 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %21, align 8
  %124 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %125 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %124, i32 0, i32 22
  store %struct.vrna_unstructured_domain_s* %123, %struct.vrna_unstructured_domain_s** %125, align 8
  %126 = load double, double* %14, align 8
  %127 = fcmp ogt double %126, 0.000000e+00
  br i1 %127, label %128, label %193

128:                                              ; preds = %113
  %129 = load double, double* %16, align 8
  %130 = load double*, double** %17, align 8
  %131 = load i32, i32* %7, align 4
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds double, double* %130, i64 %132
  %134 = load double, double* %133, align 8
  %135 = fmul double %129, %134
  %136 = load double, double* %14, align 8
  %137 = fmul double %136, %135
  store double %137, double* %14, align 8
  store double 0.000000e+00, double* %19, align 8
  store double 0.000000e+00, double* %18, align 8
  %138 = load i32, i32* %3, align 4
  %139 = load i32, i32* %5, align 4
  %140 = sub nsw i32 %138, %139
  %141 = sub nsw i32 %140, 1
  %142 = icmp sgt i32 %141, 0
  br i1 %142, label %143, label %156

143:                                              ; preds = %128
  %144 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %20, align 8
  %145 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %144, i32 0, i32 11
  %146 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %145, align 8
  %147 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %148 = load i32, i32* %5, align 4
  %149 = add nsw i32 %148, 1
  %150 = load i32, i32* %3, align 4
  %151 = sub nsw i32 %150, 1
  %152 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %20, align 8
  %153 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %152, i32 0, i32 12
  %154 = load i8*, i8** %153, align 8
  %155 = call double %146(%struct.vrna_fc_s* noundef %147, i32 noundef %149, i32 noundef %151, i32 noundef 2, i8* noundef %154)
  store double %155, double* %18, align 8
  br label %156

156:                                              ; preds = %143, %128
  %157 = load i32, i32* %6, align 4
  %158 = load i32, i32* %4, align 4
  %159 = sub nsw i32 %157, %158
  %160 = sub nsw i32 %159, 1
  %161 = icmp sgt i32 %160, 0
  br i1 %161, label %162, label %175

162:                                              ; preds = %156
  %163 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %20, align 8
  %164 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %163, i32 0, i32 11
  %165 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %164, align 8
  %166 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %167 = load i32, i32* %4, align 4
  %168 = add nsw i32 %167, 1
  %169 = load i32, i32* %6, align 4
  %170 = sub nsw i32 %169, 1
  %171 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %20, align 8
  %172 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %171, i32 0, i32 12
  %173 = load i8*, i8** %172, align 8
  %174 = call double %165(%struct.vrna_fc_s* noundef %166, i32 noundef %168, i32 noundef %170, i32 noundef 2, i8* noundef %173)
  store double %174, double* %19, align 8
  br label %175

175:                                              ; preds = %162, %156
  %176 = load double, double* %14, align 8
  %177 = load double, double* %15, align 8
  %178 = fadd double %177, %176
  store double %178, double* %15, align 8
  %179 = load double, double* %14, align 8
  %180 = load double, double* %18, align 8
  %181 = load double, double* %15, align 8
  %182 = call double @llvm.fmuladd.f64(double %179, double %180, double %181)
  store double %182, double* %15, align 8
  %183 = load double, double* %14, align 8
  %184 = load double, double* %18, align 8
  %185 = fmul double %183, %184
  %186 = load double, double* %19, align 8
  %187 = load double, double* %15, align 8
  %188 = call double @llvm.fmuladd.f64(double %185, double %186, double %187)
  store double %188, double* %15, align 8
  %189 = load double, double* %14, align 8
  %190 = load double, double* %19, align 8
  %191 = load double, double* %15, align 8
  %192 = call double @llvm.fmuladd.f64(double %189, double %190, double %191)
  store double %192, double* %15, align 8
  br label %193

193:                                              ; preds = %175, %113
  br label %194

194:                                              ; preds = %193, %99
  br label %195

195:                                              ; preds = %194
  %196 = load i32, i32* %6, align 4
  %197 = add nsw i32 %196, 1
  store i32 %197, i32* %6, align 4
  br label %95, !llvm.loop !91

198:                                              ; preds = %95
  br label %199

199:                                              ; preds = %198
  %200 = load i32, i32* %5, align 4
  %201 = add nsw i32 %200, 1
  store i32 %201, i32* %5, align 4
  br label %88, !llvm.loop !92

202:                                              ; preds = %88
  br label %203

203:                                              ; preds = %202, %69
  br label %204

204:                                              ; preds = %203, %61
  %205 = load double, double* %15, align 8
  %206 = fcmp ogt double %205, 0.000000e+00
  br i1 %206, label %207, label %218

207:                                              ; preds = %204
  %208 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %20, align 8
  %209 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %208, i32 0, i32 14
  %210 = load void (%struct.vrna_fc_s*, i32, i32, i32, double, i8*)*, void (%struct.vrna_fc_s*, i32, i32, i32, double, i8*)** %209, align 8
  %211 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %212 = load i32, i32* %3, align 4
  %213 = load i32, i32* %4, align 4
  %214 = load double, double* %15, align 8
  %215 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %20, align 8
  %216 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %215, i32 0, i32 12
  %217 = load i8*, i8** %216, align 8
  call void %210(%struct.vrna_fc_s* noundef %211, i32 noundef %212, i32 noundef %213, i32 noundef 18, double noundef %214, i8* noundef %217)
  br label %218

218:                                              ; preds = %207, %204
  %219 = load i32, i32* %11, align 4
  %220 = add nsw i32 %219, 1
  store i32 %220, i32* %11, align 4
  br label %54, !llvm.loop !93

221:                                              ; preds = %54
  br label %222

222:                                              ; preds = %221, %47
  %223 = load i32*, i32** %12, align 8
  %224 = bitcast i32* %223 to i8*
  call void @free(i8* noundef %224) #5
  br label %225

225:                                              ; preds = %222
  %226 = load i32, i32* %3, align 4
  %227 = add nsw i32 %226, 1
  store i32 %227, i32* %3, align 4
  br label %43, !llvm.loop !94

228:                                              ; preds = %43
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @ud_outside_int_loops(%struct.vrna_fc_s* noundef %0) #0 {
  %2 = alloca %struct.vrna_fc_s*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32*, align 8
  %15 = alloca i32*, align 8
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca double, align 8
  %23 = alloca double, align 8
  %24 = alloca double, align 8
  %25 = alloca double, align 8
  %26 = alloca double, align 8
  %27 = alloca double, align 8
  %28 = alloca double*, align 8
  %29 = alloca double*, align 8
  %30 = alloca %struct.vrna_unstructured_domain_s*, align 8
  %31 = alloca %struct.vrna_unstructured_domain_s*, align 8
  %32 = alloca double, align 8
  %33 = alloca double, align 8
  %34 = alloca double, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %2, align 8
  %35 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %36 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %35, i32 0, i32 1
  %37 = load i32, i32* %36, align 4
  store i32 %37, i32* %12, align 4
  %38 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %39 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %38, i32 0, i32 16
  %40 = load i32*, i32** %39, align 8
  store i32* %40, i32** %15, align 8
  %41 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %42 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %41, i32 0, i32 13
  %43 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %42, align 8
  %44 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %43, i32 0, i32 4
  %45 = bitcast %union.anon.5* %44 to %struct.anon.6*
  %46 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %45, i32 0, i32 1
  %47 = load double*, double** %46, align 8
  store double* %47, double** %29, align 8
  %48 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %49 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %48, i32 0, i32 13
  %50 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %49, align 8
  %51 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %50, i32 0, i32 4
  %52 = bitcast %union.anon.5* %51 to %struct.anon.6*
  %53 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %52, i32 0, i32 4
  %54 = load double*, double** %53, align 8
  store double* %54, double** %28, align 8
  %55 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %56 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %55, i32 0, i32 11
  %57 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %56, align 8
  %58 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %57, i32 0, i32 6
  %59 = load i32*, i32** %58, align 8
  store i32* %59, i32** %16, align 8
  %60 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %61 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %60, i32 0, i32 22
  %62 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %61, align 8
  store %struct.vrna_unstructured_domain_s* %62, %struct.vrna_unstructured_domain_s** %30, align 8
  %63 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %64 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %63, i32 0, i32 15
  %65 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %64, align 8
  %66 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %65, i32 0, i32 40
  %67 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %66, i32 0, i32 18
  %68 = load i32, i32* %67, align 4
  store i32 %68, i32* %21, align 4
  store i32 2, i32* %3, align 4
  br label %69

69:                                               ; preds = %627, %1
  %70 = load i32, i32* %3, align 4
  %71 = load i32, i32* %12, align 4
  %72 = icmp sle i32 %70, %71
  br i1 %72, label %73, label %630

73:                                               ; preds = %69
  %74 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %75 = load i32, i32* %3, align 4
  %76 = call i32* @vrna_ud_get_motif_size_at(%struct.vrna_fc_s* noundef %74, i32 noundef %75, i32 noundef 4)
  store i32* %76, i32** %14, align 8
  %77 = load i32*, i32** %14, align 8
  %78 = icmp ne i32* %77, null
  br i1 %78, label %79, label %624

79:                                               ; preds = %73
  store i32 0, i32* %13, align 4
  br label %80

80:                                               ; preds = %620, %79
  %81 = load i32*, i32** %14, align 8
  %82 = load i32, i32* %13, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i32, i32* %81, i64 %83
  %85 = load i32, i32* %84, align 4
  store i32 %85, i32* %11, align 4
  %86 = icmp ne i32 -1, %85
  br i1 %86, label %87, label %623

87:                                               ; preds = %80
  store double 0.000000e+00, double* %27, align 8
  %88 = load i32, i32* %3, align 4
  %89 = load i32, i32* %11, align 4
  %90 = add nsw i32 %88, %89
  %91 = sub nsw i32 %90, 1
  store i32 %91, i32* %4, align 4
  %92 = load i32, i32* %4, align 4
  %93 = load i32, i32* %12, align 4
  %94 = icmp slt i32 %92, %93
  br i1 %94, label %95, label %606

95:                                               ; preds = %87
  %96 = load i32*, i32** %16, align 8
  %97 = load i32, i32* %3, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i32, i32* %96, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = load i32, i32* %11, align 4
  %102 = icmp sge i32 %100, %101
  br i1 %102, label %103, label %605

103:                                              ; preds = %95
  %104 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %105 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %104, i32 0, i32 11
  %106 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %105, align 8
  %107 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %108 = load i32, i32* %3, align 4
  %109 = load i32, i32* %4, align 4
  %110 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %111 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %110, i32 0, i32 12
  %112 = load i8*, i8** %111, align 8
  %113 = call double %106(%struct.vrna_fc_s* noundef %107, i32 noundef %108, i32 noundef %109, i32 noundef 20, i8* noundef %112)
  store double %113, double* %26, align 8
  %114 = load i32, i32* %4, align 4
  %115 = sub nsw i32 %114, 30
  %116 = sub nsw i32 %115, 1
  store i32 %116, i32* %17, align 4
  %117 = load i32, i32* %17, align 4
  %118 = icmp sgt i32 %117, 1
  br i1 %118, label %119, label %121

119:                                              ; preds = %103
  %120 = load i32, i32* %17, align 4
  br label %122

121:                                              ; preds = %103
  br label %122

122:                                              ; preds = %121, %119
  %123 = phi i32 [ %120, %119 ], [ 1, %121 ]
  store i32 %123, i32* %17, align 4
  %124 = load i32, i32* %17, align 4
  store i32 %124, i32* %5, align 4
  br label %125

125:                                              ; preds = %348, %122
  %126 = load i32, i32* %5, align 4
  %127 = load i32, i32* %3, align 4
  %128 = icmp slt i32 %126, %127
  br i1 %128, label %129, label %351

129:                                              ; preds = %125
  %130 = load i32, i32* %5, align 4
  %131 = add nsw i32 %130, 30
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %18, align 4
  %133 = load i32, i32* %18, align 4
  %134 = load i32, i32* %12, align 4
  %135 = icmp slt i32 %133, %134
  br i1 %135, label %136, label %138

136:                                              ; preds = %129
  %137 = load i32, i32* %18, align 4
  br label %140

138:                                              ; preds = %129
  %139 = load i32, i32* %12, align 4
  br label %140

140:                                              ; preds = %138, %136
  %141 = phi i32 [ %137, %136 ], [ %139, %138 ]
  store i32 %141, i32* %18, align 4
  %142 = load i32, i32* %4, align 4
  %143 = add nsw i32 %142, 1
  store i32 %143, i32* %7, align 4
  br label %144

144:                                              ; preds = %344, %140
  %145 = load i32, i32* %7, align 4
  %146 = load i32, i32* %12, align 4
  %147 = icmp slt i32 %145, %146
  br i1 %147, label %148, label %347

148:                                              ; preds = %144
  %149 = load i32, i32* %7, align 4
  %150 = load i32, i32* %21, align 4
  %151 = add nsw i32 %149, %150
  %152 = add nsw i32 %151, 1
  store i32 %152, i32* %8, align 4
  br label %153

153:                                              ; preds = %340, %148
  %154 = load i32, i32* %8, align 4
  %155 = load i32, i32* %12, align 4
  %156 = icmp slt i32 %154, %155
  br i1 %156, label %157, label %343

157:                                              ; preds = %153
  %158 = load i32*, i32** %15, align 8
  %159 = load i32, i32* %7, align 4
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds i32, i32* %158, i64 %160
  %162 = load i32, i32* %161, align 4
  %163 = load i32, i32* %8, align 4
  %164 = sub nsw i32 %162, %163
  store i32 %164, i32* %9, align 4
  %165 = load double*, double** %29, align 8
  %166 = load i32, i32* %9, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds double, double* %165, i64 %167
  %169 = load double, double* %168, align 8
  %170 = fcmp oeq double %169, 0.000000e+00
  br i1 %170, label %171, label %172

171:                                              ; preds = %157
  br label %340

172:                                              ; preds = %157
  %173 = load i32, i32* %5, align 4
  %174 = add nsw i32 %173, 30
  %175 = load i32, i32* %8, align 4
  %176 = add nsw i32 %174, %175
  %177 = load i32, i32* %7, align 4
  %178 = sub nsw i32 %176, %177
  %179 = add nsw i32 %178, 2
  store i32 %179, i32* %20, align 4
  %180 = load i32, i32* %20, align 4
  %181 = load i32, i32* %12, align 4
  %182 = icmp slt i32 %180, %181
  br i1 %182, label %183, label %185

183:                                              ; preds = %172
  %184 = load i32, i32* %20, align 4
  br label %187

185:                                              ; preds = %172
  %186 = load i32, i32* %12, align 4
  br label %187

187:                                              ; preds = %185, %183
  %188 = phi i32 [ %184, %183 ], [ %186, %185 ]
  store i32 %188, i32* %20, align 4
  %189 = load i32, i32* %8, align 4
  %190 = add nsw i32 %189, 1
  store i32 %190, i32* %6, align 4
  br label %191

191:                                              ; preds = %336, %187
  %192 = load i32, i32* %6, align 4
  %193 = load i32, i32* %20, align 4
  %194 = icmp sle i32 %192, %193
  br i1 %194, label %195, label %339

195:                                              ; preds = %191
  %196 = load i32*, i32** %15, align 8
  %197 = load i32, i32* %5, align 4
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds i32, i32* %196, i64 %198
  %200 = load i32, i32* %199, align 4
  %201 = load i32, i32* %6, align 4
  %202 = sub nsw i32 %200, %201
  store i32 %202, i32* %10, align 4
  %203 = load double*, double** %28, align 8
  %204 = load i32, i32* %10, align 4
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds double, double* %203, i64 %205
  %207 = load double, double* %206, align 8
  %208 = fcmp ogt double %207, 0.000000e+00
  br i1 %208, label %209, label %335

209:                                              ; preds = %195
  %210 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %211 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %210, i32 0, i32 22
  %212 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %211, align 8
  store %struct.vrna_unstructured_domain_s* %212, %struct.vrna_unstructured_domain_s** %31, align 8
  %213 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %214 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %213, i32 0, i32 22
  store %struct.vrna_unstructured_domain_s* null, %struct.vrna_unstructured_domain_s** %214, align 8
  %215 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %216 = load i32, i32* %5, align 4
  %217 = load i32, i32* %6, align 4
  %218 = load i32, i32* %7, align 4
  %219 = load i32, i32* %8, align 4
  %220 = call double @vrna_exp_E_interior_loop(%struct.vrna_fc_s* noundef %215, i32 noundef %216, i32 noundef %217, i32 noundef %218, i32 noundef %219)
  store double %220, double* %22, align 8
  %221 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %31, align 8
  %222 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %223 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %222, i32 0, i32 22
  store %struct.vrna_unstructured_domain_s* %221, %struct.vrna_unstructured_domain_s** %223, align 8
  %224 = load double, double* %22, align 8
  %225 = fcmp ogt double %224, 0.000000e+00
  br i1 %225, label %226, label %334

226:                                              ; preds = %209
  %227 = load double*, double** %28, align 8
  %228 = load i32, i32* %10, align 4
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds double, double* %227, i64 %229
  %231 = load double, double* %230, align 8
  %232 = load double*, double** %29, align 8
  %233 = load i32, i32* %9, align 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds double, double* %232, i64 %234
  %236 = load double, double* %235, align 8
  %237 = fmul double %231, %236
  %238 = load double, double* %26, align 8
  %239 = fmul double %237, %238
  %240 = load double, double* %22, align 8
  %241 = fmul double %240, %239
  store double %241, double* %22, align 8
  store double 0.000000e+00, double* %25, align 8
  store double 0.000000e+00, double* %24, align 8
  store double 0.000000e+00, double* %23, align 8
  %242 = load i32, i32* %6, align 4
  %243 = load i32, i32* %8, align 4
  %244 = sub nsw i32 %242, %243
  %245 = sub nsw i32 %244, 1
  %246 = icmp sgt i32 %245, 0
  br i1 %246, label %247, label %260

247:                                              ; preds = %226
  %248 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %249 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %248, i32 0, i32 11
  %250 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %249, align 8
  %251 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %252 = load i32, i32* %8, align 4
  %253 = add nsw i32 %252, 1
  %254 = load i32, i32* %6, align 4
  %255 = sub nsw i32 %254, 1
  %256 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %257 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %256, i32 0, i32 12
  %258 = load i8*, i8** %257, align 8
  %259 = call double %250(%struct.vrna_fc_s* noundef %251, i32 noundef %253, i32 noundef %255, i32 noundef 4, i8* noundef %258)
  store double %259, double* %23, align 8
  br label %260

260:                                              ; preds = %247, %226
  %261 = load i32, i32* %3, align 4
  %262 = load i32, i32* %5, align 4
  %263 = sub nsw i32 %261, %262
  %264 = sub nsw i32 %263, 1
  %265 = icmp sgt i32 %264, 0
  br i1 %265, label %266, label %279

266:                                              ; preds = %260
  %267 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %268 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %267, i32 0, i32 11
  %269 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %268, align 8
  %270 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %271 = load i32, i32* %5, align 4
  %272 = add nsw i32 %271, 1
  %273 = load i32, i32* %3, align 4
  %274 = sub nsw i32 %273, 1
  %275 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %276 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %275, i32 0, i32 12
  %277 = load i8*, i8** %276, align 8
  %278 = call double %269(%struct.vrna_fc_s* noundef %270, i32 noundef %272, i32 noundef %274, i32 noundef 4, i8* noundef %277)
  store double %278, double* %24, align 8
  br label %279

279:                                              ; preds = %266, %260
  %280 = load i32, i32* %7, align 4
  %281 = load i32, i32* %4, align 4
  %282 = sub nsw i32 %280, %281
  %283 = sub nsw i32 %282, 1
  %284 = icmp sgt i32 %283, 0
  br i1 %284, label %285, label %298

285:                                              ; preds = %279
  %286 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %287 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %286, i32 0, i32 11
  %288 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %287, align 8
  %289 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %290 = load i32, i32* %4, align 4
  %291 = add nsw i32 %290, 1
  %292 = load i32, i32* %7, align 4
  %293 = sub nsw i32 %292, 1
  %294 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %295 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %294, i32 0, i32 12
  %296 = load i8*, i8** %295, align 8
  %297 = call double %288(%struct.vrna_fc_s* noundef %289, i32 noundef %291, i32 noundef %293, i32 noundef 4, i8* noundef %296)
  store double %297, double* %25, align 8
  br label %298

298:                                              ; preds = %285, %279
  %299 = load double, double* %22, align 8
  %300 = load double, double* %27, align 8
  %301 = fadd double %300, %299
  store double %301, double* %27, align 8
  %302 = load double, double* %22, align 8
  %303 = load double, double* %23, align 8
  %304 = load double, double* %27, align 8
  %305 = call double @llvm.fmuladd.f64(double %302, double %303, double %304)
  store double %305, double* %27, align 8
  %306 = load double, double* %22, align 8
  %307 = load double, double* %23, align 8
  %308 = fmul double %306, %307
  %309 = load double, double* %24, align 8
  %310 = load double, double* %27, align 8
  %311 = call double @llvm.fmuladd.f64(double %308, double %309, double %310)
  store double %311, double* %27, align 8
  %312 = load double, double* %22, align 8
  %313 = load double, double* %23, align 8
  %314 = fmul double %312, %313
  %315 = load double, double* %24, align 8
  %316 = fmul double %314, %315
  %317 = load double, double* %25, align 8
  %318 = load double, double* %27, align 8
  %319 = call double @llvm.fmuladd.f64(double %316, double %317, double %318)
  store double %319, double* %27, align 8
  %320 = load double, double* %22, align 8
  %321 = load double, double* %24, align 8
  %322 = load double, double* %27, align 8
  %323 = call double @llvm.fmuladd.f64(double %320, double %321, double %322)
  store double %323, double* %27, align 8
  %324 = load double, double* %22, align 8
  %325 = load double, double* %24, align 8
  %326 = fmul double %324, %325
  %327 = load double, double* %25, align 8
  %328 = load double, double* %27, align 8
  %329 = call double @llvm.fmuladd.f64(double %326, double %327, double %328)
  store double %329, double* %27, align 8
  %330 = load double, double* %22, align 8
  %331 = load double, double* %25, align 8
  %332 = load double, double* %27, align 8
  %333 = call double @llvm.fmuladd.f64(double %330, double %331, double %332)
  store double %333, double* %27, align 8
  br label %334

334:                                              ; preds = %298, %209
  br label %335

335:                                              ; preds = %334, %195
  br label %336

336:                                              ; preds = %335
  %337 = load i32, i32* %6, align 4
  %338 = add nsw i32 %337, 1
  store i32 %338, i32* %6, align 4
  br label %191, !llvm.loop !95

339:                                              ; preds = %191
  br label %340

340:                                              ; preds = %339, %171
  %341 = load i32, i32* %8, align 4
  %342 = add nsw i32 %341, 1
  store i32 %342, i32* %8, align 4
  br label %153, !llvm.loop !96

343:                                              ; preds = %153
  br label %344

344:                                              ; preds = %343
  %345 = load i32, i32* %7, align 4
  %346 = add nsw i32 %345, 1
  store i32 %346, i32* %7, align 4
  br label %144, !llvm.loop !97

347:                                              ; preds = %144
  br label %348

348:                                              ; preds = %347
  %349 = load i32, i32* %5, align 4
  %350 = add nsw i32 %349, 1
  store i32 %350, i32* %5, align 4
  br label %125, !llvm.loop !98

351:                                              ; preds = %125
  store i32 1, i32* %5, align 4
  br label %352

352:                                              ; preds = %601, %351
  %353 = load i32, i32* %5, align 4
  %354 = load i32, i32* %3, align 4
  %355 = load i32, i32* %21, align 4
  %356 = sub nsw i32 %354, %355
  %357 = sub nsw i32 %356, 2
  %358 = icmp slt i32 %353, %357
  br i1 %358, label %359, label %604

359:                                              ; preds = %352
  %360 = load i32, i32* %5, align 4
  %361 = load i32, i32* %3, align 4
  %362 = add nsw i32 %360, %361
  %363 = add nsw i32 %362, 30
  %364 = load i32, i32* %4, align 4
  %365 = sub nsw i32 %363, %364
  store i32 %365, i32* %18, align 4
  %366 = load i32, i32* %18, align 4
  %367 = load i32, i32* %12, align 4
  %368 = icmp slt i32 %366, %367
  br i1 %368, label %369, label %371

369:                                              ; preds = %359
  %370 = load i32, i32* %18, align 4
  br label %373

371:                                              ; preds = %359
  %372 = load i32, i32* %12, align 4
  br label %373

373:                                              ; preds = %371, %369
  %374 = phi i32 [ %370, %369 ], [ %372, %371 ]
  store i32 %374, i32* %18, align 4
  %375 = load i32, i32* %5, align 4
  %376 = add nsw i32 %375, 1
  store i32 %376, i32* %7, align 4
  br label %377

377:                                              ; preds = %597, %373
  %378 = load i32, i32* %7, align 4
  %379 = load i32, i32* %18, align 4
  %380 = icmp sle i32 %378, %379
  br i1 %380, label %381, label %600

381:                                              ; preds = %377
  %382 = load i32, i32* %7, align 4
  %383 = load i32, i32* %4, align 4
  %384 = add nsw i32 %382, %383
  %385 = load i32, i32* %5, align 4
  %386 = sub nsw i32 %384, %385
  %387 = sub nsw i32 %386, 30
  %388 = sub nsw i32 %387, 1
  store i32 %388, i32* %19, align 4
  %389 = load i32, i32* %19, align 4
  %390 = load i32, i32* %7, align 4
  %391 = load i32, i32* %21, align 4
  %392 = add nsw i32 %390, %391
  %393 = add nsw i32 %392, 1
  %394 = icmp sgt i32 %389, %393
  br i1 %394, label %395, label %397

395:                                              ; preds = %381
  %396 = load i32, i32* %19, align 4
  br label %402

397:                                              ; preds = %381
  %398 = load i32, i32* %7, align 4
  %399 = load i32, i32* %21, align 4
  %400 = add nsw i32 %398, %399
  %401 = add nsw i32 %400, 1
  br label %402

402:                                              ; preds = %397, %395
  %403 = phi i32 [ %396, %395 ], [ %401, %397 ]
  store i32 %403, i32* %19, align 4
  %404 = load i32, i32* %3, align 4
  %405 = sub nsw i32 %404, 1
  store i32 %405, i32* %8, align 4
  br label %406

406:                                              ; preds = %593, %402
  %407 = load i32, i32* %8, align 4
  %408 = load i32, i32* %19, align 4
  %409 = icmp sge i32 %407, %408
  br i1 %409, label %410, label %596

410:                                              ; preds = %406
  %411 = load i32*, i32** %15, align 8
  %412 = load i32, i32* %7, align 4
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds i32, i32* %411, i64 %413
  %415 = load i32, i32* %414, align 4
  %416 = load i32, i32* %8, align 4
  %417 = sub nsw i32 %415, %416
  store i32 %417, i32* %9, align 4
  %418 = load double*, double** %29, align 8
  %419 = load i32, i32* %9, align 4
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds double, double* %418, i64 %420
  %422 = load double, double* %421, align 8
  %423 = fcmp oeq double %422, 0.000000e+00
  br i1 %423, label %424, label %425

424:                                              ; preds = %410
  br label %593

425:                                              ; preds = %410
  %426 = load i32, i32* %5, align 4
  %427 = load i32, i32* %8, align 4
  %428 = add nsw i32 %426, %427
  %429 = load i32, i32* %7, align 4
  %430 = sub nsw i32 %428, %429
  %431 = add nsw i32 %430, 30
  %432 = add nsw i32 %431, 2
  store i32 %432, i32* %20, align 4
  %433 = load i32, i32* %20, align 4
  %434 = load i32, i32* %12, align 4
  %435 = icmp slt i32 %433, %434
  br i1 %435, label %436, label %438

436:                                              ; preds = %425
  %437 = load i32, i32* %20, align 4
  br label %440

438:                                              ; preds = %425
  %439 = load i32, i32* %12, align 4
  br label %440

440:                                              ; preds = %438, %436
  %441 = phi i32 [ %437, %436 ], [ %439, %438 ]
  store i32 %441, i32* %20, align 4
  %442 = load i32, i32* %4, align 4
  %443 = add nsw i32 %442, 1
  store i32 %443, i32* %6, align 4
  br label %444

444:                                              ; preds = %589, %440
  %445 = load i32, i32* %6, align 4
  %446 = load i32, i32* %20, align 4
  %447 = icmp slt i32 %445, %446
  br i1 %447, label %448, label %592

448:                                              ; preds = %444
  %449 = load i32*, i32** %15, align 8
  %450 = load i32, i32* %5, align 4
  %451 = sext i32 %450 to i64
  %452 = getelementptr inbounds i32, i32* %449, i64 %451
  %453 = load i32, i32* %452, align 4
  %454 = load i32, i32* %6, align 4
  %455 = sub nsw i32 %453, %454
  store i32 %455, i32* %10, align 4
  %456 = load double*, double** %28, align 8
  %457 = load i32, i32* %10, align 4
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds double, double* %456, i64 %458
  %460 = load double, double* %459, align 8
  %461 = fcmp ogt double %460, 0.000000e+00
  br i1 %461, label %462, label %588

462:                                              ; preds = %448
  %463 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %464 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %463, i32 0, i32 22
  %465 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %464, align 8
  store %struct.vrna_unstructured_domain_s* %465, %struct.vrna_unstructured_domain_s** %31, align 8
  %466 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %467 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %466, i32 0, i32 22
  store %struct.vrna_unstructured_domain_s* null, %struct.vrna_unstructured_domain_s** %467, align 8
  %468 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %469 = load i32, i32* %5, align 4
  %470 = load i32, i32* %6, align 4
  %471 = load i32, i32* %7, align 4
  %472 = load i32, i32* %8, align 4
  %473 = call double @vrna_exp_E_interior_loop(%struct.vrna_fc_s* noundef %468, i32 noundef %469, i32 noundef %470, i32 noundef %471, i32 noundef %472)
  store double %473, double* %22, align 8
  %474 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %31, align 8
  %475 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %476 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %475, i32 0, i32 22
  store %struct.vrna_unstructured_domain_s* %474, %struct.vrna_unstructured_domain_s** %476, align 8
  %477 = load double, double* %22, align 8
  %478 = fcmp ogt double %477, 0.000000e+00
  br i1 %478, label %479, label %587

479:                                              ; preds = %462
  %480 = load double*, double** %28, align 8
  %481 = load i32, i32* %10, align 4
  %482 = sext i32 %481 to i64
  %483 = getelementptr inbounds double, double* %480, i64 %482
  %484 = load double, double* %483, align 8
  %485 = load double*, double** %29, align 8
  %486 = load i32, i32* %9, align 4
  %487 = sext i32 %486 to i64
  %488 = getelementptr inbounds double, double* %485, i64 %487
  %489 = load double, double* %488, align 8
  %490 = fmul double %484, %489
  %491 = load double, double* %26, align 8
  %492 = fmul double %490, %491
  %493 = load double, double* %22, align 8
  %494 = fmul double %493, %492
  store double %494, double* %22, align 8
  store double 0.000000e+00, double* %34, align 8
  store double 0.000000e+00, double* %33, align 8
  store double 0.000000e+00, double* %32, align 8
  %495 = load i32, i32* %6, align 4
  %496 = load i32, i32* %4, align 4
  %497 = sub nsw i32 %495, %496
  %498 = sub nsw i32 %497, 1
  %499 = icmp sgt i32 %498, 0
  br i1 %499, label %500, label %513

500:                                              ; preds = %479
  %501 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %502 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %501, i32 0, i32 11
  %503 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %502, align 8
  %504 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %505 = load i32, i32* %4, align 4
  %506 = add nsw i32 %505, 1
  %507 = load i32, i32* %6, align 4
  %508 = sub nsw i32 %507, 1
  %509 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %510 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %509, i32 0, i32 12
  %511 = load i8*, i8** %510, align 8
  %512 = call double %503(%struct.vrna_fc_s* noundef %504, i32 noundef %506, i32 noundef %508, i32 noundef 4, i8* noundef %511)
  store double %512, double* %32, align 8
  br label %513

513:                                              ; preds = %500, %479
  %514 = load i32, i32* %3, align 4
  %515 = load i32, i32* %8, align 4
  %516 = sub nsw i32 %514, %515
  %517 = sub nsw i32 %516, 1
  %518 = icmp sgt i32 %517, 0
  br i1 %518, label %519, label %532

519:                                              ; preds = %513
  %520 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %521 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %520, i32 0, i32 11
  %522 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %521, align 8
  %523 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %524 = load i32, i32* %8, align 4
  %525 = add nsw i32 %524, 1
  %526 = load i32, i32* %3, align 4
  %527 = sub nsw i32 %526, 1
  %528 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %529 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %528, i32 0, i32 12
  %530 = load i8*, i8** %529, align 8
  %531 = call double %522(%struct.vrna_fc_s* noundef %523, i32 noundef %525, i32 noundef %527, i32 noundef 4, i8* noundef %530)
  store double %531, double* %33, align 8
  br label %532

532:                                              ; preds = %519, %513
  %533 = load i32, i32* %7, align 4
  %534 = load i32, i32* %5, align 4
  %535 = sub nsw i32 %533, %534
  %536 = sub nsw i32 %535, 1
  %537 = icmp sgt i32 %536, 0
  br i1 %537, label %538, label %551

538:                                              ; preds = %532
  %539 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %540 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %539, i32 0, i32 11
  %541 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %540, align 8
  %542 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %543 = load i32, i32* %5, align 4
  %544 = add nsw i32 %543, 1
  %545 = load i32, i32* %7, align 4
  %546 = sub nsw i32 %545, 1
  %547 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %548 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %547, i32 0, i32 12
  %549 = load i8*, i8** %548, align 8
  %550 = call double %541(%struct.vrna_fc_s* noundef %542, i32 noundef %544, i32 noundef %546, i32 noundef 4, i8* noundef %549)
  store double %550, double* %34, align 8
  br label %551

551:                                              ; preds = %538, %532
  %552 = load double, double* %22, align 8
  %553 = load double, double* %27, align 8
  %554 = fadd double %553, %552
  store double %554, double* %27, align 8
  %555 = load double, double* %22, align 8
  %556 = load double, double* %32, align 8
  %557 = load double, double* %27, align 8
  %558 = call double @llvm.fmuladd.f64(double %555, double %556, double %557)
  store double %558, double* %27, align 8
  %559 = load double, double* %22, align 8
  %560 = load double, double* %32, align 8
  %561 = fmul double %559, %560
  %562 = load double, double* %33, align 8
  %563 = load double, double* %27, align 8
  %564 = call double @llvm.fmuladd.f64(double %561, double %562, double %563)
  store double %564, double* %27, align 8
  %565 = load double, double* %22, align 8
  %566 = load double, double* %32, align 8
  %567 = fmul double %565, %566
  %568 = load double, double* %33, align 8
  %569 = fmul double %567, %568
  %570 = load double, double* %34, align 8
  %571 = load double, double* %27, align 8
  %572 = call double @llvm.fmuladd.f64(double %569, double %570, double %571)
  store double %572, double* %27, align 8
  %573 = load double, double* %22, align 8
  %574 = load double, double* %33, align 8
  %575 = load double, double* %27, align 8
  %576 = call double @llvm.fmuladd.f64(double %573, double %574, double %575)
  store double %576, double* %27, align 8
  %577 = load double, double* %22, align 8
  %578 = load double, double* %33, align 8
  %579 = fmul double %577, %578
  %580 = load double, double* %34, align 8
  %581 = load double, double* %27, align 8
  %582 = call double @llvm.fmuladd.f64(double %579, double %580, double %581)
  store double %582, double* %27, align 8
  %583 = load double, double* %22, align 8
  %584 = load double, double* %34, align 8
  %585 = load double, double* %27, align 8
  %586 = call double @llvm.fmuladd.f64(double %583, double %584, double %585)
  store double %586, double* %27, align 8
  br label %587

587:                                              ; preds = %551, %462
  br label %588

588:                                              ; preds = %587, %448
  br label %589

589:                                              ; preds = %588
  %590 = load i32, i32* %6, align 4
  %591 = add nsw i32 %590, 1
  store i32 %591, i32* %6, align 4
  br label %444, !llvm.loop !99

592:                                              ; preds = %444
  br label %593

593:                                              ; preds = %592, %424
  %594 = load i32, i32* %8, align 4
  %595 = add nsw i32 %594, -1
  store i32 %595, i32* %8, align 4
  br label %406, !llvm.loop !100

596:                                              ; preds = %406
  br label %597

597:                                              ; preds = %596
  %598 = load i32, i32* %7, align 4
  %599 = add nsw i32 %598, 1
  store i32 %599, i32* %7, align 4
  br label %377, !llvm.loop !101

600:                                              ; preds = %377
  br label %601

601:                                              ; preds = %600
  %602 = load i32, i32* %5, align 4
  %603 = add nsw i32 %602, 1
  store i32 %603, i32* %5, align 4
  br label %352, !llvm.loop !102

604:                                              ; preds = %352
  br label %605

605:                                              ; preds = %604, %95
  br label %606

606:                                              ; preds = %605, %87
  %607 = load double, double* %27, align 8
  %608 = fcmp ogt double %607, 0.000000e+00
  br i1 %608, label %609, label %620

609:                                              ; preds = %606
  %610 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %611 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %610, i32 0, i32 14
  %612 = load void (%struct.vrna_fc_s*, i32, i32, i32, double, i8*)*, void (%struct.vrna_fc_s*, i32, i32, i32, double, i8*)** %611, align 8
  %613 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %614 = load i32, i32* %3, align 4
  %615 = load i32, i32* %4, align 4
  %616 = load double, double* %27, align 8
  %617 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %30, align 8
  %618 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %617, i32 0, i32 12
  %619 = load i8*, i8** %618, align 8
  call void %612(%struct.vrna_fc_s* noundef %613, i32 noundef %614, i32 noundef %615, i32 noundef 20, double noundef %616, i8* noundef %619)
  br label %620

620:                                              ; preds = %609, %606
  %621 = load i32, i32* %13, align 4
  %622 = add nsw i32 %621, 1
  store i32 %622, i32* %13, align 4
  br label %80, !llvm.loop !103

623:                                              ; preds = %80
  br label %624

624:                                              ; preds = %623, %73
  %625 = load i32*, i32** %14, align 8
  %626 = bitcast i32* %625 to i8*
  call void @free(i8* noundef %626) #5
  br label %627

627:                                              ; preds = %624
  %628 = load i32, i32* %3, align 4
  %629 = add nsw i32 %628, 1
  store i32 %629, i32* %3, align 4
  br label %69, !llvm.loop !104

630:                                              ; preds = %69
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @ud_outside_mb_loops(%struct.vrna_fc_s* noundef %0) #0 {
  %2 = alloca %struct.vrna_fc_s*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32*, align 8
  %21 = alloca i32*, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca double, align 8
  %25 = alloca double*, align 8
  %26 = alloca double, align 8
  %27 = alloca double, align 8
  %28 = alloca double*, align 8
  %29 = alloca double*, align 8
  %30 = alloca double*, align 8
  %31 = alloca double, align 8
  %32 = alloca double*, align 8
  %33 = alloca double*, align 8
  %34 = alloca double, align 8
  %35 = alloca double, align 8
  %36 = alloca %struct.vrna_exp_param_s*, align 8
  %37 = alloca %struct.vrna_md_s*, align 8
  %38 = alloca %struct.vrna_sc_s*, align 8
  %39 = alloca %struct.vrna_unstructured_domain_s*, align 8
  %40 = alloca double, align 8
  %41 = alloca double**, align 8
  %42 = alloca double, align 8
  %43 = alloca double, align 8
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca double*, align 8
  %47 = alloca double, align 8
  %48 = alloca double, align 8
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %2, align 8
  %51 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %52 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %51, i32 0, i32 1
  %53 = load i32, i32* %52, align 4
  store i32 %53, i32* %14, align 4
  %54 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %55 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %54, i32 0, i32 24
  %56 = bitcast %union.anon.9* %55 to %struct.anon.10*
  %57 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %56, i32 0, i32 1
  %58 = load i16*, i16** %57, align 8
  store i16* %58, i16** %5, align 8
  %59 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %60 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %59, i32 0, i32 16
  %61 = load i32*, i32** %60, align 8
  store i32* %61, i32** %12, align 8
  %62 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %63 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %62, i32 0, i32 17
  %64 = load i32*, i32** %63, align 8
  store i32* %64, i32** %20, align 8
  %65 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %66 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %65, i32 0, i32 24
  %67 = bitcast %union.anon.9* %66 to %struct.anon.10*
  %68 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %67, i32 0, i32 3
  %69 = load i8*, i8** %68, align 8
  store i8* %69, i8** %4, align 8
  %70 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %71 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %70, i32 0, i32 15
  %72 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %71, align 8
  store %struct.vrna_exp_param_s* %72, %struct.vrna_exp_param_s** %36, align 8
  %73 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %74 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %73, i32 0, i32 15
  %75 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %74, align 8
  %76 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %75, i32 0, i32 40
  store %struct.vrna_md_s* %76, %struct.vrna_md_s** %37, align 8
  %77 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %78 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %77, i32 0, i32 13
  %79 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %78, align 8
  %80 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %79, i32 0, i32 4
  %81 = bitcast %union.anon.5* %80 to %struct.anon.6*
  %82 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %81, i32 0, i32 1
  %83 = load double*, double** %82, align 8
  store double* %83, double** %29, align 8
  %84 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %85 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %84, i32 0, i32 13
  %86 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %85, align 8
  %87 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %86, i32 0, i32 4
  %88 = bitcast %union.anon.5* %87 to %struct.anon.6*
  %89 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %88, i32 0, i32 2
  %90 = load double*, double** %89, align 8
  store double* %90, double** %30, align 8
  %91 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %92 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %91, i32 0, i32 13
  %93 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %92, align 8
  %94 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %93, i32 0, i32 4
  %95 = bitcast %union.anon.5* %94 to %struct.anon.6*
  %96 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %95, i32 0, i32 4
  %97 = load double*, double** %96, align 8
  store double* %97, double** %28, align 8
  %98 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %99 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %98, i32 0, i32 13
  %100 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %99, align 8
  %101 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %100, i32 0, i32 2
  %102 = load double*, double** %101, align 8
  store double* %102, double** %25, align 8
  %103 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %104 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %103, i32 0, i32 11
  %105 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %104, align 8
  %106 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %105, i32 0, i32 7
  %107 = load i32*, i32** %106, align 8
  store i32* %107, i32** %17, align 8
  %108 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %109 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %108, i32 0, i32 11
  %110 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %109, align 8
  %111 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %110, i32 0, i32 3
  %112 = bitcast %union.anon* %111 to %struct.anon*
  %113 = getelementptr inbounds %struct.anon, %struct.anon* %112, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  store i8* %114, i8** %3, align 8
  %115 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %116 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %115, i32 0, i32 22
  %117 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %116, align 8
  store %struct.vrna_unstructured_domain_s* %117, %struct.vrna_unstructured_domain_s** %39, align 8
  %118 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %119 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %118, i32 0, i32 24
  %120 = bitcast %union.anon.9* %119 to %struct.anon.10*
  %121 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %120, i32 0, i32 5
  %122 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %121, align 8
  store %struct.vrna_sc_s* %122, %struct.vrna_sc_s** %38, align 8
  %123 = load %struct.vrna_md_s*, %struct.vrna_md_s** %37, align 8
  %124 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %123, i32 0, i32 18
  %125 = load i32, i32* %124, align 4
  store i32 %125, i32* %18, align 4
  %126 = load %struct.vrna_md_s*, %struct.vrna_md_s** %37, align 8
  %127 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %126, i32 0, i32 25
  %128 = getelementptr inbounds [8 x i32], [8 x i32]* %127, i64 0, i64 0
  store i32* %128, i32** %21, align 8
  %129 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %130 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %129, i32 0, i32 13
  %131 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %130, align 8
  %132 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %131, i32 0, i32 3
  %133 = load double*, double** %132, align 8
  store double* %133, double** %32, align 8
  %134 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %36, align 8
  %135 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %134, i32 0, i32 20
  %136 = load double, double* %135, align 8
  store double %136, double* %31, align 8
  store i32 0, i32* %13, align 4
  store i32 0, i32* %23, align 4
  br label %137

137:                                              ; preds = %162, %1
  %138 = load i32, i32* %13, align 4
  %139 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %140 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %139, i32 0, i32 0
  %141 = load i32, i32* %140, align 8
  %142 = icmp slt i32 %138, %141
  br i1 %142, label %143, label %165

143:                                              ; preds = %137
  %144 = load i32, i32* %23, align 4
  %145 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %146 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %145, i32 0, i32 1
  %147 = load i32*, i32** %146, align 8
  %148 = load i32, i32* %13, align 4
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i32, i32* %147, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = icmp ult i32 %144, %151
  br i1 %152, label %153, label %161

153:                                              ; preds = %143
  %154 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %155 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %154, i32 0, i32 1
  %156 = load i32*, i32** %155, align 8
  %157 = load i32, i32* %13, align 4
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds i32, i32* %156, i64 %158
  %160 = load i32, i32* %159, align 4
  store i32 %160, i32* %23, align 4
  br label %161

161:                                              ; preds = %153, %143
  br label %162

162:                                              ; preds = %161
  %163 = load i32, i32* %13, align 4
  %164 = add nsw i32 %163, 1
  store i32 %164, i32* %13, align 4
  br label %137, !llvm.loop !105

165:                                              ; preds = %137
  store i32 1, i32* %6, align 4
  br label %166

166:                                              ; preds = %1257, %165
  %167 = load i32, i32* %6, align 4
  %168 = load i32, i32* %14, align 4
  %169 = icmp sle i32 %167, %168
  br i1 %169, label %170, label %1260

170:                                              ; preds = %166
  %171 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %172 = load i32, i32* %6, align 4
  %173 = call i32* @vrna_ud_get_motif_size_at(%struct.vrna_fc_s* noundef %171, i32 noundef %172, i32 noundef 8)
  store i32* %173, i32** %16, align 8
  %174 = load i32*, i32** %16, align 8
  %175 = icmp ne i32* %174, null
  br i1 %175, label %176, label %1254

176:                                              ; preds = %170
  store i32 0, i32* %15, align 4
  br label %177

177:                                              ; preds = %1250, %176
  %178 = load i32*, i32** %16, align 8
  %179 = load i32, i32* %15, align 4
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds i32, i32* %178, i64 %180
  %182 = load i32, i32* %181, align 4
  store i32 %182, i32* %13, align 4
  %183 = icmp ne i32 -1, %182
  br i1 %183, label %184, label %1253

184:                                              ; preds = %177
  store double 0.000000e+00, double* %26, align 8
  %185 = load i32, i32* %6, align 4
  %186 = load i32, i32* %13, align 4
  %187 = add nsw i32 %185, %186
  %188 = sub nsw i32 %187, 1
  store i32 %188, i32* %7, align 4
  %189 = load i32, i32* %7, align 4
  %190 = load i32, i32* %14, align 4
  %191 = icmp slt i32 %189, %190
  br i1 %191, label %192, label %1236

192:                                              ; preds = %184
  %193 = load i32*, i32** %17, align 8
  %194 = load i32, i32* %6, align 4
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i32, i32* %193, i64 %195
  %197 = load i32, i32* %196, align 4
  %198 = load i32, i32* %13, align 4
  %199 = icmp sge i32 %197, %198
  br i1 %199, label %200, label %1235

200:                                              ; preds = %192
  %201 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %202 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %201, i32 0, i32 11
  %203 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %202, align 8
  %204 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %205 = load i32, i32* %6, align 4
  %206 = load i32, i32* %7, align 4
  %207 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %208 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %207, i32 0, i32 12
  %209 = load i8*, i8** %208, align 8
  %210 = call double %203(%struct.vrna_fc_s* noundef %204, i32 noundef %205, i32 noundef %206, i32 noundef 24, i8* noundef %209)
  store double %210, double* %27, align 8
  %211 = load double*, double** %32, align 8
  %212 = load i32, i32* %13, align 4
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds double, double* %211, i64 %213
  %215 = load double, double* %214, align 8
  %216 = load double, double* %27, align 8
  %217 = fmul double %216, %215
  store double %217, double* %27, align 8
  %218 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %219 = icmp ne %struct.vrna_sc_s* %218, null
  br i1 %219, label %220, label %240

220:                                              ; preds = %200
  %221 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %222 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %221, i32 0, i32 4
  %223 = load double**, double*** %222, align 8
  %224 = icmp ne double** %223, null
  br i1 %224, label %225, label %239

225:                                              ; preds = %220
  %226 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %227 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %226, i32 0, i32 4
  %228 = load double**, double*** %227, align 8
  %229 = load i32, i32* %6, align 4
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds double*, double** %228, i64 %230
  %232 = load double*, double** %231, align 8
  %233 = load i32, i32* %13, align 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds double, double* %232, i64 %234
  %236 = load double, double* %235, align 8
  %237 = load double, double* %27, align 8
  %238 = fmul double %237, %236
  store double %238, double* %27, align 8
  br label %239

239:                                              ; preds = %225, %220
  br label %240

240:                                              ; preds = %239, %200
  store double 0.000000e+00, double* %24, align 8
  %241 = load i32, i32* %7, align 4
  %242 = load i32, i32* %18, align 4
  %243 = add nsw i32 %241, %242
  %244 = add nsw i32 %243, 1
  store i32 %244, i32* %9, align 4
  br label %245

245:                                              ; preds = %388, %240
  %246 = load i32, i32* %9, align 4
  %247 = load i32, i32* %14, align 4
  %248 = icmp sle i32 %246, %247
  br i1 %248, label %249, label %391

249:                                              ; preds = %245
  %250 = load i32, i32* %6, align 4
  %251 = load i32, i32* %18, align 4
  %252 = sub nsw i32 %250, %251
  %253 = sub nsw i32 %252, 1
  store i32 %253, i32* %8, align 4
  br label %254

254:                                              ; preds = %384, %249
  %255 = load i32, i32* %8, align 4
  %256 = icmp sgt i32 %255, 0
  br i1 %256, label %257, label %387

257:                                              ; preds = %254
  %258 = load i32*, i32** %12, align 8
  %259 = load i32, i32* %8, align 4
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds i32, i32* %258, i64 %260
  %262 = load i32, i32* %261, align 4
  %263 = load i32, i32* %9, align 4
  %264 = sub nsw i32 %262, %263
  store i32 %264, i32* %10, align 4
  %265 = load double*, double** %28, align 8
  %266 = load i32, i32* %10, align 4
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds double, double* %265, i64 %267
  %269 = load double, double* %268, align 8
  %270 = fcmp ogt double %269, 0.000000e+00
  br i1 %270, label %271, label %383

271:                                              ; preds = %257
  %272 = load i8*, i8** %3, align 8
  %273 = load i32, i32* %14, align 4
  %274 = load i32, i32* %9, align 4
  %275 = mul nsw i32 %273, %274
  %276 = load i32, i32* %8, align 4
  %277 = add nsw i32 %275, %276
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds i8, i8* %272, i64 %278
  %280 = load i8, i8* %279, align 1
  %281 = zext i8 %280 to i32
  %282 = and i32 %281, 16
  %283 = icmp ne i32 %282, 0
  br i1 %283, label %284, label %382

284:                                              ; preds = %271
  %285 = load i32*, i32** %20, align 8
  %286 = load i32, i32* %9, align 4
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds i32, i32* %285, i64 %287
  %289 = load i32, i32* %288, align 4
  %290 = load i32, i32* %8, align 4
  %291 = add nsw i32 %289, %290
  store i32 %291, i32* %11, align 4
  %292 = load i32*, i32** %21, align 8
  %293 = load i32, i32* %11, align 4
  %294 = load i8*, i8** %4, align 8
  %295 = call i32 @vrna_get_ptype(i32 noundef %293, i8* noundef %294)
  %296 = zext i32 %295 to i64
  %297 = getelementptr inbounds i32, i32* %292, i64 %296
  %298 = load i32, i32* %297, align 4
  store i32 %298, i32* %19, align 4
  %299 = load double*, double** %28, align 8
  %300 = load i32, i32* %10, align 4
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds double, double* %299, i64 %301
  %303 = load double, double* %302, align 8
  %304 = load double*, double** %30, align 8
  %305 = load i32*, i32** %12, align 8
  %306 = load i32, i32* %8, align 4
  %307 = add nsw i32 %306, 1
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds i32, i32* %305, i64 %308
  %310 = load i32, i32* %309, align 4
  %311 = load i32, i32* %6, align 4
  %312 = sub nsw i32 %311, 1
  %313 = sub nsw i32 %310, %312
  %314 = sext i32 %313 to i64
  %315 = getelementptr inbounds double, double* %304, i64 %314
  %316 = load double, double* %315, align 8
  %317 = fmul double %303, %316
  %318 = load double*, double** %30, align 8
  %319 = load i32*, i32** %12, align 8
  %320 = load i32, i32* %7, align 4
  %321 = add nsw i32 %320, 1
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds i32, i32* %319, i64 %322
  %324 = load i32, i32* %323, align 4
  %325 = load i32, i32* %9, align 4
  %326 = sub nsw i32 %325, 1
  %327 = sub nsw i32 %324, %326
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds double, double* %318, i64 %328
  %330 = load double, double* %329, align 8
  %331 = fmul double %317, %330
  %332 = load i32, i32* %19, align 4
  %333 = load i16*, i16** %5, align 8
  %334 = load i32, i32* %9, align 4
  %335 = sub nsw i32 %334, 1
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds i16, i16* %333, i64 %336
  %338 = load i16, i16* %337, align 2
  %339 = sext i16 %338 to i32
  %340 = load i16*, i16** %5, align 8
  %341 = load i32, i32* %8, align 4
  %342 = add nsw i32 %341, 1
  %343 = sext i32 %342 to i64
  %344 = getelementptr inbounds i16, i16* %340, i64 %343
  %345 = load i16, i16* %344, align 2
  %346 = sext i16 %345 to i32
  %347 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %36, align 8
  %348 = call double @exp_E_MLstem(i32 noundef %332, i32 noundef %339, i32 noundef %346, %struct.vrna_exp_param_s* noundef %347)
  %349 = fmul double %331, %348
  %350 = load double, double* %31, align 8
  %351 = fmul double %349, %350
  %352 = load double*, double** %25, align 8
  %353 = getelementptr inbounds double, double* %352, i64 2
  %354 = load double, double* %353, align 8
  %355 = fmul double %351, %354
  store double %355, double* %40, align 8
  %356 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %357 = icmp ne %struct.vrna_sc_s* %356, null
  br i1 %357, label %358, label %378

358:                                              ; preds = %284
  %359 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %360 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %359, i32 0, i32 7
  %361 = bitcast %union.anon.11* %360 to %struct.anon.12*
  %362 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %361, i32 0, i32 1
  %363 = load double*, double** %362, align 8
  %364 = icmp ne double* %363, null
  br i1 %364, label %365, label %377

365:                                              ; preds = %358
  %366 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %367 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %366, i32 0, i32 7
  %368 = bitcast %union.anon.11* %367 to %struct.anon.12*
  %369 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %368, i32 0, i32 1
  %370 = load double*, double** %369, align 8
  %371 = load i32, i32* %11, align 4
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds double, double* %370, i64 %372
  %374 = load double, double* %373, align 8
  %375 = load double, double* %40, align 8
  %376 = fmul double %375, %374
  store double %376, double* %40, align 8
  br label %377

377:                                              ; preds = %365, %358
  br label %378

378:                                              ; preds = %377, %284
  %379 = load double, double* %40, align 8
  %380 = load double, double* %24, align 8
  %381 = fadd double %380, %379
  store double %381, double* %24, align 8
  br label %382

382:                                              ; preds = %378, %271
  br label %383

383:                                              ; preds = %382, %257
  br label %384

384:                                              ; preds = %383
  %385 = load i32, i32* %8, align 4
  %386 = add nsw i32 %385, -1
  store i32 %386, i32* %8, align 4
  br label %254, !llvm.loop !106

387:                                              ; preds = %254
  br label %388

388:                                              ; preds = %387
  %389 = load i32, i32* %9, align 4
  %390 = add nsw i32 %389, 1
  store i32 %390, i32* %9, align 4
  br label %245, !llvm.loop !107

391:                                              ; preds = %245
  %392 = load double, double* %24, align 8
  %393 = load double, double* %27, align 8
  %394 = load double, double* %26, align 8
  %395 = call double @llvm.fmuladd.f64(double %392, double %393, double %394)
  store double %395, double* %26, align 8
  %396 = load i32, i32* %23, align 4
  %397 = add nsw i32 %396, 1
  %398 = sext i32 %397 to i64
  %399 = mul i64 8, %398
  %400 = trunc i64 %399 to i32
  %401 = call i8* @vrna_alloc(i32 noundef %400)
  %402 = bitcast i8* %401 to double**
  store double** %402, double*** %41, align 8
  store i32 0, i32* %9, align 4
  br label %403

403:                                              ; preds = %419, %391
  %404 = load i32, i32* %9, align 4
  %405 = load i32, i32* %23, align 4
  %406 = icmp sle i32 %404, %405
  br i1 %406, label %407, label %422

407:                                              ; preds = %403
  %408 = load i32, i32* %14, align 4
  %409 = add nsw i32 %408, 2
  %410 = sext i32 %409 to i64
  %411 = mul i64 8, %410
  %412 = trunc i64 %411 to i32
  %413 = call i8* @vrna_alloc(i32 noundef %412)
  %414 = bitcast i8* %413 to double*
  %415 = load double**, double*** %41, align 8
  %416 = load i32, i32* %9, align 4
  %417 = sext i32 %416 to i64
  %418 = getelementptr inbounds double*, double** %415, i64 %417
  store double* %414, double** %418, align 8
  br label %419

419:                                              ; preds = %407
  %420 = load i32, i32* %9, align 4
  %421 = add nsw i32 %420, 1
  store i32 %421, i32* %9, align 4
  br label %403, !llvm.loop !108

422:                                              ; preds = %403
  store double 0.000000e+00, double* %34, align 8
  %423 = load i32, i32* %7, align 4
  %424 = load i32, i32* %18, align 4
  %425 = add nsw i32 %423, %424
  %426 = add nsw i32 %425, 1
  store i32 %426, i32* %9, align 4
  br label %427

427:                                              ; preds = %878, %422
  %428 = load i32, i32* %9, align 4
  %429 = load i32, i32* %14, align 4
  %430 = icmp sle i32 %428, %429
  br i1 %430, label %431, label %881

431:                                              ; preds = %427
  store double 0.000000e+00, double* %42, align 8
  store double 0.000000e+00, double* %43, align 8
  %432 = load i32, i32* %6, align 4
  %433 = sub nsw i32 %432, 1
  store i32 %433, i32* %8, align 4
  br label %434

434:                                              ; preds = %589, %431
  %435 = load i32, i32* %8, align 4
  %436 = icmp sgt i32 %435, 0
  br i1 %436, label %437, label %592

437:                                              ; preds = %434
  %438 = load i32, i32* %6, align 4
  %439 = load i32, i32* %8, align 4
  %440 = sub nsw i32 %438, %439
  %441 = sub nsw i32 %440, 1
  store i32 %441, i32* %22, align 4
  %442 = load i32*, i32** %12, align 8
  %443 = load i32, i32* %8, align 4
  %444 = sext i32 %443 to i64
  %445 = getelementptr inbounds i32, i32* %442, i64 %444
  %446 = load i32, i32* %445, align 4
  %447 = load i32, i32* %9, align 4
  %448 = sub nsw i32 %446, %447
  store i32 %448, i32* %10, align 4
  %449 = load i8*, i8** %3, align 8
  %450 = load i32, i32* %14, align 4
  %451 = load i32, i32* %9, align 4
  %452 = mul nsw i32 %450, %451
  %453 = load i32, i32* %8, align 4
  %454 = add nsw i32 %452, %453
  %455 = sext i32 %454 to i64
  %456 = getelementptr inbounds i8, i8* %449, i64 %455
  %457 = load i8, i8* %456, align 1
  %458 = zext i8 %457 to i32
  %459 = and i32 %458, 16
  %460 = icmp ne i32 %459, 0
  br i1 %460, label %461, label %588

461:                                              ; preds = %437
  %462 = load double*, double** %28, align 8
  %463 = load i32, i32* %10, align 4
  %464 = sext i32 %463 to i64
  %465 = getelementptr inbounds double, double* %462, i64 %464
  %466 = load double, double* %465, align 8
  %467 = fcmp ogt double %466, 0.000000e+00
  br i1 %467, label %468, label %588

468:                                              ; preds = %461
  %469 = load i32*, i32** %17, align 8
  %470 = load i32, i32* %8, align 4
  %471 = add nsw i32 %470, 1
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds i32, i32* %469, i64 %472
  %474 = load i32, i32* %473, align 4
  %475 = load i32, i32* %22, align 4
  %476 = icmp sge i32 %474, %475
  br i1 %476, label %477, label %588

477:                                              ; preds = %468
  %478 = load i32*, i32** %20, align 8
  %479 = load i32, i32* %9, align 4
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds i32, i32* %478, i64 %480
  %482 = load i32, i32* %481, align 4
  %483 = load i32, i32* %8, align 4
  %484 = add nsw i32 %482, %483
  store i32 %484, i32* %44, align 4
  %485 = load i32*, i32** %21, align 8
  %486 = load i32, i32* %44, align 4
  %487 = load i8*, i8** %4, align 8
  %488 = call i32 @vrna_get_ptype(i32 noundef %486, i8* noundef %487)
  %489 = zext i32 %488 to i64
  %490 = getelementptr inbounds i32, i32* %485, i64 %489
  %491 = load i32, i32* %490, align 4
  store i32 %491, i32* %19, align 4
  %492 = load double*, double** %28, align 8
  %493 = load i32, i32* %10, align 4
  %494 = sext i32 %493 to i64
  %495 = getelementptr inbounds double, double* %492, i64 %494
  %496 = load double, double* %495, align 8
  %497 = load double*, double** %32, align 8
  %498 = load i32, i32* %22, align 4
  %499 = sext i32 %498 to i64
  %500 = getelementptr inbounds double, double* %497, i64 %499
  %501 = load double, double* %500, align 8
  %502 = fmul double %496, %501
  %503 = load i32, i32* %19, align 4
  %504 = load i16*, i16** %5, align 8
  %505 = load i32, i32* %9, align 4
  %506 = sub nsw i32 %505, 1
  %507 = sext i32 %506 to i64
  %508 = getelementptr inbounds i16, i16* %504, i64 %507
  %509 = load i16, i16* %508, align 2
  %510 = sext i16 %509 to i32
  %511 = load i16*, i16** %5, align 8
  %512 = load i32, i32* %8, align 4
  %513 = add nsw i32 %512, 1
  %514 = sext i32 %513 to i64
  %515 = getelementptr inbounds i16, i16* %511, i64 %514
  %516 = load i16, i16* %515, align 2
  %517 = sext i16 %516 to i32
  %518 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %36, align 8
  %519 = call double @exp_E_MLstem(i32 noundef %503, i32 noundef %510, i32 noundef %517, %struct.vrna_exp_param_s* noundef %518)
  %520 = fmul double %502, %519
  %521 = load double, double* %31, align 8
  %522 = fmul double %520, %521
  %523 = load double*, double** %25, align 8
  %524 = getelementptr inbounds double, double* %523, i64 2
  %525 = load double, double* %524, align 8
  %526 = fmul double %522, %525
  store double %526, double* %24, align 8
  %527 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %528 = icmp ne %struct.vrna_sc_s* %527, null
  br i1 %528, label %529, label %569

529:                                              ; preds = %477
  %530 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %531 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %530, i32 0, i32 7
  %532 = bitcast %union.anon.11* %531 to %struct.anon.12*
  %533 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %532, i32 0, i32 1
  %534 = load double*, double** %533, align 8
  %535 = icmp ne double* %534, null
  br i1 %535, label %536, label %548

536:                                              ; preds = %529
  %537 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %538 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %537, i32 0, i32 7
  %539 = bitcast %union.anon.11* %538 to %struct.anon.12*
  %540 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %539, i32 0, i32 1
  %541 = load double*, double** %540, align 8
  %542 = load i32, i32* %44, align 4
  %543 = sext i32 %542 to i64
  %544 = getelementptr inbounds double, double* %541, i64 %543
  %545 = load double, double* %544, align 8
  %546 = load double, double* %24, align 8
  %547 = fmul double %546, %545
  store double %547, double* %24, align 8
  br label %548

548:                                              ; preds = %536, %529
  %549 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %550 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %549, i32 0, i32 4
  %551 = load double**, double*** %550, align 8
  %552 = icmp ne double** %551, null
  br i1 %552, label %553, label %568

553:                                              ; preds = %548
  %554 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %555 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %554, i32 0, i32 4
  %556 = load double**, double*** %555, align 8
  %557 = load i32, i32* %8, align 4
  %558 = add nsw i32 %557, 1
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds double*, double** %556, i64 %559
  %561 = load double*, double** %560, align 8
  %562 = load i32, i32* %22, align 4
  %563 = sext i32 %562 to i64
  %564 = getelementptr inbounds double, double* %561, i64 %563
  %565 = load double, double* %564, align 8
  %566 = load double, double* %24, align 8
  %567 = fmul double %566, %565
  store double %567, double* %24, align 8
  br label %568

568:                                              ; preds = %553, %548
  br label %569

569:                                              ; preds = %568, %477
  %570 = load double, double* %24, align 8
  %571 = load double, double* %42, align 8
  %572 = fadd double %571, %570
  store double %572, double* %42, align 8
  %573 = load double, double* %24, align 8
  %574 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %575 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %574, i32 0, i32 11
  %576 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %575, align 8
  %577 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %578 = load i32, i32* %8, align 4
  %579 = add nsw i32 %578, 1
  %580 = load i32, i32* %6, align 4
  %581 = sub nsw i32 %580, 1
  %582 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %583 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %582, i32 0, i32 12
  %584 = load i8*, i8** %583, align 8
  %585 = call double %576(%struct.vrna_fc_s* noundef %577, i32 noundef %579, i32 noundef %581, i32 noundef 8, i8* noundef %584)
  %586 = load double, double* %42, align 8
  %587 = call double @llvm.fmuladd.f64(double %573, double %585, double %586)
  store double %587, double* %42, align 8
  br label %588

588:                                              ; preds = %569, %468, %461, %437
  br label %589

589:                                              ; preds = %588
  %590 = load i32, i32* %8, align 4
  %591 = add nsw i32 %590, -1
  store i32 %591, i32* %8, align 4
  br label %434, !llvm.loop !109

592:                                              ; preds = %434
  %593 = load i32, i32* %7, align 4
  %594 = load i32, i32* %18, align 4
  %595 = add nsw i32 %593, %594
  %596 = add nsw i32 %595, 1
  store i32 %596, i32* %13, align 4
  br label %597

597:                                              ; preds = %843, %592
  %598 = load i32, i32* %13, align 4
  %599 = load i32, i32* %9, align 4
  %600 = load i32, i32* %18, align 4
  %601 = sub nsw i32 %599, %600
  %602 = icmp slt i32 %598, %601
  br i1 %602, label %603, label %846

603:                                              ; preds = %597
  %604 = load i32*, i32** %17, align 8
  %605 = load i32, i32* %9, align 4
  %606 = sub nsw i32 %605, 1
  %607 = sext i32 %606 to i64
  %608 = getelementptr inbounds i32, i32* %604, i64 %607
  %609 = load i32, i32* %608, align 4
  %610 = icmp ne i32 %609, 0
  br i1 %610, label %611, label %652

611:                                              ; preds = %603
  %612 = load double**, double*** %41, align 8
  %613 = getelementptr inbounds double*, double** %612, i64 1
  %614 = load double*, double** %613, align 8
  %615 = load i32, i32* %13, align 4
  %616 = sext i32 %615 to i64
  %617 = getelementptr inbounds double, double* %614, i64 %616
  %618 = load double, double* %617, align 8
  %619 = load double*, double** %32, align 8
  %620 = getelementptr inbounds double, double* %619, i64 1
  %621 = load double, double* %620, align 8
  %622 = fmul double %618, %621
  store double %622, double* %24, align 8
  %623 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %624 = icmp ne %struct.vrna_sc_s* %623, null
  br i1 %624, label %625, label %644

625:                                              ; preds = %611
  %626 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %627 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %626, i32 0, i32 4
  %628 = load double**, double*** %627, align 8
  %629 = icmp ne double** %628, null
  br i1 %629, label %630, label %643

630:                                              ; preds = %625
  %631 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %632 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %631, i32 0, i32 4
  %633 = load double**, double*** %632, align 8
  %634 = load i32, i32* %9, align 4
  %635 = sub nsw i32 %634, 1
  %636 = sext i32 %635 to i64
  %637 = getelementptr inbounds double*, double** %633, i64 %636
  %638 = load double*, double** %637, align 8
  %639 = getelementptr inbounds double, double* %638, i64 1
  %640 = load double, double* %639, align 8
  %641 = load double, double* %24, align 8
  %642 = fmul double %641, %640
  store double %642, double* %24, align 8
  br label %643

643:                                              ; preds = %630, %625
  br label %644

644:                                              ; preds = %643, %611
  %645 = load double, double* %24, align 8
  %646 = load double**, double*** %41, align 8
  %647 = getelementptr inbounds double*, double** %646, i64 0
  %648 = load double*, double** %647, align 8
  %649 = load i32, i32* %13, align 4
  %650 = sext i32 %649 to i64
  %651 = getelementptr inbounds double, double* %648, i64 %650
  store double %645, double* %651, align 8
  br label %659

652:                                              ; preds = %603
  %653 = load double**, double*** %41, align 8
  %654 = getelementptr inbounds double*, double** %653, i64 0
  %655 = load double*, double** %654, align 8
  %656 = load i32, i32* %13, align 4
  %657 = sext i32 %656 to i64
  %658 = getelementptr inbounds double, double* %655, i64 %657
  store double 0.000000e+00, double* %658, align 8
  br label %659

659:                                              ; preds = %652, %644
  store i32 0, i32* %15, align 4
  br label %660

660:                                              ; preds = %754, %659
  %661 = load i32, i32* %15, align 4
  %662 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %663 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %662, i32 0, i32 0
  %664 = load i32, i32* %663, align 8
  %665 = icmp slt i32 %661, %664
  br i1 %665, label %666, label %757

666:                                              ; preds = %660
  %667 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %668 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %667, i32 0, i32 1
  %669 = load i32*, i32** %668, align 8
  %670 = load i32, i32* %15, align 4
  %671 = sext i32 %670 to i64
  %672 = getelementptr inbounds i32, i32* %669, i64 %671
  %673 = load i32, i32* %672, align 4
  store i32 %673, i32* %45, align 4
  %674 = load i32, i32* %13, align 4
  %675 = load i32, i32* %9, align 4
  %676 = load i32, i32* %45, align 4
  %677 = sub nsw i32 %675, %676
  %678 = icmp slt i32 %674, %677
  br i1 %678, label %679, label %753

679:                                              ; preds = %666
  %680 = load i32*, i32** %17, align 8
  %681 = load i32, i32* %9, align 4
  %682 = load i32, i32* %45, align 4
  %683 = sub nsw i32 %681, %682
  %684 = sext i32 %683 to i64
  %685 = getelementptr inbounds i32, i32* %680, i64 %684
  %686 = load i32, i32* %685, align 4
  %687 = load i32, i32* %45, align 4
  %688 = icmp sge i32 %686, %687
  br i1 %688, label %689, label %753

689:                                              ; preds = %679
  %690 = load double**, double*** %41, align 8
  %691 = load i32, i32* %45, align 4
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds double*, double** %690, i64 %692
  %694 = load double*, double** %693, align 8
  %695 = load i32, i32* %13, align 4
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds double, double* %694, i64 %696
  %698 = load double, double* %697, align 8
  %699 = load double*, double** %32, align 8
  %700 = load i32, i32* %45, align 4
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds double, double* %699, i64 %701
  %703 = load double, double* %702, align 8
  %704 = fmul double %698, %703
  %705 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %706 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %705, i32 0, i32 11
  %707 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %706, align 8
  %708 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %709 = load i32, i32* %9, align 4
  %710 = load i32, i32* %45, align 4
  %711 = sub nsw i32 %709, %710
  %712 = load i32, i32* %9, align 4
  %713 = sub nsw i32 %712, 1
  %714 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %715 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %714, i32 0, i32 12
  %716 = load i8*, i8** %715, align 8
  %717 = call double %707(%struct.vrna_fc_s* noundef %708, i32 noundef %711, i32 noundef %713, i32 noundef 24, i8* noundef %716)
  %718 = fmul double %704, %717
  store double %718, double* %24, align 8
  %719 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %720 = icmp ne %struct.vrna_sc_s* %719, null
  br i1 %720, label %721, label %743

721:                                              ; preds = %689
  %722 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %723 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %722, i32 0, i32 4
  %724 = load double**, double*** %723, align 8
  %725 = icmp ne double** %724, null
  br i1 %725, label %726, label %742

726:                                              ; preds = %721
  %727 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %728 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %727, i32 0, i32 4
  %729 = load double**, double*** %728, align 8
  %730 = load i32, i32* %9, align 4
  %731 = load i32, i32* %45, align 4
  %732 = sub nsw i32 %730, %731
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds double*, double** %729, i64 %733
  %735 = load double*, double** %734, align 8
  %736 = load i32, i32* %45, align 4
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds double, double* %735, i64 %737
  %739 = load double, double* %738, align 8
  %740 = load double, double* %24, align 8
  %741 = fmul double %740, %739
  store double %741, double* %24, align 8
  br label %742

742:                                              ; preds = %726, %721
  br label %743

743:                                              ; preds = %742, %689
  %744 = load double, double* %24, align 8
  %745 = load double**, double*** %41, align 8
  %746 = getelementptr inbounds double*, double** %745, i64 0
  %747 = load double*, double** %746, align 8
  %748 = load i32, i32* %13, align 4
  %749 = sext i32 %748 to i64
  %750 = getelementptr inbounds double, double* %747, i64 %749
  %751 = load double, double* %750, align 8
  %752 = fadd double %751, %744
  store double %752, double* %750, align 8
  br label %753

753:                                              ; preds = %743, %679, %666
  br label %754

754:                                              ; preds = %753
  %755 = load i32, i32* %15, align 4
  %756 = add nsw i32 %755, 1
  store i32 %756, i32* %15, align 4
  br label %660, !llvm.loop !110

757:                                              ; preds = %660
  %758 = load i8*, i8** %3, align 8
  %759 = load i32, i32* %14, align 4
  %760 = load i32, i32* %9, align 4
  %761 = sub nsw i32 %760, 1
  %762 = mul nsw i32 %759, %761
  %763 = load i32, i32* %13, align 4
  %764 = add nsw i32 %762, %763
  %765 = sext i32 %764 to i64
  %766 = getelementptr inbounds i8, i8* %758, i64 %765
  %767 = load i8, i8* %766, align 1
  %768 = zext i8 %767 to i32
  %769 = and i32 %768, 32
  %770 = icmp ne i32 %769, 0
  br i1 %770, label %771, label %820

771:                                              ; preds = %757
  %772 = load i32*, i32** %20, align 8
  %773 = load i32, i32* %9, align 4
  %774 = sub nsw i32 %773, 1
  %775 = sext i32 %774 to i64
  %776 = getelementptr inbounds i32, i32* %772, i64 %775
  %777 = load i32, i32* %776, align 4
  %778 = load i32, i32* %13, align 4
  %779 = add nsw i32 %777, %778
  %780 = load i8*, i8** %4, align 8
  %781 = call i32 @vrna_get_ptype(i32 noundef %779, i8* noundef %780)
  store i32 %781, i32* %19, align 4
  %782 = load double*, double** %29, align 8
  %783 = load i32*, i32** %12, align 8
  %784 = load i32, i32* %13, align 4
  %785 = sext i32 %784 to i64
  %786 = getelementptr inbounds i32, i32* %783, i64 %785
  %787 = load i32, i32* %786, align 4
  %788 = load i32, i32* %9, align 4
  %789 = sub nsw i32 %788, 1
  %790 = sub nsw i32 %787, %789
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds double, double* %782, i64 %791
  %793 = load double, double* %792, align 8
  %794 = load i32, i32* %19, align 4
  %795 = load i16*, i16** %5, align 8
  %796 = load i32, i32* %13, align 4
  %797 = sub nsw i32 %796, 1
  %798 = sext i32 %797 to i64
  %799 = getelementptr inbounds i16, i16* %795, i64 %798
  %800 = load i16, i16* %799, align 2
  %801 = sext i16 %800 to i32
  %802 = load i16*, i16** %5, align 8
  %803 = load i32, i32* %9, align 4
  %804 = sext i32 %803 to i64
  %805 = getelementptr inbounds i16, i16* %802, i64 %804
  %806 = load i16, i16* %805, align 2
  %807 = sext i16 %806 to i32
  %808 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %36, align 8
  %809 = call double @exp_E_MLstem(i32 noundef %794, i32 noundef %801, i32 noundef %807, %struct.vrna_exp_param_s* noundef %808)
  %810 = fmul double %793, %809
  store double %810, double* %24, align 8
  %811 = load double, double* %24, align 8
  %812 = load double**, double*** %41, align 8
  %813 = getelementptr inbounds double*, double** %812, i64 0
  %814 = load double*, double** %813, align 8
  %815 = load i32, i32* %13, align 4
  %816 = sext i32 %815 to i64
  %817 = getelementptr inbounds double, double* %814, i64 %816
  %818 = load double, double* %817, align 8
  %819 = fadd double %818, %811
  store double %819, double* %817, align 8
  br label %820

820:                                              ; preds = %771, %757
  %821 = load double*, double** %30, align 8
  %822 = load i32*, i32** %12, align 8
  %823 = load i32, i32* %7, align 4
  %824 = add nsw i32 %823, 1
  %825 = sext i32 %824 to i64
  %826 = getelementptr inbounds i32, i32* %822, i64 %825
  %827 = load i32, i32* %826, align 4
  %828 = load i32, i32* %13, align 4
  %829 = sub nsw i32 %828, 1
  %830 = sub nsw i32 %827, %829
  %831 = sext i32 %830 to i64
  %832 = getelementptr inbounds double, double* %821, i64 %831
  %833 = load double, double* %832, align 8
  %834 = load double**, double*** %41, align 8
  %835 = getelementptr inbounds double*, double** %834, i64 0
  %836 = load double*, double** %835, align 8
  %837 = load i32, i32* %13, align 4
  %838 = sext i32 %837 to i64
  %839 = getelementptr inbounds double, double* %836, i64 %838
  %840 = load double, double* %839, align 8
  %841 = load double, double* %43, align 8
  %842 = call double @llvm.fmuladd.f64(double %833, double %840, double %841)
  store double %842, double* %43, align 8
  br label %843

843:                                              ; preds = %820
  %844 = load i32, i32* %13, align 4
  %845 = add nsw i32 %844, 1
  store i32 %845, i32* %13, align 4
  br label %597, !llvm.loop !111

846:                                              ; preds = %597
  %847 = load double, double* %42, align 8
  %848 = load double, double* %43, align 8
  %849 = load double, double* %34, align 8
  %850 = call double @llvm.fmuladd.f64(double %847, double %848, double %849)
  store double %850, double* %34, align 8
  %851 = load double**, double*** %41, align 8
  %852 = load i32, i32* %23, align 4
  %853 = sext i32 %852 to i64
  %854 = getelementptr inbounds double*, double** %851, i64 %853
  %855 = load double*, double** %854, align 8
  store double* %855, double** %46, align 8
  %856 = load i32, i32* %23, align 4
  store i32 %856, i32* %15, align 4
  br label %857

857:                                              ; preds = %871, %846
  %858 = load i32, i32* %15, align 4
  %859 = icmp sgt i32 %858, 0
  br i1 %859, label %860, label %874

860:                                              ; preds = %857
  %861 = load double**, double*** %41, align 8
  %862 = load i32, i32* %15, align 4
  %863 = sub nsw i32 %862, 1
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds double*, double** %861, i64 %864
  %866 = load double*, double** %865, align 8
  %867 = load double**, double*** %41, align 8
  %868 = load i32, i32* %15, align 4
  %869 = sext i32 %868 to i64
  %870 = getelementptr inbounds double*, double** %867, i64 %869
  store double* %866, double** %870, align 8
  br label %871

871:                                              ; preds = %860
  %872 = load i32, i32* %15, align 4
  %873 = add nsw i32 %872, -1
  store i32 %873, i32* %15, align 4
  br label %857, !llvm.loop !112

874:                                              ; preds = %857
  %875 = load double*, double** %46, align 8
  %876 = load double**, double*** %41, align 8
  %877 = getelementptr inbounds double*, double** %876, i64 0
  store double* %875, double** %877, align 8
  br label %878

878:                                              ; preds = %874
  %879 = load i32, i32* %9, align 4
  %880 = add nsw i32 %879, 1
  store i32 %880, i32* %9, align 4
  br label %427, !llvm.loop !113

881:                                              ; preds = %427
  store i32 0, i32* %9, align 4
  br label %882

882:                                              ; preds = %893, %881
  %883 = load i32, i32* %9, align 4
  %884 = load i32, i32* %23, align 4
  %885 = icmp sle i32 %883, %884
  br i1 %885, label %886, label %896

886:                                              ; preds = %882
  %887 = load double**, double*** %41, align 8
  %888 = load i32, i32* %9, align 4
  %889 = sext i32 %888 to i64
  %890 = getelementptr inbounds double*, double** %887, i64 %889
  %891 = load double*, double** %890, align 8
  %892 = bitcast double* %891 to i8*
  call void @free(i8* noundef %892) #5
  br label %893

893:                                              ; preds = %886
  %894 = load i32, i32* %9, align 4
  %895 = add nsw i32 %894, 1
  store i32 %895, i32* %9, align 4
  br label %882, !llvm.loop !114

896:                                              ; preds = %882
  %897 = load double**, double*** %41, align 8
  %898 = bitcast double** %897 to i8*
  call void @free(i8* noundef %898) #5
  %899 = load double, double* %34, align 8
  %900 = load double, double* %27, align 8
  %901 = load double, double* %26, align 8
  %902 = call double @llvm.fmuladd.f64(double %899, double %900, double %901)
  store double %902, double* %26, align 8
  %903 = load i32, i32* %14, align 4
  %904 = sext i32 %903 to i64
  %905 = mul i64 8, %904
  %906 = trunc i64 %905 to i32
  %907 = call i8* @vrna_alloc(i32 noundef %906)
  %908 = bitcast i8* %907 to double*
  store double* %908, double** %33, align 8
  store double 0.000000e+00, double* %35, align 8
  %909 = load i32, i32* %6, align 4
  %910 = load i32, i32* %18, align 4
  %911 = sub nsw i32 %909, %910
  %912 = sub nsw i32 %911, 1
  store i32 %912, i32* %8, align 4
  br label %913

913:                                              ; preds = %1225, %896
  %914 = load i32, i32* %8, align 4
  %915 = icmp sgt i32 %914, 0
  br i1 %915, label %916, label %1228

916:                                              ; preds = %913
  store double 0.000000e+00, double* %47, align 8
  store double 0.000000e+00, double* %48, align 8
  %917 = load double*, double** %33, align 8
  %918 = load i32, i32* %8, align 4
  %919 = sext i32 %918 to i64
  %920 = getelementptr inbounds double, double* %917, i64 %919
  store double 0.000000e+00, double* %920, align 8
  %921 = load i32, i32* %8, align 4
  %922 = load i32, i32* %18, align 4
  %923 = add nsw i32 %921, %922
  %924 = add nsw i32 %923, 1
  store i32 %924, i32* %13, align 4
  br label %925

925:                                              ; preds = %1027, %916
  %926 = load i32, i32* %13, align 4
  %927 = load i32, i32* %6, align 4
  %928 = icmp slt i32 %926, %927
  br i1 %928, label %929, label %1030

929:                                              ; preds = %925
  %930 = load i8*, i8** %3, align 8
  %931 = load i32, i32* %14, align 4
  %932 = load i32, i32* %13, align 4
  %933 = mul nsw i32 %931, %932
  %934 = load i32, i32* %8, align 4
  %935 = add nsw i32 %933, %934
  %936 = sext i32 %935 to i64
  %937 = getelementptr inbounds i8, i8* %930, i64 %936
  %938 = load i8, i8* %937, align 1
  %939 = zext i8 %938 to i32
  %940 = and i32 %939, 32
  %941 = icmp ne i32 %940, 0
  br i1 %941, label %942, label %1026

942:                                              ; preds = %929
  %943 = load i32, i32* %6, align 4
  %944 = sub nsw i32 %943, 1
  %945 = load i32, i32* %13, align 4
  %946 = add nsw i32 %945, 1
  %947 = sub nsw i32 %944, %946
  %948 = add nsw i32 %947, 1
  store i32 %948, i32* %22, align 4
  %949 = load i32*, i32** %17, align 8
  %950 = load i32, i32* %13, align 4
  %951 = add nsw i32 %950, 1
  %952 = sext i32 %951 to i64
  %953 = getelementptr inbounds i32, i32* %949, i64 %952
  %954 = load i32, i32* %953, align 4
  %955 = load i32, i32* %22, align 4
  %956 = icmp sge i32 %954, %955
  br i1 %956, label %957, label %1025

957:                                              ; preds = %942
  %958 = load double*, double** %29, align 8
  %959 = load i32*, i32** %12, align 8
  %960 = load i32, i32* %8, align 4
  %961 = sext i32 %960 to i64
  %962 = getelementptr inbounds i32, i32* %959, i64 %961
  %963 = load i32, i32* %962, align 4
  %964 = load i32, i32* %13, align 4
  %965 = sub nsw i32 %963, %964
  %966 = sext i32 %965 to i64
  %967 = getelementptr inbounds double, double* %958, i64 %966
  %968 = load double, double* %967, align 8
  %969 = load double*, double** %32, align 8
  %970 = load i32, i32* %22, align 4
  %971 = sext i32 %970 to i64
  %972 = getelementptr inbounds double, double* %969, i64 %971
  %973 = load double, double* %972, align 8
  %974 = fmul double %968, %973
  store double %974, double* %24, align 8
  %975 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %976 = icmp ne %struct.vrna_sc_s* %975, null
  br i1 %976, label %977, label %998

977:                                              ; preds = %957
  %978 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %979 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %978, i32 0, i32 4
  %980 = load double**, double*** %979, align 8
  %981 = icmp ne double** %980, null
  br i1 %981, label %982, label %997

982:                                              ; preds = %977
  %983 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %984 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %983, i32 0, i32 4
  %985 = load double**, double*** %984, align 8
  %986 = load i32, i32* %13, align 4
  %987 = add nsw i32 %986, 1
  %988 = sext i32 %987 to i64
  %989 = getelementptr inbounds double*, double** %985, i64 %988
  %990 = load double*, double** %989, align 8
  %991 = load i32, i32* %22, align 4
  %992 = sext i32 %991 to i64
  %993 = getelementptr inbounds double, double* %990, i64 %992
  %994 = load double, double* %993, align 8
  %995 = load double, double* %24, align 8
  %996 = fmul double %995, %994
  store double %996, double* %24, align 8
  br label %997

997:                                              ; preds = %982, %977
  br label %998

998:                                              ; preds = %997, %957
  %999 = load double, double* %24, align 8
  %1000 = load double*, double** %33, align 8
  %1001 = load i32, i32* %8, align 4
  %1002 = sext i32 %1001 to i64
  %1003 = getelementptr inbounds double, double* %1000, i64 %1002
  %1004 = load double, double* %1003, align 8
  %1005 = fadd double %1004, %999
  store double %1005, double* %1003, align 8
  %1006 = load double, double* %24, align 8
  %1007 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %1008 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %1007, i32 0, i32 11
  %1009 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %1008, align 8
  %1010 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %1011 = load i32, i32* %13, align 4
  %1012 = add nsw i32 %1011, 1
  %1013 = load i32, i32* %6, align 4
  %1014 = sub nsw i32 %1013, 1
  %1015 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %1016 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %1015, i32 0, i32 12
  %1017 = load i8*, i8** %1016, align 8
  %1018 = call double %1009(%struct.vrna_fc_s* noundef %1010, i32 noundef %1012, i32 noundef %1014, i32 noundef 8, i8* noundef %1017)
  %1019 = load double*, double** %33, align 8
  %1020 = load i32, i32* %8, align 4
  %1021 = sext i32 %1020 to i64
  %1022 = getelementptr inbounds double, double* %1019, i64 %1021
  %1023 = load double, double* %1022, align 8
  %1024 = call double @llvm.fmuladd.f64(double %1006, double %1018, double %1023)
  store double %1024, double* %1022, align 8
  br label %1025

1025:                                             ; preds = %998, %942
  br label %1026

1026:                                             ; preds = %1025, %929
  br label %1027

1027:                                             ; preds = %1026
  %1028 = load i32, i32* %13, align 4
  %1029 = add nsw i32 %1028, 1
  store i32 %1029, i32* %13, align 4
  br label %925, !llvm.loop !115

1030:                                             ; preds = %925
  %1031 = load i32, i32* %8, align 4
  %1032 = load i32, i32* %18, align 4
  %1033 = add nsw i32 %1031, %1032
  store i32 %1033, i32* %13, align 4
  br label %1034

1034:                                             ; preds = %1061, %1030
  %1035 = load i32, i32* %13, align 4
  %1036 = load i32, i32* %6, align 4
  %1037 = load i32, i32* %18, align 4
  %1038 = sub nsw i32 %1036, %1037
  %1039 = icmp slt i32 %1035, %1038
  br i1 %1039, label %1040, label %1064

1040:                                             ; preds = %1034
  %1041 = load double*, double** %30, align 8
  %1042 = load i32*, i32** %12, align 8
  %1043 = load i32, i32* %8, align 4
  %1044 = add nsw i32 %1043, 1
  %1045 = sext i32 %1044 to i64
  %1046 = getelementptr inbounds i32, i32* %1042, i64 %1045
  %1047 = load i32, i32* %1046, align 4
  %1048 = load i32, i32* %13, align 4
  %1049 = sub nsw i32 %1048, 1
  %1050 = sub nsw i32 %1047, %1049
  %1051 = sext i32 %1050 to i64
  %1052 = getelementptr inbounds double, double* %1041, i64 %1051
  %1053 = load double, double* %1052, align 8
  %1054 = load double*, double** %33, align 8
  %1055 = load i32, i32* %13, align 4
  %1056 = sext i32 %1055 to i64
  %1057 = getelementptr inbounds double, double* %1054, i64 %1056
  %1058 = load double, double* %1057, align 8
  %1059 = load double, double* %47, align 8
  %1060 = call double @llvm.fmuladd.f64(double %1053, double %1058, double %1059)
  store double %1060, double* %47, align 8
  br label %1061

1061:                                             ; preds = %1040
  %1062 = load i32, i32* %13, align 4
  %1063 = add nsw i32 %1062, 1
  store i32 %1063, i32* %13, align 4
  br label %1034, !llvm.loop !116

1064:                                             ; preds = %1034
  %1065 = load i32, i32* %7, align 4
  %1066 = add nsw i32 %1065, 1
  store i32 %1066, i32* %9, align 4
  br label %1067

1067:                                             ; preds = %1217, %1064
  %1068 = load i32, i32* %9, align 4
  %1069 = load i32, i32* %14, align 4
  %1070 = icmp sle i32 %1068, %1069
  br i1 %1070, label %1071, label %1220

1071:                                             ; preds = %1067
  %1072 = load i32*, i32** %12, align 8
  %1073 = load i32, i32* %8, align 4
  %1074 = sext i32 %1073 to i64
  %1075 = getelementptr inbounds i32, i32* %1072, i64 %1074
  %1076 = load i32, i32* %1075, align 4
  %1077 = load i32, i32* %9, align 4
  %1078 = sub nsw i32 %1076, %1077
  store i32 %1078, i32* %10, align 4
  %1079 = load i8*, i8** %3, align 8
  %1080 = load i32, i32* %14, align 4
  %1081 = load i32, i32* %8, align 4
  %1082 = mul nsw i32 %1080, %1081
  %1083 = load i32, i32* %9, align 4
  %1084 = add nsw i32 %1082, %1083
  %1085 = sext i32 %1084 to i64
  %1086 = getelementptr inbounds i8, i8* %1079, i64 %1085
  %1087 = load i8, i8* %1086, align 1
  %1088 = zext i8 %1087 to i32
  %1089 = and i32 %1088, 16
  %1090 = icmp ne i32 %1089, 0
  br i1 %1090, label %1091, label %1216

1091:                                             ; preds = %1071
  %1092 = load i32*, i32** %20, align 8
  %1093 = load i32, i32* %9, align 4
  %1094 = sext i32 %1093 to i64
  %1095 = getelementptr inbounds i32, i32* %1092, i64 %1094
  %1096 = load i32, i32* %1095, align 4
  %1097 = load i32, i32* %8, align 4
  %1098 = add nsw i32 %1096, %1097
  store i32 %1098, i32* %50, align 4
  %1099 = load i32*, i32** %21, align 8
  %1100 = load i32, i32* %50, align 4
  %1101 = load i8*, i8** %4, align 8
  %1102 = call i32 @vrna_get_ptype(i32 noundef %1100, i8* noundef %1101)
  %1103 = zext i32 %1102 to i64
  %1104 = getelementptr inbounds i32, i32* %1099, i64 %1103
  %1105 = load i32, i32* %1104, align 4
  store i32 %1105, i32* %19, align 4
  %1106 = load i32, i32* %9, align 4
  %1107 = load i32, i32* %7, align 4
  %1108 = sub nsw i32 %1106, %1107
  %1109 = sub nsw i32 %1108, 1
  store i32 %1109, i32* %49, align 4
  %1110 = load i32*, i32** %17, align 8
  %1111 = load i32, i32* %7, align 4
  %1112 = add nsw i32 %1111, 1
  %1113 = sext i32 %1112 to i64
  %1114 = getelementptr inbounds i32, i32* %1110, i64 %1113
  %1115 = load i32, i32* %1114, align 4
  %1116 = load i32, i32* %49, align 4
  %1117 = icmp sge i32 %1115, %1116
  br i1 %1117, label %1118, label %1215

1118:                                             ; preds = %1091
  %1119 = load double*, double** %28, align 8
  %1120 = load i32, i32* %10, align 4
  %1121 = sext i32 %1120 to i64
  %1122 = getelementptr inbounds double, double* %1119, i64 %1121
  %1123 = load double, double* %1122, align 8
  %1124 = load i32, i32* %19, align 4
  %1125 = load i16*, i16** %5, align 8
  %1126 = load i32, i32* %9, align 4
  %1127 = sub nsw i32 %1126, 1
  %1128 = sext i32 %1127 to i64
  %1129 = getelementptr inbounds i16, i16* %1125, i64 %1128
  %1130 = load i16, i16* %1129, align 2
  %1131 = sext i16 %1130 to i32
  %1132 = load i16*, i16** %5, align 8
  %1133 = load i32, i32* %8, align 4
  %1134 = add nsw i32 %1133, 1
  %1135 = sext i32 %1134 to i64
  %1136 = getelementptr inbounds i16, i16* %1132, i64 %1135
  %1137 = load i16, i16* %1136, align 2
  %1138 = sext i16 %1137 to i32
  %1139 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %36, align 8
  %1140 = call double @exp_E_MLstem(i32 noundef %1124, i32 noundef %1131, i32 noundef %1138, %struct.vrna_exp_param_s* noundef %1139)
  %1141 = fmul double %1123, %1140
  %1142 = load double, double* %31, align 8
  %1143 = fmul double %1141, %1142
  %1144 = load double*, double** %25, align 8
  %1145 = getelementptr inbounds double, double* %1144, i64 2
  %1146 = load double, double* %1145, align 8
  %1147 = fmul double %1143, %1146
  %1148 = load double*, double** %32, align 8
  %1149 = load i32, i32* %49, align 4
  %1150 = sext i32 %1149 to i64
  %1151 = getelementptr inbounds double, double* %1148, i64 %1150
  %1152 = load double, double* %1151, align 8
  %1153 = fmul double %1147, %1152
  store double %1153, double* %24, align 8
  %1154 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %1155 = icmp ne %struct.vrna_sc_s* %1154, null
  br i1 %1155, label %1156, label %1196

1156:                                             ; preds = %1118
  %1157 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %1158 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %1157, i32 0, i32 7
  %1159 = bitcast %union.anon.11* %1158 to %struct.anon.12*
  %1160 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %1159, i32 0, i32 1
  %1161 = load double*, double** %1160, align 8
  %1162 = icmp ne double* %1161, null
  br i1 %1162, label %1163, label %1175

1163:                                             ; preds = %1156
  %1164 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %1165 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %1164, i32 0, i32 7
  %1166 = bitcast %union.anon.11* %1165 to %struct.anon.12*
  %1167 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %1166, i32 0, i32 1
  %1168 = load double*, double** %1167, align 8
  %1169 = load i32, i32* %50, align 4
  %1170 = sext i32 %1169 to i64
  %1171 = getelementptr inbounds double, double* %1168, i64 %1170
  %1172 = load double, double* %1171, align 8
  %1173 = load double, double* %24, align 8
  %1174 = fmul double %1173, %1172
  store double %1174, double* %24, align 8
  br label %1175

1175:                                             ; preds = %1163, %1156
  %1176 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %1177 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %1176, i32 0, i32 4
  %1178 = load double**, double*** %1177, align 8
  %1179 = icmp ne double** %1178, null
  br i1 %1179, label %1180, label %1195

1180:                                             ; preds = %1175
  %1181 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %1182 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %1181, i32 0, i32 4
  %1183 = load double**, double*** %1182, align 8
  %1184 = load i32, i32* %7, align 4
  %1185 = add nsw i32 %1184, 1
  %1186 = sext i32 %1185 to i64
  %1187 = getelementptr inbounds double*, double** %1183, i64 %1186
  %1188 = load double*, double** %1187, align 8
  %1189 = load i32, i32* %49, align 4
  %1190 = sext i32 %1189 to i64
  %1191 = getelementptr inbounds double, double* %1188, i64 %1190
  %1192 = load double, double* %1191, align 8
  %1193 = load double, double* %24, align 8
  %1194 = fmul double %1193, %1192
  store double %1194, double* %24, align 8
  br label %1195

1195:                                             ; preds = %1180, %1175
  br label %1196

1196:                                             ; preds = %1195, %1118
  %1197 = load double, double* %24, align 8
  %1198 = load double, double* %48, align 8
  %1199 = fadd double %1198, %1197
  store double %1199, double* %48, align 8
  %1200 = load double, double* %24, align 8
  %1201 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %1202 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %1201, i32 0, i32 11
  %1203 = load double (%struct.vrna_fc_s*, i32, i32, i32, i8*)*, double (%struct.vrna_fc_s*, i32, i32, i32, i8*)** %1202, align 8
  %1204 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %1205 = load i32, i32* %7, align 4
  %1206 = add nsw i32 %1205, 1
  %1207 = load i32, i32* %9, align 4
  %1208 = sub nsw i32 %1207, 1
  %1209 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %1210 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %1209, i32 0, i32 12
  %1211 = load i8*, i8** %1210, align 8
  %1212 = call double %1203(%struct.vrna_fc_s* noundef %1204, i32 noundef %1206, i32 noundef %1208, i32 noundef 8, i8* noundef %1211)
  %1213 = load double, double* %48, align 8
  %1214 = call double @llvm.fmuladd.f64(double %1200, double %1212, double %1213)
  store double %1214, double* %48, align 8
  br label %1215

1215:                                             ; preds = %1196, %1091
  br label %1216

1216:                                             ; preds = %1215, %1071
  br label %1217

1217:                                             ; preds = %1216
  %1218 = load i32, i32* %9, align 4
  %1219 = add nsw i32 %1218, 1
  store i32 %1219, i32* %9, align 4
  br label %1067, !llvm.loop !117

1220:                                             ; preds = %1067
  %1221 = load double, double* %48, align 8
  %1222 = load double, double* %47, align 8
  %1223 = load double, double* %35, align 8
  %1224 = call double @llvm.fmuladd.f64(double %1221, double %1222, double %1223)
  store double %1224, double* %35, align 8
  br label %1225

1225:                                             ; preds = %1220
  %1226 = load i32, i32* %8, align 4
  %1227 = add nsw i32 %1226, -1
  store i32 %1227, i32* %8, align 4
  br label %913, !llvm.loop !118

1228:                                             ; preds = %913
  %1229 = load double*, double** %33, align 8
  %1230 = bitcast double* %1229 to i8*
  call void @free(i8* noundef %1230) #5
  store double* null, double** %33, align 8
  %1231 = load double, double* %35, align 8
  %1232 = load double, double* %27, align 8
  %1233 = load double, double* %26, align 8
  %1234 = call double @llvm.fmuladd.f64(double %1231, double %1232, double %1233)
  store double %1234, double* %26, align 8
  br label %1235

1235:                                             ; preds = %1228, %192
  br label %1236

1236:                                             ; preds = %1235, %184
  %1237 = load double, double* %26, align 8
  %1238 = fcmp ogt double %1237, 0.000000e+00
  br i1 %1238, label %1239, label %1250

1239:                                             ; preds = %1236
  %1240 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %1241 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %1240, i32 0, i32 14
  %1242 = load void (%struct.vrna_fc_s*, i32, i32, i32, double, i8*)*, void (%struct.vrna_fc_s*, i32, i32, i32, double, i8*)** %1241, align 8
  %1243 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %2, align 8
  %1244 = load i32, i32* %6, align 4
  %1245 = load i32, i32* %7, align 4
  %1246 = load double, double* %26, align 8
  %1247 = load %struct.vrna_unstructured_domain_s*, %struct.vrna_unstructured_domain_s** %39, align 8
  %1248 = getelementptr inbounds %struct.vrna_unstructured_domain_s, %struct.vrna_unstructured_domain_s* %1247, i32 0, i32 12
  %1249 = load i8*, i8** %1248, align 8
  call void %1242(%struct.vrna_fc_s* noundef %1243, i32 noundef %1244, i32 noundef %1245, i32 noundef 24, double noundef %1246, i8* noundef %1249)
  br label %1250

1250:                                             ; preds = %1239, %1236
  %1251 = load i32, i32* %15, align 4
  %1252 = add nsw i32 %1251, 1
  store i32 %1252, i32* %15, align 4
  br label %177, !llvm.loop !119

1253:                                             ; preds = %177
  br label %1254

1254:                                             ; preds = %1253, %170
  %1255 = load i32*, i32** %16, align 8
  %1256 = bitcast i32* %1255 to i8*
  call void @free(i8* noundef %1256) #5
  br label %1257

1257:                                             ; preds = %1254
  %1258 = load i32, i32* %6, align 4
  %1259 = add nsw i32 %1258, 1
  store i32 %1259, i32* %6, align 4
  br label %166, !llvm.loop !120

1260:                                             ; preds = %166
  ret void
}

declare dso_local double @vrna_exp_E_hp_loop(%struct.vrna_fc_s* noundef, i32 noundef, i32 noundef) #1

declare dso_local i8* @vrna_db_from_probs(double* noundef, i32 noundef) #1

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @free_ml_helper_arrays(%struct.helper_arrays* noundef %0) #0 {
  %2 = alloca %struct.helper_arrays*, align 8
  %3 = alloca i32, align 4
  store %struct.helper_arrays* %0, %struct.helper_arrays** %2, align 8
  %4 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %5 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %4, i32 0, i32 0
  %6 = load double*, double** %5, align 8
  %7 = bitcast double* %6 to i8*
  call void @free(i8* noundef %7) #5
  %8 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %9 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %8, i32 0, i32 1
  %10 = load double*, double** %9, align 8
  %11 = bitcast double* %10 to i8*
  call void @free(i8* noundef %11) #5
  %12 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %13 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %12, i32 0, i32 2
  %14 = load double*, double** %13, align 8
  %15 = bitcast double* %14 to i8*
  call void @free(i8* noundef %15) #5
  %16 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %17 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %16, i32 0, i32 4
  %18 = load double**, double*** %17, align 8
  %19 = icmp ne double** %18, null
  br i1 %19, label %20, label %44

20:                                               ; preds = %1
  store i32 0, i32* %3, align 4
  br label %21

21:                                               ; preds = %36, %20
  %22 = load i32, i32* %3, align 4
  %23 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %24 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %23, i32 0, i32 3
  %25 = load i32, i32* %24, align 8
  %26 = icmp ule i32 %22, %25
  br i1 %26, label %27, label %39

27:                                               ; preds = %21
  %28 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %29 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %28, i32 0, i32 4
  %30 = load double**, double*** %29, align 8
  %31 = load i32, i32* %3, align 4
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds double*, double** %30, i64 %32
  %34 = load double*, double** %33, align 8
  %35 = bitcast double* %34 to i8*
  call void @free(i8* noundef %35) #5
  br label %36

36:                                               ; preds = %27
  %37 = load i32, i32* %3, align 4
  %38 = add i32 %37, 1
  store i32 %38, i32* %3, align 4
  br label %21, !llvm.loop !121

39:                                               ; preds = %21
  %40 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %41 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %40, i32 0, i32 4
  %42 = load double**, double*** %41, align 8
  %43 = bitcast double** %42 to i8*
  call void @free(i8* noundef %43) #5
  br label %44

44:                                               ; preds = %39, %1
  %45 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %46 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %45, i32 0, i32 5
  %47 = load double*, double** %46, align 8
  %48 = bitcast double* %47 to i8*
  call void @free(i8* noundef %48) #5
  %49 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %50 = bitcast %struct.helper_arrays* %49 to i8*
  call void @free(i8* noundef %50) #5
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @free_constraints_helper(%struct.constraints_helper* noundef %0) #0 {
  %2 = alloca %struct.constraints_helper*, align 8
  store %struct.constraints_helper* %0, %struct.constraints_helper** %2, align 8
  %3 = load %struct.constraints_helper*, %struct.constraints_helper** %2, align 8
  %4 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %3, i32 0, i32 8
  call void @free_sc_ext_exp(%struct.sc_ext_exp_dat* noundef %4)
  %5 = load %struct.constraints_helper*, %struct.constraints_helper** %2, align 8
  %6 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %5, i32 0, i32 9
  call void @free_sc_hp_exp(%struct.sc_hp_exp_dat* noundef %6)
  %7 = load %struct.constraints_helper*, %struct.constraints_helper** %2, align 8
  %8 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %7, i32 0, i32 10
  call void @free_sc_int_exp(%struct.sc_int_exp_dat* noundef %8)
  %9 = load %struct.constraints_helper*, %struct.constraints_helper** %2, align 8
  %10 = getelementptr inbounds %struct.constraints_helper, %struct.constraints_helper* %9, i32 0, i32 11
  call void @free_sc_mb_exp(%struct.sc_mb_exp_dat* noundef %10)
  %11 = load %struct.constraints_helper*, %struct.constraints_helper** %2, align 8
  %12 = bitcast %struct.constraints_helper* %11 to i8*
  call void @free(i8* noundef %12) #5
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8 (i32, i32, i32, i32, i8, i8*)* @prepare_hc_ext_def(%struct.vrna_fc_s* noundef %0, %struct.hc_ext_def_dat* noundef %1) #0 {
  %3 = alloca i8 (i32, i32, i32, i32, i8, i8*)*, align 8
  %4 = alloca %struct.vrna_fc_s*, align 8
  %5 = alloca %struct.hc_ext_def_dat*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %4, align 8
  store %struct.hc_ext_def_dat* %1, %struct.hc_ext_def_dat** %5, align 8
  %6 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %7 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %6, i32 0, i32 11
  %8 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %7, align 8
  %9 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %8, i32 0, i32 3
  %10 = bitcast %union.anon* %9 to %struct.anon*
  %11 = getelementptr inbounds %struct.anon, %struct.anon* %10, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %5, align 8
  %14 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %13, i32 0, i32 1
  store i8* %12, i8** %14, align 8
  %15 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %16 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %5, align 8
  %19 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %18, i32 0, i32 0
  store i32 %17, i32* %19, align 8
  %20 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %21 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %20, i32 0, i32 11
  %22 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %21, align 8
  %23 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %22, i32 0, i32 4
  %24 = load i32*, i32** %23, align 8
  %25 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %5, align 8
  %26 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %25, i32 0, i32 4
  store i32* %24, i32** %26, align 8
  %27 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %28 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %27, i32 0, i32 3
  %29 = load i32*, i32** %28, align 8
  %30 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %5, align 8
  %31 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %30, i32 0, i32 3
  store i32* %29, i32** %31, align 8
  %32 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %33 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %32, i32 0, i32 11
  %34 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %33, align 8
  %35 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %34, i32 0, i32 8
  %36 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %35, align 8
  %37 = icmp ne i8 (i32, i32, i32, i32, i8, i8*)* %36, null
  br i1 %37, label %38, label %59

38:                                               ; preds = %2
  %39 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %40 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %39, i32 0, i32 11
  %41 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %40, align 8
  %42 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %41, i32 0, i32 8
  %43 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %42, align 8
  %44 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %5, align 8
  %45 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %44, i32 0, i32 6
  store i8 (i32, i32, i32, i32, i8, i8*)* %43, i8 (i32, i32, i32, i32, i8, i8*)** %45, align 8
  %46 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %47 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %46, i32 0, i32 11
  %48 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %47, align 8
  %49 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %48, i32 0, i32 9
  %50 = load i8*, i8** %49, align 8
  %51 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %5, align 8
  %52 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %51, i32 0, i32 5
  store i8* %50, i8** %52, align 8
  %53 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %54 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %53, i32 0, i32 8
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %55, 1
  %57 = zext i1 %56 to i64
  %58 = select i1 %56, i8 (i32, i32, i32, i32, i8, i8*)* @hc_ext_cb_def_user, i8 (i32, i32, i32, i32, i8, i8*)* @hc_ext_cb_def_sn_user
  store i8 (i32, i32, i32, i32, i8, i8*)* %58, i8 (i32, i32, i32, i32, i8, i8*)** %3, align 8
  br label %66

59:                                               ; preds = %2
  %60 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %61 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %60, i32 0, i32 8
  %62 = load i32, i32* %61, align 8
  %63 = icmp eq i32 %62, 1
  %64 = zext i1 %63 to i64
  %65 = select i1 %63, i8 (i32, i32, i32, i32, i8, i8*)* @hc_ext_cb_def, i8 (i32, i32, i32, i32, i8, i8*)* @hc_ext_cb_def_sn
  store i8 (i32, i32, i32, i32, i8, i8*)* %65, i8 (i32, i32, i32, i32, i8, i8*)** %3, align 8
  br label %66

66:                                               ; preds = %59, %38
  %67 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %3, align 8
  ret i8 (i32, i32, i32, i32, i8, i8*)* %67
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8 (i32, i32, i32, i32, i8, i8*)* @prepare_hc_hp_def(%struct.vrna_fc_s* noundef %0, %struct.hc_hp_def_dat* noundef %1) #0 {
  %3 = alloca i8 (i32, i32, i32, i32, i8, i8*)*, align 8
  %4 = alloca %struct.vrna_fc_s*, align 8
  %5 = alloca %struct.hc_hp_def_dat*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %4, align 8
  store %struct.hc_hp_def_dat* %1, %struct.hc_hp_def_dat** %5, align 8
  %6 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %7 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %6, i32 0, i32 11
  %8 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %7, align 8
  %9 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %8, i32 0, i32 3
  %10 = bitcast %union.anon* %9 to %struct.anon*
  %11 = getelementptr inbounds %struct.anon, %struct.anon* %10, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = load %struct.hc_hp_def_dat*, %struct.hc_hp_def_dat** %5, align 8
  %14 = getelementptr inbounds %struct.hc_hp_def_dat, %struct.hc_hp_def_dat* %13, i32 0, i32 1
  store i8* %12, i8** %14, align 8
  %15 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %16 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %15, i32 0, i32 11
  %17 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %16, align 8
  %18 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %17, i32 0, i32 5
  %19 = load i32*, i32** %18, align 8
  %20 = load %struct.hc_hp_def_dat*, %struct.hc_hp_def_dat** %5, align 8
  %21 = getelementptr inbounds %struct.hc_hp_def_dat, %struct.hc_hp_def_dat* %20, i32 0, i32 4
  store i32* %19, i32** %21, align 8
  %22 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %23 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %22, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = load %struct.hc_hp_def_dat*, %struct.hc_hp_def_dat** %5, align 8
  %26 = getelementptr inbounds %struct.hc_hp_def_dat, %struct.hc_hp_def_dat* %25, i32 0, i32 0
  store i32 %24, i32* %26, align 8
  %27 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %28 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %27, i32 0, i32 3
  %29 = load i32*, i32** %28, align 8
  %30 = load %struct.hc_hp_def_dat*, %struct.hc_hp_def_dat** %5, align 8
  %31 = getelementptr inbounds %struct.hc_hp_def_dat, %struct.hc_hp_def_dat* %30, i32 0, i32 3
  store i32* %29, i32** %31, align 8
  %32 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %33 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %32, i32 0, i32 11
  %34 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %33, align 8
  %35 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %34, i32 0, i32 8
  %36 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %35, align 8
  %37 = icmp ne i8 (i32, i32, i32, i32, i8, i8*)* %36, null
  br i1 %37, label %38, label %53

38:                                               ; preds = %2
  %39 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %40 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %39, i32 0, i32 11
  %41 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %40, align 8
  %42 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %41, i32 0, i32 8
  %43 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %42, align 8
  %44 = load %struct.hc_hp_def_dat*, %struct.hc_hp_def_dat** %5, align 8
  %45 = getelementptr inbounds %struct.hc_hp_def_dat, %struct.hc_hp_def_dat* %44, i32 0, i32 6
  store i8 (i32, i32, i32, i32, i8, i8*)* %43, i8 (i32, i32, i32, i32, i8, i8*)** %45, align 8
  %46 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %47 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %46, i32 0, i32 11
  %48 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %47, align 8
  %49 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %48, i32 0, i32 9
  %50 = load i8*, i8** %49, align 8
  %51 = load %struct.hc_hp_def_dat*, %struct.hc_hp_def_dat** %5, align 8
  %52 = getelementptr inbounds %struct.hc_hp_def_dat, %struct.hc_hp_def_dat* %51, i32 0, i32 5
  store i8* %50, i8** %52, align 8
  store i8 (i32, i32, i32, i32, i8, i8*)* @hc_hp_cb_def_user, i8 (i32, i32, i32, i32, i8, i8*)** %3, align 8
  br label %54

53:                                               ; preds = %2
  store i8 (i32, i32, i32, i32, i8, i8*)* @hc_hp_cb_def, i8 (i32, i32, i32, i32, i8, i8*)** %3, align 8
  br label %54

54:                                               ; preds = %53, %38
  %55 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %3, align 8
  ret i8 (i32, i32, i32, i32, i8, i8*)* %55
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8 (i32, i32, i32, i32, i8*)* @prepare_hc_int_def(%struct.vrna_fc_s* noundef %0, %struct.hc_int_def_dat* noundef %1) #0 {
  %3 = alloca i8 (i32, i32, i32, i32, i8*)*, align 8
  %4 = alloca %struct.vrna_fc_s*, align 8
  %5 = alloca %struct.hc_int_def_dat*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %4, align 8
  store %struct.hc_int_def_dat* %1, %struct.hc_int_def_dat** %5, align 8
  %6 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %7 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %6, i32 0, i32 11
  %8 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %7, align 8
  %9 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %8, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  br label %21

13:                                               ; preds = %2
  %14 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %15 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %14, i32 0, i32 11
  %16 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %15, align 8
  %17 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %16, i32 0, i32 3
  %18 = bitcast %union.anon* %17 to %struct.anon*
  %19 = getelementptr inbounds %struct.anon, %struct.anon* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  br label %21

21:                                               ; preds = %13, %12
  %22 = phi i8* [ null, %12 ], [ %20, %13 ]
  %23 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %5, align 8
  %24 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %23, i32 0, i32 0
  store i8* %22, i8** %24, align 8
  %25 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %26 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %25, i32 0, i32 11
  %27 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %26, align 8
  %28 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %27, i32 0, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 1
  br i1 %30, label %31, label %39

31:                                               ; preds = %21
  %32 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %33 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %32, i32 0, i32 11
  %34 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %33, align 8
  %35 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %34, i32 0, i32 3
  %36 = bitcast %union.anon* %35 to %struct.anon.0*
  %37 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %36, i32 0, i32 0
  %38 = load i8**, i8*** %37, align 8
  br label %40

39:                                               ; preds = %21
  br label %40

40:                                               ; preds = %39, %31
  %41 = phi i8** [ %38, %31 ], [ null, %39 ]
  %42 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %5, align 8
  %43 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %42, i32 0, i32 1
  store i8** %41, i8*** %43, align 8
  %44 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %45 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %44, i32 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %5, align 8
  %48 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %47, i32 0, i32 3
  store i32 %46, i32* %48, align 8
  %49 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %50 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %49, i32 0, i32 11
  %51 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %50, align 8
  %52 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %51, i32 0, i32 6
  %53 = load i32*, i32** %52, align 8
  %54 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %5, align 8
  %55 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %54, i32 0, i32 4
  store i32* %53, i32** %55, align 8
  %56 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %57 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %56, i32 0, i32 3
  %58 = load i32*, i32** %57, align 8
  %59 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %5, align 8
  %60 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %59, i32 0, i32 2
  store i32* %58, i32** %60, align 8
  %61 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %5, align 8
  %62 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %61, i32 0, i32 6
  store i8 (i32, i32, i32, i32, i8, i8*)* null, i8 (i32, i32, i32, i32, i8, i8*)** %62, align 8
  %63 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %5, align 8
  %64 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %63, i32 0, i32 5
  store i8* null, i8** %64, align 8
  %65 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %66 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %65, i32 0, i32 11
  %67 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %66, align 8
  %68 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %67, i32 0, i32 8
  %69 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %68, align 8
  %70 = icmp ne i8 (i32, i32, i32, i32, i8, i8*)* %69, null
  br i1 %70, label %71, label %86

71:                                               ; preds = %40
  %72 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %73 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %72, i32 0, i32 11
  %74 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %73, align 8
  %75 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %74, i32 0, i32 8
  %76 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %75, align 8
  %77 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %5, align 8
  %78 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %77, i32 0, i32 6
  store i8 (i32, i32, i32, i32, i8, i8*)* %76, i8 (i32, i32, i32, i32, i8, i8*)** %78, align 8
  %79 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %80 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %79, i32 0, i32 11
  %81 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %80, align 8
  %82 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %81, i32 0, i32 9
  %83 = load i8*, i8** %82, align 8
  %84 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %5, align 8
  %85 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %84, i32 0, i32 5
  store i8* %83, i8** %85, align 8
  store i8 (i32, i32, i32, i32, i8*)* @hc_int_cb_def_user, i8 (i32, i32, i32, i32, i8*)** %3, align 8
  br label %87

86:                                               ; preds = %40
  store i8 (i32, i32, i32, i32, i8*)* @hc_int_cb_def, i8 (i32, i32, i32, i32, i8*)** %3, align 8
  br label %87

87:                                               ; preds = %86, %71
  %88 = load i8 (i32, i32, i32, i32, i8*)*, i8 (i32, i32, i32, i32, i8*)** %3, align 8
  ret i8 (i32, i32, i32, i32, i8*)* %88
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8 (i32, i32, i32, i32, i8, i8*)* @prepare_hc_mb_def(%struct.vrna_fc_s* noundef %0, %struct.hc_mb_def_dat* noundef %1) #0 {
  %3 = alloca i8 (i32, i32, i32, i32, i8, i8*)*, align 8
  %4 = alloca %struct.vrna_fc_s*, align 8
  %5 = alloca %struct.hc_mb_def_dat*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %4, align 8
  store %struct.hc_mb_def_dat* %1, %struct.hc_mb_def_dat** %5, align 8
  %6 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %7 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %6, i32 0, i32 11
  %8 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %7, align 8
  %9 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %8, i32 0, i32 3
  %10 = bitcast %union.anon* %9 to %struct.anon*
  %11 = getelementptr inbounds %struct.anon, %struct.anon* %10, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %5, align 8
  %14 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %13, i32 0, i32 0
  store i8* %12, i8** %14, align 8
  %15 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %16 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %15, i32 0, i32 11
  %17 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %16, align 8
  %18 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %17, i32 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %5, align 8
  %21 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %20, i32 0, i32 3
  store i32 %19, i32* %21, align 8
  %22 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %23 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %22, i32 0, i32 11
  %24 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %23, align 8
  %25 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %24, i32 0, i32 3
  %26 = bitcast %union.anon* %25 to %struct.anon.0*
  %27 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %26, i32 0, i32 0
  %28 = load i8**, i8*** %27, align 8
  %29 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %5, align 8
  %30 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %29, i32 0, i32 1
  store i8** %28, i8*** %30, align 8
  %31 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %32 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %31, i32 0, i32 11
  %33 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %32, align 8
  %34 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %33, i32 0, i32 7
  %35 = load i32*, i32** %34, align 8
  %36 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %5, align 8
  %37 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %36, i32 0, i32 4
  store i32* %35, i32** %37, align 8
  %38 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %39 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %38, i32 0, i32 3
  %40 = load i32*, i32** %39, align 8
  %41 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %5, align 8
  %42 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %41, i32 0, i32 2
  store i32* %40, i32** %42, align 8
  %43 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %44 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %43, i32 0, i32 11
  %45 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %44, align 8
  %46 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %45, i32 0, i32 8
  %47 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %46, align 8
  %48 = icmp ne i8 (i32, i32, i32, i32, i8, i8*)* %47, null
  br i1 %48, label %49, label %80

49:                                               ; preds = %2
  %50 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %51 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %50, i32 0, i32 11
  %52 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %51, align 8
  %53 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %52, i32 0, i32 8
  %54 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %53, align 8
  %55 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %5, align 8
  %56 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %55, i32 0, i32 6
  store i8 (i32, i32, i32, i32, i8, i8*)* %54, i8 (i32, i32, i32, i32, i8, i8*)** %56, align 8
  %57 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %58 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %57, i32 0, i32 11
  %59 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %58, align 8
  %60 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %59, i32 0, i32 9
  %61 = load i8*, i8** %60, align 8
  %62 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %5, align 8
  %63 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %62, i32 0, i32 5
  store i8* %61, i8** %63, align 8
  %64 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %65 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %64, i32 0, i32 11
  %66 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %65, align 8
  %67 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %66, i32 0, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = icmp eq i32 %68, 1
  br i1 %69, label %70, label %71

70:                                               ; preds = %49
  br label %78

71:                                               ; preds = %49
  %72 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %73 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %72, i32 0, i32 8
  %74 = load i32, i32* %73, align 8
  %75 = icmp eq i32 %74, 1
  %76 = zext i1 %75 to i64
  %77 = select i1 %75, i8 (i32, i32, i32, i32, i8, i8*)* @hc_mb_cb_def_user, i8 (i32, i32, i32, i32, i8, i8*)* @hc_mb_cb_def_sn_user
  br label %78

78:                                               ; preds = %71, %70
  %79 = phi i8 (i32, i32, i32, i32, i8, i8*)* [ @hc_mb_cb_def_user_window, %70 ], [ %77, %71 ]
  store i8 (i32, i32, i32, i32, i8, i8*)* %79, i8 (i32, i32, i32, i32, i8, i8*)** %3, align 8
  br label %97

80:                                               ; preds = %2
  %81 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %82 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %81, i32 0, i32 11
  %83 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %82, align 8
  %84 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %83, i32 0, i32 0
  %85 = load i32, i32* %84, align 8
  %86 = icmp eq i32 %85, 1
  br i1 %86, label %87, label %88

87:                                               ; preds = %80
  br label %95

88:                                               ; preds = %80
  %89 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %90 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %89, i32 0, i32 8
  %91 = load i32, i32* %90, align 8
  %92 = icmp eq i32 %91, 1
  %93 = zext i1 %92 to i64
  %94 = select i1 %92, i8 (i32, i32, i32, i32, i8, i8*)* @hc_mb_cb_def, i8 (i32, i32, i32, i32, i8, i8*)* @hc_mb_cb_def_sn
  br label %95

95:                                               ; preds = %88, %87
  %96 = phi i8 (i32, i32, i32, i32, i8, i8*)* [ @hc_mb_cb_def_window, %87 ], [ %94, %88 ]
  store i8 (i32, i32, i32, i32, i8, i8*)* %96, i8 (i32, i32, i32, i32, i8, i8*)** %3, align 8
  br label %97

97:                                               ; preds = %95, %78
  %98 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %3, align 8
  ret i8 (i32, i32, i32, i32, i8, i8*)* %98
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @init_sc_ext_exp(%struct.vrna_fc_s* noundef %0, %struct.sc_ext_exp_dat* noundef %1) #0 {
  %3 = alloca %struct.vrna_fc_s*, align 8
  %4 = alloca %struct.sc_ext_exp_dat*, align 8
  %5 = alloca %struct.vrna_sc_s*, align 8
  %6 = alloca %struct.vrna_sc_s**, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %3, align 8
  store %struct.sc_ext_exp_dat* %1, %struct.sc_ext_exp_dat** %4, align 8
  %10 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %11 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %10, i32 0, i32 0
  store double** null, double*** %11, align 8
  %12 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %13 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %12, i32 0, i32 5
  store double (i32, i32, i32, i32, i8, i8*)* null, double (i32, i32, i32, i32, i8, i8*)** %13, align 8
  %14 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %15 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %14, i32 0, i32 6
  store i8* null, i8** %15, align 8
  %16 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %17 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %16, i32 0, i32 7
  store i32 1, i32* %17, align 8
  %18 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %19 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %18, i32 0, i32 8
  store i32** null, i32*** %19, align 8
  %20 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %21 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %20, i32 0, i32 9
  store double*** null, double**** %21, align 8
  %22 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %23 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %22, i32 0, i32 10
  store double (i32, i32, i32, i32, i8, i8*)** null, double (i32, i32, i32, i32, i8, i8*)*** %23, align 8
  %24 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %25 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %24, i32 0, i32 11
  store i8** null, i8*** %25, align 8
  %26 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %27 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %26, i32 0, i32 1
  store double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)* null, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)** %27, align 8
  %28 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %29 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %28, i32 0, i32 2
  store double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)* null, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)** %29, align 8
  %30 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %31 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %30, i32 0, i32 3
  store double (i32, i32, %struct.sc_ext_exp_dat*)* null, double (i32, i32, %struct.sc_ext_exp_dat*)** %31, align 8
  %32 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %33 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %32, i32 0, i32 4
  store double (i32, i32, i32, %struct.sc_ext_exp_dat*)* null, double (i32, i32, i32, %struct.sc_ext_exp_dat*)** %33, align 8
  %34 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %35 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %34, i32 0, i32 0
  %36 = load i32, i32* %35, align 8
  switch i32 %36, label %280 [
    i32 0, label %37
    i32 1, label %104
  ]

37:                                               ; preds = %2
  %38 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %39 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %38, i32 0, i32 24
  %40 = bitcast %union.anon.9* %39 to %struct.anon.10*
  %41 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %40, i32 0, i32 5
  %42 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %41, align 8
  store %struct.vrna_sc_s* %42, %struct.vrna_sc_s** %5, align 8
  %43 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %5, align 8
  %44 = icmp ne %struct.vrna_sc_s* %43, null
  br i1 %44, label %45, label %103

45:                                               ; preds = %37
  %46 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %5, align 8
  %47 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %46, i32 0, i32 4
  %48 = load double**, double*** %47, align 8
  %49 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %50 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %49, i32 0, i32 0
  store double** %48, double*** %50, align 8
  %51 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %5, align 8
  %52 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %51, i32 0, i32 12
  %53 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %52, align 8
  %54 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %55 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %54, i32 0, i32 5
  store double (i32, i32, i32, i32, i8, i8*)* %53, double (i32, i32, i32, i32, i8, i8*)** %55, align 8
  %56 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %5, align 8
  %57 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %56, i32 0, i32 13
  %58 = load i8*, i8** %57, align 8
  %59 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %60 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %59, i32 0, i32 6
  store i8* %58, i8** %60, align 8
  %61 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %5, align 8
  %62 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %61, i32 0, i32 4
  %63 = load double**, double*** %62, align 8
  %64 = icmp ne double** %63, null
  br i1 %64, label %65, label %87

65:                                               ; preds = %45
  %66 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %5, align 8
  %67 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %66, i32 0, i32 12
  %68 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %67, align 8
  %69 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %68, null
  br i1 %69, label %70, label %79

70:                                               ; preds = %65
  %71 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %72 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %71, i32 0, i32 1
  store double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_red_user_def_to_ext, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)** %72, align 8
  %73 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %74 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %73, i32 0, i32 2
  store double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_red_user_def_to_stem, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)** %74, align 8
  %75 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %76 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %75, i32 0, i32 3
  store double (i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_up_user_def, double (i32, i32, %struct.sc_ext_exp_dat*)** %76, align 8
  %77 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %78 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %77, i32 0, i32 4
  store double (i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_split_user, double (i32, i32, i32, %struct.sc_ext_exp_dat*)** %78, align 8
  br label %86

79:                                               ; preds = %65
  %80 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %81 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %80, i32 0, i32 1
  store double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_red, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)** %81, align 8
  %82 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %83 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %82, i32 0, i32 2
  store double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_red, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)** %83, align 8
  %84 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %85 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %84, i32 0, i32 3
  store double (i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_up, double (i32, i32, %struct.sc_ext_exp_dat*)** %85, align 8
  br label %86

86:                                               ; preds = %79, %70
  br label %102

87:                                               ; preds = %45
  %88 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %5, align 8
  %89 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %88, i32 0, i32 12
  %90 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %89, align 8
  %91 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %90, null
  br i1 %91, label %92, label %101

92:                                               ; preds = %87
  %93 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %94 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %93, i32 0, i32 1
  store double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_red_user_to_ext, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)** %94, align 8
  %95 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %96 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %95, i32 0, i32 2
  store double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_red_user_to_stem, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)** %96, align 8
  %97 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %98 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %97, i32 0, i32 3
  store double (i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_up_user, double (i32, i32, %struct.sc_ext_exp_dat*)** %98, align 8
  %99 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %100 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %99, i32 0, i32 4
  store double (i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_split_user, double (i32, i32, i32, %struct.sc_ext_exp_dat*)** %100, align 8
  br label %101

101:                                              ; preds = %92, %87
  br label %102

102:                                              ; preds = %101, %86
  br label %103

103:                                              ; preds = %102, %37
  br label %280

104:                                              ; preds = %2
  %105 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %106 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %105, i32 0, i32 24
  %107 = bitcast %union.anon.9* %106 to %struct.anon.14*
  %108 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %107, i32 0, i32 12
  %109 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %108, align 8
  store %struct.vrna_sc_s** %109, %struct.vrna_sc_s*** %6, align 8
  %110 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %111 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %110, i32 0, i32 24
  %112 = bitcast %union.anon.9* %111 to %struct.anon.14*
  %113 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %112, i32 0, i32 1
  %114 = load i32, i32* %113, align 8
  %115 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %116 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %115, i32 0, i32 7
  store i32 %114, i32* %116, align 8
  %117 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %118 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %117, i32 0, i32 24
  %119 = bitcast %union.anon.9* %118 to %struct.anon.14*
  %120 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %119, i32 0, i32 8
  %121 = load i32**, i32*** %120, align 8
  %122 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %123 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %122, i32 0, i32 8
  store i32** %121, i32*** %123, align 8
  %124 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %6, align 8
  %125 = icmp ne %struct.vrna_sc_s** %124, null
  br i1 %125, label %126, label %279

126:                                              ; preds = %104
  %127 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %128 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %127, i32 0, i32 24
  %129 = bitcast %union.anon.9* %128 to %struct.anon.14*
  %130 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %129, i32 0, i32 1
  %131 = load i32, i32* %130, align 8
  %132 = zext i32 %131 to i64
  %133 = mul i64 8, %132
  %134 = trunc i64 %133 to i32
  %135 = call i8* @vrna_alloc(i32 noundef %134)
  %136 = bitcast i8* %135 to double***
  %137 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %138 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %137, i32 0, i32 9
  store double*** %136, double**** %138, align 8
  %139 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %140 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %139, i32 0, i32 24
  %141 = bitcast %union.anon.9* %140 to %struct.anon.14*
  %142 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %141, i32 0, i32 1
  %143 = load i32, i32* %142, align 8
  %144 = zext i32 %143 to i64
  %145 = mul i64 8, %144
  %146 = trunc i64 %145 to i32
  %147 = call i8* @vrna_alloc(i32 noundef %146)
  %148 = bitcast i8* %147 to double (i32, i32, i32, i32, i8, i8*)**
  %149 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %150 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %149, i32 0, i32 10
  store double (i32, i32, i32, i32, i8, i8*)** %148, double (i32, i32, i32, i32, i8, i8*)*** %150, align 8
  %151 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %152 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %151, i32 0, i32 24
  %153 = bitcast %union.anon.9* %152 to %struct.anon.14*
  %154 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %153, i32 0, i32 1
  %155 = load i32, i32* %154, align 8
  %156 = zext i32 %155 to i64
  %157 = mul i64 8, %156
  %158 = trunc i64 %157 to i32
  %159 = call i8* @vrna_alloc(i32 noundef %158)
  %160 = bitcast i8* %159 to i8**
  %161 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %162 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %161, i32 0, i32 11
  store i8** %160, i8*** %162, align 8
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i32 0, i32* %7, align 4
  br label %163

163:                                              ; preds = %275, %126
  %164 = load i32, i32* %7, align 4
  %165 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %166 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %165, i32 0, i32 24
  %167 = bitcast %union.anon.9* %166 to %struct.anon.14*
  %168 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %167, i32 0, i32 1
  %169 = load i32, i32* %168, align 8
  %170 = icmp ult i32 %164, %169
  br i1 %170, label %171, label %278

171:                                              ; preds = %163
  %172 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %6, align 8
  %173 = load i32, i32* %7, align 4
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %172, i64 %174
  %176 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %175, align 8
  %177 = icmp ne %struct.vrna_sc_s* %176, null
  br i1 %177, label %178, label %274

178:                                              ; preds = %171
  %179 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %6, align 8
  %180 = load i32, i32* %7, align 4
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %179, i64 %181
  %183 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %182, align 8
  %184 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %183, i32 0, i32 4
  %185 = load double**, double*** %184, align 8
  %186 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %187 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %186, i32 0, i32 9
  %188 = load double***, double**** %187, align 8
  %189 = load i32, i32* %7, align 4
  %190 = zext i32 %189 to i64
  %191 = getelementptr inbounds double**, double*** %188, i64 %190
  store double** %185, double*** %191, align 8
  %192 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %6, align 8
  %193 = load i32, i32* %7, align 4
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %192, i64 %194
  %196 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %195, align 8
  %197 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %196, i32 0, i32 12
  %198 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %197, align 8
  %199 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %200 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %199, i32 0, i32 10
  %201 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %200, align 8
  %202 = load i32, i32* %7, align 4
  %203 = zext i32 %202 to i64
  %204 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %201, i64 %203
  store double (i32, i32, i32, i32, i8, i8*)* %198, double (i32, i32, i32, i32, i8, i8*)** %204, align 8
  %205 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %6, align 8
  %206 = load i32, i32* %7, align 4
  %207 = zext i32 %206 to i64
  %208 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %205, i64 %207
  %209 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %208, align 8
  %210 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %209, i32 0, i32 13
  %211 = load i8*, i8** %210, align 8
  %212 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %213 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %212, i32 0, i32 11
  %214 = load i8**, i8*** %213, align 8
  %215 = load i32, i32* %7, align 4
  %216 = zext i32 %215 to i64
  %217 = getelementptr inbounds i8*, i8** %214, i64 %216
  store i8* %211, i8** %217, align 8
  %218 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %6, align 8
  %219 = load i32, i32* %7, align 4
  %220 = zext i32 %219 to i64
  %221 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %218, i64 %220
  %222 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %221, align 8
  %223 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %222, i32 0, i32 4
  %224 = load double**, double*** %223, align 8
  %225 = icmp ne double** %224, null
  br i1 %225, label %226, label %227

226:                                              ; preds = %178
  store i32 1, i32* %8, align 4
  br label %227

227:                                              ; preds = %226, %178
  %228 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %6, align 8
  %229 = load i32, i32* %7, align 4
  %230 = zext i32 %229 to i64
  %231 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %228, i64 %230
  %232 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %231, align 8
  %233 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %232, i32 0, i32 12
  %234 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %233, align 8
  %235 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %234, null
  br i1 %235, label %236, label %237

236:                                              ; preds = %227
  store i32 1, i32* %9, align 4
  br label %237

237:                                              ; preds = %236, %227
  %238 = load i32, i32* %8, align 4
  %239 = icmp ne i32 %238, 0
  br i1 %239, label %240, label %260

240:                                              ; preds = %237
  %241 = load i32, i32* %9, align 4
  %242 = icmp ne i32 %241, 0
  br i1 %242, label %243, label %252

243:                                              ; preds = %240
  %244 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %245 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %244, i32 0, i32 1
  store double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_red_user_def_to_ext_comparative, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)** %245, align 8
  %246 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %247 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %246, i32 0, i32 2
  store double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_red_user_def_to_stem_comparative, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)** %247, align 8
  %248 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %249 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %248, i32 0, i32 3
  store double (i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_up_user_def_comparative, double (i32, i32, %struct.sc_ext_exp_dat*)** %249, align 8
  %250 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %251 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %250, i32 0, i32 4
  store double (i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_split_user_comparative, double (i32, i32, i32, %struct.sc_ext_exp_dat*)** %251, align 8
  br label %259

252:                                              ; preds = %240
  %253 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %254 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %253, i32 0, i32 1
  store double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_red_comparative, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)** %254, align 8
  %255 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %256 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %255, i32 0, i32 2
  store double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_red_comparative, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)** %256, align 8
  %257 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %258 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %257, i32 0, i32 3
  store double (i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_up_comparative, double (i32, i32, %struct.sc_ext_exp_dat*)** %258, align 8
  br label %259

259:                                              ; preds = %252, %243
  br label %273

260:                                              ; preds = %237
  %261 = load i32, i32* %9, align 4
  %262 = icmp ne i32 %261, 0
  br i1 %262, label %263, label %272

263:                                              ; preds = %260
  %264 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %265 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %264, i32 0, i32 1
  store double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_red_user_to_ext_comparative, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)** %265, align 8
  %266 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %267 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %266, i32 0, i32 2
  store double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_red_user_to_stem_comparative, double (i32, i32, i32, i32, %struct.sc_ext_exp_dat*)** %267, align 8
  %268 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %269 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %268, i32 0, i32 3
  store double (i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_up_user_comparative, double (i32, i32, %struct.sc_ext_exp_dat*)** %269, align 8
  %270 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %4, align 8
  %271 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %270, i32 0, i32 4
  store double (i32, i32, i32, %struct.sc_ext_exp_dat*)* @sc_ext_exp_cb_split_user_comparative, double (i32, i32, i32, %struct.sc_ext_exp_dat*)** %271, align 8
  br label %272

272:                                              ; preds = %263, %260
  br label %273

273:                                              ; preds = %272, %259
  br label %274

274:                                              ; preds = %273, %171
  br label %275

275:                                              ; preds = %274
  %276 = load i32, i32* %7, align 4
  %277 = add i32 %276, 1
  store i32 %277, i32* %7, align 4
  br label %163, !llvm.loop !122

278:                                              ; preds = %163
  br label %279

279:                                              ; preds = %278, %104
  br label %280

280:                                              ; preds = %2, %279, %103
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @init_sc_hp_exp(%struct.vrna_fc_s* noundef %0, %struct.sc_hp_exp_dat* noundef %1) #0 {
  %3 = alloca %struct.vrna_fc_s*, align 8
  %4 = alloca %struct.sc_hp_exp_dat*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  %7 = alloca %struct.vrna_sc_s*, align 8
  %8 = alloca %struct.vrna_sc_s**, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %3, align 8
  store %struct.sc_hp_exp_dat* %1, %struct.sc_hp_exp_dat** %4, align 8
  %15 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %16 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %15, i32 0, i32 13
  %17 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %16, align 8
  %18 = icmp ne %struct.vrna_mx_pf_s* %17, null
  br i1 %18, label %19, label %29

19:                                               ; preds = %2
  %20 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %21 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %20, i32 0, i32 13
  %22 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %21, align 8
  %23 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %22, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = icmp eq i32 %24, 1
  %26 = zext i1 %25 to i64
  %27 = select i1 %25, i32 1, i32 0
  %28 = trunc i32 %27 to i8
  store i8 %28, i8* %5, align 1
  br label %71

29:                                               ; preds = %2
  %30 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %31 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %30, i32 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %53

34:                                               ; preds = %29
  %35 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %36 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %35, i32 0, i32 24
  %37 = bitcast %union.anon.9* %36 to %struct.anon.10*
  %38 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %37, i32 0, i32 5
  %39 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %38, align 8
  %40 = icmp ne %struct.vrna_sc_s* %39, null
  br i1 %40, label %41, label %53

41:                                               ; preds = %34
  %42 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %43 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %42, i32 0, i32 24
  %44 = bitcast %union.anon.9* %43 to %struct.anon.10*
  %45 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %44, i32 0, i32 5
  %46 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %45, align 8
  %47 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %46, i32 0, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %48, 1
  %50 = zext i1 %49 to i64
  %51 = select i1 %49, i32 1, i32 0
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %5, align 1
  br label %70

53:                                               ; preds = %34, %29
  %54 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %55 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %54, i32 0, i32 11
  %56 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %55, align 8
  %57 = icmp ne %struct.vrna_hc_s* %56, null
  br i1 %57, label %58, label %68

58:                                               ; preds = %53
  %59 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %60 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %59, i32 0, i32 11
  %61 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %60, align 8
  %62 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %61, i32 0, i32 0
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, 1
  %65 = zext i1 %64 to i64
  %66 = select i1 %64, i32 1, i32 0
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %5, align 1
  br label %69

68:                                               ; preds = %53
  store i8 0, i8* %5, align 1
  br label %69

69:                                               ; preds = %68, %58
  br label %70

70:                                               ; preds = %69, %41
  br label %71

71:                                               ; preds = %70, %19
  %72 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %73 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %72, i32 0, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %76 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %75, i32 0, i32 0
  store i32 %74, i32* %76, align 8
  %77 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %78 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %77, i32 0, i32 17
  %79 = load i32*, i32** %78, align 8
  %80 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %81 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %80, i32 0, i32 3
  store i32* %79, i32** %81, align 8
  %82 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %83 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %82, i32 0, i32 1
  store i32 1, i32* %83, align 4
  %84 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %85 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %84, i32 0, i32 2
  store i32** null, i32*** %85, align 8
  %86 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %87 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %86, i32 0, i32 4
  store double** null, double*** %87, align 8
  %88 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %89 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %88, i32 0, i32 5
  store double*** null, double**** %89, align 8
  %90 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %91 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %90, i32 0, i32 6
  store double* null, double** %91, align 8
  %92 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %93 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %92, i32 0, i32 7
  store double** null, double*** %93, align 8
  %94 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %95 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %94, i32 0, i32 8
  store double** null, double*** %95, align 8
  %96 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %97 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %96, i32 0, i32 9
  store double*** null, double**** %97, align 8
  %98 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %99 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %98, i32 0, i32 10
  store double (i32, i32, i32, i32, i8, i8*)* null, double (i32, i32, i32, i32, i8, i8*)** %99, align 8
  %100 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %101 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %100, i32 0, i32 11
  store i8* null, i8** %101, align 8
  %102 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %103 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %102, i32 0, i32 12
  store double (i32, i32, i32, i32, i8, i8*)** null, double (i32, i32, i32, i32, i8, i8*)*** %103, align 8
  %104 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %105 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %104, i32 0, i32 13
  store i8** null, i8*** %105, align 8
  %106 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %107 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %106, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* null, double (i32, i32, %struct.sc_hp_exp_dat*)** %107, align 8
  %108 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %109 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %108, i32 0, i32 15
  store double (i32, i32, %struct.sc_hp_exp_dat*)* null, double (i32, i32, %struct.sc_hp_exp_dat*)** %109, align 8
  %110 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %111 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %110, i32 0, i32 0
  %112 = load i32, i32* %111, align 8
  switch i32 %112, label %595 [
    i32 0, label %113
    i32 1, label %273
  ]

113:                                              ; preds = %71
  %114 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %115 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %114, i32 0, i32 24
  %116 = bitcast %union.anon.9* %115 to %struct.anon.10*
  %117 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %116, i32 0, i32 5
  %118 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %117, align 8
  store %struct.vrna_sc_s* %118, %struct.vrna_sc_s** %7, align 8
  %119 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %7, align 8
  %120 = icmp ne %struct.vrna_sc_s* %119, null
  br i1 %120, label %121, label %272

121:                                              ; preds = %113
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  %122 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %7, align 8
  %123 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %122, i32 0, i32 4
  %124 = load double**, double*** %123, align 8
  %125 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %126 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %125, i32 0, i32 4
  store double** %124, double*** %126, align 8
  %127 = load i8, i8* %5, align 1
  %128 = zext i8 %127 to i32
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %130, label %131

130:                                              ; preds = %121
  br label %137

131:                                              ; preds = %121
  %132 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %7, align 8
  %133 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %132, i32 0, i32 7
  %134 = bitcast %union.anon.11* %133 to %struct.anon.12*
  %135 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %134, i32 0, i32 1
  %136 = load double*, double** %135, align 8
  br label %137

137:                                              ; preds = %131, %130
  %138 = phi double* [ null, %130 ], [ %136, %131 ]
  %139 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %140 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %139, i32 0, i32 6
  store double* %138, double** %140, align 8
  %141 = load i8, i8* %5, align 1
  %142 = zext i8 %141 to i32
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %144, label %150

144:                                              ; preds = %137
  %145 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %7, align 8
  %146 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %145, i32 0, i32 7
  %147 = bitcast %union.anon.11* %146 to %struct.anon.13*
  %148 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %147, i32 0, i32 1
  %149 = load double**, double*** %148, align 8
  br label %151

150:                                              ; preds = %137
  br label %151

151:                                              ; preds = %150, %144
  %152 = phi double** [ %149, %144 ], [ null, %150 ]
  %153 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %154 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %153, i32 0, i32 8
  store double** %152, double*** %154, align 8
  %155 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %7, align 8
  %156 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %155, i32 0, i32 12
  %157 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %156, align 8
  %158 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %159 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %158, i32 0, i32 10
  store double (i32, i32, i32, i32, i8, i8*)* %157, double (i32, i32, i32, i32, i8, i8*)** %159, align 8
  %160 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %7, align 8
  %161 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %160, i32 0, i32 13
  %162 = load i8*, i8** %161, align 8
  %163 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %164 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %163, i32 0, i32 11
  store i8* %162, i8** %164, align 8
  %165 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %7, align 8
  %166 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %165, i32 0, i32 4
  %167 = load double**, double*** %166, align 8
  %168 = icmp ne double** %167, null
  br i1 %168, label %169, label %170

169:                                              ; preds = %151
  store i32 1, i32* %9, align 4
  br label %170

170:                                              ; preds = %169, %151
  %171 = load i8, i8* %5, align 1
  %172 = icmp ne i8 %171, 0
  br i1 %172, label %173, label %182

173:                                              ; preds = %170
  %174 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %7, align 8
  %175 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %174, i32 0, i32 7
  %176 = bitcast %union.anon.11* %175 to %struct.anon.13*
  %177 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %176, i32 0, i32 1
  %178 = load double**, double*** %177, align 8
  %179 = icmp ne double** %178, null
  br i1 %179, label %180, label %181

180:                                              ; preds = %173
  store i32 1, i32* %10, align 4
  br label %181

181:                                              ; preds = %180, %173
  br label %191

182:                                              ; preds = %170
  %183 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %7, align 8
  %184 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %183, i32 0, i32 7
  %185 = bitcast %union.anon.11* %184 to %struct.anon.12*
  %186 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %185, i32 0, i32 1
  %187 = load double*, double** %186, align 8
  %188 = icmp ne double* %187, null
  br i1 %188, label %189, label %190

189:                                              ; preds = %182
  store i32 1, i32* %10, align 4
  br label %190

190:                                              ; preds = %189, %182
  br label %191

191:                                              ; preds = %190, %181
  %192 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %7, align 8
  %193 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %192, i32 0, i32 12
  %194 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %193, align 8
  %195 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %194, null
  br i1 %195, label %196, label %197

196:                                              ; preds = %191
  store i32 1, i32* %11, align 4
  br label %197

197:                                              ; preds = %196, %191
  %198 = load i32, i32* %11, align 4
  %199 = icmp ne i32 %198, 0
  br i1 %199, label %200, label %238

200:                                              ; preds = %197
  %201 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %202 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %201, i32 0, i32 15
  store double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_ext_user, double (i32, i32, %struct.sc_hp_exp_dat*)** %202, align 8
  %203 = load i32, i32* %9, align 4
  %204 = icmp ne i32 %203, 0
  br i1 %204, label %205, label %222

205:                                              ; preds = %200
  %206 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %207 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %206, i32 0, i32 15
  store double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_ext_up_user, double (i32, i32, %struct.sc_hp_exp_dat*)** %207, align 8
  %208 = load i32, i32* %10, align 4
  %209 = icmp ne i32 %208, 0
  br i1 %209, label %210, label %218

210:                                              ; preds = %205
  %211 = load i8, i8* %5, align 1
  %212 = zext i8 %211 to i32
  %213 = icmp ne i32 %212, 0
  %214 = zext i1 %213 to i64
  %215 = select i1 %213, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_up_bp_local_user, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_up_bp_user
  %216 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %217 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %216, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* %215, double (i32, i32, %struct.sc_hp_exp_dat*)** %217, align 8
  br label %221

218:                                              ; preds = %205
  %219 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %220 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %219, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_up_user, double (i32, i32, %struct.sc_hp_exp_dat*)** %220, align 8
  br label %221

221:                                              ; preds = %218, %210
  br label %237

222:                                              ; preds = %200
  %223 = load i32, i32* %10, align 4
  %224 = icmp ne i32 %223, 0
  br i1 %224, label %225, label %233

225:                                              ; preds = %222
  %226 = load i8, i8* %5, align 1
  %227 = zext i8 %226 to i32
  %228 = icmp ne i32 %227, 0
  %229 = zext i1 %228 to i64
  %230 = select i1 %228, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_bp_local_user, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_bp_user
  %231 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %232 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %231, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* %230, double (i32, i32, %struct.sc_hp_exp_dat*)** %232, align 8
  br label %236

233:                                              ; preds = %222
  %234 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %235 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %234, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_user, double (i32, i32, %struct.sc_hp_exp_dat*)** %235, align 8
  br label %236

236:                                              ; preds = %233, %225
  br label %237

237:                                              ; preds = %236, %221
  br label %271

238:                                              ; preds = %197
  %239 = load i32, i32* %9, align 4
  %240 = icmp ne i32 %239, 0
  br i1 %240, label %241, label %258

241:                                              ; preds = %238
  %242 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %243 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %242, i32 0, i32 15
  store double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_ext_up, double (i32, i32, %struct.sc_hp_exp_dat*)** %243, align 8
  %244 = load i32, i32* %10, align 4
  %245 = icmp ne i32 %244, 0
  br i1 %245, label %246, label %254

246:                                              ; preds = %241
  %247 = load i8, i8* %5, align 1
  %248 = zext i8 %247 to i32
  %249 = icmp ne i32 %248, 0
  %250 = zext i1 %249 to i64
  %251 = select i1 %249, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_up_bp_local, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_up_bp
  %252 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %253 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %252, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* %251, double (i32, i32, %struct.sc_hp_exp_dat*)** %253, align 8
  br label %257

254:                                              ; preds = %241
  %255 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %256 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %255, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_up, double (i32, i32, %struct.sc_hp_exp_dat*)** %256, align 8
  br label %257

257:                                              ; preds = %254, %246
  br label %270

258:                                              ; preds = %238
  %259 = load i32, i32* %10, align 4
  %260 = icmp ne i32 %259, 0
  br i1 %260, label %261, label %269

261:                                              ; preds = %258
  %262 = load i8, i8* %5, align 1
  %263 = zext i8 %262 to i32
  %264 = icmp ne i32 %263, 0
  %265 = zext i1 %264 to i64
  %266 = select i1 %264, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_bp_local, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_bp
  %267 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %268 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %267, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* %266, double (i32, i32, %struct.sc_hp_exp_dat*)** %268, align 8
  br label %269

269:                                              ; preds = %261, %258
  br label %270

270:                                              ; preds = %269, %257
  br label %271

271:                                              ; preds = %270, %237
  br label %272

272:                                              ; preds = %271, %113
  br label %595

273:                                              ; preds = %71
  %274 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %275 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %274, i32 0, i32 24
  %276 = bitcast %union.anon.9* %275 to %struct.anon.14*
  %277 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %276, i32 0, i32 1
  %278 = load i32, i32* %277, align 8
  %279 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %280 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %279, i32 0, i32 1
  store i32 %278, i32* %280, align 4
  %281 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %282 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %281, i32 0, i32 24
  %283 = bitcast %union.anon.9* %282 to %struct.anon.14*
  %284 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %283, i32 0, i32 8
  %285 = load i32**, i32*** %284, align 8
  %286 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %287 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %286, i32 0, i32 2
  store i32** %285, i32*** %287, align 8
  %288 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %289 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %288, i32 0, i32 24
  %290 = bitcast %union.anon.9* %289 to %struct.anon.14*
  %291 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %290, i32 0, i32 12
  %292 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %291, align 8
  store %struct.vrna_sc_s** %292, %struct.vrna_sc_s*** %8, align 8
  %293 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %8, align 8
  %294 = icmp ne %struct.vrna_sc_s** %293, null
  br i1 %294, label %295, label %594

295:                                              ; preds = %273
  store i32 0, i32* %12, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  %296 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %297 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %296, i32 0, i32 24
  %298 = bitcast %union.anon.9* %297 to %struct.anon.14*
  %299 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %298, i32 0, i32 1
  %300 = load i32, i32* %299, align 8
  %301 = zext i32 %300 to i64
  %302 = mul i64 8, %301
  %303 = trunc i64 %302 to i32
  %304 = call i8* @vrna_alloc(i32 noundef %303)
  %305 = bitcast i8* %304 to double***
  %306 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %307 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %306, i32 0, i32 5
  store double*** %305, double**** %307, align 8
  %308 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %309 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %308, i32 0, i32 24
  %310 = bitcast %union.anon.9* %309 to %struct.anon.14*
  %311 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %310, i32 0, i32 1
  %312 = load i32, i32* %311, align 8
  %313 = zext i32 %312 to i64
  %314 = mul i64 8, %313
  %315 = trunc i64 %314 to i32
  %316 = call i8* @vrna_alloc(i32 noundef %315)
  %317 = bitcast i8* %316 to double**
  %318 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %319 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %318, i32 0, i32 7
  store double** %317, double*** %319, align 8
  %320 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %321 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %320, i32 0, i32 24
  %322 = bitcast %union.anon.9* %321 to %struct.anon.14*
  %323 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %322, i32 0, i32 1
  %324 = load i32, i32* %323, align 8
  %325 = zext i32 %324 to i64
  %326 = mul i64 8, %325
  %327 = trunc i64 %326 to i32
  %328 = call i8* @vrna_alloc(i32 noundef %327)
  %329 = bitcast i8* %328 to double***
  %330 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %331 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %330, i32 0, i32 9
  store double*** %329, double**** %331, align 8
  %332 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %333 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %332, i32 0, i32 24
  %334 = bitcast %union.anon.9* %333 to %struct.anon.14*
  %335 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %334, i32 0, i32 1
  %336 = load i32, i32* %335, align 8
  %337 = zext i32 %336 to i64
  %338 = mul i64 8, %337
  %339 = trunc i64 %338 to i32
  %340 = call i8* @vrna_alloc(i32 noundef %339)
  %341 = bitcast i8* %340 to double (i32, i32, i32, i32, i8, i8*)**
  %342 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %343 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %342, i32 0, i32 12
  store double (i32, i32, i32, i32, i8, i8*)** %341, double (i32, i32, i32, i32, i8, i8*)*** %343, align 8
  %344 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %345 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %344, i32 0, i32 24
  %346 = bitcast %union.anon.9* %345 to %struct.anon.14*
  %347 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %346, i32 0, i32 1
  %348 = load i32, i32* %347, align 8
  %349 = zext i32 %348 to i64
  %350 = mul i64 8, %349
  %351 = trunc i64 %350 to i32
  %352 = call i8* @vrna_alloc(i32 noundef %351)
  %353 = bitcast i8* %352 to i8**
  %354 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %355 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %354, i32 0, i32 13
  store i8** %353, i8*** %355, align 8
  store i32 0, i32* %6, align 4
  br label %356

356:                                              ; preds = %516, %295
  %357 = load i32, i32* %6, align 4
  %358 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %359 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %358, i32 0, i32 24
  %360 = bitcast %union.anon.9* %359 to %struct.anon.14*
  %361 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %360, i32 0, i32 1
  %362 = load i32, i32* %361, align 8
  %363 = icmp ult i32 %357, %362
  br i1 %363, label %364, label %519

364:                                              ; preds = %356
  %365 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %8, align 8
  %366 = load i32, i32* %6, align 4
  %367 = zext i32 %366 to i64
  %368 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %365, i64 %367
  %369 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %368, align 8
  %370 = icmp ne %struct.vrna_sc_s* %369, null
  br i1 %370, label %371, label %515

371:                                              ; preds = %364
  %372 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %8, align 8
  %373 = load i32, i32* %6, align 4
  %374 = zext i32 %373 to i64
  %375 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %372, i64 %374
  %376 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %375, align 8
  %377 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %376, i32 0, i32 0
  %378 = load i32, i32* %377, align 8
  %379 = icmp eq i32 %378, 1
  %380 = zext i1 %379 to i64
  %381 = select i1 %379, i32 1, i32 0
  %382 = trunc i32 %381 to i8
  store i8 %382, i8* %5, align 1
  %383 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %8, align 8
  %384 = load i32, i32* %6, align 4
  %385 = zext i32 %384 to i64
  %386 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %383, i64 %385
  %387 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %386, align 8
  %388 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %387, i32 0, i32 4
  %389 = load double**, double*** %388, align 8
  %390 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %391 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %390, i32 0, i32 5
  %392 = load double***, double**** %391, align 8
  %393 = load i32, i32* %6, align 4
  %394 = zext i32 %393 to i64
  %395 = getelementptr inbounds double**, double*** %392, i64 %394
  store double** %389, double*** %395, align 8
  %396 = load i8, i8* %5, align 1
  %397 = zext i8 %396 to i32
  %398 = icmp ne i32 %397, 0
  br i1 %398, label %399, label %400

399:                                              ; preds = %371
  br label %410

400:                                              ; preds = %371
  %401 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %8, align 8
  %402 = load i32, i32* %6, align 4
  %403 = zext i32 %402 to i64
  %404 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %401, i64 %403
  %405 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %404, align 8
  %406 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %405, i32 0, i32 7
  %407 = bitcast %union.anon.11* %406 to %struct.anon.12*
  %408 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %407, i32 0, i32 1
  %409 = load double*, double** %408, align 8
  br label %410

410:                                              ; preds = %400, %399
  %411 = phi double* [ null, %399 ], [ %409, %400 ]
  %412 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %413 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %412, i32 0, i32 7
  %414 = load double**, double*** %413, align 8
  %415 = load i32, i32* %6, align 4
  %416 = zext i32 %415 to i64
  %417 = getelementptr inbounds double*, double** %414, i64 %416
  store double* %411, double** %417, align 8
  %418 = load i8, i8* %5, align 1
  %419 = zext i8 %418 to i32
  %420 = icmp ne i32 %419, 0
  br i1 %420, label %421, label %431

421:                                              ; preds = %410
  %422 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %8, align 8
  %423 = load i32, i32* %6, align 4
  %424 = zext i32 %423 to i64
  %425 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %422, i64 %424
  %426 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %425, align 8
  %427 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %426, i32 0, i32 7
  %428 = bitcast %union.anon.11* %427 to %struct.anon.13*
  %429 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %428, i32 0, i32 1
  %430 = load double**, double*** %429, align 8
  br label %432

431:                                              ; preds = %410
  br label %432

432:                                              ; preds = %431, %421
  %433 = phi double** [ %430, %421 ], [ null, %431 ]
  %434 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %435 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %434, i32 0, i32 9
  %436 = load double***, double**** %435, align 8
  %437 = load i32, i32* %6, align 4
  %438 = zext i32 %437 to i64
  %439 = getelementptr inbounds double**, double*** %436, i64 %438
  store double** %433, double*** %439, align 8
  %440 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %8, align 8
  %441 = load i32, i32* %6, align 4
  %442 = zext i32 %441 to i64
  %443 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %440, i64 %442
  %444 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %443, align 8
  %445 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %444, i32 0, i32 12
  %446 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %445, align 8
  %447 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %448 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %447, i32 0, i32 12
  %449 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %448, align 8
  %450 = load i32, i32* %6, align 4
  %451 = zext i32 %450 to i64
  %452 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %449, i64 %451
  store double (i32, i32, i32, i32, i8, i8*)* %446, double (i32, i32, i32, i32, i8, i8*)** %452, align 8
  %453 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %8, align 8
  %454 = load i32, i32* %6, align 4
  %455 = zext i32 %454 to i64
  %456 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %453, i64 %455
  %457 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %456, align 8
  %458 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %457, i32 0, i32 13
  %459 = load i8*, i8** %458, align 8
  %460 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %461 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %460, i32 0, i32 13
  %462 = load i8**, i8*** %461, align 8
  %463 = load i32, i32* %6, align 4
  %464 = zext i32 %463 to i64
  %465 = getelementptr inbounds i8*, i8** %462, i64 %464
  store i8* %459, i8** %465, align 8
  %466 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %8, align 8
  %467 = load i32, i32* %6, align 4
  %468 = zext i32 %467 to i64
  %469 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %466, i64 %468
  %470 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %469, align 8
  %471 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %470, i32 0, i32 4
  %472 = load double**, double*** %471, align 8
  %473 = icmp ne double** %472, null
  br i1 %473, label %474, label %475

474:                                              ; preds = %432
  store i32 1, i32* %12, align 4
  br label %475

475:                                              ; preds = %474, %432
  %476 = load i8, i8* %5, align 1
  %477 = icmp ne i8 %476, 0
  br i1 %477, label %478, label %491

478:                                              ; preds = %475
  %479 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %8, align 8
  %480 = load i32, i32* %6, align 4
  %481 = zext i32 %480 to i64
  %482 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %479, i64 %481
  %483 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %482, align 8
  %484 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %483, i32 0, i32 7
  %485 = bitcast %union.anon.11* %484 to %struct.anon.13*
  %486 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %485, i32 0, i32 1
  %487 = load double**, double*** %486, align 8
  %488 = icmp ne double** %487, null
  br i1 %488, label %489, label %490

489:                                              ; preds = %478
  store i32 1, i32* %13, align 4
  br label %490

490:                                              ; preds = %489, %478
  br label %504

491:                                              ; preds = %475
  %492 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %8, align 8
  %493 = load i32, i32* %6, align 4
  %494 = zext i32 %493 to i64
  %495 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %492, i64 %494
  %496 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %495, align 8
  %497 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %496, i32 0, i32 7
  %498 = bitcast %union.anon.11* %497 to %struct.anon.12*
  %499 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %498, i32 0, i32 1
  %500 = load double*, double** %499, align 8
  %501 = icmp ne double* %500, null
  br i1 %501, label %502, label %503

502:                                              ; preds = %491
  store i32 1, i32* %13, align 4
  br label %503

503:                                              ; preds = %502, %491
  br label %504

504:                                              ; preds = %503, %490
  %505 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %8, align 8
  %506 = load i32, i32* %6, align 4
  %507 = zext i32 %506 to i64
  %508 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %505, i64 %507
  %509 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %508, align 8
  %510 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %509, i32 0, i32 12
  %511 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %510, align 8
  %512 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %511, null
  br i1 %512, label %513, label %514

513:                                              ; preds = %504
  store i32 1, i32* %14, align 4
  br label %514

514:                                              ; preds = %513, %504
  br label %515

515:                                              ; preds = %514, %364
  br label %516

516:                                              ; preds = %515
  %517 = load i32, i32* %6, align 4
  %518 = add i32 %517, 1
  store i32 %518, i32* %6, align 4
  br label %356, !llvm.loop !123

519:                                              ; preds = %356
  %520 = load i32, i32* %14, align 4
  %521 = icmp ne i32 %520, 0
  br i1 %521, label %522, label %560

522:                                              ; preds = %519
  %523 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %524 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %523, i32 0, i32 15
  store double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_ext_user_comparative, double (i32, i32, %struct.sc_hp_exp_dat*)** %524, align 8
  %525 = load i32, i32* %12, align 4
  %526 = icmp ne i32 %525, 0
  br i1 %526, label %527, label %544

527:                                              ; preds = %522
  %528 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %529 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %528, i32 0, i32 15
  store double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_ext_up_user_comparative, double (i32, i32, %struct.sc_hp_exp_dat*)** %529, align 8
  %530 = load i32, i32* %13, align 4
  %531 = icmp ne i32 %530, 0
  br i1 %531, label %532, label %540

532:                                              ; preds = %527
  %533 = load i8, i8* %5, align 1
  %534 = zext i8 %533 to i32
  %535 = icmp ne i32 %534, 0
  %536 = zext i1 %535 to i64
  %537 = select i1 %535, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_up_bp_local_user_comparative, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_up_bp_user_comparative
  %538 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %539 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %538, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* %537, double (i32, i32, %struct.sc_hp_exp_dat*)** %539, align 8
  br label %543

540:                                              ; preds = %527
  %541 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %542 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %541, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_up_user_comparative, double (i32, i32, %struct.sc_hp_exp_dat*)** %542, align 8
  br label %543

543:                                              ; preds = %540, %532
  br label %559

544:                                              ; preds = %522
  %545 = load i32, i32* %13, align 4
  %546 = icmp ne i32 %545, 0
  br i1 %546, label %547, label %555

547:                                              ; preds = %544
  %548 = load i8, i8* %5, align 1
  %549 = zext i8 %548 to i32
  %550 = icmp ne i32 %549, 0
  %551 = zext i1 %550 to i64
  %552 = select i1 %550, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_bp_local_user_comparative, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_bp_user_comparative
  %553 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %554 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %553, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* %552, double (i32, i32, %struct.sc_hp_exp_dat*)** %554, align 8
  br label %558

555:                                              ; preds = %544
  %556 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %557 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %556, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_user_comparative, double (i32, i32, %struct.sc_hp_exp_dat*)** %557, align 8
  br label %558

558:                                              ; preds = %555, %547
  br label %559

559:                                              ; preds = %558, %543
  br label %593

560:                                              ; preds = %519
  %561 = load i32, i32* %12, align 4
  %562 = icmp ne i32 %561, 0
  br i1 %562, label %563, label %580

563:                                              ; preds = %560
  %564 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %565 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %564, i32 0, i32 15
  store double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_ext_up_comparative, double (i32, i32, %struct.sc_hp_exp_dat*)** %565, align 8
  %566 = load i32, i32* %13, align 4
  %567 = icmp ne i32 %566, 0
  br i1 %567, label %568, label %576

568:                                              ; preds = %563
  %569 = load i8, i8* %5, align 1
  %570 = zext i8 %569 to i32
  %571 = icmp ne i32 %570, 0
  %572 = zext i1 %571 to i64
  %573 = select i1 %571, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_up_bp_local_comparative, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_up_bp_comparative
  %574 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %575 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %574, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* %573, double (i32, i32, %struct.sc_hp_exp_dat*)** %575, align 8
  br label %579

576:                                              ; preds = %563
  %577 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %578 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %577, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_up_comparative, double (i32, i32, %struct.sc_hp_exp_dat*)** %578, align 8
  br label %579

579:                                              ; preds = %576, %568
  br label %592

580:                                              ; preds = %560
  %581 = load i32, i32* %13, align 4
  %582 = icmp ne i32 %581, 0
  br i1 %582, label %583, label %591

583:                                              ; preds = %580
  %584 = load i8, i8* %5, align 1
  %585 = zext i8 %584 to i32
  %586 = icmp ne i32 %585, 0
  %587 = zext i1 %586 to i64
  %588 = select i1 %586, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_bp_local_comparative, double (i32, i32, %struct.sc_hp_exp_dat*)* @sc_hp_exp_cb_bp_comparative
  %589 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %4, align 8
  %590 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %589, i32 0, i32 14
  store double (i32, i32, %struct.sc_hp_exp_dat*)* %588, double (i32, i32, %struct.sc_hp_exp_dat*)** %590, align 8
  br label %591

591:                                              ; preds = %583, %580
  br label %592

592:                                              ; preds = %591, %579
  br label %593

593:                                              ; preds = %592, %559
  br label %594

594:                                              ; preds = %593, %273
  br label %595

595:                                              ; preds = %71, %594, %272
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @init_sc_int_exp(%struct.vrna_fc_s* noundef %0, %struct.sc_int_exp_dat* noundef %1) #0 {
  %3 = alloca %struct.vrna_fc_s*, align 8
  %4 = alloca %struct.sc_int_exp_dat*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.vrna_sc_s*, align 8
  %12 = alloca %struct.vrna_sc_s**, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %3, align 8
  store %struct.sc_int_exp_dat* %1, %struct.sc_int_exp_dat** %4, align 8
  %13 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %14 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %13, i32 0, i32 13
  %15 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %14, align 8
  %16 = icmp ne %struct.vrna_mx_pf_s* %15, null
  br i1 %16, label %17, label %27

17:                                               ; preds = %2
  %18 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %19 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %18, i32 0, i32 13
  %20 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %19, align 8
  %21 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %20, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 1
  %24 = zext i1 %23 to i64
  %25 = select i1 %23, i32 1, i32 0
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %5, align 1
  br label %69

27:                                               ; preds = %2
  %28 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %29 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %28, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %51

32:                                               ; preds = %27
  %33 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %34 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %33, i32 0, i32 24
  %35 = bitcast %union.anon.9* %34 to %struct.anon.10*
  %36 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %35, i32 0, i32 5
  %37 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %36, align 8
  %38 = icmp ne %struct.vrna_sc_s* %37, null
  br i1 %38, label %39, label %51

39:                                               ; preds = %32
  %40 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %41 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %40, i32 0, i32 24
  %42 = bitcast %union.anon.9* %41 to %struct.anon.10*
  %43 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %42, i32 0, i32 5
  %44 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %43, align 8
  %45 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %44, i32 0, i32 0
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 1
  %48 = zext i1 %47 to i64
  %49 = select i1 %47, i32 1, i32 0
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %5, align 1
  br label %68

51:                                               ; preds = %32, %27
  %52 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %53 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %52, i32 0, i32 11
  %54 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %53, align 8
  %55 = icmp ne %struct.vrna_hc_s* %54, null
  br i1 %55, label %56, label %66

56:                                               ; preds = %51
  %57 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %58 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %57, i32 0, i32 11
  %59 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %58, align 8
  %60 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %59, i32 0, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = icmp eq i32 %61, 1
  %63 = zext i1 %62 to i64
  %64 = select i1 %62, i32 1, i32 0
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %5, align 1
  br label %67

66:                                               ; preds = %51
  store i8 0, i8* %5, align 1
  br label %67

67:                                               ; preds = %66, %56
  br label %68

68:                                               ; preds = %67, %39
  br label %69

69:                                               ; preds = %68, %17
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  %70 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %71 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %70, i32 0, i32 1
  %72 = load i32, i32* %71, align 4
  %73 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %74 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %73, i32 0, i32 0
  store i32 %72, i32* %74, align 8
  %75 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %76 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %75, i32 0, i32 1
  store i32 1, i32* %76, align 4
  %77 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %78 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %77, i32 0, i32 2
  store i32** null, i32*** %78, align 8
  %79 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %80 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %79, i32 0, i32 17
  %81 = load i32*, i32** %80, align 8
  %82 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %83 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %82, i32 0, i32 3
  store i32* %81, i32** %83, align 8
  %84 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %85 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %84, i32 0, i32 4
  store double** null, double*** %85, align 8
  %86 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %87 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %86, i32 0, i32 5
  store double*** null, double**** %87, align 8
  %88 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %89 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %88, i32 0, i32 6
  store double* null, double** %89, align 8
  %90 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %91 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %90, i32 0, i32 7
  store double** null, double*** %91, align 8
  %92 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %93 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %92, i32 0, i32 8
  store double** null, double*** %93, align 8
  %94 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %95 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %94, i32 0, i32 9
  store double*** null, double**** %95, align 8
  %96 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %97 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %96, i32 0, i32 10
  store double* null, double** %97, align 8
  %98 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %99 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %98, i32 0, i32 11
  store double** null, double*** %99, align 8
  %100 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %101 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %100, i32 0, i32 12
  store double (i32, i32, i32, i32, i8, i8*)* null, double (i32, i32, i32, i32, i8, i8*)** %101, align 8
  %102 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %103 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %102, i32 0, i32 14
  store double (i32, i32, i32, i32, i8, i8*)** null, double (i32, i32, i32, i32, i8, i8*)*** %103, align 8
  %104 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %105 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %104, i32 0, i32 13
  store i8* null, i8** %105, align 8
  %106 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %107 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %106, i32 0, i32 15
  store i8** null, i8*** %107, align 8
  %108 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %109 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %108, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* null, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %109, align 8
  %110 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %111 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %110, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* null, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %111, align 8
  %112 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %113 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %112, i32 0, i32 0
  %114 = load i32, i32* %113, align 8
  switch i32 %114, label %839 [
    i32 0, label %115
    i32 1, label %384
  ]

115:                                              ; preds = %69
  %116 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %117 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %116, i32 0, i32 24
  %118 = bitcast %union.anon.9* %117 to %struct.anon.10*
  %119 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %118, i32 0, i32 5
  %120 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %119, align 8
  store %struct.vrna_sc_s* %120, %struct.vrna_sc_s** %11, align 8
  %121 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %11, align 8
  %122 = icmp ne %struct.vrna_sc_s* %121, null
  br i1 %122, label %123, label %383

123:                                              ; preds = %115
  %124 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %11, align 8
  %125 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %124, i32 0, i32 4
  %126 = load double**, double*** %125, align 8
  %127 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %128 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %127, i32 0, i32 4
  store double** %126, double*** %128, align 8
  %129 = load i8, i8* %5, align 1
  %130 = zext i8 %129 to i32
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %132, label %133

132:                                              ; preds = %123
  br label %139

133:                                              ; preds = %123
  %134 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %11, align 8
  %135 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %134, i32 0, i32 7
  %136 = bitcast %union.anon.11* %135 to %struct.anon.12*
  %137 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %136, i32 0, i32 1
  %138 = load double*, double** %137, align 8
  br label %139

139:                                              ; preds = %133, %132
  %140 = phi double* [ null, %132 ], [ %138, %133 ]
  %141 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %142 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %141, i32 0, i32 6
  store double* %140, double** %142, align 8
  %143 = load i8, i8* %5, align 1
  %144 = zext i8 %143 to i32
  %145 = icmp ne i32 %144, 0
  br i1 %145, label %146, label %152

146:                                              ; preds = %139
  %147 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %11, align 8
  %148 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %147, i32 0, i32 7
  %149 = bitcast %union.anon.11* %148 to %struct.anon.13*
  %150 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %149, i32 0, i32 1
  %151 = load double**, double*** %150, align 8
  br label %153

152:                                              ; preds = %139
  br label %153

153:                                              ; preds = %152, %146
  %154 = phi double** [ %151, %146 ], [ null, %152 ]
  %155 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %156 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %155, i32 0, i32 8
  store double** %154, double*** %156, align 8
  %157 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %11, align 8
  %158 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %157, i32 0, i32 9
  %159 = load double*, double** %158, align 8
  %160 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %161 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %160, i32 0, i32 10
  store double* %159, double** %161, align 8
  %162 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %11, align 8
  %163 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %162, i32 0, i32 12
  %164 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %163, align 8
  %165 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %166 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %165, i32 0, i32 12
  store double (i32, i32, i32, i32, i8, i8*)* %164, double (i32, i32, i32, i32, i8, i8*)** %166, align 8
  %167 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %11, align 8
  %168 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %167, i32 0, i32 13
  %169 = load i8*, i8** %168, align 8
  %170 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %171 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %170, i32 0, i32 13
  store i8* %169, i8** %171, align 8
  %172 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %11, align 8
  %173 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %172, i32 0, i32 4
  %174 = load double**, double*** %173, align 8
  %175 = icmp ne double** %174, null
  br i1 %175, label %176, label %177

176:                                              ; preds = %153
  store i32 1, i32* %7, align 4
  br label %177

177:                                              ; preds = %176, %153
  %178 = load i8, i8* %5, align 1
  %179 = icmp ne i8 %178, 0
  br i1 %179, label %180, label %189

180:                                              ; preds = %177
  %181 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %11, align 8
  %182 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %181, i32 0, i32 7
  %183 = bitcast %union.anon.11* %182 to %struct.anon.13*
  %184 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %183, i32 0, i32 1
  %185 = load double**, double*** %184, align 8
  %186 = icmp ne double** %185, null
  br i1 %186, label %187, label %188

187:                                              ; preds = %180
  store i32 1, i32* %8, align 4
  br label %188

188:                                              ; preds = %187, %180
  br label %198

189:                                              ; preds = %177
  %190 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %11, align 8
  %191 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %190, i32 0, i32 7
  %192 = bitcast %union.anon.11* %191 to %struct.anon.12*
  %193 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %192, i32 0, i32 1
  %194 = load double*, double** %193, align 8
  %195 = icmp ne double* %194, null
  br i1 %195, label %196, label %197

196:                                              ; preds = %189
  store i32 1, i32* %8, align 4
  br label %197

197:                                              ; preds = %196, %189
  br label %198

198:                                              ; preds = %197, %188
  %199 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %11, align 8
  %200 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %199, i32 0, i32 9
  %201 = load double*, double** %200, align 8
  %202 = icmp ne double* %201, null
  br i1 %202, label %203, label %204

203:                                              ; preds = %198
  store i32 1, i32* %9, align 4
  br label %204

204:                                              ; preds = %203, %198
  %205 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %11, align 8
  %206 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %205, i32 0, i32 12
  %207 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %206, align 8
  %208 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %207, null
  br i1 %208, label %209, label %210

209:                                              ; preds = %204
  store i32 1, i32* %10, align 4
  br label %210

210:                                              ; preds = %209, %204
  %211 = load i32, i32* %10, align 4
  %212 = icmp ne i32 %211, 0
  br i1 %212, label %213, label %301

213:                                              ; preds = %210
  %214 = load i32, i32* %7, align 4
  %215 = icmp ne i32 %214, 0
  br i1 %215, label %216, label %258

216:                                              ; preds = %213
  %217 = load i32, i32* %8, align 4
  %218 = icmp ne i32 %217, 0
  br i1 %218, label %219, label %243

219:                                              ; preds = %216
  %220 = load i32, i32* %9, align 4
  %221 = icmp ne i32 %220, 0
  br i1 %221, label %222, label %232

222:                                              ; preds = %219
  %223 = load i8, i8* %5, align 1
  %224 = zext i8 %223 to i32
  %225 = icmp ne i32 %224, 0
  %226 = zext i1 %225 to i64
  %227 = select i1 %225, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_local_stack_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_stack_user
  %228 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %229 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %228, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %227, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %229, align 8
  %230 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %231 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %230, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up_stack_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %231, align 8
  br label %242

232:                                              ; preds = %219
  %233 = load i8, i8* %5, align 1
  %234 = zext i8 %233 to i32
  %235 = icmp ne i32 %234, 0
  %236 = zext i1 %235 to i64
  %237 = select i1 %235, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_local_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_user
  %238 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %239 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %238, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %237, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %239, align 8
  %240 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %241 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %240, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %241, align 8
  br label %242

242:                                              ; preds = %232, %222
  br label %257

243:                                              ; preds = %216
  %244 = load i32, i32* %9, align 4
  %245 = icmp ne i32 %244, 0
  br i1 %245, label %246, label %251

246:                                              ; preds = %243
  %247 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %248 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %247, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_stack_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %248, align 8
  %249 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %250 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %249, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up_stack_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %250, align 8
  br label %256

251:                                              ; preds = %243
  %252 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %253 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %252, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %253, align 8
  %254 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %255 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %254, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %255, align 8
  br label %256

256:                                              ; preds = %251, %246
  br label %257

257:                                              ; preds = %256, %242
  br label %300

258:                                              ; preds = %213
  %259 = load i32, i32* %8, align 4
  %260 = icmp ne i32 %259, 0
  br i1 %260, label %261, label %285

261:                                              ; preds = %258
  %262 = load i32, i32* %9, align 4
  %263 = icmp ne i32 %262, 0
  br i1 %263, label %264, label %274

264:                                              ; preds = %261
  %265 = load i8, i8* %5, align 1
  %266 = zext i8 %265 to i32
  %267 = icmp ne i32 %266, 0
  %268 = zext i1 %267 to i64
  %269 = select i1 %267, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_local_stack_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_stack_user
  %270 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %271 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %270, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %269, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %271, align 8
  %272 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %273 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %272, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_stack_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %273, align 8
  br label %284

274:                                              ; preds = %261
  %275 = load i8, i8* %5, align 1
  %276 = zext i8 %275 to i32
  %277 = icmp ne i32 %276, 0
  %278 = zext i1 %277 to i64
  %279 = select i1 %277, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_local_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_user
  %280 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %281 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %280, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %279, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %281, align 8
  %282 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %283 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %282, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %283, align 8
  br label %284

284:                                              ; preds = %274, %264
  br label %299

285:                                              ; preds = %258
  %286 = load i32, i32* %9, align 4
  %287 = icmp ne i32 %286, 0
  br i1 %287, label %288, label %293

288:                                              ; preds = %285
  %289 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %290 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %289, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_stack_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %290, align 8
  %291 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %292 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %291, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_stack_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %292, align 8
  br label %298

293:                                              ; preds = %285
  %294 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %295 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %294, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %295, align 8
  %296 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %297 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %296, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_user, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %297, align 8
  br label %298

298:                                              ; preds = %293, %288
  br label %299

299:                                              ; preds = %298, %284
  br label %300

300:                                              ; preds = %299, %257
  br label %382

301:                                              ; preds = %210
  %302 = load i32, i32* %8, align 4
  %303 = icmp ne i32 %302, 0
  br i1 %303, label %304, label %354

304:                                              ; preds = %301
  %305 = load i32, i32* %7, align 4
  %306 = icmp ne i32 %305, 0
  br i1 %306, label %307, label %331

307:                                              ; preds = %304
  %308 = load i32, i32* %9, align 4
  %309 = icmp ne i32 %308, 0
  br i1 %309, label %310, label %320

310:                                              ; preds = %307
  %311 = load i8, i8* %5, align 1
  %312 = zext i8 %311 to i32
  %313 = icmp ne i32 %312, 0
  %314 = zext i1 %313 to i64
  %315 = select i1 %313, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_local_stack, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_stack
  %316 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %317 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %316, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %315, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %317, align 8
  %318 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %319 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %318, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up_stack, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %319, align 8
  br label %330

320:                                              ; preds = %307
  %321 = load i8, i8* %5, align 1
  %322 = zext i8 %321 to i32
  %323 = icmp ne i32 %322, 0
  %324 = zext i1 %323 to i64
  %325 = select i1 %323, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_local, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp
  %326 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %327 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %326, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %325, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %327, align 8
  %328 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %329 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %328, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %329, align 8
  br label %330

330:                                              ; preds = %320, %310
  br label %353

331:                                              ; preds = %304
  %332 = load i32, i32* %9, align 4
  %333 = icmp ne i32 %332, 0
  br i1 %333, label %334, label %344

334:                                              ; preds = %331
  %335 = load i8, i8* %5, align 1
  %336 = zext i8 %335 to i32
  %337 = icmp ne i32 %336, 0
  %338 = zext i1 %337 to i64
  %339 = select i1 %337, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_local_stack, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_stack
  %340 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %341 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %340, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %339, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %341, align 8
  %342 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %343 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %342, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_stack, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %343, align 8
  br label %352

344:                                              ; preds = %331
  %345 = load i8, i8* %5, align 1
  %346 = zext i8 %345 to i32
  %347 = icmp ne i32 %346, 0
  %348 = zext i1 %347 to i64
  %349 = select i1 %347, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_local, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp
  %350 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %351 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %350, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %349, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %351, align 8
  br label %352

352:                                              ; preds = %344, %334
  br label %353

353:                                              ; preds = %352, %330
  br label %381

354:                                              ; preds = %301
  %355 = load i32, i32* %7, align 4
  %356 = icmp ne i32 %355, 0
  br i1 %356, label %357, label %371

357:                                              ; preds = %354
  %358 = load i32, i32* %9, align 4
  %359 = icmp ne i32 %358, 0
  br i1 %359, label %360, label %365

360:                                              ; preds = %357
  %361 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %362 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %361, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_stack, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %362, align 8
  %363 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %364 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %363, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up_stack, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %364, align 8
  br label %370

365:                                              ; preds = %357
  %366 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %367 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %366, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %367, align 8
  %368 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %369 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %368, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %369, align 8
  br label %370

370:                                              ; preds = %365, %360
  br label %380

371:                                              ; preds = %354
  %372 = load i32, i32* %9, align 4
  %373 = icmp ne i32 %372, 0
  br i1 %373, label %374, label %379

374:                                              ; preds = %371
  %375 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %376 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %375, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_stack, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %376, align 8
  %377 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %378 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %377, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_stack, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %378, align 8
  br label %379

379:                                              ; preds = %374, %371
  br label %380

380:                                              ; preds = %379, %370
  br label %381

381:                                              ; preds = %380, %353
  br label %382

382:                                              ; preds = %381, %300
  br label %383

383:                                              ; preds = %382, %115
  br label %839

384:                                              ; preds = %69
  %385 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %386 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %385, i32 0, i32 24
  %387 = bitcast %union.anon.9* %386 to %struct.anon.14*
  %388 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %387, i32 0, i32 1
  %389 = load i32, i32* %388, align 8
  %390 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %391 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %390, i32 0, i32 1
  store i32 %389, i32* %391, align 4
  %392 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %393 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %392, i32 0, i32 24
  %394 = bitcast %union.anon.9* %393 to %struct.anon.14*
  %395 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %394, i32 0, i32 8
  %396 = load i32**, i32*** %395, align 8
  %397 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %398 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %397, i32 0, i32 2
  store i32** %396, i32*** %398, align 8
  %399 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %400 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %399, i32 0, i32 24
  %401 = bitcast %union.anon.9* %400 to %struct.anon.14*
  %402 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %401, i32 0, i32 12
  %403 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %402, align 8
  store %struct.vrna_sc_s** %403, %struct.vrna_sc_s*** %12, align 8
  %404 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %12, align 8
  %405 = icmp ne %struct.vrna_sc_s** %404, null
  br i1 %405, label %406, label %838

406:                                              ; preds = %384
  %407 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %408 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %407, i32 0, i32 24
  %409 = bitcast %union.anon.9* %408 to %struct.anon.14*
  %410 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %409, i32 0, i32 1
  %411 = load i32, i32* %410, align 8
  %412 = zext i32 %411 to i64
  %413 = mul i64 8, %412
  %414 = trunc i64 %413 to i32
  %415 = call i8* @vrna_alloc(i32 noundef %414)
  %416 = bitcast i8* %415 to double***
  %417 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %418 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %417, i32 0, i32 5
  store double*** %416, double**** %418, align 8
  %419 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %420 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %419, i32 0, i32 24
  %421 = bitcast %union.anon.9* %420 to %struct.anon.14*
  %422 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %421, i32 0, i32 1
  %423 = load i32, i32* %422, align 8
  %424 = zext i32 %423 to i64
  %425 = mul i64 8, %424
  %426 = trunc i64 %425 to i32
  %427 = call i8* @vrna_alloc(i32 noundef %426)
  %428 = bitcast i8* %427 to double**
  %429 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %430 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %429, i32 0, i32 7
  store double** %428, double*** %430, align 8
  %431 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %432 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %431, i32 0, i32 24
  %433 = bitcast %union.anon.9* %432 to %struct.anon.14*
  %434 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %433, i32 0, i32 1
  %435 = load i32, i32* %434, align 8
  %436 = zext i32 %435 to i64
  %437 = mul i64 8, %436
  %438 = trunc i64 %437 to i32
  %439 = call i8* @vrna_alloc(i32 noundef %438)
  %440 = bitcast i8* %439 to double***
  %441 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %442 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %441, i32 0, i32 9
  store double*** %440, double**** %442, align 8
  %443 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %444 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %443, i32 0, i32 24
  %445 = bitcast %union.anon.9* %444 to %struct.anon.14*
  %446 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %445, i32 0, i32 1
  %447 = load i32, i32* %446, align 8
  %448 = zext i32 %447 to i64
  %449 = mul i64 8, %448
  %450 = trunc i64 %449 to i32
  %451 = call i8* @vrna_alloc(i32 noundef %450)
  %452 = bitcast i8* %451 to double**
  %453 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %454 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %453, i32 0, i32 11
  store double** %452, double*** %454, align 8
  %455 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %456 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %455, i32 0, i32 24
  %457 = bitcast %union.anon.9* %456 to %struct.anon.14*
  %458 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %457, i32 0, i32 1
  %459 = load i32, i32* %458, align 8
  %460 = zext i32 %459 to i64
  %461 = mul i64 8, %460
  %462 = trunc i64 %461 to i32
  %463 = call i8* @vrna_alloc(i32 noundef %462)
  %464 = bitcast i8* %463 to double (i32, i32, i32, i32, i8, i8*)**
  %465 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %466 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %465, i32 0, i32 14
  store double (i32, i32, i32, i32, i8, i8*)** %464, double (i32, i32, i32, i32, i8, i8*)*** %466, align 8
  %467 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %468 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %467, i32 0, i32 24
  %469 = bitcast %union.anon.9* %468 to %struct.anon.14*
  %470 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %469, i32 0, i32 1
  %471 = load i32, i32* %470, align 8
  %472 = zext i32 %471 to i64
  %473 = mul i64 8, %472
  %474 = trunc i64 %473 to i32
  %475 = call i8* @vrna_alloc(i32 noundef %474)
  %476 = bitcast i8* %475 to i8**
  %477 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %478 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %477, i32 0, i32 15
  store i8** %476, i8*** %478, align 8
  store i32 0, i32* %6, align 4
  br label %479

479:                                              ; preds = %662, %406
  %480 = load i32, i32* %6, align 4
  %481 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %482 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %481, i32 0, i32 24
  %483 = bitcast %union.anon.9* %482 to %struct.anon.14*
  %484 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %483, i32 0, i32 1
  %485 = load i32, i32* %484, align 8
  %486 = icmp ult i32 %480, %485
  br i1 %486, label %487, label %665

487:                                              ; preds = %479
  %488 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %12, align 8
  %489 = load i32, i32* %6, align 4
  %490 = zext i32 %489 to i64
  %491 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %488, i64 %490
  %492 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %491, align 8
  %493 = icmp ne %struct.vrna_sc_s* %492, null
  br i1 %493, label %494, label %661

494:                                              ; preds = %487
  %495 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %12, align 8
  %496 = load i32, i32* %6, align 4
  %497 = zext i32 %496 to i64
  %498 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %495, i64 %497
  %499 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %498, align 8
  %500 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %499, i32 0, i32 0
  %501 = load i32, i32* %500, align 8
  %502 = icmp eq i32 %501, 1
  %503 = zext i1 %502 to i64
  %504 = select i1 %502, i32 1, i32 0
  %505 = trunc i32 %504 to i8
  store i8 %505, i8* %5, align 1
  %506 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %12, align 8
  %507 = load i32, i32* %6, align 4
  %508 = zext i32 %507 to i64
  %509 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %506, i64 %508
  %510 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %509, align 8
  %511 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %510, i32 0, i32 4
  %512 = load double**, double*** %511, align 8
  %513 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %514 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %513, i32 0, i32 5
  %515 = load double***, double**** %514, align 8
  %516 = load i32, i32* %6, align 4
  %517 = zext i32 %516 to i64
  %518 = getelementptr inbounds double**, double*** %515, i64 %517
  store double** %512, double*** %518, align 8
  %519 = load i8, i8* %5, align 1
  %520 = zext i8 %519 to i32
  %521 = icmp ne i32 %520, 0
  br i1 %521, label %522, label %523

522:                                              ; preds = %494
  br label %533

523:                                              ; preds = %494
  %524 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %12, align 8
  %525 = load i32, i32* %6, align 4
  %526 = zext i32 %525 to i64
  %527 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %524, i64 %526
  %528 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %527, align 8
  %529 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %528, i32 0, i32 7
  %530 = bitcast %union.anon.11* %529 to %struct.anon.12*
  %531 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %530, i32 0, i32 1
  %532 = load double*, double** %531, align 8
  br label %533

533:                                              ; preds = %523, %522
  %534 = phi double* [ null, %522 ], [ %532, %523 ]
  %535 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %536 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %535, i32 0, i32 7
  %537 = load double**, double*** %536, align 8
  %538 = load i32, i32* %6, align 4
  %539 = zext i32 %538 to i64
  %540 = getelementptr inbounds double*, double** %537, i64 %539
  store double* %534, double** %540, align 8
  %541 = load i8, i8* %5, align 1
  %542 = zext i8 %541 to i32
  %543 = icmp ne i32 %542, 0
  br i1 %543, label %544, label %554

544:                                              ; preds = %533
  %545 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %12, align 8
  %546 = load i32, i32* %6, align 4
  %547 = zext i32 %546 to i64
  %548 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %545, i64 %547
  %549 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %548, align 8
  %550 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %549, i32 0, i32 7
  %551 = bitcast %union.anon.11* %550 to %struct.anon.13*
  %552 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %551, i32 0, i32 1
  %553 = load double**, double*** %552, align 8
  br label %555

554:                                              ; preds = %533
  br label %555

555:                                              ; preds = %554, %544
  %556 = phi double** [ %553, %544 ], [ null, %554 ]
  %557 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %558 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %557, i32 0, i32 9
  %559 = load double***, double**** %558, align 8
  %560 = load i32, i32* %6, align 4
  %561 = zext i32 %560 to i64
  %562 = getelementptr inbounds double**, double*** %559, i64 %561
  store double** %556, double*** %562, align 8
  %563 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %12, align 8
  %564 = load i32, i32* %6, align 4
  %565 = zext i32 %564 to i64
  %566 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %563, i64 %565
  %567 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %566, align 8
  %568 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %567, i32 0, i32 9
  %569 = load double*, double** %568, align 8
  %570 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %571 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %570, i32 0, i32 11
  %572 = load double**, double*** %571, align 8
  %573 = load i32, i32* %6, align 4
  %574 = zext i32 %573 to i64
  %575 = getelementptr inbounds double*, double** %572, i64 %574
  store double* %569, double** %575, align 8
  %576 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %12, align 8
  %577 = load i32, i32* %6, align 4
  %578 = zext i32 %577 to i64
  %579 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %576, i64 %578
  %580 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %579, align 8
  %581 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %580, i32 0, i32 12
  %582 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %581, align 8
  %583 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %584 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %583, i32 0, i32 14
  %585 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %584, align 8
  %586 = load i32, i32* %6, align 4
  %587 = zext i32 %586 to i64
  %588 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %585, i64 %587
  store double (i32, i32, i32, i32, i8, i8*)* %582, double (i32, i32, i32, i32, i8, i8*)** %588, align 8
  %589 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %12, align 8
  %590 = load i32, i32* %6, align 4
  %591 = zext i32 %590 to i64
  %592 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %589, i64 %591
  %593 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %592, align 8
  %594 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %593, i32 0, i32 13
  %595 = load i8*, i8** %594, align 8
  %596 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %597 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %596, i32 0, i32 15
  %598 = load i8**, i8*** %597, align 8
  %599 = load i32, i32* %6, align 4
  %600 = zext i32 %599 to i64
  %601 = getelementptr inbounds i8*, i8** %598, i64 %600
  store i8* %595, i8** %601, align 8
  %602 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %12, align 8
  %603 = load i32, i32* %6, align 4
  %604 = zext i32 %603 to i64
  %605 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %602, i64 %604
  %606 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %605, align 8
  %607 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %606, i32 0, i32 4
  %608 = load double**, double*** %607, align 8
  %609 = icmp ne double** %608, null
  br i1 %609, label %610, label %611

610:                                              ; preds = %555
  store i32 1, i32* %7, align 4
  br label %611

611:                                              ; preds = %610, %555
  %612 = load i8, i8* %5, align 1
  %613 = icmp ne i8 %612, 0
  br i1 %613, label %614, label %627

614:                                              ; preds = %611
  %615 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %12, align 8
  %616 = load i32, i32* %6, align 4
  %617 = zext i32 %616 to i64
  %618 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %615, i64 %617
  %619 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %618, align 8
  %620 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %619, i32 0, i32 7
  %621 = bitcast %union.anon.11* %620 to %struct.anon.13*
  %622 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %621, i32 0, i32 1
  %623 = load double**, double*** %622, align 8
  %624 = icmp ne double** %623, null
  br i1 %624, label %625, label %626

625:                                              ; preds = %614
  store i32 1, i32* %8, align 4
  br label %626

626:                                              ; preds = %625, %614
  br label %640

627:                                              ; preds = %611
  %628 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %12, align 8
  %629 = load i32, i32* %6, align 4
  %630 = zext i32 %629 to i64
  %631 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %628, i64 %630
  %632 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %631, align 8
  %633 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %632, i32 0, i32 7
  %634 = bitcast %union.anon.11* %633 to %struct.anon.12*
  %635 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %634, i32 0, i32 1
  %636 = load double*, double** %635, align 8
  %637 = icmp ne double* %636, null
  br i1 %637, label %638, label %639

638:                                              ; preds = %627
  store i32 1, i32* %8, align 4
  br label %639

639:                                              ; preds = %638, %627
  br label %640

640:                                              ; preds = %639, %626
  %641 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %12, align 8
  %642 = load i32, i32* %6, align 4
  %643 = zext i32 %642 to i64
  %644 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %641, i64 %643
  %645 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %644, align 8
  %646 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %645, i32 0, i32 9
  %647 = load double*, double** %646, align 8
  %648 = icmp ne double* %647, null
  br i1 %648, label %649, label %650

649:                                              ; preds = %640
  store i32 1, i32* %9, align 4
  br label %650

650:                                              ; preds = %649, %640
  %651 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %12, align 8
  %652 = load i32, i32* %6, align 4
  %653 = zext i32 %652 to i64
  %654 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %651, i64 %653
  %655 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %654, align 8
  %656 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %655, i32 0, i32 12
  %657 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %656, align 8
  %658 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %657, null
  br i1 %658, label %659, label %660

659:                                              ; preds = %650
  store i32 1, i32* %10, align 4
  br label %660

660:                                              ; preds = %659, %650
  br label %661

661:                                              ; preds = %660, %487
  br label %662

662:                                              ; preds = %661
  %663 = load i32, i32* %6, align 4
  %664 = add i32 %663, 1
  store i32 %664, i32* %6, align 4
  br label %479, !llvm.loop !124

665:                                              ; preds = %479
  %666 = load i32, i32* %10, align 4
  %667 = icmp ne i32 %666, 0
  br i1 %667, label %668, label %756

668:                                              ; preds = %665
  %669 = load i32, i32* %7, align 4
  %670 = icmp ne i32 %669, 0
  br i1 %670, label %671, label %713

671:                                              ; preds = %668
  %672 = load i32, i32* %8, align 4
  %673 = icmp ne i32 %672, 0
  br i1 %673, label %674, label %698

674:                                              ; preds = %671
  %675 = load i32, i32* %9, align 4
  %676 = icmp ne i32 %675, 0
  br i1 %676, label %677, label %687

677:                                              ; preds = %674
  %678 = load i8, i8* %5, align 1
  %679 = zext i8 %678 to i32
  %680 = icmp ne i32 %679, 0
  %681 = zext i1 %680 to i64
  %682 = select i1 %680, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_local_stack_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_stack_user_comparative
  %683 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %684 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %683, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %682, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %684, align 8
  %685 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %686 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %685, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up_stack_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %686, align 8
  br label %697

687:                                              ; preds = %674
  %688 = load i8, i8* %5, align 1
  %689 = zext i8 %688 to i32
  %690 = icmp ne i32 %689, 0
  %691 = zext i1 %690 to i64
  %692 = select i1 %690, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_local_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_user_comparative
  %693 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %694 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %693, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %692, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %694, align 8
  %695 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %696 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %695, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %696, align 8
  br label %697

697:                                              ; preds = %687, %677
  br label %712

698:                                              ; preds = %671
  %699 = load i32, i32* %9, align 4
  %700 = icmp ne i32 %699, 0
  br i1 %700, label %701, label %706

701:                                              ; preds = %698
  %702 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %703 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %702, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_stack_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %703, align 8
  %704 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %705 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %704, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up_stack_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %705, align 8
  br label %711

706:                                              ; preds = %698
  %707 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %708 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %707, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %708, align 8
  %709 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %710 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %709, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %710, align 8
  br label %711

711:                                              ; preds = %706, %701
  br label %712

712:                                              ; preds = %711, %697
  br label %755

713:                                              ; preds = %668
  %714 = load i32, i32* %8, align 4
  %715 = icmp ne i32 %714, 0
  br i1 %715, label %716, label %740

716:                                              ; preds = %713
  %717 = load i32, i32* %9, align 4
  %718 = icmp ne i32 %717, 0
  br i1 %718, label %719, label %729

719:                                              ; preds = %716
  %720 = load i8, i8* %5, align 1
  %721 = zext i8 %720 to i32
  %722 = icmp ne i32 %721, 0
  %723 = zext i1 %722 to i64
  %724 = select i1 %722, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_local_stack_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_stack_user_comparative
  %725 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %726 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %725, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %724, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %726, align 8
  %727 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %728 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %727, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_stack_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %728, align 8
  br label %739

729:                                              ; preds = %716
  %730 = load i8, i8* %5, align 1
  %731 = zext i8 %730 to i32
  %732 = icmp ne i32 %731, 0
  %733 = zext i1 %732 to i64
  %734 = select i1 %732, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_local_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_user_comparative
  %735 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %736 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %735, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %734, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %736, align 8
  %737 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %738 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %737, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %738, align 8
  br label %739

739:                                              ; preds = %729, %719
  br label %754

740:                                              ; preds = %713
  %741 = load i32, i32* %9, align 4
  %742 = icmp ne i32 %741, 0
  br i1 %742, label %743, label %748

743:                                              ; preds = %740
  %744 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %745 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %744, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_stack_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %745, align 8
  %746 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %747 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %746, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_stack_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %747, align 8
  br label %753

748:                                              ; preds = %740
  %749 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %750 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %749, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %750, align 8
  %751 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %752 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %751, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_user_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %752, align 8
  br label %753

753:                                              ; preds = %748, %743
  br label %754

754:                                              ; preds = %753, %739
  br label %755

755:                                              ; preds = %754, %712
  br label %837

756:                                              ; preds = %665
  %757 = load i32, i32* %8, align 4
  %758 = icmp ne i32 %757, 0
  br i1 %758, label %759, label %809

759:                                              ; preds = %756
  %760 = load i32, i32* %7, align 4
  %761 = icmp ne i32 %760, 0
  br i1 %761, label %762, label %786

762:                                              ; preds = %759
  %763 = load i32, i32* %9, align 4
  %764 = icmp ne i32 %763, 0
  br i1 %764, label %765, label %775

765:                                              ; preds = %762
  %766 = load i8, i8* %5, align 1
  %767 = zext i8 %766 to i32
  %768 = icmp ne i32 %767, 0
  %769 = zext i1 %768 to i64
  %770 = select i1 %768, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_local_stack_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_stack_comparative
  %771 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %772 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %771, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %770, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %772, align 8
  %773 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %774 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %773, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up_stack_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %774, align 8
  br label %785

775:                                              ; preds = %762
  %776 = load i8, i8* %5, align 1
  %777 = zext i8 %776 to i32
  %778 = icmp ne i32 %777, 0
  %779 = zext i1 %778 to i64
  %780 = select i1 %778, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_local_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_bp_comparative
  %781 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %782 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %781, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %780, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %782, align 8
  %783 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %784 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %783, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %784, align 8
  br label %785

785:                                              ; preds = %775, %765
  br label %808

786:                                              ; preds = %759
  %787 = load i32, i32* %9, align 4
  %788 = icmp ne i32 %787, 0
  br i1 %788, label %789, label %799

789:                                              ; preds = %786
  %790 = load i8, i8* %5, align 1
  %791 = zext i8 %790 to i32
  %792 = icmp ne i32 %791, 0
  %793 = zext i1 %792 to i64
  %794 = select i1 %792, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_local_stack_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_stack_comparative
  %795 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %796 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %795, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %794, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %796, align 8
  %797 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %798 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %797, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_stack_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %798, align 8
  br label %807

799:                                              ; preds = %786
  %800 = load i8, i8* %5, align 1
  %801 = zext i8 %800 to i32
  %802 = icmp ne i32 %801, 0
  %803 = zext i1 %802 to i64
  %804 = select i1 %802, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_local_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_bp_comparative
  %805 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %806 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %805, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* %804, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %806, align 8
  br label %807

807:                                              ; preds = %799, %789
  br label %808

808:                                              ; preds = %807, %785
  br label %836

809:                                              ; preds = %756
  %810 = load i32, i32* %7, align 4
  %811 = icmp ne i32 %810, 0
  br i1 %811, label %812, label %826

812:                                              ; preds = %809
  %813 = load i32, i32* %9, align 4
  %814 = icmp ne i32 %813, 0
  br i1 %814, label %815, label %820

815:                                              ; preds = %812
  %816 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %817 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %816, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_stack_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %817, align 8
  %818 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %819 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %818, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up_stack_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %819, align 8
  br label %825

820:                                              ; preds = %812
  %821 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %822 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %821, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_up_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %822, align 8
  %823 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %824 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %823, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_up_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %824, align 8
  br label %825

825:                                              ; preds = %820, %815
  br label %835

826:                                              ; preds = %809
  %827 = load i32, i32* %9, align 4
  %828 = icmp ne i32 %827, 0
  br i1 %828, label %829, label %834

829:                                              ; preds = %826
  %830 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %831 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %830, i32 0, i32 16
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_stack_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %831, align 8
  %832 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %4, align 8
  %833 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %832, i32 0, i32 17
  store double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)* @sc_int_exp_cb_ext_stack_comparative, double (i32, i32, i32, i32, %struct.sc_int_exp_dat*)** %833, align 8
  br label %834

834:                                              ; preds = %829, %826
  br label %835

835:                                              ; preds = %834, %825
  br label %836

836:                                              ; preds = %835, %808
  br label %837

837:                                              ; preds = %836, %755
  br label %838

838:                                              ; preds = %837, %384
  br label %839

839:                                              ; preds = %69, %838, %383
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @init_sc_mb_exp(%struct.vrna_fc_s* noundef %0, %struct.sc_mb_exp_dat* noundef %1) #0 {
  %3 = alloca %struct.vrna_fc_s*, align 8
  %4 = alloca %struct.sc_mb_exp_dat*, align 8
  %5 = alloca i8, align 1
  %6 = alloca %struct.vrna_sc_s*, align 8
  %7 = alloca %struct.vrna_sc_s**, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %3, align 8
  store %struct.sc_mb_exp_dat* %1, %struct.sc_mb_exp_dat** %4, align 8
  %15 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %16 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %19 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %18, i32 0, i32 0
  store i32 %17, i32* %19, align 8
  %20 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %21 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %20, i32 0, i32 1
  store i32 1, i32* %21, align 4
  %22 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %23 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %22, i32 0, i32 17
  %24 = load i32*, i32** %23, align 8
  %25 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %26 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %25, i32 0, i32 3
  store i32* %24, i32** %26, align 8
  %27 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %28 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %27, i32 0, i32 2
  store i32** null, i32*** %28, align 8
  %29 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %30 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %29, i32 0, i32 4
  store double** null, double*** %30, align 8
  %31 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %32 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %31, i32 0, i32 5
  store double*** null, double**** %32, align 8
  %33 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %34 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %33, i32 0, i32 6
  store double* null, double** %34, align 8
  %35 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %36 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %35, i32 0, i32 7
  store double** null, double*** %36, align 8
  %37 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %38 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %37, i32 0, i32 8
  store double** null, double*** %38, align 8
  %39 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %40 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %39, i32 0, i32 9
  store double*** null, double**** %40, align 8
  %41 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %42 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %41, i32 0, i32 15
  store double (i32, i32, i32, i32, i8, i8*)* null, double (i32, i32, i32, i32, i8, i8*)** %42, align 8
  %43 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %44 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %43, i32 0, i32 16
  store i8* null, i8** %44, align 8
  %45 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %46 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %45, i32 0, i32 17
  store double (i32, i32, i32, i32, i8, i8*)** null, double (i32, i32, i32, i32, i8, i8*)*** %46, align 8
  %47 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %48 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %47, i32 0, i32 18
  store i8** null, i8*** %48, align 8
  %49 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %50 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %49, i32 0, i32 10
  store double (i32, i32, %struct.sc_mb_exp_dat*)* null, double (i32, i32, %struct.sc_mb_exp_dat*)** %50, align 8
  %51 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %52 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %51, i32 0, i32 11
  store double (i32, i32, %struct.sc_mb_exp_dat*)* null, double (i32, i32, %struct.sc_mb_exp_dat*)** %52, align 8
  %53 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %54 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %53, i32 0, i32 12
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* null, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %54, align 8
  %55 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %56 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %55, i32 0, i32 13
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* null, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %56, align 8
  %57 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %58 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %57, i32 0, i32 14
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* null, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %58, align 8
  %59 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %60 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %59, i32 0, i32 11
  %61 = load %struct.vrna_hc_s*, %struct.vrna_hc_s** %60, align 8
  %62 = getelementptr inbounds %struct.vrna_hc_s, %struct.vrna_hc_s* %61, i32 0, i32 0
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, 1
  %65 = zext i1 %64 to i64
  %66 = select i1 %64, i32 1, i32 0
  %67 = trunc i32 %66 to i8
  store i8 %67, i8* %5, align 1
  %68 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %69 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %68, i32 0, i32 0
  %70 = load i32, i32* %69, align 8
  switch i32 %70, label %529 [
    i32 0, label %71
    i32 1, label %220
  ]

71:                                               ; preds = %2
  %72 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %73 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %72, i32 0, i32 24
  %74 = bitcast %union.anon.9* %73 to %struct.anon.10*
  %75 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %74, i32 0, i32 5
  %76 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %75, align 8
  store %struct.vrna_sc_s* %76, %struct.vrna_sc_s** %6, align 8
  %77 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %6, align 8
  %78 = icmp ne %struct.vrna_sc_s* %77, null
  br i1 %78, label %79, label %219

79:                                               ; preds = %71
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  %80 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %6, align 8
  %81 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %80, i32 0, i32 4
  %82 = load double**, double*** %81, align 8
  %83 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %84 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %83, i32 0, i32 4
  store double** %82, double*** %84, align 8
  %85 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %6, align 8
  %86 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %85, i32 0, i32 12
  %87 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %86, align 8
  %88 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %89 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %88, i32 0, i32 15
  store double (i32, i32, i32, i32, i8, i8*)* %87, double (i32, i32, i32, i32, i8, i8*)** %89, align 8
  %90 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %6, align 8
  %91 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %90, i32 0, i32 13
  %92 = load i8*, i8** %91, align 8
  %93 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %94 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %93, i32 0, i32 16
  store i8* %92, i8** %94, align 8
  %95 = load i8, i8* %5, align 1
  %96 = icmp ne i8 %95, 0
  br i1 %96, label %97, label %105

97:                                               ; preds = %79
  %98 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %6, align 8
  %99 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %98, i32 0, i32 7
  %100 = bitcast %union.anon.11* %99 to %struct.anon.13*
  %101 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %100, i32 0, i32 1
  %102 = load double**, double*** %101, align 8
  %103 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %104 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %103, i32 0, i32 8
  store double** %102, double*** %104, align 8
  br label %113

105:                                              ; preds = %79
  %106 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %6, align 8
  %107 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %106, i32 0, i32 7
  %108 = bitcast %union.anon.11* %107 to %struct.anon.12*
  %109 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %108, i32 0, i32 1
  %110 = load double*, double** %109, align 8
  %111 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %112 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %111, i32 0, i32 6
  store double* %110, double** %112, align 8
  br label %113

113:                                              ; preds = %105, %97
  %114 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %6, align 8
  %115 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %114, i32 0, i32 4
  %116 = load double**, double*** %115, align 8
  %117 = icmp ne double** %116, null
  br i1 %117, label %118, label %119

118:                                              ; preds = %113
  store i32 1, i32* %8, align 4
  br label %119

119:                                              ; preds = %118, %113
  %120 = load i8, i8* %5, align 1
  %121 = icmp ne i8 %120, 0
  br i1 %121, label %122, label %131

122:                                              ; preds = %119
  %123 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %6, align 8
  %124 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %123, i32 0, i32 7
  %125 = bitcast %union.anon.11* %124 to %struct.anon.13*
  %126 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %125, i32 0, i32 1
  %127 = load double**, double*** %126, align 8
  %128 = icmp ne double** %127, null
  br i1 %128, label %129, label %130

129:                                              ; preds = %122
  store i32 1, i32* %9, align 4
  br label %130

130:                                              ; preds = %129, %122
  br label %140

131:                                              ; preds = %119
  %132 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %6, align 8
  %133 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %132, i32 0, i32 7
  %134 = bitcast %union.anon.11* %133 to %struct.anon.12*
  %135 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %134, i32 0, i32 1
  %136 = load double*, double** %135, align 8
  %137 = icmp ne double* %136, null
  br i1 %137, label %138, label %139

138:                                              ; preds = %131
  store i32 1, i32* %9, align 4
  br label %139

139:                                              ; preds = %138, %131
  br label %140

140:                                              ; preds = %139, %130
  %141 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %6, align 8
  %142 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %141, i32 0, i32 12
  %143 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %142, align 8
  %144 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %143, null
  br i1 %144, label %145, label %146

145:                                              ; preds = %140
  store i32 1, i32* %10, align 4
  br label %146

146:                                              ; preds = %145, %140
  %147 = load i32, i32* %10, align 4
  %148 = icmp ne i32 %147, 0
  br i1 %148, label %149, label %187

149:                                              ; preds = %146
  %150 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %151 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %150, i32 0, i32 14
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_split_cb_user, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %151, align 8
  %152 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %153 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %152, i32 0, i32 12
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_stem_user, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %153, align 8
  %154 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %155 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %154, i32 0, i32 13
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_user, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %155, align 8
  %156 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %157 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %156, i32 0, i32 10
  store double (i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_pair_cb_user, double (i32, i32, %struct.sc_mb_exp_dat*)** %157, align 8
  %158 = load i8, i8* %5, align 1
  %159 = icmp ne i8 %158, 0
  br i1 %159, label %163, label %160

160:                                              ; preds = %149
  %161 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %162 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %161, i32 0, i32 11
  store double (i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_pair_ext_cb_user, double (i32, i32, %struct.sc_mb_exp_dat*)** %162, align 8
  br label %163

163:                                              ; preds = %160, %149
  %164 = load i32, i32* %9, align 4
  %165 = icmp ne i32 %164, 0
  br i1 %165, label %166, label %178

166:                                              ; preds = %163
  %167 = load i8, i8* %5, align 1
  %168 = icmp ne i8 %167, 0
  br i1 %168, label %169, label %172

169:                                              ; preds = %166
  %170 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %171 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %170, i32 0, i32 10
  store double (i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_pair_cb_bp_local_user, double (i32, i32, %struct.sc_mb_exp_dat*)** %171, align 8
  br label %177

172:                                              ; preds = %166
  %173 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %174 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %173, i32 0, i32 10
  store double (i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_pair_cb_bp_user, double (i32, i32, %struct.sc_mb_exp_dat*)** %174, align 8
  %175 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %176 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %175, i32 0, i32 11
  store double (i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_pair_ext_cb_user, double (i32, i32, %struct.sc_mb_exp_dat*)** %176, align 8
  br label %177

177:                                              ; preds = %172, %169
  br label %178

178:                                              ; preds = %177, %163
  %179 = load i32, i32* %8, align 4
  %180 = icmp ne i32 %179, 0
  br i1 %180, label %181, label %186

181:                                              ; preds = %178
  %182 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %183 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %182, i32 0, i32 12
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_stem_up_user, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %183, align 8
  %184 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %185 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %184, i32 0, i32 13
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_up_user, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %185, align 8
  br label %186

186:                                              ; preds = %181, %178
  br label %218

187:                                              ; preds = %146
  %188 = load i32, i32* %9, align 4
  %189 = icmp ne i32 %188, 0
  br i1 %189, label %190, label %208

190:                                              ; preds = %187
  %191 = load i8, i8* %5, align 1
  %192 = icmp ne i8 %191, 0
  br i1 %192, label %193, label %196

193:                                              ; preds = %190
  %194 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %195 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %194, i32 0, i32 10
  store double (i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_pair_cb_bp_local, double (i32, i32, %struct.sc_mb_exp_dat*)** %195, align 8
  br label %199

196:                                              ; preds = %190
  %197 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %198 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %197, i32 0, i32 10
  store double (i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_pair_cb_bp, double (i32, i32, %struct.sc_mb_exp_dat*)** %198, align 8
  br label %199

199:                                              ; preds = %196, %193
  %200 = load i32, i32* %8, align 4
  %201 = icmp ne i32 %200, 0
  br i1 %201, label %202, label %207

202:                                              ; preds = %199
  %203 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %204 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %203, i32 0, i32 12
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_up, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %204, align 8
  %205 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %206 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %205, i32 0, i32 13
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_up, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %206, align 8
  br label %207

207:                                              ; preds = %202, %199
  br label %217

208:                                              ; preds = %187
  %209 = load i32, i32* %8, align 4
  %210 = icmp ne i32 %209, 0
  br i1 %210, label %211, label %216

211:                                              ; preds = %208
  %212 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %213 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %212, i32 0, i32 12
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_up, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %213, align 8
  %214 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %215 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %214, i32 0, i32 13
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_up, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %215, align 8
  br label %216

216:                                              ; preds = %211, %208
  br label %217

217:                                              ; preds = %216, %207
  br label %218

218:                                              ; preds = %217, %186
  br label %219

219:                                              ; preds = %218, %71
  br label %529

220:                                              ; preds = %2
  %221 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %222 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %221, i32 0, i32 24
  %223 = bitcast %union.anon.9* %222 to %struct.anon.14*
  %224 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %223, i32 0, i32 8
  %225 = load i32**, i32*** %224, align 8
  %226 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %227 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %226, i32 0, i32 2
  store i32** %225, i32*** %227, align 8
  %228 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %229 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %228, i32 0, i32 24
  %230 = bitcast %union.anon.9* %229 to %struct.anon.14*
  %231 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %230, i32 0, i32 1
  %232 = load i32, i32* %231, align 8
  %233 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %234 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %233, i32 0, i32 1
  store i32 %232, i32* %234, align 4
  %235 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %236 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %235, i32 0, i32 24
  %237 = bitcast %union.anon.9* %236 to %struct.anon.14*
  %238 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %237, i32 0, i32 12
  %239 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %238, align 8
  store %struct.vrna_sc_s** %239, %struct.vrna_sc_s*** %7, align 8
  %240 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %7, align 8
  %241 = icmp ne %struct.vrna_sc_s** %240, null
  br i1 %241, label %242, label %528

242:                                              ; preds = %220
  store i32 0, i32* %12, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  %243 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %244 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %243, i32 0, i32 24
  %245 = bitcast %union.anon.9* %244 to %struct.anon.14*
  %246 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %245, i32 0, i32 1
  %247 = load i32, i32* %246, align 8
  %248 = zext i32 %247 to i64
  %249 = mul i64 8, %248
  %250 = trunc i64 %249 to i32
  %251 = call i8* @vrna_alloc(i32 noundef %250)
  %252 = bitcast i8* %251 to double***
  %253 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %254 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %253, i32 0, i32 5
  store double*** %252, double**** %254, align 8
  %255 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %256 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %255, i32 0, i32 24
  %257 = bitcast %union.anon.9* %256 to %struct.anon.14*
  %258 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %257, i32 0, i32 1
  %259 = load i32, i32* %258, align 8
  %260 = zext i32 %259 to i64
  %261 = mul i64 8, %260
  %262 = trunc i64 %261 to i32
  %263 = call i8* @vrna_alloc(i32 noundef %262)
  %264 = bitcast i8* %263 to double**
  %265 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %266 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %265, i32 0, i32 7
  store double** %264, double*** %266, align 8
  %267 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %268 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %267, i32 0, i32 24
  %269 = bitcast %union.anon.9* %268 to %struct.anon.14*
  %270 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %269, i32 0, i32 1
  %271 = load i32, i32* %270, align 8
  %272 = zext i32 %271 to i64
  %273 = mul i64 8, %272
  %274 = trunc i64 %273 to i32
  %275 = call i8* @vrna_alloc(i32 noundef %274)
  %276 = bitcast i8* %275 to double***
  %277 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %278 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %277, i32 0, i32 9
  store double*** %276, double**** %278, align 8
  %279 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %280 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %279, i32 0, i32 24
  %281 = bitcast %union.anon.9* %280 to %struct.anon.14*
  %282 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %281, i32 0, i32 1
  %283 = load i32, i32* %282, align 8
  %284 = zext i32 %283 to i64
  %285 = mul i64 8, %284
  %286 = trunc i64 %285 to i32
  %287 = call i8* @vrna_alloc(i32 noundef %286)
  %288 = bitcast i8* %287 to double (i32, i32, i32, i32, i8, i8*)**
  %289 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %290 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %289, i32 0, i32 17
  store double (i32, i32, i32, i32, i8, i8*)** %288, double (i32, i32, i32, i32, i8, i8*)*** %290, align 8
  %291 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %292 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %291, i32 0, i32 24
  %293 = bitcast %union.anon.9* %292 to %struct.anon.14*
  %294 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %293, i32 0, i32 1
  %295 = load i32, i32* %294, align 8
  %296 = zext i32 %295 to i64
  %297 = mul i64 8, %296
  %298 = trunc i64 %297 to i32
  %299 = call i8* @vrna_alloc(i32 noundef %298)
  %300 = bitcast i8* %299 to i8**
  %301 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %302 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %301, i32 0, i32 18
  store i8** %300, i8*** %302, align 8
  store i32 0, i32* %11, align 4
  br label %303

303:                                              ; preds = %452, %242
  %304 = load i32, i32* %11, align 4
  %305 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %306 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %305, i32 0, i32 24
  %307 = bitcast %union.anon.9* %306 to %struct.anon.14*
  %308 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %307, i32 0, i32 1
  %309 = load i32, i32* %308, align 8
  %310 = icmp ult i32 %304, %309
  br i1 %310, label %311, label %455

311:                                              ; preds = %303
  %312 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %7, align 8
  %313 = load i32, i32* %11, align 4
  %314 = zext i32 %313 to i64
  %315 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %312, i64 %314
  %316 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %315, align 8
  %317 = icmp ne %struct.vrna_sc_s* %316, null
  br i1 %317, label %318, label %451

318:                                              ; preds = %311
  %319 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %7, align 8
  %320 = load i32, i32* %11, align 4
  %321 = zext i32 %320 to i64
  %322 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %319, i64 %321
  %323 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %322, align 8
  %324 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %323, i32 0, i32 4
  %325 = load double**, double*** %324, align 8
  %326 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %327 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %326, i32 0, i32 5
  %328 = load double***, double**** %327, align 8
  %329 = load i32, i32* %11, align 4
  %330 = zext i32 %329 to i64
  %331 = getelementptr inbounds double**, double*** %328, i64 %330
  store double** %325, double*** %331, align 8
  %332 = load i8, i8* %5, align 1
  %333 = zext i8 %332 to i32
  %334 = icmp ne i32 %333, 0
  br i1 %334, label %335, label %336

335:                                              ; preds = %318
  br label %346

336:                                              ; preds = %318
  %337 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %7, align 8
  %338 = load i32, i32* %11, align 4
  %339 = zext i32 %338 to i64
  %340 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %337, i64 %339
  %341 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %340, align 8
  %342 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %341, i32 0, i32 7
  %343 = bitcast %union.anon.11* %342 to %struct.anon.12*
  %344 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %343, i32 0, i32 1
  %345 = load double*, double** %344, align 8
  br label %346

346:                                              ; preds = %336, %335
  %347 = phi double* [ null, %335 ], [ %345, %336 ]
  %348 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %349 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %348, i32 0, i32 7
  %350 = load double**, double*** %349, align 8
  %351 = load i32, i32* %11, align 4
  %352 = zext i32 %351 to i64
  %353 = getelementptr inbounds double*, double** %350, i64 %352
  store double* %347, double** %353, align 8
  %354 = load i8, i8* %5, align 1
  %355 = zext i8 %354 to i32
  %356 = icmp ne i32 %355, 0
  br i1 %356, label %357, label %367

357:                                              ; preds = %346
  %358 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %7, align 8
  %359 = load i32, i32* %11, align 4
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %358, i64 %360
  %362 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %361, align 8
  %363 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %362, i32 0, i32 7
  %364 = bitcast %union.anon.11* %363 to %struct.anon.13*
  %365 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %364, i32 0, i32 1
  %366 = load double**, double*** %365, align 8
  br label %368

367:                                              ; preds = %346
  br label %368

368:                                              ; preds = %367, %357
  %369 = phi double** [ %366, %357 ], [ null, %367 ]
  %370 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %371 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %370, i32 0, i32 9
  %372 = load double***, double**** %371, align 8
  %373 = load i32, i32* %11, align 4
  %374 = zext i32 %373 to i64
  %375 = getelementptr inbounds double**, double*** %372, i64 %374
  store double** %369, double*** %375, align 8
  %376 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %7, align 8
  %377 = load i32, i32* %11, align 4
  %378 = zext i32 %377 to i64
  %379 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %376, i64 %378
  %380 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %379, align 8
  %381 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %380, i32 0, i32 12
  %382 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %381, align 8
  %383 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %384 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %383, i32 0, i32 17
  %385 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %384, align 8
  %386 = load i32, i32* %11, align 4
  %387 = zext i32 %386 to i64
  %388 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %385, i64 %387
  store double (i32, i32, i32, i32, i8, i8*)* %382, double (i32, i32, i32, i32, i8, i8*)** %388, align 8
  %389 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %7, align 8
  %390 = load i32, i32* %11, align 4
  %391 = zext i32 %390 to i64
  %392 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %389, i64 %391
  %393 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %392, align 8
  %394 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %393, i32 0, i32 13
  %395 = load i8*, i8** %394, align 8
  %396 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %397 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %396, i32 0, i32 18
  %398 = load i8**, i8*** %397, align 8
  %399 = load i32, i32* %11, align 4
  %400 = zext i32 %399 to i64
  %401 = getelementptr inbounds i8*, i8** %398, i64 %400
  store i8* %395, i8** %401, align 8
  %402 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %7, align 8
  %403 = load i32, i32* %11, align 4
  %404 = zext i32 %403 to i64
  %405 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %402, i64 %404
  %406 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %405, align 8
  %407 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %406, i32 0, i32 4
  %408 = load double**, double*** %407, align 8
  %409 = icmp ne double** %408, null
  br i1 %409, label %410, label %411

410:                                              ; preds = %368
  store i32 1, i32* %12, align 4
  br label %411

411:                                              ; preds = %410, %368
  %412 = load i8, i8* %5, align 1
  %413 = icmp ne i8 %412, 0
  br i1 %413, label %414, label %427

414:                                              ; preds = %411
  %415 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %7, align 8
  %416 = load i32, i32* %11, align 4
  %417 = zext i32 %416 to i64
  %418 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %415, i64 %417
  %419 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %418, align 8
  %420 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %419, i32 0, i32 7
  %421 = bitcast %union.anon.11* %420 to %struct.anon.13*
  %422 = getelementptr inbounds %struct.anon.13, %struct.anon.13* %421, i32 0, i32 1
  %423 = load double**, double*** %422, align 8
  %424 = icmp ne double** %423, null
  br i1 %424, label %425, label %426

425:                                              ; preds = %414
  store i32 1, i32* %13, align 4
  br label %426

426:                                              ; preds = %425, %414
  br label %440

427:                                              ; preds = %411
  %428 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %7, align 8
  %429 = load i32, i32* %11, align 4
  %430 = zext i32 %429 to i64
  %431 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %428, i64 %430
  %432 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %431, align 8
  %433 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %432, i32 0, i32 7
  %434 = bitcast %union.anon.11* %433 to %struct.anon.12*
  %435 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %434, i32 0, i32 1
  %436 = load double*, double** %435, align 8
  %437 = icmp ne double* %436, null
  br i1 %437, label %438, label %439

438:                                              ; preds = %427
  store i32 1, i32* %13, align 4
  br label %439

439:                                              ; preds = %438, %427
  br label %440

440:                                              ; preds = %439, %426
  %441 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %7, align 8
  %442 = load i32, i32* %11, align 4
  %443 = zext i32 %442 to i64
  %444 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %441, i64 %443
  %445 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %444, align 8
  %446 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %445, i32 0, i32 12
  %447 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %446, align 8
  %448 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %447, null
  br i1 %448, label %449, label %450

449:                                              ; preds = %440
  store i32 1, i32* %14, align 4
  br label %450

450:                                              ; preds = %449, %440
  br label %451

451:                                              ; preds = %450, %311
  br label %452

452:                                              ; preds = %451
  %453 = load i32, i32* %11, align 4
  %454 = add i32 %453, 1
  store i32 %454, i32* %11, align 4
  br label %303, !llvm.loop !125

455:                                              ; preds = %303
  %456 = load i32, i32* %14, align 4
  %457 = icmp ne i32 %456, 0
  br i1 %457, label %458, label %496

458:                                              ; preds = %455
  %459 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %460 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %459, i32 0, i32 14
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_split_cb_user_comparative, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %460, align 8
  %461 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %462 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %461, i32 0, i32 12
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_stem_user_comparative, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %462, align 8
  %463 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %464 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %463, i32 0, i32 13
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_user_comparative, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %464, align 8
  %465 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %466 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %465, i32 0, i32 10
  store double (i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_pair_cb_user_comparative, double (i32, i32, %struct.sc_mb_exp_dat*)** %466, align 8
  %467 = load i8, i8* %5, align 1
  %468 = icmp ne i8 %467, 0
  br i1 %468, label %472, label %469

469:                                              ; preds = %458
  %470 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %471 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %470, i32 0, i32 11
  store double (i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_pair_ext_cb_user_comparative, double (i32, i32, %struct.sc_mb_exp_dat*)** %471, align 8
  br label %472

472:                                              ; preds = %469, %458
  %473 = load i32, i32* %13, align 4
  %474 = icmp ne i32 %473, 0
  br i1 %474, label %475, label %487

475:                                              ; preds = %472
  %476 = load i8, i8* %5, align 1
  %477 = icmp ne i8 %476, 0
  br i1 %477, label %478, label %481

478:                                              ; preds = %475
  %479 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %480 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %479, i32 0, i32 10
  store double (i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_pair_cb_bp_local_user_comparative, double (i32, i32, %struct.sc_mb_exp_dat*)** %480, align 8
  br label %486

481:                                              ; preds = %475
  %482 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %483 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %482, i32 0, i32 10
  store double (i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_pair_cb_bp_user_comparative, double (i32, i32, %struct.sc_mb_exp_dat*)** %483, align 8
  %484 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %485 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %484, i32 0, i32 11
  store double (i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_pair_ext_cb_user_comparative, double (i32, i32, %struct.sc_mb_exp_dat*)** %485, align 8
  br label %486

486:                                              ; preds = %481, %478
  br label %487

487:                                              ; preds = %486, %472
  %488 = load i32, i32* %12, align 4
  %489 = icmp ne i32 %488, 0
  br i1 %489, label %490, label %495

490:                                              ; preds = %487
  %491 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %492 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %491, i32 0, i32 12
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_stem_up_user_comparative, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %492, align 8
  %493 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %494 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %493, i32 0, i32 13
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_up_user_comparative, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %494, align 8
  br label %495

495:                                              ; preds = %490, %487
  br label %527

496:                                              ; preds = %455
  %497 = load i32, i32* %13, align 4
  %498 = icmp ne i32 %497, 0
  br i1 %498, label %499, label %517

499:                                              ; preds = %496
  %500 = load i8, i8* %5, align 1
  %501 = icmp ne i8 %500, 0
  br i1 %501, label %502, label %505

502:                                              ; preds = %499
  %503 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %504 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %503, i32 0, i32 10
  store double (i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_pair_cb_bp_local_comparative, double (i32, i32, %struct.sc_mb_exp_dat*)** %504, align 8
  br label %508

505:                                              ; preds = %499
  %506 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %507 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %506, i32 0, i32 10
  store double (i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_pair_cb_bp_comparative, double (i32, i32, %struct.sc_mb_exp_dat*)** %507, align 8
  br label %508

508:                                              ; preds = %505, %502
  %509 = load i32, i32* %12, align 4
  %510 = icmp ne i32 %509, 0
  br i1 %510, label %511, label %516

511:                                              ; preds = %508
  %512 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %513 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %512, i32 0, i32 12
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_up_comparative, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %513, align 8
  %514 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %515 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %514, i32 0, i32 13
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_up_comparative, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %515, align 8
  br label %516

516:                                              ; preds = %511, %508
  br label %526

517:                                              ; preds = %496
  %518 = load i32, i32* %12, align 4
  %519 = icmp ne i32 %518, 0
  br i1 %519, label %520, label %525

520:                                              ; preds = %517
  %521 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %522 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %521, i32 0, i32 12
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_up_comparative, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %522, align 8
  %523 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %4, align 8
  %524 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %523, i32 0, i32 13
  store double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)* @sc_mb_exp_red_cb_up_comparative, double (i32, i32, i32, i32, %struct.sc_mb_exp_dat*)** %524, align 8
  br label %525

525:                                              ; preds = %520, %517
  br label %526

526:                                              ; preds = %525, %516
  br label %527

527:                                              ; preds = %526, %495
  br label %528

528:                                              ; preds = %527, %220
  br label %529

529:                                              ; preds = %2, %528, %219
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_ext_cb_def_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8 noundef zeroext %4, i8* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i8, align 1
  %14 = alloca %struct.hc_ext_def_dat*, align 8
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8 %4, i8* %11, align 1
  store i8* %5, i8** %12, align 8
  %15 = load i8*, i8** %12, align 8
  %16 = bitcast i8* %15 to %struct.hc_ext_def_dat*
  store %struct.hc_ext_def_dat* %16, %struct.hc_ext_def_dat** %14, align 8
  %17 = load i32, i32* %7, align 4
  %18 = load i32, i32* %8, align 4
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %10, align 4
  %21 = load i8, i8* %11, align 1
  %22 = load i8*, i8** %12, align 8
  %23 = call zeroext i8 @hc_ext_cb_def(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, i8 noundef zeroext %21, i8* noundef %22)
  store i8 %23, i8* %13, align 1
  %24 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %14, align 8
  %25 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %24, i32 0, i32 6
  %26 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %25, align 8
  %27 = load i32, i32* %7, align 4
  %28 = load i32, i32* %8, align 4
  %29 = load i32, i32* %9, align 4
  %30 = load i32, i32* %10, align 4
  %31 = load i8, i8* %11, align 1
  %32 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %14, align 8
  %33 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %32, i32 0, i32 5
  %34 = load i8*, i8** %33, align 8
  %35 = call zeroext i8 %26(i32 noundef %27, i32 noundef %28, i32 noundef %29, i32 noundef %30, i8 noundef zeroext %31, i8* noundef %34)
  %36 = zext i8 %35 to i32
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %6
  %39 = load i8, i8* %13, align 1
  %40 = zext i8 %39 to i32
  br label %42

41:                                               ; preds = %6
  br label %42

42:                                               ; preds = %41, %38
  %43 = phi i32 [ %40, %38 ], [ 0, %41 ]
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %13, align 1
  %45 = load i8, i8* %13, align 1
  ret i8 %45
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_ext_cb_def_sn_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8 noundef zeroext %4, i8* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i8, align 1
  %14 = alloca %struct.hc_ext_def_dat*, align 8
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8 %4, i8* %11, align 1
  store i8* %5, i8** %12, align 8
  %15 = load i8*, i8** %12, align 8
  %16 = bitcast i8* %15 to %struct.hc_ext_def_dat*
  store %struct.hc_ext_def_dat* %16, %struct.hc_ext_def_dat** %14, align 8
  %17 = load i32, i32* %7, align 4
  %18 = load i32, i32* %8, align 4
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %10, align 4
  %21 = load i8, i8* %11, align 1
  %22 = load i8*, i8** %12, align 8
  %23 = call zeroext i8 @hc_ext_cb_def(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, i8 noundef zeroext %21, i8* noundef %22)
  store i8 %23, i8* %13, align 1
  %24 = load i32, i32* %7, align 4
  %25 = load i32, i32* %8, align 4
  %26 = load i32, i32* %9, align 4
  %27 = load i32, i32* %10, align 4
  %28 = load i8, i8* %11, align 1
  %29 = load i8*, i8** %12, align 8
  %30 = call zeroext i8 @hc_ext_cb_sn(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, i8 noundef zeroext %28, i8* noundef %29)
  %31 = zext i8 %30 to i32
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %6
  %34 = load i8, i8* %13, align 1
  %35 = zext i8 %34 to i32
  br label %37

36:                                               ; preds = %6
  br label %37

37:                                               ; preds = %36, %33
  %38 = phi i32 [ %35, %33 ], [ 0, %36 ]
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %13, align 1
  %40 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %14, align 8
  %41 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %40, i32 0, i32 6
  %42 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %41, align 8
  %43 = load i32, i32* %7, align 4
  %44 = load i32, i32* %8, align 4
  %45 = load i32, i32* %9, align 4
  %46 = load i32, i32* %10, align 4
  %47 = load i8, i8* %11, align 1
  %48 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %14, align 8
  %49 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %48, i32 0, i32 5
  %50 = load i8*, i8** %49, align 8
  %51 = call zeroext i8 %42(i32 noundef %43, i32 noundef %44, i32 noundef %45, i32 noundef %46, i8 noundef zeroext %47, i8* noundef %50)
  %52 = zext i8 %51 to i32
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %37
  %55 = load i8, i8* %13, align 1
  %56 = zext i8 %55 to i32
  br label %58

57:                                               ; preds = %37
  br label %58

58:                                               ; preds = %57, %54
  %59 = phi i32 [ %56, %54 ], [ 0, %57 ]
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %13, align 1
  %61 = load i8, i8* %13, align 1
  ret i8 %61
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_ext_cb_def(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8 noundef zeroext %4, i8* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i32, align 4
  %17 = alloca %struct.hc_ext_def_dat*, align 8
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8 %4, i8* %11, align 1
  store i8* %5, i8** %12, align 8
  %18 = load i8*, i8** %12, align 8
  %19 = bitcast i8* %18 to %struct.hc_ext_def_dat*
  store %struct.hc_ext_def_dat* %19, %struct.hc_ext_def_dat** %17, align 8
  store i8 0, i8* %15, align 1
  %20 = load i32, i32* %9, align 4
  %21 = load i32, i32* %7, align 4
  %22 = sub nsw i32 %20, %21
  store i32 %22, i32* %13, align 4
  %23 = load i32, i32* %8, align 4
  %24 = load i32, i32* %10, align 4
  %25 = sub nsw i32 %23, %24
  store i32 %25, i32* %14, align 4
  %26 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %27 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %26, i32 0, i32 0
  %28 = load i32, i32* %27, align 8
  store i32 %28, i32* %16, align 4
  %29 = load i8, i8* %11, align 1
  %30 = zext i8 %29 to i32
  switch i32 %30, label %347 [
    i32 18, label %31
    i32 16, label %72
    i32 19, label %113
    i32 20, label %165
    i32 15, label %217
    i32 14, label %237
    i32 12, label %283
    i32 13, label %313
    i32 17, label %330
  ]

31:                                               ; preds = %6
  %32 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %33 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %32, i32 0, i32 1
  %34 = load i8*, i8** %33, align 8
  %35 = load i32, i32* %16, align 4
  %36 = load i32, i32* %8, align 4
  %37 = mul i32 %35, %36
  %38 = load i32, i32* %10, align 4
  %39 = add i32 %37, %38
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %34, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = and i32 %43, 1
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %71

46:                                               ; preds = %31
  store i8 1, i8* %15, align 1
  %47 = load i32, i32* %7, align 4
  %48 = load i32, i32* %10, align 4
  %49 = icmp ne i32 %47, %48
  br i1 %49, label %50, label %70

50:                                               ; preds = %46
  %51 = load i32, i32* %10, align 4
  %52 = load i32, i32* %9, align 4
  %53 = sub nsw i32 %51, %52
  %54 = sub nsw i32 %53, 1
  store i32 %54, i32* %13, align 4
  %55 = load i32, i32* %13, align 4
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %57, label %69

57:                                               ; preds = %50
  %58 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %59 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %58, i32 0, i32 4
  %60 = load i32*, i32** %59, align 8
  %61 = load i32, i32* %9, align 4
  %62 = add nsw i32 %61, 1
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %60, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = load i32, i32* %13, align 4
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %68, label %69

68:                                               ; preds = %57
  store i8 0, i8* %15, align 1
  br label %69

69:                                               ; preds = %68, %57, %50
  br label %70

70:                                               ; preds = %69, %46
  br label %71

71:                                               ; preds = %70, %31
  br label %350

72:                                               ; preds = %6
  %73 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %74 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %73, i32 0, i32 1
  %75 = load i8*, i8** %74, align 8
  %76 = load i32, i32* %16, align 4
  %77 = load i32, i32* %9, align 4
  %78 = mul i32 %76, %77
  %79 = load i32, i32* %7, align 4
  %80 = add i32 %78, %79
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %75, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = and i32 %84, 1
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %112

87:                                               ; preds = %72
  store i8 1, i8* %15, align 1
  %88 = load i32, i32* %7, align 4
  %89 = load i32, i32* %10, align 4
  %90 = icmp ne i32 %88, %89
  br i1 %90, label %91, label %111

91:                                               ; preds = %87
  %92 = load i32, i32* %10, align 4
  %93 = load i32, i32* %9, align 4
  %94 = sub nsw i32 %92, %93
  %95 = sub nsw i32 %94, 1
  store i32 %95, i32* %13, align 4
  %96 = load i32, i32* %13, align 4
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %110

98:                                               ; preds = %91
  %99 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %100 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %99, i32 0, i32 4
  %101 = load i32*, i32** %100, align 8
  %102 = load i32, i32* %9, align 4
  %103 = add nsw i32 %102, 1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i32, i32* %101, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = load i32, i32* %13, align 4
  %108 = icmp slt i32 %106, %107
  br i1 %108, label %109, label %110

109:                                              ; preds = %98
  store i8 0, i8* %15, align 1
  br label %110

110:                                              ; preds = %109, %98, %91
  br label %111

111:                                              ; preds = %110, %87
  br label %112

112:                                              ; preds = %111, %72
  br label %350

113:                                              ; preds = %6
  %114 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %115 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %114, i32 0, i32 1
  %116 = load i8*, i8** %115, align 8
  %117 = load i32, i32* %16, align 4
  %118 = load i32, i32* %8, align 4
  %119 = sub nsw i32 %118, 1
  %120 = mul i32 %117, %119
  %121 = load i32, i32* %10, align 4
  %122 = add i32 %120, %121
  %123 = zext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %116, i64 %123
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = and i32 %126, 1
  %128 = icmp ne i32 %127, 0
  br i1 %128, label %129, label %164

129:                                              ; preds = %113
  store i8 1, i8* %15, align 1
  %130 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %131 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %130, i32 0, i32 4
  %132 = load i32*, i32** %131, align 8
  %133 = load i32, i32* %8, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i32, i32* %132, i64 %134
  %136 = load i32, i32* %135, align 4
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %139

138:                                              ; preds = %129
  store i8 0, i8* %15, align 1
  br label %139

139:                                              ; preds = %138, %129
  %140 = load i32, i32* %7, align 4
  %141 = load i32, i32* %10, align 4
  %142 = icmp ne i32 %140, %141
  br i1 %142, label %143, label %163

143:                                              ; preds = %139
  %144 = load i32, i32* %10, align 4
  %145 = load i32, i32* %9, align 4
  %146 = sub nsw i32 %144, %145
  %147 = sub nsw i32 %146, 1
  store i32 %147, i32* %13, align 4
  %148 = load i32, i32* %13, align 4
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %150, label %162

150:                                              ; preds = %143
  %151 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %152 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %151, i32 0, i32 4
  %153 = load i32*, i32** %152, align 8
  %154 = load i32, i32* %9, align 4
  %155 = add nsw i32 %154, 1
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i32, i32* %153, i64 %156
  %158 = load i32, i32* %157, align 4
  %159 = load i32, i32* %13, align 4
  %160 = icmp slt i32 %158, %159
  br i1 %160, label %161, label %162

161:                                              ; preds = %150
  store i8 0, i8* %15, align 1
  br label %162

162:                                              ; preds = %161, %150, %143
  br label %163

163:                                              ; preds = %162, %139
  br label %164

164:                                              ; preds = %163, %113
  br label %350

165:                                              ; preds = %6
  %166 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %167 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %166, i32 0, i32 1
  %168 = load i8*, i8** %167, align 8
  %169 = load i32, i32* %16, align 4
  %170 = load i32, i32* %9, align 4
  %171 = mul i32 %169, %170
  %172 = load i32, i32* %7, align 4
  %173 = add i32 %171, %172
  %174 = add i32 %173, 1
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %168, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = and i32 %178, 1
  %180 = icmp ne i32 %179, 0
  br i1 %180, label %181, label %216

181:                                              ; preds = %165
  store i8 1, i8* %15, align 1
  %182 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %183 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %182, i32 0, i32 4
  %184 = load i32*, i32** %183, align 8
  %185 = load i32, i32* %7, align 4
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i32, i32* %184, i64 %186
  %188 = load i32, i32* %187, align 4
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %191

190:                                              ; preds = %181
  store i8 0, i8* %15, align 1
  br label %191

191:                                              ; preds = %190, %181
  %192 = load i32, i32* %8, align 4
  %193 = load i32, i32* %9, align 4
  %194 = icmp ne i32 %192, %193
  br i1 %194, label %195, label %215

195:                                              ; preds = %191
  %196 = load i32, i32* %10, align 4
  %197 = load i32, i32* %9, align 4
  %198 = sub nsw i32 %196, %197
  %199 = sub nsw i32 %198, 1
  store i32 %199, i32* %14, align 4
  %200 = load i32, i32* %14, align 4
  %201 = icmp ne i32 %200, 0
  br i1 %201, label %202, label %214

202:                                              ; preds = %195
  %203 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %204 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %203, i32 0, i32 4
  %205 = load i32*, i32** %204, align 8
  %206 = load i32, i32* %9, align 4
  %207 = add nsw i32 %206, 1
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i32, i32* %205, i64 %208
  %210 = load i32, i32* %209, align 4
  %211 = load i32, i32* %14, align 4
  %212 = icmp slt i32 %210, %211
  br i1 %212, label %213, label %214

213:                                              ; preds = %202
  store i8 0, i8* %15, align 1
  br label %214

214:                                              ; preds = %213, %202, %195
  br label %215

215:                                              ; preds = %214, %191
  br label %216

216:                                              ; preds = %215, %165
  br label %350

217:                                              ; preds = %6
  store i8 1, i8* %15, align 1
  %218 = load i32, i32* %10, align 4
  %219 = load i32, i32* %9, align 4
  %220 = sub nsw i32 %218, %219
  %221 = sub nsw i32 %220, 1
  store i32 %221, i32* %13, align 4
  %222 = load i32, i32* %13, align 4
  %223 = icmp ne i32 %222, 0
  br i1 %223, label %224, label %236

224:                                              ; preds = %217
  %225 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %226 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %225, i32 0, i32 4
  %227 = load i32*, i32** %226, align 8
  %228 = load i32, i32* %9, align 4
  %229 = add nsw i32 %228, 1
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds i32, i32* %227, i64 %230
  %232 = load i32, i32* %231, align 4
  %233 = load i32, i32* %13, align 4
  %234 = icmp slt i32 %232, %233
  br i1 %234, label %235, label %236

235:                                              ; preds = %224
  store i8 0, i8* %15, align 1
  br label %236

236:                                              ; preds = %235, %224, %217
  br label %350

237:                                              ; preds = %6
  %238 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %239 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %238, i32 0, i32 1
  %240 = load i8*, i8** %239, align 8
  %241 = load i32, i32* %16, align 4
  %242 = load i32, i32* %9, align 4
  %243 = mul i32 %241, %242
  %244 = load i32, i32* %10, align 4
  %245 = add i32 %243, %244
  %246 = zext i32 %245 to i64
  %247 = getelementptr inbounds i8, i8* %240, i64 %246
  %248 = load i8, i8* %247, align 1
  %249 = zext i8 %248 to i32
  %250 = and i32 %249, 1
  %251 = icmp ne i32 %250, 0
  br i1 %251, label %252, label %282

252:                                              ; preds = %237
  store i8 1, i8* %15, align 1
  %253 = load i32, i32* %13, align 4
  %254 = icmp ne i32 %253, 0
  br i1 %254, label %255, label %266

255:                                              ; preds = %252
  %256 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %257 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %256, i32 0, i32 4
  %258 = load i32*, i32** %257, align 8
  %259 = load i32, i32* %7, align 4
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds i32, i32* %258, i64 %260
  %262 = load i32, i32* %261, align 4
  %263 = load i32, i32* %13, align 4
  %264 = icmp slt i32 %262, %263
  br i1 %264, label %265, label %266

265:                                              ; preds = %255
  store i8 0, i8* %15, align 1
  br label %266

266:                                              ; preds = %265, %255, %252
  %267 = load i32, i32* %14, align 4
  %268 = icmp ne i32 %267, 0
  br i1 %268, label %269, label %281

269:                                              ; preds = %266
  %270 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %271 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %270, i32 0, i32 4
  %272 = load i32*, i32** %271, align 8
  %273 = load i32, i32* %10, align 4
  %274 = add nsw i32 %273, 1
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i32, i32* %272, i64 %275
  %277 = load i32, i32* %276, align 4
  %278 = load i32, i32* %14, align 4
  %279 = icmp slt i32 %277, %278
  br i1 %279, label %280, label %281

280:                                              ; preds = %269
  store i8 0, i8* %15, align 1
  br label %281

281:                                              ; preds = %280, %269, %266
  br label %282

282:                                              ; preds = %281, %237
  br label %350

283:                                              ; preds = %6
  store i8 1, i8* %15, align 1
  %284 = load i32, i32* %13, align 4
  %285 = icmp ne i32 %284, 0
  br i1 %285, label %286, label %297

286:                                              ; preds = %283
  %287 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %288 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %287, i32 0, i32 4
  %289 = load i32*, i32** %288, align 8
  %290 = load i32, i32* %7, align 4
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds i32, i32* %289, i64 %291
  %293 = load i32, i32* %292, align 4
  %294 = load i32, i32* %13, align 4
  %295 = icmp slt i32 %293, %294
  br i1 %295, label %296, label %297

296:                                              ; preds = %286
  store i8 0, i8* %15, align 1
  br label %297

297:                                              ; preds = %296, %286, %283
  %298 = load i32, i32* %14, align 4
  %299 = icmp ne i32 %298, 0
  br i1 %299, label %300, label %312

300:                                              ; preds = %297
  %301 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %302 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %301, i32 0, i32 4
  %303 = load i32*, i32** %302, align 8
  %304 = load i32, i32* %10, align 4
  %305 = add nsw i32 %304, 1
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i32, i32* %303, i64 %306
  %308 = load i32, i32* %307, align 4
  %309 = load i32, i32* %14, align 4
  %310 = icmp slt i32 %308, %309
  br i1 %310, label %311, label %312

311:                                              ; preds = %300
  store i8 0, i8* %15, align 1
  br label %312

312:                                              ; preds = %311, %300, %297
  br label %350

313:                                              ; preds = %6
  %314 = load i32, i32* %8, align 4
  %315 = load i32, i32* %7, align 4
  %316 = sub nsw i32 %314, %315
  %317 = add nsw i32 %316, 1
  store i32 %317, i32* %13, align 4
  %318 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %319 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %318, i32 0, i32 4
  %320 = load i32*, i32** %319, align 8
  %321 = load i32, i32* %7, align 4
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds i32, i32* %320, i64 %322
  %324 = load i32, i32* %323, align 4
  %325 = load i32, i32* %13, align 4
  %326 = icmp sge i32 %324, %325
  %327 = zext i1 %326 to i64
  %328 = select i1 %326, i32 1, i32 0
  %329 = trunc i32 %328 to i8
  store i8 %329, i8* %15, align 1
  br label %350

330:                                              ; preds = %6
  %331 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %17, align 8
  %332 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %331, i32 0, i32 1
  %333 = load i8*, i8** %332, align 8
  %334 = load i32, i32* %16, align 4
  %335 = load i32, i32* %9, align 4
  %336 = mul i32 %334, %335
  %337 = load i32, i32* %10, align 4
  %338 = add i32 %336, %337
  %339 = zext i32 %338 to i64
  %340 = getelementptr inbounds i8, i8* %333, i64 %339
  %341 = load i8, i8* %340, align 1
  %342 = zext i8 %341 to i32
  %343 = and i32 %342, 1
  %344 = icmp ne i32 %343, 0
  br i1 %344, label %345, label %346

345:                                              ; preds = %330
  store i8 1, i8* %15, align 1
  br label %346

346:                                              ; preds = %345, %330
  br label %350

347:                                              ; preds = %6
  %348 = load i8, i8* %11, align 1
  %349 = zext i8 %348 to i32
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([54 x i8], [54 x i8]* @.str.7, i64 0, i64 0), i32 noundef %349)
  br label %350

350:                                              ; preds = %347, %346, %313, %312, %282, %236, %216, %164, %112, %71
  %351 = load i8, i8* %15, align 1
  ret i8 %351
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_ext_cb_def_sn(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8 noundef zeroext %4, i8* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i8, align 1
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8 %4, i8* %11, align 1
  store i8* %5, i8** %12, align 8
  %14 = load i32, i32* %7, align 4
  %15 = load i32, i32* %8, align 4
  %16 = load i32, i32* %9, align 4
  %17 = load i32, i32* %10, align 4
  %18 = load i8, i8* %11, align 1
  %19 = load i8*, i8** %12, align 8
  %20 = call zeroext i8 @hc_ext_cb_def(i32 noundef %14, i32 noundef %15, i32 noundef %16, i32 noundef %17, i8 noundef zeroext %18, i8* noundef %19)
  store i8 %20, i8* %13, align 1
  %21 = load i32, i32* %7, align 4
  %22 = load i32, i32* %8, align 4
  %23 = load i32, i32* %9, align 4
  %24 = load i32, i32* %10, align 4
  %25 = load i8, i8* %11, align 1
  %26 = load i8*, i8** %12, align 8
  %27 = call zeroext i8 @hc_ext_cb_sn(i32 noundef %21, i32 noundef %22, i32 noundef %23, i32 noundef %24, i8 noundef zeroext %25, i8* noundef %26)
  %28 = zext i8 %27 to i32
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %6
  %31 = load i8, i8* %13, align 1
  %32 = zext i8 %31 to i32
  br label %34

33:                                               ; preds = %6
  br label %34

34:                                               ; preds = %33, %30
  %35 = phi i32 [ %32, %30 ], [ 0, %33 ]
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %13, align 1
  %37 = load i8, i8* %13, align 1
  ret i8 %37
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_ext_cb_sn(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8 noundef zeroext %4, i8* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.hc_ext_def_dat*, align 8
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8 %4, i8* %11, align 1
  store i8* %5, i8** %12, align 8
  %16 = load i8*, i8** %12, align 8
  %17 = bitcast i8* %16 to %struct.hc_ext_def_dat*
  store %struct.hc_ext_def_dat* %17, %struct.hc_ext_def_dat** %15, align 8
  %18 = load %struct.hc_ext_def_dat*, %struct.hc_ext_def_dat** %15, align 8
  %19 = getelementptr inbounds %struct.hc_ext_def_dat, %struct.hc_ext_def_dat* %18, i32 0, i32 3
  %20 = load i32*, i32** %19, align 8
  store i32* %20, i32** %13, align 8
  store i8 0, i8* %14, align 1
  %21 = load i8, i8* %11, align 1
  %22 = zext i8 %21 to i32
  switch i32 %22, label %169 [
    i32 19, label %23
    i32 20, label %51
    i32 18, label %79
    i32 16, label %79
    i32 15, label %79
    i32 14, label %93
    i32 12, label %93
    i32 13, label %119
    i32 17, label %133
  ]

23:                                               ; preds = %6
  %24 = load i32*, i32** %13, align 8
  %25 = load i32, i32* %8, align 4
  %26 = sub nsw i32 %25, 1
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i32, i32* %24, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = load i32*, i32** %13, align 8
  %31 = load i32, i32* %8, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = icmp ne i32 %29, %34
  br i1 %35, label %36, label %37

36:                                               ; preds = %23
  br label %172

37:                                               ; preds = %23
  %38 = load i32*, i32** %13, align 8
  %39 = load i32, i32* %9, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i32, i32* %38, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = load i32*, i32** %13, align 8
  %44 = load i32, i32* %10, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, i32* %43, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %42, %47
  br i1 %48, label %49, label %50

49:                                               ; preds = %37
  store i8 1, i8* %14, align 1
  br label %50

50:                                               ; preds = %49, %37
  br label %172

51:                                               ; preds = %6
  %52 = load i32*, i32** %13, align 8
  %53 = load i32, i32* %7, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i32, i32* %52, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = load i32*, i32** %13, align 8
  %58 = load i32, i32* %7, align 4
  %59 = add nsw i32 %58, 1
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i32, i32* %57, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = icmp ne i32 %56, %62
  br i1 %63, label %64, label %65

64:                                               ; preds = %51
  br label %172

65:                                               ; preds = %51
  %66 = load i32*, i32** %13, align 8
  %67 = load i32, i32* %9, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i32, i32* %66, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = load i32*, i32** %13, align 8
  %72 = load i32, i32* %10, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i32, i32* %71, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = icmp eq i32 %70, %75
  br i1 %76, label %77, label %78

77:                                               ; preds = %65
  store i8 1, i8* %14, align 1
  br label %78

78:                                               ; preds = %77, %65
  br label %172

79:                                               ; preds = %6, %6, %6
  %80 = load i32*, i32** %13, align 8
  %81 = load i32, i32* %9, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i32, i32* %80, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = load i32*, i32** %13, align 8
  %86 = load i32, i32* %10, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i32, i32* %85, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = icmp eq i32 %84, %89
  br i1 %90, label %91, label %92

91:                                               ; preds = %79
  store i8 1, i8* %14, align 1
  br label %92

92:                                               ; preds = %91, %79
  br label %172

93:                                               ; preds = %6, %6
  %94 = load i32*, i32** %13, align 8
  %95 = load i32, i32* %7, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i32, i32* %94, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = load i32*, i32** %13, align 8
  %100 = load i32, i32* %9, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i32, i32* %99, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %98, %103
  br i1 %104, label %105, label %118

105:                                              ; preds = %93
  %106 = load i32*, i32** %13, align 8
  %107 = load i32, i32* %10, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32, i32* %106, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = load i32*, i32** %13, align 8
  %112 = load i32, i32* %8, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i32, i32* %111, i64 %113
  %115 = load i32, i32* %114, align 4
  %116 = icmp eq i32 %110, %115
  br i1 %116, label %117, label %118

117:                                              ; preds = %105
  store i8 1, i8* %14, align 1
  br label %118

118:                                              ; preds = %117, %105, %93
  br label %172

119:                                              ; preds = %6
  %120 = load i32*, i32** %13, align 8
  %121 = load i32, i32* %7, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i32, i32* %120, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = load i32*, i32** %13, align 8
  %126 = load i32, i32* %8, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i32, i32* %125, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %124, %129
  br i1 %130, label %131, label %132

131:                                              ; preds = %119
  store i8 1, i8* %14, align 1
  br label %132

132:                                              ; preds = %131, %119
  br label %172

133:                                              ; preds = %6
  %134 = load i32, i32* %9, align 4
  %135 = load i32, i32* %7, align 4
  %136 = icmp sle i32 %134, %135
  br i1 %136, label %150, label %137

137:                                              ; preds = %133
  %138 = load i32*, i32** %13, align 8
  %139 = load i32, i32* %9, align 4
  %140 = sub nsw i32 %139, 1
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i32, i32* %138, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = load i32*, i32** %13, align 8
  %145 = load i32, i32* %9, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i32, i32* %144, i64 %146
  %148 = load i32, i32* %147, align 4
  %149 = icmp eq i32 %143, %148
  br i1 %149, label %150, label %168

150:                                              ; preds = %137, %133
  %151 = load i32, i32* %10, align 4
  %152 = load i32, i32* %8, align 4
  %153 = icmp sge i32 %151, %152
  br i1 %153, label %167, label %154

154:                                              ; preds = %150
  %155 = load i32*, i32** %13, align 8
  %156 = load i32, i32* %10, align 4
  %157 = add nsw i32 %156, 1
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds i32, i32* %155, i64 %158
  %160 = load i32, i32* %159, align 4
  %161 = load i32*, i32** %13, align 8
  %162 = load i32, i32* %10, align 4
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds i32, i32* %161, i64 %163
  %165 = load i32, i32* %164, align 4
  %166 = icmp eq i32 %160, %165
  br i1 %166, label %167, label %168

167:                                              ; preds = %154, %150
  store i8 1, i8* %14, align 1
  br label %168

168:                                              ; preds = %167, %154, %137
  br label %172

169:                                              ; preds = %6
  %170 = load i8, i8* %11, align 1
  %171 = zext i8 %170 to i32
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([54 x i8], [54 x i8]* @.str.7, i64 0, i64 0), i32 noundef %171)
  br label %172

172:                                              ; preds = %169, %168, %132, %118, %92, %78, %64, %50, %36
  %173 = load i8, i8* %14, align 1
  ret i8 %173
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_hp_cb_def_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8 noundef zeroext %4, i8* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i8, align 1
  %14 = alloca %struct.hc_hp_def_dat*, align 8
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8 %4, i8* %11, align 1
  store i8* %5, i8** %12, align 8
  %15 = load i8*, i8** %12, align 8
  %16 = bitcast i8* %15 to %struct.hc_hp_def_dat*
  store %struct.hc_hp_def_dat* %16, %struct.hc_hp_def_dat** %14, align 8
  %17 = load i32, i32* %7, align 4
  %18 = load i32, i32* %8, align 4
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %10, align 4
  %21 = load i8, i8* %11, align 1
  %22 = load i8*, i8** %12, align 8
  %23 = call zeroext i8 @hc_hp_cb_def(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, i8 noundef zeroext %21, i8* noundef %22)
  store i8 %23, i8* %13, align 1
  %24 = load %struct.hc_hp_def_dat*, %struct.hc_hp_def_dat** %14, align 8
  %25 = getelementptr inbounds %struct.hc_hp_def_dat, %struct.hc_hp_def_dat* %24, i32 0, i32 6
  %26 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %25, align 8
  %27 = load i32, i32* %7, align 4
  %28 = load i32, i32* %8, align 4
  %29 = load i32, i32* %9, align 4
  %30 = load i32, i32* %10, align 4
  %31 = load i8, i8* %11, align 1
  %32 = load %struct.hc_hp_def_dat*, %struct.hc_hp_def_dat** %14, align 8
  %33 = getelementptr inbounds %struct.hc_hp_def_dat, %struct.hc_hp_def_dat* %32, i32 0, i32 5
  %34 = load i8*, i8** %33, align 8
  %35 = call zeroext i8 %26(i32 noundef %27, i32 noundef %28, i32 noundef %29, i32 noundef %30, i8 noundef zeroext %31, i8* noundef %34)
  %36 = zext i8 %35 to i32
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %6
  %39 = load i8, i8* %13, align 1
  %40 = zext i8 %39 to i32
  br label %42

41:                                               ; preds = %6
  br label %42

42:                                               ; preds = %41, %38
  %43 = phi i32 [ %40, %38 ], [ 0, %41 ]
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %13, align 1
  %45 = load i8, i8* %13, align 1
  ret i8 %45
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_hp_cb_def(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8 noundef zeroext %4, i8* noundef %5) #0 {
  %7 = alloca i8, align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8, align 1
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca %struct.hc_hp_def_dat*, align 8
  store i32 %0, i32* %8, align 4
  store i32 %1, i32* %9, align 4
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store i8 %4, i8* %12, align 1
  store i8* %5, i8** %13, align 8
  %19 = load i8*, i8** %13, align 8
  %20 = bitcast i8* %19 to %struct.hc_hp_def_dat*
  store %struct.hc_hp_def_dat* %20, %struct.hc_hp_def_dat** %18, align 8
  store i8 0, i8* %17, align 1
  %21 = load %struct.hc_hp_def_dat*, %struct.hc_hp_def_dat** %18, align 8
  %22 = getelementptr inbounds %struct.hc_hp_def_dat, %struct.hc_hp_def_dat* %21, i32 0, i32 3
  %23 = load i32*, i32** %22, align 8
  %24 = load i32, i32* %8, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i32, i32* %23, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = load %struct.hc_hp_def_dat*, %struct.hc_hp_def_dat** %18, align 8
  %29 = getelementptr inbounds %struct.hc_hp_def_dat, %struct.hc_hp_def_dat* %28, i32 0, i32 3
  %30 = load i32*, i32** %29, align 8
  %31 = load i32, i32* %9, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %30, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = icmp ne i32 %27, %34
  br i1 %35, label %36, label %38

36:                                               ; preds = %6
  %37 = load i8, i8* %17, align 1
  store i8 %37, i8* %7, align 1
  br label %92

38:                                               ; preds = %6
  %39 = load i32, i32* %9, align 4
  %40 = load i32, i32* %8, align 4
  %41 = icmp sgt i32 %39, %40
  br i1 %41, label %42, label %49

42:                                               ; preds = %38
  %43 = load i32, i32* %8, align 4
  store i32 %43, i32* %15, align 4
  %44 = load i32, i32* %9, align 4
  store i32 %44, i32* %16, align 4
  %45 = load i32, i32* %16, align 4
  %46 = load i32, i32* %15, align 4
  %47 = sub nsw i32 %45, %46
  %48 = sub nsw i32 %47, 1
  store i32 %48, i32* %14, align 4
  br label %60

49:                                               ; preds = %38
  %50 = load i32, i32* %9, align 4
  store i32 %50, i32* %15, align 4
  %51 = load i32, i32* %8, align 4
  store i32 %51, i32* %16, align 4
  %52 = load %struct.hc_hp_def_dat*, %struct.hc_hp_def_dat** %18, align 8
  %53 = getelementptr inbounds %struct.hc_hp_def_dat, %struct.hc_hp_def_dat* %52, i32 0, i32 0
  %54 = load i32, i32* %53, align 8
  %55 = load i32, i32* %16, align 4
  %56 = sub nsw i32 %54, %55
  %57 = load i32, i32* %15, align 4
  %58 = add nsw i32 %56, %57
  %59 = sub nsw i32 %58, 1
  store i32 %59, i32* %14, align 4
  br label %60

60:                                               ; preds = %49, %42
  %61 = load %struct.hc_hp_def_dat*, %struct.hc_hp_def_dat** %18, align 8
  %62 = getelementptr inbounds %struct.hc_hp_def_dat, %struct.hc_hp_def_dat* %61, i32 0, i32 1
  %63 = load i8*, i8** %62, align 8
  %64 = load %struct.hc_hp_def_dat*, %struct.hc_hp_def_dat** %18, align 8
  %65 = getelementptr inbounds %struct.hc_hp_def_dat, %struct.hc_hp_def_dat* %64, i32 0, i32 0
  %66 = load i32, i32* %65, align 8
  %67 = load i32, i32* %15, align 4
  %68 = mul nsw i32 %66, %67
  %69 = load i32, i32* %16, align 4
  %70 = add nsw i32 %68, %69
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %63, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = and i32 %74, 2
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %77, label %90

77:                                               ; preds = %60
  store i8 1, i8* %17, align 1
  %78 = load %struct.hc_hp_def_dat*, %struct.hc_hp_def_dat** %18, align 8
  %79 = getelementptr inbounds %struct.hc_hp_def_dat, %struct.hc_hp_def_dat* %78, i32 0, i32 4
  %80 = load i32*, i32** %79, align 8
  %81 = load i32, i32* %8, align 4
  %82 = add nsw i32 %81, 1
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i32, i32* %80, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = load i32, i32* %14, align 4
  %87 = icmp slt i32 %85, %86
  br i1 %87, label %88, label %89

88:                                               ; preds = %77
  store i8 0, i8* %17, align 1
  br label %89

89:                                               ; preds = %88, %77
  br label %90

90:                                               ; preds = %89, %60
  %91 = load i8, i8* %17, align 1
  store i8 %91, i8* %7, align 1
  br label %92

92:                                               ; preds = %90, %36
  %93 = load i8, i8* %7, align 1
  ret i8 %93
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_int_cb_def_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca %struct.hc_int_def_dat*, align 8
  %12 = alloca i8, align 1
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i8* %4, i8** %10, align 8
  %13 = load i8*, i8** %10, align 8
  %14 = bitcast i8* %13 to %struct.hc_int_def_dat*
  store %struct.hc_int_def_dat* %14, %struct.hc_int_def_dat** %11, align 8
  %15 = load i32, i32* %6, align 4
  %16 = load i32, i32* %7, align 4
  %17 = load i32, i32* %8, align 4
  %18 = load i32, i32* %9, align 4
  %19 = load i8*, i8** %10, align 8
  %20 = call zeroext i8 @hc_int_cb_def(i32 noundef %15, i32 noundef %16, i32 noundef %17, i32 noundef %18, i8* noundef %19)
  store i8 %20, i8* %12, align 1
  %21 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %11, align 8
  %22 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %21, i32 0, i32 6
  %23 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %22, align 8
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %11, align 8
  %29 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %28, i32 0, i32 5
  %30 = load i8*, i8** %29, align 8
  %31 = call zeroext i8 %23(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, i8 noundef zeroext 2, i8* noundef %30)
  %32 = zext i8 %31 to i32
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %5
  %35 = load i8, i8* %12, align 1
  %36 = zext i8 %35 to i32
  br label %38

37:                                               ; preds = %5
  br label %38

38:                                               ; preds = %37, %34
  %39 = phi i32 [ %36, %34 ], [ 0, %37 ]
  %40 = trunc i32 %39 to i8
  ret i8 %40
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_int_cb_def(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8* noundef %4) #0 {
  %6 = alloca i8, align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca %struct.hc_int_def_dat*, align 8
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8* %4, i8** %11, align 8
  %15 = load i8*, i8** %11, align 8
  %16 = bitcast i8* %15 to %struct.hc_int_def_dat*
  store %struct.hc_int_def_dat* %16, %struct.hc_int_def_dat** %14, align 8
  %17 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %14, align 8
  %18 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %17, i32 0, i32 2
  %19 = load i32*, i32** %18, align 8
  %20 = load i32, i32* %7, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i32, i32* %19, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %14, align 8
  %25 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %24, i32 0, i32 2
  %26 = load i32*, i32** %25, align 8
  %27 = load i32, i32* %9, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i32, i32* %26, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = icmp ne i32 %23, %30
  br i1 %31, label %48, label %32

32:                                               ; preds = %5
  %33 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %14, align 8
  %34 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %33, i32 0, i32 2
  %35 = load i32*, i32** %34, align 8
  %36 = load i32, i32* %10, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i32, i32* %35, i64 %37
  %39 = load i32, i32* %38, align 4
  %40 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %14, align 8
  %41 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %40, i32 0, i32 2
  %42 = load i32*, i32** %41, align 8
  %43 = load i32, i32* %8, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i32, i32* %42, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = icmp ne i32 %39, %46
  br i1 %47, label %48, label %49

48:                                               ; preds = %32, %5
  store i8 0, i8* %6, align 1
  br label %120

49:                                               ; preds = %32
  %50 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %14, align 8
  %51 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %50, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = icmp ne i8* %52, null
  br i1 %53, label %54, label %81

54:                                               ; preds = %49
  %55 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %14, align 8
  %56 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %55, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %14, align 8
  %59 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %58, i32 0, i32 3
  %60 = load i32, i32* %59, align 8
  %61 = load i32, i32* %7, align 4
  %62 = mul i32 %60, %61
  %63 = load i32, i32* %8, align 4
  %64 = add i32 %62, %63
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %57, i64 %65
  %67 = load i8, i8* %66, align 1
  store i8 %67, i8* %12, align 1
  %68 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %14, align 8
  %69 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %68, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %14, align 8
  %72 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %71, i32 0, i32 3
  %73 = load i32, i32* %72, align 8
  %74 = load i32, i32* %9, align 4
  %75 = mul i32 %73, %74
  %76 = load i32, i32* %10, align 4
  %77 = add i32 %75, %76
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %70, i64 %78
  %80 = load i8, i8* %79, align 1
  store i8 %80, i8* %13, align 1
  br label %108

81:                                               ; preds = %49
  %82 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %14, align 8
  %83 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %82, i32 0, i32 1
  %84 = load i8**, i8*** %83, align 8
  %85 = load i32, i32* %7, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8*, i8** %84, i64 %86
  %88 = load i8*, i8** %87, align 8
  %89 = load i32, i32* %8, align 4
  %90 = load i32, i32* %7, align 4
  %91 = sub nsw i32 %89, %90
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %88, i64 %92
  %94 = load i8, i8* %93, align 1
  store i8 %94, i8* %12, align 1
  %95 = load %struct.hc_int_def_dat*, %struct.hc_int_def_dat** %14, align 8
  %96 = getelementptr inbounds %struct.hc_int_def_dat, %struct.hc_int_def_dat* %95, i32 0, i32 1
  %97 = load i8**, i8*** %96, align 8
  %98 = load i32, i32* %9, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8*, i8** %97, i64 %99
  %101 = load i8*, i8** %100, align 8
  %102 = load i32, i32* %10, align 4
  %103 = load i32, i32* %9, align 4
  %104 = sub nsw i32 %102, %103
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %101, i64 %105
  %107 = load i8, i8* %106, align 1
  store i8 %107, i8* %13, align 1
  br label %108

108:                                              ; preds = %81, %54
  %109 = load i8, i8* %12, align 1
  %110 = zext i8 %109 to i32
  %111 = and i32 %110, 4
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %113, label %119

113:                                              ; preds = %108
  %114 = load i8, i8* %13, align 1
  %115 = zext i8 %114 to i32
  %116 = and i32 %115, 8
  %117 = icmp ne i32 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %113
  store i8 1, i8* %6, align 1
  br label %120

119:                                              ; preds = %113, %108
  store i8 0, i8* %6, align 1
  br label %120

120:                                              ; preds = %119, %118, %48
  %121 = load i8, i8* %6, align 1
  ret i8 %121
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_mb_cb_def_user_window(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8 noundef zeroext %4, i8* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i8, align 1
  %14 = alloca %struct.hc_mb_def_dat*, align 8
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8 %4, i8* %11, align 1
  store i8* %5, i8** %12, align 8
  %15 = load i8*, i8** %12, align 8
  %16 = bitcast i8* %15 to %struct.hc_mb_def_dat*
  store %struct.hc_mb_def_dat* %16, %struct.hc_mb_def_dat** %14, align 8
  %17 = load i32, i32* %7, align 4
  %18 = load i32, i32* %8, align 4
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %10, align 4
  %21 = load i8, i8* %11, align 1
  %22 = load i8*, i8** %12, align 8
  %23 = call zeroext i8 @hc_mb_cb_def_window(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, i8 noundef zeroext %21, i8* noundef %22)
  store i8 %23, i8* %13, align 1
  %24 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %14, align 8
  %25 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %24, i32 0, i32 6
  %26 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %25, align 8
  %27 = load i32, i32* %7, align 4
  %28 = load i32, i32* %8, align 4
  %29 = load i32, i32* %9, align 4
  %30 = load i32, i32* %10, align 4
  %31 = load i8, i8* %11, align 1
  %32 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %14, align 8
  %33 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %32, i32 0, i32 5
  %34 = load i8*, i8** %33, align 8
  %35 = call zeroext i8 %26(i32 noundef %27, i32 noundef %28, i32 noundef %29, i32 noundef %30, i8 noundef zeroext %31, i8* noundef %34)
  %36 = zext i8 %35 to i32
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %6
  %39 = load i8, i8* %13, align 1
  %40 = zext i8 %39 to i32
  br label %42

41:                                               ; preds = %6
  br label %42

42:                                               ; preds = %41, %38
  %43 = phi i32 [ %40, %38 ], [ 0, %41 ]
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %13, align 1
  %45 = load i8, i8* %13, align 1
  ret i8 %45
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_mb_cb_def_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8 noundef zeroext %4, i8* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i8, align 1
  %14 = alloca %struct.hc_mb_def_dat*, align 8
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8 %4, i8* %11, align 1
  store i8* %5, i8** %12, align 8
  %15 = load i8*, i8** %12, align 8
  %16 = bitcast i8* %15 to %struct.hc_mb_def_dat*
  store %struct.hc_mb_def_dat* %16, %struct.hc_mb_def_dat** %14, align 8
  %17 = load i32, i32* %7, align 4
  %18 = load i32, i32* %8, align 4
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %10, align 4
  %21 = load i8, i8* %11, align 1
  %22 = load i8*, i8** %12, align 8
  %23 = call zeroext i8 @hc_mb_cb_def(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, i8 noundef zeroext %21, i8* noundef %22)
  store i8 %23, i8* %13, align 1
  %24 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %14, align 8
  %25 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %24, i32 0, i32 6
  %26 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %25, align 8
  %27 = load i32, i32* %7, align 4
  %28 = load i32, i32* %8, align 4
  %29 = load i32, i32* %9, align 4
  %30 = load i32, i32* %10, align 4
  %31 = load i8, i8* %11, align 1
  %32 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %14, align 8
  %33 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %32, i32 0, i32 5
  %34 = load i8*, i8** %33, align 8
  %35 = call zeroext i8 %26(i32 noundef %27, i32 noundef %28, i32 noundef %29, i32 noundef %30, i8 noundef zeroext %31, i8* noundef %34)
  %36 = zext i8 %35 to i32
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %6
  %39 = load i8, i8* %13, align 1
  %40 = zext i8 %39 to i32
  br label %42

41:                                               ; preds = %6
  br label %42

42:                                               ; preds = %41, %38
  %43 = phi i32 [ %40, %38 ], [ 0, %41 ]
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %13, align 1
  %45 = load i8, i8* %13, align 1
  ret i8 %45
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_mb_cb_def_sn_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8 noundef zeroext %4, i8* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i8, align 1
  %14 = alloca %struct.hc_mb_def_dat*, align 8
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8 %4, i8* %11, align 1
  store i8* %5, i8** %12, align 8
  %15 = load i8*, i8** %12, align 8
  %16 = bitcast i8* %15 to %struct.hc_mb_def_dat*
  store %struct.hc_mb_def_dat* %16, %struct.hc_mb_def_dat** %14, align 8
  %17 = load i32, i32* %7, align 4
  %18 = load i32, i32* %8, align 4
  %19 = load i32, i32* %9, align 4
  %20 = load i32, i32* %10, align 4
  %21 = load i8, i8* %11, align 1
  %22 = load i8*, i8** %12, align 8
  %23 = call zeroext i8 @hc_mb_cb_def(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, i8 noundef zeroext %21, i8* noundef %22)
  store i8 %23, i8* %13, align 1
  %24 = load i32, i32* %7, align 4
  %25 = load i32, i32* %8, align 4
  %26 = load i32, i32* %9, align 4
  %27 = load i32, i32* %10, align 4
  %28 = load i8, i8* %11, align 1
  %29 = load i8*, i8** %12, align 8
  %30 = call zeroext i8 @hc_sn(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, i8 noundef zeroext %28, i8* noundef %29)
  %31 = zext i8 %30 to i32
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %6
  %34 = load i8, i8* %13, align 1
  %35 = zext i8 %34 to i32
  br label %37

36:                                               ; preds = %6
  br label %37

37:                                               ; preds = %36, %33
  %38 = phi i32 [ %35, %33 ], [ 0, %36 ]
  %39 = trunc i32 %38 to i8
  store i8 %39, i8* %13, align 1
  %40 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %14, align 8
  %41 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %40, i32 0, i32 6
  %42 = load i8 (i32, i32, i32, i32, i8, i8*)*, i8 (i32, i32, i32, i32, i8, i8*)** %41, align 8
  %43 = load i32, i32* %7, align 4
  %44 = load i32, i32* %8, align 4
  %45 = load i32, i32* %9, align 4
  %46 = load i32, i32* %10, align 4
  %47 = load i8, i8* %11, align 1
  %48 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %14, align 8
  %49 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %48, i32 0, i32 5
  %50 = load i8*, i8** %49, align 8
  %51 = call zeroext i8 %42(i32 noundef %43, i32 noundef %44, i32 noundef %45, i32 noundef %46, i8 noundef zeroext %47, i8* noundef %50)
  %52 = zext i8 %51 to i32
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %37
  %55 = load i8, i8* %13, align 1
  %56 = zext i8 %55 to i32
  br label %58

57:                                               ; preds = %37
  br label %58

58:                                               ; preds = %57, %54
  %59 = phi i32 [ %56, %54 ], [ 0, %57 ]
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %13, align 1
  %61 = load i8, i8* %13, align 1
  ret i8 %61
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_mb_cb_def_window(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8 noundef zeroext %4, i8* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i8, align 1
  %17 = alloca %struct.hc_mb_def_dat*, align 8
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8 %4, i8* %11, align 1
  store i8* %5, i8** %12, align 8
  %18 = load i8*, i8** %12, align 8
  %19 = bitcast i8* %18 to %struct.hc_mb_def_dat*
  store %struct.hc_mb_def_dat* %19, %struct.hc_mb_def_dat** %17, align 8
  store i8 0, i8* %16, align 1
  %20 = load i32, i32* %9, align 4
  %21 = load i32, i32* %7, align 4
  %22 = sub nsw i32 %20, %21
  store i32 %22, i32* %13, align 4
  %23 = load i32, i32* %8, align 4
  %24 = load i32, i32* %10, align 4
  %25 = sub nsw i32 %23, %24
  store i32 %25, i32* %14, align 4
  %26 = load i8, i8* %11, align 1
  %27 = zext i8 %26 to i32
  switch i32 %27, label %283 [
    i32 5, label %28
    i32 7, label %65
    i32 6, label %127
    i32 3, label %175
    i32 10, label %228
    i32 11, label %247
  ]

28:                                               ; preds = %6
  %29 = load i32, i32* %10, align 4
  %30 = load i32, i32* %9, align 4
  %31 = sub nsw i32 %29, %30
  %32 = sub nsw i32 %31, 1
  store i32 %32, i32* %15, align 4
  store i8 1, i8* %16, align 1
  %33 = load i32, i32* %15, align 4
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %28
  %36 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %37 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %36, i32 0, i32 4
  %38 = load i32*, i32** %37, align 8
  %39 = load i32, i32* %9, align 4
  %40 = add nsw i32 %39, 1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %38, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = load i32, i32* %15, align 4
  %45 = icmp slt i32 %43, %44
  br i1 %45, label %46, label %47

46:                                               ; preds = %35
  store i8 0, i8* %16, align 1
  br label %47

47:                                               ; preds = %46, %35, %28
  %48 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %49 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %48, i32 0, i32 2
  %50 = load i32*, i32** %49, align 8
  %51 = load i32, i32* %9, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i32, i32* %50, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %56 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %55, i32 0, i32 2
  %57 = load i32*, i32** %56, align 8
  %58 = load i32, i32* %10, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i32, i32* %57, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = icmp ne i32 %54, %61
  br i1 %62, label %63, label %64

63:                                               ; preds = %47
  store i8 0, i8* %16, align 1
  br label %64

64:                                               ; preds = %63, %47
  br label %286

65:                                               ; preds = %6
  store i8 1, i8* %16, align 1
  %66 = load i32, i32* %13, align 4
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %95

68:                                               ; preds = %65
  %69 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %70 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %69, i32 0, i32 4
  %71 = load i32*, i32** %70, align 8
  %72 = load i32, i32* %7, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i32, i32* %71, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = load i32, i32* %13, align 4
  %77 = icmp slt i32 %75, %76
  br i1 %77, label %94, label %78

78:                                               ; preds = %68
  %79 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %80 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %79, i32 0, i32 2
  %81 = load i32*, i32** %80, align 8
  %82 = load i32, i32* %7, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i32, i32* %81, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %87 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %86, i32 0, i32 2
  %88 = load i32*, i32** %87, align 8
  %89 = load i32, i32* %9, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i32, i32* %88, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = icmp ne i32 %85, %92
  br i1 %93, label %94, label %95

94:                                               ; preds = %78, %68
  store i8 0, i8* %16, align 1
  br label %95

95:                                               ; preds = %94, %78, %65
  %96 = load i32, i32* %14, align 4
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %126

98:                                               ; preds = %95
  %99 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %100 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %99, i32 0, i32 4
  %101 = load i32*, i32** %100, align 8
  %102 = load i32, i32* %10, align 4
  %103 = add nsw i32 %102, 1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i32, i32* %101, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = load i32, i32* %14, align 4
  %108 = icmp slt i32 %106, %107
  br i1 %108, label %125, label %109

109:                                              ; preds = %98
  %110 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %111 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %110, i32 0, i32 2
  %112 = load i32*, i32** %111, align 8
  %113 = load i32, i32* %10, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i32, i32* %112, i64 %114
  %116 = load i32, i32* %115, align 4
  %117 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %118 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %117, i32 0, i32 2
  %119 = load i32*, i32** %118, align 8
  %120 = load i32, i32* %8, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i32, i32* %119, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = icmp ne i32 %116, %123
  br i1 %124, label %125, label %126

125:                                              ; preds = %109, %98
  store i8 0, i8* %16, align 1
  br label %126

126:                                              ; preds = %125, %109, %95
  br label %286

127:                                              ; preds = %6
  %128 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %129 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %128, i32 0, i32 1
  %130 = load i8**, i8*** %129, align 8
  %131 = load i32, i32* %9, align 4
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i8*, i8** %130, i64 %132
  %134 = load i8*, i8** %133, align 8
  %135 = load i32, i32* %10, align 4
  %136 = load i32, i32* %9, align 4
  %137 = sub nsw i32 %135, %136
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i8, i8* %134, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = and i32 %141, 32
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %144, label %174

144:                                              ; preds = %127
  store i8 1, i8* %16, align 1
  %145 = load i32, i32* %13, align 4
  %146 = icmp ne i32 %145, 0
  br i1 %146, label %147, label %158

147:                                              ; preds = %144
  %148 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %149 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %148, i32 0, i32 4
  %150 = load i32*, i32** %149, align 8
  %151 = load i32, i32* %7, align 4
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i32, i32* %150, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = load i32, i32* %13, align 4
  %156 = icmp slt i32 %154, %155
  br i1 %156, label %157, label %158

157:                                              ; preds = %147
  store i8 0, i8* %16, align 1
  br label %158

158:                                              ; preds = %157, %147, %144
  %159 = load i32, i32* %14, align 4
  %160 = icmp ne i32 %159, 0
  br i1 %160, label %161, label %173

161:                                              ; preds = %158
  %162 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %163 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %162, i32 0, i32 4
  %164 = load i32*, i32** %163, align 8
  %165 = load i32, i32* %10, align 4
  %166 = add nsw i32 %165, 1
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i32, i32* %164, i64 %167
  %169 = load i32, i32* %168, align 4
  %170 = load i32, i32* %14, align 4
  %171 = icmp slt i32 %169, %170
  br i1 %171, label %172, label %173

172:                                              ; preds = %161
  store i8 0, i8* %16, align 1
  br label %173

173:                                              ; preds = %172, %161, %158
  br label %174

174:                                              ; preds = %173, %127
  br label %286

175:                                              ; preds = %6
  %176 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %177 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %176, i32 0, i32 1
  %178 = load i8**, i8*** %177, align 8
  %179 = load i32, i32* %7, align 4
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds i8*, i8** %178, i64 %180
  %182 = load i8*, i8** %181, align 8
  %183 = load i32, i32* %8, align 4
  %184 = load i32, i32* %7, align 4
  %185 = sub nsw i32 %183, %184
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds i8, i8* %182, i64 %186
  %188 = load i8, i8* %187, align 1
  %189 = zext i8 %188 to i32
  %190 = and i32 %189, 16
  %191 = icmp ne i32 %190, 0
  br i1 %191, label %192, label %227

192:                                              ; preds = %175
  store i8 1, i8* %16, align 1
  %193 = load i32, i32* %13, align 4
  %194 = add nsw i32 %193, -1
  store i32 %194, i32* %13, align 4
  %195 = load i32, i32* %14, align 4
  %196 = add nsw i32 %195, -1
  store i32 %196, i32* %14, align 4
  %197 = load i32, i32* %13, align 4
  %198 = icmp ne i32 %197, 0
  br i1 %198, label %199, label %211

199:                                              ; preds = %192
  %200 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %201 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %200, i32 0, i32 4
  %202 = load i32*, i32** %201, align 8
  %203 = load i32, i32* %7, align 4
  %204 = add nsw i32 %203, 1
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds i32, i32* %202, i64 %205
  %207 = load i32, i32* %206, align 4
  %208 = load i32, i32* %13, align 4
  %209 = icmp slt i32 %207, %208
  br i1 %209, label %210, label %211

210:                                              ; preds = %199
  store i8 0, i8* %16, align 1
  br label %211

211:                                              ; preds = %210, %199, %192
  %212 = load i32, i32* %14, align 4
  %213 = icmp ne i32 %212, 0
  br i1 %213, label %214, label %226

214:                                              ; preds = %211
  %215 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %216 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %215, i32 0, i32 4
  %217 = load i32*, i32** %216, align 8
  %218 = load i32, i32* %10, align 4
  %219 = add nsw i32 %218, 1
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds i32, i32* %217, i64 %220
  %222 = load i32, i32* %221, align 4
  %223 = load i32, i32* %14, align 4
  %224 = icmp slt i32 %222, %223
  br i1 %224, label %225, label %226

225:                                              ; preds = %214
  store i8 0, i8* %16, align 1
  br label %226

226:                                              ; preds = %225, %214, %211
  br label %227

227:                                              ; preds = %226, %175
  br label %286

228:                                              ; preds = %6
  %229 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %230 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %229, i32 0, i32 1
  %231 = load i8**, i8*** %230, align 8
  %232 = load i32, i32* %9, align 4
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i8*, i8** %231, i64 %233
  %235 = load i8*, i8** %234, align 8
  %236 = load i32, i32* %10, align 4
  %237 = load i32, i32* %9, align 4
  %238 = sub nsw i32 %236, %237
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i8, i8* %235, i64 %239
  %241 = load i8, i8* %240, align 1
  %242 = zext i8 %241 to i32
  %243 = and i32 %242, 32
  %244 = icmp ne i32 %243, 0
  br i1 %244, label %245, label %246

245:                                              ; preds = %228
  store i8 1, i8* %16, align 1
  br label %246

246:                                              ; preds = %245, %228
  br label %286

247:                                              ; preds = %6
  %248 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %249 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %248, i32 0, i32 1
  %250 = load i8**, i8*** %249, align 8
  %251 = load i32, i32* %7, align 4
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i8*, i8** %250, i64 %252
  %254 = load i8*, i8** %253, align 8
  %255 = load i32, i32* %8, align 4
  %256 = load i32, i32* %7, align 4
  %257 = sub nsw i32 %255, %256
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds i8, i8* %254, i64 %258
  %260 = load i8, i8* %259, align 1
  %261 = zext i8 %260 to i32
  %262 = and i32 %261, 32
  %263 = icmp ne i32 %262, 0
  br i1 %263, label %264, label %282

264:                                              ; preds = %247
  %265 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %17, align 8
  %266 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %265, i32 0, i32 1
  %267 = load i8**, i8*** %266, align 8
  %268 = load i32, i32* %9, align 4
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds i8*, i8** %267, i64 %269
  %271 = load i8*, i8** %270, align 8
  %272 = load i32, i32* %10, align 4
  %273 = load i32, i32* %9, align 4
  %274 = sub nsw i32 %272, %273
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i8, i8* %271, i64 %275
  %277 = load i8, i8* %276, align 1
  %278 = zext i8 %277 to i32
  %279 = and i32 %278, 32
  %280 = icmp ne i32 %279, 0
  br i1 %280, label %281, label %282

281:                                              ; preds = %264
  store i8 1, i8* %16, align 1
  br label %282

282:                                              ; preds = %281, %264, %247
  br label %286

283:                                              ; preds = %6
  %284 = load i8, i8* %11, align 1
  %285 = zext i8 %284 to i32
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([70 x i8], [70 x i8]* @.str.9, i64 0, i64 0), i32 noundef %285)
  br label %286

286:                                              ; preds = %283, %282, %246, %227, %174, %126, %64
  %287 = load i8, i8* %16, align 1
  ret i8 %287
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_mb_cb_def(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8 noundef zeroext %4, i8* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca %struct.hc_mb_def_dat*, align 8
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8 %4, i8* %11, align 1
  store i8* %5, i8** %12, align 8
  %19 = load i8*, i8** %12, align 8
  %20 = bitcast i8* %19 to %struct.hc_mb_def_dat*
  store %struct.hc_mb_def_dat* %20, %struct.hc_mb_def_dat** %18, align 8
  store i8 0, i8* %13, align 1
  %21 = load i32, i32* %9, align 4
  %22 = load i32, i32* %7, align 4
  %23 = sub nsw i32 %21, %22
  store i32 %23, i32* %15, align 4
  %24 = load i32, i32* %8, align 4
  %25 = load i32, i32* %10, align 4
  %26 = sub nsw i32 %24, %25
  store i32 %26, i32* %16, align 4
  %27 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %28 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %27, i32 0, i32 3
  %29 = load i32, i32* %28, align 8
  store i32 %29, i32* %14, align 4
  %30 = load i8, i8* %11, align 1
  %31 = zext i8 %30 to i32
  switch i32 %31, label %315 [
    i32 5, label %32
    i32 7, label %52
    i32 6, label %82
    i32 3, label %128
    i32 23, label %179
    i32 9, label %230
    i32 10, label %266
    i32 11, label %283
  ]

32:                                               ; preds = %6
  %33 = load i32, i32* %10, align 4
  %34 = load i32, i32* %9, align 4
  %35 = sub nsw i32 %33, %34
  %36 = sub nsw i32 %35, 1
  store i32 %36, i32* %17, align 4
  store i8 1, i8* %13, align 1
  %37 = load i32, i32* %17, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %51

39:                                               ; preds = %32
  %40 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %41 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %40, i32 0, i32 4
  %42 = load i32*, i32** %41, align 8
  %43 = load i32, i32* %9, align 4
  %44 = add nsw i32 %43, 1
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, i32* %42, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = load i32, i32* %17, align 4
  %49 = icmp slt i32 %47, %48
  br i1 %49, label %50, label %51

50:                                               ; preds = %39
  store i8 0, i8* %13, align 1
  br label %51

51:                                               ; preds = %50, %39, %32
  br label %318

52:                                               ; preds = %6
  store i8 1, i8* %13, align 1
  %53 = load i32, i32* %15, align 4
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %66

55:                                               ; preds = %52
  %56 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %57 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %56, i32 0, i32 4
  %58 = load i32*, i32** %57, align 8
  %59 = load i32, i32* %7, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i32, i32* %58, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = load i32, i32* %15, align 4
  %64 = icmp slt i32 %62, %63
  br i1 %64, label %65, label %66

65:                                               ; preds = %55
  store i8 0, i8* %13, align 1
  br label %66

66:                                               ; preds = %65, %55, %52
  %67 = load i32, i32* %16, align 4
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %69, label %81

69:                                               ; preds = %66
  %70 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %71 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %70, i32 0, i32 4
  %72 = load i32*, i32** %71, align 8
  %73 = load i32, i32* %10, align 4
  %74 = add nsw i32 %73, 1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i32, i32* %72, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = load i32, i32* %16, align 4
  %79 = icmp slt i32 %77, %78
  br i1 %79, label %80, label %81

80:                                               ; preds = %69
  store i8 0, i8* %13, align 1
  br label %81

81:                                               ; preds = %80, %69, %66
  br label %318

82:                                               ; preds = %6
  %83 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %84 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %83, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = load i32, i32* %14, align 4
  %87 = load i32, i32* %9, align 4
  %88 = mul i32 %86, %87
  %89 = load i32, i32* %10, align 4
  %90 = add i32 %88, %89
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %85, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = and i32 %94, 32
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %127

97:                                               ; preds = %82
  store i8 1, i8* %13, align 1
  %98 = load i32, i32* %15, align 4
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %100, label %111

100:                                              ; preds = %97
  %101 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %102 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %101, i32 0, i32 4
  %103 = load i32*, i32** %102, align 8
  %104 = load i32, i32* %7, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i32, i32* %103, i64 %105
  %107 = load i32, i32* %106, align 4
  %108 = load i32, i32* %15, align 4
  %109 = icmp slt i32 %107, %108
  br i1 %109, label %110, label %111

110:                                              ; preds = %100
  store i8 0, i8* %13, align 1
  br label %111

111:                                              ; preds = %110, %100, %97
  %112 = load i32, i32* %16, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %126

114:                                              ; preds = %111
  %115 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %116 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %115, i32 0, i32 4
  %117 = load i32*, i32** %116, align 8
  %118 = load i32, i32* %10, align 4
  %119 = add nsw i32 %118, 1
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i32, i32* %117, i64 %120
  %122 = load i32, i32* %121, align 4
  %123 = load i32, i32* %16, align 4
  %124 = icmp slt i32 %122, %123
  br i1 %124, label %125, label %126

125:                                              ; preds = %114
  store i8 0, i8* %13, align 1
  br label %126

126:                                              ; preds = %125, %114, %111
  br label %127

127:                                              ; preds = %126, %82
  br label %318

128:                                              ; preds = %6
  %129 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %130 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %129, i32 0, i32 0
  %131 = load i8*, i8** %130, align 8
  %132 = load i32, i32* %14, align 4
  %133 = load i32, i32* %7, align 4
  %134 = mul i32 %132, %133
  %135 = load i32, i32* %8, align 4
  %136 = add i32 %134, %135
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds i8, i8* %131, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = and i32 %140, 16
  %142 = icmp ne i32 %141, 0
  br i1 %142, label %143, label %178

143:                                              ; preds = %128
  store i8 1, i8* %13, align 1
  %144 = load i32, i32* %15, align 4
  %145 = add nsw i32 %144, -1
  store i32 %145, i32* %15, align 4
  %146 = load i32, i32* %16, align 4
  %147 = add nsw i32 %146, -1
  store i32 %147, i32* %16, align 4
  %148 = load i32, i32* %15, align 4
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %150, label %162

150:                                              ; preds = %143
  %151 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %152 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %151, i32 0, i32 4
  %153 = load i32*, i32** %152, align 8
  %154 = load i32, i32* %7, align 4
  %155 = add nsw i32 %154, 1
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i32, i32* %153, i64 %156
  %158 = load i32, i32* %157, align 4
  %159 = load i32, i32* %15, align 4
  %160 = icmp slt i32 %158, %159
  br i1 %160, label %161, label %162

161:                                              ; preds = %150
  store i8 0, i8* %13, align 1
  br label %162

162:                                              ; preds = %161, %150, %143
  %163 = load i32, i32* %16, align 4
  %164 = icmp ne i32 %163, 0
  br i1 %164, label %165, label %177

165:                                              ; preds = %162
  %166 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %167 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %166, i32 0, i32 4
  %168 = load i32*, i32** %167, align 8
  %169 = load i32, i32* %10, align 4
  %170 = add nsw i32 %169, 1
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i32, i32* %168, i64 %171
  %173 = load i32, i32* %172, align 4
  %174 = load i32, i32* %16, align 4
  %175 = icmp slt i32 %173, %174
  br i1 %175, label %176, label %177

176:                                              ; preds = %165
  store i8 0, i8* %13, align 1
  br label %177

177:                                              ; preds = %176, %165, %162
  br label %178

178:                                              ; preds = %177, %128
  br label %318

179:                                              ; preds = %6
  %180 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %181 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %180, i32 0, i32 0
  %182 = load i8*, i8** %181, align 8
  %183 = load i32, i32* %14, align 4
  %184 = load i32, i32* %7, align 4
  %185 = mul i32 %183, %184
  %186 = load i32, i32* %8, align 4
  %187 = add i32 %185, %186
  %188 = zext i32 %187 to i64
  %189 = getelementptr inbounds i8, i8* %182, i64 %188
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i32
  %192 = and i32 %191, 16
  %193 = icmp ne i32 %192, 0
  br i1 %193, label %194, label %229

194:                                              ; preds = %179
  store i8 1, i8* %13, align 1
  %195 = load i32, i32* %15, align 4
  %196 = add nsw i32 %195, 1
  store i32 %196, i32* %15, align 4
  %197 = load i32, i32* %16, align 4
  %198 = add nsw i32 %197, 1
  store i32 %198, i32* %16, align 4
  %199 = load i32, i32* %15, align 4
  %200 = icmp ne i32 %199, 0
  br i1 %200, label %201, label %213

201:                                              ; preds = %194
  %202 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %203 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %202, i32 0, i32 4
  %204 = load i32*, i32** %203, align 8
  %205 = load i32, i32* %9, align 4
  %206 = add nsw i32 %205, 1
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds i32, i32* %204, i64 %207
  %209 = load i32, i32* %208, align 4
  %210 = load i32, i32* %15, align 4
  %211 = icmp slt i32 %209, %210
  br i1 %211, label %212, label %213

212:                                              ; preds = %201
  store i8 0, i8* %13, align 1
  br label %213

213:                                              ; preds = %212, %201, %194
  %214 = load i32, i32* %16, align 4
  %215 = icmp ne i32 %214, 0
  br i1 %215, label %216, label %228

216:                                              ; preds = %213
  %217 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %218 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %217, i32 0, i32 4
  %219 = load i32*, i32** %218, align 8
  %220 = load i32, i32* %8, align 4
  %221 = add nsw i32 %220, 1
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds i32, i32* %219, i64 %222
  %224 = load i32, i32* %223, align 4
  %225 = load i32, i32* %16, align 4
  %226 = icmp slt i32 %224, %225
  br i1 %226, label %227, label %228

227:                                              ; preds = %216
  store i8 0, i8* %13, align 1
  br label %228

228:                                              ; preds = %227, %216, %213
  br label %229

229:                                              ; preds = %228, %179
  br label %318

230:                                              ; preds = %6
  %231 = load i32, i32* %10, align 4
  %232 = load i32, i32* %9, align 4
  %233 = sub nsw i32 %231, %232
  %234 = sub nsw i32 %233, 1
  store i32 %234, i32* %17, align 4
  %235 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %236 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %235, i32 0, i32 0
  %237 = load i8*, i8** %236, align 8
  %238 = load i32, i32* %14, align 4
  %239 = load i32, i32* %8, align 4
  %240 = mul i32 %238, %239
  %241 = load i32, i32* %10, align 4
  %242 = add i32 %240, %241
  %243 = zext i32 %242 to i64
  %244 = getelementptr inbounds i8, i8* %237, i64 %243
  %245 = load i8, i8* %244, align 1
  %246 = zext i8 %245 to i32
  %247 = and i32 %246, 32
  %248 = icmp ne i32 %247, 0
  br i1 %248, label %249, label %250

249:                                              ; preds = %230
  store i8 1, i8* %13, align 1
  br label %250

250:                                              ; preds = %249, %230
  %251 = load i32, i32* %17, align 4
  %252 = icmp ne i32 %251, 0
  br i1 %252, label %253, label %265

253:                                              ; preds = %250
  %254 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %255 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %254, i32 0, i32 4
  %256 = load i32*, i32** %255, align 8
  %257 = load i32, i32* %9, align 4
  %258 = add nsw i32 %257, 1
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds i32, i32* %256, i64 %259
  %261 = load i32, i32* %260, align 4
  %262 = load i32, i32* %17, align 4
  %263 = icmp slt i32 %261, %262
  br i1 %263, label %264, label %265

264:                                              ; preds = %253
  store i8 0, i8* %13, align 1
  br label %265

265:                                              ; preds = %264, %253, %250
  br label %318

266:                                              ; preds = %6
  %267 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %268 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %267, i32 0, i32 0
  %269 = load i8*, i8** %268, align 8
  %270 = load i32, i32* %14, align 4
  %271 = load i32, i32* %9, align 4
  %272 = mul i32 %270, %271
  %273 = load i32, i32* %10, align 4
  %274 = add i32 %272, %273
  %275 = zext i32 %274 to i64
  %276 = getelementptr inbounds i8, i8* %269, i64 %275
  %277 = load i8, i8* %276, align 1
  %278 = zext i8 %277 to i32
  %279 = and i32 %278, 32
  %280 = icmp ne i32 %279, 0
  br i1 %280, label %281, label %282

281:                                              ; preds = %266
  store i8 1, i8* %13, align 1
  br label %282

282:                                              ; preds = %281, %266
  br label %318

283:                                              ; preds = %6
  %284 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %285 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %284, i32 0, i32 0
  %286 = load i8*, i8** %285, align 8
  %287 = load i32, i32* %14, align 4
  %288 = load i32, i32* %7, align 4
  %289 = mul i32 %287, %288
  %290 = load i32, i32* %8, align 4
  %291 = add i32 %289, %290
  %292 = zext i32 %291 to i64
  %293 = getelementptr inbounds i8, i8* %286, i64 %292
  %294 = load i8, i8* %293, align 1
  %295 = zext i8 %294 to i32
  %296 = and i32 %295, 32
  %297 = icmp ne i32 %296, 0
  br i1 %297, label %298, label %314

298:                                              ; preds = %283
  %299 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %18, align 8
  %300 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %299, i32 0, i32 0
  %301 = load i8*, i8** %300, align 8
  %302 = load i32, i32* %14, align 4
  %303 = load i32, i32* %9, align 4
  %304 = mul i32 %302, %303
  %305 = load i32, i32* %10, align 4
  %306 = add i32 %304, %305
  %307 = zext i32 %306 to i64
  %308 = getelementptr inbounds i8, i8* %301, i64 %307
  %309 = load i8, i8* %308, align 1
  %310 = zext i8 %309 to i32
  %311 = and i32 %310, 32
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %314

313:                                              ; preds = %298
  store i8 1, i8* %13, align 1
  br label %314

314:                                              ; preds = %313, %298, %283
  br label %318

315:                                              ; preds = %6
  %316 = load i8, i8* %11, align 1
  %317 = zext i8 %316 to i32
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([63 x i8], [63 x i8]* @.str.10, i64 0, i64 0), i32 noundef %317)
  br label %318

318:                                              ; preds = %315, %314, %282, %265, %229, %178, %127, %81, %51
  %319 = load i8, i8* %13, align 1
  ret i8 %319
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_mb_cb_def_sn(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8 noundef zeroext %4, i8* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i8, align 1
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8 %4, i8* %11, align 1
  store i8* %5, i8** %12, align 8
  %14 = load i32, i32* %7, align 4
  %15 = load i32, i32* %8, align 4
  %16 = load i32, i32* %9, align 4
  %17 = load i32, i32* %10, align 4
  %18 = load i8, i8* %11, align 1
  %19 = load i8*, i8** %12, align 8
  %20 = call zeroext i8 @hc_mb_cb_def(i32 noundef %14, i32 noundef %15, i32 noundef %16, i32 noundef %17, i8 noundef zeroext %18, i8* noundef %19)
  store i8 %20, i8* %13, align 1
  %21 = load i32, i32* %7, align 4
  %22 = load i32, i32* %8, align 4
  %23 = load i32, i32* %9, align 4
  %24 = load i32, i32* %10, align 4
  %25 = load i8, i8* %11, align 1
  %26 = load i8*, i8** %12, align 8
  %27 = call zeroext i8 @hc_sn(i32 noundef %21, i32 noundef %22, i32 noundef %23, i32 noundef %24, i8 noundef zeroext %25, i8* noundef %26)
  %28 = zext i8 %27 to i32
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %6
  %31 = load i8, i8* %13, align 1
  %32 = zext i8 %31 to i32
  br label %34

33:                                               ; preds = %6
  br label %34

34:                                               ; preds = %33, %30
  %35 = phi i32 [ %32, %30 ], [ 0, %33 ]
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %13, align 1
  %37 = load i8, i8* %13, align 1
  ret i8 %37
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @hc_sn(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i8 noundef zeroext %4, i8* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.hc_mb_def_dat*, align 8
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8 %4, i8* %11, align 1
  store i8* %5, i8** %12, align 8
  %16 = load i8*, i8** %12, align 8
  %17 = bitcast i8* %16 to %struct.hc_mb_def_dat*
  store %struct.hc_mb_def_dat* %17, %struct.hc_mb_def_dat** %15, align 8
  %18 = load %struct.hc_mb_def_dat*, %struct.hc_mb_def_dat** %15, align 8
  %19 = getelementptr inbounds %struct.hc_mb_def_dat, %struct.hc_mb_def_dat* %18, i32 0, i32 2
  %20 = load i32*, i32** %19, align 8
  store i32* %20, i32** %13, align 8
  store i8 0, i8* %14, align 1
  %21 = load i8, i8* %11, align 1
  %22 = zext i8 %21 to i32
  switch i32 %22, label %167 [
    i32 5, label %23
    i32 9, label %23
    i32 6, label %37
    i32 7, label %37
    i32 23, label %89
    i32 3, label %89
    i32 10, label %115
    i32 11, label %153
  ]

23:                                               ; preds = %6, %6
  %24 = load i32*, i32** %13, align 8
  %25 = load i32, i32* %9, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i32, i32* %24, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = load i32*, i32** %13, align 8
  %30 = load i32, i32* %10, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i32, i32* %29, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %28, %33
  br i1 %34, label %35, label %36

35:                                               ; preds = %23
  store i8 1, i8* %14, align 1
  br label %36

36:                                               ; preds = %35, %23
  br label %170

37:                                               ; preds = %6, %6
  %38 = load i32*, i32** %13, align 8
  %39 = load i32, i32* %7, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i32, i32* %38, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = load i32*, i32** %13, align 8
  %44 = load i32, i32* %9, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, i32* %43, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %42, %47
  br i1 %48, label %49, label %88

49:                                               ; preds = %37
  %50 = load i32*, i32** %13, align 8
  %51 = load i32, i32* %10, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i32, i32* %50, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = load i32*, i32** %13, align 8
  %56 = load i32, i32* %8, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %55, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = icmp eq i32 %54, %59
  br i1 %60, label %61, label %88

61:                                               ; preds = %49
  %62 = load i32*, i32** %13, align 8
  %63 = load i32, i32* %7, align 4
  %64 = sub nsw i32 %63, 1
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32, i32* %62, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = load i32*, i32** %13, align 8
  %69 = load i32, i32* %7, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i32, i32* %68, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %67, %72
  br i1 %73, label %74, label %88

74:                                               ; preds = %61
  %75 = load i32*, i32** %13, align 8
  %76 = load i32, i32* %8, align 4
  %77 = add nsw i32 %76, 1
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i32, i32* %75, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = load i32*, i32** %13, align 8
  %82 = load i32, i32* %8, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i32, i32* %81, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %80, %85
  br i1 %86, label %87, label %88

87:                                               ; preds = %74
  store i8 1, i8* %14, align 1
  br label %88

88:                                               ; preds = %87, %74, %61, %49, %37
  br label %170

89:                                               ; preds = %6, %6
  %90 = load i32*, i32** %13, align 8
  %91 = load i32, i32* %7, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i32, i32* %90, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = load i32*, i32** %13, align 8
  %96 = load i32, i32* %9, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i32, i32* %95, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %94, %99
  br i1 %100, label %101, label %114

101:                                              ; preds = %89
  %102 = load i32*, i32** %13, align 8
  %103 = load i32, i32* %10, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i32, i32* %102, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = load i32*, i32** %13, align 8
  %108 = load i32, i32* %8, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32, i32* %107, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = icmp eq i32 %106, %111
  br i1 %112, label %113, label %114

113:                                              ; preds = %101
  store i8 1, i8* %14, align 1
  br label %114

114:                                              ; preds = %113, %101, %89
  br label %170

115:                                              ; preds = %6
  %116 = load i32, i32* %7, align 4
  %117 = load i32, i32* %9, align 4
  %118 = sub nsw i32 %117, 1
  %119 = icmp eq i32 %116, %118
  br i1 %119, label %120, label %133

120:                                              ; preds = %115
  %121 = load i32*, i32** %13, align 8
  %122 = load i32, i32* %7, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i32, i32* %121, i64 %123
  %125 = load i32, i32* %124, align 4
  %126 = load i32*, i32** %13, align 8
  %127 = load i32, i32* %9, align 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i32, i32* %126, i64 %128
  %130 = load i32, i32* %129, align 4
  %131 = icmp eq i32 %125, %130
  br i1 %131, label %132, label %133

132:                                              ; preds = %120
  store i8 1, i8* %14, align 1
  br label %152

133:                                              ; preds = %120, %115
  %134 = load i32, i32* %10, align 4
  %135 = add nsw i32 %134, 1
  %136 = load i32, i32* %8, align 4
  %137 = icmp eq i32 %135, %136
  br i1 %137, label %138, label %151

138:                                              ; preds = %133
  %139 = load i32*, i32** %13, align 8
  %140 = load i32, i32* %10, align 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i32, i32* %139, i64 %141
  %143 = load i32, i32* %142, align 4
  %144 = load i32*, i32** %13, align 8
  %145 = load i32, i32* %8, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i32, i32* %144, i64 %146
  %148 = load i32, i32* %147, align 4
  %149 = icmp eq i32 %143, %148
  br i1 %149, label %150, label %151

150:                                              ; preds = %138
  store i8 1, i8* %14, align 1
  br label %151

151:                                              ; preds = %150, %138, %133
  br label %152

152:                                              ; preds = %151, %132
  br label %170

153:                                              ; preds = %6
  %154 = load i32*, i32** %13, align 8
  %155 = load i32, i32* %8, align 4
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i32, i32* %154, i64 %156
  %158 = load i32, i32* %157, align 4
  %159 = load i32*, i32** %13, align 8
  %160 = load i32, i32* %9, align 4
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i32, i32* %159, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = icmp eq i32 %158, %163
  br i1 %164, label %165, label %166

165:                                              ; preds = %153
  store i8 1, i8* %14, align 1
  br label %166

166:                                              ; preds = %165, %153
  br label %170

167:                                              ; preds = %6
  %168 = load i8, i8* %11, align 1
  %169 = zext i8 %168 to i32
  call void (i8*, ...) @vrna_message_warning(i8* noundef getelementptr inbounds ([56 x i8], [56 x i8]* @.str.8, i64 0, i64 0), i32 noundef %169)
  br label %170

170:                                              ; preds = %167, %166, %152, %114, %88, %36
  %171 = load i8, i8* %14, align 1
  ret i8 %171
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_red_user_def_to_ext(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_ext_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_ext_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_ext_exp_dat* %4, %struct.sc_ext_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %16 = call double @sc_ext_exp_cb_red(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_ext_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %22 = call double @sc_ext_exp_cb_red_user_to_ext(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_ext_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_red_user_def_to_stem(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_ext_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_ext_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_ext_exp_dat* %4, %struct.sc_ext_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %16 = call double @sc_ext_exp_cb_red(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_ext_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %22 = call double @sc_ext_exp_cb_red_user_to_stem(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_ext_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_up_user_def(i32 noundef %0, i32 noundef %1, %struct.sc_ext_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_ext_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_ext_exp_dat* %2, %struct.sc_ext_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %6, align 8
  %10 = call double @sc_ext_exp_cb_up(i32 noundef %7, i32 noundef %8, %struct.sc_ext_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %6, align 8
  %14 = call double @sc_ext_exp_cb_up_user(i32 noundef %11, i32 noundef %12, %struct.sc_ext_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_split_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, %struct.sc_ext_exp_dat* noundef %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.sc_ext_exp_dat*, align 8
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %struct.sc_ext_exp_dat* %3, %struct.sc_ext_exp_dat** %8, align 8
  %9 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %8, align 8
  %10 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %9, i32 0, i32 5
  %11 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %10, align 8
  %12 = load i32, i32* %5, align 4
  %13 = load i32, i32* %6, align 4
  %14 = load i32, i32* %7, align 4
  %15 = sub nsw i32 %14, 1
  %16 = load i32, i32* %7, align 4
  %17 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %8, align 8
  %18 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %17, i32 0, i32 6
  %19 = load i8*, i8** %18, align 8
  %20 = call double %11(i32 noundef %12, i32 noundef %13, i32 noundef %15, i32 noundef %16, i8 noundef zeroext 15, i8* noundef %19)
  ret double %20
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_red(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_ext_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_ext_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca double, align 8
  %15 = alloca double**, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_ext_exp_dat* %4, %struct.sc_ext_exp_dat** %10, align 8
  %16 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %17 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %16, i32 0, i32 0
  %18 = load double**, double*** %17, align 8
  store double** %18, double*** %15, align 8
  store double 1.000000e+00, double* %14, align 8
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %6, align 4
  %21 = sub nsw i32 %19, %20
  store i32 %21, i32* %12, align 4
  %22 = load i32, i32* %9, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %11, align 4
  %24 = load i32, i32* %7, align 4
  %25 = load i32, i32* %9, align 4
  %26 = sub nsw i32 %24, %25
  store i32 %26, i32* %13, align 4
  %27 = load i32, i32* %12, align 4
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %41

29:                                               ; preds = %5
  %30 = load double**, double*** %15, align 8
  %31 = load i32, i32* %6, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds double*, double** %30, i64 %32
  %34 = load double*, double** %33, align 8
  %35 = load i32, i32* %12, align 4
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds double, double* %34, i64 %36
  %38 = load double, double* %37, align 8
  %39 = load double, double* %14, align 8
  %40 = fmul double %39, %38
  store double %40, double* %14, align 8
  br label %41

41:                                               ; preds = %29, %5
  %42 = load i32, i32* %13, align 4
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %56

44:                                               ; preds = %41
  %45 = load double**, double*** %15, align 8
  %46 = load i32, i32* %11, align 4
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds double*, double** %45, i64 %47
  %49 = load double*, double** %48, align 8
  %50 = load i32, i32* %13, align 4
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds double, double* %49, i64 %51
  %53 = load double, double* %52, align 8
  %54 = load double, double* %14, align 8
  %55 = fmul double %54, %53
  store double %55, double* %14, align 8
  br label %56

56:                                               ; preds = %44, %41
  %57 = load double, double* %14, align 8
  ret double %57
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_up(i32 noundef %0, i32 noundef %1, %struct.sc_ext_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_ext_exp_dat*, align 8
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  %9 = alloca double**, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_ext_exp_dat* %2, %struct.sc_ext_exp_dat** %6, align 8
  %10 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %6, align 8
  %11 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %10, i32 0, i32 0
  %12 = load double**, double*** %11, align 8
  store double** %12, double*** %9, align 8
  %13 = load i32, i32* %5, align 4
  %14 = load i32, i32* %4, align 4
  %15 = sub nsw i32 %13, %14
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %7, align 4
  store double 1.000000e+00, double* %8, align 8
  %17 = load i32, i32* %7, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %31

19:                                               ; preds = %3
  %20 = load double**, double*** %9, align 8
  %21 = load i32, i32* %4, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds double*, double** %20, i64 %22
  %24 = load double*, double** %23, align 8
  %25 = load i32, i32* %7, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds double, double* %24, i64 %26
  %28 = load double, double* %27, align 8
  %29 = load double, double* %8, align 8
  %30 = fmul double %29, %28
  store double %30, double* %8, align 8
  br label %31

31:                                               ; preds = %19, %3
  %32 = load double, double* %8, align 8
  ret double %32
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_red_user_to_ext(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_ext_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_ext_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_ext_exp_dat* %4, %struct.sc_ext_exp_dat** %10, align 8
  %11 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %12 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %11, i32 0, i32 5
  %13 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %12, align 8
  %14 = load i32, i32* %6, align 4
  %15 = load i32, i32* %7, align 4
  %16 = load i32, i32* %8, align 4
  %17 = load i32, i32* %9, align 4
  %18 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %19 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %18, i32 0, i32 6
  %20 = load i8*, i8** %19, align 8
  %21 = call double %13(i32 noundef %14, i32 noundef %15, i32 noundef %16, i32 noundef %17, i8 noundef zeroext 12, i8* noundef %20)
  ret double %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_red_user_to_stem(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_ext_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_ext_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_ext_exp_dat* %4, %struct.sc_ext_exp_dat** %10, align 8
  %11 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %12 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %11, i32 0, i32 5
  %13 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %12, align 8
  %14 = load i32, i32* %6, align 4
  %15 = load i32, i32* %7, align 4
  %16 = load i32, i32* %8, align 4
  %17 = load i32, i32* %9, align 4
  %18 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %19 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %18, i32 0, i32 6
  %20 = load i8*, i8** %19, align 8
  %21 = call double %13(i32 noundef %14, i32 noundef %15, i32 noundef %16, i32 noundef %17, i8 noundef zeroext 14, i8* noundef %20)
  ret double %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_up_user(i32 noundef %0, i32 noundef %1, %struct.sc_ext_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_ext_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_ext_exp_dat* %2, %struct.sc_ext_exp_dat** %6, align 8
  %7 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %6, align 8
  %8 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %7, i32 0, i32 5
  %9 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %8, align 8
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %4, align 4
  %13 = load i32, i32* %5, align 4
  %14 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %6, align 8
  %15 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %14, i32 0, i32 6
  %16 = load i8*, i8** %15, align 8
  %17 = call double %9(i32 noundef %10, i32 noundef %11, i32 noundef %12, i32 noundef %13, i8 noundef zeroext 13, i8* noundef %16)
  ret double %17
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_red_user_def_to_ext_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_ext_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_ext_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_ext_exp_dat* %4, %struct.sc_ext_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %16 = call double @sc_ext_exp_cb_red_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_ext_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %22 = call double @sc_ext_exp_cb_red_user_to_ext_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_ext_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_red_user_def_to_stem_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_ext_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_ext_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_ext_exp_dat* %4, %struct.sc_ext_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %16 = call double @sc_ext_exp_cb_red_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_ext_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %22 = call double @sc_ext_exp_cb_red_user_to_stem_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_ext_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_up_user_def_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_ext_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_ext_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_ext_exp_dat* %2, %struct.sc_ext_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %6, align 8
  %10 = call double @sc_ext_exp_cb_up_comparative(i32 noundef %7, i32 noundef %8, %struct.sc_ext_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %6, align 8
  %14 = call double @sc_ext_exp_cb_up_user_comparative(i32 noundef %11, i32 noundef %12, %struct.sc_ext_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_split_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, %struct.sc_ext_exp_dat* noundef %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.sc_ext_exp_dat*, align 8
  %9 = alloca i32, align 4
  %10 = alloca double, align 8
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %struct.sc_ext_exp_dat* %3, %struct.sc_ext_exp_dat** %8, align 8
  store double 1.000000e+00, double* %10, align 8
  store i32 0, i32* %9, align 4
  br label %11

11:                                               ; preds = %40, %4
  %12 = load i32, i32* %9, align 4
  %13 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %8, align 8
  %14 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %13, i32 0, i32 7
  %15 = load i32, i32* %14, align 8
  %16 = icmp ult i32 %12, %15
  br i1 %16, label %17, label %43

17:                                               ; preds = %11
  %18 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %8, align 8
  %19 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %18, i32 0, i32 10
  %20 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %19, align 8
  %21 = load i32, i32* %9, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %20, i64 %22
  %24 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %23, align 8
  %25 = load i32, i32* %5, align 4
  %26 = load i32, i32* %6, align 4
  %27 = load i32, i32* %7, align 4
  %28 = sub nsw i32 %27, 1
  %29 = load i32, i32* %7, align 4
  %30 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %8, align 8
  %31 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %30, i32 0, i32 11
  %32 = load i8**, i8*** %31, align 8
  %33 = load i32, i32* %9, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds i8*, i8** %32, i64 %34
  %36 = load i8*, i8** %35, align 8
  %37 = call double %24(i32 noundef %25, i32 noundef %26, i32 noundef %28, i32 noundef %29, i8 noundef zeroext 15, i8* noundef %36)
  %38 = load double, double* %10, align 8
  %39 = fmul double %38, %37
  store double %39, double* %10, align 8
  br label %40

40:                                               ; preds = %17
  %41 = load i32, i32* %9, align 4
  %42 = add i32 %41, 1
  store i32 %42, i32* %9, align 4
  br label %11, !llvm.loop !126

43:                                               ; preds = %11
  %44 = load double, double* %10, align 8
  ret double %44
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_red_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_ext_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_ext_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32**, align 8
  %16 = alloca double, align 8
  %17 = alloca double***, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_ext_exp_dat* %4, %struct.sc_ext_exp_dat** %10, align 8
  %18 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %19 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %18, i32 0, i32 9
  %20 = load double***, double**** %19, align 8
  store double*** %20, double**** %17, align 8
  %21 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %22 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %21, i32 0, i32 8
  %23 = load i32**, i32*** %22, align 8
  store i32** %23, i32*** %15, align 8
  store double 1.000000e+00, double* %16, align 8
  store i32 0, i32* %11, align 4
  br label %24

24:                                               ; preds = %133, %5
  %25 = load i32, i32* %11, align 4
  %26 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %27 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %26, i32 0, i32 7
  %28 = load i32, i32* %27, align 8
  %29 = icmp ult i32 %25, %28
  br i1 %29, label %30, label %136

30:                                               ; preds = %24
  %31 = load double***, double**** %17, align 8
  %32 = load i32, i32* %11, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds double**, double*** %31, i64 %33
  %35 = load double**, double*** %34, align 8
  %36 = icmp ne double** %35, null
  br i1 %36, label %37, label %132

37:                                               ; preds = %30
  %38 = load i32**, i32*** %15, align 8
  %39 = load i32, i32* %11, align 4
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i32*, i32** %38, i64 %40
  %42 = load i32*, i32** %41, align 8
  %43 = load i32, i32* %8, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i32, i32* %42, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = load i32**, i32*** %15, align 8
  %48 = load i32, i32* %11, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i32*, i32** %47, i64 %49
  %51 = load i32*, i32** %50, align 8
  %52 = load i32, i32* %6, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i32, i32* %51, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = sub i32 %46, %55
  store i32 %56, i32* %13, align 4
  %57 = load i32**, i32*** %15, align 8
  %58 = load i32, i32* %11, align 4
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds i32*, i32** %57, i64 %59
  %61 = load i32*, i32** %60, align 8
  %62 = load i32, i32* %9, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %61, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = add i32 %65, 1
  store i32 %66, i32* %12, align 4
  %67 = load i32**, i32*** %15, align 8
  %68 = load i32, i32* %11, align 4
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds i32*, i32** %67, i64 %69
  %71 = load i32*, i32** %70, align 8
  %72 = load i32, i32* %7, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i32, i32* %71, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = load i32**, i32*** %15, align 8
  %77 = load i32, i32* %11, align 4
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i32*, i32** %76, i64 %78
  %80 = load i32*, i32** %79, align 8
  %81 = load i32, i32* %9, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i32, i32* %80, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = sub i32 %75, %84
  store i32 %85, i32* %14, align 4
  %86 = load i32, i32* %13, align 4
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %88, label %112

88:                                               ; preds = %37
  %89 = load double***, double**** %17, align 8
  %90 = load i32, i32* %11, align 4
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds double**, double*** %89, i64 %91
  %93 = load double**, double*** %92, align 8
  %94 = load i32**, i32*** %15, align 8
  %95 = load i32, i32* %11, align 4
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i32*, i32** %94, i64 %96
  %98 = load i32*, i32** %97, align 8
  %99 = load i32, i32* %6, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i32, i32* %98, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds double*, double** %93, i64 %103
  %105 = load double*, double** %104, align 8
  %106 = load i32, i32* %13, align 4
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds double, double* %105, i64 %107
  %109 = load double, double* %108, align 8
  %110 = load double, double* %16, align 8
  %111 = fmul double %110, %109
  store double %111, double* %16, align 8
  br label %112

112:                                              ; preds = %88, %37
  %113 = load i32, i32* %14, align 4
  %114 = icmp ne i32 %113, 0
  br i1 %114, label %115, label %131

115:                                              ; preds = %112
  %116 = load double***, double**** %17, align 8
  %117 = load i32, i32* %11, align 4
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds double**, double*** %116, i64 %118
  %120 = load double**, double*** %119, align 8
  %121 = load i32, i32* %12, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds double*, double** %120, i64 %122
  %124 = load double*, double** %123, align 8
  %125 = load i32, i32* %14, align 4
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds double, double* %124, i64 %126
  %128 = load double, double* %127, align 8
  %129 = load double, double* %16, align 8
  %130 = fmul double %129, %128
  store double %130, double* %16, align 8
  br label %131

131:                                              ; preds = %115, %112
  br label %132

132:                                              ; preds = %131, %30
  br label %133

133:                                              ; preds = %132
  %134 = load i32, i32* %11, align 4
  %135 = add i32 %134, 1
  store i32 %135, i32* %11, align 4
  br label %24, !llvm.loop !127

136:                                              ; preds = %24
  %137 = load double, double* %16, align 8
  ret double %137
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_up_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_ext_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_ext_exp_dat*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32**, align 8
  %10 = alloca double, align 8
  %11 = alloca double***, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_ext_exp_dat* %2, %struct.sc_ext_exp_dat** %6, align 8
  %12 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %6, align 8
  %13 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %12, i32 0, i32 8
  %14 = load i32**, i32*** %13, align 8
  store i32** %14, i32*** %9, align 8
  %15 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %6, align 8
  %16 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %15, i32 0, i32 9
  %17 = load double***, double**** %16, align 8
  store double*** %17, double**** %11, align 8
  store double 1.000000e+00, double* %10, align 8
  store i32 0, i32* %8, align 4
  br label %18

18:                                               ; preds = %72, %3
  %19 = load i32, i32* %8, align 4
  %20 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %6, align 8
  %21 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %20, i32 0, i32 7
  %22 = load i32, i32* %21, align 8
  %23 = icmp ult i32 %19, %22
  br i1 %23, label %24, label %75

24:                                               ; preds = %18
  %25 = load i32**, i32*** %9, align 8
  %26 = load i32, i32* %8, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds i32*, i32** %25, i64 %27
  %29 = load i32*, i32** %28, align 8
  %30 = load i32, i32* %5, align 4
  %31 = sub nsw i32 %30, 1
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %29, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = load i32**, i32*** %9, align 8
  %36 = load i32, i32* %8, align 4
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i32*, i32** %35, i64 %37
  %39 = load i32*, i32** %38, align 8
  %40 = load i32, i32* %4, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = sub i32 %34, %43
  store i32 %44, i32* %7, align 4
  %45 = load i32, i32* %7, align 4
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %71

47:                                               ; preds = %24
  %48 = load double***, double**** %11, align 8
  %49 = load i32, i32* %8, align 4
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds double**, double*** %48, i64 %50
  %52 = load double**, double*** %51, align 8
  %53 = load i32**, i32*** %9, align 8
  %54 = load i32, i32* %8, align 4
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i32*, i32** %53, i64 %55
  %57 = load i32*, i32** %56, align 8
  %58 = load i32, i32* %4, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i32, i32* %57, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds double*, double** %52, i64 %62
  %64 = load double*, double** %63, align 8
  %65 = load i32, i32* %7, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds double, double* %64, i64 %66
  %68 = load double, double* %67, align 8
  %69 = load double, double* %10, align 8
  %70 = fmul double %69, %68
  store double %70, double* %10, align 8
  br label %71

71:                                               ; preds = %47, %24
  br label %72

72:                                               ; preds = %71
  %73 = load i32, i32* %8, align 4
  %74 = add i32 %73, 1
  store i32 %74, i32* %8, align 4
  br label %18, !llvm.loop !128

75:                                               ; preds = %18
  %76 = load double, double* %10, align 8
  ret double %76
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_red_user_to_ext_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_ext_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_ext_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_ext_exp_dat* %4, %struct.sc_ext_exp_dat** %10, align 8
  store double 1.000000e+00, double* %12, align 8
  store i32 0, i32* %11, align 4
  br label %13

13:                                               ; preds = %41, %5
  %14 = load i32, i32* %11, align 4
  %15 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %16 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %15, i32 0, i32 7
  %17 = load i32, i32* %16, align 8
  %18 = icmp ult i32 %14, %17
  br i1 %18, label %19, label %44

19:                                               ; preds = %13
  %20 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %21 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %20, i32 0, i32 10
  %22 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %21, align 8
  %23 = load i32, i32* %11, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %22, i64 %24
  %26 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %25, align 8
  %27 = load i32, i32* %6, align 4
  %28 = load i32, i32* %7, align 4
  %29 = load i32, i32* %8, align 4
  %30 = load i32, i32* %9, align 4
  %31 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %32 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %31, i32 0, i32 11
  %33 = load i8**, i8*** %32, align 8
  %34 = load i32, i32* %11, align 4
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8*, i8** %33, i64 %35
  %37 = load i8*, i8** %36, align 8
  %38 = call double %26(i32 noundef %27, i32 noundef %28, i32 noundef %29, i32 noundef %30, i8 noundef zeroext 12, i8* noundef %37)
  %39 = load double, double* %12, align 8
  %40 = fmul double %39, %38
  store double %40, double* %12, align 8
  br label %41

41:                                               ; preds = %19
  %42 = load i32, i32* %11, align 4
  %43 = add i32 %42, 1
  store i32 %43, i32* %11, align 4
  br label %13, !llvm.loop !129

44:                                               ; preds = %13
  %45 = load double, double* %12, align 8
  ret double %45
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_red_user_to_stem_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_ext_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_ext_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_ext_exp_dat* %4, %struct.sc_ext_exp_dat** %10, align 8
  store double 1.000000e+00, double* %12, align 8
  store i32 0, i32* %11, align 4
  br label %13

13:                                               ; preds = %41, %5
  %14 = load i32, i32* %11, align 4
  %15 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %16 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %15, i32 0, i32 7
  %17 = load i32, i32* %16, align 8
  %18 = icmp ult i32 %14, %17
  br i1 %18, label %19, label %44

19:                                               ; preds = %13
  %20 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %21 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %20, i32 0, i32 10
  %22 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %21, align 8
  %23 = load i32, i32* %11, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %22, i64 %24
  %26 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %25, align 8
  %27 = load i32, i32* %6, align 4
  %28 = load i32, i32* %7, align 4
  %29 = load i32, i32* %8, align 4
  %30 = load i32, i32* %9, align 4
  %31 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %10, align 8
  %32 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %31, i32 0, i32 11
  %33 = load i8**, i8*** %32, align 8
  %34 = load i32, i32* %11, align 4
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i8*, i8** %33, i64 %35
  %37 = load i8*, i8** %36, align 8
  %38 = call double %26(i32 noundef %27, i32 noundef %28, i32 noundef %29, i32 noundef %30, i8 noundef zeroext 14, i8* noundef %37)
  %39 = load double, double* %12, align 8
  %40 = fmul double %39, %38
  store double %40, double* %12, align 8
  br label %41

41:                                               ; preds = %19
  %42 = load i32, i32* %11, align 4
  %43 = add i32 %42, 1
  store i32 %43, i32* %11, align 4
  br label %13, !llvm.loop !130

44:                                               ; preds = %13
  %45 = load double, double* %12, align 8
  ret double %45
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_ext_exp_cb_up_user_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_ext_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_ext_exp_dat*, align 8
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_ext_exp_dat* %2, %struct.sc_ext_exp_dat** %6, align 8
  store double 1.000000e+00, double* %8, align 8
  store i32 0, i32* %7, align 4
  br label %9

9:                                                ; preds = %37, %3
  %10 = load i32, i32* %7, align 4
  %11 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %6, align 8
  %12 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %11, i32 0, i32 7
  %13 = load i32, i32* %12, align 8
  %14 = icmp ult i32 %10, %13
  br i1 %14, label %15, label %40

15:                                               ; preds = %9
  %16 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %6, align 8
  %17 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %16, i32 0, i32 10
  %18 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %17, align 8
  %19 = load i32, i32* %7, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %18, i64 %20
  %22 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %21, align 8
  %23 = load i32, i32* %4, align 4
  %24 = load i32, i32* %5, align 4
  %25 = load i32, i32* %4, align 4
  %26 = load i32, i32* %5, align 4
  %27 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %6, align 8
  %28 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %27, i32 0, i32 11
  %29 = load i8**, i8*** %28, align 8
  %30 = load i32, i32* %7, align 4
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i8*, i8** %29, i64 %31
  %33 = load i8*, i8** %32, align 8
  %34 = call double %22(i32 noundef %23, i32 noundef %24, i32 noundef %25, i32 noundef %26, i8 noundef zeroext 13, i8* noundef %33)
  %35 = load double, double* %8, align 8
  %36 = fmul double %35, %34
  store double %36, double* %8, align 8
  br label %37

37:                                               ; preds = %15
  %38 = load i32, i32* %7, align 4
  %39 = add i32 %38, 1
  store i32 %39, i32* %7, align 4
  br label %9, !llvm.loop !131

40:                                               ; preds = %9
  %41 = load double, double* %8, align 8
  ret double %41
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_ext_user(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %8 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %7, i32 0, i32 10
  %9 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %8, align 8
  %10 = load i32, i32* %5, align 4
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load i32, i32* %4, align 4
  %14 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %15 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %14, i32 0, i32 11
  %16 = load i8*, i8** %15, align 8
  %17 = call double %9(i32 noundef %10, i32 noundef %11, i32 noundef %12, i32 noundef %13, i8 noundef zeroext 1, i8* noundef %16)
  ret double %17
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_ext_up_user(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_ext_up(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_ext_user(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_up_bp_local_user(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_up(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_bp_local(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  %16 = load i32, i32* %4, align 4
  %17 = load i32, i32* %5, align 4
  %18 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %19 = call double @sc_hp_exp_cb_user(i32 noundef %16, i32 noundef %17, %struct.sc_hp_exp_dat* noundef %18)
  %20 = fmul double %15, %19
  ret double %20
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_up_bp_user(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_up(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_bp(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  %16 = load i32, i32* %4, align 4
  %17 = load i32, i32* %5, align 4
  %18 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %19 = call double @sc_hp_exp_cb_user(i32 noundef %16, i32 noundef %17, %struct.sc_hp_exp_dat* noundef %18)
  %20 = fmul double %15, %19
  ret double %20
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_up_user(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_up(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_user(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_bp_local_user(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_bp_local(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_user(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_bp_user(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_bp(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_user(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_user(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %8 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %7, i32 0, i32 10
  %9 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %8, align 8
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %4, align 4
  %13 = load i32, i32* %5, align 4
  %14 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %15 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %14, i32 0, i32 11
  %16 = load i8*, i8** %15, align 8
  %17 = call double %9(i32 noundef %10, i32 noundef %11, i32 noundef %12, i32 noundef %13, i8 noundef zeroext 1, i8* noundef %16)
  ret double %17
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_ext_up(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %10 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %11 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %10, i32 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = load i32, i32* %5, align 4
  %14 = sub nsw i32 %12, %13
  store i32 %14, i32* %8, align 4
  %15 = load i32, i32* %4, align 4
  %16 = sub nsw i32 %15, 1
  store i32 %16, i32* %9, align 4
  store double 1.000000e+00, double* %7, align 8
  %17 = load i32, i32* %8, align 4
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %19, label %34

19:                                               ; preds = %3
  %20 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %21 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %20, i32 0, i32 4
  %22 = load double**, double*** %21, align 8
  %23 = load i32, i32* %5, align 4
  %24 = add nsw i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds double*, double** %22, i64 %25
  %27 = load double*, double** %26, align 8
  %28 = load i32, i32* %8, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %27, i64 %29
  %31 = load double, double* %30, align 8
  %32 = load double, double* %7, align 8
  %33 = fmul double %32, %31
  store double %33, double* %7, align 8
  br label %34

34:                                               ; preds = %19, %3
  %35 = load i32, i32* %9, align 4
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %49

37:                                               ; preds = %34
  %38 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %39 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %38, i32 0, i32 4
  %40 = load double**, double*** %39, align 8
  %41 = getelementptr inbounds double*, double** %40, i64 1
  %42 = load double*, double** %41, align 8
  %43 = load i32, i32* %9, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds double, double* %42, i64 %44
  %46 = load double, double* %45, align 8
  %47 = load double, double* %7, align 8
  %48 = fmul double %47, %46
  store double %48, double* %7, align 8
  br label %49

49:                                               ; preds = %37, %34
  %50 = load double, double* %7, align 8
  ret double %50
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_up_bp_local(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_up(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_bp_local(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_up_bp(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_up(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_bp(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_up(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %8 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %7, i32 0, i32 4
  %9 = load double**, double*** %8, align 8
  %10 = load i32, i32* %4, align 4
  %11 = add nsw i32 %10, 1
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds double*, double** %9, i64 %12
  %14 = load double*, double** %13, align 8
  %15 = load i32, i32* %5, align 4
  %16 = load i32, i32* %4, align 4
  %17 = sub nsw i32 %15, %16
  %18 = sub nsw i32 %17, 1
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds double, double* %14, i64 %19
  %21 = load double, double* %20, align 8
  ret double %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_bp_local(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %8 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %7, i32 0, i32 8
  %9 = load double**, double*** %8, align 8
  %10 = load i32, i32* %4, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds double*, double** %9, i64 %11
  %13 = load double*, double** %12, align 8
  %14 = load i32, i32* %5, align 4
  %15 = load i32, i32* %4, align 4
  %16 = sub nsw i32 %14, %15
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds double, double* %13, i64 %17
  %19 = load double, double* %18, align 8
  ret double %19
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_bp(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %8 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %7, i32 0, i32 6
  %9 = load double*, double** %8, align 8
  %10 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %11 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %10, i32 0, i32 3
  %12 = load i32*, i32** %11, align 8
  %13 = load i32, i32* %5, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i32, i32* %12, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds double, double* %9, i64 %19
  %21 = load double, double* %20, align 8
  ret double %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_ext_user_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  store double 1.000000e+00, double* %8, align 8
  store i32 0, i32* %7, align 4
  br label %9

9:                                                ; preds = %47, %3
  %10 = load i32, i32* %7, align 4
  %11 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %12 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %11, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %10, %13
  br i1 %14, label %15, label %50

15:                                               ; preds = %9
  %16 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %17 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %16, i32 0, i32 12
  %18 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %17, align 8
  %19 = load i32, i32* %7, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %18, i64 %20
  %22 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %21, align 8
  %23 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %22, null
  br i1 %23, label %24, label %46

24:                                               ; preds = %15
  %25 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %26 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %25, i32 0, i32 12
  %27 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %26, align 8
  %28 = load i32, i32* %7, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %27, i64 %29
  %31 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %30, align 8
  %32 = load i32, i32* %5, align 4
  %33 = load i32, i32* %4, align 4
  %34 = load i32, i32* %5, align 4
  %35 = load i32, i32* %4, align 4
  %36 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %37 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %36, i32 0, i32 13
  %38 = load i8**, i8*** %37, align 8
  %39 = load i32, i32* %7, align 4
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i8*, i8** %38, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call double %31(i32 noundef %32, i32 noundef %33, i32 noundef %34, i32 noundef %35, i8 noundef zeroext 1, i8* noundef %42)
  %44 = load double, double* %8, align 8
  %45 = fmul double %44, %43
  store double %45, double* %8, align 8
  br label %46

46:                                               ; preds = %24, %15
  br label %47

47:                                               ; preds = %46
  %48 = load i32, i32* %7, align 4
  %49 = add i32 %48, 1
  store i32 %49, i32* %7, align 4
  br label %9, !llvm.loop !132

50:                                               ; preds = %9
  %51 = load double, double* %8, align 8
  ret double %51
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_ext_up_user_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_ext_up_comparative(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_ext_user_comparative(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_up_bp_local_user_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_up_comparative(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_bp_local_comparative(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  %16 = load i32, i32* %4, align 4
  %17 = load i32, i32* %5, align 4
  %18 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %19 = call double @sc_hp_exp_cb_user_comparative(i32 noundef %16, i32 noundef %17, %struct.sc_hp_exp_dat* noundef %18)
  %20 = fmul double %15, %19
  ret double %20
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_up_bp_user_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_up_comparative(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_bp_comparative(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  %16 = load i32, i32* %4, align 4
  %17 = load i32, i32* %5, align 4
  %18 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %19 = call double @sc_hp_exp_cb_user_comparative(i32 noundef %16, i32 noundef %17, %struct.sc_hp_exp_dat* noundef %18)
  %20 = fmul double %15, %19
  ret double %20
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_up_user_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_up_comparative(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_user_comparative(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_bp_local_user_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_bp_local_comparative(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_user_comparative(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_bp_user_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_bp_comparative(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_user_comparative(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_user_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  store double 1.000000e+00, double* %8, align 8
  store i32 0, i32* %7, align 4
  br label %9

9:                                                ; preds = %47, %3
  %10 = load i32, i32* %7, align 4
  %11 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %12 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %11, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %10, %13
  br i1 %14, label %15, label %50

15:                                               ; preds = %9
  %16 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %17 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %16, i32 0, i32 12
  %18 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %17, align 8
  %19 = load i32, i32* %7, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %18, i64 %20
  %22 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %21, align 8
  %23 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %22, null
  br i1 %23, label %24, label %46

24:                                               ; preds = %15
  %25 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %26 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %25, i32 0, i32 12
  %27 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %26, align 8
  %28 = load i32, i32* %7, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %27, i64 %29
  %31 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %30, align 8
  %32 = load i32, i32* %4, align 4
  %33 = load i32, i32* %5, align 4
  %34 = load i32, i32* %4, align 4
  %35 = load i32, i32* %5, align 4
  %36 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %37 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %36, i32 0, i32 13
  %38 = load i8**, i8*** %37, align 8
  %39 = load i32, i32* %7, align 4
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i8*, i8** %38, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = call double %31(i32 noundef %32, i32 noundef %33, i32 noundef %34, i32 noundef %35, i8 noundef zeroext 1, i8* noundef %42)
  %44 = load double, double* %8, align 8
  %45 = fmul double %44, %43
  store double %45, double* %8, align 8
  br label %46

46:                                               ; preds = %24, %15
  br label %47

47:                                               ; preds = %46
  %48 = load i32, i32* %7, align 4
  %49 = add i32 %48, 1
  store i32 %49, i32* %7, align 4
  br label %9, !llvm.loop !133

50:                                               ; preds = %9
  %51 = load double, double* %8, align 8
  ret double %51
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_ext_up_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  store double 1.000000e+00, double* %8, align 8
  store i32 0, i32* %7, align 4
  br label %11

11:                                               ; preds = %108, %3
  %12 = load i32, i32* %7, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %13, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp ult i32 %12, %15
  br i1 %16, label %17, label %111

17:                                               ; preds = %11
  %18 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %19 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %18, i32 0, i32 5
  %20 = load double***, double**** %19, align 8
  %21 = load i32, i32* %7, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds double**, double*** %20, i64 %22
  %24 = load double**, double*** %23, align 8
  %25 = icmp ne double** %24, null
  br i1 %25, label %26, label %107

26:                                               ; preds = %17
  %27 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %28 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %27, i32 0, i32 2
  %29 = load i32**, i32*** %28, align 8
  %30 = load i32, i32* %7, align 4
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i32*, i32** %29, i64 %31
  %33 = load i32*, i32** %32, align 8
  %34 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %35 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %34, i32 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i32, i32* %33, i64 %37
  %39 = load i32, i32* %38, align 4
  %40 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %41 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %40, i32 0, i32 2
  %42 = load i32**, i32*** %41, align 8
  %43 = load i32, i32* %7, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i32*, i32** %42, i64 %44
  %46 = load i32*, i32** %45, align 8
  %47 = load i32, i32* %5, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i32, i32* %46, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = sub i32 %39, %50
  store i32 %51, i32* %9, align 4
  %52 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %53 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %52, i32 0, i32 2
  %54 = load i32**, i32*** %53, align 8
  %55 = load i32, i32* %7, align 4
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i32*, i32** %54, i64 %56
  %58 = load i32*, i32** %57, align 8
  %59 = load i32, i32* %4, align 4
  %60 = sub nsw i32 %59, 1
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, i32* %58, i64 %61
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %10, align 4
  %64 = load i32, i32* %9, align 4
  %65 = icmp sgt i32 %64, 0
  br i1 %65, label %66, label %91

66:                                               ; preds = %26
  %67 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %68 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %67, i32 0, i32 4
  %69 = load double**, double*** %68, align 8
  %70 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %71 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %70, i32 0, i32 2
  %72 = load i32**, i32*** %71, align 8
  %73 = load i32, i32* %7, align 4
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds i32*, i32** %72, i64 %74
  %76 = load i32*, i32** %75, align 8
  %77 = load i32, i32* %5, align 4
  %78 = add nsw i32 %77, 1
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i32, i32* %76, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds double*, double** %69, i64 %82
  %84 = load double*, double** %83, align 8
  %85 = load i32, i32* %9, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds double, double* %84, i64 %86
  %88 = load double, double* %87, align 8
  %89 = load double, double* %8, align 8
  %90 = fmul double %89, %88
  store double %90, double* %8, align 8
  br label %91

91:                                               ; preds = %66, %26
  %92 = load i32, i32* %10, align 4
  %93 = icmp sgt i32 %92, 0
  br i1 %93, label %94, label %106

94:                                               ; preds = %91
  %95 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %96 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %95, i32 0, i32 4
  %97 = load double**, double*** %96, align 8
  %98 = getelementptr inbounds double*, double** %97, i64 1
  %99 = load double*, double** %98, align 8
  %100 = load i32, i32* %10, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds double, double* %99, i64 %101
  %103 = load double, double* %102, align 8
  %104 = load double, double* %8, align 8
  %105 = fmul double %104, %103
  store double %105, double* %8, align 8
  br label %106

106:                                              ; preds = %94, %91
  br label %107

107:                                              ; preds = %106, %17
  br label %108

108:                                              ; preds = %107
  %109 = load i32, i32* %7, align 4
  %110 = add i32 %109, 1
  store i32 %110, i32* %7, align 4
  br label %11, !llvm.loop !134

111:                                              ; preds = %11
  %112 = load double, double* %8, align 8
  ret double %112
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_up_bp_local_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_up_comparative(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_bp_local_comparative(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_up_bp_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %10 = call double @sc_hp_exp_cb_up_comparative(i32 noundef %7, i32 noundef %8, %struct.sc_hp_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %14 = call double @sc_hp_exp_cb_bp_comparative(i32 noundef %11, i32 noundef %12, %struct.sc_hp_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_up_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  %9 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  store double 1.000000e+00, double* %8, align 8
  store i32 0, i32* %7, align 4
  br label %10

10:                                               ; preds = %79, %3
  %11 = load i32, i32* %7, align 4
  %12 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %13 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %12, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp ult i32 %11, %14
  br i1 %15, label %16, label %82

16:                                               ; preds = %10
  %17 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %18 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %17, i32 0, i32 5
  %19 = load double***, double**** %18, align 8
  %20 = load i32, i32* %7, align 4
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds double**, double*** %19, i64 %21
  %23 = load double**, double*** %22, align 8
  %24 = icmp ne double** %23, null
  br i1 %24, label %25, label %78

25:                                               ; preds = %16
  %26 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %27 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %26, i32 0, i32 2
  %28 = load i32**, i32*** %27, align 8
  %29 = load i32, i32* %7, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds i32*, i32** %28, i64 %30
  %32 = load i32*, i32** %31, align 8
  %33 = load i32, i32* %5, align 4
  %34 = sub nsw i32 %33, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i32, i32* %32, i64 %35
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %39 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %38, i32 0, i32 2
  %40 = load i32**, i32*** %39, align 8
  %41 = load i32, i32* %7, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i32*, i32** %40, i64 %42
  %44 = load i32*, i32** %43, align 8
  %45 = load i32, i32* %4, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32* %44, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = sub i32 %37, %48
  store i32 %49, i32* %9, align 4
  %50 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %51 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %50, i32 0, i32 5
  %52 = load double***, double**** %51, align 8
  %53 = load i32, i32* %7, align 4
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds double**, double*** %52, i64 %54
  %56 = load double**, double*** %55, align 8
  %57 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %58 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %57, i32 0, i32 2
  %59 = load i32**, i32*** %58, align 8
  %60 = load i32, i32* %7, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds i32*, i32** %59, i64 %61
  %63 = load i32*, i32** %62, align 8
  %64 = load i32, i32* %4, align 4
  %65 = add nsw i32 %64, 1
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i32, i32* %63, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds double*, double** %56, i64 %69
  %71 = load double*, double** %70, align 8
  %72 = load i32, i32* %9, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds double, double* %71, i64 %73
  %75 = load double, double* %74, align 8
  %76 = load double, double* %8, align 8
  %77 = fmul double %76, %75
  store double %77, double* %8, align 8
  br label %78

78:                                               ; preds = %25, %16
  br label %79

79:                                               ; preds = %78
  %80 = load i32, i32* %7, align 4
  %81 = add i32 %80, 1
  store i32 %81, i32* %7, align 4
  br label %10, !llvm.loop !135

82:                                               ; preds = %10
  %83 = load double, double* %8, align 8
  ret double %83
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_bp_local_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  store double 1.000000e+00, double* %8, align 8
  store i32 0, i32* %7, align 4
  br label %9

9:                                                ; preds = %45, %3
  %10 = load i32, i32* %7, align 4
  %11 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %12 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %11, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %10, %13
  br i1 %14, label %15, label %48

15:                                               ; preds = %9
  %16 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %17 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %16, i32 0, i32 9
  %18 = load double***, double**** %17, align 8
  %19 = load i32, i32* %7, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds double**, double*** %18, i64 %20
  %22 = load double**, double*** %21, align 8
  %23 = icmp ne double** %22, null
  br i1 %23, label %24, label %44

24:                                               ; preds = %15
  %25 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %26 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %25, i32 0, i32 9
  %27 = load double***, double**** %26, align 8
  %28 = load i32, i32* %7, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds double**, double*** %27, i64 %29
  %31 = load double**, double*** %30, align 8
  %32 = load i32, i32* %4, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds double*, double** %31, i64 %33
  %35 = load double*, double** %34, align 8
  %36 = load i32, i32* %5, align 4
  %37 = load i32, i32* %4, align 4
  %38 = sub nsw i32 %36, %37
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds double, double* %35, i64 %39
  %41 = load double, double* %40, align 8
  %42 = load double, double* %8, align 8
  %43 = fmul double %42, %41
  store double %43, double* %8, align 8
  br label %44

44:                                               ; preds = %24, %15
  br label %45

45:                                               ; preds = %44
  %46 = load i32, i32* %7, align 4
  %47 = add i32 %46, 1
  store i32 %47, i32* %7, align 4
  br label %9, !llvm.loop !136

48:                                               ; preds = %9
  %49 = load double, double* %8, align 8
  ret double %49
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_hp_exp_cb_bp_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_hp_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_hp_exp_dat*, align 8
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_hp_exp_dat* %2, %struct.sc_hp_exp_dat** %6, align 8
  store double 1.000000e+00, double* %8, align 8
  store i32 0, i32* %7, align 4
  br label %9

9:                                                ; preds = %47, %3
  %10 = load i32, i32* %7, align 4
  %11 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %12 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %11, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %10, %13
  br i1 %14, label %15, label %50

15:                                               ; preds = %9
  %16 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %17 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %16, i32 0, i32 7
  %18 = load double**, double*** %17, align 8
  %19 = load i32, i32* %7, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds double*, double** %18, i64 %20
  %22 = load double*, double** %21, align 8
  %23 = icmp ne double* %22, null
  br i1 %23, label %24, label %46

24:                                               ; preds = %15
  %25 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %26 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %25, i32 0, i32 7
  %27 = load double**, double*** %26, align 8
  %28 = load i32, i32* %7, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds double*, double** %27, i64 %29
  %31 = load double*, double** %30, align 8
  %32 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %6, align 8
  %33 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %32, i32 0, i32 3
  %34 = load i32*, i32** %33, align 8
  %35 = load i32, i32* %5, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32, i32* %4, align 4
  %40 = add nsw i32 %38, %39
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds double, double* %31, i64 %41
  %43 = load double, double* %42, align 8
  %44 = load double, double* %8, align 8
  %45 = fmul double %44, %43
  store double %45, double* %8, align 8
  br label %46

46:                                               ; preds = %24, %15
  br label %47

47:                                               ; preds = %46
  %48 = load i32, i32* %7, align 4
  %49 = add i32 %48, 1
  store i32 %49, i32* %7, align 4
  br label %9, !llvm.loop !137

50:                                               ; preds = %9
  %51 = load double, double* %8, align 8
  ret double %51
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_local_stack_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp_local(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_stack(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  %31 = load i32, i32* %6, align 4
  %32 = load i32, i32* %7, align 4
  %33 = load i32, i32* %8, align 4
  %34 = load i32, i32* %9, align 4
  %35 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %36 = call double @sc_int_exp_cb_user(i32 noundef %31, i32 noundef %32, i32 noundef %33, i32 noundef %34, %struct.sc_int_exp_dat* noundef %35)
  %37 = fmul double %30, %36
  ret double %37
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_stack_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_stack(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  %31 = load i32, i32* %6, align 4
  %32 = load i32, i32* %7, align 4
  %33 = load i32, i32* %8, align 4
  %34 = load i32, i32* %9, align 4
  %35 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %36 = call double @sc_int_exp_cb_user(i32 noundef %31, i32 noundef %32, i32 noundef %33, i32 noundef %34, %struct.sc_int_exp_dat* noundef %35)
  %37 = fmul double %30, %36
  ret double %37
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_ext_up_stack_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_ext_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_ext_stack(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_ext_user(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_local_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp_local(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_user(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_user(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_ext_up_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_ext_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_ext_user(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_stack_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_stack(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_user(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_user(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_local_stack_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_bp_local(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_stack(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_user(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_stack_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_bp(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_stack(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_user(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_ext_stack_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_ext_stack(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_ext_user(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_local_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_bp_local(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_user(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_bp(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_user(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_ext_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %12 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %11, i32 0, i32 12
  %13 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %12, align 8
  %14 = load i32, i32* %6, align 4
  %15 = load i32, i32* %7, align 4
  %16 = load i32, i32* %8, align 4
  %17 = load i32, i32* %9, align 4
  %18 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %19 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %18, i32 0, i32 13
  %20 = load i8*, i8** %19, align 8
  %21 = call double %13(i32 noundef %14, i32 noundef %15, i32 noundef %16, i32 noundef %17, i8 noundef zeroext 2, i8* noundef %20)
  ret double %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_stack_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_stack(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_user(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %12 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %11, i32 0, i32 12
  %13 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %12, align 8
  %14 = load i32, i32* %6, align 4
  %15 = load i32, i32* %7, align 4
  %16 = load i32, i32* %8, align 4
  %17 = load i32, i32* %9, align 4
  %18 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %19 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %18, i32 0, i32 13
  %20 = load i8*, i8** %19, align 8
  %21 = call double %13(i32 noundef %14, i32 noundef %15, i32 noundef %16, i32 noundef %17, i8 noundef zeroext 2, i8* noundef %20)
  ret double %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_local_stack(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp_local(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_stack(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_stack(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_stack(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_ext_up_stack(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_ext_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_ext_stack(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_local(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp_local(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_ext_up(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  store double 1.000000e+00, double* %14, align 8
  %15 = load i32, i32* %6, align 4
  %16 = sub nsw i32 %15, 1
  store i32 %16, i32* %11, align 4
  %17 = load i32, i32* %8, align 4
  %18 = load i32, i32* %7, align 4
  %19 = sub nsw i32 %17, %18
  %20 = sub nsw i32 %19, 1
  store i32 %20, i32* %12, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %21, i32 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = load i32, i32* %9, align 4
  %25 = sub i32 %23, %24
  store i32 %25, i32* %13, align 4
  %26 = load i32, i32* %11, align 4
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %40

28:                                               ; preds = %5
  %29 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %30 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %29, i32 0, i32 4
  %31 = load double**, double*** %30, align 8
  %32 = getelementptr inbounds double*, double** %31, i64 1
  %33 = load double*, double** %32, align 8
  %34 = load i32, i32* %11, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds double, double* %33, i64 %35
  %37 = load double, double* %36, align 8
  %38 = load double, double* %14, align 8
  %39 = fmul double %38, %37
  store double %39, double* %14, align 8
  br label %40

40:                                               ; preds = %28, %5
  %41 = load i32, i32* %12, align 4
  %42 = icmp sgt i32 %41, 0
  br i1 %42, label %43, label %58

43:                                               ; preds = %40
  %44 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %45 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %44, i32 0, i32 4
  %46 = load double**, double*** %45, align 8
  %47 = load i32, i32* %7, align 4
  %48 = add nsw i32 %47, 1
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds double*, double** %46, i64 %49
  %51 = load double*, double** %50, align 8
  %52 = load i32, i32* %12, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds double, double* %51, i64 %53
  %55 = load double, double* %54, align 8
  %56 = load double, double* %14, align 8
  %57 = fmul double %56, %55
  store double %57, double* %14, align 8
  br label %58

58:                                               ; preds = %43, %40
  %59 = load i32, i32* %13, align 4
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %61, label %76

61:                                               ; preds = %58
  %62 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %63 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %62, i32 0, i32 4
  %64 = load double**, double*** %63, align 8
  %65 = load i32, i32* %9, align 4
  %66 = add nsw i32 %65, 1
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds double*, double** %64, i64 %67
  %69 = load double*, double** %68, align 8
  %70 = load i32, i32* %13, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds double, double* %69, i64 %71
  %73 = load double, double* %72, align 8
  %74 = load double, double* %14, align 8
  %75 = fmul double %74, %73
  store double %75, double* %14, align 8
  br label %76

76:                                               ; preds = %61, %58
  %77 = load double, double* %14, align 8
  ret double %77
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_local_stack(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_bp_local(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_stack(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_stack(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_bp(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_stack(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_ext_stack(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  %11 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  store double 1.000000e+00, double* %11, align 8
  %12 = load i32, i32* %6, align 4
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %59

14:                                               ; preds = %5
  %15 = load i32, i32* %7, align 4
  %16 = add nsw i32 %15, 1
  %17 = load i32, i32* %8, align 4
  %18 = icmp eq i32 %16, %17
  br i1 %18, label %19, label %59

19:                                               ; preds = %14
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %21, i32 0, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %20, %23
  br i1 %24, label %25, label %59

25:                                               ; preds = %19
  %26 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %27 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %26, i32 0, i32 10
  %28 = load double*, double** %27, align 8
  %29 = load i32, i32* %6, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds double, double* %28, i64 %30
  %32 = load double, double* %31, align 8
  %33 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %34 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %33, i32 0, i32 10
  %35 = load double*, double** %34, align 8
  %36 = load i32, i32* %8, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds double, double* %35, i64 %37
  %39 = load double, double* %38, align 8
  %40 = fmul double %32, %39
  %41 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %42 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %41, i32 0, i32 10
  %43 = load double*, double** %42, align 8
  %44 = load i32, i32* %9, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds double, double* %43, i64 %45
  %47 = load double, double* %46, align 8
  %48 = fmul double %40, %47
  %49 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %50 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %49, i32 0, i32 10
  %51 = load double*, double** %50, align 8
  %52 = load i32, i32* %7, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds double, double* %51, i64 %53
  %55 = load double, double* %54, align 8
  %56 = fmul double %48, %55
  %57 = load double, double* %11, align 8
  %58 = fmul double %57, %56
  store double %58, double* %11, align 8
  br label %59

59:                                               ; preds = %25, %19, %14, %5
  %60 = load double, double* %11, align 8
  ret double %60
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_local(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %12 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %11, i32 0, i32 8
  %13 = load double**, double*** %12, align 8
  %14 = load i32, i32* %6, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds double*, double** %13, i64 %15
  %17 = load double*, double** %16, align 8
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %6, align 4
  %20 = sub nsw i32 %18, %19
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds double, double* %17, i64 %21
  %23 = load double, double* %22, align 8
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %12 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %11, i32 0, i32 6
  %13 = load double*, double** %12, align 8
  %14 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %15 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %14, i32 0, i32 3
  %16 = load i32*, i32** %15, align 8
  %17 = load i32, i32* %7, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i32, i32* %16, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = load i32, i32* %6, align 4
  %22 = add nsw i32 %20, %21
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds double, double* %13, i64 %23
  %25 = load double, double* %24, align 8
  ret double %25
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_stack(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_stack(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %14 = load i32, i32* %8, align 4
  %15 = load i32, i32* %6, align 4
  %16 = sub nsw i32 %14, %15
  %17 = sub nsw i32 %16, 1
  store i32 %17, i32* %11, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %9, align 4
  %20 = sub nsw i32 %18, %19
  %21 = sub nsw i32 %20, 1
  store i32 %21, i32* %12, align 4
  store double 1.000000e+00, double* %13, align 8
  %22 = load i32, i32* %11, align 4
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %39

24:                                               ; preds = %5
  %25 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %26 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %25, i32 0, i32 4
  %27 = load double**, double*** %26, align 8
  %28 = load i32, i32* %6, align 4
  %29 = add nsw i32 %28, 1
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds double*, double** %27, i64 %30
  %32 = load double*, double** %31, align 8
  %33 = load i32, i32* %11, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds double, double* %32, i64 %34
  %36 = load double, double* %35, align 8
  %37 = load double, double* %13, align 8
  %38 = fmul double %37, %36
  store double %38, double* %13, align 8
  br label %39

39:                                               ; preds = %24, %5
  %40 = load i32, i32* %12, align 4
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %57

42:                                               ; preds = %39
  %43 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %44 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %43, i32 0, i32 4
  %45 = load double**, double*** %44, align 8
  %46 = load i32, i32* %9, align 4
  %47 = add nsw i32 %46, 1
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds double*, double** %45, i64 %48
  %50 = load double*, double** %49, align 8
  %51 = load i32, i32* %12, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds double, double* %50, i64 %52
  %54 = load double, double* %53, align 8
  %55 = load double, double* %13, align 8
  %56 = fmul double %55, %54
  store double %56, double* %13, align 8
  br label %57

57:                                               ; preds = %42, %39
  %58 = load double, double* %13, align 8
  ret double %58
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_stack(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  %11 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  store double 1.000000e+00, double* %11, align 8
  %12 = load i32, i32* %6, align 4
  %13 = add nsw i32 %12, 1
  %14 = load i32, i32* %8, align 4
  %15 = icmp eq i32 %13, %14
  br i1 %15, label %16, label %55

16:                                               ; preds = %5
  %17 = load i32, i32* %9, align 4
  %18 = add nsw i32 %17, 1
  %19 = load i32, i32* %7, align 4
  %20 = icmp eq i32 %18, %19
  br i1 %20, label %21, label %55

21:                                               ; preds = %16
  %22 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %23 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %22, i32 0, i32 10
  %24 = load double*, double** %23, align 8
  %25 = load i32, i32* %6, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds double, double* %24, i64 %26
  %28 = load double, double* %27, align 8
  %29 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %30 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %29, i32 0, i32 10
  %31 = load double*, double** %30, align 8
  %32 = load i32, i32* %8, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds double, double* %31, i64 %33
  %35 = load double, double* %34, align 8
  %36 = fmul double %28, %35
  %37 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %38 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %37, i32 0, i32 10
  %39 = load double*, double** %38, align 8
  %40 = load i32, i32* %9, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds double, double* %39, i64 %41
  %43 = load double, double* %42, align 8
  %44 = fmul double %36, %43
  %45 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %46 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %45, i32 0, i32 10
  %47 = load double*, double** %46, align 8
  %48 = load i32, i32* %7, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds double, double* %47, i64 %49
  %51 = load double, double* %50, align 8
  %52 = fmul double %44, %51
  %53 = load double, double* %11, align 8
  %54 = fmul double %53, %52
  store double %54, double* %11, align 8
  br label %55

55:                                               ; preds = %21, %16, %5
  %56 = load double, double* %11, align 8
  ret double %56
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_local_stack_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp_local_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_stack_comparative(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  %31 = load i32, i32* %6, align 4
  %32 = load i32, i32* %7, align 4
  %33 = load i32, i32* %8, align 4
  %34 = load i32, i32* %9, align 4
  %35 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %36 = call double @sc_int_exp_cb_user_comparative(i32 noundef %31, i32 noundef %32, i32 noundef %33, i32 noundef %34, %struct.sc_int_exp_dat* noundef %35)
  %37 = fmul double %30, %36
  ret double %37
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_stack_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_stack_comparative(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  %31 = load i32, i32* %6, align 4
  %32 = load i32, i32* %7, align 4
  %33 = load i32, i32* %8, align 4
  %34 = load i32, i32* %9, align 4
  %35 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %36 = call double @sc_int_exp_cb_user_comparative(i32 noundef %31, i32 noundef %32, i32 noundef %33, i32 noundef %34, %struct.sc_int_exp_dat* noundef %35)
  %37 = fmul double %30, %36
  ret double %37
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_ext_up_stack_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_ext_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_ext_stack_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_ext_user_comparative(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_local_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp_local_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_user_comparative(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_user_comparative(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_ext_up_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_ext_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_ext_user_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_stack_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_stack_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_user_comparative(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_user_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_local_stack_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_bp_local_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_stack_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_user_comparative(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_stack_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_bp_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_stack_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_user_comparative(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_ext_stack_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_ext_stack_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_ext_user_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_local_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_bp_local_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_user_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_bp_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_user_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_ext_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  store double 1.000000e+00, double* %12, align 8
  store i32 0, i32* %11, align 4
  br label %13

13:                                               ; preds = %51, %5
  %14 = load i32, i32* %11, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp ult i32 %14, %17
  br i1 %18, label %19, label %54

19:                                               ; preds = %13
  %20 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %21 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %20, i32 0, i32 14
  %22 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %21, align 8
  %23 = load i32, i32* %11, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %22, i64 %24
  %26 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %25, align 8
  %27 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %26, null
  br i1 %27, label %28, label %50

28:                                               ; preds = %19
  %29 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %30 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %29, i32 0, i32 14
  %31 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %30, align 8
  %32 = load i32, i32* %11, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %31, i64 %33
  %35 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %34, align 8
  %36 = load i32, i32* %6, align 4
  %37 = load i32, i32* %7, align 4
  %38 = load i32, i32* %8, align 4
  %39 = load i32, i32* %9, align 4
  %40 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %41 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %40, i32 0, i32 15
  %42 = load i8**, i8*** %41, align 8
  %43 = load i32, i32* %11, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i8*, i8** %42, i64 %44
  %46 = load i8*, i8** %45, align 8
  %47 = call double %35(i32 noundef %36, i32 noundef %37, i32 noundef %38, i32 noundef %39, i8 noundef zeroext 2, i8* noundef %46)
  %48 = load double, double* %12, align 8
  %49 = fmul double %48, %47
  store double %49, double* %12, align 8
  br label %50

50:                                               ; preds = %28, %19
  br label %51

51:                                               ; preds = %50
  %52 = load i32, i32* %11, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %11, align 4
  br label %13, !llvm.loop !138

54:                                               ; preds = %13
  %55 = load double, double* %12, align 8
  ret double %55
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_stack_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_stack_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_user_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  store double 1.000000e+00, double* %12, align 8
  store i32 0, i32* %11, align 4
  br label %13

13:                                               ; preds = %51, %5
  %14 = load i32, i32* %11, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp ult i32 %14, %17
  br i1 %18, label %19, label %54

19:                                               ; preds = %13
  %20 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %21 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %20, i32 0, i32 14
  %22 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %21, align 8
  %23 = load i32, i32* %11, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %22, i64 %24
  %26 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %25, align 8
  %27 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %26, null
  br i1 %27, label %28, label %50

28:                                               ; preds = %19
  %29 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %30 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %29, i32 0, i32 14
  %31 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %30, align 8
  %32 = load i32, i32* %11, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %31, i64 %33
  %35 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %34, align 8
  %36 = load i32, i32* %6, align 4
  %37 = load i32, i32* %7, align 4
  %38 = load i32, i32* %8, align 4
  %39 = load i32, i32* %9, align 4
  %40 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %41 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %40, i32 0, i32 15
  %42 = load i8**, i8*** %41, align 8
  %43 = load i32, i32* %11, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i8*, i8** %42, i64 %44
  %46 = load i8*, i8** %45, align 8
  %47 = call double %35(i32 noundef %36, i32 noundef %37, i32 noundef %38, i32 noundef %39, i8 noundef zeroext 2, i8* noundef %46)
  %48 = load double, double* %12, align 8
  %49 = fmul double %48, %47
  store double %49, double* %12, align 8
  br label %50

50:                                               ; preds = %28, %19
  br label %51

51:                                               ; preds = %50
  %52 = load i32, i32* %11, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %11, align 4
  br label %13, !llvm.loop !139

54:                                               ; preds = %13
  %55 = load double, double* %12, align 8
  ret double %55
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_local_stack_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp_local_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_stack_comparative(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_stack_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = load i32, i32* %8, align 4
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %29 = call double @sc_int_exp_cb_stack_comparative(i32 noundef %24, i32 noundef %25, i32 noundef %26, i32 noundef %27, %struct.sc_int_exp_dat* noundef %28)
  %30 = fmul double %23, %29
  ret double %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_ext_up_stack_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_ext_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_ext_stack_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_local_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp_local_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_bp_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_bp_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_ext_up_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  store double 1.000000e+00, double* %15, align 8
  store i32 0, i32* %11, align 4
  br label %16

16:                                               ; preds = %177, %5
  %17 = load i32, i32* %11, align 4
  %18 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %19 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %18, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp ult i32 %17, %20
  br i1 %21, label %22, label %180

22:                                               ; preds = %16
  %23 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %24 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %23, i32 0, i32 5
  %25 = load double***, double**** %24, align 8
  %26 = load i32, i32* %11, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds double**, double*** %25, i64 %27
  %29 = load double**, double*** %28, align 8
  %30 = icmp ne double** %29, null
  br i1 %30, label %31, label %176

31:                                               ; preds = %22
  %32 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %33 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %32, i32 0, i32 2
  %34 = load i32**, i32*** %33, align 8
  %35 = load i32, i32* %11, align 4
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i32*, i32** %34, i64 %36
  %38 = load i32*, i32** %37, align 8
  %39 = load i32, i32* %6, align 4
  %40 = sub nsw i32 %39, 1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %38, i64 %41
  %43 = load i32, i32* %42, align 4
  store i32 %43, i32* %12, align 4
  %44 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %45 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %44, i32 0, i32 2
  %46 = load i32**, i32*** %45, align 8
  %47 = load i32, i32* %11, align 4
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i32*, i32** %46, i64 %48
  %50 = load i32*, i32** %49, align 8
  %51 = load i32, i32* %8, align 4
  %52 = sub nsw i32 %51, 1
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i32, i32* %50, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %57 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %56, i32 0, i32 2
  %58 = load i32**, i32*** %57, align 8
  %59 = load i32, i32* %11, align 4
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i32*, i32** %58, i64 %60
  %62 = load i32*, i32** %61, align 8
  %63 = load i32, i32* %7, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i32, i32* %62, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = sub i32 %55, %66
  store i32 %67, i32* %13, align 4
  %68 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %69 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %68, i32 0, i32 2
  %70 = load i32**, i32*** %69, align 8
  %71 = load i32, i32* %11, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i32*, i32** %70, i64 %72
  %74 = load i32*, i32** %73, align 8
  %75 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %76 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %75, i32 0, i32 0
  %77 = load i32, i32* %76, align 8
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i32, i32* %74, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %82 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %81, i32 0, i32 2
  %83 = load i32**, i32*** %82, align 8
  %84 = load i32, i32* %11, align 4
  %85 = zext i32 %84 to i64
  %86 = getelementptr inbounds i32*, i32** %83, i64 %85
  %87 = load i32*, i32** %86, align 8
  %88 = load i32, i32* %9, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, i32* %87, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = sub i32 %80, %91
  store i32 %92, i32* %14, align 4
  %93 = load i32, i32* %12, align 4
  %94 = icmp sgt i32 %93, 0
  br i1 %94, label %95, label %111

95:                                               ; preds = %31
  %96 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %97 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %96, i32 0, i32 5
  %98 = load double***, double**** %97, align 8
  %99 = load i32, i32* %11, align 4
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds double**, double*** %98, i64 %100
  %102 = load double**, double*** %101, align 8
  %103 = getelementptr inbounds double*, double** %102, i64 1
  %104 = load double*, double** %103, align 8
  %105 = load i32, i32* %12, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds double, double* %104, i64 %106
  %108 = load double, double* %107, align 8
  %109 = load double, double* %15, align 8
  %110 = fmul double %109, %108
  store double %110, double* %15, align 8
  br label %111

111:                                              ; preds = %95, %31
  %112 = load i32, i32* %13, align 4
  %113 = icmp sgt i32 %112, 0
  br i1 %113, label %114, label %143

114:                                              ; preds = %111
  %115 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %116 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %115, i32 0, i32 5
  %117 = load double***, double**** %116, align 8
  %118 = load i32, i32* %11, align 4
  %119 = zext i32 %118 to i64
  %120 = getelementptr inbounds double**, double*** %117, i64 %119
  %121 = load double**, double*** %120, align 8
  %122 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %123 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %122, i32 0, i32 2
  %124 = load i32**, i32*** %123, align 8
  %125 = load i32, i32* %11, align 4
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds i32*, i32** %124, i64 %126
  %128 = load i32*, i32** %127, align 8
  %129 = load i32, i32* %7, align 4
  %130 = add nsw i32 %129, 1
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i32, i32* %128, i64 %131
  %133 = load i32, i32* %132, align 4
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds double*, double** %121, i64 %134
  %136 = load double*, double** %135, align 8
  %137 = load i32, i32* %13, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds double, double* %136, i64 %138
  %140 = load double, double* %139, align 8
  %141 = load double, double* %15, align 8
  %142 = fmul double %141, %140
  store double %142, double* %15, align 8
  br label %143

143:                                              ; preds = %114, %111
  %144 = load i32, i32* %14, align 4
  %145 = icmp sgt i32 %144, 0
  br i1 %145, label %146, label %175

146:                                              ; preds = %143
  %147 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %148 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %147, i32 0, i32 5
  %149 = load double***, double**** %148, align 8
  %150 = load i32, i32* %11, align 4
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds double**, double*** %149, i64 %151
  %153 = load double**, double*** %152, align 8
  %154 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %155 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %154, i32 0, i32 2
  %156 = load i32**, i32*** %155, align 8
  %157 = load i32, i32* %11, align 4
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds i32*, i32** %156, i64 %158
  %160 = load i32*, i32** %159, align 8
  %161 = load i32, i32* %9, align 4
  %162 = add nsw i32 %161, 1
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds i32, i32* %160, i64 %163
  %165 = load i32, i32* %164, align 4
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds double*, double** %153, i64 %166
  %168 = load double*, double** %167, align 8
  %169 = load i32, i32* %14, align 4
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds double, double* %168, i64 %170
  %172 = load double, double* %171, align 8
  %173 = load double, double* %15, align 8
  %174 = fmul double %173, %172
  store double %174, double* %15, align 8
  br label %175

175:                                              ; preds = %146, %143
  br label %176

176:                                              ; preds = %175, %22
  br label %177

177:                                              ; preds = %176
  %178 = load i32, i32* %11, align 4
  %179 = add i32 %178, 1
  store i32 %179, i32* %11, align 4
  br label %16, !llvm.loop !140

180:                                              ; preds = %16
  %181 = load double, double* %15, align 8
  ret double %181
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_local_stack_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_bp_local_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_stack_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_stack_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_bp_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_stack_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_ext_stack_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  store double 1.000000e+00, double* %12, align 8
  store i32 0, i32* %11, align 4
  br label %13

13:                                               ; preds = %184, %5
  %14 = load i32, i32* %11, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp ult i32 %14, %17
  br i1 %18, label %19, label %187

19:                                               ; preds = %13
  %20 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %21 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %20, i32 0, i32 11
  %22 = load double**, double*** %21, align 8
  %23 = load i32, i32* %11, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds double*, double** %22, i64 %24
  %26 = load double*, double** %25, align 8
  %27 = icmp ne double* %26, null
  br i1 %27, label %28, label %183

28:                                               ; preds = %19
  %29 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %30 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %29, i32 0, i32 2
  %31 = load i32**, i32*** %30, align 8
  %32 = load i32, i32* %11, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds i32*, i32** %31, i64 %33
  %35 = load i32*, i32** %34, align 8
  %36 = load i32, i32* %6, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i32, i32* %35, i64 %37
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, 1
  br i1 %40, label %41, label %182

41:                                               ; preds = %28
  %42 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %43 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %42, i32 0, i32 2
  %44 = load i32**, i32*** %43, align 8
  %45 = load i32, i32* %11, align 4
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i32*, i32** %44, i64 %46
  %48 = load i32*, i32** %47, align 8
  %49 = load i32, i32* %7, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %48, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %54 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %53, i32 0, i32 2
  %55 = load i32**, i32*** %54, align 8
  %56 = load i32, i32* %11, align 4
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds i32*, i32** %55, i64 %57
  %59 = load i32*, i32** %58, align 8
  %60 = load i32, i32* %8, align 4
  %61 = sub nsw i32 %60, 1
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i32, i32* %59, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %52, %64
  br i1 %65, label %66, label %182

66:                                               ; preds = %41
  %67 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %68 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %67, i32 0, i32 2
  %69 = load i32**, i32*** %68, align 8
  %70 = load i32, i32* %11, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds i32*, i32** %69, i64 %71
  %73 = load i32*, i32** %72, align 8
  %74 = load i32, i32* %9, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i32, i32* %73, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %79 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %78, i32 0, i32 2
  %80 = load i32**, i32*** %79, align 8
  %81 = load i32, i32* %11, align 4
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i32*, i32** %80, i64 %82
  %84 = load i32*, i32** %83, align 8
  %85 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %86 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %85, i32 0, i32 0
  %87 = load i32, i32* %86, align 8
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds i32, i32* %84, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = icmp eq i32 %77, %90
  br i1 %91, label %92, label %182

92:                                               ; preds = %66
  %93 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %94 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %93, i32 0, i32 11
  %95 = load double**, double*** %94, align 8
  %96 = load i32, i32* %11, align 4
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds double*, double** %95, i64 %97
  %99 = load double*, double** %98, align 8
  %100 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %101 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %100, i32 0, i32 2
  %102 = load i32**, i32*** %101, align 8
  %103 = load i32, i32* %11, align 4
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds i32*, i32** %102, i64 %104
  %106 = load i32*, i32** %105, align 8
  %107 = load i32, i32* %6, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32, i32* %106, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds double, double* %99, i64 %111
  %113 = load double, double* %112, align 8
  %114 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %115 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %114, i32 0, i32 11
  %116 = load double**, double*** %115, align 8
  %117 = load i32, i32* %11, align 4
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds double*, double** %116, i64 %118
  %120 = load double*, double** %119, align 8
  %121 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %122 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %121, i32 0, i32 2
  %123 = load i32**, i32*** %122, align 8
  %124 = load i32, i32* %11, align 4
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i32*, i32** %123, i64 %125
  %127 = load i32*, i32** %126, align 8
  %128 = load i32, i32* %8, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i32, i32* %127, i64 %129
  %131 = load i32, i32* %130, align 4
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds double, double* %120, i64 %132
  %134 = load double, double* %133, align 8
  %135 = fmul double %113, %134
  %136 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %137 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %136, i32 0, i32 11
  %138 = load double**, double*** %137, align 8
  %139 = load i32, i32* %11, align 4
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds double*, double** %138, i64 %140
  %142 = load double*, double** %141, align 8
  %143 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %144 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %143, i32 0, i32 2
  %145 = load i32**, i32*** %144, align 8
  %146 = load i32, i32* %11, align 4
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds i32*, i32** %145, i64 %147
  %149 = load i32*, i32** %148, align 8
  %150 = load i32, i32* %9, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i32, i32* %149, i64 %151
  %153 = load i32, i32* %152, align 4
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds double, double* %142, i64 %154
  %156 = load double, double* %155, align 8
  %157 = fmul double %135, %156
  %158 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %159 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %158, i32 0, i32 11
  %160 = load double**, double*** %159, align 8
  %161 = load i32, i32* %11, align 4
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds double*, double** %160, i64 %162
  %164 = load double*, double** %163, align 8
  %165 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %166 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %165, i32 0, i32 2
  %167 = load i32**, i32*** %166, align 8
  %168 = load i32, i32* %11, align 4
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds i32*, i32** %167, i64 %169
  %171 = load i32*, i32** %170, align 8
  %172 = load i32, i32* %7, align 4
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i32, i32* %171, i64 %173
  %175 = load i32, i32* %174, align 4
  %176 = zext i32 %175 to i64
  %177 = getelementptr inbounds double, double* %164, i64 %176
  %178 = load double, double* %177, align 8
  %179 = fmul double %157, %178
  %180 = load double, double* %12, align 8
  %181 = fmul double %180, %179
  store double %181, double* %12, align 8
  br label %182

182:                                              ; preds = %92, %66, %41, %28
  br label %183

183:                                              ; preds = %182, %19
  br label %184

184:                                              ; preds = %183
  %185 = load i32, i32* %11, align 4
  %186 = add i32 %185, 1
  store i32 %186, i32* %11, align 4
  br label %13, !llvm.loop !141

187:                                              ; preds = %13
  %188 = load double, double* %12, align 8
  ret double %188
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_local_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  store double 1.000000e+00, double* %12, align 8
  store i32 0, i32* %11, align 4
  br label %13

13:                                               ; preds = %49, %5
  %14 = load i32, i32* %11, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp ult i32 %14, %17
  br i1 %18, label %19, label %52

19:                                               ; preds = %13
  %20 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %21 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %20, i32 0, i32 9
  %22 = load double***, double**** %21, align 8
  %23 = load i32, i32* %11, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds double**, double*** %22, i64 %24
  %26 = load double**, double*** %25, align 8
  %27 = icmp ne double** %26, null
  br i1 %27, label %28, label %48

28:                                               ; preds = %19
  %29 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %30 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %29, i32 0, i32 9
  %31 = load double***, double**** %30, align 8
  %32 = load i32, i32* %11, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds double**, double*** %31, i64 %33
  %35 = load double**, double*** %34, align 8
  %36 = load i32, i32* %6, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds double*, double** %35, i64 %37
  %39 = load double*, double** %38, align 8
  %40 = load i32, i32* %7, align 4
  %41 = load i32, i32* %6, align 4
  %42 = sub nsw i32 %40, %41
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds double, double* %39, i64 %43
  %45 = load double, double* %44, align 8
  %46 = load double, double* %12, align 8
  %47 = fmul double %46, %45
  store double %47, double* %12, align 8
  br label %48

48:                                               ; preds = %28, %19
  br label %49

49:                                               ; preds = %48
  %50 = load i32, i32* %11, align 4
  %51 = add i32 %50, 1
  store i32 %51, i32* %11, align 4
  br label %13, !llvm.loop !142

52:                                               ; preds = %13
  %53 = load double, double* %12, align 8
  ret double %53
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_bp_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  store double 1.000000e+00, double* %12, align 8
  store i32 0, i32* %11, align 4
  br label %13

13:                                               ; preds = %51, %5
  %14 = load i32, i32* %11, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp ult i32 %14, %17
  br i1 %18, label %19, label %54

19:                                               ; preds = %13
  %20 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %21 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %20, i32 0, i32 7
  %22 = load double**, double*** %21, align 8
  %23 = load i32, i32* %11, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds double*, double** %22, i64 %24
  %26 = load double*, double** %25, align 8
  %27 = icmp ne double* %26, null
  br i1 %27, label %28, label %50

28:                                               ; preds = %19
  %29 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %30 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %29, i32 0, i32 7
  %31 = load double**, double*** %30, align 8
  %32 = load i32, i32* %11, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds double*, double** %31, i64 %33
  %35 = load double*, double** %34, align 8
  %36 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %37 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %36, i32 0, i32 3
  %38 = load i32*, i32** %37, align 8
  %39 = load i32, i32* %7, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i32, i32* %38, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = load i32, i32* %6, align 4
  %44 = add nsw i32 %42, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds double, double* %35, i64 %45
  %47 = load double, double* %46, align 8
  %48 = load double, double* %12, align 8
  %49 = fmul double %48, %47
  store double %49, double* %12, align 8
  br label %50

50:                                               ; preds = %28, %19
  br label %51

51:                                               ; preds = %50
  %52 = load i32, i32* %11, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %11, align 4
  br label %13, !llvm.loop !143

54:                                               ; preds = %13
  %55 = load double, double* %12, align 8
  ret double %55
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_stack_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = call double @sc_int_exp_cb_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_int_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %22 = call double @sc_int_exp_cb_stack_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_int_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_up_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  store double 1.000000e+00, double* %14, align 8
  store i32 0, i32* %11, align 4
  br label %15

15:                                               ; preds = %144, %5
  %16 = load i32, i32* %11, align 4
  %17 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %18 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %17, i32 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp ult i32 %16, %19
  br i1 %20, label %21, label %147

21:                                               ; preds = %15
  %22 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %23 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %22, i32 0, i32 5
  %24 = load double***, double**** %23, align 8
  %25 = load i32, i32* %11, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds double**, double*** %24, i64 %26
  %28 = load double**, double*** %27, align 8
  %29 = icmp ne double** %28, null
  br i1 %29, label %30, label %143

30:                                               ; preds = %21
  %31 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %32 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %31, i32 0, i32 2
  %33 = load i32**, i32*** %32, align 8
  %34 = load i32, i32* %11, align 4
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i32*, i32** %33, i64 %35
  %37 = load i32*, i32** %36, align 8
  %38 = load i32, i32* %8, align 4
  %39 = sub nsw i32 %38, 1
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i32, i32* %37, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %44 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %43, i32 0, i32 2
  %45 = load i32**, i32*** %44, align 8
  %46 = load i32, i32* %11, align 4
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i32*, i32** %45, i64 %47
  %49 = load i32*, i32** %48, align 8
  %50 = load i32, i32* %6, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i32, i32* %49, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = sub i32 %42, %53
  store i32 %54, i32* %12, align 4
  %55 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %56 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %55, i32 0, i32 2
  %57 = load i32**, i32*** %56, align 8
  %58 = load i32, i32* %11, align 4
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds i32*, i32** %57, i64 %59
  %61 = load i32*, i32** %60, align 8
  %62 = load i32, i32* %7, align 4
  %63 = sub nsw i32 %62, 1
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i32, i32* %61, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %68 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %67, i32 0, i32 2
  %69 = load i32**, i32*** %68, align 8
  %70 = load i32, i32* %11, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds i32*, i32** %69, i64 %71
  %73 = load i32*, i32** %72, align 8
  %74 = load i32, i32* %9, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i32, i32* %73, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = sub i32 %66, %77
  store i32 %78, i32* %13, align 4
  %79 = load i32, i32* %12, align 4
  %80 = icmp sgt i32 %79, 0
  br i1 %80, label %81, label %110

81:                                               ; preds = %30
  %82 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %83 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %82, i32 0, i32 5
  %84 = load double***, double**** %83, align 8
  %85 = load i32, i32* %11, align 4
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds double**, double*** %84, i64 %86
  %88 = load double**, double*** %87, align 8
  %89 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %90 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %89, i32 0, i32 2
  %91 = load i32**, i32*** %90, align 8
  %92 = load i32, i32* %11, align 4
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds i32*, i32** %91, i64 %93
  %95 = load i32*, i32** %94, align 8
  %96 = load i32, i32* %6, align 4
  %97 = add nsw i32 %96, 1
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i32, i32* %95, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds double*, double** %88, i64 %101
  %103 = load double*, double** %102, align 8
  %104 = load i32, i32* %12, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds double, double* %103, i64 %105
  %107 = load double, double* %106, align 8
  %108 = load double, double* %14, align 8
  %109 = fmul double %108, %107
  store double %109, double* %14, align 8
  br label %110

110:                                              ; preds = %81, %30
  %111 = load i32, i32* %13, align 4
  %112 = icmp sgt i32 %111, 0
  br i1 %112, label %113, label %142

113:                                              ; preds = %110
  %114 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %115 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %114, i32 0, i32 5
  %116 = load double***, double**** %115, align 8
  %117 = load i32, i32* %11, align 4
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds double**, double*** %116, i64 %118
  %120 = load double**, double*** %119, align 8
  %121 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %122 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %121, i32 0, i32 2
  %123 = load i32**, i32*** %122, align 8
  %124 = load i32, i32* %11, align 4
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i32*, i32** %123, i64 %125
  %127 = load i32*, i32** %126, align 8
  %128 = load i32, i32* %9, align 4
  %129 = add nsw i32 %128, 1
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i32, i32* %127, i64 %130
  %132 = load i32, i32* %131, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds double*, double** %120, i64 %133
  %135 = load double*, double** %134, align 8
  %136 = load i32, i32* %13, align 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds double, double* %135, i64 %137
  %139 = load double, double* %138, align 8
  %140 = load double, double* %14, align 8
  %141 = fmul double %140, %139
  store double %141, double* %14, align 8
  br label %142

142:                                              ; preds = %113, %110
  br label %143

143:                                              ; preds = %142, %21
  br label %144

144:                                              ; preds = %143
  %145 = load i32, i32* %11, align 4
  %146 = add i32 %145, 1
  store i32 %146, i32* %11, align 4
  br label %15, !llvm.loop !144

147:                                              ; preds = %15
  %148 = load double, double* %14, align 8
  ret double %148
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_int_exp_cb_stack_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_int_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_int_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_int_exp_dat* %4, %struct.sc_int_exp_dat** %10, align 8
  store double 1.000000e+00, double* %12, align 8
  store i32 0, i32* %11, align 4
  br label %13

13:                                               ; preds = %170, %5
  %14 = load i32, i32* %11, align 4
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %16 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp ult i32 %14, %17
  br i1 %18, label %19, label %173

19:                                               ; preds = %13
  %20 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %21 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %20, i32 0, i32 11
  %22 = load double**, double*** %21, align 8
  %23 = load i32, i32* %11, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds double*, double** %22, i64 %24
  %26 = load double*, double** %25, align 8
  %27 = icmp ne double* %26, null
  br i1 %27, label %28, label %169

28:                                               ; preds = %19
  %29 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %30 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %29, i32 0, i32 2
  %31 = load i32**, i32*** %30, align 8
  %32 = load i32, i32* %11, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds i32*, i32** %31, i64 %33
  %35 = load i32*, i32** %34, align 8
  %36 = load i32, i32* %8, align 4
  %37 = sub nsw i32 %36, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %35, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %42 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %41, i32 0, i32 2
  %43 = load i32**, i32*** %42, align 8
  %44 = load i32, i32* %11, align 4
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds i32*, i32** %43, i64 %45
  %47 = load i32*, i32** %46, align 8
  %48 = load i32, i32* %6, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i32, i32* %47, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %40, %51
  br i1 %52, label %53, label %168

53:                                               ; preds = %28
  %54 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %55 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %54, i32 0, i32 2
  %56 = load i32**, i32*** %55, align 8
  %57 = load i32, i32* %11, align 4
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i32*, i32** %56, i64 %58
  %60 = load i32*, i32** %59, align 8
  %61 = load i32, i32* %7, align 4
  %62 = sub nsw i32 %61, 1
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %60, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %67 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %66, i32 0, i32 2
  %68 = load i32**, i32*** %67, align 8
  %69 = load i32, i32* %11, align 4
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i32*, i32** %68, i64 %70
  %72 = load i32*, i32** %71, align 8
  %73 = load i32, i32* %9, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i32, i32* %72, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = icmp eq i32 %65, %76
  br i1 %77, label %78, label %168

78:                                               ; preds = %53
  %79 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %80 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %79, i32 0, i32 11
  %81 = load double**, double*** %80, align 8
  %82 = load i32, i32* %11, align 4
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds double*, double** %81, i64 %83
  %85 = load double*, double** %84, align 8
  %86 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %87 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %86, i32 0, i32 2
  %88 = load i32**, i32*** %87, align 8
  %89 = load i32, i32* %11, align 4
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds i32*, i32** %88, i64 %90
  %92 = load i32*, i32** %91, align 8
  %93 = load i32, i32* %6, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i32, i32* %92, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds double, double* %85, i64 %97
  %99 = load double, double* %98, align 8
  %100 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %101 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %100, i32 0, i32 11
  %102 = load double**, double*** %101, align 8
  %103 = load i32, i32* %11, align 4
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds double*, double** %102, i64 %104
  %106 = load double*, double** %105, align 8
  %107 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %108 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %107, i32 0, i32 2
  %109 = load i32**, i32*** %108, align 8
  %110 = load i32, i32* %11, align 4
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i32*, i32** %109, i64 %111
  %113 = load i32*, i32** %112, align 8
  %114 = load i32, i32* %8, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i32, i32* %113, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds double, double* %106, i64 %118
  %120 = load double, double* %119, align 8
  %121 = fmul double %99, %120
  %122 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %123 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %122, i32 0, i32 11
  %124 = load double**, double*** %123, align 8
  %125 = load i32, i32* %11, align 4
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds double*, double** %124, i64 %126
  %128 = load double*, double** %127, align 8
  %129 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %130 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %129, i32 0, i32 2
  %131 = load i32**, i32*** %130, align 8
  %132 = load i32, i32* %11, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds i32*, i32** %131, i64 %133
  %135 = load i32*, i32** %134, align 8
  %136 = load i32, i32* %9, align 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i32, i32* %135, i64 %137
  %139 = load i32, i32* %138, align 4
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds double, double* %128, i64 %140
  %142 = load double, double* %141, align 8
  %143 = fmul double %121, %142
  %144 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %145 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %144, i32 0, i32 11
  %146 = load double**, double*** %145, align 8
  %147 = load i32, i32* %11, align 4
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds double*, double** %146, i64 %148
  %150 = load double*, double** %149, align 8
  %151 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %10, align 8
  %152 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %151, i32 0, i32 2
  %153 = load i32**, i32*** %152, align 8
  %154 = load i32, i32* %11, align 4
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds i32*, i32** %153, i64 %155
  %157 = load i32*, i32** %156, align 8
  %158 = load i32, i32* %7, align 4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i32, i32* %157, i64 %159
  %161 = load i32, i32* %160, align 4
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds double, double* %150, i64 %162
  %164 = load double, double* %163, align 8
  %165 = fmul double %143, %164
  %166 = load double, double* %12, align 8
  %167 = fmul double %166, %165
  store double %167, double* %12, align 8
  br label %168

168:                                              ; preds = %78, %53, %28
  br label %169

169:                                              ; preds = %168, %19
  br label %170

170:                                              ; preds = %169
  %171 = load i32, i32* %11, align 4
  %172 = add i32 %171, 1
  store i32 %172, i32* %11, align 4
  br label %13, !llvm.loop !145

173:                                              ; preds = %13
  %174 = load double, double* %12, align 8
  ret double %174
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_split_cb_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_mb_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_mb_exp_dat* %4, %struct.sc_mb_exp_dat** %10, align 8
  %11 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %12 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %11, i32 0, i32 15
  %13 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %12, align 8
  %14 = load i32, i32* %6, align 4
  %15 = load i32, i32* %7, align 4
  %16 = load i32, i32* %8, align 4
  %17 = load i32, i32* %9, align 4
  %18 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %19 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %18, i32 0, i32 16
  %20 = load i8*, i8** %19, align 8
  %21 = call double %13(i32 noundef %14, i32 noundef %15, i32 noundef %16, i32 noundef %17, i8 noundef zeroext 5, i8* noundef %20)
  ret double %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_red_cb_stem_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_mb_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_mb_exp_dat* %4, %struct.sc_mb_exp_dat** %10, align 8
  %11 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %12 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %11, i32 0, i32 15
  %13 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %12, align 8
  %14 = load i32, i32* %6, align 4
  %15 = load i32, i32* %7, align 4
  %16 = load i32, i32* %8, align 4
  %17 = load i32, i32* %9, align 4
  %18 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %19 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %18, i32 0, i32 16
  %20 = load i8*, i8** %19, align 8
  %21 = call double %13(i32 noundef %14, i32 noundef %15, i32 noundef %16, i32 noundef %17, i8 noundef zeroext 6, i8* noundef %20)
  ret double %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_red_cb_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_mb_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_mb_exp_dat* %4, %struct.sc_mb_exp_dat** %10, align 8
  %11 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %12 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %11, i32 0, i32 15
  %13 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %12, align 8
  %14 = load i32, i32* %6, align 4
  %15 = load i32, i32* %7, align 4
  %16 = load i32, i32* %8, align 4
  %17 = load i32, i32* %9, align 4
  %18 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %19 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %18, i32 0, i32 16
  %20 = load i8*, i8** %19, align 8
  %21 = call double %13(i32 noundef %14, i32 noundef %15, i32 noundef %16, i32 noundef %17, i8 noundef zeroext 7, i8* noundef %20)
  ret double %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_pair_cb_user(i32 noundef %0, i32 noundef %1, %struct.sc_mb_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_mb_exp_dat* %2, %struct.sc_mb_exp_dat** %6, align 8
  %7 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %8 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %7, i32 0, i32 15
  %9 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %8, align 8
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %4, align 4
  %13 = add nsw i32 %12, 1
  %14 = load i32, i32* %5, align 4
  %15 = sub nsw i32 %14, 1
  %16 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %17 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %16, i32 0, i32 16
  %18 = load i8*, i8** %17, align 8
  %19 = call double %9(i32 noundef %10, i32 noundef %11, i32 noundef %13, i32 noundef %15, i8 noundef zeroext 3, i8* noundef %18)
  ret double %19
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_pair_ext_cb_user(i32 noundef %0, i32 noundef %1, %struct.sc_mb_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_mb_exp_dat* %2, %struct.sc_mb_exp_dat** %6, align 8
  %7 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %8 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %7, i32 0, i32 15
  %9 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %8, align 8
  %10 = load i32, i32* %4, align 4
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %4, align 4
  %13 = sub nsw i32 %12, 1
  %14 = load i32, i32* %5, align 4
  %15 = add nsw i32 %14, 1
  %16 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %17 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %16, i32 0, i32 16
  %18 = load i8*, i8** %17, align 8
  %19 = call double %9(i32 noundef %10, i32 noundef %11, i32 noundef %13, i32 noundef %15, i8 noundef zeroext 3, i8* noundef %18)
  ret double %19
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_pair_cb_bp_local_user(i32 noundef %0, i32 noundef %1, %struct.sc_mb_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_mb_exp_dat* %2, %struct.sc_mb_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %10 = call double @sc_mb_exp_pair_cb_bp_local(i32 noundef %7, i32 noundef %8, %struct.sc_mb_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %14 = call double @sc_mb_exp_pair_cb_user(i32 noundef %11, i32 noundef %12, %struct.sc_mb_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_pair_cb_bp_user(i32 noundef %0, i32 noundef %1, %struct.sc_mb_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_mb_exp_dat* %2, %struct.sc_mb_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %10 = call double @sc_mb_exp_pair_cb_bp(i32 noundef %7, i32 noundef %8, %struct.sc_mb_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %14 = call double @sc_mb_exp_pair_cb_user(i32 noundef %11, i32 noundef %12, %struct.sc_mb_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_red_cb_stem_up_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_mb_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_mb_exp_dat* %4, %struct.sc_mb_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %16 = call double @sc_mb_exp_red_cb_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_mb_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %22 = call double @sc_mb_exp_red_cb_stem_user(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_mb_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_red_cb_up_user(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_mb_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_mb_exp_dat* %4, %struct.sc_mb_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %16 = call double @sc_mb_exp_red_cb_up(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_mb_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %22 = call double @sc_mb_exp_red_cb_user(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_mb_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_pair_cb_bp_local(i32 noundef %0, i32 noundef %1, %struct.sc_mb_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_mb_exp_dat* %2, %struct.sc_mb_exp_dat** %6, align 8
  %7 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %8 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %7, i32 0, i32 8
  %9 = load double**, double*** %8, align 8
  %10 = load i32, i32* %4, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds double*, double** %9, i64 %11
  %13 = load double*, double** %12, align 8
  %14 = load i32, i32* %5, align 4
  %15 = load i32, i32* %4, align 4
  %16 = sub nsw i32 %14, %15
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds double, double* %13, i64 %17
  %19 = load double, double* %18, align 8
  ret double %19
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_pair_cb_bp(i32 noundef %0, i32 noundef %1, %struct.sc_mb_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_mb_exp_dat* %2, %struct.sc_mb_exp_dat** %6, align 8
  %7 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %8 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %7, i32 0, i32 6
  %9 = load double*, double** %8, align 8
  %10 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %11 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %10, i32 0, i32 3
  %12 = load i32*, i32** %11, align 8
  %13 = load i32, i32* %5, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i32, i32* %12, i64 %14
  %16 = load i32, i32* %15, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds double, double* %9, i64 %19
  %21 = load double, double* %20, align 8
  ret double %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_red_cb_up(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_mb_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_mb_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_mb_exp_dat* %4, %struct.sc_mb_exp_dat** %10, align 8
  %14 = load i32, i32* %8, align 4
  %15 = load i32, i32* %6, align 4
  %16 = sub nsw i32 %14, %15
  store i32 %16, i32* %11, align 4
  %17 = load i32, i32* %7, align 4
  %18 = load i32, i32* %9, align 4
  %19 = sub nsw i32 %17, %18
  store i32 %19, i32* %12, align 4
  store double 1.000000e+00, double* %13, align 8
  %20 = load i32, i32* %11, align 4
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %36

22:                                               ; preds = %5
  %23 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %24 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %23, i32 0, i32 4
  %25 = load double**, double*** %24, align 8
  %26 = load i32, i32* %6, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds double*, double** %25, i64 %27
  %29 = load double*, double** %28, align 8
  %30 = load i32, i32* %11, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds double, double* %29, i64 %31
  %33 = load double, double* %32, align 8
  %34 = load double, double* %13, align 8
  %35 = fmul double %34, %33
  store double %35, double* %13, align 8
  br label %36

36:                                               ; preds = %22, %5
  %37 = load i32, i32* %12, align 4
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %54

39:                                               ; preds = %36
  %40 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %41 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %40, i32 0, i32 4
  %42 = load double**, double*** %41, align 8
  %43 = load i32, i32* %9, align 4
  %44 = add nsw i32 %43, 1
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds double*, double** %42, i64 %45
  %47 = load double*, double** %46, align 8
  %48 = load i32, i32* %12, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds double, double* %47, i64 %49
  %51 = load double, double* %50, align 8
  %52 = load double, double* %13, align 8
  %53 = fmul double %52, %51
  store double %53, double* %13, align 8
  br label %54

54:                                               ; preds = %39, %36
  %55 = load double, double* %13, align 8
  ret double %55
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_split_cb_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_mb_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_mb_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_mb_exp_dat* %4, %struct.sc_mb_exp_dat** %10, align 8
  store double 1.000000e+00, double* %12, align 8
  store i32 0, i32* %11, align 4
  br label %13

13:                                               ; preds = %51, %5
  %14 = load i32, i32* %11, align 4
  %15 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %16 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp ult i32 %14, %17
  br i1 %18, label %19, label %54

19:                                               ; preds = %13
  %20 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %21 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %20, i32 0, i32 17
  %22 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %21, align 8
  %23 = load i32, i32* %11, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %22, i64 %24
  %26 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %25, align 8
  %27 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %26, null
  br i1 %27, label %28, label %50

28:                                               ; preds = %19
  %29 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %30 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %29, i32 0, i32 17
  %31 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %30, align 8
  %32 = load i32, i32* %11, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %31, i64 %33
  %35 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %34, align 8
  %36 = load i32, i32* %6, align 4
  %37 = load i32, i32* %7, align 4
  %38 = load i32, i32* %8, align 4
  %39 = load i32, i32* %9, align 4
  %40 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %41 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %40, i32 0, i32 18
  %42 = load i8**, i8*** %41, align 8
  %43 = load i32, i32* %11, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i8*, i8** %42, i64 %44
  %46 = load i8*, i8** %45, align 8
  %47 = call double %35(i32 noundef %36, i32 noundef %37, i32 noundef %38, i32 noundef %39, i8 noundef zeroext 5, i8* noundef %46)
  %48 = load double, double* %12, align 8
  %49 = fmul double %48, %47
  store double %49, double* %12, align 8
  br label %50

50:                                               ; preds = %28, %19
  br label %51

51:                                               ; preds = %50
  %52 = load i32, i32* %11, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %11, align 4
  br label %13, !llvm.loop !146

54:                                               ; preds = %13
  %55 = load double, double* %12, align 8
  ret double %55
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_red_cb_stem_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_mb_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_mb_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_mb_exp_dat* %4, %struct.sc_mb_exp_dat** %10, align 8
  store double 1.000000e+00, double* %12, align 8
  store i32 0, i32* %11, align 4
  br label %13

13:                                               ; preds = %47, %5
  %14 = load i32, i32* %11, align 4
  %15 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %16 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp ult i32 %14, %17
  br i1 %18, label %19, label %50

19:                                               ; preds = %13
  %20 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %21 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %20, i32 0, i32 17
  %22 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %21, align 8
  %23 = load i32, i32* %11, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %22, i64 %24
  %26 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %25, align 8
  %27 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %26, null
  br i1 %27, label %28, label %46

28:                                               ; preds = %19
  %29 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %30 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %29, i32 0, i32 17
  %31 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %30, align 8
  %32 = load i32, i32* %11, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %31, i64 %33
  %35 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %34, align 8
  %36 = load i32, i32* %6, align 4
  %37 = load i32, i32* %7, align 4
  %38 = load i32, i32* %8, align 4
  %39 = load i32, i32* %9, align 4
  %40 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %41 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %40, i32 0, i32 16
  %42 = load i8*, i8** %41, align 8
  %43 = call double %35(i32 noundef %36, i32 noundef %37, i32 noundef %38, i32 noundef %39, i8 noundef zeroext 6, i8* noundef %42)
  %44 = load double, double* %12, align 8
  %45 = fmul double %44, %43
  store double %45, double* %12, align 8
  br label %46

46:                                               ; preds = %28, %19
  br label %47

47:                                               ; preds = %46
  %48 = load i32, i32* %11, align 4
  %49 = add i32 %48, 1
  store i32 %49, i32* %11, align 4
  br label %13, !llvm.loop !147

50:                                               ; preds = %13
  %51 = load double, double* %12, align 8
  ret double %51
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_red_cb_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_mb_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_mb_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_mb_exp_dat* %4, %struct.sc_mb_exp_dat** %10, align 8
  store double 1.000000e+00, double* %12, align 8
  store i32 0, i32* %11, align 4
  br label %13

13:                                               ; preds = %51, %5
  %14 = load i32, i32* %11, align 4
  %15 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %16 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp ult i32 %14, %17
  br i1 %18, label %19, label %54

19:                                               ; preds = %13
  %20 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %21 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %20, i32 0, i32 17
  %22 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %21, align 8
  %23 = load i32, i32* %11, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %22, i64 %24
  %26 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %25, align 8
  %27 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %26, null
  br i1 %27, label %28, label %50

28:                                               ; preds = %19
  %29 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %30 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %29, i32 0, i32 17
  %31 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %30, align 8
  %32 = load i32, i32* %11, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %31, i64 %33
  %35 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %34, align 8
  %36 = load i32, i32* %6, align 4
  %37 = load i32, i32* %7, align 4
  %38 = load i32, i32* %8, align 4
  %39 = load i32, i32* %9, align 4
  %40 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %41 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %40, i32 0, i32 18
  %42 = load i8**, i8*** %41, align 8
  %43 = load i32, i32* %11, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i8*, i8** %42, i64 %44
  %46 = load i8*, i8** %45, align 8
  %47 = call double %35(i32 noundef %36, i32 noundef %37, i32 noundef %38, i32 noundef %39, i8 noundef zeroext 7, i8* noundef %46)
  %48 = load double, double* %12, align 8
  %49 = fmul double %48, %47
  store double %49, double* %12, align 8
  br label %50

50:                                               ; preds = %28, %19
  br label %51

51:                                               ; preds = %50
  %52 = load i32, i32* %11, align 4
  %53 = add i32 %52, 1
  store i32 %53, i32* %11, align 4
  br label %13, !llvm.loop !148

54:                                               ; preds = %13
  %55 = load double, double* %12, align 8
  ret double %55
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_pair_cb_user_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_mb_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_mb_exp_dat*, align 8
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_mb_exp_dat* %2, %struct.sc_mb_exp_dat** %6, align 8
  store double 1.000000e+00, double* %8, align 8
  store i32 0, i32* %7, align 4
  br label %9

9:                                                ; preds = %49, %3
  %10 = load i32, i32* %7, align 4
  %11 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %12 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %11, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %10, %13
  br i1 %14, label %15, label %52

15:                                               ; preds = %9
  %16 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %17 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %16, i32 0, i32 17
  %18 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %17, align 8
  %19 = load i32, i32* %7, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %18, i64 %20
  %22 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %21, align 8
  %23 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %22, null
  br i1 %23, label %24, label %48

24:                                               ; preds = %15
  %25 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %26 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %25, i32 0, i32 17
  %27 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %26, align 8
  %28 = load i32, i32* %7, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %27, i64 %29
  %31 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %30, align 8
  %32 = load i32, i32* %4, align 4
  %33 = load i32, i32* %5, align 4
  %34 = load i32, i32* %4, align 4
  %35 = add nsw i32 %34, 1
  %36 = load i32, i32* %5, align 4
  %37 = sub nsw i32 %36, 1
  %38 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %39 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %38, i32 0, i32 18
  %40 = load i8**, i8*** %39, align 8
  %41 = load i32, i32* %7, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i8*, i8** %40, i64 %42
  %44 = load i8*, i8** %43, align 8
  %45 = call double %31(i32 noundef %32, i32 noundef %33, i32 noundef %35, i32 noundef %37, i8 noundef zeroext 3, i8* noundef %44)
  %46 = load double, double* %8, align 8
  %47 = fmul double %46, %45
  store double %47, double* %8, align 8
  br label %48

48:                                               ; preds = %24, %15
  br label %49

49:                                               ; preds = %48
  %50 = load i32, i32* %7, align 4
  %51 = add i32 %50, 1
  store i32 %51, i32* %7, align 4
  br label %9, !llvm.loop !149

52:                                               ; preds = %9
  %53 = load double, double* %8, align 8
  ret double %53
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_pair_ext_cb_user_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_mb_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_mb_exp_dat*, align 8
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_mb_exp_dat* %2, %struct.sc_mb_exp_dat** %6, align 8
  store double 1.000000e+00, double* %8, align 8
  store i32 0, i32* %7, align 4
  br label %9

9:                                                ; preds = %49, %3
  %10 = load i32, i32* %7, align 4
  %11 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %12 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %11, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %10, %13
  br i1 %14, label %15, label %52

15:                                               ; preds = %9
  %16 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %17 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %16, i32 0, i32 17
  %18 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %17, align 8
  %19 = load i32, i32* %7, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %18, i64 %20
  %22 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %21, align 8
  %23 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %22, null
  br i1 %23, label %24, label %48

24:                                               ; preds = %15
  %25 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %26 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %25, i32 0, i32 17
  %27 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %26, align 8
  %28 = load i32, i32* %7, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %27, i64 %29
  %31 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %30, align 8
  %32 = load i32, i32* %4, align 4
  %33 = load i32, i32* %5, align 4
  %34 = load i32, i32* %4, align 4
  %35 = sub nsw i32 %34, 1
  %36 = load i32, i32* %5, align 4
  %37 = add nsw i32 %36, 1
  %38 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %39 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %38, i32 0, i32 18
  %40 = load i8**, i8*** %39, align 8
  %41 = load i32, i32* %7, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds i8*, i8** %40, i64 %42
  %44 = load i8*, i8** %43, align 8
  %45 = call double %31(i32 noundef %32, i32 noundef %33, i32 noundef %35, i32 noundef %37, i8 noundef zeroext 3, i8* noundef %44)
  %46 = load double, double* %8, align 8
  %47 = fmul double %46, %45
  store double %47, double* %8, align 8
  br label %48

48:                                               ; preds = %24, %15
  br label %49

49:                                               ; preds = %48
  %50 = load i32, i32* %7, align 4
  %51 = add i32 %50, 1
  store i32 %51, i32* %7, align 4
  br label %9, !llvm.loop !150

52:                                               ; preds = %9
  %53 = load double, double* %8, align 8
  ret double %53
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_pair_cb_bp_local_user_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_mb_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_mb_exp_dat* %2, %struct.sc_mb_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %10 = call double @sc_mb_exp_pair_cb_bp_local_comparative(i32 noundef %7, i32 noundef %8, %struct.sc_mb_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %14 = call double @sc_mb_exp_pair_cb_user_comparative(i32 noundef %11, i32 noundef %12, %struct.sc_mb_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_pair_cb_bp_user_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_mb_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_mb_exp_dat* %2, %struct.sc_mb_exp_dat** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i32, i32* %5, align 4
  %9 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %10 = call double @sc_mb_exp_pair_cb_bp_comparative(i32 noundef %7, i32 noundef %8, %struct.sc_mb_exp_dat* noundef %9)
  %11 = load i32, i32* %4, align 4
  %12 = load i32, i32* %5, align 4
  %13 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %14 = call double @sc_mb_exp_pair_cb_user_comparative(i32 noundef %11, i32 noundef %12, %struct.sc_mb_exp_dat* noundef %13)
  %15 = fmul double %10, %14
  ret double %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_red_cb_stem_up_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_mb_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_mb_exp_dat* %4, %struct.sc_mb_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %16 = call double @sc_mb_exp_red_cb_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_mb_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %22 = call double @sc_mb_exp_red_cb_stem_user_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_mb_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_red_cb_up_user_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_mb_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_mb_exp_dat*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_mb_exp_dat* %4, %struct.sc_mb_exp_dat** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %16 = call double @sc_mb_exp_red_cb_up_comparative(i32 noundef %11, i32 noundef %12, i32 noundef %13, i32 noundef %14, %struct.sc_mb_exp_dat* noundef %15)
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %9, align 4
  %21 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %22 = call double @sc_mb_exp_red_cb_user_comparative(i32 noundef %17, i32 noundef %18, i32 noundef %19, i32 noundef %20, %struct.sc_mb_exp_dat* noundef %21)
  %23 = fmul double %16, %22
  ret double %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_pair_cb_bp_local_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_mb_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_mb_exp_dat*, align 8
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_mb_exp_dat* %2, %struct.sc_mb_exp_dat** %6, align 8
  store double 1.000000e+00, double* %8, align 8
  store i32 0, i32* %7, align 4
  br label %9

9:                                                ; preds = %45, %3
  %10 = load i32, i32* %7, align 4
  %11 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %12 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %11, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %10, %13
  br i1 %14, label %15, label %48

15:                                               ; preds = %9
  %16 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %17 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %16, i32 0, i32 9
  %18 = load double***, double**** %17, align 8
  %19 = load i32, i32* %7, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds double**, double*** %18, i64 %20
  %22 = load double**, double*** %21, align 8
  %23 = icmp ne double** %22, null
  br i1 %23, label %24, label %44

24:                                               ; preds = %15
  %25 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %26 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %25, i32 0, i32 9
  %27 = load double***, double**** %26, align 8
  %28 = load i32, i32* %7, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds double**, double*** %27, i64 %29
  %31 = load double**, double*** %30, align 8
  %32 = load i32, i32* %4, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds double*, double** %31, i64 %33
  %35 = load double*, double** %34, align 8
  %36 = load i32, i32* %5, align 4
  %37 = load i32, i32* %4, align 4
  %38 = sub nsw i32 %36, %37
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds double, double* %35, i64 %39
  %41 = load double, double* %40, align 8
  %42 = load double, double* %8, align 8
  %43 = fmul double %42, %41
  store double %43, double* %8, align 8
  br label %44

44:                                               ; preds = %24, %15
  br label %45

45:                                               ; preds = %44
  %46 = load i32, i32* %7, align 4
  %47 = add i32 %46, 1
  store i32 %47, i32* %7, align 4
  br label %9, !llvm.loop !151

48:                                               ; preds = %9
  %49 = load double, double* %8, align 8
  ret double %49
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_pair_cb_bp_comparative(i32 noundef %0, i32 noundef %1, %struct.sc_mb_exp_dat* noundef %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.sc_mb_exp_dat*, align 8
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store %struct.sc_mb_exp_dat* %2, %struct.sc_mb_exp_dat** %6, align 8
  store double 1.000000e+00, double* %8, align 8
  store i32 0, i32* %7, align 4
  br label %9

9:                                                ; preds = %47, %3
  %10 = load i32, i32* %7, align 4
  %11 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %12 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %11, i32 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = icmp ult i32 %10, %13
  br i1 %14, label %15, label %50

15:                                               ; preds = %9
  %16 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %17 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %16, i32 0, i32 7
  %18 = load double**, double*** %17, align 8
  %19 = load i32, i32* %7, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds double*, double** %18, i64 %20
  %22 = load double*, double** %21, align 8
  %23 = icmp ne double* %22, null
  br i1 %23, label %24, label %46

24:                                               ; preds = %15
  %25 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %26 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %25, i32 0, i32 7
  %27 = load double**, double*** %26, align 8
  %28 = load i32, i32* %7, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds double*, double** %27, i64 %29
  %31 = load double*, double** %30, align 8
  %32 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %6, align 8
  %33 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %32, i32 0, i32 3
  %34 = load i32*, i32** %33, align 8
  %35 = load i32, i32* %5, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %34, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32, i32* %4, align 4
  %40 = add nsw i32 %38, %39
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds double, double* %31, i64 %41
  %43 = load double, double* %42, align 8
  %44 = load double, double* %8, align 8
  %45 = fmul double %44, %43
  store double %45, double* %8, align 8
  br label %46

46:                                               ; preds = %24, %15
  br label %47

47:                                               ; preds = %46
  %48 = load i32, i32* %7, align 4
  %49 = add i32 %48, 1
  store i32 %49, i32* %7, align 4
  br label %9, !llvm.loop !152

50:                                               ; preds = %9
  %51 = load double, double* %8, align 8
  ret double %51
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @sc_mb_exp_red_cb_up_comparative(i32 noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, %struct.sc_mb_exp_dat* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sc_mb_exp_dat*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca double, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store %struct.sc_mb_exp_dat* %4, %struct.sc_mb_exp_dat** %10, align 8
  store double 1.000000e+00, double* %15, align 8
  store i32 0, i32* %11, align 4
  br label %16

16:                                               ; preds = %143, %5
  %17 = load i32, i32* %11, align 4
  %18 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %19 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %18, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp ult i32 %17, %20
  br i1 %21, label %22, label %146

22:                                               ; preds = %16
  %23 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %24 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %23, i32 0, i32 5
  %25 = load double***, double**** %24, align 8
  %26 = load i32, i32* %11, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds double**, double*** %25, i64 %27
  %29 = load double**, double*** %28, align 8
  %30 = icmp ne double** %29, null
  br i1 %30, label %31, label %142

31:                                               ; preds = %22
  %32 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %33 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %32, i32 0, i32 2
  %34 = load i32**, i32*** %33, align 8
  %35 = load i32, i32* %11, align 4
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i32*, i32** %34, i64 %36
  %38 = load i32*, i32** %37, align 8
  %39 = load i32, i32* %8, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i32, i32* %38, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %44 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %43, i32 0, i32 2
  %45 = load i32**, i32*** %44, align 8
  %46 = load i32, i32* %11, align 4
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i32*, i32** %45, i64 %47
  %49 = load i32*, i32** %48, align 8
  %50 = load i32, i32* %6, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i32, i32* %49, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = sub i32 %42, %53
  store i32 %54, i32* %12, align 4
  %55 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %56 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %55, i32 0, i32 2
  %57 = load i32**, i32*** %56, align 8
  %58 = load i32, i32* %11, align 4
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds i32*, i32** %57, i64 %59
  %61 = load i32*, i32** %60, align 8
  %62 = load i32, i32* %7, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %61, i64 %63
  %65 = load i32, i32* %64, align 4
  %66 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %67 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %66, i32 0, i32 2
  %68 = load i32**, i32*** %67, align 8
  %69 = load i32, i32* %11, align 4
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i32*, i32** %68, i64 %70
  %72 = load i32*, i32** %71, align 8
  %73 = load i32, i32* %9, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i32, i32* %72, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = sub i32 %65, %76
  store i32 %77, i32* %13, align 4
  %78 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %79 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %78, i32 0, i32 2
  %80 = load i32**, i32*** %79, align 8
  %81 = load i32, i32* %11, align 4
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i32*, i32** %80, i64 %82
  %84 = load i32*, i32** %83, align 8
  %85 = load i32, i32* %9, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i32, i32* %84, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = add i32 %88, 1
  store i32 %89, i32* %14, align 4
  %90 = load i32, i32* %12, align 4
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %92, label %120

92:                                               ; preds = %31
  %93 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %94 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %93, i32 0, i32 5
  %95 = load double***, double**** %94, align 8
  %96 = load i32, i32* %11, align 4
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds double**, double*** %95, i64 %97
  %99 = load double**, double*** %98, align 8
  %100 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %101 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %100, i32 0, i32 2
  %102 = load i32**, i32*** %101, align 8
  %103 = load i32, i32* %11, align 4
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds i32*, i32** %102, i64 %104
  %106 = load i32*, i32** %105, align 8
  %107 = load i32, i32* %6, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32, i32* %106, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds double*, double** %99, i64 %111
  %113 = load double*, double** %112, align 8
  %114 = load i32, i32* %12, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds double, double* %113, i64 %115
  %117 = load double, double* %116, align 8
  %118 = load double, double* %15, align 8
  %119 = fmul double %118, %117
  store double %119, double* %15, align 8
  br label %120

120:                                              ; preds = %92, %31
  %121 = load i32, i32* %13, align 4
  %122 = icmp sgt i32 %121, 0
  br i1 %122, label %123, label %141

123:                                              ; preds = %120
  %124 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %10, align 8
  %125 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %124, i32 0, i32 5
  %126 = load double***, double**** %125, align 8
  %127 = load i32, i32* %11, align 4
  %128 = zext i32 %127 to i64
  %129 = getelementptr inbounds double**, double*** %126, i64 %128
  %130 = load double**, double*** %129, align 8
  %131 = load i32, i32* %14, align 4
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds double*, double** %130, i64 %132
  %134 = load double*, double** %133, align 8
  %135 = load i32, i32* %13, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds double, double* %134, i64 %136
  %138 = load double, double* %137, align 8
  %139 = load double, double* %15, align 8
  %140 = fmul double %139, %138
  store double %140, double* %15, align 8
  br label %141

141:                                              ; preds = %123, %120
  br label %142

142:                                              ; preds = %141, %22
  br label %143

143:                                              ; preds = %142
  %144 = load i32, i32* %11, align 4
  %145 = add i32 %144, 1
  store i32 %145, i32* %11, align 4
  br label %16, !llvm.loop !153

146:                                              ; preds = %16
  %147 = load double, double* %15, align 8
  ret double %147
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @compute_gquad_prob_internal(%struct.vrna_fc_s* noundef %0, i32 noundef %1) #0 {
  %3 = alloca %struct.vrna_fc_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8, align 1
  %6 = alloca i8*, align 8
  %7 = alloca i16*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca double*, align 8
  %21 = alloca double*, align 8
  %22 = alloca double*, align 8
  %23 = alloca %struct.vrna_exp_param_s*, align 8
  %24 = alloca double*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %3, align 8
  store i32 %1, i32* %4, align 4
  %25 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %26 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %25, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %11, align 4
  %28 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %29 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %28, i32 0, i32 24
  %30 = bitcast %union.anon.9* %29 to %struct.anon.10*
  %31 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %30, i32 0, i32 1
  %32 = load i16*, i16** %31, align 8
  store i16* %32, i16** %7, align 8
  %33 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %34 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %33, i32 0, i32 24
  %35 = bitcast %union.anon.9* %34 to %struct.anon.10*
  %36 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %35, i32 0, i32 3
  %37 = load i8*, i8** %36, align 8
  store i8* %37, i8** %6, align 8
  %38 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %39 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %38, i32 0, i32 16
  %40 = load i32*, i32** %39, align 8
  store i32* %40, i32** %16, align 8
  %41 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %42 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %41, i32 0, i32 17
  %43 = load i32*, i32** %42, align 8
  store i32* %43, i32** %17, align 8
  %44 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %45 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %44, i32 0, i32 15
  %46 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %45, align 8
  store %struct.vrna_exp_param_s* %46, %struct.vrna_exp_param_s** %23, align 8
  %47 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %48 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %47, i32 0, i32 13
  %49 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %48, align 8
  %50 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %49, i32 0, i32 4
  %51 = bitcast %union.anon.5* %50 to %struct.anon.6*
  %52 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %51, i32 0, i32 7
  %53 = load double*, double** %52, align 8
  store double* %53, double** %20, align 8
  %54 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %55 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %54, i32 0, i32 13
  %56 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %55, align 8
  %57 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %56, i32 0, i32 4
  %58 = bitcast %union.anon.5* %57 to %struct.anon.6*
  %59 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %58, i32 0, i32 4
  %60 = load double*, double** %59, align 8
  store double* %60, double** %21, align 8
  %61 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %62 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %61, i32 0, i32 13
  %63 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %62, align 8
  %64 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %63, i32 0, i32 2
  %65 = load double*, double** %64, align 8
  store double* %65, double** %22, align 8
  %66 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %23, align 8
  %67 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %66, i32 0, i32 4
  %68 = getelementptr inbounds [31 x double], [31 x double]* %67, i64 0, i64 0
  store double* %68, double** %24, align 8
  %69 = load i32, i32* %4, align 4
  %70 = load i32, i32* %11, align 4
  %71 = sub nsw i32 %70, 3
  %72 = icmp slt i32 %69, %71
  br i1 %72, label %73, label %217

73:                                               ; preds = %2
  store i32 2, i32* %10, align 4
  br label %74

74:                                               ; preds = %213, %73
  %75 = load i32, i32* %10, align 4
  %76 = load i32, i32* %4, align 4
  %77 = sub nsw i32 %76, 11
  %78 = add nsw i32 %77, 1
  %79 = icmp sle i32 %75, %78
  br i1 %79, label %80, label %216

80:                                               ; preds = %74
  %81 = load i32*, i32** %16, align 8
  %82 = load i32, i32* %10, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i32, i32* %81, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = load i32, i32* %4, align 4
  %87 = sub nsw i32 %85, %86
  store i32 %87, i32* %13, align 4
  %88 = load double*, double** %20, align 8
  %89 = load i32, i32* %13, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds double, double* %88, i64 %90
  %92 = load double, double* %91, align 8
  %93 = fcmp oeq double %92, 0.000000e+00
  br i1 %93, label %94, label %95

94:                                               ; preds = %80
  br label %213

95:                                               ; preds = %80
  store double 0.000000e+00, double* %18, align 8
  %96 = load i32, i32* %10, align 4
  %97 = sub nsw i32 %96, 1
  store i32 %97, i32* %8, align 4
  %98 = load i32, i32* %4, align 4
  %99 = add nsw i32 %98, 30
  %100 = add nsw i32 %99, 1
  %101 = load i32, i32* %11, align 4
  %102 = icmp slt i32 %100, %101
  br i1 %102, label %103, label %107

103:                                              ; preds = %95
  %104 = load i32, i32* %4, align 4
  %105 = add nsw i32 %104, 30
  %106 = add nsw i32 %105, 1
  br label %109

107:                                              ; preds = %95
  %108 = load i32, i32* %11, align 4
  br label %109

109:                                              ; preds = %107, %103
  %110 = phi i32 [ %106, %103 ], [ %108, %107 ]
  store i32 %110, i32* %9, align 4
  br label %111

111:                                              ; preds = %197, %109
  %112 = load i32, i32* %9, align 4
  %113 = load i32, i32* %4, align 4
  %114 = add nsw i32 %113, 3
  %115 = icmp sgt i32 %112, %114
  br i1 %115, label %116, label %200

116:                                              ; preds = %111
  %117 = load i32*, i32** %16, align 8
  %118 = load i32, i32* %8, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i32, i32* %117, i64 %119
  %121 = load i32, i32* %120, align 4
  %122 = load i32, i32* %9, align 4
  %123 = sub nsw i32 %121, %122
  store i32 %123, i32* %12, align 4
  %124 = load i8*, i8** %6, align 8
  %125 = load i32*, i32** %17, align 8
  %126 = load i32, i32* %9, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i32, i32* %125, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = load i32, i32* %8, align 4
  %131 = add nsw i32 %129, %130
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i8, i8* %124, i64 %132
  %134 = load i8, i8* %133, align 1
  store i8 %134, i8* %5, align 1
  %135 = load i8, i8* %5, align 1
  %136 = icmp ne i8 %135, 0
  br i1 %136, label %138, label %137

137:                                              ; preds = %116
  br label %197

138:                                              ; preds = %116
  %139 = load i32, i32* %9, align 4
  %140 = load i32, i32* %4, align 4
  %141 = sub nsw i32 %139, %140
  %142 = sub nsw i32 %141, 1
  store i32 %142, i32* %14, align 4
  %143 = load i8, i8* %5, align 1
  %144 = zext i8 %143 to i32
  %145 = icmp sgt i32 %144, 2
  br i1 %145, label %146, label %150

146:                                              ; preds = %138
  %147 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %23, align 8
  %148 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %147, i32 0, i32 21
  %149 = load double, double* %148, align 8
  br label %151

150:                                              ; preds = %138
  br label %151

151:                                              ; preds = %150, %146
  %152 = phi double [ %149, %146 ], [ 1.000000e+00, %150 ]
  store double %152, double* %19, align 8
  %153 = load double*, double** %21, align 8
  %154 = load i32, i32* %12, align 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds double, double* %153, i64 %155
  %157 = load double, double* %156, align 8
  %158 = load double, double* %19, align 8
  %159 = fmul double %157, %158
  %160 = load double*, double** %24, align 8
  %161 = load i32, i32* %14, align 4
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds double, double* %160, i64 %162
  %164 = load double, double* %163, align 8
  %165 = fmul double %159, %164
  %166 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %23, align 8
  %167 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %166, i32 0, i32 6
  %168 = load i8, i8* %5, align 1
  %169 = zext i8 %168 to i64
  %170 = getelementptr inbounds [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]]* %167, i64 0, i64 %169
  %171 = load i16*, i16** %7, align 8
  %172 = load i32, i32* %8, align 4
  %173 = add nsw i32 %172, 1
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds i16, i16* %171, i64 %174
  %176 = load i16, i16* %175, align 2
  %177 = sext i16 %176 to i64
  %178 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %170, i64 0, i64 %177
  %179 = load i16*, i16** %7, align 8
  %180 = load i32, i32* %9, align 4
  %181 = sub nsw i32 %180, 1
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i16, i16* %179, i64 %182
  %184 = load i16, i16* %183, align 2
  %185 = sext i16 %184 to i64
  %186 = getelementptr inbounds [5 x double], [5 x double]* %178, i64 0, i64 %185
  %187 = load double, double* %186, align 8
  %188 = fmul double %165, %187
  %189 = load double*, double** %22, align 8
  %190 = load i32, i32* %14, align 4
  %191 = add nsw i32 %190, 2
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds double, double* %189, i64 %192
  %194 = load double, double* %193, align 8
  %195 = load double, double* %18, align 8
  %196 = call double @llvm.fmuladd.f64(double %188, double %194, double %195)
  store double %196, double* %18, align 8
  br label %197

197:                                              ; preds = %151, %137
  %198 = load i32, i32* %9, align 4
  %199 = add nsw i32 %198, -1
  store i32 %199, i32* %9, align 4
  br label %111, !llvm.loop !154

200:                                              ; preds = %111
  %201 = load double, double* %18, align 8
  %202 = load double*, double** %20, align 8
  %203 = load i32, i32* %13, align 4
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds double, double* %202, i64 %204
  %206 = load double, double* %205, align 8
  %207 = load double*, double** %21, align 8
  %208 = load i32, i32* %13, align 4
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds double, double* %207, i64 %209
  %211 = load double, double* %210, align 8
  %212 = call double @llvm.fmuladd.f64(double %201, double %206, double %211)
  store double %212, double* %210, align 8
  br label %213

213:                                              ; preds = %200, %94
  %214 = load i32, i32* %10, align 4
  %215 = add nsw i32 %214, 1
  store i32 %215, i32* %10, align 4
  br label %74, !llvm.loop !155

216:                                              ; preds = %74
  br label %217

217:                                              ; preds = %216, %2
  %218 = load i32, i32* %4, align 4
  %219 = load i32, i32* %11, align 4
  %220 = sub nsw i32 %219, 1
  %221 = icmp slt i32 %218, %220
  br i1 %221, label %222, label %397

222:                                              ; preds = %217
  store i32 3, i32* %10, align 4
  br label %223

223:                                              ; preds = %393, %222
  %224 = load i32, i32* %10, align 4
  %225 = load i32, i32* %4, align 4
  %226 = sub nsw i32 %225, 11
  %227 = add nsw i32 %226, 1
  %228 = icmp sle i32 %224, %227
  br i1 %228, label %229, label %396

229:                                              ; preds = %223
  %230 = load i32*, i32** %16, align 8
  %231 = load i32, i32* %10, align 4
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds i32, i32* %230, i64 %232
  %234 = load i32, i32* %233, align 4
  %235 = load i32, i32* %4, align 4
  %236 = sub nsw i32 %234, %235
  store i32 %236, i32* %13, align 4
  %237 = load double*, double** %20, align 8
  %238 = load i32, i32* %13, align 4
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds double, double* %237, i64 %239
  %241 = load double, double* %240, align 8
  %242 = fcmp oeq double %241, 0.000000e+00
  br i1 %242, label %243, label %244

243:                                              ; preds = %229
  br label %393

244:                                              ; preds = %229
  store double 0.000000e+00, double* %18, align 8
  %245 = load i32, i32* %10, align 4
  %246 = sub nsw i32 %245, 30
  %247 = sub nsw i32 %246, 1
  %248 = icmp sgt i32 1, %247
  br i1 %248, label %249, label %250

249:                                              ; preds = %244
  br label %254

250:                                              ; preds = %244
  %251 = load i32, i32* %10, align 4
  %252 = sub nsw i32 %251, 30
  %253 = sub nsw i32 %252, 1
  br label %254

254:                                              ; preds = %250, %249
  %255 = phi i32 [ 1, %249 ], [ %253, %250 ]
  store i32 %255, i32* %8, align 4
  br label %256

256:                                              ; preds = %377, %254
  %257 = load i32, i32* %8, align 4
  %258 = load i32, i32* %10, align 4
  %259 = sub nsw i32 %258, 2
  %260 = icmp sle i32 %257, %259
  br i1 %260, label %261, label %380

261:                                              ; preds = %256
  %262 = load i32, i32* %10, align 4
  %263 = load i32, i32* %8, align 4
  %264 = sub nsw i32 %262, %263
  %265 = sub nsw i32 %264, 1
  store i32 %265, i32* %14, align 4
  %266 = load i32, i32* %4, align 4
  %267 = add nsw i32 %266, 2
  store i32 %267, i32* %9, align 4
  br label %268

268:                                              ; preds = %373, %261
  %269 = load i32, i32* %9, align 4
  %270 = load i32, i32* %4, align 4
  %271 = add nsw i32 %270, 30
  %272 = load i32, i32* %14, align 4
  %273 = sub nsw i32 %271, %272
  %274 = add nsw i32 %273, 1
  %275 = load i32, i32* %11, align 4
  %276 = icmp slt i32 %274, %275
  br i1 %276, label %277, label %283

277:                                              ; preds = %268
  %278 = load i32, i32* %4, align 4
  %279 = add nsw i32 %278, 30
  %280 = load i32, i32* %14, align 4
  %281 = sub nsw i32 %279, %280
  %282 = add nsw i32 %281, 1
  br label %285

283:                                              ; preds = %268
  %284 = load i32, i32* %11, align 4
  br label %285

285:                                              ; preds = %283, %277
  %286 = phi i32 [ %282, %277 ], [ %284, %283 ]
  %287 = icmp sle i32 %269, %286
  br i1 %287, label %288, label %376

288:                                              ; preds = %285
  %289 = load i32*, i32** %16, align 8
  %290 = load i32, i32* %8, align 4
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds i32, i32* %289, i64 %291
  %293 = load i32, i32* %292, align 4
  %294 = load i32, i32* %9, align 4
  %295 = sub nsw i32 %293, %294
  store i32 %295, i32* %12, align 4
  %296 = load i8*, i8** %6, align 8
  %297 = load i32*, i32** %17, align 8
  %298 = load i32, i32* %9, align 4
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds i32, i32* %297, i64 %299
  %301 = load i32, i32* %300, align 4
  %302 = load i32, i32* %8, align 4
  %303 = add nsw i32 %301, %302
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds i8, i8* %296, i64 %304
  %306 = load i8, i8* %305, align 1
  store i8 %306, i8* %5, align 1
  %307 = load i8, i8* %5, align 1
  %308 = icmp ne i8 %307, 0
  br i1 %308, label %310, label %309

309:                                              ; preds = %288
  br label %373

310:                                              ; preds = %288
  %311 = load i32, i32* %9, align 4
  %312 = load i32, i32* %4, align 4
  %313 = sub nsw i32 %311, %312
  %314 = sub nsw i32 %313, 1
  store i32 %314, i32* %15, align 4
  %315 = load i8, i8* %5, align 1
  %316 = zext i8 %315 to i32
  %317 = icmp sgt i32 %316, 2
  br i1 %317, label %318, label %322

318:                                              ; preds = %310
  %319 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %23, align 8
  %320 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %319, i32 0, i32 21
  %321 = load double, double* %320, align 8
  br label %323

322:                                              ; preds = %310
  br label %323

323:                                              ; preds = %322, %318
  %324 = phi double [ %321, %318 ], [ 1.000000e+00, %322 ]
  store double %324, double* %19, align 8
  %325 = load double*, double** %21, align 8
  %326 = load i32, i32* %12, align 4
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds double, double* %325, i64 %327
  %329 = load double, double* %328, align 8
  %330 = load double, double* %19, align 8
  %331 = fmul double %329, %330
  %332 = load double*, double** %24, align 8
  %333 = load i32, i32* %14, align 4
  %334 = load i32, i32* %15, align 4
  %335 = add nsw i32 %333, %334
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds double, double* %332, i64 %336
  %338 = load double, double* %337, align 8
  %339 = fmul double %331, %338
  %340 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %23, align 8
  %341 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %340, i32 0, i32 6
  %342 = load i8, i8* %5, align 1
  %343 = zext i8 %342 to i64
  %344 = getelementptr inbounds [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]]* %341, i64 0, i64 %343
  %345 = load i16*, i16** %7, align 8
  %346 = load i32, i32* %8, align 4
  %347 = add nsw i32 %346, 1
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds i16, i16* %345, i64 %348
  %350 = load i16, i16* %349, align 2
  %351 = sext i16 %350 to i64
  %352 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %344, i64 0, i64 %351
  %353 = load i16*, i16** %7, align 8
  %354 = load i32, i32* %9, align 4
  %355 = sub nsw i32 %354, 1
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds i16, i16* %353, i64 %356
  %358 = load i16, i16* %357, align 2
  %359 = sext i16 %358 to i64
  %360 = getelementptr inbounds [5 x double], [5 x double]* %352, i64 0, i64 %359
  %361 = load double, double* %360, align 8
  %362 = fmul double %339, %361
  %363 = load double*, double** %22, align 8
  %364 = load i32, i32* %14, align 4
  %365 = load i32, i32* %15, align 4
  %366 = add nsw i32 %364, %365
  %367 = add nsw i32 %366, 2
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds double, double* %363, i64 %368
  %370 = load double, double* %369, align 8
  %371 = load double, double* %18, align 8
  %372 = call double @llvm.fmuladd.f64(double %362, double %370, double %371)
  store double %372, double* %18, align 8
  br label %373

373:                                              ; preds = %323, %309
  %374 = load i32, i32* %9, align 4
  %375 = add nsw i32 %374, 1
  store i32 %375, i32* %9, align 4
  br label %268, !llvm.loop !156

376:                                              ; preds = %285
  br label %377

377:                                              ; preds = %376
  %378 = load i32, i32* %8, align 4
  %379 = add nsw i32 %378, 1
  store i32 %379, i32* %8, align 4
  br label %256, !llvm.loop !157

380:                                              ; preds = %256
  %381 = load double, double* %18, align 8
  %382 = load double*, double** %20, align 8
  %383 = load i32, i32* %13, align 4
  %384 = sext i32 %383 to i64
  %385 = getelementptr inbounds double, double* %382, i64 %384
  %386 = load double, double* %385, align 8
  %387 = load double*, double** %21, align 8
  %388 = load i32, i32* %13, align 4
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds double, double* %387, i64 %389
  %391 = load double, double* %390, align 8
  %392 = call double @llvm.fmuladd.f64(double %381, double %386, double %391)
  store double %392, double* %390, align 8
  br label %393

393:                                              ; preds = %380, %243
  %394 = load i32, i32* %10, align 4
  %395 = add nsw i32 %394, 1
  store i32 %395, i32* %10, align 4
  br label %223, !llvm.loop !158

396:                                              ; preds = %223
  br label %397

397:                                              ; preds = %396, %217
  %398 = load i32, i32* %4, align 4
  %399 = load i32, i32* %11, align 4
  %400 = icmp slt i32 %398, %399
  br i1 %400, label %401, label %543

401:                                              ; preds = %397
  store i32 4, i32* %10, align 4
  br label %402

402:                                              ; preds = %539, %401
  %403 = load i32, i32* %10, align 4
  %404 = load i32, i32* %4, align 4
  %405 = sub nsw i32 %404, 11
  %406 = add nsw i32 %405, 1
  %407 = icmp sle i32 %403, %406
  br i1 %407, label %408, label %542

408:                                              ; preds = %402
  %409 = load i32*, i32** %16, align 8
  %410 = load i32, i32* %10, align 4
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds i32, i32* %409, i64 %411
  %413 = load i32, i32* %412, align 4
  %414 = load i32, i32* %4, align 4
  %415 = sub nsw i32 %413, %414
  store i32 %415, i32* %13, align 4
  %416 = load double*, double** %20, align 8
  %417 = load i32, i32* %13, align 4
  %418 = sext i32 %417 to i64
  %419 = getelementptr inbounds double, double* %416, i64 %418
  %420 = load double, double* %419, align 8
  %421 = fcmp oeq double %420, 0.000000e+00
  br i1 %421, label %422, label %423

422:                                              ; preds = %408
  br label %539

423:                                              ; preds = %408
  store double 0.000000e+00, double* %18, align 8
  %424 = load i32, i32* %4, align 4
  %425 = add nsw i32 %424, 1
  store i32 %425, i32* %9, align 4
  %426 = load i32, i32* %10, align 4
  %427 = sub nsw i32 %426, 30
  %428 = sub nsw i32 %427, 1
  %429 = icmp sgt i32 1, %428
  br i1 %429, label %430, label %431

430:                                              ; preds = %423
  br label %435

431:                                              ; preds = %423
  %432 = load i32, i32* %10, align 4
  %433 = sub nsw i32 %432, 30
  %434 = sub nsw i32 %433, 1
  br label %435

435:                                              ; preds = %431, %430
  %436 = phi i32 [ 1, %430 ], [ %434, %431 ]
  store i32 %436, i32* %8, align 4
  br label %437

437:                                              ; preds = %523, %435
  %438 = load i32, i32* %8, align 4
  %439 = load i32, i32* %10, align 4
  %440 = sub nsw i32 %439, 3
  %441 = icmp slt i32 %438, %440
  br i1 %441, label %442, label %526

442:                                              ; preds = %437
  %443 = load i32*, i32** %16, align 8
  %444 = load i32, i32* %8, align 4
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds i32, i32* %443, i64 %445
  %447 = load i32, i32* %446, align 4
  %448 = load i32, i32* %9, align 4
  %449 = sub nsw i32 %447, %448
  store i32 %449, i32* %12, align 4
  %450 = load i8*, i8** %6, align 8
  %451 = load i32*, i32** %17, align 8
  %452 = load i32, i32* %9, align 4
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds i32, i32* %451, i64 %453
  %455 = load i32, i32* %454, align 4
  %456 = load i32, i32* %8, align 4
  %457 = add nsw i32 %455, %456
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds i8, i8* %450, i64 %458
  %460 = load i8, i8* %459, align 1
  store i8 %460, i8* %5, align 1
  %461 = load i8, i8* %5, align 1
  %462 = icmp ne i8 %461, 0
  br i1 %462, label %464, label %463

463:                                              ; preds = %442
  br label %523

464:                                              ; preds = %442
  %465 = load i32, i32* %10, align 4
  %466 = load i32, i32* %8, align 4
  %467 = sub nsw i32 %465, %466
  %468 = sub nsw i32 %467, 1
  store i32 %468, i32* %15, align 4
  %469 = load i8, i8* %5, align 1
  %470 = zext i8 %469 to i32
  %471 = icmp sgt i32 %470, 2
  br i1 %471, label %472, label %476

472:                                              ; preds = %464
  %473 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %23, align 8
  %474 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %473, i32 0, i32 21
  %475 = load double, double* %474, align 8
  br label %477

476:                                              ; preds = %464
  br label %477

477:                                              ; preds = %476, %472
  %478 = phi double [ %475, %472 ], [ 1.000000e+00, %476 ]
  store double %478, double* %19, align 8
  %479 = load double*, double** %21, align 8
  %480 = load i32, i32* %12, align 4
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds double, double* %479, i64 %481
  %483 = load double, double* %482, align 8
  %484 = load double, double* %19, align 8
  %485 = fmul double %483, %484
  %486 = load double*, double** %24, align 8
  %487 = load i32, i32* %15, align 4
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds double, double* %486, i64 %488
  %490 = load double, double* %489, align 8
  %491 = fmul double %485, %490
  %492 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %23, align 8
  %493 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %492, i32 0, i32 6
  %494 = load i8, i8* %5, align 1
  %495 = zext i8 %494 to i64
  %496 = getelementptr inbounds [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]]* %493, i64 0, i64 %495
  %497 = load i16*, i16** %7, align 8
  %498 = load i32, i32* %8, align 4
  %499 = add nsw i32 %498, 1
  %500 = sext i32 %499 to i64
  %501 = getelementptr inbounds i16, i16* %497, i64 %500
  %502 = load i16, i16* %501, align 2
  %503 = sext i16 %502 to i64
  %504 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %496, i64 0, i64 %503
  %505 = load i16*, i16** %7, align 8
  %506 = load i32, i32* %9, align 4
  %507 = sub nsw i32 %506, 1
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds i16, i16* %505, i64 %508
  %510 = load i16, i16* %509, align 2
  %511 = sext i16 %510 to i64
  %512 = getelementptr inbounds [5 x double], [5 x double]* %504, i64 0, i64 %511
  %513 = load double, double* %512, align 8
  %514 = fmul double %491, %513
  %515 = load double*, double** %22, align 8
  %516 = load i32, i32* %15, align 4
  %517 = add nsw i32 %516, 2
  %518 = sext i32 %517 to i64
  %519 = getelementptr inbounds double, double* %515, i64 %518
  %520 = load double, double* %519, align 8
  %521 = load double, double* %18, align 8
  %522 = call double @llvm.fmuladd.f64(double %514, double %520, double %521)
  store double %522, double* %18, align 8
  br label %523

523:                                              ; preds = %477, %463
  %524 = load i32, i32* %8, align 4
  %525 = add nsw i32 %524, 1
  store i32 %525, i32* %8, align 4
  br label %437, !llvm.loop !159

526:                                              ; preds = %437
  %527 = load double, double* %18, align 8
  %528 = load double*, double** %20, align 8
  %529 = load i32, i32* %13, align 4
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds double, double* %528, i64 %530
  %532 = load double, double* %531, align 8
  %533 = load double*, double** %21, align 8
  %534 = load i32, i32* %13, align 4
  %535 = sext i32 %534 to i64
  %536 = getelementptr inbounds double, double* %533, i64 %535
  %537 = load double, double* %536, align 8
  %538 = call double @llvm.fmuladd.f64(double %527, double %532, double %537)
  store double %538, double* %536, align 8
  br label %539

539:                                              ; preds = %526, %422
  %540 = load i32, i32* %10, align 4
  %541 = add nsw i32 %540, 1
  store i32 %541, i32* %10, align 4
  br label %402, !llvm.loop !160

542:                                              ; preds = %402
  br label %543

543:                                              ; preds = %542, %397
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @exp_E_MLstem(i32 noundef %0, i32 noundef %1, i32 noundef %2, %struct.vrna_exp_param_s* noundef %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.vrna_exp_param_s*, align 8
  %9 = alloca double, align 8
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %struct.vrna_exp_param_s* %3, %struct.vrna_exp_param_s** %8, align 8
  store double 1.000000e+00, double* %9, align 8
  %10 = load i32, i32* %6, align 4
  %11 = icmp sge i32 %10, 0
  br i1 %11, label %12, label %28

12:                                               ; preds = %4
  %13 = load i32, i32* %7, align 4
  %14 = icmp sge i32 %13, 0
  br i1 %14, label %15, label %28

15:                                               ; preds = %12
  %16 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %8, align 8
  %17 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %16, i32 0, i32 10
  %18 = load i32, i32* %5, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]]* %17, i64 0, i64 %19
  %21 = load i32, i32* %6, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %20, i64 0, i64 %22
  %24 = load i32, i32* %7, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [5 x double], [5 x double]* %23, i64 0, i64 %25
  %27 = load double, double* %26, align 8
  store double %27, double* %9, align 8
  br label %56

28:                                               ; preds = %12, %4
  %29 = load i32, i32* %6, align 4
  %30 = icmp sge i32 %29, 0
  br i1 %30, label %31, label %41

31:                                               ; preds = %28
  %32 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %8, align 8
  %33 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %32, i32 0, i32 11
  %34 = load i32, i32* %5, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [8 x [5 x double]], [8 x [5 x double]]* %33, i64 0, i64 %35
  %37 = load i32, i32* %6, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [5 x double], [5 x double]* %36, i64 0, i64 %38
  %40 = load double, double* %39, align 8
  store double %40, double* %9, align 8
  br label %55

41:                                               ; preds = %28
  %42 = load i32, i32* %7, align 4
  %43 = icmp sge i32 %42, 0
  br i1 %43, label %44, label %54

44:                                               ; preds = %41
  %45 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %8, align 8
  %46 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %45, i32 0, i32 12
  %47 = load i32, i32* %5, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [8 x [5 x double]], [8 x [5 x double]]* %46, i64 0, i64 %48
  %50 = load i32, i32* %7, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [5 x double], [5 x double]* %49, i64 0, i64 %51
  %53 = load double, double* %52, align 8
  store double %53, double* %9, align 8
  br label %54

54:                                               ; preds = %44, %41
  br label %55

55:                                               ; preds = %54, %31
  br label %56

56:                                               ; preds = %55, %15
  %57 = load i32, i32* %5, align 4
  %58 = icmp sgt i32 %57, 2
  br i1 %58, label %59, label %65

59:                                               ; preds = %56
  %60 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %8, align 8
  %61 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %60, i32 0, i32 21
  %62 = load double, double* %61, align 8
  %63 = load double, double* %9, align 8
  %64 = fmul double %63, %62
  store double %64, double* %9, align 8
  br label %65

65:                                               ; preds = %59, %56
  %66 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %8, align 8
  %67 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %66, i32 0, i32 19
  %68 = load i32, i32* %5, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [8 x double], [8 x double]* %67, i64 0, i64 %69
  %71 = load double, double* %70, align 8
  %72 = load double, double* %9, align 8
  %73 = fmul double %72, %71
  store double %73, double* %9, align 8
  %74 = load double, double* %9, align 8
  ret double %74
}

declare dso_local i32 @vrna_get_ptype_md(i32 noundef, i32 noundef, %struct.vrna_md_s* noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rotate_ml_helper_arrays_inner(%struct.helper_arrays* noundef %0) #0 {
  %2 = alloca %struct.helper_arrays*, align 8
  %3 = alloca i32, align 4
  store %struct.helper_arrays* %0, %struct.helper_arrays** %2, align 8
  %4 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %5 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %4, i32 0, i32 5
  %6 = load double*, double** %5, align 8
  %7 = icmp ne double* %6, null
  br i1 %7, label %8, label %34

8:                                                ; preds = %1
  %9 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %10 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %9, i32 0, i32 3
  %11 = load i32, i32* %10, align 8
  store i32 %11, i32* %3, align 4
  br label %12

12:                                               ; preds = %30, %8
  %13 = load i32, i32* %3, align 4
  %14 = icmp ugt i32 %13, 0
  br i1 %14, label %15, label %33

15:                                               ; preds = %12
  %16 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %17 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %16, i32 0, i32 5
  %18 = load double*, double** %17, align 8
  %19 = load i32, i32* %3, align 4
  %20 = sub i32 %19, 1
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds double, double* %18, i64 %21
  %23 = load double, double* %22, align 8
  %24 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %25 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %24, i32 0, i32 5
  %26 = load double*, double** %25, align 8
  %27 = load i32, i32* %3, align 4
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds double, double* %26, i64 %28
  store double %23, double* %29, align 8
  br label %30

30:                                               ; preds = %15
  %31 = load i32, i32* %3, align 4
  %32 = add i32 %31, -1
  store i32 %32, i32* %3, align 4
  br label %12, !llvm.loop !161

33:                                               ; preds = %12
  br label %34

34:                                               ; preds = %33, %1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rotate_ml_helper_arrays_outer(%struct.helper_arrays* noundef %0) #0 {
  %2 = alloca %struct.helper_arrays*, align 8
  %3 = alloca i32, align 4
  %4 = alloca double*, align 8
  store %struct.helper_arrays* %0, %struct.helper_arrays** %2, align 8
  %5 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %6 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %5, i32 0, i32 1
  %7 = load double*, double** %6, align 8
  store double* %7, double** %4, align 8
  %8 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %9 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %8, i32 0, i32 0
  %10 = load double*, double** %9, align 8
  %11 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %12 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %11, i32 0, i32 1
  store double* %10, double** %12, align 8
  %13 = load double*, double** %4, align 8
  %14 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %15 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %14, i32 0, i32 0
  store double* %13, double** %15, align 8
  %16 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %17 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %16, i32 0, i32 4
  %18 = load double**, double*** %17, align 8
  %19 = icmp ne double** %18, null
  br i1 %19, label %20, label %77

20:                                               ; preds = %1
  %21 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %22 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %21, i32 0, i32 4
  %23 = load double**, double*** %22, align 8
  %24 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %25 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %24, i32 0, i32 3
  %26 = load i32, i32* %25, align 8
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds double*, double** %23, i64 %27
  %29 = load double*, double** %28, align 8
  store double* %29, double** %4, align 8
  %30 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %31 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %30, i32 0, i32 3
  %32 = load i32, i32* %31, align 8
  store i32 %32, i32* %3, align 4
  br label %33

33:                                               ; preds = %51, %20
  %34 = load i32, i32* %3, align 4
  %35 = icmp ugt i32 %34, 0
  br i1 %35, label %36, label %54

36:                                               ; preds = %33
  %37 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %38 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %37, i32 0, i32 4
  %39 = load double**, double*** %38, align 8
  %40 = load i32, i32* %3, align 4
  %41 = sub i32 %40, 1
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds double*, double** %39, i64 %42
  %44 = load double*, double** %43, align 8
  %45 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %46 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %45, i32 0, i32 4
  %47 = load double**, double*** %46, align 8
  %48 = load i32, i32* %3, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds double*, double** %47, i64 %49
  store double* %44, double** %50, align 8
  br label %51

51:                                               ; preds = %36
  %52 = load i32, i32* %3, align 4
  %53 = add i32 %52, -1
  store i32 %53, i32* %3, align 4
  br label %33, !llvm.loop !162

54:                                               ; preds = %33
  %55 = load double*, double** %4, align 8
  %56 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %57 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %56, i32 0, i32 4
  %58 = load double**, double*** %57, align 8
  %59 = getelementptr inbounds double*, double** %58, i64 0
  store double* %55, double** %59, align 8
  store i32 0, i32* %3, align 4
  br label %60

60:                                               ; preds = %73, %54
  %61 = load i32, i32* %3, align 4
  %62 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %63 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %62, i32 0, i32 3
  %64 = load i32, i32* %63, align 8
  %65 = icmp ule i32 %61, %64
  br i1 %65, label %66, label %76

66:                                               ; preds = %60
  %67 = load %struct.helper_arrays*, %struct.helper_arrays** %2, align 8
  %68 = getelementptr inbounds %struct.helper_arrays, %struct.helper_arrays* %67, i32 0, i32 5
  %69 = load double*, double** %68, align 8
  %70 = load i32, i32* %3, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds double, double* %69, i64 %71
  store double 0.000000e+00, double* %72, align 8
  br label %73

73:                                               ; preds = %66
  %74 = load i32, i32* %3, align 4
  %75 = add i32 %74, 1
  store i32 %75, i32* %3, align 4
  br label %60, !llvm.loop !163

76:                                               ; preds = %60
  br label %77

77:                                               ; preds = %76, %1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @compute_gquad_prob_internal_comparative(%struct.vrna_fc_s* noundef %0, i32 noundef %1) #0 {
  %3 = alloca %struct.vrna_fc_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8, align 1
  %6 = alloca i16**, align 8
  %7 = alloca i16**, align 8
  %8 = alloca i16**, align 8
  %9 = alloca i32**, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32*, align 8
  %23 = alloca double, align 8
  %24 = alloca double, align 8
  %25 = alloca double*, align 8
  %26 = alloca double*, align 8
  %27 = alloca double*, align 8
  %28 = alloca double*, align 8
  %29 = alloca %struct.vrna_exp_param_s*, align 8
  %30 = alloca %struct.vrna_md_s*, align 8
  %31 = alloca double*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %3, align 8
  store i32 %1, i32* %4, align 4
  %32 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %33 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %32, i32 0, i32 1
  %34 = load i32, i32* %33, align 4
  store i32 %34, i32* %15, align 4
  %35 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %36 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %35, i32 0, i32 24
  %37 = bitcast %union.anon.9* %36 to %struct.anon.14*
  %38 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %37, i32 0, i32 1
  %39 = load i32, i32* %38, align 8
  store i32 %39, i32* %11, align 4
  %40 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %41 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %40, i32 0, i32 24
  %42 = bitcast %union.anon.9* %41 to %struct.anon.14*
  %43 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %42, i32 0, i32 4
  %44 = load i16**, i16*** %43, align 8
  store i16** %44, i16*** %6, align 8
  %45 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %46 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %45, i32 0, i32 24
  %47 = bitcast %union.anon.9* %46 to %struct.anon.14*
  %48 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %47, i32 0, i32 5
  %49 = load i16**, i16*** %48, align 8
  store i16** %49, i16*** %7, align 8
  %50 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %51 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %50, i32 0, i32 24
  %52 = bitcast %union.anon.9* %51 to %struct.anon.14*
  %53 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %52, i32 0, i32 6
  %54 = load i16**, i16*** %53, align 8
  store i16** %54, i16*** %8, align 8
  %55 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %56 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %55, i32 0, i32 24
  %57 = bitcast %union.anon.9* %56 to %struct.anon.14*
  %58 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %57, i32 0, i32 8
  %59 = load i32**, i32*** %58, align 8
  store i32** %59, i32*** %9, align 8
  %60 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %61 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %60, i32 0, i32 16
  %62 = load i32*, i32** %61, align 8
  store i32* %62, i32** %22, align 8
  %63 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %64 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %63, i32 0, i32 15
  %65 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %64, align 8
  store %struct.vrna_exp_param_s* %65, %struct.vrna_exp_param_s** %29, align 8
  %66 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %67 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %66, i32 0, i32 13
  %68 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %67, align 8
  %69 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %68, i32 0, i32 4
  %70 = bitcast %union.anon.5* %69 to %struct.anon.6*
  %71 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %70, i32 0, i32 7
  %72 = load double*, double** %71, align 8
  store double* %72, double** %25, align 8
  %73 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %74 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %73, i32 0, i32 13
  %75 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %74, align 8
  %76 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %75, i32 0, i32 4
  %77 = bitcast %union.anon.5* %76 to %struct.anon.6*
  %78 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %77, i32 0, i32 1
  %79 = load double*, double** %78, align 8
  store double* %79, double** %26, align 8
  %80 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %81 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %80, i32 0, i32 13
  %82 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %81, align 8
  %83 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %82, i32 0, i32 4
  %84 = bitcast %union.anon.5* %83 to %struct.anon.6*
  %85 = getelementptr inbounds %struct.anon.6, %struct.anon.6* %84, i32 0, i32 4
  %86 = load double*, double** %85, align 8
  store double* %86, double** %27, align 8
  %87 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %3, align 8
  %88 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %87, i32 0, i32 13
  %89 = load %struct.vrna_mx_pf_s*, %struct.vrna_mx_pf_s** %88, align 8
  %90 = getelementptr inbounds %struct.vrna_mx_pf_s, %struct.vrna_mx_pf_s* %89, i32 0, i32 2
  %91 = load double*, double** %90, align 8
  store double* %91, double** %28, align 8
  %92 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %29, align 8
  %93 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %92, i32 0, i32 40
  store %struct.vrna_md_s* %93, %struct.vrna_md_s** %30, align 8
  %94 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %29, align 8
  %95 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %94, i32 0, i32 4
  %96 = getelementptr inbounds [31 x double], [31 x double]* %95, i64 0, i64 0
  store double* %96, double** %31, align 8
  %97 = load i32, i32* %4, align 4
  %98 = load i32, i32* %15, align 4
  %99 = sub nsw i32 %98, 3
  %100 = icmp slt i32 %97, %99
  br i1 %100, label %101, label %304

101:                                              ; preds = %2
  store i32 2, i32* %14, align 4
  br label %102

102:                                              ; preds = %300, %101
  %103 = load i32, i32* %14, align 4
  %104 = load i32, i32* %4, align 4
  %105 = sub nsw i32 %104, 11
  %106 = add nsw i32 %105, 1
  %107 = icmp sle i32 %103, %106
  br i1 %107, label %108, label %303

108:                                              ; preds = %102
  %109 = load i32*, i32** %22, align 8
  %110 = load i32, i32* %14, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i32, i32* %109, i64 %111
  %113 = load i32, i32* %112, align 4
  %114 = load i32, i32* %4, align 4
  %115 = sub nsw i32 %113, %114
  store i32 %115, i32* %17, align 4
  %116 = load double*, double** %25, align 8
  %117 = load i32, i32* %17, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds double, double* %116, i64 %118
  %120 = load double, double* %119, align 8
  %121 = fcmp oeq double %120, 0.000000e+00
  br i1 %121, label %122, label %123

122:                                              ; preds = %108
  br label %300

123:                                              ; preds = %108
  store double 0.000000e+00, double* %23, align 8
  %124 = load i32, i32* %14, align 4
  %125 = sub nsw i32 %124, 1
  store i32 %125, i32* %12, align 4
  %126 = load i32, i32* %4, align 4
  %127 = add nsw i32 %126, 30
  %128 = add nsw i32 %127, 1
  %129 = load i32, i32* %15, align 4
  %130 = icmp slt i32 %128, %129
  br i1 %130, label %131, label %135

131:                                              ; preds = %123
  %132 = load i32, i32* %4, align 4
  %133 = add nsw i32 %132, 30
  %134 = add nsw i32 %133, 1
  br label %137

135:                                              ; preds = %123
  %136 = load i32, i32* %15, align 4
  br label %137

137:                                              ; preds = %135, %131
  %138 = phi i32 [ %134, %131 ], [ %136, %135 ]
  store i32 %138, i32* %13, align 4
  br label %139

139:                                              ; preds = %284, %137
  %140 = load i32, i32* %13, align 4
  %141 = load i32, i32* %4, align 4
  %142 = add nsw i32 %141, 3
  %143 = icmp sgt i32 %140, %142
  br i1 %143, label %144, label %287

144:                                              ; preds = %139
  %145 = load i32*, i32** %22, align 8
  %146 = load i32, i32* %12, align 4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds i32, i32* %145, i64 %147
  %149 = load i32, i32* %148, align 4
  %150 = load i32, i32* %13, align 4
  %151 = sub nsw i32 %149, %150
  store i32 %151, i32* %16, align 4
  %152 = load double*, double** %26, align 8
  %153 = load i32, i32* %16, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds double, double* %152, i64 %154
  %156 = load double, double* %155, align 8
  %157 = fcmp oeq double %156, 0.000000e+00
  br i1 %157, label %158, label %159

158:                                              ; preds = %144
  br label %284

159:                                              ; preds = %144
  store double 1.000000e+00, double* %24, align 8
  %160 = load i32, i32* %13, align 4
  %161 = load i32, i32* %4, align 4
  %162 = sub nsw i32 %160, %161
  %163 = sub nsw i32 %162, 1
  store i32 %163, i32* %18, align 4
  store i32 0, i32* %10, align 4
  br label %164

164:                                              ; preds = %265, %159
  %165 = load i32, i32* %10, align 4
  %166 = load i32, i32* %11, align 4
  %167 = icmp ult i32 %165, %166
  br i1 %167, label %168, label %268

168:                                              ; preds = %164
  %169 = load i16**, i16*** %6, align 8
  %170 = load i32, i32* %10, align 4
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds i16*, i16** %169, i64 %171
  %173 = load i16*, i16** %172, align 8
  %174 = load i32, i32* %12, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds i16, i16* %173, i64 %175
  %177 = load i16, i16* %176, align 2
  %178 = sext i16 %177 to i32
  %179 = load i16**, i16*** %6, align 8
  %180 = load i32, i32* %10, align 4
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds i16*, i16** %179, i64 %181
  %183 = load i16*, i16** %182, align 8
  %184 = load i32, i32* %13, align 4
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i16, i16* %183, i64 %185
  %187 = load i16, i16* %186, align 2
  %188 = sext i16 %187 to i32
  %189 = load %struct.vrna_md_s*, %struct.vrna_md_s** %30, align 8
  %190 = call i32 @vrna_get_ptype_md(i32 noundef %178, i32 noundef %188, %struct.vrna_md_s* noundef %189)
  %191 = trunc i32 %190 to i8
  store i8 %191, i8* %5, align 1
  %192 = load i32**, i32*** %9, align 8
  %193 = load i32, i32* %10, align 4
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds i32*, i32** %192, i64 %194
  %196 = load i32*, i32** %195, align 8
  %197 = load i32, i32* %13, align 4
  %198 = sub nsw i32 %197, 1
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds i32, i32* %196, i64 %199
  %201 = load i32, i32* %200, align 4
  %202 = load i32**, i32*** %9, align 8
  %203 = load i32, i32* %10, align 4
  %204 = zext i32 %203 to i64
  %205 = getelementptr inbounds i32*, i32** %202, i64 %204
  %206 = load i32*, i32** %205, align 8
  %207 = load i32, i32* %4, align 4
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i32, i32* %206, i64 %208
  %210 = load i32, i32* %209, align 4
  %211 = sub i32 %201, %210
  store i32 %211, i32* %20, align 4
  %212 = load double*, double** %31, align 8
  %213 = load i32, i32* %20, align 4
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds double, double* %212, i64 %214
  %216 = load double, double* %215, align 8
  %217 = load double, double* %24, align 8
  %218 = fmul double %217, %216
  store double %218, double* %24, align 8
  %219 = load %struct.vrna_md_s*, %struct.vrna_md_s** %30, align 8
  %220 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %219, i32 0, i32 3
  %221 = load i32, i32* %220, align 4
  %222 = icmp eq i32 %221, 2
  br i1 %222, label %223, label %254

223:                                              ; preds = %168
  %224 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %29, align 8
  %225 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %224, i32 0, i32 6
  %226 = load i8, i8* %5, align 1
  %227 = zext i8 %226 to i64
  %228 = getelementptr inbounds [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]]* %225, i64 0, i64 %227
  %229 = load i16**, i16*** %8, align 8
  %230 = load i32, i32* %10, align 4
  %231 = zext i32 %230 to i64
  %232 = getelementptr inbounds i16*, i16** %229, i64 %231
  %233 = load i16*, i16** %232, align 8
  %234 = load i32, i32* %12, align 4
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds i16, i16* %233, i64 %235
  %237 = load i16, i16* %236, align 2
  %238 = sext i16 %237 to i64
  %239 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %228, i64 0, i64 %238
  %240 = load i16**, i16*** %7, align 8
  %241 = load i32, i32* %10, align 4
  %242 = zext i32 %241 to i64
  %243 = getelementptr inbounds i16*, i16** %240, i64 %242
  %244 = load i16*, i16** %243, align 8
  %245 = load i32, i32* %13, align 4
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds i16, i16* %244, i64 %246
  %248 = load i16, i16* %247, align 2
  %249 = sext i16 %248 to i64
  %250 = getelementptr inbounds [5 x double], [5 x double]* %239, i64 0, i64 %249
  %251 = load double, double* %250, align 8
  %252 = load double, double* %24, align 8
  %253 = fmul double %252, %251
  store double %253, double* %24, align 8
  br label %254

254:                                              ; preds = %223, %168
  %255 = load i8, i8* %5, align 1
  %256 = zext i8 %255 to i32
  %257 = icmp sgt i32 %256, 2
  br i1 %257, label %258, label %264

258:                                              ; preds = %254
  %259 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %29, align 8
  %260 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %259, i32 0, i32 21
  %261 = load double, double* %260, align 8
  %262 = load double, double* %24, align 8
  %263 = fmul double %262, %261
  store double %263, double* %24, align 8
  br label %264

264:                                              ; preds = %258, %254
  br label %265

265:                                              ; preds = %264
  %266 = load i32, i32* %10, align 4
  %267 = add i32 %266, 1
  store i32 %267, i32* %10, align 4
  br label %164, !llvm.loop !164

268:                                              ; preds = %164
  %269 = load double*, double** %27, align 8
  %270 = load i32, i32* %16, align 4
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds double, double* %269, i64 %271
  %273 = load double, double* %272, align 8
  %274 = load double, double* %24, align 8
  %275 = fmul double %273, %274
  %276 = load double*, double** %28, align 8
  %277 = load i32, i32* %18, align 4
  %278 = add nsw i32 %277, 2
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds double, double* %276, i64 %279
  %281 = load double, double* %280, align 8
  %282 = load double, double* %23, align 8
  %283 = call double @llvm.fmuladd.f64(double %275, double %281, double %282)
  store double %283, double* %23, align 8
  br label %284

284:                                              ; preds = %268, %158
  %285 = load i32, i32* %13, align 4
  %286 = add nsw i32 %285, -1
  store i32 %286, i32* %13, align 4
  br label %139, !llvm.loop !165

287:                                              ; preds = %139
  %288 = load double, double* %23, align 8
  %289 = load double*, double** %25, align 8
  %290 = load i32, i32* %17, align 4
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds double, double* %289, i64 %291
  %293 = load double, double* %292, align 8
  %294 = load double*, double** %27, align 8
  %295 = load i32, i32* %17, align 4
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds double, double* %294, i64 %296
  %298 = load double, double* %297, align 8
  %299 = call double @llvm.fmuladd.f64(double %288, double %293, double %298)
  store double %299, double* %297, align 8
  br label %300

300:                                              ; preds = %287, %122
  %301 = load i32, i32* %14, align 4
  %302 = add nsw i32 %301, 1
  store i32 %302, i32* %14, align 4
  br label %102, !llvm.loop !166

303:                                              ; preds = %102
  br label %304

304:                                              ; preds = %303, %2
  %305 = load i32, i32* %4, align 4
  %306 = load i32, i32* %15, align 4
  %307 = sub nsw i32 %306, 1
  %308 = icmp slt i32 %305, %307
  br i1 %308, label %309, label %563

309:                                              ; preds = %304
  store i32 3, i32* %14, align 4
  br label %310

310:                                              ; preds = %559, %309
  %311 = load i32, i32* %14, align 4
  %312 = load i32, i32* %4, align 4
  %313 = sub nsw i32 %312, 11
  %314 = add nsw i32 %313, 1
  %315 = icmp sle i32 %311, %314
  br i1 %315, label %316, label %562

316:                                              ; preds = %310
  %317 = load i32*, i32** %22, align 8
  %318 = load i32, i32* %14, align 4
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds i32, i32* %317, i64 %319
  %321 = load i32, i32* %320, align 4
  %322 = load i32, i32* %4, align 4
  %323 = sub nsw i32 %321, %322
  store i32 %323, i32* %17, align 4
  %324 = load double*, double** %25, align 8
  %325 = load i32, i32* %17, align 4
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds double, double* %324, i64 %326
  %328 = load double, double* %327, align 8
  %329 = fcmp oeq double %328, 0.000000e+00
  br i1 %329, label %330, label %331

330:                                              ; preds = %316
  br label %559

331:                                              ; preds = %316
  store double 0.000000e+00, double* %23, align 8
  %332 = load i32, i32* %14, align 4
  %333 = sub nsw i32 %332, 30
  %334 = sub nsw i32 %333, 1
  %335 = icmp sgt i32 1, %334
  br i1 %335, label %336, label %337

336:                                              ; preds = %331
  br label %341

337:                                              ; preds = %331
  %338 = load i32, i32* %14, align 4
  %339 = sub nsw i32 %338, 30
  %340 = sub nsw i32 %339, 1
  br label %341

341:                                              ; preds = %337, %336
  %342 = phi i32 [ 1, %336 ], [ %340, %337 ]
  store i32 %342, i32* %12, align 4
  br label %343

343:                                              ; preds = %543, %341
  %344 = load i32, i32* %12, align 4
  %345 = load i32, i32* %14, align 4
  %346 = sub nsw i32 %345, 2
  %347 = icmp sle i32 %344, %346
  br i1 %347, label %348, label %546

348:                                              ; preds = %343
  %349 = load i32, i32* %14, align 4
  %350 = load i32, i32* %12, align 4
  %351 = sub nsw i32 %349, %350
  %352 = sub nsw i32 %351, 1
  store i32 %352, i32* %18, align 4
  %353 = load i32, i32* %4, align 4
  %354 = add nsw i32 %353, 2
  store i32 %354, i32* %13, align 4
  br label %355

355:                                              ; preds = %539, %348
  %356 = load i32, i32* %13, align 4
  %357 = load i32, i32* %4, align 4
  %358 = add nsw i32 %357, 30
  %359 = load i32, i32* %18, align 4
  %360 = sub nsw i32 %358, %359
  %361 = add nsw i32 %360, 1
  %362 = load i32, i32* %15, align 4
  %363 = icmp slt i32 %361, %362
  br i1 %363, label %364, label %370

364:                                              ; preds = %355
  %365 = load i32, i32* %4, align 4
  %366 = add nsw i32 %365, 30
  %367 = load i32, i32* %18, align 4
  %368 = sub nsw i32 %366, %367
  %369 = add nsw i32 %368, 1
  br label %372

370:                                              ; preds = %355
  %371 = load i32, i32* %15, align 4
  br label %372

372:                                              ; preds = %370, %364
  %373 = phi i32 [ %369, %364 ], [ %371, %370 ]
  %374 = icmp sle i32 %356, %373
  br i1 %374, label %375, label %542

375:                                              ; preds = %372
  %376 = load i32*, i32** %22, align 8
  %377 = load i32, i32* %12, align 4
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds i32, i32* %376, i64 %378
  %380 = load i32, i32* %379, align 4
  %381 = load i32, i32* %13, align 4
  %382 = sub nsw i32 %380, %381
  store i32 %382, i32* %16, align 4
  %383 = load double*, double** %26, align 8
  %384 = load i32, i32* %16, align 4
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds double, double* %383, i64 %385
  %387 = load double, double* %386, align 8
  %388 = fcmp oeq double %387, 0.000000e+00
  br i1 %388, label %389, label %390

389:                                              ; preds = %375
  br label %539

390:                                              ; preds = %375
  store double 1.000000e+00, double* %24, align 8
  %391 = load i32, i32* %13, align 4
  %392 = load i32, i32* %4, align 4
  %393 = sub nsw i32 %391, %392
  %394 = sub nsw i32 %393, 1
  store i32 %394, i32* %19, align 4
  store i32 0, i32* %10, align 4
  br label %395

395:                                              ; preds = %518, %390
  %396 = load i32, i32* %10, align 4
  %397 = load i32, i32* %11, align 4
  %398 = icmp ult i32 %396, %397
  br i1 %398, label %399, label %521

399:                                              ; preds = %395
  %400 = load i16**, i16*** %6, align 8
  %401 = load i32, i32* %10, align 4
  %402 = zext i32 %401 to i64
  %403 = getelementptr inbounds i16*, i16** %400, i64 %402
  %404 = load i16*, i16** %403, align 8
  %405 = load i32, i32* %12, align 4
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds i16, i16* %404, i64 %406
  %408 = load i16, i16* %407, align 2
  %409 = sext i16 %408 to i32
  %410 = load i16**, i16*** %6, align 8
  %411 = load i32, i32* %10, align 4
  %412 = zext i32 %411 to i64
  %413 = getelementptr inbounds i16*, i16** %410, i64 %412
  %414 = load i16*, i16** %413, align 8
  %415 = load i32, i32* %13, align 4
  %416 = sext i32 %415 to i64
  %417 = getelementptr inbounds i16, i16* %414, i64 %416
  %418 = load i16, i16* %417, align 2
  %419 = sext i16 %418 to i32
  %420 = load %struct.vrna_md_s*, %struct.vrna_md_s** %30, align 8
  %421 = call i32 @vrna_get_ptype_md(i32 noundef %409, i32 noundef %419, %struct.vrna_md_s* noundef %420)
  %422 = trunc i32 %421 to i8
  store i8 %422, i8* %5, align 1
  %423 = load i32**, i32*** %9, align 8
  %424 = load i32, i32* %10, align 4
  %425 = zext i32 %424 to i64
  %426 = getelementptr inbounds i32*, i32** %423, i64 %425
  %427 = load i32*, i32** %426, align 8
  %428 = load i32, i32* %14, align 4
  %429 = sub nsw i32 %428, 1
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds i32, i32* %427, i64 %430
  %432 = load i32, i32* %431, align 4
  %433 = load i32**, i32*** %9, align 8
  %434 = load i32, i32* %10, align 4
  %435 = zext i32 %434 to i64
  %436 = getelementptr inbounds i32*, i32** %433, i64 %435
  %437 = load i32*, i32** %436, align 8
  %438 = load i32, i32* %12, align 4
  %439 = sext i32 %438 to i64
  %440 = getelementptr inbounds i32, i32* %437, i64 %439
  %441 = load i32, i32* %440, align 4
  %442 = sub i32 %432, %441
  store i32 %442, i32* %20, align 4
  %443 = load i32**, i32*** %9, align 8
  %444 = load i32, i32* %10, align 4
  %445 = zext i32 %444 to i64
  %446 = getelementptr inbounds i32*, i32** %443, i64 %445
  %447 = load i32*, i32** %446, align 8
  %448 = load i32, i32* %13, align 4
  %449 = sub nsw i32 %448, 1
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds i32, i32* %447, i64 %450
  %452 = load i32, i32* %451, align 4
  %453 = load i32**, i32*** %9, align 8
  %454 = load i32, i32* %10, align 4
  %455 = zext i32 %454 to i64
  %456 = getelementptr inbounds i32*, i32** %453, i64 %455
  %457 = load i32*, i32** %456, align 8
  %458 = load i32, i32* %4, align 4
  %459 = sext i32 %458 to i64
  %460 = getelementptr inbounds i32, i32* %457, i64 %459
  %461 = load i32, i32* %460, align 4
  %462 = sub i32 %452, %461
  store i32 %462, i32* %21, align 4
  %463 = load double*, double** %31, align 8
  %464 = load i32, i32* %20, align 4
  %465 = load i32, i32* %21, align 4
  %466 = add nsw i32 %464, %465
  %467 = sext i32 %466 to i64
  %468 = getelementptr inbounds double, double* %463, i64 %467
  %469 = load double, double* %468, align 8
  %470 = load double, double* %24, align 8
  %471 = fmul double %470, %469
  store double %471, double* %24, align 8
  %472 = load %struct.vrna_md_s*, %struct.vrna_md_s** %30, align 8
  %473 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %472, i32 0, i32 3
  %474 = load i32, i32* %473, align 4
  %475 = icmp eq i32 %474, 2
  br i1 %475, label %476, label %507

476:                                              ; preds = %399
  %477 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %29, align 8
  %478 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %477, i32 0, i32 6
  %479 = load i8, i8* %5, align 1
  %480 = zext i8 %479 to i64
  %481 = getelementptr inbounds [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]]* %478, i64 0, i64 %480
  %482 = load i16**, i16*** %8, align 8
  %483 = load i32, i32* %10, align 4
  %484 = zext i32 %483 to i64
  %485 = getelementptr inbounds i16*, i16** %482, i64 %484
  %486 = load i16*, i16** %485, align 8
  %487 = load i32, i32* %12, align 4
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds i16, i16* %486, i64 %488
  %490 = load i16, i16* %489, align 2
  %491 = sext i16 %490 to i64
  %492 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %481, i64 0, i64 %491
  %493 = load i16**, i16*** %7, align 8
  %494 = load i32, i32* %10, align 4
  %495 = zext i32 %494 to i64
  %496 = getelementptr inbounds i16*, i16** %493, i64 %495
  %497 = load i16*, i16** %496, align 8
  %498 = load i32, i32* %13, align 4
  %499 = sext i32 %498 to i64
  %500 = getelementptr inbounds i16, i16* %497, i64 %499
  %501 = load i16, i16* %500, align 2
  %502 = sext i16 %501 to i64
  %503 = getelementptr inbounds [5 x double], [5 x double]* %492, i64 0, i64 %502
  %504 = load double, double* %503, align 8
  %505 = load double, double* %24, align 8
  %506 = fmul double %505, %504
  store double %506, double* %24, align 8
  br label %507

507:                                              ; preds = %476, %399
  %508 = load i8, i8* %5, align 1
  %509 = zext i8 %508 to i32
  %510 = icmp sgt i32 %509, 2
  br i1 %510, label %511, label %517

511:                                              ; preds = %507
  %512 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %29, align 8
  %513 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %512, i32 0, i32 21
  %514 = load double, double* %513, align 8
  %515 = load double, double* %24, align 8
  %516 = fmul double %515, %514
  store double %516, double* %24, align 8
  br label %517

517:                                              ; preds = %511, %507
  br label %518

518:                                              ; preds = %517
  %519 = load i32, i32* %10, align 4
  %520 = add i32 %519, 1
  store i32 %520, i32* %10, align 4
  br label %395, !llvm.loop !167

521:                                              ; preds = %395
  %522 = load double*, double** %27, align 8
  %523 = load i32, i32* %16, align 4
  %524 = sext i32 %523 to i64
  %525 = getelementptr inbounds double, double* %522, i64 %524
  %526 = load double, double* %525, align 8
  %527 = load double, double* %24, align 8
  %528 = fmul double %526, %527
  %529 = load double*, double** %28, align 8
  %530 = load i32, i32* %18, align 4
  %531 = load i32, i32* %19, align 4
  %532 = add nsw i32 %530, %531
  %533 = add nsw i32 %532, 2
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds double, double* %529, i64 %534
  %536 = load double, double* %535, align 8
  %537 = load double, double* %23, align 8
  %538 = call double @llvm.fmuladd.f64(double %528, double %536, double %537)
  store double %538, double* %23, align 8
  br label %539

539:                                              ; preds = %521, %389
  %540 = load i32, i32* %13, align 4
  %541 = add nsw i32 %540, 1
  store i32 %541, i32* %13, align 4
  br label %355, !llvm.loop !168

542:                                              ; preds = %372
  br label %543

543:                                              ; preds = %542
  %544 = load i32, i32* %12, align 4
  %545 = add nsw i32 %544, 1
  store i32 %545, i32* %12, align 4
  br label %343, !llvm.loop !169

546:                                              ; preds = %343
  %547 = load double, double* %23, align 8
  %548 = load double*, double** %25, align 8
  %549 = load i32, i32* %17, align 4
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds double, double* %548, i64 %550
  %552 = load double, double* %551, align 8
  %553 = load double*, double** %27, align 8
  %554 = load i32, i32* %17, align 4
  %555 = sext i32 %554 to i64
  %556 = getelementptr inbounds double, double* %553, i64 %555
  %557 = load double, double* %556, align 8
  %558 = call double @llvm.fmuladd.f64(double %547, double %552, double %557)
  store double %558, double* %556, align 8
  br label %559

559:                                              ; preds = %546, %330
  %560 = load i32, i32* %14, align 4
  %561 = add nsw i32 %560, 1
  store i32 %561, i32* %14, align 4
  br label %310, !llvm.loop !170

562:                                              ; preds = %310
  br label %563

563:                                              ; preds = %562, %304
  %564 = load i32, i32* %4, align 4
  %565 = load i32, i32* %15, align 4
  %566 = icmp slt i32 %564, %565
  br i1 %566, label %567, label %768

567:                                              ; preds = %563
  store i32 4, i32* %14, align 4
  br label %568

568:                                              ; preds = %764, %567
  %569 = load i32, i32* %14, align 4
  %570 = load i32, i32* %4, align 4
  %571 = sub nsw i32 %570, 11
  %572 = add nsw i32 %571, 1
  %573 = icmp sle i32 %569, %572
  br i1 %573, label %574, label %767

574:                                              ; preds = %568
  %575 = load i32*, i32** %22, align 8
  %576 = load i32, i32* %14, align 4
  %577 = sext i32 %576 to i64
  %578 = getelementptr inbounds i32, i32* %575, i64 %577
  %579 = load i32, i32* %578, align 4
  %580 = load i32, i32* %4, align 4
  %581 = sub nsw i32 %579, %580
  store i32 %581, i32* %17, align 4
  %582 = load double*, double** %25, align 8
  %583 = load i32, i32* %17, align 4
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds double, double* %582, i64 %584
  %586 = load double, double* %585, align 8
  %587 = fcmp oeq double %586, 0.000000e+00
  br i1 %587, label %588, label %589

588:                                              ; preds = %574
  br label %764

589:                                              ; preds = %574
  store double 0.000000e+00, double* %23, align 8
  %590 = load i32, i32* %4, align 4
  %591 = add nsw i32 %590, 1
  store i32 %591, i32* %13, align 4
  %592 = load i32, i32* %14, align 4
  %593 = sub nsw i32 %592, 30
  %594 = sub nsw i32 %593, 1
  %595 = icmp sgt i32 1, %594
  br i1 %595, label %596, label %597

596:                                              ; preds = %589
  br label %601

597:                                              ; preds = %589
  %598 = load i32, i32* %14, align 4
  %599 = sub nsw i32 %598, 30
  %600 = sub nsw i32 %599, 1
  br label %601

601:                                              ; preds = %597, %596
  %602 = phi i32 [ 1, %596 ], [ %600, %597 ]
  store i32 %602, i32* %12, align 4
  br label %603

603:                                              ; preds = %748, %601
  %604 = load i32, i32* %12, align 4
  %605 = load i32, i32* %14, align 4
  %606 = sub nsw i32 %605, 3
  %607 = icmp slt i32 %604, %606
  br i1 %607, label %608, label %751

608:                                              ; preds = %603
  %609 = load i32*, i32** %22, align 8
  %610 = load i32, i32* %12, align 4
  %611 = sext i32 %610 to i64
  %612 = getelementptr inbounds i32, i32* %609, i64 %611
  %613 = load i32, i32* %612, align 4
  %614 = load i32, i32* %13, align 4
  %615 = sub nsw i32 %613, %614
  store i32 %615, i32* %16, align 4
  %616 = load double*, double** %26, align 8
  %617 = load i32, i32* %16, align 4
  %618 = sext i32 %617 to i64
  %619 = getelementptr inbounds double, double* %616, i64 %618
  %620 = load double, double* %619, align 8
  %621 = fcmp oeq double %620, 0.000000e+00
  br i1 %621, label %622, label %623

622:                                              ; preds = %608
  br label %748

623:                                              ; preds = %608
  store double 1.000000e+00, double* %24, align 8
  %624 = load i32, i32* %14, align 4
  %625 = load i32, i32* %12, align 4
  %626 = sub nsw i32 %624, %625
  %627 = sub nsw i32 %626, 1
  store i32 %627, i32* %19, align 4
  store i32 0, i32* %10, align 4
  br label %628

628:                                              ; preds = %729, %623
  %629 = load i32, i32* %10, align 4
  %630 = load i32, i32* %11, align 4
  %631 = icmp ult i32 %629, %630
  br i1 %631, label %632, label %732

632:                                              ; preds = %628
  %633 = load i16**, i16*** %6, align 8
  %634 = load i32, i32* %10, align 4
  %635 = zext i32 %634 to i64
  %636 = getelementptr inbounds i16*, i16** %633, i64 %635
  %637 = load i16*, i16** %636, align 8
  %638 = load i32, i32* %12, align 4
  %639 = sext i32 %638 to i64
  %640 = getelementptr inbounds i16, i16* %637, i64 %639
  %641 = load i16, i16* %640, align 2
  %642 = sext i16 %641 to i32
  %643 = load i16**, i16*** %6, align 8
  %644 = load i32, i32* %10, align 4
  %645 = zext i32 %644 to i64
  %646 = getelementptr inbounds i16*, i16** %643, i64 %645
  %647 = load i16*, i16** %646, align 8
  %648 = load i32, i32* %13, align 4
  %649 = sext i32 %648 to i64
  %650 = getelementptr inbounds i16, i16* %647, i64 %649
  %651 = load i16, i16* %650, align 2
  %652 = sext i16 %651 to i32
  %653 = load %struct.vrna_md_s*, %struct.vrna_md_s** %30, align 8
  %654 = call i32 @vrna_get_ptype_md(i32 noundef %642, i32 noundef %652, %struct.vrna_md_s* noundef %653)
  %655 = trunc i32 %654 to i8
  store i8 %655, i8* %5, align 1
  %656 = load i32**, i32*** %9, align 8
  %657 = load i32, i32* %10, align 4
  %658 = zext i32 %657 to i64
  %659 = getelementptr inbounds i32*, i32** %656, i64 %658
  %660 = load i32*, i32** %659, align 8
  %661 = load i32, i32* %14, align 4
  %662 = sub nsw i32 %661, 1
  %663 = sext i32 %662 to i64
  %664 = getelementptr inbounds i32, i32* %660, i64 %663
  %665 = load i32, i32* %664, align 4
  %666 = load i32**, i32*** %9, align 8
  %667 = load i32, i32* %10, align 4
  %668 = zext i32 %667 to i64
  %669 = getelementptr inbounds i32*, i32** %666, i64 %668
  %670 = load i32*, i32** %669, align 8
  %671 = load i32, i32* %12, align 4
  %672 = sext i32 %671 to i64
  %673 = getelementptr inbounds i32, i32* %670, i64 %672
  %674 = load i32, i32* %673, align 4
  %675 = sub i32 %665, %674
  store i32 %675, i32* %21, align 4
  %676 = load double*, double** %31, align 8
  %677 = load i32, i32* %21, align 4
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds double, double* %676, i64 %678
  %680 = load double, double* %679, align 8
  %681 = load double, double* %24, align 8
  %682 = fmul double %681, %680
  store double %682, double* %24, align 8
  %683 = load %struct.vrna_md_s*, %struct.vrna_md_s** %30, align 8
  %684 = getelementptr inbounds %struct.vrna_md_s, %struct.vrna_md_s* %683, i32 0, i32 3
  %685 = load i32, i32* %684, align 4
  %686 = icmp eq i32 %685, 2
  br i1 %686, label %687, label %718

687:                                              ; preds = %632
  %688 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %29, align 8
  %689 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %688, i32 0, i32 6
  %690 = load i8, i8* %5, align 1
  %691 = zext i8 %690 to i64
  %692 = getelementptr inbounds [8 x [5 x [5 x double]]], [8 x [5 x [5 x double]]]* %689, i64 0, i64 %691
  %693 = load i16**, i16*** %8, align 8
  %694 = load i32, i32* %10, align 4
  %695 = zext i32 %694 to i64
  %696 = getelementptr inbounds i16*, i16** %693, i64 %695
  %697 = load i16*, i16** %696, align 8
  %698 = load i32, i32* %12, align 4
  %699 = sext i32 %698 to i64
  %700 = getelementptr inbounds i16, i16* %697, i64 %699
  %701 = load i16, i16* %700, align 2
  %702 = sext i16 %701 to i64
  %703 = getelementptr inbounds [5 x [5 x double]], [5 x [5 x double]]* %692, i64 0, i64 %702
  %704 = load i16**, i16*** %7, align 8
  %705 = load i32, i32* %10, align 4
  %706 = zext i32 %705 to i64
  %707 = getelementptr inbounds i16*, i16** %704, i64 %706
  %708 = load i16*, i16** %707, align 8
  %709 = load i32, i32* %13, align 4
  %710 = sext i32 %709 to i64
  %711 = getelementptr inbounds i16, i16* %708, i64 %710
  %712 = load i16, i16* %711, align 2
  %713 = sext i16 %712 to i64
  %714 = getelementptr inbounds [5 x double], [5 x double]* %703, i64 0, i64 %713
  %715 = load double, double* %714, align 8
  %716 = load double, double* %24, align 8
  %717 = fmul double %716, %715
  store double %717, double* %24, align 8
  br label %718

718:                                              ; preds = %687, %632
  %719 = load i8, i8* %5, align 1
  %720 = zext i8 %719 to i32
  %721 = icmp sgt i32 %720, 2
  br i1 %721, label %722, label %728

722:                                              ; preds = %718
  %723 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %29, align 8
  %724 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %723, i32 0, i32 21
  %725 = load double, double* %724, align 8
  %726 = load double, double* %24, align 8
  %727 = fmul double %726, %725
  store double %727, double* %24, align 8
  br label %728

728:                                              ; preds = %722, %718
  br label %729

729:                                              ; preds = %728
  %730 = load i32, i32* %10, align 4
  %731 = add i32 %730, 1
  store i32 %731, i32* %10, align 4
  br label %628, !llvm.loop !171

732:                                              ; preds = %628
  %733 = load double*, double** %27, align 8
  %734 = load i32, i32* %16, align 4
  %735 = sext i32 %734 to i64
  %736 = getelementptr inbounds double, double* %733, i64 %735
  %737 = load double, double* %736, align 8
  %738 = load double, double* %24, align 8
  %739 = fmul double %737, %738
  %740 = load double*, double** %28, align 8
  %741 = load i32, i32* %19, align 4
  %742 = add nsw i32 %741, 2
  %743 = sext i32 %742 to i64
  %744 = getelementptr inbounds double, double* %740, i64 %743
  %745 = load double, double* %744, align 8
  %746 = load double, double* %23, align 8
  %747 = call double @llvm.fmuladd.f64(double %739, double %745, double %746)
  store double %747, double* %23, align 8
  br label %748

748:                                              ; preds = %732, %622
  %749 = load i32, i32* %12, align 4
  %750 = add nsw i32 %749, 1
  store i32 %750, i32* %12, align 4
  br label %603, !llvm.loop !172

751:                                              ; preds = %603
  %752 = load double, double* %23, align 8
  %753 = load double*, double** %25, align 8
  %754 = load i32, i32* %17, align 4
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds double, double* %753, i64 %755
  %757 = load double, double* %756, align 8
  %758 = load double*, double** %27, align 8
  %759 = load i32, i32* %17, align 4
  %760 = sext i32 %759 to i64
  %761 = getelementptr inbounds double, double* %758, i64 %760
  %762 = load double, double* %761, align 8
  %763 = call double @llvm.fmuladd.f64(double %752, double %757, double %762)
  store double %763, double* %761, align 8
  br label %764

764:                                              ; preds = %751, %588
  %765 = load i32, i32* %14, align 4
  %766 = add nsw i32 %765, 1
  store i32 %766, i32* %14, align 4
  br label %568, !llvm.loop !173

767:                                              ; preds = %568
  br label %768

768:                                              ; preds = %767, %563
  ret void
}

; Function Attrs: nounwind
declare dso_local double @pow(double noundef, double noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal double @numerator_single(%struct.vrna_fc_s* noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = alloca %struct.vrna_fc_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  ret double 1.000000e+00
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @numerator_comparative(%struct.vrna_fc_s* noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = alloca %struct.vrna_fc_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca double, align 8
  %9 = alloca i32*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %10 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %11 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %10, i32 0, i32 24
  %12 = bitcast %union.anon.9* %11 to %struct.anon.14*
  %13 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %12, i32 0, i32 9
  %14 = load i32*, i32** %13, align 8
  store i32* %14, i32** %7, align 8
  %15 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %16 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %15, i32 0, i32 15
  %17 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %16, align 8
  %18 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %17, i32 0, i32 36
  %19 = load double, double* %18, align 8
  %20 = fdiv double %19, 1.000000e+01
  store double %20, double* %8, align 8
  %21 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %4, align 8
  %22 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %21, i32 0, i32 17
  %23 = load i32*, i32** %22, align 8
  store i32* %23, i32** %9, align 8
  %24 = load i32*, i32** %7, align 8
  %25 = load i32*, i32** %9, align 8
  %26 = load i32, i32* %6, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i32, i32* %25, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = load i32, i32* %5, align 4
  %31 = add nsw i32 %29, %30
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %24, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = sitofp i32 %34 to double
  %36 = load double, double* %8, align 8
  %37 = fdiv double %35, %36
  %38 = call double @exp(double noundef %37) #5
  ret double %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @contrib_ext_pair(%struct.vrna_fc_s* noundef %0, i32 noundef %1, i32 noundef %2, %struct.constraints_helper* noundef %3) #0 {
  %5 = alloca %struct.vrna_fc_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.constraints_helper*, align 8
  %9 = alloca i8, align 1
  %10 = alloca i8*, align 8
  %11 = alloca i16*, align 8
  %12 = alloca i16, align 2
  %13 = alloca i16, align 2
  %14 = alloca i32*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32*, align 8
  %17 = alloca double, align 8
  %18 = alloca %struct.vrna_exp_param_s*, align 8
  %19 = alloca %struct.vrna_sc_s*, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %struct.constraints_helper* %3, %struct.constraints_helper** %8, align 8
  %20 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %21 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %20, i32 0, i32 1
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %15, align 4
  %23 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %24 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %23, i32 0, i32 15
  %25 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %24, align 8
  store %struct.vrna_exp_param_s* %25, %struct.vrna_exp_param_s** %18, align 8
  %26 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %27 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %26, i32 0, i32 24
  %28 = bitcast %union.anon.9* %27 to %struct.anon.10*
  %29 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %28, i32 0, i32 1
  %30 = load i16*, i16** %29, align 8
  store i16* %30, i16** %11, align 8
  %31 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %32 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %31, i32 0, i32 3
  %33 = load i32*, i32** %32, align 8
  store i32* %33, i32** %14, align 8
  %34 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %35 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %34, i32 0, i32 24
  %36 = bitcast %union.anon.9* %35 to %struct.anon.10*
  %37 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %36, i32 0, i32 3
  %38 = load i8*, i8** %37, align 8
  store i8* %38, i8** %10, align 8
  %39 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %40 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %39, i32 0, i32 17
  %41 = load i32*, i32** %40, align 8
  store i32* %41, i32** %16, align 8
  %42 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %43 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %42, i32 0, i32 24
  %44 = bitcast %union.anon.9* %43 to %struct.anon.10*
  %45 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %44, i32 0, i32 5
  %46 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %45, align 8
  store %struct.vrna_sc_s* %46, %struct.vrna_sc_s** %19, align 8
  %47 = load i32*, i32** %16, align 8
  %48 = load i32, i32* %7, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i32, i32* %47, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = load i32, i32* %6, align 4
  %53 = add i32 %51, %52
  %54 = load i8*, i8** %10, align 8
  %55 = call i32 @vrna_get_ptype(i32 noundef %53, i8* noundef %54)
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %9, align 1
  %57 = load i32, i32* %6, align 4
  %58 = icmp ugt i32 %57, 1
  br i1 %58, label %59, label %80

59:                                               ; preds = %4
  %60 = load i32*, i32** %14, align 8
  %61 = load i32, i32* %6, align 4
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds i32, i32* %60, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = load i32*, i32** %14, align 8
  %66 = load i32, i32* %6, align 4
  %67 = sub i32 %66, 1
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i32, i32* %65, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %64, %70
  br i1 %71, label %72, label %80

72:                                               ; preds = %59
  %73 = load i16*, i16** %11, align 8
  %74 = load i32, i32* %6, align 4
  %75 = sub i32 %74, 1
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i16, i16* %73, i64 %76
  %78 = load i16, i16* %77, align 2
  %79 = sext i16 %78 to i32
  br label %81

80:                                               ; preds = %59, %4
  br label %81

81:                                               ; preds = %80, %72
  %82 = phi i32 [ %79, %72 ], [ -1, %80 ]
  %83 = trunc i32 %82 to i16
  store i16 %83, i16* %12, align 2
  %84 = load i32, i32* %7, align 4
  %85 = load i32, i32* %15, align 4
  %86 = icmp ult i32 %84, %85
  br i1 %86, label %87, label %108

87:                                               ; preds = %81
  %88 = load i32*, i32** %14, align 8
  %89 = load i32, i32* %7, align 4
  %90 = add i32 %89, 1
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds i32, i32* %88, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = load i32*, i32** %14, align 8
  %95 = load i32, i32* %7, align 4
  %96 = zext i32 %95 to i64
  %97 = getelementptr inbounds i32, i32* %94, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = icmp eq i32 %93, %98
  br i1 %99, label %100, label %108

100:                                              ; preds = %87
  %101 = load i16*, i16** %11, align 8
  %102 = load i32, i32* %7, align 4
  %103 = add i32 %102, 1
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds i16, i16* %101, i64 %104
  %106 = load i16, i16* %105, align 2
  %107 = sext i16 %106 to i32
  br label %109

108:                                              ; preds = %87, %81
  br label %109

109:                                              ; preds = %108, %100
  %110 = phi i32 [ %107, %100 ], [ -1, %108 ]
  %111 = trunc i32 %110 to i16
  store i16 %111, i16* %13, align 2
  %112 = load i8, i8* %9, align 1
  %113 = zext i8 %112 to i32
  %114 = load i16, i16* %12, align 2
  %115 = sext i16 %114 to i32
  %116 = load i16, i16* %13, align 2
  %117 = sext i16 %116 to i32
  %118 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %18, align 8
  %119 = call double @vrna_exp_E_ext_stem(i32 noundef %113, i32 noundef %115, i32 noundef %117, %struct.vrna_exp_param_s* noundef %118)
  store double %119, double* %17, align 8
  %120 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %19, align 8
  %121 = icmp ne %struct.vrna_sc_s* %120, null
  br i1 %121, label %122, label %140

122:                                              ; preds = %109
  %123 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %19, align 8
  %124 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %123, i32 0, i32 12
  %125 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %124, align 8
  %126 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %125, null
  br i1 %126, label %127, label %140

127:                                              ; preds = %122
  %128 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %19, align 8
  %129 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %128, i32 0, i32 12
  %130 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %129, align 8
  %131 = load i32, i32* %15, align 4
  %132 = load i32, i32* %6, align 4
  %133 = load i32, i32* %7, align 4
  %134 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %19, align 8
  %135 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %134, i32 0, i32 13
  %136 = load i8*, i8** %135, align 8
  %137 = call double %130(i32 noundef 1, i32 noundef %131, i32 noundef %132, i32 noundef %133, i8 noundef zeroext 17, i8* noundef %136)
  %138 = load double, double* %17, align 8
  %139 = fmul double %138, %137
  store double %139, double* %17, align 8
  br label %140

140:                                              ; preds = %127, %122, %109
  %141 = load double, double* %17, align 8
  ret double %141
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @contrib_ext_pair_comparative(%struct.vrna_fc_s* noundef %0, i32 noundef %1, i32 noundef %2, %struct.constraints_helper* noundef %3) #0 {
  %5 = alloca %struct.vrna_fc_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.constraints_helper*, align 8
  %9 = alloca i8, align 1
  %10 = alloca i16**, align 8
  %11 = alloca i16**, align 8
  %12 = alloca i16**, align 8
  %13 = alloca i16, align 2
  %14 = alloca i16, align 2
  %15 = alloca i32**, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32*, align 8
  %20 = alloca i32*, align 8
  %21 = alloca double, align 8
  %22 = alloca double, align 8
  %23 = alloca %struct.vrna_exp_param_s*, align 8
  %24 = alloca %struct.vrna_md_s*, align 8
  %25 = alloca %struct.vrna_sc_s**, align 8
  store %struct.vrna_fc_s* %0, %struct.vrna_fc_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %struct.constraints_helper* %3, %struct.constraints_helper** %8, align 8
  %26 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %27 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %26, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* %16, align 4
  %29 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %30 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %29, i32 0, i32 24
  %31 = bitcast %union.anon.9* %30 to %struct.anon.14*
  %32 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %31, i32 0, i32 1
  %33 = load i32, i32* %32, align 8
  store i32 %33, i32* %18, align 4
  %34 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %35 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %34, i32 0, i32 17
  %36 = load i32*, i32** %35, align 8
  store i32* %36, i32** %19, align 8
  %37 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %38 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %37, i32 0, i32 15
  %39 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %38, align 8
  store %struct.vrna_exp_param_s* %39, %struct.vrna_exp_param_s** %23, align 8
  %40 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %23, align 8
  %41 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %40, i32 0, i32 40
  store %struct.vrna_md_s* %41, %struct.vrna_md_s** %24, align 8
  %42 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %43 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %42, i32 0, i32 24
  %44 = bitcast %union.anon.9* %43 to %struct.anon.14*
  %45 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %44, i32 0, i32 4
  %46 = load i16**, i16*** %45, align 8
  store i16** %46, i16*** %10, align 8
  %47 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %48 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %47, i32 0, i32 24
  %49 = bitcast %union.anon.9* %48 to %struct.anon.14*
  %50 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %49, i32 0, i32 5
  %51 = load i16**, i16*** %50, align 8
  store i16** %51, i16*** %11, align 8
  %52 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %53 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %52, i32 0, i32 24
  %54 = bitcast %union.anon.9* %53 to %struct.anon.14*
  %55 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %54, i32 0, i32 6
  %56 = load i16**, i16*** %55, align 8
  store i16** %56, i16*** %12, align 8
  %57 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %58 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %57, i32 0, i32 24
  %59 = bitcast %union.anon.9* %58 to %struct.anon.14*
  %60 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %59, i32 0, i32 8
  %61 = load i32**, i32*** %60, align 8
  store i32** %61, i32*** %15, align 8
  %62 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %63 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %62, i32 0, i32 24
  %64 = bitcast %union.anon.9* %63 to %struct.anon.14*
  %65 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %64, i32 0, i32 9
  %66 = load i32*, i32** %65, align 8
  store i32* %66, i32** %20, align 8
  %67 = load %struct.vrna_fc_s*, %struct.vrna_fc_s** %5, align 8
  %68 = getelementptr inbounds %struct.vrna_fc_s, %struct.vrna_fc_s* %67, i32 0, i32 24
  %69 = bitcast %union.anon.9* %68 to %struct.anon.14*
  %70 = getelementptr inbounds %struct.anon.14, %struct.anon.14* %69, i32 0, i32 12
  %71 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %70, align 8
  store %struct.vrna_sc_s** %71, %struct.vrna_sc_s*** %25, align 8
  %72 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %23, align 8
  %73 = getelementptr inbounds %struct.vrna_exp_param_s, %struct.vrna_exp_param_s* %72, i32 0, i32 36
  %74 = load double, double* %73, align 8
  %75 = fdiv double %74, 1.000000e+01
  store double %75, double* %22, align 8
  %76 = load i32*, i32** %20, align 8
  %77 = load i32*, i32** %19, align 8
  %78 = load i32, i32* %7, align 4
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds i32, i32* %77, i64 %79
  %81 = load i32, i32* %80, align 4
  %82 = load i32, i32* %6, align 4
  %83 = add i32 %81, %82
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds i32, i32* %76, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = sitofp i32 %86 to double
  %88 = load double, double* %22, align 8
  %89 = fdiv double %87, %88
  %90 = call double @exp(double noundef %89) #5
  store double %90, double* %21, align 8
  store i32 0, i32* %17, align 4
  br label %91

91:                                               ; preds = %188, %4
  %92 = load i32, i32* %17, align 4
  %93 = load i32, i32* %18, align 4
  %94 = icmp ult i32 %92, %93
  br i1 %94, label %95, label %191

95:                                               ; preds = %91
  %96 = load i16**, i16*** %10, align 8
  %97 = load i32, i32* %17, align 4
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds i16*, i16** %96, i64 %98
  %100 = load i16*, i16** %99, align 8
  %101 = load i32, i32* %6, align 4
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds i16, i16* %100, i64 %102
  %104 = load i16, i16* %103, align 2
  %105 = sext i16 %104 to i32
  %106 = load i16**, i16*** %10, align 8
  %107 = load i32, i32* %17, align 4
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i16*, i16** %106, i64 %108
  %110 = load i16*, i16** %109, align 8
  %111 = load i32, i32* %7, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds i16, i16* %110, i64 %112
  %114 = load i16, i16* %113, align 2
  %115 = sext i16 %114 to i32
  %116 = load %struct.vrna_md_s*, %struct.vrna_md_s** %24, align 8
  %117 = call i32 @vrna_get_ptype_md(i32 noundef %105, i32 noundef %115, %struct.vrna_md_s* noundef %116)
  %118 = trunc i32 %117 to i8
  store i8 %118, i8* %9, align 1
  %119 = load i32**, i32*** %15, align 8
  %120 = load i32, i32* %17, align 4
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds i32*, i32** %119, i64 %121
  %123 = load i32*, i32** %122, align 8
  %124 = load i32, i32* %6, align 4
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i32, i32* %123, i64 %125
  %127 = load i32, i32* %126, align 4
  %128 = icmp ugt i32 %127, 1
  br i1 %128, label %129, label %140

129:                                              ; preds = %95
  %130 = load i16**, i16*** %11, align 8
  %131 = load i32, i32* %17, align 4
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds i16*, i16** %130, i64 %132
  %134 = load i16*, i16** %133, align 8
  %135 = load i32, i32* %6, align 4
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds i16, i16* %134, i64 %136
  %138 = load i16, i16* %137, align 2
  %139 = sext i16 %138 to i32
  br label %141

140:                                              ; preds = %95
  br label %141

141:                                              ; preds = %140, %129
  %142 = phi i32 [ %139, %129 ], [ -1, %140 ]
  %143 = trunc i32 %142 to i16
  store i16 %143, i16* %13, align 2
  %144 = load i32**, i32*** %15, align 8
  %145 = load i32, i32* %17, align 4
  %146 = zext i32 %145 to i64
  %147 = getelementptr inbounds i32*, i32** %144, i64 %146
  %148 = load i32*, i32** %147, align 8
  %149 = load i32, i32* %7, align 4
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds i32, i32* %148, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = load i32**, i32*** %15, align 8
  %154 = load i32, i32* %17, align 4
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds i32*, i32** %153, i64 %155
  %157 = load i32*, i32** %156, align 8
  %158 = load i32, i32* %16, align 4
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds i32, i32* %157, i64 %159
  %161 = load i32, i32* %160, align 4
  %162 = icmp ult i32 %152, %161
  br i1 %162, label %163, label %174

163:                                              ; preds = %141
  %164 = load i16**, i16*** %12, align 8
  %165 = load i32, i32* %17, align 4
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds i16*, i16** %164, i64 %166
  %168 = load i16*, i16** %167, align 8
  %169 = load i32, i32* %7, align 4
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds i16, i16* %168, i64 %170
  %172 = load i16, i16* %171, align 2
  %173 = sext i16 %172 to i32
  br label %175

174:                                              ; preds = %141
  br label %175

175:                                              ; preds = %174, %163
  %176 = phi i32 [ %173, %163 ], [ -1, %174 ]
  %177 = trunc i32 %176 to i16
  store i16 %177, i16* %14, align 2
  %178 = load i8, i8* %9, align 1
  %179 = zext i8 %178 to i32
  %180 = load i16, i16* %13, align 2
  %181 = sext i16 %180 to i32
  %182 = load i16, i16* %14, align 2
  %183 = sext i16 %182 to i32
  %184 = load %struct.vrna_exp_param_s*, %struct.vrna_exp_param_s** %23, align 8
  %185 = call double @vrna_exp_E_ext_stem(i32 noundef %179, i32 noundef %181, i32 noundef %183, %struct.vrna_exp_param_s* noundef %184)
  %186 = load double, double* %21, align 8
  %187 = fmul double %186, %185
  store double %187, double* %21, align 8
  br label %188

188:                                              ; preds = %175
  %189 = load i32, i32* %17, align 4
  %190 = add i32 %189, 1
  store i32 %190, i32* %17, align 4
  br label %91, !llvm.loop !174

191:                                              ; preds = %91
  %192 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %25, align 8
  %193 = icmp ne %struct.vrna_sc_s** %192, null
  br i1 %193, label %194, label %234

194:                                              ; preds = %191
  store i32 0, i32* %17, align 4
  br label %195

195:                                              ; preds = %230, %194
  %196 = load i32, i32* %17, align 4
  %197 = load i32, i32* %18, align 4
  %198 = icmp ult i32 %196, %197
  br i1 %198, label %199, label %233

199:                                              ; preds = %195
  %200 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %25, align 8
  %201 = load i32, i32* %17, align 4
  %202 = zext i32 %201 to i64
  %203 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %200, i64 %202
  %204 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %203, align 8
  %205 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %204, i32 0, i32 12
  %206 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %205, align 8
  %207 = icmp ne double (i32, i32, i32, i32, i8, i8*)* %206, null
  br i1 %207, label %208, label %229

208:                                              ; preds = %199
  %209 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %25, align 8
  %210 = load i32, i32* %17, align 4
  %211 = zext i32 %210 to i64
  %212 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %209, i64 %211
  %213 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %212, align 8
  %214 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %213, i32 0, i32 12
  %215 = load double (i32, i32, i32, i32, i8, i8*)*, double (i32, i32, i32, i32, i8, i8*)** %214, align 8
  %216 = load i32, i32* %16, align 4
  %217 = load i32, i32* %6, align 4
  %218 = load i32, i32* %7, align 4
  %219 = load %struct.vrna_sc_s**, %struct.vrna_sc_s*** %25, align 8
  %220 = load i32, i32* %17, align 4
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds %struct.vrna_sc_s*, %struct.vrna_sc_s** %219, i64 %221
  %223 = load %struct.vrna_sc_s*, %struct.vrna_sc_s** %222, align 8
  %224 = getelementptr inbounds %struct.vrna_sc_s, %struct.vrna_sc_s* %223, i32 0, i32 13
  %225 = load i8*, i8** %224, align 8
  %226 = call double %215(i32 noundef 1, i32 noundef %216, i32 noundef %217, i32 noundef %218, i8 noundef zeroext 17, i8* noundef %225)
  %227 = load double, double* %21, align 8
  %228 = fmul double %227, %226
  store double %228, double* %21, align 8
  br label %229

229:                                              ; preds = %208, %199
  br label %230

230:                                              ; preds = %229
  %231 = load i32, i32* %17, align 4
  %232 = add i32 %231, 1
  store i32 %232, i32* %17, align 4
  br label %195, !llvm.loop !175

233:                                              ; preds = %195
  br label %234

234:                                              ; preds = %233, %191
  %235 = load double, double* %21, align 8
  ret double %235
}

declare dso_local double @vrna_exp_E_ext_stem(i32 noundef, i32 noundef, i32 noundef, %struct.vrna_exp_param_s* noundef) #1

declare dso_local i32* @vrna_ud_get_motif_size_at(%struct.vrna_fc_s* noundef, i32 noundef, i32 noundef) #1

declare dso_local double @vrna_exp_E_interior_loop(%struct.vrna_fc_s* noundef, i32 noundef, i32 noundef, i32 noundef, i32 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @free_sc_ext_exp(%struct.sc_ext_exp_dat* noundef %0) #0 {
  %2 = alloca %struct.sc_ext_exp_dat*, align 8
  store %struct.sc_ext_exp_dat* %0, %struct.sc_ext_exp_dat** %2, align 8
  %3 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %2, align 8
  %4 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %3, i32 0, i32 9
  %5 = load double***, double**** %4, align 8
  %6 = bitcast double*** %5 to i8*
  call void @free(i8* noundef %6) #5
  %7 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %2, align 8
  %8 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %7, i32 0, i32 10
  %9 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %8, align 8
  %10 = bitcast double (i32, i32, i32, i32, i8, i8*)** %9 to i8*
  call void @free(i8* noundef %10) #5
  %11 = load %struct.sc_ext_exp_dat*, %struct.sc_ext_exp_dat** %2, align 8
  %12 = getelementptr inbounds %struct.sc_ext_exp_dat, %struct.sc_ext_exp_dat* %11, i32 0, i32 11
  %13 = load i8**, i8*** %12, align 8
  %14 = bitcast i8** %13 to i8*
  call void @free(i8* noundef %14) #5
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @free_sc_hp_exp(%struct.sc_hp_exp_dat* noundef %0) #0 {
  %2 = alloca %struct.sc_hp_exp_dat*, align 8
  store %struct.sc_hp_exp_dat* %0, %struct.sc_hp_exp_dat** %2, align 8
  %3 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %2, align 8
  %4 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %3, i32 0, i32 5
  %5 = load double***, double**** %4, align 8
  %6 = bitcast double*** %5 to i8*
  call void @free(i8* noundef %6) #5
  %7 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %2, align 8
  %8 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %7, i32 0, i32 7
  %9 = load double**, double*** %8, align 8
  %10 = bitcast double** %9 to i8*
  call void @free(i8* noundef %10) #5
  %11 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %2, align 8
  %12 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %11, i32 0, i32 9
  %13 = load double***, double**** %12, align 8
  %14 = bitcast double*** %13 to i8*
  call void @free(i8* noundef %14) #5
  %15 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %2, align 8
  %16 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %15, i32 0, i32 12
  %17 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %16, align 8
  %18 = bitcast double (i32, i32, i32, i32, i8, i8*)** %17 to i8*
  call void @free(i8* noundef %18) #5
  %19 = load %struct.sc_hp_exp_dat*, %struct.sc_hp_exp_dat** %2, align 8
  %20 = getelementptr inbounds %struct.sc_hp_exp_dat, %struct.sc_hp_exp_dat* %19, i32 0, i32 13
  %21 = load i8**, i8*** %20, align 8
  %22 = bitcast i8** %21 to i8*
  call void @free(i8* noundef %22) #5
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @free_sc_int_exp(%struct.sc_int_exp_dat* noundef %0) #0 {
  %2 = alloca %struct.sc_int_exp_dat*, align 8
  store %struct.sc_int_exp_dat* %0, %struct.sc_int_exp_dat** %2, align 8
  %3 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %2, align 8
  %4 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %3, i32 0, i32 5
  %5 = load double***, double**** %4, align 8
  %6 = bitcast double*** %5 to i8*
  call void @free(i8* noundef %6) #5
  %7 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %2, align 8
  %8 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %7, i32 0, i32 7
  %9 = load double**, double*** %8, align 8
  %10 = bitcast double** %9 to i8*
  call void @free(i8* noundef %10) #5
  %11 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %2, align 8
  %12 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %11, i32 0, i32 9
  %13 = load double***, double**** %12, align 8
  %14 = bitcast double*** %13 to i8*
  call void @free(i8* noundef %14) #5
  %15 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %2, align 8
  %16 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %15, i32 0, i32 11
  %17 = load double**, double*** %16, align 8
  %18 = bitcast double** %17 to i8*
  call void @free(i8* noundef %18) #5
  %19 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %2, align 8
  %20 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %19, i32 0, i32 14
  %21 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %20, align 8
  %22 = bitcast double (i32, i32, i32, i32, i8, i8*)** %21 to i8*
  call void @free(i8* noundef %22) #5
  %23 = load %struct.sc_int_exp_dat*, %struct.sc_int_exp_dat** %2, align 8
  %24 = getelementptr inbounds %struct.sc_int_exp_dat, %struct.sc_int_exp_dat* %23, i32 0, i32 15
  %25 = load i8**, i8*** %24, align 8
  %26 = bitcast i8** %25 to i8*
  call void @free(i8* noundef %26) #5
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @free_sc_mb_exp(%struct.sc_mb_exp_dat* noundef %0) #0 {
  %2 = alloca %struct.sc_mb_exp_dat*, align 8
  store %struct.sc_mb_exp_dat* %0, %struct.sc_mb_exp_dat** %2, align 8
  %3 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %2, align 8
  %4 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %3, i32 0, i32 5
  %5 = load double***, double**** %4, align 8
  %6 = bitcast double*** %5 to i8*
  call void @free(i8* noundef %6) #5
  %7 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %2, align 8
  %8 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %7, i32 0, i32 7
  %9 = load double**, double*** %8, align 8
  %10 = bitcast double** %9 to i8*
  call void @free(i8* noundef %10) #5
  %11 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %2, align 8
  %12 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %11, i32 0, i32 9
  %13 = load double***, double**** %12, align 8
  %14 = bitcast double*** %13 to i8*
  call void @free(i8* noundef %14) #5
  %15 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %2, align 8
  %16 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %15, i32 0, i32 17
  %17 = load double (i32, i32, i32, i32, i8, i8*)**, double (i32, i32, i32, i32, i8, i8*)*** %16, align 8
  %18 = bitcast double (i32, i32, i32, i32, i8, i8*)** %17 to i8*
  call void @free(i8* noundef %18) #5
  %19 = load %struct.sc_mb_exp_dat*, %struct.sc_mb_exp_dat** %2, align 8
  %20 = getelementptr inbounds %struct.sc_mb_exp_dat, %struct.sc_mb_exp_dat* %19, i32 0, i32 18
  %21 = load i8**, i8*** %20, align 8
  %22 = bitcast i8** %21 to i8*
  call void @free(i8* noundef %22) #5
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nofree nounwind willreturn }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{!"clang version 14.0.0 (https://github.com/llvm/llvm-project.git a2a7fc7ea5612fd86c46f054690f532092d92a3d)"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.mustprogress"}
!6 = distinct !{!6, !5}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !5}
!11 = distinct !{!11, !5}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !5}
!14 = distinct !{!14, !5}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !5}
!17 = distinct !{!17, !5}
!18 = distinct !{!18, !5}
!19 = distinct !{!19, !5}
!20 = distinct !{!20, !5}
!21 = distinct !{!21, !5}
!22 = distinct !{!22, !5}
!23 = distinct !{!23, !5}
!24 = distinct !{!24, !5}
!25 = distinct !{!25, !5}
!26 = distinct !{!26, !5}
!27 = distinct !{!27, !5}
!28 = distinct !{!28, !5}
!29 = distinct !{!29, !5}
!30 = distinct !{!30, !5}
!31 = distinct !{!31, !5}
!32 = distinct !{!32, !5}
!33 = distinct !{!33, !5}
!34 = distinct !{!34, !5}
!35 = distinct !{!35, !5}
!36 = distinct !{!36, !5}
!37 = distinct !{!37, !5}
!38 = distinct !{!38, !5}
!39 = distinct !{!39, !5}
!40 = distinct !{!40, !5}
!41 = distinct !{!41, !5}
!42 = distinct !{!42, !5}
!43 = distinct !{!43, !5}
!44 = distinct !{!44, !5}
!45 = distinct !{!45, !5}
!46 = distinct !{!46, !5}
!47 = distinct !{!47, !5}
!48 = distinct !{!48, !5}
!49 = distinct !{!49, !5}
!50 = distinct !{!50, !5}
!51 = distinct !{!51, !5}
!52 = distinct !{!52, !5}
!53 = distinct !{!53, !5}
!54 = distinct !{!54, !5}
!55 = distinct !{!55, !5}
!56 = distinct !{!56, !5}
!57 = distinct !{!57, !5}
!58 = distinct !{!58, !5}
!59 = distinct !{!59, !5}
!60 = distinct !{!60, !5}
!61 = distinct !{!61, !5}
!62 = distinct !{!62, !5}
!63 = distinct !{!63, !5}
!64 = distinct !{!64, !5}
!65 = distinct !{!65, !5}
!66 = distinct !{!66, !5}
!67 = distinct !{!67, !5}
!68 = distinct !{!68, !5}
!69 = distinct !{!69, !5}
!70 = distinct !{!70, !5}
!71 = distinct !{!71, !5}
!72 = distinct !{!72, !5}
!73 = distinct !{!73, !5}
!74 = distinct !{!74, !5}
!75 = distinct !{!75, !5}
!76 = distinct !{!76, !5}
!77 = distinct !{!77, !5}
!78 = distinct !{!78, !5}
!79 = distinct !{!79, !5}
!80 = distinct !{!80, !5}
!81 = distinct !{!81, !5}
!82 = distinct !{!82, !5}
!83 = distinct !{!83, !5}
!84 = distinct !{!84, !5}
!85 = distinct !{!85, !5}
!86 = distinct !{!86, !5}
!87 = distinct !{!87, !5}
!88 = distinct !{!88, !5}
!89 = distinct !{!89, !5}
!90 = distinct !{!90, !5}
!91 = distinct !{!91, !5}
!92 = distinct !{!92, !5}
!93 = distinct !{!93, !5}
!94 = distinct !{!94, !5}
!95 = distinct !{!95, !5}
!96 = distinct !{!96, !5}
!97 = distinct !{!97, !5}
!98 = distinct !{!98, !5}
!99 = distinct !{!99, !5}
!100 = distinct !{!100, !5}
!101 = distinct !{!101, !5}
!102 = distinct !{!102, !5}
!103 = distinct !{!103, !5}
!104 = distinct !{!104, !5}
!105 = distinct !{!105, !5}
!106 = distinct !{!106, !5}
!107 = distinct !{!107, !5}
!108 = distinct !{!108, !5}
!109 = distinct !{!109, !5}
!110 = distinct !{!110, !5}
!111 = distinct !{!111, !5}
!112 = distinct !{!112, !5}
!113 = distinct !{!113, !5}
!114 = distinct !{!114, !5}
!115 = distinct !{!115, !5}
!116 = distinct !{!116, !5}
!117 = distinct !{!117, !5}
!118 = distinct !{!118, !5}
!119 = distinct !{!119, !5}
!120 = distinct !{!120, !5}
!121 = distinct !{!121, !5}
!122 = distinct !{!122, !5}
!123 = distinct !{!123, !5}
!124 = distinct !{!124, !5}
!125 = distinct !{!125, !5}
!126 = distinct !{!126, !5}
!127 = distinct !{!127, !5}
!128 = distinct !{!128, !5}
!129 = distinct !{!129, !5}
!130 = distinct !{!130, !5}
!131 = distinct !{!131, !5}
!132 = distinct !{!132, !5}
!133 = distinct !{!133, !5}
!134 = distinct !{!134, !5}
!135 = distinct !{!135, !5}
!136 = distinct !{!136, !5}
!137 = distinct !{!137, !5}
!138 = distinct !{!138, !5}
!139 = distinct !{!139, !5}
!140 = distinct !{!140, !5}
!141 = distinct !{!141, !5}
!142 = distinct !{!142, !5}
!143 = distinct !{!143, !5}
!144 = distinct !{!144, !5}
!145 = distinct !{!145, !5}
!146 = distinct !{!146, !5}
!147 = distinct !{!147, !5}
!148 = distinct !{!148, !5}
!149 = distinct !{!149, !5}
!150 = distinct !{!150, !5}
!151 = distinct !{!151, !5}
!152 = distinct !{!152, !5}
!153 = distinct !{!153, !5}
!154 = distinct !{!154, !5}
!155 = distinct !{!155, !5}
!156 = distinct !{!156, !5}
!157 = distinct !{!157, !5}
!158 = distinct !{!158, !5}
!159 = distinct !{!159, !5}
!160 = distinct !{!160, !5}
!161 = distinct !{!161, !5}
!162 = distinct !{!162, !5}
!163 = distinct !{!163, !5}
!164 = distinct !{!164, !5}
!165 = distinct !{!165, !5}
!166 = distinct !{!166, !5}
!167 = distinct !{!167, !5}
!168 = distinct !{!168, !5}
!169 = distinct !{!169, !5}
!170 = distinct !{!170, !5}
!171 = distinct !{!171, !5}
!172 = distinct !{!172, !5}
!173 = distinct !{!173, !5}
!174 = distinct !{!174, !5}
!175 = distinct !{!175, !5}
