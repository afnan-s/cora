; ModuleID = 'RNApuzzler.c'
source_filename = "RNApuzzler.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vrna_plot_options_puzzler_t = type { i16, double, double, i16, i16, i16, i16, i16, i32, i8*, i8*, i32, i32 }
%struct.tBaseInformation = type { i32, double, double, %struct.config* }
%struct.config = type { double, double, double, %struct.configArc*, i32 }
%struct.configArc = type { i32, double }
%struct.configtree = type { i32, %struct.configtree*, %struct.configtree**, i32, %struct.config*, i32, i32, %struct.boundingboxLoop*, %struct.boundingboxStem*, %struct.AABB }
%struct.boundingboxLoop = type { %struct.configtree*, [2 x double], double }
%struct.boundingboxStem = type { %struct.configtree*, [2 x double], [2 x double], [2 x double], [2 x double], i32, double, double** }
%struct.AABB = type { [2 x double], [2 x double] }

@.str = private unnamed_addr constant [25 x i8] c"checkAndFixIntersections\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"checkNodeAgainstAncestors\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"intersectNodeNode\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"intersectNodesBoundingBoxes\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"CLOSEST ON BULGE\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"handleIntersectionWithAncestor\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"getRotationSign\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"fixIntersectionWithAncestor\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"getRotationAngle\00", align 1
@.str.9 = private unnamed_addr constant [44 x i8] c"no computation for given intersection type\0A\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"getRotationAngleLxL\00", align 1
@.str.11 = private unnamed_addr constant [25 x i8] c"fixIntersectionOfCircles\00", align 1
@.str.12 = private unnamed_addr constant [37 x i8] c"no solution 2: %3.2lf %3.2lf %3.2lf\0A\00", align 1
@.str.13 = private unnamed_addr constant [20 x i8] c"getRotationAngleLxS\00", align 1
@.str.14 = private unnamed_addr constant [36 x i8] c"fixIntersectionOfCircleAndRectangle\00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"POINT TO ANGLE\00", align 1
@.str.16 = private unnamed_addr constant [20 x i8] c"getRotationAngleLxB\00", align 1
@.str.17 = private unnamed_addr constant [20 x i8] c"getRotationAngleSxL\00", align 1
@.str.18 = private unnamed_addr constant [20 x i8] c"getRotationAngleSxS\00", align 1
@.str.19 = private unnamed_addr constant [20 x i8] c"getRotationAngleSxB\00", align 1
@.str.20 = private unnamed_addr constant [20 x i8] c"getRotationAngleBxL\00", align 1
@.str.21 = private unnamed_addr constant [20 x i8] c"getRotationAngleBxS\00", align 1
@.str.22 = private unnamed_addr constant [20 x i8] c"getRotationAngleBxB\00", align 1
@.str.23 = private unnamed_addr constant [12 x i8] c"CALC DELTAS\00", align 1
@.str.24 = private unnamed_addr constant [33 x i8] c"CALC DELTAS EQUIDISTANT INCREASE\00", align 1
@.str.25 = private unnamed_addr constant [44 x i8] c"CALC DELTAS NEAREST NEIGHBOR FIRST DECREASE\00", align 1
@.str.26 = private unnamed_addr constant [35 x i8] c"CALC DELTAS MAXIMUM FIRST DECREASE\00", align 1
@.str.27 = private unnamed_addr constant [27 x i8] c"checkAndApplyConfigChanges\00", align 1
@.str.28 = private unnamed_addr constant [4 x i8] c"LxL\00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c"LxS\00", align 1
@.str.30 = private unnamed_addr constant [4 x i8] c"LxB\00", align 1
@.str.31 = private unnamed_addr constant [4 x i8] c"SxL\00", align 1
@.str.32 = private unnamed_addr constant [4 x i8] c"SxS\00", align 1
@.str.33 = private unnamed_addr constant [4 x i8] c"SxB\00", align 1
@.str.34 = private unnamed_addr constant [4 x i8] c"BxL\00", align 1
@.str.35 = private unnamed_addr constant [4 x i8] c"BxS\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"BxB\00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c"BRA\00", align 1
@.str.38 = private unnamed_addr constant [4 x i8] c"EXT\00", align 1
@.str.39 = private unnamed_addr constant [4 x i8] c"UNK\00", align 1
@.str.40 = private unnamed_addr constant [27 x i8] c"setupExteriorBoundingBoxes\00", align 1
@.str.41 = private unnamed_addr constant [15 x i8] c"CHECK SIBLINGS\00", align 1
@.str.42 = private unnamed_addr constant [29 x i8] c"FIX INTERSECTION OF SIBLINGS\00", align 1
@.str.43 = private unnamed_addr constant [13 x i8] c"optimizeTree\00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c"optimizeTreeRecursive\00", align 1
@.str.45 = private unnamed_addr constant [13 x i8] c"optimizeNode\00", align 1
@.str.46 = private unnamed_addr constant [29 x i8] c"shrinkLoopRadiusLinearSearch\00", align 1
@__const.calcArc.v_1_0 = private unnamed_addr constant [2 x double] [double 1.000000e+00, double 0.000000e+00], align 16
@.str.47 = private unnamed_addr constant [28 x i8] c"checkRemainingIntersections\00", align 1
@.str.48 = private unnamed_addr constant [17 x i8] c"intersectLineArc\00", align 1
@__const.matchPointArc.zero_degree = private unnamed_addr constant [2 x double] [double 1.000000e+00, double 0.000000e+00], align 16
@.str.49 = private unnamed_addr constant [16 x i8] c"intersectArcArc\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local %struct.vrna_plot_options_puzzler_t* @vrna_plot_options_puzzler() #0 {
  %1 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %2 = call i8* @vrna_alloc(i32 noundef 64)
  %3 = bitcast i8* %2 to %struct.vrna_plot_options_puzzler_t*
  store %struct.vrna_plot_options_puzzler_t* %3, %struct.vrna_plot_options_puzzler_t** %1, align 8
  %4 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %1, align 8
  %5 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %4, i32 0, i32 0
  store i16 1, i16* %5, align 8
  %6 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %1, align 8
  %7 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %6, i32 0, i32 1
  store double 3.500000e+01, double* %7, align 8
  %8 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %1, align 8
  %9 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %8, i32 0, i32 2
  store double 2.500000e+01, double* %9, align 8
  %10 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %1, align 8
  %11 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %10, i32 0, i32 5
  store i16 1, i16* %11, align 4
  %12 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %1, align 8
  %13 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %12, i32 0, i32 4
  store i16 1, i16* %13, align 2
  %14 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %1, align 8
  %15 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %14, i32 0, i32 3
  store i16 1, i16* %15, align 8
  %16 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %1, align 8
  %17 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %16, i32 0, i32 7
  store i16 1, i16* %17, align 8
  %18 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %1, align 8
  %19 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %18, i32 0, i32 9
  store i8* null, i8** %19, align 8
  %20 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %1, align 8
  %21 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %20, i32 0, i32 10
  store i8* null, i8** %21, align 8
  %22 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %1, align 8
  %23 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %22, i32 0, i32 11
  store i32 0, i32* %23, align 8
  %24 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %1, align 8
  %25 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %24, i32 0, i32 12
  store i32 0, i32* %25, align 4
  %26 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %1, align 8
  ret %struct.vrna_plot_options_puzzler_t* %26
}

declare dso_local i8* @vrna_alloc(i32 noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @vrna_plot_options_puzzler_free(%struct.vrna_plot_options_puzzler_t* noundef %0) #0 {
  %2 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  store %struct.vrna_plot_options_puzzler_t* %0, %struct.vrna_plot_options_puzzler_t** %2, align 8
  %3 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %2, align 8
  %4 = bitcast %struct.vrna_plot_options_puzzler_t* %3 to i8*
  call void @free(i8* noundef %4) #7
  ret void
}

; Function Attrs: nounwind
declare dso_local void @free(i8* noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @vrna_plot_coords_puzzler(i8* noundef %0, float** noundef %1, float** noundef %2, double** noundef %3, %struct.vrna_plot_options_puzzler_t* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca float**, align 8
  %9 = alloca float**, align 8
  %10 = alloca double**, align 8
  %11 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i16*, align 8
  store i8* %0, i8** %7, align 8
  store float** %1, float*** %8, align 8
  store float** %2, float*** %9, align 8
  store double** %3, double*** %10, align 8
  store %struct.vrna_plot_options_puzzler_t* %4, %struct.vrna_plot_options_puzzler_t** %11, align 8
  %14 = load i8*, i8** %7, align 8
  %15 = icmp ne i8* %14, null
  br i1 %15, label %16, label %28

16:                                               ; preds = %5
  store i32 0, i32* %12, align 4
  %17 = load i8*, i8** %7, align 8
  %18 = call i16* @vrna_ptable(i8* noundef %17)
  store i16* %18, i16** %13, align 8
  %19 = load i16*, i16** %13, align 8
  %20 = load float**, float*** %8, align 8
  %21 = load float**, float*** %9, align 8
  %22 = load double**, double*** %10, align 8
  %23 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %11, align 8
  %24 = call i32 @vrna_plot_coords_puzzler_pt(i16* noundef %19, float** noundef %20, float** noundef %21, double** noundef %22, %struct.vrna_plot_options_puzzler_t* noundef %23)
  store i32 %24, i32* %12, align 4
  %25 = load i16*, i16** %13, align 8
  %26 = bitcast i16* %25 to i8*
  call void @free(i8* noundef %26) #7
  %27 = load i32, i32* %12, align 4
  store i32 %27, i32* %6, align 4
  br label %44

28:                                               ; preds = %5
  %29 = load float**, float*** %8, align 8
  %30 = icmp ne float** %29, null
  br i1 %30, label %31, label %33

31:                                               ; preds = %28
  %32 = load float**, float*** %8, align 8
  store float* null, float** %32, align 8
  br label %33

33:                                               ; preds = %31, %28
  %34 = load float**, float*** %9, align 8
  %35 = icmp ne float** %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %33
  %37 = load float**, float*** %9, align 8
  store float* null, float** %37, align 8
  br label %38

38:                                               ; preds = %36, %33
  %39 = load double**, double*** %10, align 8
  %40 = icmp ne double** %39, null
  br i1 %40, label %41, label %43

41:                                               ; preds = %38
  %42 = load double**, double*** %10, align 8
  store double* null, double** %42, align 8
  br label %43

43:                                               ; preds = %41, %38
  store i32 0, i32* %6, align 4
  br label %44

44:                                               ; preds = %43, %16
  %45 = load i32, i32* %6, align 4
  ret i32 %45
}

declare dso_local i16* @vrna_ptable(i8* noundef) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @vrna_plot_coords_puzzler_pt(i16* noundef %0, float** noundef %1, float** noundef %2, double** noundef %3, %struct.vrna_plot_options_puzzler_t* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i16*, align 8
  %8 = alloca float**, align 8
  %9 = alloca float**, align 8
  %10 = alloca double**, align 8
  %11 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %12 = alloca i32, align 4
  %13 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %14 = alloca %struct.tBaseInformation*, align 8
  %15 = alloca i32, align 4
  %16 = alloca double*, align 8
  %17 = alloca double*, align 8
  %18 = alloca double, align 8
  %19 = alloca %struct.configtree*, align 8
  %20 = alloca i16, align 2
  %21 = alloca i32, align 4
  %22 = alloca i16, align 2
  %23 = alloca i16, align 2
  %24 = alloca i32, align 4
  store i16* %0, i16** %7, align 8
  store float** %1, float*** %8, align 8
  store float** %2, float*** %9, align 8
  store double** %3, double*** %10, align 8
  store %struct.vrna_plot_options_puzzler_t* %4, %struct.vrna_plot_options_puzzler_t** %11, align 8
  %25 = load i16*, i16** %7, align 8
  %26 = getelementptr inbounds i16, i16* %25, i64 0
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  store i32 %28, i32* %12, align 4
  %29 = load i16*, i16** %7, align 8
  %30 = icmp ne i16* %29, null
  br i1 %30, label %31, label %361

31:                                               ; preds = %5
  %32 = load float**, float*** %8, align 8
  %33 = icmp ne float** %32, null
  br i1 %33, label %34, label %361

34:                                               ; preds = %31
  %35 = load float**, float*** %9, align 8
  %36 = icmp ne float** %35, null
  br i1 %36, label %37, label %361

37:                                               ; preds = %34
  %38 = load i32, i32* %12, align 4
  %39 = add nsw i32 %38, 1
  %40 = sext i32 %39 to i64
  %41 = mul i64 4, %40
  %42 = trunc i64 %41 to i32
  %43 = call i8* @vrna_alloc(i32 noundef %42)
  %44 = bitcast i8* %43 to float*
  %45 = load float**, float*** %8, align 8
  store float* %44, float** %45, align 8
  %46 = load i32, i32* %12, align 4
  %47 = add nsw i32 %46, 1
  %48 = sext i32 %47 to i64
  %49 = mul i64 4, %48
  %50 = trunc i64 %49 to i32
  %51 = call i8* @vrna_alloc(i32 noundef %50)
  %52 = bitcast i8* %51 to float*
  %53 = load float**, float*** %9, align 8
  store float* %52, float** %53, align 8
  %54 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %11, align 8
  %55 = icmp ne %struct.vrna_plot_options_puzzler_t* %54, null
  br i1 %55, label %56, label %58

56:                                               ; preds = %37
  %57 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %11, align 8
  store %struct.vrna_plot_options_puzzler_t* %57, %struct.vrna_plot_options_puzzler_t** %13, align 8
  br label %79

58:                                               ; preds = %37
  %59 = call %struct.vrna_plot_options_puzzler_t* @vrna_plot_options_puzzler()
  store %struct.vrna_plot_options_puzzler_t* %59, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %60 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %61 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %60, i32 0, i32 10
  store i8* null, i8** %61, align 8
  %62 = load double**, double*** %10, align 8
  %63 = icmp ne double** %62, null
  %64 = zext i1 %63 to i64
  %65 = select i1 %63, i32 1, i32 0
  %66 = trunc i32 %65 to i16
  %67 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %68 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %67, i32 0, i32 0
  store i16 %66, i16* %68, align 8
  %69 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %70 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %69, i32 0, i32 3
  store i16 1, i16* %70, align 8
  %71 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %72 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %71, i32 0, i32 4
  store i16 1, i16* %72, align 2
  %73 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %74 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %73, i32 0, i32 5
  store i16 1, i16* %74, align 4
  %75 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %76 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %75, i32 0, i32 6
  store i16 0, i16* %76, align 2
  %77 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %78 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %77, i32 0, i32 7
  store i16 1, i16* %78, align 8
  br label %79

79:                                               ; preds = %58, %56
  %80 = load i32, i32* %12, align 4
  %81 = add nsw i32 %80, 1
  %82 = sext i32 %81 to i64
  %83 = mul i64 %82, 32
  %84 = trunc i64 %83 to i32
  %85 = call i8* @vrna_alloc(i32 noundef %84)
  %86 = bitcast i8* %85 to %struct.tBaseInformation*
  store %struct.tBaseInformation* %86, %struct.tBaseInformation** %14, align 8
  store i32 0, i32* %15, align 4
  br label %87

87:                                               ; preds = %115, %79
  %88 = load i32, i32* %15, align 4
  %89 = load i32, i32* %12, align 4
  %90 = icmp sle i32 %88, %89
  br i1 %90, label %91, label %118

91:                                               ; preds = %87
  %92 = load %struct.tBaseInformation*, %struct.tBaseInformation** %14, align 8
  %93 = load i32, i32* %15, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %92, i64 %94
  %96 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %95, i32 0, i32 0
  store i32 0, i32* %96, align 8
  %97 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %98 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %97, i32 0, i32 2
  %99 = load double, double* %98, align 8
  %100 = load %struct.tBaseInformation*, %struct.tBaseInformation** %14, align 8
  %101 = load i32, i32* %15, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %100, i64 %102
  %104 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %103, i32 0, i32 2
  store double %99, double* %104, align 8
  %105 = load %struct.tBaseInformation*, %struct.tBaseInformation** %14, align 8
  %106 = load i32, i32* %15, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %105, i64 %107
  %109 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %108, i32 0, i32 1
  store double 0.000000e+00, double* %109, align 8
  %110 = load %struct.tBaseInformation*, %struct.tBaseInformation** %14, align 8
  %111 = load i32, i32* %15, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %110, i64 %112
  %114 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %113, i32 0, i32 3
  store %struct.config* null, %struct.config** %114, align 8
  br label %115

115:                                              ; preds = %91
  %116 = load i32, i32* %15, align 4
  %117 = add nsw i32 %116, 1
  store i32 %117, i32* %15, align 4
  br label %87, !llvm.loop !4

118:                                              ; preds = %87
  %119 = load i16*, i16** %7, align 8
  %120 = load %struct.tBaseInformation*, %struct.tBaseInformation** %14, align 8
  %121 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %122 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %121, i32 0, i32 2
  %123 = load double, double* %122, align 8
  %124 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %125 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %124, i32 0, i32 1
  %126 = load double, double* %125, align 8
  call void @cfgGenerateConfig(i16* noundef %119, %struct.tBaseInformation* noundef %120, double noundef %123, double noundef %126)
  %127 = load i16*, i16** %7, align 8
  %128 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %129 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %128, i32 0, i32 1
  %130 = load double, double* %129, align 8
  %131 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %132 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %131, i32 0, i32 2
  %133 = load double, double* %132, align 8
  %134 = load %struct.tBaseInformation*, %struct.tBaseInformation** %14, align 8
  call void @computeAffineCoordinates(i16* noundef %127, double noundef %130, double noundef %133, %struct.tBaseInformation* noundef %134)
  %135 = load i32, i32* %12, align 4
  %136 = sext i32 %135 to i64
  %137 = mul i64 %136, 8
  %138 = trunc i64 %137 to i32
  %139 = call i8* @vrna_alloc(i32 noundef %138)
  %140 = bitcast i8* %139 to double*
  store double* %140, double** %16, align 8
  %141 = load i32, i32* %12, align 4
  %142 = sext i32 %141 to i64
  %143 = mul i64 %142, 8
  %144 = trunc i64 %143 to i32
  %145 = call i8* @vrna_alloc(i32 noundef %144)
  %146 = bitcast i8* %145 to double*
  store double* %146, double** %17, align 8
  %147 = load %struct.tBaseInformation*, %struct.tBaseInformation** %14, align 8
  %148 = load i32, i32* %12, align 4
  %149 = trunc i32 %148 to i16
  %150 = load double*, double** %16, align 8
  %151 = load double*, double** %17, align 8
  call void @affineToCartesianCoordinates(%struct.tBaseInformation* noundef %147, i16 noundef zeroext %149, double* noundef %150, double* noundef %151)
  %152 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %153 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %152, i32 0, i32 2
  %154 = load double, double* %153, align 8
  %155 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %156 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %155, i32 0, i32 2
  %157 = load double, double* %156, align 8
  %158 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %159 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %158, i32 0, i32 2
  %160 = load double, double* %159, align 8
  %161 = fmul double 2.500000e-01, %160
  %162 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %163 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %162, i32 0, i32 2
  %164 = load double, double* %163, align 8
  %165 = fmul double %161, %164
  %166 = fneg double %165
  %167 = call double @llvm.fmuladd.f64(double %154, double %157, double %166)
  %168 = call double @sqrt(double noundef %167) #7
  store double %168, double* %18, align 8
  %169 = load i16*, i16** %7, align 8
  %170 = load %struct.tBaseInformation*, %struct.tBaseInformation** %14, align 8
  %171 = load double*, double** %16, align 8
  %172 = load double*, double** %17, align 8
  %173 = load double, double* %18, align 8
  %174 = call %struct.configtree* @buildConfigtree(i16* noundef %169, %struct.tBaseInformation* noundef %170, double* noundef %171, double* noundef %172, double noundef %173)
  store %struct.configtree* %174, %struct.configtree** %19, align 8
  %175 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %176 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %175, i32 0, i32 11
  store i32 0, i32* %176, align 8
  %177 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %178 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %177, i32 0, i32 8
  store i32 25000, i32* %178, align 4
  %179 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %180 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %179, i32 0, i32 5
  %181 = load i16, i16* %180, align 4
  %182 = sext i16 %181 to i32
  %183 = icmp ne i32 %182, 0
  br i1 %183, label %196, label %184

184:                                              ; preds = %118
  %185 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %186 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %185, i32 0, i32 4
  %187 = load i16, i16* %186, align 2
  %188 = sext i16 %187 to i32
  %189 = icmp ne i32 %188, 0
  br i1 %189, label %196, label %190

190:                                              ; preds = %184
  %191 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %192 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %191, i32 0, i32 3
  %193 = load i16, i16* %192, align 8
  %194 = sext i16 %193 to i32
  %195 = icmp ne i32 %194, 0
  br i1 %195, label %196, label %202

196:                                              ; preds = %190, %184, %118
  %197 = load %struct.configtree*, %struct.configtree** %19, align 8
  %198 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  call void @updateBoundingBoxes(%struct.configtree* noundef %197, %struct.vrna_plot_options_puzzler_t* noundef %198)
  %199 = load %struct.configtree*, %struct.configtree** %19, align 8
  %200 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %201 = call %struct.configtree* @checkAndFixIntersections(%struct.configtree* noundef %199, i32 noundef 0, %struct.vrna_plot_options_puzzler_t* noundef %200)
  br label %202

202:                                              ; preds = %196, %190
  %203 = load %struct.configtree*, %struct.configtree** %19, align 8
  %204 = load i16*, i16** %7, align 8
  %205 = load i32, i32* %12, align 4
  %206 = trunc i32 %205 to i16
  %207 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %208 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %207, i32 0, i32 2
  %209 = load double, double* %208, align 8
  %210 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %211 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %210, i32 0, i32 1
  %212 = load double, double* %211, align 8
  %213 = load double*, double** %16, align 8
  %214 = load double*, double** %17, align 8
  call void @determineNucleotideCoordinates(%struct.configtree* noundef %203, i16* noundef %204, i16 noundef zeroext %206, double noundef %209, double noundef %212, double* noundef %213, double* noundef %214)
  store i16 1, i16* %20, align 2
  %215 = load i16, i16* %20, align 2
  %216 = icmp ne i16 %215, 0
  br i1 %216, label %217, label %228

217:                                              ; preds = %202
  %218 = load %struct.configtree*, %struct.configtree** %19, align 8
  %219 = load i16*, i16** %7, align 8
  %220 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %221 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %220, i32 0, i32 2
  %222 = load double, double* %221, align 8
  %223 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %224 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %223, i32 0, i32 6
  %225 = load i16, i16* %224, align 2
  %226 = load double*, double** %16, align 8
  %227 = load double*, double** %17, align 8
  call void @resolveExteriorChildrenIntersectionXY(%struct.configtree* noundef %218, i16* noundef %219, double noundef %222, i16 noundef signext %225, double* noundef %226, double* noundef %227)
  br label %228

228:                                              ; preds = %217, %202
  %229 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %230 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %229, i32 0, i32 0
  %231 = load i16, i16* %230, align 8
  %232 = sext i16 %231 to i32
  %233 = icmp ne i32 %232, 0
  br i1 %233, label %234, label %310

234:                                              ; preds = %228
  %235 = load double**, double*** %10, align 8
  %236 = icmp ne double** %235, null
  br i1 %236, label %237, label %310

237:                                              ; preds = %234
  %238 = load i32, i32* %12, align 4
  %239 = sext i32 %238 to i64
  %240 = mul i64 48, %239
  %241 = trunc i64 %240 to i32
  %242 = call i8* @vrna_alloc(i32 noundef %241)
  %243 = bitcast i8* %242 to double*
  %244 = load double**, double*** %10, align 8
  store double* %243, double** %244, align 8
  store i32 0, i32* %21, align 4
  br label %245

245:                                              ; preds = %292, %237
  %246 = load i32, i32* %21, align 4
  %247 = load i32, i32* %12, align 4
  %248 = icmp slt i32 %246, %247
  br i1 %248, label %249, label %295

249:                                              ; preds = %245
  %250 = load double**, double*** %10, align 8
  %251 = load double*, double** %250, align 8
  %252 = load i32, i32* %21, align 4
  %253 = mul nsw i32 6, %252
  %254 = add nsw i32 %253, 0
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds double, double* %251, i64 %255
  store double -1.000000e+00, double* %256, align 8
  %257 = load double**, double*** %10, align 8
  %258 = load double*, double** %257, align 8
  %259 = load i32, i32* %21, align 4
  %260 = mul nsw i32 6, %259
  %261 = add nsw i32 %260, 1
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds double, double* %258, i64 %262
  store double -1.000000e+00, double* %263, align 8
  %264 = load double**, double*** %10, align 8
  %265 = load double*, double** %264, align 8
  %266 = load i32, i32* %21, align 4
  %267 = mul nsw i32 6, %266
  %268 = add nsw i32 %267, 2
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds double, double* %265, i64 %269
  store double -1.000000e+00, double* %270, align 8
  %271 = load double**, double*** %10, align 8
  %272 = load double*, double** %271, align 8
  %273 = load i32, i32* %21, align 4
  %274 = mul nsw i32 6, %273
  %275 = add nsw i32 %274, 3
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds double, double* %272, i64 %276
  store double -1.000000e+00, double* %277, align 8
  %278 = load double**, double*** %10, align 8
  %279 = load double*, double** %278, align 8
  %280 = load i32, i32* %21, align 4
  %281 = mul nsw i32 6, %280
  %282 = add nsw i32 %281, 4
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds double, double* %279, i64 %283
  store double -1.000000e+00, double* %284, align 8
  %285 = load double**, double*** %10, align 8
  %286 = load double*, double** %285, align 8
  %287 = load i32, i32* %21, align 4
  %288 = mul nsw i32 6, %287
  %289 = add nsw i32 %288, 5
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds double, double* %286, i64 %290
  store double -1.000000e+00, double* %291, align 8
  br label %292

292:                                              ; preds = %249
  %293 = load i32, i32* %21, align 4
  %294 = add nsw i32 %293, 1
  store i32 %294, i32* %21, align 4
  br label %245, !llvm.loop !6

295:                                              ; preds = %245
  %296 = load i16*, i16** %7, align 8
  %297 = load double*, double** %16, align 8
  %298 = load double*, double** %17, align 8
  %299 = load %struct.tBaseInformation*, %struct.tBaseInformation** %14, align 8
  %300 = load double**, double*** %10, align 8
  %301 = load double*, double** %300, align 8
  call void @computeAnglesAndCentersForPS(i16* noundef %296, double* noundef %297, double* noundef %298, %struct.tBaseInformation* noundef %299, double* noundef %301)
  store i16 0, i16* %22, align 2
  %302 = load double*, double** %16, align 8
  %303 = load double*, double** %17, align 8
  %304 = load double**, double*** %10, align 8
  %305 = load double*, double** %304, align 8
  %306 = load i16, i16* %22, align 2
  %307 = load %struct.tBaseInformation*, %struct.tBaseInformation** %14, align 8
  %308 = load i32, i32* %12, align 4
  %309 = call signext i16 @checkRemainingIntersections(double* noundef %302, double* noundef %303, double* noundef %305, i16 noundef signext %306, %struct.tBaseInformation* noundef %307, i32 noundef %308)
  store i16 %309, i16* %23, align 2
  br label %316

310:                                              ; preds = %234, %228
  %311 = load double**, double*** %10, align 8
  %312 = icmp ne double** %311, null
  br i1 %312, label %313, label %315

313:                                              ; preds = %310
  %314 = load double**, double*** %10, align 8
  store double* null, double** %314, align 8
  br label %315

315:                                              ; preds = %313, %310
  br label %316

316:                                              ; preds = %315, %295
  %317 = load %struct.configtree*, %struct.configtree** %19, align 8
  call void @freeTree(%struct.configtree* noundef %317)
  %318 = load %struct.tBaseInformation*, %struct.tBaseInformation** %14, align 8
  %319 = bitcast %struct.tBaseInformation* %318 to i8*
  call void @free(i8* noundef %319) #7
  store i32 0, i32* %24, align 4
  br label %320

320:                                              ; preds = %347, %316
  %321 = load i32, i32* %24, align 4
  %322 = load i32, i32* %12, align 4
  %323 = icmp slt i32 %321, %322
  br i1 %323, label %324, label %350

324:                                              ; preds = %320
  %325 = load double*, double** %16, align 8
  %326 = load i32, i32* %24, align 4
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds double, double* %325, i64 %327
  %329 = load double, double* %328, align 8
  %330 = fptrunc double %329 to float
  %331 = load float**, float*** %8, align 8
  %332 = load float*, float** %331, align 8
  %333 = load i32, i32* %24, align 4
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds float, float* %332, i64 %334
  store float %330, float* %335, align 4
  %336 = load double*, double** %17, align 8
  %337 = load i32, i32* %24, align 4
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds double, double* %336, i64 %338
  %340 = load double, double* %339, align 8
  %341 = fptrunc double %340 to float
  %342 = load float**, float*** %9, align 8
  %343 = load float*, float** %342, align 8
  %344 = load i32, i32* %24, align 4
  %345 = sext i32 %344 to i64
  %346 = getelementptr inbounds float, float* %343, i64 %345
  store float %341, float* %346, align 4
  br label %347

347:                                              ; preds = %324
  %348 = load i32, i32* %24, align 4
  %349 = add nsw i32 %348, 1
  store i32 %349, i32* %24, align 4
  br label %320, !llvm.loop !7

350:                                              ; preds = %320
  %351 = load double*, double** %16, align 8
  %352 = bitcast double* %351 to i8*
  call void @free(i8* noundef %352) #7
  %353 = load double*, double** %17, align 8
  %354 = bitcast double* %353 to i8*
  call void @free(i8* noundef %354) #7
  %355 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %11, align 8
  %356 = icmp ne %struct.vrna_plot_options_puzzler_t* %355, null
  br i1 %356, label %359, label %357

357:                                              ; preds = %350
  %358 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  call void @vrna_plot_options_puzzler_free(%struct.vrna_plot_options_puzzler_t* noundef %358)
  br label %359

359:                                              ; preds = %357, %350
  %360 = load i32, i32* %12, align 4
  store i32 %360, i32* %6, align 4
  br label %377

361:                                              ; preds = %34, %31, %5
  %362 = load float**, float*** %8, align 8
  %363 = icmp ne float** %362, null
  br i1 %363, label %364, label %366

364:                                              ; preds = %361
  %365 = load float**, float*** %8, align 8
  store float* null, float** %365, align 8
  br label %366

366:                                              ; preds = %364, %361
  %367 = load float**, float*** %9, align 8
  %368 = icmp ne float** %367, null
  br i1 %368, label %369, label %371

369:                                              ; preds = %366
  %370 = load float**, float*** %9, align 8
  store float* null, float** %370, align 8
  br label %371

371:                                              ; preds = %369, %366
  %372 = load double**, double*** %10, align 8
  %373 = icmp ne double** %372, null
  br i1 %373, label %374, label %376

374:                                              ; preds = %371
  %375 = load double**, double*** %10, align 8
  store double* null, double** %375, align 8
  br label %376

376:                                              ; preds = %374, %371
  store i32 0, i32* %6, align 4
  br label %377

377:                                              ; preds = %376, %359
  %378 = load i32, i32* %6, align 4
  ret i32 %378
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfgGenerateConfig(i16* noundef %0, %struct.tBaseInformation* noundef %1, double noundef %2, double noundef %3) #0 {
  %5 = alloca i16*, align 8
  %6 = alloca %struct.tBaseInformation*, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i16* %0, i16** %5, align 8
  store %struct.tBaseInformation* %1, %struct.tBaseInformation** %6, align 8
  store double %2, double* %7, align 8
  store double %3, double* %8, align 8
  %11 = load i16*, i16** %5, align 8
  %12 = getelementptr inbounds i16, i16* %11, i64 0
  %13 = load i16, i16* %12, align 2
  %14 = sext i16 %13 to i32
  store i32 %14, i32* %9, align 4
  store i32 1, i32* %10, align 4
  br label %15

15:                                               ; preds = %55, %4
  %16 = load i32, i32* %10, align 4
  %17 = load i32, i32* %9, align 4
  %18 = icmp slt i32 %16, %17
  br i1 %18, label %19, label %56

19:                                               ; preds = %15
  %20 = load i16*, i16** %5, align 8
  %21 = load i32, i32* %10, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i16, i16* %20, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = sext i16 %24 to i32
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %19
  %28 = load i32, i32* %10, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %10, align 4
  br label %55

30:                                               ; preds = %19
  %31 = load i16*, i16** %5, align 8
  %32 = load i32, i32* %10, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i16, i16* %31, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = sext i16 %35 to i32
  %37 = load i32, i32* %10, align 4
  %38 = icmp sgt i32 %36, %37
  br i1 %38, label %39, label %51

39:                                               ; preds = %30
  %40 = load i32, i32* %10, align 4
  %41 = load i16*, i16** %5, align 8
  %42 = load %struct.tBaseInformation*, %struct.tBaseInformation** %6, align 8
  %43 = load double, double* %7, align 8
  %44 = load double, double* %8, align 8
  call void @cfgGenHandleStem(i32 noundef %40, i16* noundef %41, %struct.tBaseInformation* noundef %42, double noundef %43, double noundef %44)
  %45 = load i16*, i16** %5, align 8
  %46 = load i32, i32* %10, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i16, i16* %45, i64 %47
  %49 = load i16, i16* %48, align 2
  %50 = sext i16 %49 to i32
  store i32 %50, i32* %10, align 4
  br label %54

51:                                               ; preds = %30
  %52 = load i32, i32* %10, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %10, align 4
  br label %54

54:                                               ; preds = %51, %39
  br label %55

55:                                               ; preds = %54, %27
  br label %15, !llvm.loop !8

56:                                               ; preds = %15
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @computeAffineCoordinates(i16* noundef %0, double noundef %1, double noundef %2, %struct.tBaseInformation* noundef %3) #0 {
  %5 = alloca i16*, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca %struct.tBaseInformation*, align 8
  %9 = alloca i16, align 2
  %10 = alloca i16, align 2
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i16* %0, i16** %5, align 8
  store double %1, double* %6, align 8
  store double %2, double* %7, align 8
  store %struct.tBaseInformation* %3, %struct.tBaseInformation** %8, align 8
  %13 = load i16*, i16** %5, align 8
  %14 = getelementptr inbounds i16, i16* %13, i64 0
  %15 = load i16, i16* %14, align 2
  store i16 %15, i16* %9, align 2
  store i16 1, i16* %10, align 2
  store i32 -1, i32* %11, align 4
  %16 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %17 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %16, i64 0
  %18 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %17, i32 0, i32 1
  store double 0.000000e+00, double* %18, align 8
  %19 = load i16, i16* %9, align 2
  %20 = sext i16 %19 to i32
  %21 = icmp sle i32 2, %20
  br i1 %21, label %22, label %37

22:                                               ; preds = %4
  %23 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %24 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %23, i64 0
  %25 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %24, i32 0, i32 1
  %26 = load double, double* %25, align 8
  %27 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %28 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %27, i64 1
  %29 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %28, i32 0, i32 1
  store double %26, double* %29, align 8
  %30 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %31 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %30, i64 1
  %32 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %31, i32 0, i32 1
  %33 = load double, double* %32, align 8
  %34 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %35 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %34, i64 2
  %36 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %35, i32 0, i32 1
  store double %33, double* %36, align 8
  br label %37

37:                                               ; preds = %22, %4
  store i32 0, i32* %12, align 4
  br label %38

38:                                               ; preds = %256, %171, %37
  %39 = load i16, i16* %10, align 2
  %40 = sext i16 %39 to i32
  %41 = load i16, i16* %9, align 2
  %42 = sext i16 %41 to i32
  %43 = icmp slt i32 %40, %42
  br i1 %43, label %44, label %257

44:                                               ; preds = %38
  %45 = load i16*, i16** %5, align 8
  %46 = load i16, i16* %10, align 2
  %47 = sext i16 %46 to i64
  %48 = getelementptr inbounds i16, i16* %45, i64 %47
  %49 = load i16, i16* %48, align 2
  %50 = sext i16 %49 to i32
  %51 = icmp sle i32 %50, 0
  br i1 %51, label %52, label %71

52:                                               ; preds = %44
  %53 = load i16, i16* %10, align 2
  %54 = sext i16 %53 to i32
  %55 = icmp sgt i32 %54, 1
  br i1 %55, label %56, label %64

56:                                               ; preds = %52
  %57 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %58 = load i16, i16* %10, align 2
  %59 = sext i16 %58 to i32
  %60 = sub nsw i32 %59, 1
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %57, i64 %61
  %63 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %62, i32 0, i32 0
  store i32 1, i32* %63, align 8
  br label %64

64:                                               ; preds = %56, %52
  %65 = load i16*, i16** %5, align 8
  %66 = load i16, i16* %10, align 2
  %67 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %68 = call signext i16 @handleExteriorBases(i16* noundef %65, i16 noundef signext %66, %struct.tBaseInformation* noundef %67, i32 noundef -1)
  store i16 %68, i16* %10, align 2
  %69 = load i32, i32* %12, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %12, align 4
  br label %71

71:                                               ; preds = %64, %44
  %72 = load i16, i16* %10, align 2
  %73 = sext i16 %72 to i32
  %74 = load i16, i16* %9, align 2
  %75 = sext i16 %74 to i32
  %76 = icmp slt i32 %73, %75
  br i1 %76, label %77, label %256

77:                                               ; preds = %71
  %78 = load i16*, i16** %5, align 8
  %79 = load i16, i16* %10, align 2
  %80 = sext i16 %79 to i64
  %81 = getelementptr inbounds i16, i16* %78, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = sext i16 %82 to i32
  %84 = load i16*, i16** %5, align 8
  %85 = load i16, i16* %10, align 2
  %86 = sext i16 %85 to i32
  %87 = sub nsw i32 %86, 1
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i16, i16* %84, i64 %88
  %90 = load i16, i16* %89, align 2
  %91 = sext i16 %90 to i32
  %92 = sub nsw i32 %83, %91
  %93 = icmp ne i32 %92, 1
  br i1 %93, label %94, label %224

94:                                               ; preds = %77
  %95 = load i16*, i16** %5, align 8
  %96 = load i16, i16* %10, align 2
  %97 = sext i16 %96 to i64
  %98 = getelementptr inbounds i16, i16* %95, i64 %97
  %99 = load i16, i16* %98, align 2
  %100 = sext i16 %99 to i32
  %101 = icmp ne i32 %100, 0
  br i1 %101, label %102, label %224

102:                                              ; preds = %94
  %103 = load i16*, i16** %5, align 8
  %104 = load i16, i16* %10, align 2
  %105 = sext i16 %104 to i32
  %106 = sub nsw i32 %105, 1
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i16, i16* %103, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = sext i16 %109 to i32
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %112, label %224

112:                                              ; preds = %102
  %113 = load i16, i16* %10, align 2
  %114 = sext i16 %113 to i32
  %115 = icmp eq i32 %114, 1
  br i1 %115, label %116, label %172

116:                                              ; preds = %112
  %117 = load i32, i32* %12, align 4
  %118 = icmp slt i32 %117, 1
  br i1 %118, label %119, label %134

119:                                              ; preds = %116
  %120 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %121 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %120, i64 2
  %122 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %121, i32 0, i32 1
  store double 0xBFF921FB54442D18, double* %122, align 8
  %123 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %124 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %123, i64 1
  %125 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %124, i32 0, i32 1
  store double 0xBFF921FB54442D18, double* %125, align 8
  %126 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %127 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %126, i64 0
  %128 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %127, i32 0, i32 1
  store double 0xBFF921FB54442D18, double* %128, align 8
  %129 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %130 = load i16, i16* %10, align 2
  %131 = sext i16 %130 to i64
  %132 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %129, i64 %131
  %133 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %132, i32 0, i32 0
  store i32 1, i32* %133, align 8
  br label %134

134:                                              ; preds = %119, %116
  %135 = load i16*, i16** %5, align 8
  %136 = load i16, i16* %10, align 2
  %137 = load double, double* %6, align 8
  %138 = load double, double* %7, align 8
  %139 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  call void @handleStem(i16* noundef %135, i16 noundef signext %136, double noundef %137, double noundef %138, %struct.tBaseInformation* noundef %139, i32 noundef -1)
  %140 = load i16*, i16** %5, align 8
  %141 = load i16, i16* %10, align 2
  %142 = sext i16 %141 to i64
  %143 = getelementptr inbounds i16, i16* %140, i64 %142
  %144 = load i16, i16* %143, align 2
  %145 = sext i16 %144 to i32
  %146 = add nsw i32 %145, 1
  %147 = trunc i32 %146 to i16
  store i16 %147, i16* %10, align 2
  %148 = load i16, i16* %10, align 2
  %149 = sext i16 %148 to i32
  %150 = load i16, i16* %9, align 2
  %151 = sext i16 %150 to i32
  %152 = icmp eq i32 %149, %151
  br i1 %152, label %153, label %171

153:                                              ; preds = %134
  %154 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %155 = load i16, i16* %10, align 2
  %156 = sext i16 %155 to i32
  %157 = sub nsw i32 %156, 1
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %154, i64 %158
  %160 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %159, i32 0, i32 0
  store i32 1, i32* %160, align 8
  %161 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %162 = load i16, i16* %10, align 2
  %163 = sext i16 %162 to i64
  %164 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %161, i64 %163
  %165 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %164, i32 0, i32 0
  store i32 1, i32* %165, align 8
  %166 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %167 = load i16, i16* %10, align 2
  %168 = sext i16 %167 to i64
  %169 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %166, i64 %168
  %170 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %169, i32 0, i32 1
  store double 0xBFF921FB54442D18, double* %170, align 8
  br label %171

171:                                              ; preds = %153, %134
  br label %38, !llvm.loop !9

172:                                              ; preds = %112
  %173 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %174 = load i16, i16* %10, align 2
  %175 = sext i16 %174 to i64
  %176 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %173, i64 %175
  %177 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %176, i32 0, i32 1
  %178 = load double, double* %177, align 8
  %179 = fadd double %178, 0xBFF921FB54442D18
  %180 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %181 = load i16, i16* %10, align 2
  %182 = sext i16 %181 to i64
  %183 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %180, i64 %182
  %184 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %183, i32 0, i32 1
  store double %179, double* %184, align 8
  %185 = load double, double* %7, align 8
  %186 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %187 = load i16, i16* %10, align 2
  %188 = sext i16 %187 to i32
  %189 = add nsw i32 %188, 1
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %186, i64 %190
  %192 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %191, i32 0, i32 2
  store double %185, double* %192, align 8
  %193 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %194 = load i16, i16* %10, align 2
  %195 = sext i16 %194 to i32
  %196 = sub nsw i32 %195, 1
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %193, i64 %197
  %199 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %198, i32 0, i32 0
  store i32 1, i32* %199, align 8
  %200 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %201 = load i16, i16* %10, align 2
  %202 = sext i16 %201 to i32
  %203 = add nsw i32 %202, 1
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %200, i64 %204
  %206 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %205, i32 0, i32 1
  %207 = load double, double* %206, align 8
  %208 = fadd double %207, 0xBFF921FB54442D18
  %209 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %210 = load i16, i16* %10, align 2
  %211 = sext i16 %210 to i32
  %212 = add nsw i32 %211, 1
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %209, i64 %213
  %215 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %214, i32 0, i32 1
  store double %208, double* %215, align 8
  %216 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %217 = load i16, i16* %10, align 2
  %218 = sext i16 %217 to i64
  %219 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %216, i64 %218
  %220 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %219, i32 0, i32 0
  store i32 1, i32* %220, align 8
  %221 = load i32, i32* %12, align 4
  %222 = add nsw i32 %221, 1
  store i32 %222, i32* %12, align 4
  br label %223

223:                                              ; preds = %172
  br label %224

224:                                              ; preds = %223, %102, %94, %77
  %225 = load i16*, i16** %5, align 8
  %226 = load i16, i16* %10, align 2
  %227 = load double, double* %6, align 8
  %228 = load double, double* %7, align 8
  %229 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  call void @handleStem(i16* noundef %225, i16 noundef signext %226, double noundef %227, double noundef %228, %struct.tBaseInformation* noundef %229, i32 noundef -1)
  %230 = load i16*, i16** %5, align 8
  %231 = load i16, i16* %10, align 2
  %232 = sext i16 %231 to i64
  %233 = getelementptr inbounds i16, i16* %230, i64 %232
  %234 = load i16, i16* %233, align 2
  %235 = sext i16 %234 to i32
  %236 = add nsw i32 %235, 1
  %237 = trunc i32 %236 to i16
  store i16 %237, i16* %10, align 2
  %238 = load i16, i16* %10, align 2
  %239 = sext i16 %238 to i32
  %240 = load i16, i16* %9, align 2
  %241 = sext i16 %240 to i32
  %242 = icmp eq i32 %239, %241
  br i1 %242, label %243, label %255

243:                                              ; preds = %224
  %244 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %245 = load i16, i16* %10, align 2
  %246 = sext i16 %245 to i32
  %247 = sub nsw i32 %246, 1
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %244, i64 %248
  %250 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %249, i32 0, i32 0
  store i32 1, i32* %250, align 8
  %251 = load i16*, i16** %5, align 8
  %252 = load i16, i16* %10, align 2
  %253 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %254 = call signext i16 @handleExteriorBases(i16* noundef %251, i16 noundef signext %252, %struct.tBaseInformation* noundef %253, i32 noundef -1)
  store i16 %254, i16* %10, align 2
  br label %255

255:                                              ; preds = %243, %224
  br label %256

256:                                              ; preds = %255, %71
  br label %38, !llvm.loop !9

257:                                              ; preds = %38
  %258 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %259 = load i16, i16* %9, align 2
  %260 = sext i16 %259 to i64
  %261 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %258, i64 %260
  %262 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %261, i32 0, i32 0
  store i32 1, i32* %262, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @affineToCartesianCoordinates(%struct.tBaseInformation* noundef %0, i16 noundef zeroext %1, double* noundef %2, double* noundef %3) #0 {
  %5 = alloca %struct.tBaseInformation*, align 8
  %6 = alloca i16, align 2
  %7 = alloca double*, align 8
  %8 = alloca double*, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  store %struct.tBaseInformation* %0, %struct.tBaseInformation** %5, align 8
  store i16 %1, i16* %6, align 2
  store double* %2, double** %7, align 8
  store double* %3, double** %8, align 8
  %11 = load i16, i16* %6, align 2
  %12 = zext i16 %11 to i32
  %13 = icmp slt i32 %12, 1
  br i1 %13, label %14, label %15

14:                                               ; preds = %4
  br label %77

15:                                               ; preds = %4
  store double 0.000000e+00, double* %9, align 8
  %16 = load double*, double** %8, align 8
  %17 = getelementptr inbounds double, double* %16, i64 0
  store double 1.000000e+02, double* %17, align 8
  %18 = load double*, double** %7, align 8
  %19 = getelementptr inbounds double, double* %18, i64 0
  store double 1.000000e+02, double* %19, align 8
  store i32 1, i32* %10, align 4
  br label %20

20:                                               ; preds = %73, %15
  %21 = load i32, i32* %10, align 4
  %22 = load i16, i16* %6, align 2
  %23 = zext i16 %22 to i32
  %24 = icmp slt i32 %21, %23
  br i1 %24, label %25, label %76

25:                                               ; preds = %20
  %26 = load double, double* %9, align 8
  %27 = load %struct.tBaseInformation*, %struct.tBaseInformation** %5, align 8
  %28 = load i32, i32* %10, align 4
  %29 = add nsw i32 %28, 1
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %27, i64 %30
  %32 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %31, i32 0, i32 1
  %33 = load double, double* %32, align 8
  %34 = fsub double %26, %33
  store double %34, double* %9, align 8
  %35 = load double*, double** %7, align 8
  %36 = load i32, i32* %10, align 4
  %37 = sub nsw i32 %36, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds double, double* %35, i64 %38
  %40 = load double, double* %39, align 8
  %41 = load %struct.tBaseInformation*, %struct.tBaseInformation** %5, align 8
  %42 = load i32, i32* %10, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %41, i64 %43
  %45 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %44, i32 0, i32 2
  %46 = load double, double* %45, align 8
  %47 = load double, double* %9, align 8
  %48 = call double @cos(double noundef %47) #7
  %49 = call double @llvm.fmuladd.f64(double %46, double %48, double %40)
  %50 = load double*, double** %7, align 8
  %51 = load i32, i32* %10, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds double, double* %50, i64 %52
  store double %49, double* %53, align 8
  %54 = load double*, double** %8, align 8
  %55 = load i32, i32* %10, align 4
  %56 = sub nsw i32 %55, 1
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds double, double* %54, i64 %57
  %59 = load double, double* %58, align 8
  %60 = load %struct.tBaseInformation*, %struct.tBaseInformation** %5, align 8
  %61 = load i32, i32* %10, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %60, i64 %62
  %64 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %63, i32 0, i32 2
  %65 = load double, double* %64, align 8
  %66 = load double, double* %9, align 8
  %67 = call double @sin(double noundef %66) #7
  %68 = call double @llvm.fmuladd.f64(double %65, double %67, double %59)
  %69 = load double*, double** %8, align 8
  %70 = load i32, i32* %10, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds double, double* %69, i64 %71
  store double %68, double* %72, align 8
  br label %73

73:                                               ; preds = %25
  %74 = load i32, i32* %10, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %10, align 4
  br label %20, !llvm.loop !10

76:                                               ; preds = %20
  br label %77

77:                                               ; preds = %76, %14
  ret void
}

; Function Attrs: nounwind
declare dso_local double @sqrt(double noundef) #2

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fmuladd.f64(double, double, double) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.configtree* @buildConfigtree(i16* noundef %0, %struct.tBaseInformation* noundef %1, double* noundef %2, double* noundef %3, double noundef %4) #0 {
  %6 = alloca i16*, align 8
  %7 = alloca %struct.tBaseInformation*, align 8
  %8 = alloca double*, align 8
  %9 = alloca double*, align 8
  %10 = alloca double, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.configtree*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %struct.configtree*, align 8
  store i16* %0, i16** %6, align 8
  store %struct.tBaseInformation* %1, %struct.tBaseInformation** %7, align 8
  store double* %2, double** %8, align 8
  store double* %3, double** %9, align 8
  store double %4, double* %10, align 8
  store i32 0, i32* %11, align 4
  %17 = load i32, i32* %11, align 4
  %18 = load i16*, i16** %6, align 8
  %19 = call %struct.configtree* @createTreeNode(i32 noundef %17, %struct.configtree* noundef null, i32 noundef 1, i32 noundef -1, i16* noundef %18, %struct.config* noundef null)
  store %struct.configtree* %19, %struct.configtree** %12, align 8
  store i32 0, i32* %13, align 4
  %20 = load i16*, i16** %6, align 8
  %21 = getelementptr inbounds i16, i16* %20, i64 0
  %22 = load i16, i16* %21, align 2
  %23 = sext i16 %22 to i32
  store i32 %23, i32* %14, align 4
  store i32 1, i32* %15, align 4
  br label %24

24:                                               ; preds = %55, %5
  %25 = load i32, i32* %15, align 4
  %26 = load i32, i32* %14, align 4
  %27 = icmp slt i32 %25, %26
  br i1 %27, label %28, label %58

28:                                               ; preds = %24
  %29 = load i16*, i16** %6, align 8
  %30 = load i32, i32* %15, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i16, i16* %29, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = sext i16 %33 to i32
  %35 = load i32, i32* %15, align 4
  %36 = icmp sgt i32 %34, %35
  br i1 %36, label %37, label %54

37:                                               ; preds = %28
  %38 = load %struct.configtree*, %struct.configtree** %12, align 8
  %39 = load i32, i32* %15, align 4
  %40 = load i16*, i16** %6, align 8
  %41 = load %struct.tBaseInformation*, %struct.tBaseInformation** %7, align 8
  %42 = call %struct.configtree* @treeHandleStem(%struct.configtree* noundef %38, i32* noundef %11, i32 noundef %39, i16* noundef %40, %struct.tBaseInformation* noundef %41)
  store %struct.configtree* %42, %struct.configtree** %16, align 8
  %43 = load %struct.configtree*, %struct.configtree** %12, align 8
  %44 = load i32, i32* %13, align 4
  %45 = load %struct.configtree*, %struct.configtree** %16, align 8
  call void @setChild(%struct.configtree* noundef %43, i32 noundef %44, %struct.configtree* noundef %45)
  %46 = load i32, i32* %13, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %13, align 4
  %48 = load i16*, i16** %6, align 8
  %49 = load i32, i32* %15, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i16, i16* %48, i64 %50
  %52 = load i16, i16* %51, align 2
  %53 = sext i16 %52 to i32
  store i32 %53, i32* %15, align 4
  br label %54

54:                                               ; preds = %37, %28
  br label %55

55:                                               ; preds = %54
  %56 = load i32, i32* %15, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %15, align 4
  br label %24, !llvm.loop !11

58:                                               ; preds = %24
  %59 = load %struct.configtree*, %struct.configtree** %12, align 8
  %60 = load i16*, i16** %6, align 8
  %61 = load %struct.tBaseInformation*, %struct.tBaseInformation** %7, align 8
  %62 = load double*, double** %8, align 8
  %63 = load double*, double** %9, align 8
  %64 = load double, double* %10, align 8
  call void @buildBoundingBoxes(%struct.configtree* noundef %59, i16* noundef %60, %struct.tBaseInformation* noundef %61, double* noundef %62, double* noundef %63, double noundef %64)
  %65 = load %struct.configtree*, %struct.configtree** %12, align 8
  ret %struct.configtree* %65
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @updateBoundingBoxes(%struct.configtree* noundef %0, %struct.vrna_plot_options_puzzler_t* noundef %1) #0 {
  %3 = alloca %struct.configtree*, align 8
  %4 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %5 = alloca i64, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.configtree*, align 8
  %12 = alloca %struct.boundingboxStem*, align 8
  %13 = alloca %struct.boundingboxLoop*, align 8
  %14 = alloca [2 x double], align 16
  %15 = alloca i64, align 8
  %16 = alloca double, align 8
  %17 = alloca [2 x double], align 16
  %18 = alloca double, align 8
  %19 = alloca [2 x double], align 16
  %20 = alloca double, align 8
  %21 = alloca double, align 8
  %22 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %3, align 8
  store %struct.vrna_plot_options_puzzler_t* %1, %struct.vrna_plot_options_puzzler_t** %4, align 8
  %23 = load %struct.configtree*, %struct.configtree** %3, align 8
  %24 = call signext i16 @isExterior(%struct.configtree* noundef %23)
  %25 = icmp ne i16 %24, 0
  br i1 %25, label %124, label %26

26:                                               ; preds = %2
  %27 = load %struct.configtree*, %struct.configtree** %3, align 8
  %28 = getelementptr inbounds %struct.configtree, %struct.configtree* %27, i32 0, i32 8
  %29 = load %struct.boundingboxStem*, %struct.boundingboxStem** %28, align 8
  %30 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %29, i32 0, i32 4
  %31 = getelementptr inbounds [2 x double], [2 x double]* %30, i64 0, i64 0
  %32 = load double, double* %31, align 8
  %33 = fmul double 2.000000e+00, %32
  %34 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %4, align 8
  %35 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %34, i32 0, i32 2
  %36 = load double, double* %35, align 8
  %37 = fdiv double %33, %36
  %38 = call i64 @lround(double noundef %37) #7
  store i64 %38, i64* %5, align 8
  %39 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %4, align 8
  %40 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %39, i32 0, i32 2
  %41 = load double, double* %40, align 8
  %42 = load i64, i64* %5, align 8
  %43 = sitofp i64 %42 to double
  %44 = fmul double %41, %43
  store double %44, double* %6, align 8
  %45 = load %struct.configtree*, %struct.configtree** %3, align 8
  %46 = getelementptr inbounds %struct.configtree, %struct.configtree* %45, i32 0, i32 4
  %47 = load %struct.config*, %struct.config** %46, align 8
  %48 = getelementptr inbounds %struct.config, %struct.config* %47, i32 0, i32 0
  %49 = load double, double* %48, align 8
  %50 = load %struct.configtree*, %struct.configtree** %3, align 8
  %51 = getelementptr inbounds %struct.configtree, %struct.configtree* %50, i32 0, i32 4
  %52 = load %struct.config*, %struct.config** %51, align 8
  %53 = getelementptr inbounds %struct.config, %struct.config* %52, i32 0, i32 0
  %54 = load double, double* %53, align 8
  %55 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %4, align 8
  %56 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %55, i32 0, i32 1
  %57 = load double, double* %56, align 8
  %58 = fmul double 2.500000e-01, %57
  %59 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %4, align 8
  %60 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %59, i32 0, i32 1
  %61 = load double, double* %60, align 8
  %62 = fmul double %58, %61
  %63 = fneg double %62
  %64 = call double @llvm.fmuladd.f64(double %49, double %54, double %63)
  %65 = call double @sqrt(double noundef %64) #7
  store double %65, double* %7, align 8
  %66 = load double, double* %6, align 8
  %67 = load double, double* %7, align 8
  %68 = call double @llvm.fmuladd.f64(double 5.000000e-01, double %66, double %67)
  store double %68, double* %8, align 8
  %69 = load %struct.configtree*, %struct.configtree** %3, align 8
  %70 = getelementptr inbounds %struct.configtree, %struct.configtree* %69, i32 0, i32 8
  %71 = load %struct.boundingboxStem*, %struct.boundingboxStem** %70, align 8
  %72 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %71, i32 0, i32 3
  %73 = getelementptr inbounds [2 x double], [2 x double]* %72, i64 0, i64 0
  %74 = load double, double* %73, align 8
  %75 = load double, double* %8, align 8
  %76 = load %struct.configtree*, %struct.configtree** %3, align 8
  %77 = getelementptr inbounds %struct.configtree, %struct.configtree* %76, i32 0, i32 8
  %78 = load %struct.boundingboxStem*, %struct.boundingboxStem** %77, align 8
  %79 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %78, i32 0, i32 1
  %80 = getelementptr inbounds [2 x double], [2 x double]* %79, i64 0, i64 0
  %81 = load double, double* %80, align 8
  %82 = call double @llvm.fmuladd.f64(double %75, double %81, double %74)
  %83 = load %struct.configtree*, %struct.configtree** %3, align 8
  %84 = getelementptr inbounds %struct.configtree, %struct.configtree* %83, i32 0, i32 7
  %85 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %84, align 8
  %86 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %85, i32 0, i32 1
  %87 = getelementptr inbounds [2 x double], [2 x double]* %86, i64 0, i64 0
  store double %82, double* %87, align 8
  %88 = load %struct.configtree*, %struct.configtree** %3, align 8
  %89 = getelementptr inbounds %struct.configtree, %struct.configtree* %88, i32 0, i32 8
  %90 = load %struct.boundingboxStem*, %struct.boundingboxStem** %89, align 8
  %91 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %90, i32 0, i32 3
  %92 = getelementptr inbounds [2 x double], [2 x double]* %91, i64 0, i64 1
  %93 = load double, double* %92, align 8
  %94 = load double, double* %8, align 8
  %95 = load %struct.configtree*, %struct.configtree** %3, align 8
  %96 = getelementptr inbounds %struct.configtree, %struct.configtree* %95, i32 0, i32 8
  %97 = load %struct.boundingboxStem*, %struct.boundingboxStem** %96, align 8
  %98 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %97, i32 0, i32 1
  %99 = getelementptr inbounds [2 x double], [2 x double]* %98, i64 0, i64 1
  %100 = load double, double* %99, align 8
  %101 = call double @llvm.fmuladd.f64(double %94, double %100, double %93)
  %102 = load %struct.configtree*, %struct.configtree** %3, align 8
  %103 = getelementptr inbounds %struct.configtree, %struct.configtree* %102, i32 0, i32 7
  %104 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %103, align 8
  %105 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %104, i32 0, i32 1
  %106 = getelementptr inbounds [2 x double], [2 x double]* %105, i64 0, i64 1
  store double %101, double* %106, align 8
  %107 = load %struct.configtree*, %struct.configtree** %3, align 8
  %108 = getelementptr inbounds %struct.configtree, %struct.configtree* %107, i32 0, i32 4
  %109 = load %struct.config*, %struct.config** %108, align 8
  %110 = getelementptr inbounds %struct.config, %struct.config* %109, i32 0, i32 0
  %111 = load double, double* %110, align 8
  %112 = load %struct.configtree*, %struct.configtree** %3, align 8
  %113 = getelementptr inbounds %struct.configtree, %struct.configtree* %112, i32 0, i32 7
  %114 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %113, align 8
  %115 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %114, i32 0, i32 2
  store double %111, double* %115, align 8
  %116 = load %struct.configtree*, %struct.configtree** %3, align 8
  %117 = getelementptr inbounds %struct.configtree, %struct.configtree* %116, i32 0, i32 9
  %118 = load %struct.configtree*, %struct.configtree** %3, align 8
  %119 = getelementptr inbounds %struct.configtree, %struct.configtree* %118, i32 0, i32 8
  %120 = load %struct.boundingboxStem*, %struct.boundingboxStem** %119, align 8
  %121 = load %struct.configtree*, %struct.configtree** %3, align 8
  %122 = getelementptr inbounds %struct.configtree, %struct.configtree* %121, i32 0, i32 7
  %123 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %122, align 8
  call void @updateAABB(%struct.AABB* noundef %117, %struct.boundingboxStem* noundef %120, %struct.boundingboxLoop* noundef %123)
  br label %124

124:                                              ; preds = %26, %2
  store double 0.000000e+00, double* %9, align 8
  store i32 0, i32* %10, align 4
  br label %125

125:                                              ; preds = %295, %124
  %126 = load i32, i32* %10, align 4
  %127 = load %struct.configtree*, %struct.configtree** %3, align 8
  %128 = getelementptr inbounds %struct.configtree, %struct.configtree* %127, i32 0, i32 3
  %129 = load i32, i32* %128, align 8
  %130 = icmp slt i32 %126, %129
  br i1 %130, label %131, label %298

131:                                              ; preds = %125
  %132 = load %struct.configtree*, %struct.configtree** %3, align 8
  %133 = load i32, i32* %10, align 4
  %134 = call %struct.configtree* @getChild(%struct.configtree* noundef %132, i32 noundef %133)
  store %struct.configtree* %134, %struct.configtree** %11, align 8
  %135 = load %struct.configtree*, %struct.configtree** %11, align 8
  %136 = getelementptr inbounds %struct.configtree, %struct.configtree* %135, i32 0, i32 8
  %137 = load %struct.boundingboxStem*, %struct.boundingboxStem** %136, align 8
  store %struct.boundingboxStem* %137, %struct.boundingboxStem** %12, align 8
  %138 = load %struct.configtree*, %struct.configtree** %11, align 8
  %139 = getelementptr inbounds %struct.configtree, %struct.configtree* %138, i32 0, i32 7
  %140 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %139, align 8
  store %struct.boundingboxLoop* %140, %struct.boundingboxLoop** %13, align 8
  %141 = load %struct.configtree*, %struct.configtree** %3, align 8
  %142 = call signext i16 @isExterior(%struct.configtree* noundef %141)
  %143 = icmp ne i16 %142, 0
  br i1 %143, label %144, label %151

144:                                              ; preds = %131
  %145 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %13, align 8
  %146 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %145, i32 0, i32 1
  %147 = getelementptr inbounds [2 x double], [2 x double]* %146, i64 0, i64 0
  %148 = load double, double* %147, align 8
  %149 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  store double %148, double* %149, align 16
  %150 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 1
  store double 1.000000e+02, double* %150, align 8
  br label %154

151:                                              ; preds = %131
  %152 = load %struct.configtree*, %struct.configtree** %3, align 8
  %153 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  call void @getLoopCenter(%struct.configtree* noundef %152, double* noundef %153)
  br label %154

154:                                              ; preds = %151, %144
  %155 = load %struct.boundingboxStem*, %struct.boundingboxStem** %12, align 8
  %156 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %155, i32 0, i32 4
  %157 = getelementptr inbounds [2 x double], [2 x double]* %156, i64 0, i64 0
  %158 = load double, double* %157, align 8
  %159 = fmul double 2.000000e+00, %158
  %160 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %4, align 8
  %161 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %160, i32 0, i32 2
  %162 = load double, double* %161, align 8
  %163 = fdiv double %159, %162
  %164 = call i64 @lround(double noundef %163) #7
  store i64 %164, i64* %15, align 8
  %165 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %4, align 8
  %166 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %165, i32 0, i32 2
  %167 = load double, double* %166, align 8
  %168 = load i64, i64* %15, align 8
  %169 = sitofp i64 %168 to double
  %170 = fmul double %167, %169
  store double %170, double* %16, align 8
  %171 = load double, double* %16, align 8
  %172 = fmul double 5.000000e-01, %171
  %173 = load %struct.boundingboxStem*, %struct.boundingboxStem** %12, align 8
  %174 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %173, i32 0, i32 4
  %175 = getelementptr inbounds [2 x double], [2 x double]* %174, i64 0, i64 0
  store double %172, double* %175, align 8
  %176 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %4, align 8
  %177 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %176, i32 0, i32 1
  %178 = load double, double* %177, align 8
  %179 = fmul double 5.000000e-01, %178
  %180 = load %struct.boundingboxStem*, %struct.boundingboxStem** %12, align 8
  %181 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %180, i32 0, i32 4
  %182 = getelementptr inbounds [2 x double], [2 x double]* %181, i64 0, i64 1
  store double %179, double* %182, align 8
  %183 = load %struct.configtree*, %struct.configtree** %3, align 8
  %184 = call signext i16 @isExterior(%struct.configtree* noundef %183)
  %185 = icmp ne i16 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %154
  store double 0x400921FB54442D18, double* %9, align 8
  br label %195

187:                                              ; preds = %154
  %188 = load %struct.configtree*, %struct.configtree** %3, align 8
  %189 = getelementptr inbounds %struct.configtree, %struct.configtree* %188, i32 0, i32 4
  %190 = load %struct.config*, %struct.config** %189, align 8
  %191 = load i32, i32* %10, align 4
  %192 = call double @getArcAngle(%struct.config* noundef %190, i32 noundef %191)
  %193 = load double, double* %9, align 8
  %194 = fadd double %193, %192
  store double %194, double* %9, align 8
  br label %195

195:                                              ; preds = %187, %186
  %196 = load %struct.configtree*, %struct.configtree** %3, align 8
  %197 = call signext i16 @isExterior(%struct.configtree* noundef %196)
  %198 = icmp ne i16 %197, 0
  br i1 %198, label %199, label %202

199:                                              ; preds = %195
  %200 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  store double 0.000000e+00, double* %200, align 16
  %201 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 1
  store double 1.000000e+00, double* %201, align 8
  br label %212

202:                                              ; preds = %195
  %203 = load double, double* %9, align 8
  %204 = fsub double %203, 0x400921FB54442D18
  store double %204, double* %18, align 8
  %205 = load %struct.configtree*, %struct.configtree** %3, align 8
  %206 = getelementptr inbounds %struct.configtree, %struct.configtree* %205, i32 0, i32 8
  %207 = load %struct.boundingboxStem*, %struct.boundingboxStem** %206, align 8
  %208 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %207, i32 0, i32 1
  %209 = getelementptr inbounds [2 x double], [2 x double]* %208, i64 0, i64 0
  %210 = load double, double* %18, align 8
  %211 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  call void @rotateVectorByAngle(double* noundef %209, double noundef %210, double* noundef %211)
  br label %212

212:                                              ; preds = %202, %199
  %213 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %214 = load double, double* %213, align 16
  %215 = load %struct.boundingboxStem*, %struct.boundingboxStem** %12, align 8
  %216 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %215, i32 0, i32 1
  %217 = getelementptr inbounds [2 x double], [2 x double]* %216, i64 0, i64 0
  store double %214, double* %217, align 8
  %218 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 1
  %219 = load double, double* %218, align 8
  %220 = load %struct.boundingboxStem*, %struct.boundingboxStem** %12, align 8
  %221 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %220, i32 0, i32 1
  %222 = getelementptr inbounds [2 x double], [2 x double]* %221, i64 0, i64 1
  store double %219, double* %222, align 8
  %223 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %224 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  call void @normal(double* noundef %223, double* noundef %224)
  %225 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  %226 = load double, double* %225, align 16
  %227 = fmul double %226, -1.000000e+00
  store double %227, double* %225, align 16
  %228 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 1
  %229 = load double, double* %228, align 8
  %230 = fmul double %229, -1.000000e+00
  store double %230, double* %228, align 8
  %231 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  %232 = load double, double* %231, align 16
  %233 = load %struct.boundingboxStem*, %struct.boundingboxStem** %12, align 8
  %234 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %233, i32 0, i32 2
  %235 = getelementptr inbounds [2 x double], [2 x double]* %234, i64 0, i64 0
  store double %232, double* %235, align 8
  %236 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 1
  %237 = load double, double* %236, align 8
  %238 = load %struct.boundingboxStem*, %struct.boundingboxStem** %12, align 8
  %239 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %238, i32 0, i32 2
  %240 = getelementptr inbounds [2 x double], [2 x double]* %239, i64 0, i64 1
  store double %237, double* %240, align 8
  store double 0.000000e+00, double* %20, align 8
  %241 = load %struct.configtree*, %struct.configtree** %3, align 8
  %242 = call signext i16 @isExterior(%struct.configtree* noundef %241)
  %243 = icmp ne i16 %242, 0
  br i1 %243, label %266, label %244

244:                                              ; preds = %212
  %245 = load %struct.configtree*, %struct.configtree** %3, align 8
  %246 = getelementptr inbounds %struct.configtree, %struct.configtree* %245, i32 0, i32 4
  %247 = load %struct.config*, %struct.config** %246, align 8
  %248 = getelementptr inbounds %struct.config, %struct.config* %247, i32 0, i32 0
  %249 = load double, double* %248, align 8
  %250 = load %struct.configtree*, %struct.configtree** %3, align 8
  %251 = getelementptr inbounds %struct.configtree, %struct.configtree* %250, i32 0, i32 4
  %252 = load %struct.config*, %struct.config** %251, align 8
  %253 = getelementptr inbounds %struct.config, %struct.config* %252, i32 0, i32 0
  %254 = load double, double* %253, align 8
  %255 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %4, align 8
  %256 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %255, i32 0, i32 1
  %257 = load double, double* %256, align 8
  %258 = fmul double 2.500000e-01, %257
  %259 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %4, align 8
  %260 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %259, i32 0, i32 1
  %261 = load double, double* %260, align 8
  %262 = fmul double %258, %261
  %263 = fneg double %262
  %264 = call double @llvm.fmuladd.f64(double %249, double %254, double %263)
  %265 = call double @sqrt(double noundef %264) #7
  store double %265, double* %20, align 8
  br label %266

266:                                              ; preds = %244, %212
  %267 = load double, double* %20, align 8
  %268 = load double, double* %16, align 8
  %269 = call double @llvm.fmuladd.f64(double 5.000000e-01, double %268, double %267)
  store double %269, double* %21, align 8
  %270 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %271 = load double, double* %270, align 16
  %272 = load double, double* %21, align 8
  %273 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %274 = load double, double* %273, align 16
  %275 = call double @llvm.fmuladd.f64(double %272, double %274, double %271)
  %276 = load %struct.boundingboxStem*, %struct.boundingboxStem** %12, align 8
  %277 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %276, i32 0, i32 3
  %278 = getelementptr inbounds [2 x double], [2 x double]* %277, i64 0, i64 0
  store double %275, double* %278, align 8
  %279 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 1
  %280 = load double, double* %279, align 8
  %281 = load double, double* %21, align 8
  %282 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 1
  %283 = load double, double* %282, align 8
  %284 = call double @llvm.fmuladd.f64(double %281, double %283, double %280)
  %285 = load %struct.boundingboxStem*, %struct.boundingboxStem** %12, align 8
  %286 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %285, i32 0, i32 3
  %287 = getelementptr inbounds [2 x double], [2 x double]* %286, i64 0, i64 1
  store double %284, double* %287, align 8
  %288 = load double, double* %16, align 8
  %289 = fcmp oeq double %288, 0.000000e+00
  br i1 %289, label %290, label %294

290:                                              ; preds = %266
  %291 = load %struct.boundingboxStem*, %struct.boundingboxStem** %12, align 8
  %292 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %291, i32 0, i32 4
  %293 = getelementptr inbounds [2 x double], [2 x double]* %292, i64 0, i64 0
  store double 0x3E7AD7F29ABCAF48, double* %293, align 8
  br label %294

294:                                              ; preds = %290, %266
  br label %295

295:                                              ; preds = %294
  %296 = load i32, i32* %10, align 4
  %297 = add nsw i32 %296, 1
  store i32 %297, i32* %10, align 4
  br label %125, !llvm.loop !12

298:                                              ; preds = %125
  store i32 0, i32* %22, align 4
  br label %299

299:                                              ; preds = %310, %298
  %300 = load i32, i32* %22, align 4
  %301 = load %struct.configtree*, %struct.configtree** %3, align 8
  %302 = getelementptr inbounds %struct.configtree, %struct.configtree* %301, i32 0, i32 3
  %303 = load i32, i32* %302, align 8
  %304 = icmp slt i32 %300, %303
  br i1 %304, label %305, label %313

305:                                              ; preds = %299
  %306 = load %struct.configtree*, %struct.configtree** %3, align 8
  %307 = load i32, i32* %22, align 4
  %308 = call %struct.configtree* @getChild(%struct.configtree* noundef %306, i32 noundef %307)
  %309 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %4, align 8
  call void @updateBoundingBoxes(%struct.configtree* noundef %308, %struct.vrna_plot_options_puzzler_t* noundef %309)
  br label %310

310:                                              ; preds = %305
  %311 = load i32, i32* %22, align 4
  %312 = add nsw i32 %311, 1
  store i32 %312, i32* %22, align 4
  br label %299, !llvm.loop !13

313:                                              ; preds = %299
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.configtree* @checkAndFixIntersections(%struct.configtree* noundef %0, i32 noundef %1, %struct.vrna_plot_options_puzzler_t* noundef %2) #0 {
  %4 = alloca %struct.configtree*, align 8
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i16, align 2
  %10 = alloca %struct.configtree*, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.configtree*, align 8
  %13 = alloca %struct.configtree*, align 8
  %14 = alloca i16, align 2
  %15 = alloca i16, align 2
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store i32 %1, i32* %6, align 4
  store %struct.vrna_plot_options_puzzler_t* %2, %struct.vrna_plot_options_puzzler_t** %7, align 8
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8** %8, align 8
  store i16 1, i16* %9, align 2
  br label %16

16:                                               ; preds = %107, %104, %3
  %17 = load i16, i16* %9, align 2
  %18 = icmp ne i16 %17, 0
  br i1 %18, label %19, label %108

19:                                               ; preds = %16
  store i16 0, i16* %9, align 2
  %20 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %7, align 8
  %21 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %20, i32 0, i32 3
  %22 = load i16, i16* %21, align 8
  %23 = sext i16 %22 to i32
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %38

25:                                               ; preds = %19
  %26 = load %struct.configtree*, %struct.configtree** %5, align 8
  %27 = call signext i16 @isExterior(%struct.configtree* noundef %26)
  %28 = icmp ne i16 %27, 0
  br i1 %28, label %38, label %29

29:                                               ; preds = %25
  %30 = load %struct.configtree*, %struct.configtree** %5, align 8
  %31 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %7, align 8
  %32 = call %struct.configtree* @checkNodeAgainstAncestors(%struct.configtree* noundef %30, %struct.vrna_plot_options_puzzler_t* noundef %31)
  store %struct.configtree* %32, %struct.configtree** %10, align 8
  %33 = load %struct.configtree*, %struct.configtree** %10, align 8
  %34 = icmp ne %struct.configtree* %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %29
  %36 = load %struct.configtree*, %struct.configtree** %10, align 8
  store %struct.configtree* %36, %struct.configtree** %4, align 8
  br label %149

37:                                               ; preds = %29
  br label %38

38:                                               ; preds = %37, %25, %19
  %39 = load i16, i16* %9, align 2
  %40 = icmp ne i16 %39, 0
  br i1 %40, label %80, label %41

41:                                               ; preds = %38
  store i32 0, i32* %11, align 4
  br label %42

42:                                               ; preds = %76, %41
  %43 = load i32, i32* %11, align 4
  %44 = load %struct.configtree*, %struct.configtree** %5, align 8
  %45 = getelementptr inbounds %struct.configtree, %struct.configtree* %44, i32 0, i32 3
  %46 = load i32, i32* %45, align 8
  %47 = icmp slt i32 %43, %46
  br i1 %47, label %48, label %79

48:                                               ; preds = %42
  %49 = load %struct.configtree*, %struct.configtree** %5, align 8
  %50 = load i32, i32* %11, align 4
  %51 = call %struct.configtree* @getChild(%struct.configtree* noundef %49, i32 noundef %50)
  store %struct.configtree* %51, %struct.configtree** %12, align 8
  %52 = load %struct.configtree*, %struct.configtree** %12, align 8
  %53 = load i32, i32* %6, align 4
  %54 = add nsw i32 %53, 1
  %55 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %7, align 8
  %56 = call %struct.configtree* @checkAndFixIntersections(%struct.configtree* noundef %52, i32 noundef %54, %struct.vrna_plot_options_puzzler_t* noundef %55)
  store %struct.configtree* %56, %struct.configtree** %13, align 8
  %57 = load %struct.configtree*, %struct.configtree** %13, align 8
  %58 = icmp ne %struct.configtree* %57, null
  br i1 %58, label %59, label %74

59:                                               ; preds = %48
  %60 = load %struct.configtree*, %struct.configtree** %13, align 8
  %61 = call i32 @getNodeID(%struct.configtree* noundef %60)
  %62 = load %struct.configtree*, %struct.configtree** %5, align 8
  %63 = call i32 @getNodeID(%struct.configtree* noundef %62)
  %64 = icmp slt i32 %61, %63
  br i1 %64, label %65, label %67

65:                                               ; preds = %59
  %66 = load %struct.configtree*, %struct.configtree** %13, align 8
  store %struct.configtree* %66, %struct.configtree** %4, align 8
  br label %149

67:                                               ; preds = %59
  %68 = load %struct.configtree*, %struct.configtree** %13, align 8
  %69 = load %struct.configtree*, %struct.configtree** %5, align 8
  %70 = icmp eq %struct.configtree* %68, %69
  br i1 %70, label %71, label %72

71:                                               ; preds = %67
  store i16 1, i16* %9, align 2
  br label %79

72:                                               ; preds = %67
  br label %73

73:                                               ; preds = %72
  br label %75

74:                                               ; preds = %48
  br label %75

75:                                               ; preds = %74, %73
  br label %76

76:                                               ; preds = %75
  %77 = load i32, i32* %11, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %11, align 4
  br label %42, !llvm.loop !14

79:                                               ; preds = %71, %42
  br label %80

80:                                               ; preds = %79, %38
  %81 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %7, align 8
  %82 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %81, i32 0, i32 4
  %83 = load i16, i16* %82, align 2
  %84 = sext i16 %83 to i32
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %86, label %107

86:                                               ; preds = %80
  %87 = load %struct.configtree*, %struct.configtree** %5, align 8
  %88 = call signext i16 @isExterior(%struct.configtree* noundef %87)
  %89 = icmp ne i16 %88, 0
  br i1 %89, label %107, label %90

90:                                               ; preds = %86
  %91 = load i16, i16* %9, align 2
  %92 = icmp ne i16 %91, 0
  br i1 %92, label %107, label %93

93:                                               ; preds = %90
  %94 = load %struct.configtree*, %struct.configtree** %5, align 8
  %95 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %7, align 8
  %96 = call signext i16 @checkSiblings(%struct.configtree* noundef %94, %struct.vrna_plot_options_puzzler_t* noundef %95)
  store i16 %96, i16* %14, align 2
  %97 = load i16, i16* %14, align 2
  %98 = sext i16 %97 to i32
  %99 = icmp slt i32 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %93
  store %struct.configtree* null, %struct.configtree** %4, align 8
  br label %149

101:                                              ; preds = %93
  %102 = load i16, i16* %14, align 2
  %103 = icmp ne i16 %102, 0
  br i1 %103, label %104, label %105

104:                                              ; preds = %101
  store i16 1, i16* %9, align 2
  br label %16, !llvm.loop !15

105:                                              ; preds = %101
  br label %106

106:                                              ; preds = %105
  br label %107

107:                                              ; preds = %106, %90, %86, %80
  br label %16, !llvm.loop !15

108:                                              ; preds = %16
  %109 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %7, align 8
  %110 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %109, i32 0, i32 7
  %111 = load i16, i16* %110, align 8
  %112 = icmp ne i16 %111, 0
  br i1 %112, label %113, label %148

113:                                              ; preds = %108
  store i16 0, i16* %15, align 2
  %114 = load %struct.configtree*, %struct.configtree** %5, align 8
  %115 = call signext i16 @isExterior(%struct.configtree* noundef %114)
  %116 = icmp ne i16 %115, 0
  br i1 %116, label %117, label %118

117:                                              ; preds = %113
  store i16 0, i16* %15, align 2
  br label %140

118:                                              ; preds = %113
  %119 = load %struct.configtree*, %struct.configtree** %5, align 8
  %120 = call %struct.configtree* @getParent(%struct.configtree* noundef %119)
  %121 = call signext i16 @isExterior(%struct.configtree* noundef %120)
  %122 = icmp ne i16 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %118
  store i16 1, i16* %15, align 2
  br label %139

124:                                              ; preds = %118
  %125 = load %struct.configtree*, %struct.configtree** %5, align 8
  %126 = getelementptr inbounds %struct.configtree, %struct.configtree* %125, i32 0, i32 4
  %127 = load %struct.config*, %struct.config** %126, align 8
  %128 = getelementptr inbounds %struct.config, %struct.config* %127, i32 0, i32 0
  %129 = load double, double* %128, align 8
  %130 = load %struct.configtree*, %struct.configtree** %5, align 8
  %131 = getelementptr inbounds %struct.configtree, %struct.configtree* %130, i32 0, i32 4
  %132 = load %struct.config*, %struct.config** %131, align 8
  %133 = getelementptr inbounds %struct.config, %struct.config* %132, i32 0, i32 2
  %134 = load double, double* %133, align 8
  %135 = fmul double 1.000000e+01, %134
  %136 = fcmp ogt double %129, %135
  br i1 %136, label %137, label %138

137:                                              ; preds = %124
  store i16 1, i16* %15, align 2
  br label %138

138:                                              ; preds = %137, %124
  br label %139

139:                                              ; preds = %138, %123
  br label %140

140:                                              ; preds = %139, %117
  %141 = load i16, i16* %15, align 2
  %142 = icmp ne i16 %141, 0
  br i1 %142, label %143, label %147

143:                                              ; preds = %140
  %144 = load %struct.configtree*, %struct.configtree** %5, align 8
  %145 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %7, align 8
  %146 = call double @optimizeTree(%struct.configtree* noundef %144, %struct.vrna_plot_options_puzzler_t* noundef %145)
  br label %147

147:                                              ; preds = %143, %140
  br label %148

148:                                              ; preds = %147, %108
  store %struct.configtree* null, %struct.configtree** %4, align 8
  br label %149

149:                                              ; preds = %148, %100, %65, %35
  %150 = load %struct.configtree*, %struct.configtree** %4, align 8
  ret %struct.configtree* %150
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @determineNucleotideCoordinates(%struct.configtree* noundef %0, i16* noundef %1, i16 noundef zeroext %2, double noundef %3, double noundef %4, double* noundef %5, double* noundef %6) #0 {
  %8 = alloca %struct.configtree*, align 8
  %9 = alloca i16*, align 8
  %10 = alloca i16, align 2
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double*, align 8
  %14 = alloca double*, align 8
  %15 = alloca %struct.boundingboxStem*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca [2 x double], align 16
  %24 = alloca [2 x double], align 16
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca %struct.config*, align 8
  %28 = alloca [2 x double], align 16
  %29 = alloca double, align 8
  %30 = alloca double, align 8
  %31 = alloca double, align 8
  %32 = alloca %struct.boundingboxStem*, align 8
  %33 = alloca %struct.configArc*, align 8
  %34 = alloca i32, align 4
  %35 = alloca double, align 8
  %36 = alloca double, align 8
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %8, align 8
  store i16* %1, i16** %9, align 8
  store i16 %2, i16* %10, align 2
  store double %3, double* %11, align 8
  store double %4, double* %12, align 8
  store double* %5, double** %13, align 8
  store double* %6, double** %14, align 8
  %43 = load i16, i16* %10, align 2
  %44 = zext i16 %43 to i32
  %45 = icmp slt i32 %44, 1
  br i1 %45, label %46, label %47

46:                                               ; preds = %7
  br label %715

47:                                               ; preds = %7
  %48 = load %struct.configtree*, %struct.configtree** %8, align 8
  %49 = getelementptr inbounds %struct.configtree, %struct.configtree* %48, i32 0, i32 6
  %50 = load i32, i32* %49, align 4
  %51 = icmp sge i32 %50, 1
  br i1 %51, label %52, label %500

52:                                               ; preds = %47
  %53 = load %struct.configtree*, %struct.configtree** %8, align 8
  %54 = getelementptr inbounds %struct.configtree, %struct.configtree* %53, i32 0, i32 8
  %55 = load %struct.boundingboxStem*, %struct.boundingboxStem** %54, align 8
  store %struct.boundingboxStem* %55, %struct.boundingboxStem** %15, align 8
  store i32 0, i32* %16, align 4
  store i32 0, i32* %17, align 4
  store i32 0, i32* %18, align 4
  store i32 0, i32* %19, align 4
  br label %56

56:                                               ; preds = %80, %52
  %57 = load i32, i32* %19, align 4
  %58 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %59 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %58, i32 0, i32 5
  %60 = load i32, i32* %59, align 8
  %61 = icmp slt i32 %57, %60
  br i1 %61, label %62, label %83

62:                                               ; preds = %56
  %63 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %64 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %63, i32 0, i32 7
  %65 = load double**, double*** %64, align 8
  %66 = load i32, i32* %19, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds double*, double** %65, i64 %67
  %69 = load double*, double** %68, align 8
  %70 = getelementptr inbounds double, double* %69, i64 0
  %71 = load double, double* %70, align 8
  %72 = fcmp olt double %71, 0.000000e+00
  br i1 %72, label %73, label %76

73:                                               ; preds = %62
  %74 = load i32, i32* %17, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %17, align 4
  br label %79

76:                                               ; preds = %62
  %77 = load i32, i32* %16, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %16, align 4
  br label %79

79:                                               ; preds = %76, %73
  br label %80

80:                                               ; preds = %79
  %81 = load i32, i32* %19, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %19, align 4
  br label %56, !llvm.loop !16

83:                                               ; preds = %56
  %84 = load %struct.configtree*, %struct.configtree** %8, align 8
  %85 = getelementptr inbounds %struct.configtree, %struct.configtree* %84, i32 0, i32 6
  %86 = load i32, i32* %85, align 4
  store i32 %86, i32* %20, align 4
  %87 = load %struct.configtree*, %struct.configtree** %8, align 8
  %88 = getelementptr inbounds %struct.configtree, %struct.configtree* %87, i32 0, i32 5
  %89 = load i32, i32* %88, align 8
  store i32 %89, i32* %21, align 4
  %90 = load i32, i32* %21, align 4
  %91 = load i32, i32* %20, align 4
  %92 = sub nsw i32 %90, %91
  %93 = load i32, i32* %16, align 4
  %94 = sub nsw i32 %92, %93
  store i32 %94, i32* %22, align 4
  %95 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  %96 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %97 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %96, i32 0, i32 3
  %98 = getelementptr inbounds [2 x double], [2 x double]* %97, i64 0, i64 0
  %99 = load double, double* %98, align 8
  %100 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %101 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %100, i32 0, i32 4
  %102 = getelementptr inbounds [2 x double], [2 x double]* %101, i64 0, i64 0
  %103 = load double, double* %102, align 8
  %104 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %105 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %104, i32 0, i32 1
  %106 = getelementptr inbounds [2 x double], [2 x double]* %105, i64 0, i64 0
  %107 = load double, double* %106, align 8
  %108 = fneg double %103
  %109 = call double @llvm.fmuladd.f64(double %108, double %107, double %99)
  %110 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %111 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %110, i32 0, i32 4
  %112 = getelementptr inbounds [2 x double], [2 x double]* %111, i64 0, i64 1
  %113 = load double, double* %112, align 8
  %114 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %115 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %114, i32 0, i32 2
  %116 = getelementptr inbounds [2 x double], [2 x double]* %115, i64 0, i64 0
  %117 = load double, double* %116, align 8
  %118 = call double @llvm.fmuladd.f64(double %113, double %117, double %109)
  store double %118, double* %95, align 8
  %119 = getelementptr inbounds double, double* %95, i64 1
  %120 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %121 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %120, i32 0, i32 3
  %122 = getelementptr inbounds [2 x double], [2 x double]* %121, i64 0, i64 1
  %123 = load double, double* %122, align 8
  %124 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %125 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %124, i32 0, i32 4
  %126 = getelementptr inbounds [2 x double], [2 x double]* %125, i64 0, i64 0
  %127 = load double, double* %126, align 8
  %128 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %129 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %128, i32 0, i32 1
  %130 = getelementptr inbounds [2 x double], [2 x double]* %129, i64 0, i64 1
  %131 = load double, double* %130, align 8
  %132 = fneg double %127
  %133 = call double @llvm.fmuladd.f64(double %132, double %131, double %123)
  %134 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %135 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %134, i32 0, i32 4
  %136 = getelementptr inbounds [2 x double], [2 x double]* %135, i64 0, i64 1
  %137 = load double, double* %136, align 8
  %138 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %139 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %138, i32 0, i32 2
  %140 = getelementptr inbounds [2 x double], [2 x double]* %139, i64 0, i64 1
  %141 = load double, double* %140, align 8
  %142 = call double @llvm.fmuladd.f64(double %137, double %141, double %133)
  store double %142, double* %119, align 8
  %143 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  %144 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %145 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %144, i32 0, i32 3
  %146 = getelementptr inbounds [2 x double], [2 x double]* %145, i64 0, i64 0
  %147 = load double, double* %146, align 8
  %148 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %149 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %148, i32 0, i32 4
  %150 = getelementptr inbounds [2 x double], [2 x double]* %149, i64 0, i64 0
  %151 = load double, double* %150, align 8
  %152 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %153 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %152, i32 0, i32 1
  %154 = getelementptr inbounds [2 x double], [2 x double]* %153, i64 0, i64 0
  %155 = load double, double* %154, align 8
  %156 = call double @llvm.fmuladd.f64(double %151, double %155, double %147)
  %157 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %158 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %157, i32 0, i32 4
  %159 = getelementptr inbounds [2 x double], [2 x double]* %158, i64 0, i64 1
  %160 = load double, double* %159, align 8
  %161 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %162 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %161, i32 0, i32 2
  %163 = getelementptr inbounds [2 x double], [2 x double]* %162, i64 0, i64 0
  %164 = load double, double* %163, align 8
  %165 = call double @llvm.fmuladd.f64(double %160, double %164, double %156)
  store double %165, double* %143, align 8
  %166 = getelementptr inbounds double, double* %143, i64 1
  %167 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %168 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %167, i32 0, i32 3
  %169 = getelementptr inbounds [2 x double], [2 x double]* %168, i64 0, i64 1
  %170 = load double, double* %169, align 8
  %171 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %172 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %171, i32 0, i32 4
  %173 = getelementptr inbounds [2 x double], [2 x double]* %172, i64 0, i64 0
  %174 = load double, double* %173, align 8
  %175 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %176 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %175, i32 0, i32 1
  %177 = getelementptr inbounds [2 x double], [2 x double]* %176, i64 0, i64 1
  %178 = load double, double* %177, align 8
  %179 = call double @llvm.fmuladd.f64(double %174, double %178, double %170)
  %180 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %181 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %180, i32 0, i32 4
  %182 = getelementptr inbounds [2 x double], [2 x double]* %181, i64 0, i64 1
  %183 = load double, double* %182, align 8
  %184 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %185 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %184, i32 0, i32 2
  %186 = getelementptr inbounds [2 x double], [2 x double]* %185, i64 0, i64 1
  %187 = load double, double* %186, align 8
  %188 = call double @llvm.fmuladd.f64(double %183, double %187, double %179)
  store double %188, double* %166, align 8
  %189 = load i32, i32* %20, align 4
  store i32 %189, i32* %25, align 4
  br label %190

190:                                              ; preds = %265, %83
  %191 = load i32, i32* %25, align 4
  %192 = load i32, i32* %21, align 4
  %193 = icmp slt i32 %191, %192
  br i1 %193, label %194, label %268

194:                                              ; preds = %190
  %195 = load i16*, i16** %9, align 8
  %196 = load i32, i32* %25, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i16, i16* %195, i64 %197
  %199 = load i16, i16* %198, align 2
  %200 = sext i16 %199 to i32
  %201 = icmp eq i32 %200, 0
  br i1 %201, label %202, label %217

202:                                              ; preds = %194
  %203 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %204 = load i32, i32* %18, align 4
  %205 = load double*, double** %13, align 8
  %206 = load i32, i32* %25, align 4
  %207 = sub nsw i32 %206, 1
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds double, double* %205, i64 %208
  %210 = load double*, double** %14, align 8
  %211 = load i32, i32* %25, align 4
  %212 = sub nsw i32 %211, 1
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds double, double* %210, i64 %213
  call void @getBulgeXY(%struct.boundingboxStem* noundef %203, i32 noundef %204, double* noundef %209, double* noundef %214)
  %215 = load i32, i32* %18, align 4
  %216 = add nsw i32 %215, 1
  store i32 %216, i32* %18, align 4
  br label %264

217:                                              ; preds = %194
  %218 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  %219 = load double, double* %218, align 16
  %220 = load i32, i32* %25, align 4
  %221 = load i32, i32* %20, align 4
  %222 = sub nsw i32 %220, %221
  %223 = load i32, i32* %18, align 4
  %224 = sub nsw i32 %222, %223
  %225 = sitofp i32 %224 to double
  %226 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  %227 = load double, double* %226, align 16
  %228 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  %229 = load double, double* %228, align 16
  %230 = fsub double %227, %229
  %231 = fmul double %225, %230
  %232 = load i32, i32* %22, align 4
  %233 = sitofp i32 %232 to double
  %234 = fdiv double %231, %233
  %235 = fadd double %219, %234
  %236 = load double*, double** %13, align 8
  %237 = load i32, i32* %25, align 4
  %238 = sub nsw i32 %237, 1
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds double, double* %236, i64 %239
  store double %235, double* %240, align 8
  %241 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 1
  %242 = load double, double* %241, align 8
  %243 = load i32, i32* %25, align 4
  %244 = load i32, i32* %20, align 4
  %245 = sub nsw i32 %243, %244
  %246 = load i32, i32* %18, align 4
  %247 = sub nsw i32 %245, %246
  %248 = sitofp i32 %247 to double
  %249 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 1
  %250 = load double, double* %249, align 8
  %251 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 1
  %252 = load double, double* %251, align 8
  %253 = fsub double %250, %252
  %254 = fmul double %248, %253
  %255 = load i32, i32* %22, align 4
  %256 = sitofp i32 %255 to double
  %257 = fdiv double %254, %256
  %258 = fadd double %242, %257
  %259 = load double*, double** %14, align 8
  %260 = load i32, i32* %25, align 4
  %261 = sub nsw i32 %260, 1
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds double, double* %259, i64 %262
  store double %258, double* %263, align 8
  br label %264

264:                                              ; preds = %217, %202
  br label %265

265:                                              ; preds = %264
  %266 = load i32, i32* %25, align 4
  %267 = add nsw i32 %266, 1
  store i32 %267, i32* %25, align 4
  br label %190, !llvm.loop !17

268:                                              ; preds = %190
  %269 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  %270 = load double, double* %269, align 16
  %271 = load double*, double** %13, align 8
  %272 = load i32, i32* %21, align 4
  %273 = sub nsw i32 %272, 1
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds double, double* %271, i64 %274
  store double %270, double* %275, align 8
  %276 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 1
  %277 = load double, double* %276, align 8
  %278 = load double*, double** %14, align 8
  %279 = load i32, i32* %21, align 4
  %280 = sub nsw i32 %279, 1
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds double, double* %278, i64 %281
  store double %277, double* %282, align 8
  %283 = load i16*, i16** %9, align 8
  %284 = load %struct.configtree*, %struct.configtree** %8, align 8
  %285 = getelementptr inbounds %struct.configtree, %struct.configtree* %284, i32 0, i32 5
  %286 = load i32, i32* %285, align 8
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds i16, i16* %283, i64 %287
  %289 = load i16, i16* %288, align 2
  %290 = sext i16 %289 to i32
  store i32 %290, i32* %20, align 4
  %291 = load i16*, i16** %9, align 8
  %292 = load %struct.configtree*, %struct.configtree** %8, align 8
  %293 = getelementptr inbounds %struct.configtree, %struct.configtree* %292, i32 0, i32 6
  %294 = load i32, i32* %293, align 4
  %295 = sext i32 %294 to i64
  %296 = getelementptr inbounds i16, i16* %291, i64 %295
  %297 = load i16, i16* %296, align 2
  %298 = sext i16 %297 to i32
  store i32 %298, i32* %21, align 4
  %299 = load i32, i32* %21, align 4
  %300 = load i32, i32* %20, align 4
  %301 = sub nsw i32 %299, %300
  %302 = load i32, i32* %17, align 4
  %303 = sub nsw i32 %301, %302
  store i32 %303, i32* %22, align 4
  %304 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %305 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %304, i32 0, i32 3
  %306 = getelementptr inbounds [2 x double], [2 x double]* %305, i64 0, i64 0
  %307 = load double, double* %306, align 8
  %308 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %309 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %308, i32 0, i32 4
  %310 = getelementptr inbounds [2 x double], [2 x double]* %309, i64 0, i64 0
  %311 = load double, double* %310, align 8
  %312 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %313 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %312, i32 0, i32 1
  %314 = getelementptr inbounds [2 x double], [2 x double]* %313, i64 0, i64 0
  %315 = load double, double* %314, align 8
  %316 = call double @llvm.fmuladd.f64(double %311, double %315, double %307)
  %317 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %318 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %317, i32 0, i32 4
  %319 = getelementptr inbounds [2 x double], [2 x double]* %318, i64 0, i64 1
  %320 = load double, double* %319, align 8
  %321 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %322 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %321, i32 0, i32 2
  %323 = getelementptr inbounds [2 x double], [2 x double]* %322, i64 0, i64 0
  %324 = load double, double* %323, align 8
  %325 = fneg double %320
  %326 = call double @llvm.fmuladd.f64(double %325, double %324, double %316)
  %327 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  store double %326, double* %327, align 16
  %328 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %329 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %328, i32 0, i32 3
  %330 = getelementptr inbounds [2 x double], [2 x double]* %329, i64 0, i64 1
  %331 = load double, double* %330, align 8
  %332 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %333 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %332, i32 0, i32 4
  %334 = getelementptr inbounds [2 x double], [2 x double]* %333, i64 0, i64 0
  %335 = load double, double* %334, align 8
  %336 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %337 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %336, i32 0, i32 1
  %338 = getelementptr inbounds [2 x double], [2 x double]* %337, i64 0, i64 1
  %339 = load double, double* %338, align 8
  %340 = call double @llvm.fmuladd.f64(double %335, double %339, double %331)
  %341 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %342 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %341, i32 0, i32 4
  %343 = getelementptr inbounds [2 x double], [2 x double]* %342, i64 0, i64 1
  %344 = load double, double* %343, align 8
  %345 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %346 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %345, i32 0, i32 2
  %347 = getelementptr inbounds [2 x double], [2 x double]* %346, i64 0, i64 1
  %348 = load double, double* %347, align 8
  %349 = fneg double %344
  %350 = call double @llvm.fmuladd.f64(double %349, double %348, double %340)
  %351 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 1
  store double %350, double* %351, align 8
  %352 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %353 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %352, i32 0, i32 3
  %354 = getelementptr inbounds [2 x double], [2 x double]* %353, i64 0, i64 0
  %355 = load double, double* %354, align 8
  %356 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %357 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %356, i32 0, i32 4
  %358 = getelementptr inbounds [2 x double], [2 x double]* %357, i64 0, i64 0
  %359 = load double, double* %358, align 8
  %360 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %361 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %360, i32 0, i32 1
  %362 = getelementptr inbounds [2 x double], [2 x double]* %361, i64 0, i64 0
  %363 = load double, double* %362, align 8
  %364 = fneg double %359
  %365 = call double @llvm.fmuladd.f64(double %364, double %363, double %355)
  %366 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %367 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %366, i32 0, i32 4
  %368 = getelementptr inbounds [2 x double], [2 x double]* %367, i64 0, i64 1
  %369 = load double, double* %368, align 8
  %370 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %371 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %370, i32 0, i32 2
  %372 = getelementptr inbounds [2 x double], [2 x double]* %371, i64 0, i64 0
  %373 = load double, double* %372, align 8
  %374 = fneg double %369
  %375 = call double @llvm.fmuladd.f64(double %374, double %373, double %365)
  %376 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  store double %375, double* %376, align 16
  %377 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %378 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %377, i32 0, i32 3
  %379 = getelementptr inbounds [2 x double], [2 x double]* %378, i64 0, i64 1
  %380 = load double, double* %379, align 8
  %381 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %382 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %381, i32 0, i32 4
  %383 = getelementptr inbounds [2 x double], [2 x double]* %382, i64 0, i64 0
  %384 = load double, double* %383, align 8
  %385 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %386 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %385, i32 0, i32 1
  %387 = getelementptr inbounds [2 x double], [2 x double]* %386, i64 0, i64 1
  %388 = load double, double* %387, align 8
  %389 = fneg double %384
  %390 = call double @llvm.fmuladd.f64(double %389, double %388, double %380)
  %391 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %392 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %391, i32 0, i32 4
  %393 = getelementptr inbounds [2 x double], [2 x double]* %392, i64 0, i64 1
  %394 = load double, double* %393, align 8
  %395 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %396 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %395, i32 0, i32 2
  %397 = getelementptr inbounds [2 x double], [2 x double]* %396, i64 0, i64 1
  %398 = load double, double* %397, align 8
  %399 = fneg double %394
  %400 = call double @llvm.fmuladd.f64(double %399, double %398, double %390)
  %401 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 1
  store double %400, double* %401, align 8
  %402 = load i32, i32* %20, align 4
  store i32 %402, i32* %26, align 4
  br label %403

403:                                              ; preds = %482, %268
  %404 = load i32, i32* %26, align 4
  %405 = load i32, i32* %21, align 4
  %406 = icmp slt i32 %404, %405
  br i1 %406, label %407, label %485

407:                                              ; preds = %403
  %408 = load i16*, i16** %9, align 8
  %409 = load i32, i32* %26, align 4
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds i16, i16* %408, i64 %410
  %412 = load i16, i16* %411, align 2
  %413 = sext i16 %412 to i32
  %414 = icmp eq i32 %413, 0
  br i1 %414, label %415, label %430

415:                                              ; preds = %407
  %416 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %417 = load i32, i32* %18, align 4
  %418 = load double*, double** %13, align 8
  %419 = load i32, i32* %26, align 4
  %420 = sub nsw i32 %419, 1
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds double, double* %418, i64 %421
  %423 = load double*, double** %14, align 8
  %424 = load i32, i32* %26, align 4
  %425 = sub nsw i32 %424, 1
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds double, double* %423, i64 %426
  call void @getBulgeXY(%struct.boundingboxStem* noundef %416, i32 noundef %417, double* noundef %422, double* noundef %427)
  %428 = load i32, i32* %18, align 4
  %429 = add nsw i32 %428, 1
  store i32 %429, i32* %18, align 4
  br label %481

430:                                              ; preds = %407
  %431 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  %432 = load double, double* %431, align 16
  %433 = load i32, i32* %26, align 4
  %434 = load i32, i32* %20, align 4
  %435 = sub nsw i32 %433, %434
  %436 = load i32, i32* %18, align 4
  %437 = sub nsw i32 %435, %436
  %438 = load i32, i32* %16, align 4
  %439 = add nsw i32 %437, %438
  %440 = sitofp i32 %439 to double
  %441 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  %442 = load double, double* %441, align 16
  %443 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  %444 = load double, double* %443, align 16
  %445 = fsub double %442, %444
  %446 = fmul double %440, %445
  %447 = load i32, i32* %22, align 4
  %448 = sitofp i32 %447 to double
  %449 = fdiv double %446, %448
  %450 = fadd double %432, %449
  %451 = load double*, double** %13, align 8
  %452 = load i32, i32* %26, align 4
  %453 = sub nsw i32 %452, 1
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds double, double* %451, i64 %454
  store double %450, double* %455, align 8
  %456 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 1
  %457 = load double, double* %456, align 8
  %458 = load i32, i32* %26, align 4
  %459 = load i32, i32* %20, align 4
  %460 = sub nsw i32 %458, %459
  %461 = load i32, i32* %18, align 4
  %462 = sub nsw i32 %460, %461
  %463 = load i32, i32* %16, align 4
  %464 = add nsw i32 %462, %463
  %465 = sitofp i32 %464 to double
  %466 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 1
  %467 = load double, double* %466, align 8
  %468 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 1
  %469 = load double, double* %468, align 8
  %470 = fsub double %467, %469
  %471 = fmul double %465, %470
  %472 = load i32, i32* %22, align 4
  %473 = sitofp i32 %472 to double
  %474 = fdiv double %471, %473
  %475 = fadd double %457, %474
  %476 = load double*, double** %14, align 8
  %477 = load i32, i32* %26, align 4
  %478 = sub nsw i32 %477, 1
  %479 = sext i32 %478 to i64
  %480 = getelementptr inbounds double, double* %476, i64 %479
  store double %475, double* %480, align 8
  br label %481

481:                                              ; preds = %430, %415
  br label %482

482:                                              ; preds = %481
  %483 = load i32, i32* %26, align 4
  %484 = add nsw i32 %483, 1
  store i32 %484, i32* %26, align 4
  br label %403, !llvm.loop !18

485:                                              ; preds = %403
  %486 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  %487 = load double, double* %486, align 16
  %488 = load double*, double** %13, align 8
  %489 = load i32, i32* %21, align 4
  %490 = sub nsw i32 %489, 1
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds double, double* %488, i64 %491
  store double %487, double* %492, align 8
  %493 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 1
  %494 = load double, double* %493, align 8
  %495 = load double*, double** %14, align 8
  %496 = load i32, i32* %21, align 4
  %497 = sub nsw i32 %496, 1
  %498 = sext i32 %497 to i64
  %499 = getelementptr inbounds double, double* %495, i64 %498
  store double %494, double* %499, align 8
  br label %500

500:                                              ; preds = %485, %47
  %501 = load %struct.configtree*, %struct.configtree** %8, align 8
  %502 = getelementptr inbounds %struct.configtree, %struct.configtree* %501, i32 0, i32 4
  %503 = load %struct.config*, %struct.config** %502, align 8
  store %struct.config* %503, %struct.config** %27, align 8
  %504 = load %struct.config*, %struct.config** %27, align 8
  %505 = icmp ne %struct.config* %504, null
  br i1 %505, label %506, label %628

506:                                              ; preds = %500
  %507 = getelementptr inbounds [2 x double], [2 x double]* %28, i64 0, i64 0
  %508 = load %struct.configtree*, %struct.configtree** %8, align 8
  %509 = getelementptr inbounds %struct.configtree, %struct.configtree* %508, i32 0, i32 7
  %510 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %509, align 8
  %511 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %510, i32 0, i32 1
  %512 = getelementptr inbounds [2 x double], [2 x double]* %511, i64 0, i64 0
  %513 = load double, double* %512, align 8
  store double %513, double* %507, align 8
  %514 = getelementptr inbounds double, double* %507, i64 1
  %515 = load %struct.configtree*, %struct.configtree** %8, align 8
  %516 = getelementptr inbounds %struct.configtree, %struct.configtree* %515, i32 0, i32 7
  %517 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %516, align 8
  %518 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %517, i32 0, i32 1
  %519 = getelementptr inbounds [2 x double], [2 x double]* %518, i64 0, i64 1
  %520 = load double, double* %519, align 8
  store double %520, double* %514, align 8
  %521 = load %struct.config*, %struct.config** %27, align 8
  %522 = getelementptr inbounds %struct.config, %struct.config* %521, i32 0, i32 0
  %523 = load double, double* %522, align 8
  store double %523, double* %29, align 8
  %524 = load double, double* %29, align 8
  %525 = load double, double* %12, align 8
  %526 = call double @distanceToAngle(double noundef %524, double noundef %525)
  store double %526, double* %30, align 8
  store double 0.000000e+00, double* %31, align 8
  %527 = load %struct.configtree*, %struct.configtree** %8, align 8
  %528 = getelementptr inbounds %struct.configtree, %struct.configtree* %527, i32 0, i32 8
  %529 = load %struct.boundingboxStem*, %struct.boundingboxStem** %528, align 8
  store %struct.boundingboxStem* %529, %struct.boundingboxStem** %32, align 8
  %530 = load %struct.boundingboxStem*, %struct.boundingboxStem** %32, align 8
  %531 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %530, i32 0, i32 3
  %532 = getelementptr inbounds [2 x double], [2 x double]* %531, i64 0, i64 1
  %533 = load double, double* %532, align 8
  %534 = getelementptr inbounds [2 x double], [2 x double]* %28, i64 0, i64 1
  %535 = load double, double* %534, align 8
  %536 = fsub double %533, %535
  %537 = load %struct.boundingboxStem*, %struct.boundingboxStem** %32, align 8
  %538 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %537, i32 0, i32 3
  %539 = getelementptr inbounds [2 x double], [2 x double]* %538, i64 0, i64 0
  %540 = load double, double* %539, align 8
  %541 = getelementptr inbounds [2 x double], [2 x double]* %28, i64 0, i64 0
  %542 = load double, double* %541, align 16
  %543 = fsub double %540, %542
  %544 = call double @atan2(double noundef %536, double noundef %543) #7
  store double %544, double* %31, align 8
  %545 = load double, double* %30, align 8
  %546 = fdiv double %545, 2.000000e+00
  %547 = load double, double* %31, align 8
  %548 = fsub double %547, %546
  store double %548, double* %31, align 8
  store %struct.configArc* null, %struct.configArc** %33, align 8
  %549 = load %struct.configtree*, %struct.configtree** %8, align 8
  %550 = getelementptr inbounds %struct.configtree, %struct.configtree* %549, i32 0, i32 5
  %551 = load i32, i32* %550, align 8
  store i32 %551, i32* %34, align 4
  %552 = load double, double* %31, align 8
  store double %552, double* %35, align 8
  store double 0.000000e+00, double* %36, align 8
  store i32 0, i32* %37, align 4
  store i32 0, i32* %38, align 4
  br label %553

553:                                              ; preds = %624, %506
  %554 = load i32, i32* %38, align 4
  %555 = load %struct.config*, %struct.config** %27, align 8
  %556 = getelementptr inbounds %struct.config, %struct.config* %555, i32 0, i32 4
  %557 = load i32, i32* %556, align 8
  %558 = icmp slt i32 %554, %557
  br i1 %558, label %559, label %627

559:                                              ; preds = %553
  %560 = load %struct.config*, %struct.config** %27, align 8
  %561 = getelementptr inbounds %struct.config, %struct.config* %560, i32 0, i32 3
  %562 = load %struct.configArc*, %struct.configArc** %561, align 8
  %563 = load i32, i32* %38, align 4
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds %struct.configArc, %struct.configArc* %562, i64 %564
  store %struct.configArc* %565, %struct.configArc** %33, align 8
  %566 = load %struct.configArc*, %struct.configArc** %33, align 8
  %567 = getelementptr inbounds %struct.configArc, %struct.configArc* %566, i32 0, i32 0
  %568 = load i32, i32* %567, align 8
  store i32 %568, i32* %37, align 4
  %569 = load %struct.configArc*, %struct.configArc** %33, align 8
  %570 = getelementptr inbounds %struct.configArc, %struct.configArc* %569, i32 0, i32 1
  %571 = load double, double* %570, align 8
  store double %571, double* %36, align 8
  store i32 1, i32* %39, align 4
  br label %572

572:                                              ; preds = %610, %559
  %573 = load i32, i32* %39, align 4
  %574 = load i32, i32* %37, align 4
  %575 = icmp slt i32 %573, %574
  br i1 %575, label %576, label %613

576:                                              ; preds = %572
  %577 = load double, double* %31, align 8
  %578 = load i32, i32* %39, align 4
  %579 = sitofp i32 %578 to double
  %580 = load double, double* %36, align 8
  %581 = load double, double* %30, align 8
  %582 = fsub double %580, %581
  %583 = load i32, i32* %37, align 4
  %584 = sitofp i32 %583 to double
  %585 = fdiv double %582, %584
  %586 = fneg double %579
  %587 = call double @llvm.fmuladd.f64(double %586, double %585, double %577)
  store double %587, double* %35, align 8
  %588 = getelementptr inbounds [2 x double], [2 x double]* %28, i64 0, i64 0
  %589 = load double, double* %588, align 16
  %590 = load double, double* %29, align 8
  %591 = load double, double* %35, align 8
  %592 = call double @cos(double noundef %591) #7
  %593 = call double @llvm.fmuladd.f64(double %590, double %592, double %589)
  %594 = load double*, double** %13, align 8
  %595 = load i32, i32* %34, align 4
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds double, double* %594, i64 %596
  store double %593, double* %597, align 8
  %598 = getelementptr inbounds [2 x double], [2 x double]* %28, i64 0, i64 1
  %599 = load double, double* %598, align 8
  %600 = load double, double* %29, align 8
  %601 = load double, double* %35, align 8
  %602 = call double @sin(double noundef %601) #7
  %603 = call double @llvm.fmuladd.f64(double %600, double %602, double %599)
  %604 = load double*, double** %14, align 8
  %605 = load i32, i32* %34, align 4
  %606 = sext i32 %605 to i64
  %607 = getelementptr inbounds double, double* %604, i64 %606
  store double %603, double* %607, align 8
  %608 = load i32, i32* %34, align 4
  %609 = add nsw i32 %608, 1
  store i32 %609, i32* %34, align 4
  br label %610

610:                                              ; preds = %576
  %611 = load i32, i32* %39, align 4
  %612 = add nsw i32 %611, 1
  store i32 %612, i32* %39, align 4
  br label %572, !llvm.loop !19

613:                                              ; preds = %572
  %614 = load i16*, i16** %9, align 8
  %615 = load i32, i32* %34, align 4
  %616 = add nsw i32 %615, 1
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds i16, i16* %614, i64 %617
  %619 = load i16, i16* %618, align 2
  %620 = sext i16 %619 to i32
  store i32 %620, i32* %34, align 4
  %621 = load double, double* %36, align 8
  %622 = load double, double* %31, align 8
  %623 = fsub double %622, %621
  store double %623, double* %31, align 8
  br label %624

624:                                              ; preds = %613
  %625 = load i32, i32* %38, align 4
  %626 = add nsw i32 %625, 1
  store i32 %626, i32* %38, align 4
  br label %553, !llvm.loop !20

627:                                              ; preds = %553
  br label %628

628:                                              ; preds = %627, %500
  store i32 0, i32* %40, align 4
  br label %629

629:                                              ; preds = %649, %628
  %630 = load i32, i32* %40, align 4
  %631 = load %struct.configtree*, %struct.configtree** %8, align 8
  %632 = getelementptr inbounds %struct.configtree, %struct.configtree* %631, i32 0, i32 3
  %633 = load i32, i32* %632, align 8
  %634 = icmp slt i32 %630, %633
  br i1 %634, label %635, label %652

635:                                              ; preds = %629
  %636 = load %struct.configtree*, %struct.configtree** %8, align 8
  %637 = getelementptr inbounds %struct.configtree, %struct.configtree* %636, i32 0, i32 2
  %638 = load %struct.configtree**, %struct.configtree*** %637, align 8
  %639 = load i32, i32* %40, align 4
  %640 = sext i32 %639 to i64
  %641 = getelementptr inbounds %struct.configtree*, %struct.configtree** %638, i64 %640
  %642 = load %struct.configtree*, %struct.configtree** %641, align 8
  %643 = load i16*, i16** %9, align 8
  %644 = load i16, i16* %10, align 2
  %645 = load double, double* %11, align 8
  %646 = load double, double* %12, align 8
  %647 = load double*, double** %13, align 8
  %648 = load double*, double** %14, align 8
  call void @determineNucleotideCoordinates(%struct.configtree* noundef %642, i16* noundef %643, i16 noundef zeroext %644, double noundef %645, double noundef %646, double* noundef %647, double* noundef %648)
  br label %649

649:                                              ; preds = %635
  %650 = load i32, i32* %40, align 4
  %651 = add nsw i32 %650, 1
  store i32 %651, i32* %40, align 4
  br label %629, !llvm.loop !21

652:                                              ; preds = %629
  %653 = load double*, double** %13, align 8
  %654 = getelementptr inbounds double, double* %653, i64 0
  store double 1.000000e+02, double* %654, align 8
  %655 = load double*, double** %14, align 8
  %656 = getelementptr inbounds double, double* %655, i64 0
  store double 1.000000e+02, double* %656, align 8
  store i32 1, i32* %41, align 4
  %657 = load i16*, i16** %9, align 8
  %658 = getelementptr inbounds i16, i16* %657, i64 1
  %659 = load i16, i16* %658, align 2
  %660 = sext i16 %659 to i32
  %661 = icmp ne i32 %660, 0
  br i1 %661, label %662, label %668

662:                                              ; preds = %652
  %663 = load i16*, i16** %9, align 8
  %664 = getelementptr inbounds i16, i16* %663, i64 1
  %665 = load i16, i16* %664, align 2
  %666 = sext i16 %665 to i32
  %667 = add nsw i32 %666, 1
  store i32 %667, i32* %41, align 4
  br label %669

668:                                              ; preds = %652
  store i32 2, i32* %41, align 4
  br label %669

669:                                              ; preds = %668, %662
  %670 = load i32, i32* %41, align 4
  store i32 %670, i32* %42, align 4
  br label %671

671:                                              ; preds = %711, %669
  %672 = load i32, i32* %42, align 4
  %673 = load i16, i16* %10, align 2
  %674 = zext i16 %673 to i32
  %675 = icmp sle i32 %672, %674
  br i1 %675, label %676, label %714

676:                                              ; preds = %671
  %677 = load i16*, i16** %9, align 8
  %678 = load i32, i32* %42, align 4
  %679 = sext i32 %678 to i64
  %680 = getelementptr inbounds i16, i16* %677, i64 %679
  %681 = load i16, i16* %680, align 2
  %682 = sext i16 %681 to i32
  %683 = icmp eq i32 %682, 0
  br i1 %683, label %684, label %703

684:                                              ; preds = %676
  %685 = load double*, double** %13, align 8
  %686 = load i32, i32* %42, align 4
  %687 = sub nsw i32 %686, 2
  %688 = sext i32 %687 to i64
  %689 = getelementptr inbounds double, double* %685, i64 %688
  %690 = load double, double* %689, align 8
  %691 = load double, double* %11, align 8
  %692 = fadd double %690, %691
  %693 = load double*, double** %13, align 8
  %694 = load i32, i32* %42, align 4
  %695 = sub nsw i32 %694, 1
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds double, double* %693, i64 %696
  store double %692, double* %697, align 8
  %698 = load double*, double** %14, align 8
  %699 = load i32, i32* %42, align 4
  %700 = sub nsw i32 %699, 1
  %701 = sext i32 %700 to i64
  %702 = getelementptr inbounds double, double* %698, i64 %701
  store double 1.000000e+02, double* %702, align 8
  br label %710

703:                                              ; preds = %676
  %704 = load i16*, i16** %9, align 8
  %705 = load i32, i32* %42, align 4
  %706 = sext i32 %705 to i64
  %707 = getelementptr inbounds i16, i16* %704, i64 %706
  %708 = load i16, i16* %707, align 2
  %709 = sext i16 %708 to i32
  store i32 %709, i32* %42, align 4
  br label %710

710:                                              ; preds = %703, %684
  br label %711

711:                                              ; preds = %710
  %712 = load i32, i32* %42, align 4
  %713 = add nsw i32 %712, 1
  store i32 %713, i32* %42, align 4
  br label %671, !llvm.loop !22

714:                                              ; preds = %671
  br label %715

715:                                              ; preds = %714, %46
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @resolveExteriorChildrenIntersectionXY(%struct.configtree* noundef %0, i16* noundef %1, double noundef %2, i16 noundef signext %3, double* noundef %4, double* noundef %5) #0 {
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca i16*, align 8
  %9 = alloca double, align 8
  %10 = alloca i16, align 2
  %11 = alloca double*, align 8
  %12 = alloca double*, align 8
  %13 = alloca i32, align 4
  %14 = alloca %struct.configtree**, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca double*, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32*, align 8
  %23 = alloca i32*, align 8
  %24 = alloca double, align 8
  %25 = alloca double, align 8
  %26 = alloca i32, align 4
  %27 = alloca [2 x double], align 16
  %28 = alloca i16, align 2
  %29 = alloca i16, align 2
  %30 = alloca i16, align 2
  %31 = alloca double, align 8
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca [2 x double], align 16
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca double, align 8
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca double, align 8
  %45 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %7, align 8
  store i16* %1, i16** %8, align 8
  store double %2, double* %9, align 8
  store i16 %3, i16* %10, align 2
  store double* %4, double** %11, align 8
  store double* %5, double** %12, align 8
  %46 = load %struct.configtree*, %struct.configtree** %7, align 8
  %47 = getelementptr inbounds %struct.configtree, %struct.configtree* %46, i32 0, i32 3
  %48 = load i32, i32* %47, align 8
  store i32 %48, i32* %13, align 4
  %49 = load i32, i32* %13, align 4
  %50 = icmp slt i32 %49, 2
  br i1 %50, label %51, label %52

51:                                               ; preds = %6
  br label %555

52:                                               ; preds = %6
  %53 = load i32, i32* %13, align 4
  %54 = sext i32 %53 to i64
  %55 = mul i64 %54, 8
  %56 = trunc i64 %55 to i32
  %57 = call i8* @vrna_alloc(i32 noundef %56)
  %58 = bitcast i8* %57 to %struct.configtree**
  store %struct.configtree** %58, %struct.configtree*** %14, align 8
  store i32 0, i32* %15, align 4
  br label %59

59:                                               ; preds = %71, %52
  %60 = load i32, i32* %15, align 4
  %61 = load i32, i32* %13, align 4
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %63, label %74

63:                                               ; preds = %59
  %64 = load %struct.configtree*, %struct.configtree** %7, align 8
  %65 = load i32, i32* %15, align 4
  %66 = call %struct.configtree* @getChild(%struct.configtree* noundef %64, i32 noundef %65)
  %67 = load %struct.configtree**, %struct.configtree*** %14, align 8
  %68 = load i32, i32* %15, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %struct.configtree*, %struct.configtree** %67, i64 %69
  store %struct.configtree* %66, %struct.configtree** %70, align 8
  br label %71

71:                                               ; preds = %63
  %72 = load i32, i32* %15, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %15, align 4
  br label %59, !llvm.loop !23

74:                                               ; preds = %59
  %75 = load i32, i32* %13, align 4
  %76 = sext i32 %75 to i64
  %77 = mul i64 %76, 4
  %78 = trunc i64 %77 to i32
  %79 = call i8* @vrna_alloc(i32 noundef %78)
  %80 = bitcast i8* %79 to i32*
  store i32* %80, i32** %16, align 8
  %81 = load i32, i32* %13, align 4
  %82 = sext i32 %81 to i64
  %83 = mul i64 %82, 4
  %84 = trunc i64 %83 to i32
  %85 = call i8* @vrna_alloc(i32 noundef %84)
  %86 = bitcast i8* %85 to i32*
  store i32* %86, i32** %17, align 8
  %87 = load i32, i32* %13, align 4
  %88 = sext i32 %87 to i64
  %89 = mul i64 %88, 8
  %90 = trunc i64 %89 to i32
  %91 = call i8* @vrna_alloc(i32 noundef %90)
  %92 = bitcast i8* %91 to double*
  store double* %92, double** %18, align 8
  store i32 0, i32* %19, align 4
  br label %93

93:                                               ; preds = %106, %74
  %94 = load i32, i32* %19, align 4
  %95 = load i32, i32* %13, align 4
  %96 = icmp slt i32 %94, %95
  br i1 %96, label %97, label %109

97:                                               ; preds = %93
  %98 = load i32*, i32** %17, align 8
  %99 = load i32, i32* %19, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i32, i32* %98, i64 %100
  store i32 0, i32* %101, align 4
  %102 = load double*, double** %18, align 8
  %103 = load i32, i32* %19, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds double, double* %102, i64 %104
  store double 0.000000e+00, double* %105, align 8
  br label %106

106:                                              ; preds = %97
  %107 = load i32, i32* %19, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %19, align 4
  br label %93, !llvm.loop !24

109:                                              ; preds = %93
  store i32 0, i32* %20, align 4
  store i32 1, i32* %21, align 4
  br label %110

110:                                              ; preds = %155, %109
  %111 = load i32, i32* %21, align 4
  %112 = load i16*, i16** %8, align 8
  %113 = getelementptr inbounds i16, i16* %112, i64 0
  %114 = load i16, i16* %113, align 2
  %115 = sext i16 %114 to i32
  %116 = icmp slt i32 %111, %115
  br i1 %116, label %117, label %121

117:                                              ; preds = %110
  %118 = load i32, i32* %20, align 4
  %119 = load i32, i32* %13, align 4
  %120 = icmp slt i32 %118, %119
  br label %121

121:                                              ; preds = %117, %110
  %122 = phi i1 [ false, %110 ], [ %120, %117 ]
  br i1 %122, label %123, label %156

123:                                              ; preds = %121
  %124 = load i16*, i16** %8, align 8
  %125 = load i32, i32* %21, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i16, i16* %124, i64 %126
  %128 = load i16, i16* %127, align 2
  %129 = sext i16 %128 to i32
  %130 = load i32, i32* %21, align 4
  %131 = icmp sgt i32 %129, %130
  br i1 %131, label %132, label %146

132:                                              ; preds = %123
  %133 = load i32, i32* %21, align 4
  %134 = load i32*, i32** %16, align 8
  %135 = load i32, i32* %20, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i32, i32* %134, i64 %136
  store i32 %133, i32* %137, align 4
  %138 = load i32, i32* %20, align 4
  %139 = add nsw i32 %138, 1
  store i32 %139, i32* %20, align 4
  %140 = load i16*, i16** %8, align 8
  %141 = load i32, i32* %21, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds i16, i16* %140, i64 %142
  %144 = load i16, i16* %143, align 2
  %145 = sext i16 %144 to i32
  store i32 %145, i32* %21, align 4
  br label %155

146:                                              ; preds = %123
  %147 = load i32, i32* %21, align 4
  %148 = add nsw i32 %147, 1
  store i32 %148, i32* %21, align 4
  %149 = load i32*, i32** %17, align 8
  %150 = load i32, i32* %20, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i32, i32* %149, i64 %151
  %153 = load i32, i32* %152, align 4
  %154 = add nsw i32 %153, 1
  store i32 %154, i32* %152, align 4
  br label %155

155:                                              ; preds = %146, %132
  br label %110, !llvm.loop !25

156:                                              ; preds = %121
  %157 = load i32, i32* %13, align 4
  %158 = add nsw i32 %157, 1
  %159 = sext i32 %158 to i64
  %160 = mul i64 %159, 4
  %161 = trunc i64 %160 to i32
  %162 = call i8* @vrna_alloc(i32 noundef %161)
  %163 = bitcast i8* %162 to i32*
  store i32* %163, i32** %22, align 8
  %164 = load i32, i32* %13, align 4
  %165 = add nsw i32 %164, 1
  %166 = sext i32 %165 to i64
  %167 = mul i64 %166, 4
  %168 = trunc i64 %167 to i32
  %169 = call i8* @vrna_alloc(i32 noundef %168)
  %170 = bitcast i8* %169 to i32*
  store i32* %170, i32** %23, align 8
  %171 = load i32*, i32** %22, align 8
  %172 = getelementptr inbounds i32, i32* %171, i64 0
  store i32 0, i32* %172, align 4
  %173 = load i32*, i32** %23, align 8
  %174 = getelementptr inbounds i32, i32* %173, i64 0
  store i32 0, i32* %174, align 4
  %175 = load i32*, i32** %22, align 8
  %176 = getelementptr inbounds i32, i32* %175, i64 0
  %177 = load i32, i32* %176, align 4
  %178 = add nsw i32 %177, 1
  store i32 %178, i32* %176, align 4
  %179 = load i32*, i32** %22, align 8
  %180 = load i32*, i32** %22, align 8
  %181 = getelementptr inbounds i32, i32* %180, i64 0
  %182 = load i32, i32* %181, align 4
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds i32, i32* %179, i64 %183
  store i32 0, i32* %184, align 4
  store double 0.000000e+00, double* %24, align 8
  store double 0.000000e+00, double* %25, align 8
  store i32 1, i32* %26, align 4
  br label %185

185:                                              ; preds = %408, %156
  %186 = load i32, i32* %26, align 4
  %187 = load i32, i32* %13, align 4
  %188 = icmp slt i32 %186, %187
  br i1 %188, label %189, label %411

189:                                              ; preds = %185
  %190 = load double, double* %24, align 8
  %191 = fcmp ogt double %190, 0.000000e+00
  br i1 %191, label %192, label %202

192:                                              ; preds = %189
  %193 = getelementptr inbounds [2 x double], [2 x double]* %27, i64 0, i64 0
  %194 = load double, double* %24, align 8
  store double %194, double* %193, align 8
  %195 = getelementptr inbounds double, double* %193, i64 1
  store double 0.000000e+00, double* %195, align 8
  %196 = load %struct.configtree**, %struct.configtree*** %14, align 8
  %197 = load i32, i32* %26, align 4
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds %struct.configtree*, %struct.configtree** %196, i64 %198
  %200 = load %struct.configtree*, %struct.configtree** %199, align 8
  %201 = getelementptr inbounds [2 x double], [2 x double]* %27, i64 0, i64 0
  call void @translateBoundingBoxes(%struct.configtree* noundef %200, double* noundef %201)
  br label %202

202:                                              ; preds = %192, %189
  store i16 1, i16* %28, align 2
  store i16 0, i16* %29, align 2
  store i16 0, i16* %30, align 2
  store double 0.000000e+00, double* %31, align 8
  br label %203

203:                                              ; preds = %352, %202
  %204 = load i16, i16* %28, align 2
  %205 = icmp ne i16 %204, 0
  br i1 %205, label %206, label %353

206:                                              ; preds = %203
  store i16 0, i16* %28, align 2
  store i16 0, i16* %29, align 2
  store i16 0, i16* %30, align 2
  store i32 1, i32* %32, align 4
  br label %207

207:                                              ; preds = %234, %206
  %208 = load i32, i32* %32, align 4
  %209 = load i32*, i32** %22, align 8
  %210 = getelementptr inbounds i32, i32* %209, i64 0
  %211 = load i32, i32* %210, align 4
  %212 = icmp sle i32 %208, %211
  br i1 %212, label %213, label %237

213:                                              ; preds = %207
  %214 = load i32*, i32** %22, align 8
  %215 = load i32, i32* %32, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds i32, i32* %214, i64 %216
  %218 = load i32, i32* %217, align 4
  store i32 %218, i32* %33, align 4
  %219 = load %struct.configtree**, %struct.configtree*** %14, align 8
  %220 = load i32, i32* %26, align 4
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds %struct.configtree*, %struct.configtree** %219, i64 %221
  %223 = load %struct.configtree*, %struct.configtree** %222, align 8
  %224 = load %struct.configtree**, %struct.configtree*** %14, align 8
  %225 = load i32, i32* %33, align 4
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds %struct.configtree*, %struct.configtree** %224, i64 %226
  %228 = load %struct.configtree*, %struct.configtree** %227, align 8
  %229 = call signext i16 @intersectTrees(%struct.configtree* noundef %223, %struct.configtree* noundef %228)
  store i16 %229, i16* %29, align 2
  %230 = load i16, i16* %29, align 2
  %231 = icmp ne i16 %230, 0
  br i1 %231, label %232, label %233

232:                                              ; preds = %213
  br label %237

233:                                              ; preds = %213
  br label %234

234:                                              ; preds = %233
  %235 = load i32, i32* %32, align 4
  %236 = add nsw i32 %235, 1
  store i32 %236, i32* %32, align 4
  br label %207, !llvm.loop !26

237:                                              ; preds = %232, %207
  %238 = load i16, i16* %10, align 2
  %239 = icmp ne i16 %238, 0
  br i1 %239, label %240, label %272

240:                                              ; preds = %237
  store i32 1, i32* %34, align 4
  br label %241

241:                                              ; preds = %268, %240
  %242 = load i32, i32* %34, align 4
  %243 = load i32*, i32** %23, align 8
  %244 = getelementptr inbounds i32, i32* %243, i64 0
  %245 = load i32, i32* %244, align 4
  %246 = icmp sle i32 %242, %245
  br i1 %246, label %247, label %271

247:                                              ; preds = %241
  %248 = load i32*, i32** %23, align 8
  %249 = load i32, i32* %34, align 4
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds i32, i32* %248, i64 %250
  %252 = load i32, i32* %251, align 4
  store i32 %252, i32* %35, align 4
  %253 = load %struct.configtree**, %struct.configtree*** %14, align 8
  %254 = load i32, i32* %26, align 4
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds %struct.configtree*, %struct.configtree** %253, i64 %255
  %257 = load %struct.configtree*, %struct.configtree** %256, align 8
  %258 = load %struct.configtree**, %struct.configtree*** %14, align 8
  %259 = load i32, i32* %35, align 4
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds %struct.configtree*, %struct.configtree** %258, i64 %260
  %262 = load %struct.configtree*, %struct.configtree** %261, align 8
  %263 = call signext i16 @intersectTrees(%struct.configtree* noundef %257, %struct.configtree* noundef %262)
  store i16 %263, i16* %30, align 2
  %264 = load i16, i16* %30, align 2
  %265 = icmp ne i16 %264, 0
  br i1 %265, label %266, label %267

266:                                              ; preds = %247
  br label %271

267:                                              ; preds = %247
  br label %268

268:                                              ; preds = %267
  %269 = load i32, i32* %34, align 4
  %270 = add nsw i32 %269, 1
  store i32 %270, i32* %34, align 4
  br label %241, !llvm.loop !27

271:                                              ; preds = %266, %241
  br label %272

272:                                              ; preds = %271, %237
  %273 = load i16, i16* %10, align 2
  %274 = icmp ne i16 %273, 0
  br i1 %274, label %279, label %275

275:                                              ; preds = %272
  %276 = load i16, i16* %29, align 2
  %277 = sext i16 %276 to i32
  %278 = icmp ne i32 %277, 0
  br i1 %278, label %291, label %279

279:                                              ; preds = %275, %272
  %280 = load i16, i16* %10, align 2
  %281 = sext i16 %280 to i32
  %282 = icmp ne i32 %281, 0
  br i1 %282, label %283, label %319

283:                                              ; preds = %279
  %284 = load i16, i16* %29, align 2
  %285 = sext i16 %284 to i32
  %286 = icmp ne i32 %285, 0
  br i1 %286, label %287, label %319

287:                                              ; preds = %283
  %288 = load i16, i16* %30, align 2
  %289 = sext i16 %288 to i32
  %290 = icmp ne i32 %289, 0
  br i1 %290, label %291, label %319

291:                                              ; preds = %287, %275
  %292 = load double, double* %9, align 8
  %293 = load double*, double** %18, align 8
  %294 = load i32, i32* %26, align 4
  %295 = sext i32 %294 to i64
  %296 = getelementptr inbounds double, double* %293, i64 %295
  %297 = load double, double* %296, align 8
  %298 = fadd double %297, %292
  store double %298, double* %296, align 8
  %299 = load double, double* %9, align 8
  %300 = load i32*, i32** %17, align 8
  %301 = load i32, i32* %26, align 4
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds i32, i32* %300, i64 %302
  %304 = load i32, i32* %303, align 4
  %305 = sitofp i32 %304 to double
  %306 = fmul double %299, %305
  store double %306, double* %31, align 8
  %307 = getelementptr inbounds [2 x double], [2 x double]* %36, i64 0, i64 0
  %308 = load double, double* %31, align 8
  store double %308, double* %307, align 8
  %309 = getelementptr inbounds double, double* %307, i64 1
  store double 0.000000e+00, double* %309, align 8
  %310 = load %struct.configtree**, %struct.configtree*** %14, align 8
  %311 = load i32, i32* %26, align 4
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds %struct.configtree*, %struct.configtree** %310, i64 %312
  %314 = load %struct.configtree*, %struct.configtree** %313, align 8
  %315 = getelementptr inbounds [2 x double], [2 x double]* %36, i64 0, i64 0
  call void @translateBoundingBoxes(%struct.configtree* noundef %314, double* noundef %315)
  %316 = load double, double* %31, align 8
  %317 = load double, double* %24, align 8
  %318 = fadd double %317, %316
  store double %318, double* %24, align 8
  store i16 1, i16* %28, align 2
  br label %352

319:                                              ; preds = %287, %283, %279
  %320 = load i16, i16* %10, align 2
  %321 = sext i16 %320 to i32
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %323, label %339

323:                                              ; preds = %319
  %324 = load i16, i16* %29, align 2
  %325 = sext i16 %324 to i32
  %326 = icmp ne i32 %325, 0
  br i1 %326, label %327, label %339

327:                                              ; preds = %323
  %328 = load i32*, i32** %23, align 8
  %329 = getelementptr inbounds i32, i32* %328, i64 0
  %330 = load i32, i32* %329, align 4
  %331 = add nsw i32 %330, 1
  store i32 %331, i32* %329, align 4
  %332 = load i32, i32* %26, align 4
  %333 = load i32*, i32** %23, align 8
  %334 = load i32*, i32** %23, align 8
  %335 = getelementptr inbounds i32, i32* %334, i64 0
  %336 = load i32, i32* %335, align 4
  %337 = sext i32 %336 to i64
  %338 = getelementptr inbounds i32, i32* %333, i64 %337
  store i32 %332, i32* %338, align 4
  br label %351

339:                                              ; preds = %323, %319
  %340 = load i32*, i32** %22, align 8
  %341 = getelementptr inbounds i32, i32* %340, i64 0
  %342 = load i32, i32* %341, align 4
  %343 = add nsw i32 %342, 1
  store i32 %343, i32* %341, align 4
  %344 = load i32, i32* %26, align 4
  %345 = load i32*, i32** %22, align 8
  %346 = load i32*, i32** %22, align 8
  %347 = getelementptr inbounds i32, i32* %346, i64 0
  %348 = load i32, i32* %347, align 4
  %349 = sext i32 %348 to i64
  %350 = getelementptr inbounds i32, i32* %345, i64 %349
  store i32 %344, i32* %350, align 4
  br label %351

351:                                              ; preds = %339, %327
  br label %352

352:                                              ; preds = %351, %291
  br label %203, !llvm.loop !28

353:                                              ; preds = %203
  store i32 1, i32* %37, align 4
  %354 = load i16*, i16** %8, align 8
  %355 = load i32*, i32** %16, align 8
  %356 = load i32, i32* %26, align 4
  %357 = sub nsw i32 %356, 1
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds i32, i32* %355, i64 %358
  %360 = load i32, i32* %359, align 4
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds i16, i16* %354, i64 %361
  %363 = load i16, i16* %362, align 2
  %364 = sext i16 %363 to i32
  store i32 %364, i32* %38, align 4
  br label %365

365:                                              ; preds = %389, %353
  %366 = load i32, i32* %38, align 4
  %367 = load i32*, i32** %16, align 8
  %368 = load i32, i32* %26, align 4
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds i32, i32* %367, i64 %369
  %371 = load i32, i32* %370, align 4
  %372 = icmp slt i32 %366, %371
  br i1 %372, label %373, label %394

373:                                              ; preds = %365
  %374 = load i32, i32* %37, align 4
  %375 = sitofp i32 %374 to double
  %376 = load double*, double** %18, align 8
  %377 = load i32, i32* %26, align 4
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds double, double* %376, i64 %378
  %380 = load double, double* %379, align 8
  %381 = load double, double* %25, align 8
  %382 = call double @llvm.fmuladd.f64(double %375, double %380, double %381)
  %383 = load double*, double** %11, align 8
  %384 = load i32, i32* %38, align 4
  %385 = sext i32 %384 to i64
  %386 = getelementptr inbounds double, double* %383, i64 %385
  %387 = load double, double* %386, align 8
  %388 = fadd double %387, %382
  store double %388, double* %386, align 8
  br label %389

389:                                              ; preds = %373
  %390 = load i32, i32* %38, align 4
  %391 = add nsw i32 %390, 1
  store i32 %391, i32* %38, align 4
  %392 = load i32, i32* %37, align 4
  %393 = add nsw i32 %392, 1
  store i32 %393, i32* %37, align 4
  br label %365, !llvm.loop !29

394:                                              ; preds = %365
  %395 = load double*, double** %18, align 8
  %396 = load i32, i32* %26, align 4
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds double, double* %395, i64 %397
  %399 = load double, double* %398, align 8
  %400 = load i32*, i32** %17, align 8
  %401 = load i32, i32* %26, align 4
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds i32, i32* %400, i64 %402
  %404 = load i32, i32* %403, align 4
  %405 = sitofp i32 %404 to double
  %406 = load double, double* %25, align 8
  %407 = call double @llvm.fmuladd.f64(double %399, double %405, double %406)
  store double %407, double* %25, align 8
  br label %408

408:                                              ; preds = %394
  %409 = load i32, i32* %26, align 4
  %410 = add nsw i32 %409, 1
  store i32 %410, i32* %26, align 4
  br label %185, !llvm.loop !30

411:                                              ; preds = %185
  %412 = load i16*, i16** %8, align 8
  %413 = load i32*, i32** %16, align 8
  %414 = load i32, i32* %13, align 4
  %415 = sub nsw i32 %414, 1
  %416 = sext i32 %415 to i64
  %417 = getelementptr inbounds i32, i32* %413, i64 %416
  %418 = load i32, i32* %417, align 4
  %419 = sext i32 %418 to i64
  %420 = getelementptr inbounds i16, i16* %412, i64 %419
  %421 = load i16, i16* %420, align 2
  %422 = sext i16 %421 to i32
  store i32 %422, i32* %39, align 4
  br label %423

423:                                              ; preds = %438, %411
  %424 = load i32, i32* %39, align 4
  %425 = load i16*, i16** %8, align 8
  %426 = getelementptr inbounds i16, i16* %425, i64 0
  %427 = load i16, i16* %426, align 2
  %428 = sext i16 %427 to i32
  %429 = icmp slt i32 %424, %428
  br i1 %429, label %430, label %441

430:                                              ; preds = %423
  %431 = load double, double* %25, align 8
  %432 = load double*, double** %11, align 8
  %433 = load i32, i32* %39, align 4
  %434 = sext i32 %433 to i64
  %435 = getelementptr inbounds double, double* %432, i64 %434
  %436 = load double, double* %435, align 8
  %437 = fadd double %436, %431
  store double %437, double* %435, align 8
  br label %438

438:                                              ; preds = %430
  %439 = load i32, i32* %39, align 4
  %440 = add nsw i32 %439, 1
  store i32 %440, i32* %39, align 4
  br label %423, !llvm.loop !31

441:                                              ; preds = %423
  store i32 1, i32* %40, align 4
  store double 0.000000e+00, double* %41, align 8
  store i32 1, i32* %42, align 4
  br label %442

442:                                              ; preds = %539, %441
  %443 = load i32, i32* %42, align 4
  %444 = load i32, i32* %13, align 4
  %445 = icmp slt i32 %443, %444
  br i1 %445, label %446, label %542

446:                                              ; preds = %442
  %447 = load double*, double** %18, align 8
  %448 = load i32, i32* %42, align 4
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds double, double* %447, i64 %449
  %451 = load double, double* %450, align 8
  %452 = load i32*, i32** %17, align 8
  %453 = load i32, i32* %42, align 4
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds i32, i32* %452, i64 %454
  %456 = load i32, i32* %455, align 4
  %457 = sitofp i32 %456 to double
  %458 = load double, double* %41, align 8
  %459 = call double @llvm.fmuladd.f64(double %451, double %457, double %458)
  store double %459, double* %41, align 8
  %460 = load i32*, i32** %16, align 8
  %461 = load i32, i32* %42, align 4
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds i32, i32* %460, i64 %462
  %464 = load i32, i32* %463, align 4
  store i32 %464, i32* %43, align 4
  br label %465

465:                                              ; preds = %486, %446
  %466 = load i32, i32* %43, align 4
  %467 = load i16*, i16** %8, align 8
  %468 = load i32*, i32** %16, align 8
  %469 = load i32, i32* %42, align 4
  %470 = sext i32 %469 to i64
  %471 = getelementptr inbounds i32, i32* %468, i64 %470
  %472 = load i32, i32* %471, align 4
  %473 = sext i32 %472 to i64
  %474 = getelementptr inbounds i16, i16* %467, i64 %473
  %475 = load i16, i16* %474, align 2
  %476 = sext i16 %475 to i32
  %477 = icmp slt i32 %466, %476
  br i1 %477, label %478, label %489

478:                                              ; preds = %465
  %479 = load double, double* %41, align 8
  %480 = load double*, double** %11, align 8
  %481 = load i32, i32* %43, align 4
  %482 = sext i32 %481 to i64
  %483 = getelementptr inbounds double, double* %480, i64 %482
  %484 = load double, double* %483, align 8
  %485 = fadd double %484, %479
  store double %485, double* %483, align 8
  br label %486

486:                                              ; preds = %478
  %487 = load i32, i32* %43, align 4
  %488 = add nsw i32 %487, 1
  store i32 %488, i32* %43, align 4
  br label %465, !llvm.loop !32

489:                                              ; preds = %465
  %490 = load i32, i32* %42, align 4
  %491 = load i32*, i32** %23, align 8
  %492 = load i32, i32* %40, align 4
  %493 = sext i32 %492 to i64
  %494 = getelementptr inbounds i32, i32* %491, i64 %493
  %495 = load i32, i32* %494, align 4
  %496 = icmp eq i32 %490, %495
  br i1 %496, label %497, label %538

497:                                              ; preds = %489
  %498 = load double*, double** %12, align 8
  %499 = getelementptr inbounds double, double* %498, i64 1
  %500 = load double, double* %499, align 8
  store double %500, double* %44, align 8
  %501 = load i32*, i32** %16, align 8
  %502 = load i32, i32* %42, align 4
  %503 = sext i32 %502 to i64
  %504 = getelementptr inbounds i32, i32* %501, i64 %503
  %505 = load i32, i32* %504, align 4
  store i32 %505, i32* %45, align 4
  br label %506

506:                                              ; preds = %532, %497
  %507 = load i32, i32* %45, align 4
  %508 = load i16*, i16** %8, align 8
  %509 = load i32*, i32** %16, align 8
  %510 = load i32, i32* %42, align 4
  %511 = sext i32 %510 to i64
  %512 = getelementptr inbounds i32, i32* %509, i64 %511
  %513 = load i32, i32* %512, align 4
  %514 = sext i32 %513 to i64
  %515 = getelementptr inbounds i16, i16* %508, i64 %514
  %516 = load i16, i16* %515, align 2
  %517 = sext i16 %516 to i32
  %518 = icmp slt i32 %507, %517
  br i1 %518, label %519, label %535

519:                                              ; preds = %506
  %520 = load double, double* %44, align 8
  %521 = load double*, double** %12, align 8
  %522 = load i32, i32* %45, align 4
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds double, double* %521, i64 %523
  %525 = load double, double* %524, align 8
  %526 = fneg double %525
  %527 = call double @llvm.fmuladd.f64(double 2.000000e+00, double %520, double %526)
  %528 = load double*, double** %12, align 8
  %529 = load i32, i32* %45, align 4
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds double, double* %528, i64 %530
  store double %527, double* %531, align 8
  br label %532

532:                                              ; preds = %519
  %533 = load i32, i32* %45, align 4
  %534 = add nsw i32 %533, 1
  store i32 %534, i32* %45, align 4
  br label %506, !llvm.loop !33

535:                                              ; preds = %506
  %536 = load i32, i32* %40, align 4
  %537 = add nsw i32 %536, 1
  store i32 %537, i32* %40, align 4
  br label %538

538:                                              ; preds = %535, %489
  br label %539

539:                                              ; preds = %538
  %540 = load i32, i32* %42, align 4
  %541 = add nsw i32 %540, 1
  store i32 %541, i32* %42, align 4
  br label %442, !llvm.loop !34

542:                                              ; preds = %442
  %543 = load i32*, i32** %22, align 8
  %544 = bitcast i32* %543 to i8*
  call void @free(i8* noundef %544) #7
  %545 = load i32*, i32** %23, align 8
  %546 = bitcast i32* %545 to i8*
  call void @free(i8* noundef %546) #7
  %547 = load i32*, i32** %17, align 8
  %548 = bitcast i32* %547 to i8*
  call void @free(i8* noundef %548) #7
  %549 = load double*, double** %18, align 8
  %550 = bitcast double* %549 to i8*
  call void @free(i8* noundef %550) #7
  %551 = load i32*, i32** %16, align 8
  %552 = bitcast i32* %551 to i8*
  call void @free(i8* noundef %552) #7
  %553 = load %struct.configtree**, %struct.configtree*** %14, align 8
  %554 = bitcast %struct.configtree** %553 to i8*
  call void @free(i8* noundef %554) #7
  br label %555

555:                                              ; preds = %542, %51
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @computeAnglesAndCentersForPS(i16* noundef %0, double* noundef %1, double* noundef %2, %struct.tBaseInformation* noundef %3, double* noundef %4) #0 {
  %6 = alloca i16*, align 8
  %7 = alloca double*, align 8
  %8 = alloca double*, align 8
  %9 = alloca %struct.tBaseInformation*, align 8
  %10 = alloca double*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i16* %0, i16** %6, align 8
  store double* %1, double** %7, align 8
  store double* %2, double** %8, align 8
  store %struct.tBaseInformation* %3, %struct.tBaseInformation** %9, align 8
  store double* %4, double** %10, align 8
  %14 = load i16*, i16** %6, align 8
  %15 = getelementptr inbounds i16, i16* %14, i64 0
  %16 = load i16, i16* %15, align 2
  %17 = sext i16 %16 to i32
  store i32 %17, i32* %11, align 4
  store i32 0, i32* %12, align 4
  br label %18

18:                                               ; preds = %59, %5
  %19 = load i32, i32* %12, align 4
  %20 = load i32, i32* %11, align 4
  %21 = icmp slt i32 %19, %20
  br i1 %21, label %22, label %62

22:                                               ; preds = %18
  %23 = load double*, double** %10, align 8
  %24 = load i32, i32* %12, align 4
  %25 = mul nsw i32 6, %24
  %26 = add nsw i32 %25, 0
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds double, double* %23, i64 %27
  store double -1.000000e+00, double* %28, align 8
  %29 = load double*, double** %10, align 8
  %30 = load i32, i32* %12, align 4
  %31 = mul nsw i32 6, %30
  %32 = add nsw i32 %31, 1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds double, double* %29, i64 %33
  store double -1.000000e+00, double* %34, align 8
  %35 = load double*, double** %10, align 8
  %36 = load i32, i32* %12, align 4
  %37 = mul nsw i32 6, %36
  %38 = add nsw i32 %37, 2
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds double, double* %35, i64 %39
  store double -1.000000e+00, double* %40, align 8
  %41 = load double*, double** %10, align 8
  %42 = load i32, i32* %12, align 4
  %43 = mul nsw i32 6, %42
  %44 = add nsw i32 %43, 3
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds double, double* %41, i64 %45
  store double -1.000000e+00, double* %46, align 8
  %47 = load double*, double** %10, align 8
  %48 = load i32, i32* %12, align 4
  %49 = mul nsw i32 6, %48
  %50 = add nsw i32 %49, 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds double, double* %47, i64 %51
  store double -1.000000e+00, double* %52, align 8
  %53 = load double*, double** %10, align 8
  %54 = load i32, i32* %12, align 4
  %55 = mul nsw i32 6, %54
  %56 = add nsw i32 %55, 5
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds double, double* %53, i64 %57
  store double -1.000000e+00, double* %58, align 8
  br label %59

59:                                               ; preds = %22
  %60 = load i32, i32* %12, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %12, align 4
  br label %18, !llvm.loop !35

62:                                               ; preds = %18
  store i32 1, i32* %13, align 4
  br label %63

63:                                               ; preds = %104, %62
  %64 = load i32, i32* %13, align 4
  %65 = load i32, i32* %11, align 4
  %66 = icmp slt i32 %64, %65
  br i1 %66, label %67, label %105

67:                                               ; preds = %63
  %68 = load i16*, i16** %6, align 8
  %69 = load i32, i32* %13, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i16, i16* %68, i64 %70
  %72 = load i16, i16* %71, align 2
  %73 = sext i16 %72 to i32
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %78

75:                                               ; preds = %67
  %76 = load i32, i32* %13, align 4
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %13, align 4
  br label %104

78:                                               ; preds = %67
  %79 = load i16*, i16** %6, align 8
  %80 = load i32, i32* %13, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i16, i16* %79, i64 %81
  %83 = load i16, i16* %82, align 2
  %84 = sext i16 %83 to i32
  %85 = load i32, i32* %13, align 4
  %86 = icmp sgt i32 %84, %85
  br i1 %86, label %87, label %100

87:                                               ; preds = %78
  %88 = load i32, i32* %13, align 4
  %89 = load i16*, i16** %6, align 8
  %90 = load double*, double** %7, align 8
  %91 = load double*, double** %8, align 8
  %92 = load %struct.tBaseInformation*, %struct.tBaseInformation** %9, align 8
  %93 = load double*, double** %10, align 8
  call void @calcArcsHandleStem(i32 noundef %88, i16* noundef %89, double* noundef %90, double* noundef %91, %struct.tBaseInformation* noundef %92, double* noundef %93)
  %94 = load i16*, i16** %6, align 8
  %95 = load i32, i32* %13, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i16, i16* %94, i64 %96
  %98 = load i16, i16* %97, align 2
  %99 = sext i16 %98 to i32
  store i32 %99, i32* %13, align 4
  br label %103

100:                                              ; preds = %78
  %101 = load i32, i32* %13, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %13, align 4
  br label %103

103:                                              ; preds = %100, %87
  br label %104

104:                                              ; preds = %103, %75
  br label %63, !llvm.loop !36

105:                                              ; preds = %63
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @checkRemainingIntersections(double* noundef %0, double* noundef %1, double* noundef %2, i16 noundef signext %3, %struct.tBaseInformation* noundef %4, i32 noundef %5) #0 {
  %7 = alloca double*, align 8
  %8 = alloca double*, align 8
  %9 = alloca double*, align 8
  %10 = alloca i16, align 2
  %11 = alloca %struct.tBaseInformation*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i16, align 2
  %15 = alloca i16, align 2
  %16 = alloca [6 x double], align 16
  %17 = alloca i16, align 2
  %18 = alloca [6 x double], align 16
  %19 = alloca i16, align 2
  %20 = alloca i32, align 4
  %21 = alloca [2 x double], align 16
  %22 = alloca [2 x double], align 16
  %23 = alloca i16, align 2
  %24 = alloca double, align 8
  %25 = alloca double, align 8
  %26 = alloca [2 x double], align 16
  %27 = alloca [2 x double], align 16
  %28 = alloca i32, align 4
  %29 = alloca [2 x double], align 16
  %30 = alloca [2 x double], align 16
  %31 = alloca i16, align 2
  store double* %0, double** %7, align 8
  store double* %1, double** %8, align 8
  store double* %2, double** %9, align 8
  store i16 %3, i16* %10, align 2
  store %struct.tBaseInformation* %4, %struct.tBaseInformation** %11, align 8
  store i32 %5, i32* %12, align 4
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.47, i64 0, i64 0), i8** %13, align 8
  store i16 0, i16* %14, align 2
  store i16 0, i16* %15, align 2
  store i16 0, i16* %17, align 2
  store i16 0, i16* %19, align 2
  store i32 3, i32* %20, align 4
  br label %32

32:                                               ; preds = %357, %6
  %33 = load i32, i32* %20, align 4
  %34 = load i32, i32* %12, align 4
  %35 = icmp slt i32 %33, %34
  br i1 %35, label %36, label %360

36:                                               ; preds = %32
  %37 = load double*, double** %9, align 8
  %38 = load i32, i32* %20, align 4
  %39 = mul nsw i32 6, %38
  %40 = add nsw i32 %39, 0
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds double, double* %37, i64 %41
  %43 = load double, double* %42, align 8
  %44 = getelementptr inbounds [6 x double], [6 x double]* %16, i64 0, i64 0
  store double %43, double* %44, align 16
  %45 = load double*, double** %9, align 8
  %46 = load i32, i32* %20, align 4
  %47 = mul nsw i32 6, %46
  %48 = add nsw i32 %47, 1
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds double, double* %45, i64 %49
  %51 = load double, double* %50, align 8
  %52 = getelementptr inbounds [6 x double], [6 x double]* %16, i64 0, i64 1
  store double %51, double* %52, align 8
  %53 = load double*, double** %9, align 8
  %54 = load i32, i32* %20, align 4
  %55 = mul nsw i32 6, %54
  %56 = add nsw i32 %55, 2
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds double, double* %53, i64 %57
  %59 = load double, double* %58, align 8
  %60 = getelementptr inbounds [6 x double], [6 x double]* %16, i64 0, i64 2
  store double %59, double* %60, align 16
  %61 = load double*, double** %9, align 8
  %62 = load i32, i32* %20, align 4
  %63 = mul nsw i32 6, %62
  %64 = add nsw i32 %63, 3
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds double, double* %61, i64 %65
  %67 = load double, double* %66, align 8
  %68 = getelementptr inbounds [6 x double], [6 x double]* %16, i64 0, i64 3
  store double %67, double* %68, align 8
  %69 = load double*, double** %9, align 8
  %70 = load i32, i32* %20, align 4
  %71 = mul nsw i32 6, %70
  %72 = add nsw i32 %71, 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds double, double* %69, i64 %73
  %75 = load double, double* %74, align 8
  %76 = getelementptr inbounds [6 x double], [6 x double]* %16, i64 0, i64 4
  store double %75, double* %76, align 16
  %77 = load double*, double** %9, align 8
  %78 = load i32, i32* %20, align 4
  %79 = mul nsw i32 6, %78
  %80 = add nsw i32 %79, 5
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds double, double* %77, i64 %81
  %83 = load double, double* %82, align 8
  %84 = getelementptr inbounds [6 x double], [6 x double]* %16, i64 0, i64 5
  store double %83, double* %84, align 8
  %85 = getelementptr inbounds [6 x double], [6 x double]* %16, i64 0, i64 0
  %86 = load double, double* %85, align 16
  %87 = fcmp une double %86, -1.000000e+00
  %88 = zext i1 %87 to i32
  %89 = trunc i32 %88 to i16
  store i16 %89, i16* %17, align 2
  %90 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 0
  %91 = load double*, double** %7, align 8
  %92 = load i32, i32* %20, align 4
  %93 = sub nsw i32 %92, 1
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds double, double* %91, i64 %94
  %96 = load double, double* %95, align 8
  store double %96, double* %90, align 8
  %97 = getelementptr inbounds double, double* %90, i64 1
  %98 = load double*, double** %8, align 8
  %99 = load i32, i32* %20, align 4
  %100 = sub nsw i32 %99, 1
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds double, double* %98, i64 %101
  %103 = load double, double* %102, align 8
  store double %103, double* %97, align 8
  %104 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 0
  %105 = load double*, double** %7, align 8
  %106 = load i32, i32* %20, align 4
  %107 = sub nsw i32 %106, 0
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds double, double* %105, i64 %108
  %110 = load double, double* %109, align 8
  store double %110, double* %104, align 8
  %111 = getelementptr inbounds double, double* %104, i64 1
  %112 = load double*, double** %8, align 8
  %113 = load i32, i32* %20, align 4
  %114 = sub nsw i32 %113, 0
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds double, double* %112, i64 %115
  %117 = load double, double* %116, align 8
  store double %117, double* %111, align 8
  store i16 0, i16* %23, align 2
  %118 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %119 = load i32, i32* %20, align 4
  %120 = add nsw i32 %119, 0
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %118, i64 %121
  %123 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %122, i32 0, i32 0
  %124 = load i32, i32* %123, align 8
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %126, label %172

126:                                              ; preds = %36
  %127 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %128 = load i32, i32* %20, align 4
  %129 = add nsw i32 %128, 1
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %127, i64 %130
  %132 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %131, i32 0, i32 0
  %133 = load i32, i32* %132, align 8
  %134 = icmp eq i32 %133, 1
  br i1 %134, label %135, label %172

135:                                              ; preds = %126
  %136 = load i16, i16* %17, align 2
  %137 = icmp ne i16 %136, 0
  br i1 %137, label %138, label %159

138:                                              ; preds = %135
  %139 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 0
  %140 = load double, double* %139, align 16
  %141 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 0
  %142 = load double, double* %141, align 16
  %143 = call double @llvm.minnum.f64(double %140, double %142)
  store double %143, double* %24, align 8
  %144 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 0
  %145 = load double, double* %144, align 16
  %146 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 0
  %147 = load double, double* %146, align 16
  %148 = call double @llvm.maxnum.f64(double %145, double %147)
  store double %148, double* %25, align 8
  %149 = getelementptr inbounds [2 x double], [2 x double]* %26, i64 0, i64 0
  %150 = load double, double* %24, align 8
  store double %150, double* %149, align 8
  %151 = getelementptr inbounds double, double* %149, i64 1
  store double 1.000000e+02, double* %151, align 8
  %152 = getelementptr inbounds [2 x double], [2 x double]* %27, i64 0, i64 0
  %153 = load double, double* %25, align 8
  store double %153, double* %152, align 8
  %154 = getelementptr inbounds double, double* %152, i64 1
  store double 1.000000e+02, double* %154, align 8
  %155 = getelementptr inbounds [2 x double], [2 x double]* %26, i64 0, i64 0
  %156 = getelementptr inbounds [2 x double], [2 x double]* %27, i64 0, i64 0
  %157 = getelementptr inbounds [6 x double], [6 x double]* %16, i64 0, i64 0
  %158 = call signext i16 @intersectLineArc(double* noundef %155, double* noundef %156, double* noundef %157)
  store i16 %158, i16* %23, align 2
  br label %171

159:                                              ; preds = %135
  %160 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 1
  %161 = load double, double* %160, align 8
  %162 = fcmp ole double %161, 1.000000e+02
  %163 = zext i1 %162 to i32
  %164 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 1
  %165 = load double, double* %164, align 8
  %166 = fcmp ole double %165, 1.000000e+02
  %167 = zext i1 %166 to i32
  %168 = icmp ne i32 %163, %167
  %169 = zext i1 %168 to i32
  %170 = trunc i32 %169 to i16
  store i16 %170, i16* %23, align 2
  br label %171

171:                                              ; preds = %159, %138
  br label %172

172:                                              ; preds = %171, %126, %36
  %173 = load i16, i16* %15, align 2
  %174 = sext i16 %173 to i32
  %175 = icmp ne i32 %174, 0
  br i1 %175, label %180, label %176

176:                                              ; preds = %172
  %177 = load i16, i16* %23, align 2
  %178 = sext i16 %177 to i32
  %179 = icmp ne i32 %178, 0
  br label %180

180:                                              ; preds = %176, %172
  %181 = phi i1 [ true, %172 ], [ %179, %176 ]
  %182 = zext i1 %181 to i32
  %183 = trunc i32 %182 to i16
  store i16 %183, i16* %15, align 2
  store i32 1, i32* %28, align 4
  br label %184

184:                                              ; preds = %353, %180
  %185 = load i32, i32* %28, align 4
  %186 = load i32, i32* %20, align 4
  %187 = sub nsw i32 %186, 1
  %188 = icmp slt i32 %185, %187
  br i1 %188, label %189, label %356

189:                                              ; preds = %184
  %190 = load double*, double** %9, align 8
  %191 = load i32, i32* %28, align 4
  %192 = mul nsw i32 6, %191
  %193 = add nsw i32 %192, 0
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds double, double* %190, i64 %194
  %196 = load double, double* %195, align 8
  %197 = getelementptr inbounds [6 x double], [6 x double]* %18, i64 0, i64 0
  store double %196, double* %197, align 16
  %198 = load double*, double** %9, align 8
  %199 = load i32, i32* %28, align 4
  %200 = mul nsw i32 6, %199
  %201 = add nsw i32 %200, 1
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds double, double* %198, i64 %202
  %204 = load double, double* %203, align 8
  %205 = getelementptr inbounds [6 x double], [6 x double]* %18, i64 0, i64 1
  store double %204, double* %205, align 8
  %206 = load double*, double** %9, align 8
  %207 = load i32, i32* %28, align 4
  %208 = mul nsw i32 6, %207
  %209 = add nsw i32 %208, 2
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds double, double* %206, i64 %210
  %212 = load double, double* %211, align 8
  %213 = getelementptr inbounds [6 x double], [6 x double]* %18, i64 0, i64 2
  store double %212, double* %213, align 16
  %214 = load double*, double** %9, align 8
  %215 = load i32, i32* %28, align 4
  %216 = mul nsw i32 6, %215
  %217 = add nsw i32 %216, 3
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds double, double* %214, i64 %218
  %220 = load double, double* %219, align 8
  %221 = getelementptr inbounds [6 x double], [6 x double]* %18, i64 0, i64 3
  store double %220, double* %221, align 8
  %222 = load double*, double** %9, align 8
  %223 = load i32, i32* %28, align 4
  %224 = mul nsw i32 6, %223
  %225 = add nsw i32 %224, 4
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds double, double* %222, i64 %226
  %228 = load double, double* %227, align 8
  %229 = getelementptr inbounds [6 x double], [6 x double]* %18, i64 0, i64 4
  store double %228, double* %229, align 16
  %230 = load double*, double** %9, align 8
  %231 = load i32, i32* %28, align 4
  %232 = mul nsw i32 6, %231
  %233 = add nsw i32 %232, 5
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds double, double* %230, i64 %234
  %236 = load double, double* %235, align 8
  %237 = getelementptr inbounds [6 x double], [6 x double]* %18, i64 0, i64 5
  store double %236, double* %237, align 8
  %238 = getelementptr inbounds [6 x double], [6 x double]* %18, i64 0, i64 0
  %239 = load double, double* %238, align 16
  %240 = fcmp une double %239, -1.000000e+00
  %241 = zext i1 %240 to i32
  %242 = trunc i32 %241 to i16
  store i16 %242, i16* %19, align 2
  %243 = getelementptr inbounds [2 x double], [2 x double]* %29, i64 0, i64 0
  %244 = load double*, double** %7, align 8
  %245 = load i32, i32* %28, align 4
  %246 = sub nsw i32 %245, 1
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds double, double* %244, i64 %247
  %249 = load double, double* %248, align 8
  store double %249, double* %243, align 8
  %250 = getelementptr inbounds double, double* %243, i64 1
  %251 = load double*, double** %8, align 8
  %252 = load i32, i32* %28, align 4
  %253 = sub nsw i32 %252, 1
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds double, double* %251, i64 %254
  %256 = load double, double* %255, align 8
  store double %256, double* %250, align 8
  %257 = getelementptr inbounds [2 x double], [2 x double]* %30, i64 0, i64 0
  %258 = load double*, double** %7, align 8
  %259 = load i32, i32* %28, align 4
  %260 = sub nsw i32 %259, 0
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds double, double* %258, i64 %261
  %263 = load double, double* %262, align 8
  store double %263, double* %257, align 8
  %264 = getelementptr inbounds double, double* %257, i64 1
  %265 = load double*, double** %8, align 8
  %266 = load i32, i32* %28, align 4
  %267 = sub nsw i32 %266, 0
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds double, double* %265, i64 %268
  %270 = load double, double* %269, align 8
  store double %270, double* %264, align 8
  store i16 0, i16* %31, align 2
  %271 = load i16, i16* %17, align 2
  %272 = sext i16 %271 to i32
  %273 = icmp ne i32 %272, 0
  br i1 %273, label %274, label %302

274:                                              ; preds = %189
  %275 = load i16, i16* %19, align 2
  %276 = sext i16 %275 to i32
  %277 = icmp ne i32 %276, 0
  br i1 %277, label %278, label %302

278:                                              ; preds = %274
  %279 = getelementptr inbounds [6 x double], [6 x double]* %16, i64 0, i64 0
  %280 = load double, double* %279, align 16
  %281 = getelementptr inbounds [6 x double], [6 x double]* %18, i64 0, i64 0
  %282 = load double, double* %281, align 16
  %283 = fcmp oeq double %280, %282
  br i1 %283, label %284, label %297

284:                                              ; preds = %278
  %285 = getelementptr inbounds [6 x double], [6 x double]* %16, i64 0, i64 1
  %286 = load double, double* %285, align 8
  %287 = getelementptr inbounds [6 x double], [6 x double]* %18, i64 0, i64 1
  %288 = load double, double* %287, align 8
  %289 = fcmp oeq double %286, %288
  br i1 %289, label %290, label %297

290:                                              ; preds = %284
  %291 = getelementptr inbounds [6 x double], [6 x double]* %16, i64 0, i64 2
  %292 = load double, double* %291, align 16
  %293 = getelementptr inbounds [6 x double], [6 x double]* %18, i64 0, i64 2
  %294 = load double, double* %293, align 16
  %295 = fcmp oeq double %292, %294
  br i1 %295, label %296, label %297

296:                                              ; preds = %290
  store i16 0, i16* %31, align 2
  br label %301

297:                                              ; preds = %290, %284, %278
  %298 = getelementptr inbounds [6 x double], [6 x double]* %16, i64 0, i64 0
  %299 = getelementptr inbounds [6 x double], [6 x double]* %18, i64 0, i64 0
  %300 = call signext i16 @intersectArcArc(double* noundef %298, double* noundef %299)
  store i16 %300, i16* %31, align 2
  br label %301

301:                                              ; preds = %297, %296
  br label %341

302:                                              ; preds = %274, %189
  %303 = load i16, i16* %17, align 2
  %304 = icmp ne i16 %303, 0
  br i1 %304, label %314, label %305

305:                                              ; preds = %302
  %306 = load i16, i16* %19, align 2
  %307 = sext i16 %306 to i32
  %308 = icmp ne i32 %307, 0
  br i1 %308, label %309, label %314

309:                                              ; preds = %305
  %310 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 0
  %311 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 0
  %312 = getelementptr inbounds [6 x double], [6 x double]* %18, i64 0, i64 0
  %313 = call signext i16 @intersectLineArc(double* noundef %310, double* noundef %311, double* noundef %312)
  store i16 %313, i16* %31, align 2
  br label %340

314:                                              ; preds = %305, %302
  %315 = load i16, i16* %17, align 2
  %316 = sext i16 %315 to i32
  %317 = icmp ne i32 %316, 0
  br i1 %317, label %318, label %326

318:                                              ; preds = %314
  %319 = load i16, i16* %19, align 2
  %320 = icmp ne i16 %319, 0
  br i1 %320, label %326, label %321

321:                                              ; preds = %318
  %322 = getelementptr inbounds [2 x double], [2 x double]* %29, i64 0, i64 0
  %323 = getelementptr inbounds [2 x double], [2 x double]* %30, i64 0, i64 0
  %324 = getelementptr inbounds [6 x double], [6 x double]* %16, i64 0, i64 0
  %325 = call signext i16 @intersectLineArc(double* noundef %322, double* noundef %323, double* noundef %324)
  store i16 %325, i16* %31, align 2
  br label %339

326:                                              ; preds = %318, %314
  %327 = load i16, i16* %17, align 2
  %328 = icmp ne i16 %327, 0
  br i1 %328, label %338, label %329

329:                                              ; preds = %326
  %330 = load i16, i16* %19, align 2
  %331 = icmp ne i16 %330, 0
  br i1 %331, label %338, label %332

332:                                              ; preds = %329
  %333 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 0
  %334 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 0
  %335 = getelementptr inbounds [2 x double], [2 x double]* %29, i64 0, i64 0
  %336 = getelementptr inbounds [2 x double], [2 x double]* %30, i64 0, i64 0
  %337 = call signext i16 @intersectLineSegments(double* noundef %333, double* noundef %334, double* noundef %335, double* noundef %336, double* noundef null)
  store i16 %337, i16* %31, align 2
  br label %338

338:                                              ; preds = %332, %329, %326
  br label %339

339:                                              ; preds = %338, %321
  br label %340

340:                                              ; preds = %339, %309
  br label %341

341:                                              ; preds = %340, %301
  %342 = load i16, i16* %15, align 2
  %343 = sext i16 %342 to i32
  %344 = icmp ne i32 %343, 0
  br i1 %344, label %349, label %345

345:                                              ; preds = %341
  %346 = load i16, i16* %31, align 2
  %347 = sext i16 %346 to i32
  %348 = icmp ne i32 %347, 0
  br label %349

349:                                              ; preds = %345, %341
  %350 = phi i1 [ true, %341 ], [ %348, %345 ]
  %351 = zext i1 %350 to i32
  %352 = trunc i32 %351 to i16
  store i16 %352, i16* %15, align 2
  br label %353

353:                                              ; preds = %349
  %354 = load i32, i32* %28, align 4
  %355 = add nsw i32 %354, 1
  store i32 %355, i32* %28, align 4
  br label %184, !llvm.loop !37

356:                                              ; preds = %184
  br label %357

357:                                              ; preds = %356
  %358 = load i32, i32* %20, align 4
  %359 = add nsw i32 %358, 1
  store i32 %359, i32* %20, align 4
  br label %32, !llvm.loop !38

360:                                              ; preds = %32
  %361 = load i16, i16* %15, align 2
  ret i16 %361
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @freeTree(%struct.configtree* noundef %0) #0 {
  %2 = alloca %struct.configtree*, align 8
  %3 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %2, align 8
  store i32 0, i32* %3, align 4
  br label %4

4:                                                ; preds = %14, %1
  %5 = load i32, i32* %3, align 4
  %6 = load %struct.configtree*, %struct.configtree** %2, align 8
  %7 = getelementptr inbounds %struct.configtree, %struct.configtree* %6, i32 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = icmp slt i32 %5, %8
  br i1 %9, label %10, label %17

10:                                               ; preds = %4
  %11 = load %struct.configtree*, %struct.configtree** %2, align 8
  %12 = load i32, i32* %3, align 4
  %13 = call %struct.configtree* @getChild(%struct.configtree* noundef %11, i32 noundef %12)
  call void @freeTree(%struct.configtree* noundef %13)
  br label %14

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %3, align 4
  br label %4, !llvm.loop !39

17:                                               ; preds = %4
  %18 = load %struct.configtree*, %struct.configtree** %2, align 8
  %19 = getelementptr inbounds %struct.configtree, %struct.configtree* %18, i32 0, i32 4
  %20 = load %struct.config*, %struct.config** %19, align 8
  %21 = icmp ne %struct.config* %20, null
  br i1 %21, label %22, label %26

22:                                               ; preds = %17
  %23 = load %struct.configtree*, %struct.configtree** %2, align 8
  %24 = getelementptr inbounds %struct.configtree, %struct.configtree* %23, i32 0, i32 4
  %25 = load %struct.config*, %struct.config** %24, align 8
  call void @cfgFreeConfig(%struct.config* noundef %25)
  br label %26

26:                                               ; preds = %22, %17
  %27 = load %struct.configtree*, %struct.configtree** %2, align 8
  %28 = getelementptr inbounds %struct.configtree, %struct.configtree* %27, i32 0, i32 2
  %29 = load %struct.configtree**, %struct.configtree*** %28, align 8
  %30 = icmp ne %struct.configtree** %29, null
  br i1 %30, label %31, label %36

31:                                               ; preds = %26
  %32 = load %struct.configtree*, %struct.configtree** %2, align 8
  %33 = getelementptr inbounds %struct.configtree, %struct.configtree* %32, i32 0, i32 2
  %34 = load %struct.configtree**, %struct.configtree*** %33, align 8
  %35 = bitcast %struct.configtree** %34 to i8*
  call void @free(i8* noundef %35) #7
  br label %36

36:                                               ; preds = %31, %26
  %37 = load %struct.configtree*, %struct.configtree** %2, align 8
  %38 = getelementptr inbounds %struct.configtree, %struct.configtree* %37, i32 0, i32 7
  %39 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %38, align 8
  %40 = icmp ne %struct.boundingboxLoop* %39, null
  br i1 %40, label %41, label %46

41:                                               ; preds = %36
  %42 = load %struct.configtree*, %struct.configtree** %2, align 8
  %43 = getelementptr inbounds %struct.configtree, %struct.configtree* %42, i32 0, i32 7
  %44 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %43, align 8
  %45 = bitcast %struct.boundingboxLoop* %44 to i8*
  call void @free(i8* noundef %45) #7
  br label %46

46:                                               ; preds = %41, %36
  %47 = load %struct.configtree*, %struct.configtree** %2, align 8
  %48 = getelementptr inbounds %struct.configtree, %struct.configtree* %47, i32 0, i32 8
  %49 = load %struct.boundingboxStem*, %struct.boundingboxStem** %48, align 8
  %50 = icmp ne %struct.boundingboxStem* %49, null
  br i1 %50, label %51, label %59

51:                                               ; preds = %46
  %52 = load %struct.configtree*, %struct.configtree** %2, align 8
  %53 = getelementptr inbounds %struct.configtree, %struct.configtree* %52, i32 0, i32 8
  %54 = load %struct.boundingboxStem*, %struct.boundingboxStem** %53, align 8
  call void @freeBulges(%struct.boundingboxStem* noundef %54)
  %55 = load %struct.configtree*, %struct.configtree** %2, align 8
  %56 = getelementptr inbounds %struct.configtree, %struct.configtree* %55, i32 0, i32 8
  %57 = load %struct.boundingboxStem*, %struct.boundingboxStem** %56, align 8
  %58 = bitcast %struct.boundingboxStem* %57 to i8*
  call void @free(i8* noundef %58) #7
  br label %59

59:                                               ; preds = %51, %46
  %60 = load %struct.configtree*, %struct.configtree** %2, align 8
  %61 = bitcast %struct.configtree* %60 to i8*
  call void @free(i8* noundef %61) #7
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfgGenHandleStem(i32 noundef %0, i16* noundef %1, %struct.tBaseInformation* noundef %2, double noundef %3, double noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i16*, align 8
  %8 = alloca %struct.tBaseInformation*, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca i16, align 2
  %12 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i16* %1, i16** %7, align 8
  store %struct.tBaseInformation* %2, %struct.tBaseInformation** %8, align 8
  store double %3, double* %9, align 8
  store double %4, double* %10, align 8
  store i16 1, i16* %11, align 2
  %13 = load i32, i32* %6, align 4
  store i32 %13, i32* %12, align 4
  br label %14

14:                                               ; preds = %42, %5
  %15 = load i16, i16* %11, align 2
  %16 = icmp ne i16 %15, 0
  br i1 %16, label %17, label %43

17:                                               ; preds = %14
  %18 = load i16*, i16** %7, align 8
  %19 = load i32, i32* %12, align 4
  %20 = add nsw i32 %19, 1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i16, i16* %18, i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = sext i16 %23 to i32
  %25 = load i16*, i16** %7, align 8
  %26 = load i32, i32* %12, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i16, i16* %25, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = sub nsw i32 %30, 1
  %32 = icmp eq i32 %24, %31
  br i1 %32, label %33, label %36

33:                                               ; preds = %17
  %34 = load i32, i32* %12, align 4
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %12, align 4
  br label %42

36:                                               ; preds = %17
  %37 = load i32, i32* %12, align 4
  %38 = load i16*, i16** %7, align 8
  %39 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %40 = load double, double* %9, align 8
  %41 = load double, double* %10, align 8
  call void @cfgGenHandleLoop(i32 noundef %37, i16* noundef %38, %struct.tBaseInformation* noundef %39, double noundef %40, double noundef %41)
  store i16 0, i16* %11, align 2
  br label %42

42:                                               ; preds = %36, %33
  br label %14, !llvm.loop !40

43:                                               ; preds = %14
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfgGenHandleLoop(i32 noundef %0, i16* noundef %1, %struct.tBaseInformation* noundef %2, double noundef %3, double noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i16*, align 8
  %8 = alloca %struct.tBaseInformation*, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i16, align 2
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca double, align 8
  %20 = alloca %struct.config*, align 8
  %21 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i16* %1, i16** %7, align 8
  store %struct.tBaseInformation* %2, %struct.tBaseInformation** %8, align 8
  store double %3, double* %9, align 8
  store double %4, double* %10, align 8
  %22 = load i32, i32* %6, align 4
  store i32 %22, i32* %11, align 4
  %23 = load i16*, i16** %7, align 8
  %24 = load i32, i32* %6, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i16, i16* %23, i64 %25
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  store i32 %28, i32* %12, align 4
  store i32 0, i32* %13, align 4
  store i32 1, i32* %14, align 4
  %29 = load i32, i32* %11, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %15, align 4
  br label %31

31:                                               ; preds = %70, %5
  %32 = load i32, i32* %15, align 4
  %33 = load i32, i32* %12, align 4
  %34 = icmp slt i32 %32, %33
  br i1 %34, label %35, label %71

35:                                               ; preds = %31
  %36 = load i16*, i16** %7, align 8
  %37 = load i32, i32* %15, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i16, i16* %36, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = sext i16 %40 to i32
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %48

43:                                               ; preds = %35
  %44 = load i32, i32* %13, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %13, align 4
  %46 = load i32, i32* %15, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %15, align 4
  br label %70

48:                                               ; preds = %35
  %49 = load i16*, i16** %7, align 8
  %50 = load i32, i32* %15, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i16, i16* %49, i64 %51
  %53 = load i16, i16* %52, align 2
  %54 = sext i16 %53 to i32
  %55 = load i32, i32* %15, align 4
  %56 = icmp sgt i32 %54, %55
  br i1 %56, label %57, label %66

57:                                               ; preds = %48
  %58 = load i32, i32* %14, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %14, align 4
  %60 = load i16*, i16** %7, align 8
  %61 = load i32, i32* %15, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i16, i16* %60, i64 %62
  %64 = load i16, i16* %63, align 2
  %65 = sext i16 %64 to i32
  store i32 %65, i32* %15, align 4
  br label %69

66:                                               ; preds = %48
  %67 = load i32, i32* %15, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %15, align 4
  br label %69

69:                                               ; preds = %66, %57
  br label %70

70:                                               ; preds = %69, %43
  br label %31, !llvm.loop !41

71:                                               ; preds = %31
  %72 = load i32, i32* %14, align 4
  %73 = icmp eq i32 %72, 2
  br i1 %73, label %74, label %77

74:                                               ; preds = %71
  %75 = load i32, i32* %13, align 4
  %76 = icmp eq i32 %75, 1
  br label %77

77:                                               ; preds = %74, %71
  %78 = phi i1 [ false, %71 ], [ %76, %74 ]
  %79 = zext i1 %78 to i32
  %80 = trunc i32 %79 to i16
  store i16 %80, i16* %16, align 2
  %81 = load i16, i16* %16, align 2
  %82 = icmp ne i16 %81, 0
  br i1 %82, label %83, label %107

83:                                               ; preds = %77
  %84 = load i16*, i16** %7, align 8
  %85 = load i32, i32* %11, align 4
  %86 = add nsw i32 %85, 1
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i16, i16* %84, i64 %87
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i32
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %99

92:                                               ; preds = %83
  %93 = load i32, i32* %11, align 4
  %94 = add nsw i32 %93, 2
  %95 = load i16*, i16** %7, align 8
  %96 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %97 = load double, double* %9, align 8
  %98 = load double, double* %10, align 8
  call void @cfgGenHandleStem(i32 noundef %94, i16* noundef %95, %struct.tBaseInformation* noundef %96, double noundef %97, double noundef %98)
  br label %106

99:                                               ; preds = %83
  %100 = load i32, i32* %11, align 4
  %101 = add nsw i32 %100, 1
  %102 = load i16*, i16** %7, align 8
  %103 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %104 = load double, double* %9, align 8
  %105 = load double, double* %10, align 8
  call void @cfgGenHandleStem(i32 noundef %101, i16* noundef %102, %struct.tBaseInformation* noundef %103, double noundef %104, double noundef %105)
  br label %106

106:                                              ; preds = %99, %92
  br label %177

107:                                              ; preds = %77
  %108 = load i32, i32* %14, align 4
  store i32 %108, i32* %17, align 4
  %109 = load i32, i32* %13, align 4
  %110 = load i32, i32* %14, align 4
  %111 = add nsw i32 %109, %110
  store i32 %111, i32* %18, align 4
  %112 = load double, double* %10, align 8
  %113 = load double, double* %9, align 8
  %114 = load i32, i32* %17, align 4
  %115 = trunc i32 %114 to i16
  %116 = load i32, i32* %18, align 4
  %117 = trunc i32 %116 to i16
  %118 = call double @approximateConfigArcRadius(double noundef %112, double noundef %113, i16 noundef signext %115, i16 noundef signext %117, double noundef 0x401921FB54442D18)
  store double %118, double* %19, align 8
  %119 = load i16*, i16** %7, align 8
  %120 = load i32, i32* %11, align 4
  %121 = load double, double* %9, align 8
  %122 = fptosi double %121 to i32
  %123 = load double, double* %10, align 8
  %124 = fptosi double %123 to i32
  %125 = load double, double* %19, align 8
  %126 = call %struct.config* @cfgGenerateDefaultConfig(i16* noundef %119, i32 noundef %120, i32 noundef %122, i32 noundef %124, double noundef %125)
  store %struct.config* %126, %struct.config** %20, align 8
  %127 = load %struct.config*, %struct.config** %20, align 8
  %128 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %129 = load i32, i32* %11, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %128, i64 %130
  %132 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %131, i32 0, i32 3
  store %struct.config* %127, %struct.config** %132, align 8
  %133 = load i32, i32* %11, align 4
  %134 = add nsw i32 %133, 1
  store i32 %134, i32* %21, align 4
  br label %135

135:                                              ; preds = %175, %107
  %136 = load i32, i32* %21, align 4
  %137 = load i32, i32* %12, align 4
  %138 = icmp slt i32 %136, %137
  br i1 %138, label %139, label %176

139:                                              ; preds = %135
  %140 = load i16*, i16** %7, align 8
  %141 = load i32, i32* %21, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds i16, i16* %140, i64 %142
  %144 = load i16, i16* %143, align 2
  %145 = sext i16 %144 to i32
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %150

147:                                              ; preds = %139
  %148 = load i32, i32* %21, align 4
  %149 = add nsw i32 %148, 1
  store i32 %149, i32* %21, align 4
  br label %175

150:                                              ; preds = %139
  %151 = load i16*, i16** %7, align 8
  %152 = load i32, i32* %21, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i16, i16* %151, i64 %153
  %155 = load i16, i16* %154, align 2
  %156 = sext i16 %155 to i32
  %157 = load i32, i32* %21, align 4
  %158 = icmp sgt i32 %156, %157
  br i1 %158, label %159, label %171

159:                                              ; preds = %150
  %160 = load i32, i32* %21, align 4
  %161 = load i16*, i16** %7, align 8
  %162 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %163 = load double, double* %9, align 8
  %164 = load double, double* %10, align 8
  call void @cfgGenHandleStem(i32 noundef %160, i16* noundef %161, %struct.tBaseInformation* noundef %162, double noundef %163, double noundef %164)
  %165 = load i16*, i16** %7, align 8
  %166 = load i32, i32* %21, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i16, i16* %165, i64 %167
  %169 = load i16, i16* %168, align 2
  %170 = sext i16 %169 to i32
  store i32 %170, i32* %21, align 4
  br label %174

171:                                              ; preds = %150
  %172 = load i32, i32* %21, align 4
  %173 = add nsw i32 %172, 1
  store i32 %173, i32* %21, align 4
  br label %174

174:                                              ; preds = %171, %159
  br label %175

175:                                              ; preds = %174, %147
  br label %135, !llvm.loop !42

176:                                              ; preds = %135
  br label %177

177:                                              ; preds = %176, %106
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @approximateConfigArcRadius(double noundef %0, double noundef %1, i16 noundef signext %2, i16 noundef signext %3, double noundef %4) #0 {
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i16, align 2
  %9 = alloca i16, align 2
  %10 = alloca double, align 8
  %11 = alloca i16, align 2
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca i32, align 4
  %16 = alloca double, align 8
  store double %0, double* %6, align 8
  store double %1, double* %7, align 8
  store i16 %2, i16* %8, align 2
  store i16 %3, i16* %9, align 2
  store double %4, double* %10, align 8
  store i16 1000, i16* %11, align 2
  %17 = load double, double* %7, align 8
  %18 = fdiv double %17, 2.000000e+00
  %19 = load double, double* %10, align 8
  %20 = load i16, i16* %8, align 2
  %21 = sext i16 %20 to i32
  %22 = load i16, i16* %9, align 2
  %23 = sext i16 %22 to i32
  %24 = add nsw i32 %21, %23
  %25 = sitofp i32 %24 to double
  %26 = fdiv double %19, %25
  %27 = fdiv double %26, 2.000000e+00
  %28 = call double @sin(double noundef %27) #7
  %29 = fdiv double %18, %28
  store double %29, double* %12, align 8
  %30 = load double, double* %6, align 8
  %31 = fdiv double %30, 2.000000e+00
  %32 = load double, double* %10, align 8
  %33 = load i16, i16* %8, align 2
  %34 = sext i16 %33 to i32
  %35 = load i16, i16* %9, align 2
  %36 = sext i16 %35 to i32
  %37 = add nsw i32 %34, %36
  %38 = sitofp i32 %37 to double
  %39 = fdiv double %32, %38
  %40 = fdiv double %39, 2.000000e+00
  %41 = call double @sin(double noundef %40) #7
  %42 = fdiv double %31, %41
  store double %42, double* %13, align 8
  %43 = load double, double* %12, align 8
  %44 = load double, double* %13, align 8
  %45 = fadd double %43, %44
  %46 = fmul double 5.000000e-01, %45
  store double %46, double* %14, align 8
  %47 = load double, double* %14, align 8
  %48 = load double, double* %6, align 8
  %49 = fmul double 5.000000e-01, %48
  %50 = call double @llvm.maxnum.f64(double %47, double %49)
  store double %50, double* %14, align 8
  %51 = load double, double* %14, align 8
  %52 = load double, double* %7, align 8
  %53 = fmul double 5.000000e-01, %52
  %54 = call double @llvm.maxnum.f64(double %51, double %53)
  store double %54, double* %14, align 8
  store i32 0, i32* %15, align 4
  store i32 0, i32* %15, align 4
  br label %55

55:                                               ; preds = %126, %5
  %56 = load i32, i32* %15, align 4
  %57 = icmp slt i32 %56, 1000
  br i1 %57, label %58, label %129

58:                                               ; preds = %55
  %59 = load i16, i16* %8, align 2
  %60 = sext i16 %59 to i32
  %61 = sitofp i32 %60 to double
  %62 = load double, double* %6, align 8
  %63 = load double, double* %14, align 8
  %64 = fmul double 2.000000e+00, %63
  %65 = fdiv double %62, %64
  %66 = call double @asin(double noundef %65) #7
  %67 = load i16, i16* %9, align 2
  %68 = sext i16 %67 to i32
  %69 = sitofp i32 %68 to double
  %70 = load double, double* %7, align 8
  %71 = load double, double* %14, align 8
  %72 = fmul double 2.000000e+00, %71
  %73 = fdiv double %70, %72
  %74 = call double @asin(double noundef %73) #7
  %75 = fmul double %69, %74
  %76 = call double @llvm.fmuladd.f64(double %61, double %66, double %75)
  %77 = load double, double* %10, align 8
  %78 = fdiv double %77, 2.000000e+00
  %79 = fsub double %76, %78
  %80 = fmul double 2.000000e+00, %79
  %81 = load double, double* %6, align 8
  %82 = load i16, i16* %8, align 2
  %83 = sext i16 %82 to i32
  %84 = sitofp i32 %83 to double
  %85 = fmul double %81, %84
  %86 = load double, double* %14, align 8
  %87 = load double, double* %14, align 8
  %88 = load double, double* %14, align 8
  %89 = load double, double* %6, align 8
  %90 = load double, double* %6, align 8
  %91 = fmul double %89, %90
  %92 = fdiv double %91, 4.000000e+00
  %93 = fneg double %92
  %94 = call double @llvm.fmuladd.f64(double %87, double %88, double %93)
  %95 = call double @sqrt(double noundef %94) #7
  %96 = fmul double %86, %95
  %97 = fdiv double %85, %96
  %98 = load double, double* %7, align 8
  %99 = load i16, i16* %9, align 2
  %100 = sext i16 %99 to i32
  %101 = sitofp i32 %100 to double
  %102 = fmul double %98, %101
  %103 = load double, double* %14, align 8
  %104 = load double, double* %14, align 8
  %105 = load double, double* %14, align 8
  %106 = load double, double* %7, align 8
  %107 = load double, double* %7, align 8
  %108 = fmul double %106, %107
  %109 = fdiv double %108, 4.000000e+00
  %110 = fneg double %109
  %111 = call double @llvm.fmuladd.f64(double %104, double %105, double %110)
  %112 = call double @sqrt(double noundef %111) #7
  %113 = fmul double %103, %112
  %114 = fdiv double %102, %113
  %115 = fadd double %97, %114
  %116 = fneg double %115
  %117 = fdiv double %80, %116
  store double %117, double* %16, align 8
  %118 = load double, double* %16, align 8
  %119 = load double, double* %14, align 8
  %120 = fsub double %119, %118
  store double %120, double* %14, align 8
  %121 = load double, double* %16, align 8
  %122 = call double @llvm.fabs.f64(double %121)
  %123 = fcmp olt double %122, 1.000000e-03
  br i1 %123, label %124, label %125

124:                                              ; preds = %58
  br label %129

125:                                              ; preds = %58
  br label %126

126:                                              ; preds = %125
  %127 = load i32, i32* %15, align 4
  %128 = add nsw i32 %127, 1
  store i32 %128, i32* %15, align 4
  br label %55, !llvm.loop !43

129:                                              ; preds = %124, %55
  %130 = load double, double* %14, align 8
  %131 = load double, double* %12, align 8
  %132 = fcmp olt double %130, %131
  br i1 %132, label %133, label %135

133:                                              ; preds = %129
  %134 = load double, double* %12, align 8
  store double %134, double* %14, align 8
  br label %142

135:                                              ; preds = %129
  %136 = load double, double* %14, align 8
  %137 = load double, double* %13, align 8
  %138 = fcmp ogt double %136, %137
  br i1 %138, label %139, label %141

139:                                              ; preds = %135
  %140 = load double, double* %13, align 8
  store double %140, double* %14, align 8
  br label %141

141:                                              ; preds = %139, %135
  br label %142

142:                                              ; preds = %141, %133
  %143 = load double, double* %14, align 8
  ret double %143
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.config* @cfgGenerateDefaultConfig(i16* noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, double noundef %4) #0 {
  %6 = alloca i16*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca double, align 8
  %11 = alloca %struct.config*, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca i32, align 4
  %15 = alloca double, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca %struct.configArc, align 8
  store i16* %0, i16** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store double %4, double* %10, align 8
  %20 = load double, double* %10, align 8
  %21 = call %struct.config* @cfgCreateConfig(double noundef %20)
  store %struct.config* %21, %struct.config** %11, align 8
  %22 = load i32, i32* %9, align 4
  %23 = sitofp i32 %22 to double
  %24 = load double, double* %10, align 8
  %25 = fmul double 2.000000e+00, %24
  %26 = fdiv double %23, %25
  %27 = call double @asin(double noundef %26) #7
  %28 = fmul double 2.000000e+00, %27
  store double %28, double* %12, align 8
  %29 = load i32, i32* %8, align 4
  %30 = sitofp i32 %29 to double
  %31 = load double, double* %10, align 8
  %32 = fmul double 2.000000e+00, %31
  %33 = fdiv double %30, %32
  %34 = call double @asin(double noundef %33) #7
  %35 = fmul double 2.000000e+00, %34
  store double %35, double* %13, align 8
  store i32 0, i32* %14, align 4
  %36 = load i32, i32* %7, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %16, align 4
  br label %38

38:                                               ; preds = %81, %5
  %39 = load i32, i32* %16, align 4
  %40 = load i16*, i16** %6, align 8
  %41 = load i32, i32* %7, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i16, i16* %40, i64 %42
  %44 = load i16, i16* %43, align 2
  %45 = sext i16 %44 to i32
  %46 = icmp sle i32 %39, %45
  br i1 %46, label %47, label %82

47:                                               ; preds = %38
  %48 = load i16*, i16** %6, align 8
  %49 = load i32, i32* %16, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i16, i16* %48, i64 %50
  %52 = load i16, i16* %51, align 2
  %53 = sext i16 %52 to i32
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %58

55:                                               ; preds = %47
  %56 = load i32, i32* %16, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %16, align 4
  br label %81

58:                                               ; preds = %47
  %59 = load %struct.config*, %struct.config** %11, align 8
  %60 = getelementptr inbounds %struct.config, %struct.config* %59, i32 0, i32 4
  %61 = load i32, i32* %60, align 8
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %60, align 8
  %63 = load i32, i32* %16, align 4
  %64 = load i16*, i16** %6, align 8
  %65 = load i32, i32* %7, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i16, i16* %64, i64 %66
  %68 = load i16, i16* %67, align 2
  %69 = sext i16 %68 to i32
  %70 = icmp ne i32 %63, %69
  br i1 %70, label %71, label %79

71:                                               ; preds = %58
  %72 = load i16*, i16** %6, align 8
  %73 = load i32, i32* %16, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i16, i16* %72, i64 %74
  %76 = load i16, i16* %75, align 2
  %77 = sext i16 %76 to i32
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %16, align 4
  br label %80

79:                                               ; preds = %58
  br label %82

80:                                               ; preds = %71
  br label %81

81:                                               ; preds = %80, %55
  br label %38, !llvm.loop !44

82:                                               ; preds = %79, %38
  %83 = load %struct.config*, %struct.config** %11, align 8
  %84 = getelementptr inbounds %struct.config, %struct.config* %83, i32 0, i32 4
  %85 = load i32, i32* %84, align 8
  %86 = sext i32 %85 to i64
  %87 = mul i64 %86, 16
  %88 = trunc i64 %87 to i32
  %89 = call i8* @vrna_alloc(i32 noundef %88)
  %90 = bitcast i8* %89 to %struct.configArc*
  %91 = load %struct.config*, %struct.config** %11, align 8
  %92 = getelementptr inbounds %struct.config, %struct.config* %91, i32 0, i32 3
  store %struct.configArc* %90, %struct.configArc** %92, align 8
  %93 = load i32, i32* %7, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %16, align 4
  store i32 0, i32* %17, align 4
  store i32 0, i32* %18, align 4
  br label %95

95:                                               ; preds = %162, %82
  %96 = load i32, i32* %16, align 4
  %97 = load i16*, i16** %6, align 8
  %98 = load i32, i32* %7, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i16, i16* %97, i64 %99
  %101 = load i16, i16* %100, align 2
  %102 = sext i16 %101 to i32
  %103 = icmp sle i32 %96, %102
  br i1 %103, label %104, label %163

104:                                              ; preds = %95
  %105 = load i16*, i16** %6, align 8
  %106 = load i32, i32* %16, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i16, i16* %105, i64 %107
  %109 = load i16, i16* %108, align 2
  %110 = sext i16 %109 to i32
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %117

112:                                              ; preds = %104
  %113 = load i32, i32* %14, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* %14, align 4
  %115 = load i32, i32* %16, align 4
  %116 = add nsw i32 %115, 1
  store i32 %116, i32* %16, align 4
  br label %162

117:                                              ; preds = %104
  %118 = load double, double* %12, align 8
  %119 = load i32, i32* %14, align 4
  %120 = add nsw i32 %119, 1
  %121 = sitofp i32 %120 to double
  %122 = load double, double* %13, align 8
  %123 = call double @llvm.fmuladd.f64(double %121, double %122, double %118)
  store double %123, double* %15, align 8
  %124 = load i32, i32* %14, align 4
  %125 = add nsw i32 %124, 1
  store i32 %125, i32* %18, align 4
  %126 = load %struct.config*, %struct.config** %11, align 8
  %127 = getelementptr inbounds %struct.config, %struct.config* %126, i32 0, i32 3
  %128 = load %struct.configArc*, %struct.configArc** %127, align 8
  %129 = load i32, i32* %17, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds %struct.configArc, %struct.configArc* %128, i64 %130
  %132 = load double, double* %15, align 8
  %133 = load i32, i32* %18, align 4
  %134 = call { i32, double } @cfgCreateConfigArc(double noundef %132, i32 noundef %133)
  %135 = bitcast %struct.configArc* %19 to { i32, double }*
  %136 = getelementptr inbounds { i32, double }, { i32, double }* %135, i32 0, i32 0
  %137 = extractvalue { i32, double } %134, 0
  store i32 %137, i32* %136, align 8
  %138 = getelementptr inbounds { i32, double }, { i32, double }* %135, i32 0, i32 1
  %139 = extractvalue { i32, double } %134, 1
  store double %139, double* %138, align 8
  %140 = bitcast %struct.configArc* %131 to i8*
  %141 = bitcast %struct.configArc* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %140, i8* align 8 %141, i64 16, i1 false)
  %142 = load i32, i32* %17, align 4
  %143 = add nsw i32 %142, 1
  store i32 %143, i32* %17, align 4
  %144 = load i32, i32* %16, align 4
  %145 = load i16*, i16** %6, align 8
  %146 = load i32, i32* %7, align 4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds i16, i16* %145, i64 %147
  %149 = load i16, i16* %148, align 2
  %150 = sext i16 %149 to i32
  %151 = icmp ne i32 %144, %150
  br i1 %151, label %152, label %160

152:                                              ; preds = %117
  store i32 0, i32* %14, align 4
  %153 = load i16*, i16** %6, align 8
  %154 = load i32, i32* %16, align 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds i16, i16* %153, i64 %155
  %157 = load i16, i16* %156, align 2
  %158 = sext i16 %157 to i32
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %16, align 4
  br label %161

160:                                              ; preds = %117
  br label %163

161:                                              ; preds = %152
  br label %162

162:                                              ; preds = %161, %112
  br label %95, !llvm.loop !45

163:                                              ; preds = %160, %95
  %164 = load %struct.config*, %struct.config** %11, align 8
  ret %struct.config* %164
}

; Function Attrs: nounwind
declare dso_local double @sin(double noundef) #2

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.maxnum.f64(double, double) #3

; Function Attrs: nounwind
declare dso_local double @asin(double noundef) #2

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.config* @cfgCreateConfig(double noundef %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca %struct.config*, align 8
  store double %0, double* %2, align 8
  %4 = call i8* @vrna_alloc(i32 noundef 40)
  %5 = bitcast i8* %4 to %struct.config*
  store %struct.config* %5, %struct.config** %3, align 8
  %6 = load double, double* %2, align 8
  %7 = load %struct.config*, %struct.config** %3, align 8
  %8 = getelementptr inbounds %struct.config, %struct.config* %7, i32 0, i32 0
  store double %6, double* %8, align 8
  %9 = load double, double* %2, align 8
  %10 = load %struct.config*, %struct.config** %3, align 8
  %11 = getelementptr inbounds %struct.config, %struct.config* %10, i32 0, i32 1
  store double %9, double* %11, align 8
  %12 = load double, double* %2, align 8
  %13 = load %struct.config*, %struct.config** %3, align 8
  %14 = getelementptr inbounds %struct.config, %struct.config* %13, i32 0, i32 2
  store double %12, double* %14, align 8
  %15 = load %struct.config*, %struct.config** %3, align 8
  %16 = getelementptr inbounds %struct.config, %struct.config* %15, i32 0, i32 3
  store %struct.configArc* null, %struct.configArc** %16, align 8
  %17 = load %struct.config*, %struct.config** %3, align 8
  %18 = getelementptr inbounds %struct.config, %struct.config* %17, i32 0, i32 4
  store i32 0, i32* %18, align 8
  %19 = load %struct.config*, %struct.config** %3, align 8
  ret %struct.config* %19
}

; Function Attrs: noinline nounwind optnone uwtable
define internal { i32, double } @cfgCreateConfigArc(double noundef %0, i32 noundef %1) #0 {
  %3 = alloca %struct.configArc, align 8
  %4 = alloca double, align 8
  %5 = alloca i32, align 4
  store double %0, double* %4, align 8
  store i32 %1, i32* %5, align 4
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.configArc, %struct.configArc* %3, i32 0, i32 0
  store i32 %6, i32* %7, align 8
  %8 = load double, double* %4, align 8
  %9 = getelementptr inbounds %struct.configArc, %struct.configArc* %3, i32 0, i32 1
  store double %8, double* %9, align 8
  %10 = bitcast %struct.configArc* %3 to { i32, double }*
  %11 = load { i32, double }, { i32, double }* %10, align 8
  ret { i32, double } %11
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @handleExteriorBases(i16* noundef %0, i16 noundef signext %1, %struct.tBaseInformation* noundef %2, i32 noundef %3) #0 {
  %5 = alloca i16*, align 8
  %6 = alloca i16, align 2
  %7 = alloca %struct.tBaseInformation*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i16, align 2
  store i16* %0, i16** %5, align 8
  store i16 %1, i16* %6, align 2
  store %struct.tBaseInformation* %2, %struct.tBaseInformation** %7, align 8
  store i32 %3, i32* %8, align 4
  %10 = load i16*, i16** %5, align 8
  %11 = getelementptr inbounds i16, i16* %10, i64 0
  %12 = load i16, i16* %11, align 2
  store i16 %12, i16* %9, align 2
  %13 = load i16, i16* %6, align 2
  %14 = sext i16 %13 to i32
  %15 = icmp sgt i32 %14, 1
  br i1 %15, label %16, label %36

16:                                               ; preds = %4
  %17 = load %struct.tBaseInformation*, %struct.tBaseInformation** %7, align 8
  %18 = load i16, i16* %6, align 2
  %19 = sext i16 %18 to i64
  %20 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %17, i64 %19
  %21 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %20, i32 0, i32 1
  %22 = load double, double* %21, align 8
  %23 = load i32, i32* %8, align 4
  %24 = sitofp i32 %23 to double
  %25 = call double @llvm.fmuladd.f64(double %24, double 0x3FF921FB54442D18, double %22)
  %26 = load %struct.tBaseInformation*, %struct.tBaseInformation** %7, align 8
  %27 = load i16, i16* %6, align 2
  %28 = sext i16 %27 to i64
  %29 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %26, i64 %28
  %30 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %29, i32 0, i32 1
  store double %25, double* %30, align 8
  %31 = load %struct.tBaseInformation*, %struct.tBaseInformation** %7, align 8
  %32 = load i16, i16* %6, align 2
  %33 = sext i16 %32 to i64
  %34 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %31, i64 %33
  %35 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %34, i32 0, i32 0
  store i32 1, i32* %35, align 8
  br label %36

36:                                               ; preds = %16, %4
  br label %37

37:                                               ; preds = %53, %36
  %38 = load i16, i16* %6, align 2
  %39 = sext i16 %38 to i32
  %40 = load i16, i16* %9, align 2
  %41 = sext i16 %40 to i32
  %42 = icmp slt i32 %39, %41
  br i1 %42, label %43, label %51

43:                                               ; preds = %37
  %44 = load i16*, i16** %5, align 8
  %45 = load i16, i16* %6, align 2
  %46 = sext i16 %45 to i64
  %47 = getelementptr inbounds i16, i16* %44, i64 %46
  %48 = load i16, i16* %47, align 2
  %49 = sext i16 %48 to i32
  %50 = icmp sle i32 %49, 0
  br label %51

51:                                               ; preds = %43, %37
  %52 = phi i1 [ false, %37 ], [ %50, %43 ]
  br i1 %52, label %53, label %68

53:                                               ; preds = %51
  %54 = load %struct.tBaseInformation*, %struct.tBaseInformation** %7, align 8
  %55 = load i16, i16* %6, align 2
  %56 = sext i16 %55 to i32
  %57 = add nsw i32 %56, 1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %54, i64 %58
  %60 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %59, i32 0, i32 1
  store double 0.000000e+00, double* %60, align 8
  %61 = load %struct.tBaseInformation*, %struct.tBaseInformation** %7, align 8
  %62 = load i16, i16* %6, align 2
  %63 = sext i16 %62 to i64
  %64 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %61, i64 %63
  %65 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %64, i32 0, i32 0
  store i32 1, i32* %65, align 8
  %66 = load i16, i16* %6, align 2
  %67 = add i16 %66, 1
  store i16 %67, i16* %6, align 2
  br label %37, !llvm.loop !46

68:                                               ; preds = %51
  %69 = load i16, i16* %6, align 2
  %70 = sext i16 %69 to i32
  %71 = add nsw i32 %70, 1
  %72 = load i16, i16* %9, align 2
  %73 = sext i16 %72 to i32
  %74 = icmp sle i32 %71, %73
  br i1 %74, label %75, label %91

75:                                               ; preds = %68
  %76 = load i32, i32* %8, align 4
  %77 = sitofp i32 %76 to double
  %78 = fmul double %77, 0x3FF921FB54442D18
  %79 = load %struct.tBaseInformation*, %struct.tBaseInformation** %7, align 8
  %80 = load i16, i16* %6, align 2
  %81 = sext i16 %80 to i32
  %82 = add nsw i32 %81, 1
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %79, i64 %83
  %85 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %84, i32 0, i32 1
  store double %78, double* %85, align 8
  %86 = load %struct.tBaseInformation*, %struct.tBaseInformation** %7, align 8
  %87 = load i16, i16* %6, align 2
  %88 = sext i16 %87 to i64
  %89 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %86, i64 %88
  %90 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %89, i32 0, i32 0
  store i32 1, i32* %90, align 8
  br label %97

91:                                               ; preds = %68
  %92 = load %struct.tBaseInformation*, %struct.tBaseInformation** %7, align 8
  %93 = load i16, i16* %6, align 2
  %94 = sext i16 %93 to i64
  %95 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %92, i64 %94
  %96 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %95, i32 0, i32 0
  store i32 1, i32* %96, align 8
  br label %97

97:                                               ; preds = %91, %75
  %98 = load i16, i16* %6, align 2
  ret i16 %98
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @handleStem(i16* noundef %0, i16 noundef signext %1, double noundef %2, double noundef %3, %struct.tBaseInformation* noundef %4, i32 noundef %5) #0 {
  %7 = alloca i16*, align 8
  %8 = alloca i16, align 2
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca %struct.tBaseInformation*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i16, align 2
  store i16* %0, i16** %7, align 8
  store i16 %1, i16* %8, align 2
  store double %2, double* %9, align 8
  store double %3, double* %10, align 8
  store %struct.tBaseInformation* %4, %struct.tBaseInformation** %11, align 8
  store i32 %5, i32* %12, align 4
  %14 = load i16*, i16** %7, align 8
  %15 = load i16, i16* %8, align 2
  %16 = sext i16 %15 to i64
  %17 = getelementptr inbounds i16, i16* %14, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = sext i16 %18 to i32
  %20 = add nsw i32 %19, 1
  %21 = trunc i32 %20 to i16
  store i16 %21, i16* %13, align 2
  %22 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %23 = load i16, i16* %8, align 2
  %24 = sext i16 %23 to i64
  %25 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %22, i64 %24
  %26 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %25, i32 0, i32 0
  store i32 2, i32* %26, align 8
  %27 = load i16, i16* %8, align 2
  %28 = add i16 %27, 1
  store i16 %28, i16* %8, align 2
  br label %29

29:                                               ; preds = %69, %6
  %30 = load i16*, i16** %7, align 8
  %31 = load i16, i16* %8, align 2
  %32 = sext i16 %31 to i64
  %33 = getelementptr inbounds i16, i16* %30, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = sext i16 %34 to i32
  %36 = icmp sgt i32 %35, 0
  br i1 %36, label %37, label %67

37:                                               ; preds = %29
  %38 = load i16*, i16** %7, align 8
  %39 = load i16, i16* %8, align 2
  %40 = sext i16 %39 to i64
  %41 = getelementptr inbounds i16, i16* %38, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = sext i16 %42 to i32
  %44 = load i16, i16* %13, align 2
  %45 = sext i16 %44 to i32
  %46 = sub nsw i32 %45, 1
  %47 = icmp eq i32 %43, %46
  br i1 %47, label %65, label %48

48:                                               ; preds = %37
  %49 = load i16*, i16** %7, align 8
  %50 = load i16, i16* %8, align 2
  %51 = sext i16 %50 to i64
  %52 = getelementptr inbounds i16, i16* %49, i64 %51
  %53 = load i16, i16* %52, align 2
  %54 = sext i16 %53 to i32
  %55 = add nsw i32 %54, 1
  %56 = load i16*, i16** %7, align 8
  %57 = load i16, i16* %8, align 2
  %58 = sext i16 %57 to i32
  %59 = sub nsw i32 %58, 1
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i16, i16* %56, i64 %60
  %62 = load i16, i16* %61, align 2
  %63 = sext i16 %62 to i32
  %64 = icmp eq i32 %55, %63
  br label %65

65:                                               ; preds = %48, %37
  %66 = phi i1 [ true, %37 ], [ %64, %48 ]
  br label %67

67:                                               ; preds = %65, %29
  %68 = phi i1 [ false, %29 ], [ %66, %65 ]
  br i1 %68, label %69, label %84

69:                                               ; preds = %67
  %70 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %71 = load i16, i16* %8, align 2
  %72 = sext i16 %71 to i32
  %73 = add nsw i32 %72, 1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %70, i64 %74
  %76 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %75, i32 0, i32 1
  store double 0.000000e+00, double* %76, align 8
  %77 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %78 = load i16, i16* %8, align 2
  %79 = sext i16 %78 to i64
  %80 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %77, i64 %79
  %81 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %80, i32 0, i32 0
  store i32 2, i32* %81, align 8
  %82 = load i16, i16* %8, align 2
  %83 = add i16 %82, 1
  store i16 %83, i16* %8, align 2
  br label %29, !llvm.loop !47

84:                                               ; preds = %67
  %85 = load i16*, i16** %7, align 8
  %86 = load i16, i16* %8, align 2
  %87 = sext i16 %86 to i64
  %88 = getelementptr inbounds i16, i16* %85, i64 %87
  %89 = load i16, i16* %88, align 2
  %90 = sext i16 %89 to i32
  %91 = load i16, i16* %13, align 2
  %92 = sext i16 %91 to i32
  %93 = sub nsw i32 %92, 1
  %94 = icmp eq i32 %90, %93
  br i1 %94, label %95, label %96

95:                                               ; preds = %84
  br label %104

96:                                               ; preds = %84
  %97 = load i16, i16* %8, align 2
  %98 = add i16 %97, -1
  store i16 %98, i16* %8, align 2
  %99 = load i16*, i16** %7, align 8
  %100 = load double, double* %9, align 8
  %101 = load double, double* %10, align 8
  %102 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %103 = load i32, i32* %12, align 4
  call void @handleLoop(i16 noundef signext %98, i16* noundef %99, double noundef %100, double noundef %101, %struct.tBaseInformation* noundef %102, i32 noundef %103)
  br label %104

104:                                              ; preds = %96, %95
  %105 = load i16*, i16** %7, align 8
  %106 = load i16, i16* %8, align 2
  %107 = sext i16 %106 to i64
  %108 = getelementptr inbounds i16, i16* %105, i64 %107
  %109 = load i16, i16* %108, align 2
  store i16 %109, i16* %8, align 2
  %110 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %111 = load i16, i16* %8, align 2
  %112 = sext i16 %111 to i64
  %113 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %110, i64 %112
  %114 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %113, i32 0, i32 0
  store i32 2, i32* %114, align 8
  %115 = load i16, i16* %8, align 2
  %116 = add i16 %115, 1
  store i16 %116, i16* %8, align 2
  br label %117

117:                                              ; preds = %133, %104
  %118 = load i16, i16* %8, align 2
  %119 = sext i16 %118 to i32
  %120 = load i16, i16* %13, align 2
  %121 = sext i16 %120 to i32
  %122 = icmp slt i32 %119, %121
  br i1 %122, label %123, label %131

123:                                              ; preds = %117
  %124 = load i16, i16* %8, align 2
  %125 = sext i16 %124 to i32
  %126 = load i16*, i16** %7, align 8
  %127 = getelementptr inbounds i16, i16* %126, i64 0
  %128 = load i16, i16* %127, align 2
  %129 = sext i16 %128 to i32
  %130 = icmp slt i32 %125, %129
  br label %131

131:                                              ; preds = %123, %117
  %132 = phi i1 [ false, %117 ], [ %130, %123 ]
  br i1 %132, label %133, label %141

133:                                              ; preds = %131
  %134 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %135 = load i16, i16* %8, align 2
  %136 = sext i16 %135 to i64
  %137 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %134, i64 %136
  %138 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %137, i32 0, i32 0
  store i32 2, i32* %138, align 8
  %139 = load i16, i16* %8, align 2
  %140 = add i16 %139, 1
  store i16 %140, i16* %8, align 2
  br label %117, !llvm.loop !48

141:                                              ; preds = %131
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @handleLoop(i16 noundef signext %0, i16* noundef %1, double noundef %2, double noundef %3, %struct.tBaseInformation* noundef %4, i32 noundef %5) #0 {
  %7 = alloca i16, align 2
  %8 = alloca i16*, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca %struct.tBaseInformation*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i16, align 2
  %15 = alloca i16, align 2
  %16 = alloca i16, align 2
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  %21 = alloca double, align 8
  %22 = alloca double, align 8
  %23 = alloca double, align 8
  %24 = alloca double, align 8
  %25 = alloca double, align 8
  %26 = alloca i32, align 4
  %27 = alloca %struct.config*, align 8
  %28 = alloca i32, align 4
  %29 = alloca double, align 8
  store i16 %0, i16* %7, align 2
  store i16* %1, i16** %8, align 8
  store double %2, double* %9, align 8
  store double %3, double* %10, align 8
  store %struct.tBaseInformation* %4, %struct.tBaseInformation** %11, align 8
  store i32 %5, i32* %12, align 4
  %30 = load i16, i16* %7, align 2
  %31 = sext i16 %30 to i32
  store i32 %31, i32* %13, align 4
  %32 = load i16*, i16** %8, align 8
  %33 = load i16, i16* %7, align 2
  %34 = sext i16 %33 to i64
  %35 = getelementptr inbounds i16, i16* %32, i64 %34
  %36 = load i16, i16* %35, align 2
  store i16 %36, i16* %14, align 2
  %37 = load i16, i16* %7, align 2
  %38 = load i16*, i16** %8, align 8
  call void @countLoopPairs(i16* noundef %15, i16* noundef %16, i16 noundef signext %37, i16* noundef %38)
  %39 = load i16, i16* %7, align 2
  %40 = load i16*, i16** %8, align 8
  %41 = call i32 @detectBulge(i16 noundef signext %39, i16* noundef %40)
  store i32 %41, i32* %17, align 4
  %42 = load i32, i32* %17, align 4
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %314

44:                                               ; preds = %6
  %45 = load i16, i16* %16, align 2
  %46 = sext i16 %45 to i32
  %47 = load i16, i16* %15, align 2
  %48 = sext i16 %47 to i32
  %49 = sub nsw i32 %46, %48
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %314

51:                                               ; preds = %44
  %52 = load double, double* %10, align 8
  %53 = load i16, i16* %16, align 2
  %54 = sext i16 %53 to i32
  %55 = load i16, i16* %15, align 2
  %56 = sext i16 %55 to i32
  %57 = sub nsw i32 %54, %56
  %58 = add nsw i32 %57, 1
  %59 = sitofp i32 %58 to double
  %60 = fmul double %52, %59
  %61 = fdiv double %60, 2.000000e+00
  %62 = fptosi double %61 to i32
  store i32 %62, i32* %18, align 4
  %63 = load double, double* %10, align 8
  %64 = load i32, i32* %18, align 4
  %65 = mul nsw i32 2, %64
  %66 = sitofp i32 %65 to double
  %67 = fdiv double %63, %66
  %68 = call double @acos(double noundef %67) #7
  store double %68, double* %19, align 8
  %69 = load i16*, i16** %8, align 8
  %70 = load i16, i16* %7, align 2
  %71 = sext i16 %70 to i32
  %72 = add nsw i32 %71, 1
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i16, i16* %69, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = sext i16 %75 to i32
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %170

78:                                               ; preds = %51
  %79 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %80 = load i16, i16* %7, align 2
  %81 = sext i16 %80 to i32
  %82 = add nsw i32 %81, 1
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %79, i64 %83
  %85 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %84, i32 0, i32 1
  %86 = load double, double* %85, align 8
  %87 = load i32, i32* %12, align 4
  %88 = sitofp i32 %87 to double
  %89 = load double, double* %19, align 8
  %90 = call double @llvm.fmuladd.f64(double %88, double %89, double %86)
  %91 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %92 = load i16, i16* %7, align 2
  %93 = sext i16 %92 to i32
  %94 = add nsw i32 %93, 1
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %91, i64 %95
  %97 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %96, i32 0, i32 1
  store double %90, double* %97, align 8
  %98 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %99 = load i16, i16* %7, align 2
  %100 = sext i16 %99 to i64
  %101 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %98, i64 %100
  %102 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %101, i32 0, i32 0
  store i32 3, i32* %102, align 8
  %103 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %104 = load i16*, i16** %8, align 8
  %105 = load i16, i16* %7, align 2
  %106 = sext i16 %105 to i64
  %107 = getelementptr inbounds i16, i16* %104, i64 %106
  %108 = load i16, i16* %107, align 2
  %109 = sext i16 %108 to i64
  %110 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %103, i64 %109
  %111 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %110, i32 0, i32 0
  store i32 3, i32* %111, align 8
  %112 = load i16, i16* %7, align 2
  %113 = add i16 %112, 1
  store i16 %113, i16* %7, align 2
  %114 = load i32, i32* %12, align 4
  %115 = sub nsw i32 0, %114
  %116 = sitofp i32 %115 to double
  %117 = load double, double* %19, align 8
  %118 = fmul double %116, %117
  %119 = fmul double %118, 2.000000e+00
  %120 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %121 = load i16, i16* %7, align 2
  %122 = sext i16 %121 to i32
  %123 = add nsw i32 %122, 1
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %120, i64 %124
  %126 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %125, i32 0, i32 1
  store double %119, double* %126, align 8
  %127 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %128 = load i16, i16* %7, align 2
  %129 = sext i16 %128 to i64
  %130 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %127, i64 %129
  %131 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %130, i32 0, i32 0
  store i32 3, i32* %131, align 8
  %132 = load i16, i16* %7, align 2
  %133 = add i16 %132, 1
  store i16 %133, i16* %7, align 2
  %134 = load i32, i32* %12, align 4
  %135 = sitofp i32 %134 to double
  %136 = load double, double* %19, align 8
  %137 = fmul double %135, %136
  %138 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %139 = load i16, i16* %7, align 2
  %140 = sext i16 %139 to i32
  %141 = add nsw i32 %140, 1
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %138, i64 %142
  %144 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %143, i32 0, i32 1
  store double %137, double* %144, align 8
  %145 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %146 = load i16, i16* %7, align 2
  %147 = sext i16 %146 to i64
  %148 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %145, i64 %147
  %149 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %148, i32 0, i32 0
  store i32 3, i32* %149, align 8
  %150 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %151 = load i16*, i16** %8, align 8
  %152 = load i16, i16* %7, align 2
  %153 = sext i16 %152 to i64
  %154 = getelementptr inbounds i16, i16* %151, i64 %153
  %155 = load i16, i16* %154, align 2
  %156 = sext i16 %155 to i64
  %157 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %150, i64 %156
  %158 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %157, i32 0, i32 0
  store i32 3, i32* %158, align 8
  %159 = load i16*, i16** %8, align 8
  %160 = load i16, i16* %7, align 2
  %161 = load double, double* %9, align 8
  %162 = load double, double* %10, align 8
  %163 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %164 = load i32, i32* %12, align 4
  call void @handleStem(i16* noundef %159, i16 noundef signext %160, double noundef %161, double noundef %162, %struct.tBaseInformation* noundef %163, i32 noundef %164)
  %165 = load i16*, i16** %8, align 8
  %166 = load i16, i16* %7, align 2
  %167 = sext i16 %166 to i64
  %168 = getelementptr inbounds i16, i16* %165, i64 %167
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %7, align 2
  br label %313

170:                                              ; preds = %51
  %171 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %172 = load i16, i16* %7, align 2
  %173 = sext i16 %172 to i32
  %174 = add nsw i32 %173, 1
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %171, i64 %175
  %177 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %176, i32 0, i32 1
  %178 = load double, double* %177, align 8
  %179 = fadd double %178, 0.000000e+00
  %180 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %181 = load i16, i16* %7, align 2
  %182 = sext i16 %181 to i32
  %183 = add nsw i32 %182, 1
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %180, i64 %184
  %186 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %185, i32 0, i32 1
  store double %179, double* %186, align 8
  %187 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %188 = load i16, i16* %7, align 2
  %189 = sext i16 %188 to i64
  %190 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %187, i64 %189
  %191 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %190, i32 0, i32 0
  store i32 3, i32* %191, align 8
  %192 = load i16, i16* %7, align 2
  %193 = add i16 %192, 1
  store i16 %193, i16* %7, align 2
  %194 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %195 = load i16, i16* %7, align 2
  %196 = sext i16 %195 to i32
  %197 = add nsw i32 %196, 1
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %194, i64 %198
  %200 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %199, i32 0, i32 1
  %201 = load double, double* %200, align 8
  %202 = fadd double %201, 0.000000e+00
  %203 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %204 = load i16, i16* %7, align 2
  %205 = sext i16 %204 to i32
  %206 = add nsw i32 %205, 1
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %203, i64 %207
  %209 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %208, i32 0, i32 1
  store double %202, double* %209, align 8
  %210 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %211 = load i16, i16* %7, align 2
  %212 = sext i16 %211 to i32
  %213 = add nsw i32 %212, 1
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %210, i64 %214
  %216 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %215, i32 0, i32 0
  store i32 3, i32* %216, align 8
  %217 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %218 = load i16, i16* %7, align 2
  %219 = sext i16 %218 to i32
  %220 = add nsw i32 %219, 2
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %217, i64 %221
  %223 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %222, i32 0, i32 1
  %224 = load double, double* %223, align 8
  %225 = fadd double %224, 0.000000e+00
  %226 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %227 = load i16, i16* %7, align 2
  %228 = sext i16 %227 to i32
  %229 = add nsw i32 %228, 2
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %226, i64 %230
  %232 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %231, i32 0, i32 1
  store double %225, double* %232, align 8
  %233 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %234 = load i16, i16* %7, align 2
  %235 = sext i16 %234 to i32
  %236 = add nsw i32 %235, 1
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %233, i64 %237
  %239 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %238, i32 0, i32 0
  store i32 3, i32* %239, align 8
  %240 = load i16*, i16** %8, align 8
  %241 = load i16, i16* %7, align 2
  %242 = load double, double* %9, align 8
  %243 = load double, double* %10, align 8
  %244 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %245 = load i32, i32* %12, align 4
  call void @handleStem(i16* noundef %240, i16 noundef signext %241, double noundef %242, double noundef %243, %struct.tBaseInformation* noundef %244, i32 noundef %245)
  %246 = load i16*, i16** %8, align 8
  %247 = load i16, i16* %7, align 2
  %248 = sext i16 %247 to i64
  %249 = getelementptr inbounds i16, i16* %246, i64 %248
  %250 = load i16, i16* %249, align 2
  store i16 %250, i16* %7, align 2
  %251 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %252 = load i16, i16* %7, align 2
  %253 = sext i16 %252 to i32
  %254 = add nsw i32 %253, 1
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %251, i64 %255
  %257 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %256, i32 0, i32 1
  %258 = load double, double* %257, align 8
  %259 = load i32, i32* %12, align 4
  %260 = sitofp i32 %259 to double
  %261 = load double, double* %19, align 8
  %262 = call double @llvm.fmuladd.f64(double %260, double %261, double %258)
  %263 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %264 = load i16, i16* %7, align 2
  %265 = sext i16 %264 to i32
  %266 = add nsw i32 %265, 1
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %263, i64 %267
  %269 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %268, i32 0, i32 1
  store double %262, double* %269, align 8
  %270 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %271 = load i16, i16* %7, align 2
  %272 = sext i16 %271 to i64
  %273 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %270, i64 %272
  %274 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %273, i32 0, i32 0
  store i32 3, i32* %274, align 8
  %275 = load i16, i16* %7, align 2
  %276 = add i16 %275, 1
  store i16 %276, i16* %7, align 2
  %277 = load i32, i32* %12, align 4
  %278 = sub nsw i32 0, %277
  %279 = sitofp i32 %278 to double
  %280 = load double, double* %19, align 8
  %281 = fmul double %279, %280
  %282 = fmul double %281, 2.000000e+00
  %283 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %284 = load i16, i16* %7, align 2
  %285 = sext i16 %284 to i32
  %286 = add nsw i32 %285, 1
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %283, i64 %287
  %289 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %288, i32 0, i32 1
  store double %282, double* %289, align 8
  %290 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %291 = load i16, i16* %7, align 2
  %292 = sext i16 %291 to i64
  %293 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %290, i64 %292
  %294 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %293, i32 0, i32 0
  store i32 3, i32* %294, align 8
  %295 = load i16, i16* %7, align 2
  %296 = add i16 %295, 1
  store i16 %296, i16* %7, align 2
  %297 = load i32, i32* %12, align 4
  %298 = sitofp i32 %297 to double
  %299 = load double, double* %19, align 8
  %300 = fmul double %298, %299
  %301 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %302 = load i16, i16* %7, align 2
  %303 = sext i16 %302 to i32
  %304 = add nsw i32 %303, 1
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %301, i64 %305
  %307 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %306, i32 0, i32 1
  store double %300, double* %307, align 8
  %308 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %309 = load i16, i16* %7, align 2
  %310 = sext i16 %309 to i64
  %311 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %308, i64 %310
  %312 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %311, i32 0, i32 0
  store i32 3, i32* %312, align 8
  br label %313

313:                                              ; preds = %170, %78
  br label %596

314:                                              ; preds = %44, %6
  %315 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %316 = load i32, i32* %13, align 4
  %317 = sext i32 %316 to i64
  %318 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %315, i64 %317
  %319 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %318, i32 0, i32 3
  %320 = load %struct.config*, %struct.config** %319, align 8
  store %struct.config* %320, %struct.config** %27, align 8
  store i32 0, i32* %28, align 4
  %321 = load %struct.config*, %struct.config** %27, align 8
  %322 = getelementptr inbounds %struct.config, %struct.config* %321, i32 0, i32 0
  %323 = load double, double* %322, align 8
  store double %323, double* %29, align 8
  %324 = load double, double* %9, align 8
  %325 = load double, double* %29, align 8
  %326 = fmul double 2.000000e+00, %325
  %327 = fdiv double %324, %326
  %328 = call double @asin(double noundef %327) #7
  %329 = fmul double 2.000000e+00, %328
  store double %329, double* %20, align 8
  %330 = load %struct.config*, %struct.config** %27, align 8
  %331 = load i32, i32* %28, align 4
  %332 = call double @getArcAngle(%struct.config* noundef %330, i32 noundef %331)
  store double %332, double* %21, align 8
  %333 = load double, double* %21, align 8
  %334 = load double, double* %20, align 8
  %335 = fsub double %333, %334
  %336 = load %struct.config*, %struct.config** %27, align 8
  %337 = getelementptr inbounds %struct.config, %struct.config* %336, i32 0, i32 3
  %338 = load %struct.configArc*, %struct.configArc** %337, align 8
  %339 = load i32, i32* %28, align 4
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds %struct.configArc, %struct.configArc* %338, i64 %340
  %342 = getelementptr inbounds %struct.configArc, %struct.configArc* %341, i32 0, i32 0
  %343 = load i32, i32* %342, align 8
  %344 = sitofp i32 %343 to double
  %345 = fdiv double %335, %344
  store double %345, double* %22, align 8
  %346 = load double, double* %29, align 8
  %347 = fmul double 2.000000e+00, %346
  %348 = load double, double* %29, align 8
  %349 = fmul double %347, %348
  %350 = load double, double* %22, align 8
  %351 = call double @cos(double noundef %350) #7
  %352 = fsub double 1.000000e+00, %351
  %353 = fmul double %349, %352
  %354 = call double @sqrt(double noundef %353) #7
  store double %354, double* %23, align 8
  %355 = load double, double* %20, align 8
  %356 = fadd double 0x400921FB54442D18, %355
  %357 = load double, double* %22, align 8
  %358 = fadd double %356, %357
  %359 = fmul double 5.000000e-01, %358
  store double %359, double* %24, align 8
  %360 = load double, double* %22, align 8
  %361 = fadd double 0x400921FB54442D18, %360
  store double %361, double* %25, align 8
  %362 = load i32, i32* %28, align 4
  %363 = add nsw i32 %362, 1
  store i32 %363, i32* %28, align 4
  %364 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %365 = load i16, i16* %7, align 2
  %366 = sext i16 %365 to i32
  %367 = add nsw i32 %366, 1
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %364, i64 %368
  %370 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %369, i32 0, i32 1
  %371 = load double, double* %370, align 8
  %372 = load i32, i32* %12, align 4
  %373 = sitofp i32 %372 to double
  %374 = load double, double* %24, align 8
  %375 = fsub double 0x400921FB54442D18, %374
  %376 = call double @llvm.fmuladd.f64(double %373, double %375, double %371)
  %377 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %378 = load i16, i16* %7, align 2
  %379 = sext i16 %378 to i32
  %380 = add nsw i32 %379, 1
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %377, i64 %381
  %383 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %382, i32 0, i32 1
  store double %376, double* %383, align 8
  %384 = load double, double* %23, align 8
  %385 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %386 = load i16, i16* %7, align 2
  %387 = sext i16 %386 to i64
  %388 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %385, i64 %387
  %389 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %388, i32 0, i32 2
  store double %384, double* %389, align 8
  store i32 0, i32* %26, align 4
  %390 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %391 = load i16, i16* %7, align 2
  %392 = sext i16 %391 to i64
  %393 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %390, i64 %392
  %394 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %393, i32 0, i32 0
  %395 = load i32, i32* %394, align 8
  %396 = icmp eq i32 %395, 4
  br i1 %396, label %397, label %403

397:                                              ; preds = %314
  %398 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %399 = load i16, i16* %7, align 2
  %400 = sext i16 %399 to i64
  %401 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %398, i64 %400
  %402 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %401, i32 0, i32 0
  store i32 5, i32* %402, align 8
  br label %409

403:                                              ; preds = %314
  %404 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %405 = load i16, i16* %7, align 2
  %406 = sext i16 %405 to i64
  %407 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %404, i64 %406
  %408 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %407, i32 0, i32 0
  store i32 4, i32* %408, align 8
  br label %409

409:                                              ; preds = %403, %397
  %410 = load i16, i16* %7, align 2
  %411 = add i16 %410, 1
  store i16 %411, i16* %7, align 2
  br label %412

412:                                              ; preds = %567, %409
  %413 = load i16, i16* %7, align 2
  %414 = sext i16 %413 to i32
  %415 = load i16, i16* %14, align 2
  %416 = sext i16 %415 to i32
  %417 = icmp slt i32 %414, %416
  br i1 %417, label %418, label %568

418:                                              ; preds = %412
  %419 = load i16*, i16** %8, align 8
  %420 = load i16, i16* %7, align 2
  %421 = sext i16 %420 to i64
  %422 = getelementptr inbounds i16, i16* %419, i64 %421
  %423 = load i16, i16* %422, align 2
  %424 = sext i16 %423 to i32
  %425 = icmp sle i32 %424, 0
  br i1 %425, label %426, label %453

426:                                              ; preds = %418
  %427 = load i32, i32* %12, align 4
  %428 = sub nsw i32 0, %427
  %429 = sitofp i32 %428 to double
  %430 = load double, double* %25, align 8
  %431 = fsub double %430, 0x400921FB54442D18
  %432 = fmul double %429, %431
  %433 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %434 = load i16, i16* %7, align 2
  %435 = sext i16 %434 to i32
  %436 = add nsw i32 %435, 1
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %433, i64 %437
  %439 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %438, i32 0, i32 1
  store double %432, double* %439, align 8
  %440 = load double, double* %23, align 8
  %441 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %442 = load i16, i16* %7, align 2
  %443 = sext i16 %442 to i64
  %444 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %441, i64 %443
  %445 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %444, i32 0, i32 2
  store double %440, double* %445, align 8
  %446 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %447 = load i16, i16* %7, align 2
  %448 = sext i16 %447 to i64
  %449 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %446, i64 %448
  %450 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %449, i32 0, i32 0
  store i32 4, i32* %450, align 8
  %451 = load i16, i16* %7, align 2
  %452 = add i16 %451, 1
  store i16 %452, i16* %7, align 2
  br label %567

453:                                              ; preds = %418
  %454 = load i16*, i16** %8, align 8
  %455 = load i16, i16* %7, align 2
  %456 = sext i16 %455 to i64
  %457 = getelementptr inbounds i16, i16* %454, i64 %456
  %458 = load i16, i16* %457, align 2
  %459 = sext i16 %458 to i32
  %460 = load i16, i16* %7, align 2
  %461 = sext i16 %460 to i32
  %462 = icmp sgt i32 %459, %461
  br i1 %462, label %463, label %494

463:                                              ; preds = %453
  %464 = load i32, i32* %12, align 4
  %465 = sitofp i32 %464 to double
  %466 = load double, double* %24, align 8
  %467 = fsub double 0x400921FB54442D18, %466
  %468 = fmul double %465, %467
  %469 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %470 = load i16, i16* %7, align 2
  %471 = sext i16 %470 to i32
  %472 = add nsw i32 %471, 1
  %473 = sext i32 %472 to i64
  %474 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %469, i64 %473
  %475 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %474, i32 0, i32 1
  store double %468, double* %475, align 8
  %476 = load i32, i32* %26, align 4
  %477 = add nsw i32 %476, 1
  store i32 %477, i32* %26, align 4
  %478 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %479 = load i16, i16* %7, align 2
  %480 = sext i16 %479 to i64
  %481 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %478, i64 %480
  %482 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %481, i32 0, i32 0
  store i32 4, i32* %482, align 8
  %483 = load i16*, i16** %8, align 8
  %484 = load i16, i16* %7, align 2
  %485 = load double, double* %9, align 8
  %486 = load double, double* %10, align 8
  %487 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %488 = load i32, i32* %12, align 4
  call void @handleStem(i16* noundef %483, i16 noundef signext %484, double noundef %485, double noundef %486, %struct.tBaseInformation* noundef %487, i32 noundef %488)
  %489 = load i16*, i16** %8, align 8
  %490 = load i16, i16* %7, align 2
  %491 = sext i16 %490 to i64
  %492 = getelementptr inbounds i16, i16* %489, i64 %491
  %493 = load i16, i16* %492, align 2
  store i16 %493, i16* %7, align 2
  br label %566

494:                                              ; preds = %453
  %495 = load i32, i32* %26, align 4
  %496 = icmp eq i32 %495, 1
  br i1 %496, label %497, label %532

497:                                              ; preds = %494
  store i32 0, i32* %26, align 4
  %498 = load %struct.config*, %struct.config** %27, align 8
  %499 = load i32, i32* %28, align 4
  %500 = call double @getArcAngle(%struct.config* noundef %498, i32 noundef %499)
  store double %500, double* %21, align 8
  %501 = load double, double* %21, align 8
  %502 = load double, double* %20, align 8
  %503 = fsub double %501, %502
  %504 = load %struct.config*, %struct.config** %27, align 8
  %505 = getelementptr inbounds %struct.config, %struct.config* %504, i32 0, i32 3
  %506 = load %struct.configArc*, %struct.configArc** %505, align 8
  %507 = load i32, i32* %28, align 4
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds %struct.configArc, %struct.configArc* %506, i64 %508
  %510 = getelementptr inbounds %struct.configArc, %struct.configArc* %509, i32 0, i32 0
  %511 = load i32, i32* %510, align 8
  %512 = sitofp i32 %511 to double
  %513 = fdiv double %503, %512
  store double %513, double* %22, align 8
  %514 = load double, double* %29, align 8
  %515 = fmul double 2.000000e+00, %514
  %516 = load double, double* %29, align 8
  %517 = fmul double %515, %516
  %518 = load double, double* %22, align 8
  %519 = call double @cos(double noundef %518) #7
  %520 = fsub double 1.000000e+00, %519
  %521 = fmul double %517, %520
  %522 = call double @sqrt(double noundef %521) #7
  store double %522, double* %23, align 8
  %523 = load double, double* %20, align 8
  %524 = fadd double 0x400921FB54442D18, %523
  %525 = load double, double* %22, align 8
  %526 = fadd double %524, %525
  %527 = fmul double 5.000000e-01, %526
  store double %527, double* %24, align 8
  %528 = load double, double* %22, align 8
  %529 = fadd double 0x400921FB54442D18, %528
  store double %529, double* %25, align 8
  %530 = load i32, i32* %28, align 4
  %531 = add nsw i32 %530, 1
  store i32 %531, i32* %28, align 4
  br label %532

532:                                              ; preds = %497, %494
  %533 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %534 = load i16, i16* %7, align 2
  %535 = sext i16 %534 to i32
  %536 = add nsw i32 %535, 1
  %537 = sext i32 %536 to i64
  %538 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %533, i64 %537
  %539 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %538, i32 0, i32 1
  %540 = load double, double* %539, align 8
  %541 = load i32, i32* %12, align 4
  %542 = sitofp i32 %541 to double
  %543 = load double, double* %24, align 8
  %544 = fsub double 0x400921FB54442D18, %543
  %545 = call double @llvm.fmuladd.f64(double %542, double %544, double %540)
  %546 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %547 = load i16, i16* %7, align 2
  %548 = sext i16 %547 to i32
  %549 = add nsw i32 %548, 1
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %546, i64 %550
  %552 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %551, i32 0, i32 1
  store double %545, double* %552, align 8
  %553 = load double, double* %23, align 8
  %554 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %555 = load i16, i16* %7, align 2
  %556 = sext i16 %555 to i64
  %557 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %554, i64 %556
  %558 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %557, i32 0, i32 2
  store double %553, double* %558, align 8
  %559 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %560 = load i16, i16* %7, align 2
  %561 = sext i16 %560 to i64
  %562 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %559, i64 %561
  %563 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %562, i32 0, i32 0
  store i32 4, i32* %563, align 8
  %564 = load i16, i16* %7, align 2
  %565 = add i16 %564, 1
  store i16 %565, i16* %7, align 2
  br label %566

566:                                              ; preds = %532, %463
  br label %567

567:                                              ; preds = %566, %426
  br label %412, !llvm.loop !49

568:                                              ; preds = %412
  %569 = load i16, i16* %7, align 2
  %570 = sext i16 %569 to i32
  %571 = add nsw i32 %570, 1
  %572 = load i16*, i16** %8, align 8
  %573 = getelementptr inbounds i16, i16* %572, i64 0
  %574 = load i16, i16* %573, align 2
  %575 = sext i16 %574 to i32
  %576 = icmp sle i32 %571, %575
  br i1 %576, label %577, label %590

577:                                              ; preds = %568
  %578 = load i32, i32* %12, align 4
  %579 = sitofp i32 %578 to double
  %580 = load double, double* %24, align 8
  %581 = fsub double 0x400921FB54442D18, %580
  %582 = fmul double %579, %581
  %583 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %584 = load i16, i16* %7, align 2
  %585 = sext i16 %584 to i32
  %586 = add nsw i32 %585, 1
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %583, i64 %587
  %589 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %588, i32 0, i32 1
  store double %582, double* %589, align 8
  br label %590

590:                                              ; preds = %577, %568
  %591 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %592 = load i16, i16* %7, align 2
  %593 = sext i16 %592 to i64
  %594 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %591, i64 %593
  %595 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %594, i32 0, i32 0
  store i32 4, i32* %595, align 8
  br label %596

596:                                              ; preds = %590, %313
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @countLoopPairs(i16* noundef %0, i16* noundef %1, i16 noundef signext %2, i16* noundef %3) #0 {
  %5 = alloca i16*, align 8
  %6 = alloca i16*, align 8
  %7 = alloca i16, align 2
  %8 = alloca i16*, align 8
  %9 = alloca i16, align 2
  store i16* %0, i16** %5, align 8
  store i16* %1, i16** %6, align 8
  store i16 %2, i16* %7, align 2
  store i16* %3, i16** %8, align 8
  %10 = load i16*, i16** %8, align 8
  %11 = load i16, i16* %7, align 2
  %12 = add i16 %11, 1
  store i16 %12, i16* %7, align 2
  %13 = sext i16 %11 to i64
  %14 = getelementptr inbounds i16, i16* %10, i64 %13
  %15 = load i16, i16* %14, align 2
  store i16 %15, i16* %9, align 2
  %16 = load i16*, i16** %6, align 8
  store i16 1, i16* %16, align 2
  %17 = load i16*, i16** %5, align 8
  store i16 1, i16* %17, align 2
  br label %18

18:                                               ; preds = %57, %4
  %19 = load i16, i16* %7, align 2
  %20 = sext i16 %19 to i32
  %21 = load i16, i16* %9, align 2
  %22 = sext i16 %21 to i32
  %23 = icmp slt i32 %20, %22
  br i1 %23, label %24, label %58

24:                                               ; preds = %18
  %25 = load i16*, i16** %8, align 8
  %26 = load i16, i16* %7, align 2
  %27 = sext i16 %26 to i64
  %28 = getelementptr inbounds i16, i16* %25, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = sext i16 %29 to i32
  %31 = icmp sle i32 %30, 0
  br i1 %31, label %42, label %32

32:                                               ; preds = %24
  %33 = load i16*, i16** %8, align 8
  %34 = load i16, i16* %7, align 2
  %35 = sext i16 %34 to i64
  %36 = getelementptr inbounds i16, i16* %33, i64 %35
  %37 = load i16, i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = load i16, i16* %7, align 2
  %40 = sext i16 %39 to i32
  %41 = icmp slt i32 %38, %40
  br i1 %41, label %42, label %48

42:                                               ; preds = %32, %24
  %43 = load i16*, i16** %6, align 8
  %44 = load i16, i16* %43, align 2
  %45 = add i16 %44, 1
  store i16 %45, i16* %43, align 2
  %46 = load i16, i16* %7, align 2
  %47 = add i16 %46, 1
  store i16 %47, i16* %7, align 2
  br label %57

48:                                               ; preds = %32
  %49 = load i16*, i16** %5, align 8
  %50 = load i16, i16* %49, align 2
  %51 = add i16 %50, 1
  store i16 %51, i16* %49, align 2
  %52 = load i16*, i16** %8, align 8
  %53 = load i16, i16* %7, align 2
  %54 = sext i16 %53 to i64
  %55 = getelementptr inbounds i16, i16* %52, i64 %54
  %56 = load i16, i16* %55, align 2
  store i16 %56, i16* %7, align 2
  br label %57

57:                                               ; preds = %48, %42
  br label %18, !llvm.loop !50

58:                                               ; preds = %18
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @detectBulge(i16 noundef signext %0, i16* noundef %1) #0 {
  %3 = alloca i16, align 2
  %4 = alloca i16*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i16 %0, i16* %3, align 2
  store i16* %1, i16** %4, align 8
  store i32 0, i32* %5, align 4
  %11 = load i16*, i16** %4, align 8
  %12 = load i16, i16* %3, align 2
  %13 = sext i16 %12 to i64
  %14 = getelementptr inbounds i16, i16* %11, i64 %13
  %15 = load i16, i16* %14, align 2
  %16 = sext i16 %15 to i32
  store i32 %16, i32* %6, align 4
  store i32 1, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %17 = load i16, i16* %3, align 2
  %18 = sext i16 %17 to i32
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %9, align 4
  store i32 0, i32* %10, align 4
  br label %20

20:                                               ; preds = %96, %2
  %21 = load i16*, i16** %4, align 8
  %22 = load i32, i32* %9, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i16, i16* %21, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %85

28:                                               ; preds = %20
  %29 = load i32, i32* %7, align 4
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %31, label %74

31:                                               ; preds = %28
  %32 = load i16*, i16** %4, align 8
  %33 = load i32, i32* %9, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i16, i16* %32, i64 %34
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  %38 = load i32, i32* %8, align 4
  %39 = icmp eq i32 %37, %38
  br i1 %39, label %40, label %45

40:                                               ; preds = %31
  %41 = load i32, i32* %10, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %10, align 4
  %43 = load i32, i32* %9, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %9, align 4
  br label %73

45:                                               ; preds = %31
  %46 = load i16, i16* %3, align 2
  %47 = sext i16 %46 to i32
  %48 = load i16*, i16** %4, align 8
  %49 = load i32, i32* %9, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i16, i16* %48, i64 %50
  %52 = load i16, i16* %51, align 2
  %53 = sext i16 %52 to i32
  %54 = icmp eq i32 %47, %53
  br i1 %54, label %65, label %55

55:                                               ; preds = %45
  %56 = load i16*, i16** %4, align 8
  %57 = load i32, i32* %9, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* %56, i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = sext i16 %60 to i32
  %62 = load i32, i32* %6, align 4
  %63 = sub nsw i32 %62, 2
  %64 = icmp eq i32 %61, %63
  br i1 %64, label %65, label %72

65:                                               ; preds = %55, %45
  %66 = load i16*, i16** %4, align 8
  %67 = load i32, i32* %9, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i16, i16* %66, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = sext i16 %70 to i32
  store i32 %71, i32* %5, align 4
  br label %101

72:                                               ; preds = %55
  br label %101

73:                                               ; preds = %40
  br label %84

74:                                               ; preds = %28
  %75 = load i32, i32* %7, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %7, align 4
  %77 = load i32, i32* %9, align 4
  store i32 %77, i32* %8, align 4
  %78 = load i16*, i16** %4, align 8
  %79 = load i32, i32* %9, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i16, i16* %78, i64 %80
  %82 = load i16, i16* %81, align 2
  %83 = sext i16 %82 to i32
  store i32 %83, i32* %9, align 4
  br label %84

84:                                               ; preds = %74, %73
  br label %95

85:                                               ; preds = %20
  %86 = load i32, i32* %7, align 4
  %87 = icmp sgt i32 %86, 0
  br i1 %87, label %88, label %91

88:                                               ; preds = %85
  store i32 0, i32* %7, align 4
  %89 = load i32, i32* %9, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %9, align 4
  br label %94

91:                                               ; preds = %85
  %92 = load i32, i32* %9, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %9, align 4
  br label %94

94:                                               ; preds = %91, %88
  br label %95

95:                                               ; preds = %94, %84
  br label %96

96:                                               ; preds = %95
  %97 = load i32, i32* %9, align 4
  %98 = load i16, i16* %3, align 2
  %99 = sext i16 %98 to i32
  %100 = icmp sgt i32 %97, %99
  br i1 %100, label %20, label %101, !llvm.loop !51

101:                                              ; preds = %96, %72, %65
  %102 = load i32, i32* %5, align 4
  ret i32 %102
}

; Function Attrs: nounwind
declare dso_local double @acos(double noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal double @getArcAngle(%struct.config* noundef %0, i32 noundef %1) #0 {
  %3 = alloca %struct.config*, align 8
  %4 = alloca i32, align 4
  store %struct.config* %0, %struct.config** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load %struct.config*, %struct.config** %3, align 8
  %6 = getelementptr inbounds %struct.config, %struct.config* %5, i32 0, i32 3
  %7 = load %struct.configArc*, %struct.configArc** %6, align 8
  %8 = load i32, i32* %4, align 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %struct.configArc, %struct.configArc* %7, i64 %9
  %11 = getelementptr inbounds %struct.configArc, %struct.configArc* %10, i32 0, i32 1
  %12 = load double, double* %11, align 8
  ret double %12
}

; Function Attrs: nounwind
declare dso_local double @cos(double noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.configtree* @createTreeNode(i32 noundef %0, %struct.configtree* noundef %1, i32 noundef %2, i32 noundef %3, i16* noundef %4, %struct.config* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca %struct.configtree*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i16*, align 8
  %12 = alloca %struct.config*, align 8
  %13 = alloca i32, align 4
  %14 = alloca %struct.configtree**, align 8
  %15 = alloca %struct.configtree*, align 8
  store i32 %0, i32* %7, align 4
  store %struct.configtree* %1, %struct.configtree** %8, align 8
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i16* %4, i16** %11, align 8
  store %struct.config* %5, %struct.config** %12, align 8
  %16 = load %struct.config*, %struct.config** %12, align 8
  %17 = icmp eq %struct.config* %16, null
  br i1 %17, label %18, label %21

18:                                               ; preds = %6
  %19 = load i16*, i16** %11, align 8
  %20 = call i32 @treeGetChildCount(i32 noundef 0, i16* noundef %19)
  store i32 %20, i32* %13, align 4
  br label %25

21:                                               ; preds = %6
  %22 = load i32, i32* %9, align 4
  %23 = load i16*, i16** %11, align 8
  %24 = call i32 @treeGetChildCount(i32 noundef %22, i16* noundef %23)
  store i32 %24, i32* %13, align 4
  br label %25

25:                                               ; preds = %21, %18
  %26 = load i32, i32* %13, align 4
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %35

28:                                               ; preds = %25
  %29 = load i32, i32* %13, align 4
  %30 = sext i32 %29 to i64
  %31 = mul i64 %30, 8
  %32 = trunc i64 %31 to i32
  %33 = call i8* @vrna_alloc(i32 noundef %32)
  %34 = bitcast i8* %33 to %struct.configtree**
  br label %36

35:                                               ; preds = %25
  br label %36

36:                                               ; preds = %35, %28
  %37 = phi %struct.configtree** [ %34, %28 ], [ null, %35 ]
  store %struct.configtree** %37, %struct.configtree*** %14, align 8
  %38 = call i8* @vrna_alloc(i32 noundef 96)
  %39 = bitcast i8* %38 to %struct.configtree*
  store %struct.configtree* %39, %struct.configtree** %15, align 8
  %40 = load i32, i32* %7, align 4
  %41 = load %struct.configtree*, %struct.configtree** %15, align 8
  %42 = getelementptr inbounds %struct.configtree, %struct.configtree* %41, i32 0, i32 0
  store i32 %40, i32* %42, align 8
  %43 = load %struct.configtree*, %struct.configtree** %8, align 8
  %44 = load %struct.configtree*, %struct.configtree** %15, align 8
  %45 = getelementptr inbounds %struct.configtree, %struct.configtree* %44, i32 0, i32 1
  store %struct.configtree* %43, %struct.configtree** %45, align 8
  %46 = load %struct.configtree**, %struct.configtree*** %14, align 8
  %47 = load %struct.configtree*, %struct.configtree** %15, align 8
  %48 = getelementptr inbounds %struct.configtree, %struct.configtree* %47, i32 0, i32 2
  store %struct.configtree** %46, %struct.configtree*** %48, align 8
  %49 = load i32, i32* %13, align 4
  %50 = load %struct.configtree*, %struct.configtree** %15, align 8
  %51 = getelementptr inbounds %struct.configtree, %struct.configtree* %50, i32 0, i32 3
  store i32 %49, i32* %51, align 8
  %52 = load %struct.config*, %struct.config** %12, align 8
  %53 = load %struct.configtree*, %struct.configtree** %15, align 8
  %54 = getelementptr inbounds %struct.configtree, %struct.configtree* %53, i32 0, i32 4
  store %struct.config* %52, %struct.config** %54, align 8
  %55 = load i32, i32* %9, align 4
  %56 = load %struct.configtree*, %struct.configtree** %15, align 8
  %57 = getelementptr inbounds %struct.configtree, %struct.configtree* %56, i32 0, i32 5
  store i32 %55, i32* %57, align 8
  %58 = load i32, i32* %10, align 4
  %59 = load %struct.configtree*, %struct.configtree** %15, align 8
  %60 = getelementptr inbounds %struct.configtree, %struct.configtree* %59, i32 0, i32 6
  store i32 %58, i32* %60, align 4
  %61 = load %struct.configtree*, %struct.configtree** %15, align 8
  %62 = getelementptr inbounds %struct.configtree, %struct.configtree* %61, i32 0, i32 7
  store %struct.boundingboxLoop* null, %struct.boundingboxLoop** %62, align 8
  %63 = load %struct.configtree*, %struct.configtree** %15, align 8
  %64 = getelementptr inbounds %struct.configtree, %struct.configtree* %63, i32 0, i32 8
  store %struct.boundingboxStem* null, %struct.boundingboxStem** %64, align 8
  %65 = load %struct.configtree*, %struct.configtree** %15, align 8
  ret %struct.configtree* %65
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.configtree* @treeHandleStem(%struct.configtree* noundef %0, i32* noundef %1, i32 noundef %2, i16* noundef %3, %struct.tBaseInformation* noundef %4) #0 {
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i16*, align 8
  %10 = alloca %struct.tBaseInformation*, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %6, align 8
  store i32* %1, i32** %7, align 8
  store i32 %2, i32* %8, align 4
  store i16* %3, i16** %9, align 8
  store %struct.tBaseInformation* %4, %struct.tBaseInformation** %10, align 8
  %13 = load i32*, i32** %7, align 8
  %14 = load i32, i32* %13, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %13, align 4
  %16 = load i32, i32* %8, align 4
  store i32 %16, i32* %11, align 4
  br label %17

17:                                               ; preds = %25, %5
  %18 = load %struct.tBaseInformation*, %struct.tBaseInformation** %10, align 8
  %19 = load i32, i32* %11, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %18, i64 %20
  %22 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %21, i32 0, i32 3
  %23 = load %struct.config*, %struct.config** %22, align 8
  %24 = icmp eq %struct.config* %23, null
  br i1 %24, label %25, label %28

25:                                               ; preds = %17
  %26 = load i32, i32* %11, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %11, align 4
  br label %17, !llvm.loop !52

28:                                               ; preds = %17
  %29 = load %struct.configtree*, %struct.configtree** %6, align 8
  %30 = load i32*, i32** %7, align 8
  %31 = load i32, i32* %11, align 4
  %32 = load i32, i32* %8, align 4
  %33 = load i16*, i16** %9, align 8
  %34 = load %struct.tBaseInformation*, %struct.tBaseInformation** %10, align 8
  %35 = call %struct.configtree* @treeHandleLoop(%struct.configtree* noundef %29, i32* noundef %30, i32 noundef %31, i32 noundef %32, i16* noundef %33, %struct.tBaseInformation* noundef %34)
  store %struct.configtree* %35, %struct.configtree** %12, align 8
  %36 = load %struct.configtree*, %struct.configtree** %12, align 8
  ret %struct.configtree* %36
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @setChild(%struct.configtree* noundef %0, i32 noundef %1, %struct.configtree* noundef %2) #0 {
  %4 = alloca %struct.configtree*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %4, align 8
  store i32 %1, i32* %5, align 4
  store %struct.configtree* %2, %struct.configtree** %6, align 8
  %7 = load i32, i32* %5, align 4
  %8 = icmp sle i32 0, %7
  br i1 %8, label %9, label %23

9:                                                ; preds = %3
  %10 = load i32, i32* %5, align 4
  %11 = load %struct.configtree*, %struct.configtree** %4, align 8
  %12 = getelementptr inbounds %struct.configtree, %struct.configtree* %11, i32 0, i32 3
  %13 = load i32, i32* %12, align 8
  %14 = icmp slt i32 %10, %13
  br i1 %14, label %15, label %23

15:                                               ; preds = %9
  %16 = load %struct.configtree*, %struct.configtree** %6, align 8
  %17 = load %struct.configtree*, %struct.configtree** %4, align 8
  %18 = getelementptr inbounds %struct.configtree, %struct.configtree* %17, i32 0, i32 2
  %19 = load %struct.configtree**, %struct.configtree*** %18, align 8
  %20 = load i32, i32* %5, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds %struct.configtree*, %struct.configtree** %19, i64 %21
  store %struct.configtree* %16, %struct.configtree** %22, align 8
  br label %23

23:                                               ; preds = %15, %9, %3
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @buildBoundingBoxes(%struct.configtree* noundef %0, i16* noundef %1, %struct.tBaseInformation* noundef %2, double* noundef %3, double* noundef %4, double noundef %5) #0 {
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca i16*, align 8
  %9 = alloca %struct.tBaseInformation*, align 8
  %10 = alloca double*, align 8
  %11 = alloca double*, align 8
  %12 = alloca double, align 8
  %13 = alloca i16, align 2
  %14 = alloca %struct.boundingboxLoop*, align 8
  %15 = alloca %struct.boundingboxStem*, align 8
  %16 = alloca i32, align 4
  %17 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %7, align 8
  store i16* %1, i16** %8, align 8
  store %struct.tBaseInformation* %2, %struct.tBaseInformation** %9, align 8
  store double* %3, double** %10, align 8
  store double* %4, double** %11, align 8
  store double %5, double* %12, align 8
  %18 = load %struct.configtree*, %struct.configtree** %7, align 8
  %19 = getelementptr inbounds %struct.configtree, %struct.configtree* %18, i32 0, i32 1
  %20 = load %struct.configtree*, %struct.configtree** %19, align 8
  %21 = icmp eq %struct.configtree* %20, null
  %22 = zext i1 %21 to i32
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* %13, align 2
  %24 = load i16, i16* %13, align 2
  %25 = icmp ne i16 %24, 0
  br i1 %25, label %62, label %26

26:                                               ; preds = %6
  %27 = load %struct.configtree*, %struct.configtree** %7, align 8
  %28 = getelementptr inbounds %struct.configtree, %struct.configtree* %27, i32 0, i32 5
  %29 = load i32, i32* %28, align 8
  %30 = load i16*, i16** %8, align 8
  %31 = load %struct.tBaseInformation*, %struct.tBaseInformation** %9, align 8
  %32 = load double*, double** %10, align 8
  %33 = load double*, double** %11, align 8
  %34 = call %struct.boundingboxLoop* @buildLoopBox(i32 noundef %29, i16* noundef %30, %struct.tBaseInformation* noundef %31, double* noundef %32, double* noundef %33)
  store %struct.boundingboxLoop* %34, %struct.boundingboxLoop** %14, align 8
  %35 = load %struct.configtree*, %struct.configtree** %7, align 8
  %36 = getelementptr inbounds %struct.configtree, %struct.configtree* %35, i32 0, i32 6
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.configtree*, %struct.configtree** %7, align 8
  %39 = getelementptr inbounds %struct.configtree, %struct.configtree* %38, i32 0, i32 5
  %40 = load i32, i32* %39, align 8
  %41 = load i16*, i16** %8, align 8
  %42 = load double*, double** %10, align 8
  %43 = load double*, double** %11, align 8
  %44 = load double, double* %12, align 8
  %45 = call %struct.boundingboxStem* @buildStemBox(i32 noundef %37, i32 noundef %40, i16* noundef %41, double* noundef %42, double* noundef %43, double noundef %44)
  store %struct.boundingboxStem* %45, %struct.boundingboxStem** %15, align 8
  %46 = load %struct.configtree*, %struct.configtree** %7, align 8
  %47 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %14, align 8
  %48 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %47, i32 0, i32 0
  store %struct.configtree* %46, %struct.configtree** %48, align 8
  %49 = load %struct.configtree*, %struct.configtree** %7, align 8
  %50 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %51 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %50, i32 0, i32 0
  store %struct.configtree* %49, %struct.configtree** %51, align 8
  %52 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %14, align 8
  %53 = load %struct.configtree*, %struct.configtree** %7, align 8
  %54 = getelementptr inbounds %struct.configtree, %struct.configtree* %53, i32 0, i32 7
  store %struct.boundingboxLoop* %52, %struct.boundingboxLoop** %54, align 8
  %55 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %56 = load %struct.configtree*, %struct.configtree** %7, align 8
  %57 = getelementptr inbounds %struct.configtree, %struct.configtree* %56, i32 0, i32 8
  store %struct.boundingboxStem* %55, %struct.boundingboxStem** %57, align 8
  %58 = load %struct.configtree*, %struct.configtree** %7, align 8
  %59 = getelementptr inbounds %struct.configtree, %struct.configtree* %58, i32 0, i32 9
  %60 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  %61 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %14, align 8
  call void @updateAABB(%struct.AABB* noundef %59, %struct.boundingboxStem* noundef %60, %struct.boundingboxLoop* noundef %61)
  br label %62

62:                                               ; preds = %26, %6
  store i32 0, i32* %16, align 4
  br label %63

63:                                               ; preds = %79, %62
  %64 = load i32, i32* %16, align 4
  %65 = load %struct.configtree*, %struct.configtree** %7, align 8
  %66 = getelementptr inbounds %struct.configtree, %struct.configtree* %65, i32 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = icmp slt i32 %64, %67
  br i1 %68, label %69, label %82

69:                                               ; preds = %63
  %70 = load %struct.configtree*, %struct.configtree** %7, align 8
  %71 = load i32, i32* %16, align 4
  %72 = call %struct.configtree* @getChild(%struct.configtree* noundef %70, i32 noundef %71)
  store %struct.configtree* %72, %struct.configtree** %17, align 8
  %73 = load %struct.configtree*, %struct.configtree** %17, align 8
  %74 = load i16*, i16** %8, align 8
  %75 = load %struct.tBaseInformation*, %struct.tBaseInformation** %9, align 8
  %76 = load double*, double** %10, align 8
  %77 = load double*, double** %11, align 8
  %78 = load double, double* %12, align 8
  call void @buildBoundingBoxes(%struct.configtree* noundef %73, i16* noundef %74, %struct.tBaseInformation* noundef %75, double* noundef %76, double* noundef %77, double noundef %78)
  br label %79

79:                                               ; preds = %69
  %80 = load i32, i32* %16, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %16, align 4
  br label %63, !llvm.loop !53

82:                                               ; preds = %63
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @treeGetChildCount(i32 noundef %0, i16* noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i16*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i16* %1, i16** %4, align 8
  store i32 0, i32* %5, align 4
  %8 = load i16*, i16** %4, align 8
  %9 = load i32, i32* %3, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i16, i16* %8, i64 %10
  %12 = load i16, i16* %11, align 2
  %13 = sext i16 %12 to i32
  store i32 %13, i32* %6, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %7, align 4
  br label %16

16:                                               ; preds = %39, %2
  %17 = load i32, i32* %7, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %42

20:                                               ; preds = %16
  %21 = load i16*, i16** %4, align 8
  %22 = load i32, i32* %7, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i16, i16* %21, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = sext i16 %25 to i32
  %27 = load i32, i32* %7, align 4
  %28 = icmp sgt i32 %26, %27
  br i1 %28, label %29, label %38

29:                                               ; preds = %20
  %30 = load i32, i32* %5, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %5, align 4
  %32 = load i16*, i16** %4, align 8
  %33 = load i32, i32* %7, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i16, i16* %32, i64 %34
  %36 = load i16, i16* %35, align 2
  %37 = sext i16 %36 to i32
  store i32 %37, i32* %7, align 4
  br label %38

38:                                               ; preds = %29, %20
  br label %39

39:                                               ; preds = %38
  %40 = load i32, i32* %7, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %7, align 4
  br label %16, !llvm.loop !54

42:                                               ; preds = %16
  %43 = load i32, i32* %5, align 4
  ret i32 %43
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.configtree* @treeHandleLoop(%struct.configtree* noundef %0, i32* noundef %1, i32 noundef %2, i32 noundef %3, i16* noundef %4, %struct.tBaseInformation* noundef %5) #0 {
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i16*, align 8
  %12 = alloca %struct.tBaseInformation*, align 8
  %13 = alloca i32, align 4
  %14 = alloca %struct.configtree*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %7, align 8
  store i32* %1, i32** %8, align 8
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i16* %4, i16** %11, align 8
  store %struct.tBaseInformation* %5, %struct.tBaseInformation** %12, align 8
  store i32 0, i32* %13, align 4
  %18 = load i32*, i32** %8, align 8
  %19 = load i32, i32* %18, align 4
  %20 = load %struct.configtree*, %struct.configtree** %7, align 8
  %21 = load i32, i32* %9, align 4
  %22 = load i32, i32* %10, align 4
  %23 = load i16*, i16** %11, align 8
  %24 = load %struct.tBaseInformation*, %struct.tBaseInformation** %12, align 8
  %25 = load i32, i32* %9, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %24, i64 %26
  %28 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %27, i32 0, i32 3
  %29 = load %struct.config*, %struct.config** %28, align 8
  %30 = call %struct.configtree* @createTreeNode(i32 noundef %19, %struct.configtree* noundef %20, i32 noundef %21, i32 noundef %22, i16* noundef %23, %struct.config* noundef %29)
  store %struct.configtree* %30, %struct.configtree** %14, align 8
  %31 = load i16*, i16** %11, align 8
  %32 = load i32, i32* %9, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i16, i16* %31, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = sext i16 %35 to i32
  store i32 %36, i32* %15, align 4
  %37 = load i32, i32* %9, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %16, align 4
  br label %39

39:                                               ; preds = %74, %6
  %40 = load i32, i32* %16, align 4
  %41 = load i32, i32* %15, align 4
  %42 = icmp slt i32 %40, %41
  br i1 %42, label %43, label %77

43:                                               ; preds = %39
  %44 = load i16*, i16** %11, align 8
  %45 = load i32, i32* %16, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i16, i16* %44, i64 %46
  %48 = load i16, i16* %47, align 2
  %49 = sext i16 %48 to i32
  %50 = load i32, i32* %16, align 4
  %51 = icmp sgt i32 %49, %50
  br i1 %51, label %52, label %73

52:                                               ; preds = %43
  %53 = load %struct.configtree*, %struct.configtree** %14, align 8
  %54 = load i32*, i32** %8, align 8
  %55 = load i32, i32* %16, align 4
  %56 = load i16*, i16** %11, align 8
  %57 = load %struct.tBaseInformation*, %struct.tBaseInformation** %12, align 8
  %58 = call %struct.configtree* @treeHandleStem(%struct.configtree* noundef %53, i32* noundef %54, i32 noundef %55, i16* noundef %56, %struct.tBaseInformation* noundef %57)
  store %struct.configtree* %58, %struct.configtree** %17, align 8
  %59 = load %struct.configtree*, %struct.configtree** %14, align 8
  %60 = load %struct.configtree*, %struct.configtree** %17, align 8
  %61 = getelementptr inbounds %struct.configtree, %struct.configtree* %60, i32 0, i32 1
  store %struct.configtree* %59, %struct.configtree** %61, align 8
  %62 = load %struct.configtree*, %struct.configtree** %14, align 8
  %63 = load i32, i32* %13, align 4
  %64 = load %struct.configtree*, %struct.configtree** %17, align 8
  call void @setChild(%struct.configtree* noundef %62, i32 noundef %63, %struct.configtree* noundef %64)
  %65 = load i32, i32* %13, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %13, align 4
  %67 = load i16*, i16** %11, align 8
  %68 = load i32, i32* %16, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i16, i16* %67, i64 %69
  %71 = load i16, i16* %70, align 2
  %72 = sext i16 %71 to i32
  store i32 %72, i32* %16, align 4
  br label %73

73:                                               ; preds = %52, %43
  br label %74

74:                                               ; preds = %73
  %75 = load i32, i32* %16, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %16, align 4
  br label %39, !llvm.loop !55

77:                                               ; preds = %39
  %78 = load %struct.configtree*, %struct.configtree** %14, align 8
  ret %struct.configtree* %78
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.boundingboxLoop* @buildLoopBox(i32 noundef %0, i16* noundef %1, %struct.tBaseInformation* noundef %2, double* noundef %3, double* noundef %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i16*, align 8
  %8 = alloca %struct.tBaseInformation*, align 8
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  %11 = alloca [2 x double], align 16
  %12 = alloca double, align 8
  %13 = alloca %struct.boundingboxLoop*, align 8
  store i32 %0, i32* %6, align 4
  store i16* %1, i16** %7, align 8
  store %struct.tBaseInformation* %2, %struct.tBaseInformation** %8, align 8
  store double* %3, double** %9, align 8
  store double* %4, double** %10, align 8
  %14 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %15 = load i32, i32* %6, align 4
  %16 = load i16*, i16** %7, align 8
  %17 = load %struct.tBaseInformation*, %struct.tBaseInformation** %8, align 8
  %18 = load double*, double** %9, align 8
  %19 = load double*, double** %10, align 8
  call void @getLoopData(double* noundef %14, double* noundef %12, i32 noundef %15, i16* noundef %16, %struct.tBaseInformation* noundef %17, double* noundef %18, double* noundef %19)
  %20 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %21 = load double, double* %12, align 8
  %22 = call %struct.boundingboxLoop* @createLoopBox(double* noundef %20, double noundef %21)
  store %struct.boundingboxLoop* %22, %struct.boundingboxLoop** %13, align 8
  %23 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %13, align 8
  ret %struct.boundingboxLoop* %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.boundingboxStem* @buildStemBox(i32 noundef %0, i32 noundef %1, i16* noundef %2, double* noundef %3, double* noundef %4, double noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i16*, align 8
  %10 = alloca double*, align 8
  %11 = alloca double*, align 8
  %12 = alloca double, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca [2 x double], align 16
  %17 = alloca [2 x double], align 16
  %18 = alloca [2 x double], align 16
  %19 = alloca %struct.boundingboxStem*, align 8
  %20 = alloca i32, align 4
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i16* %2, i16** %9, align 8
  store double* %3, double** %10, align 8
  store double* %4, double** %11, align 8
  store double %5, double* %12, align 8
  %21 = load i32, i32* %7, align 4
  store i32 %21, i32* %13, align 4
  %22 = load i32, i32* %8, align 4
  store i32 %22, i32* %14, align 4
  %23 = load i16*, i16** %9, align 8
  %24 = load i32, i32* %7, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i16, i16* %23, i64 %25
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  store i32 %28, i32* %15, align 4
  %29 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %30 = load double*, double** %10, align 8
  %31 = load i32, i32* %13, align 4
  %32 = sub nsw i32 %31, 1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds double, double* %30, i64 %33
  %35 = load double, double* %34, align 8
  store double %35, double* %29, align 8
  %36 = getelementptr inbounds double, double* %29, i64 1
  %37 = load double*, double** %11, align 8
  %38 = load i32, i32* %13, align 4
  %39 = sub nsw i32 %38, 1
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds double, double* %37, i64 %40
  %42 = load double, double* %41, align 8
  store double %42, double* %36, align 8
  %43 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %44 = load double*, double** %10, align 8
  %45 = load i32, i32* %14, align 4
  %46 = sub nsw i32 %45, 1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds double, double* %44, i64 %47
  %49 = load double, double* %48, align 8
  store double %49, double* %43, align 8
  %50 = getelementptr inbounds double, double* %43, i64 1
  %51 = load double*, double** %11, align 8
  %52 = load i32, i32* %14, align 4
  %53 = sub nsw i32 %52, 1
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds double, double* %51, i64 %54
  %56 = load double, double* %55, align 8
  store double %56, double* %50, align 8
  %57 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 0
  %58 = load double*, double** %10, align 8
  %59 = load i32, i32* %15, align 4
  %60 = sub nsw i32 %59, 1
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds double, double* %58, i64 %61
  %63 = load double, double* %62, align 8
  store double %63, double* %57, align 8
  %64 = getelementptr inbounds double, double* %57, i64 1
  %65 = load double*, double** %11, align 8
  %66 = load i32, i32* %15, align 4
  %67 = sub nsw i32 %66, 1
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds double, double* %65, i64 %68
  %70 = load double, double* %69, align 8
  store double %70, double* %64, align 8
  %71 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %72 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %73 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 0
  %74 = call %struct.boundingboxStem* @createStemBox(double* noundef %71, double* noundef %72, double* noundef %73)
  store %struct.boundingboxStem* %74, %struct.boundingboxStem** %19, align 8
  %75 = load i16*, i16** %9, align 8
  %76 = load i32, i32* %13, align 4
  %77 = load i32, i32* %14, align 4
  %78 = call i32 @countBulges(i16* noundef %75, i32 noundef %76, i32 noundef %77)
  store i32 %78, i32* %20, align 4
  %79 = load %struct.boundingboxStem*, %struct.boundingboxStem** %19, align 8
  %80 = load i16*, i16** %9, align 8
  %81 = load i32, i32* %13, align 4
  %82 = load i32, i32* %14, align 4
  %83 = load double*, double** %10, align 8
  %84 = load double*, double** %11, align 8
  %85 = load i32, i32* %20, align 4
  %86 = load double, double* %12, align 8
  call void @setBulges(%struct.boundingboxStem* noundef %79, i16* noundef %80, i32 noundef %81, i32 noundef %82, double* noundef %83, double* noundef %84, i32 noundef %85, double noundef %86)
  %87 = load %struct.boundingboxStem*, %struct.boundingboxStem** %19, align 8
  ret %struct.boundingboxStem* %87
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @updateAABB(%struct.AABB* noundef %0, %struct.boundingboxStem* noundef %1, %struct.boundingboxLoop* noundef %2) #0 {
  %4 = alloca %struct.AABB*, align 8
  %5 = alloca %struct.boundingboxStem*, align 8
  %6 = alloca %struct.boundingboxLoop*, align 8
  %7 = alloca [2 x double], align 16
  %8 = alloca [2 x double], align 16
  %9 = alloca i32, align 4
  %10 = alloca double**, align 8
  %11 = alloca i32, align 4
  %12 = alloca [2 x double], align 16
  %13 = alloca [2 x double], align 16
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store %struct.AABB* %0, %struct.AABB** %4, align 8
  store %struct.boundingboxStem* %1, %struct.boundingboxStem** %5, align 8
  store %struct.boundingboxLoop* %2, %struct.boundingboxLoop** %6, align 8
  %17 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %18 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %19 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %18, i32 0, i32 4
  %20 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  %21 = load double, double* %20, align 8
  %22 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %23 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %22, i32 0, i32 1
  %24 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  %25 = load double, double* %24, align 8
  %26 = fmul double %21, %25
  store double %26, double* %17, align 8
  %27 = getelementptr inbounds double, double* %17, i64 1
  %28 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %29 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %28, i32 0, i32 4
  %30 = getelementptr inbounds [2 x double], [2 x double]* %29, i64 0, i64 0
  %31 = load double, double* %30, align 8
  %32 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %33 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %32, i32 0, i32 1
  %34 = getelementptr inbounds [2 x double], [2 x double]* %33, i64 0, i64 1
  %35 = load double, double* %34, align 8
  %36 = fmul double %31, %35
  store double %36, double* %27, align 8
  %37 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %38 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %39 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %38, i32 0, i32 4
  %40 = getelementptr inbounds [2 x double], [2 x double]* %39, i64 0, i64 1
  %41 = load double, double* %40, align 8
  %42 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %43 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %42, i32 0, i32 2
  %44 = getelementptr inbounds [2 x double], [2 x double]* %43, i64 0, i64 0
  %45 = load double, double* %44, align 8
  %46 = fmul double %41, %45
  store double %46, double* %37, align 8
  %47 = getelementptr inbounds double, double* %37, i64 1
  %48 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %49 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %48, i32 0, i32 4
  %50 = getelementptr inbounds [2 x double], [2 x double]* %49, i64 0, i64 1
  %51 = load double, double* %50, align 8
  %52 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %53 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %52, i32 0, i32 2
  %54 = getelementptr inbounds [2 x double], [2 x double]* %53, i64 0, i64 1
  %55 = load double, double* %54, align 8
  %56 = fmul double %51, %55
  store double %56, double* %47, align 8
  %57 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %58 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %57, i32 0, i32 5
  %59 = load i32, i32* %58, align 8
  %60 = add nsw i32 6, %59
  store i32 %60, i32* %9, align 4
  %61 = load i32, i32* %9, align 4
  %62 = sext i32 %61 to i64
  %63 = mul i64 %62, 8
  %64 = trunc i64 %63 to i32
  %65 = call i8* @vrna_alloc(i32 noundef %64)
  %66 = bitcast i8* %65 to double**
  store double** %66, double*** %10, align 8
  store i32 0, i32* %11, align 4
  br label %67

67:                                               ; preds = %78, %3
  %68 = load i32, i32* %11, align 4
  %69 = load i32, i32* %9, align 4
  %70 = icmp slt i32 %68, %69
  br i1 %70, label %71, label %81

71:                                               ; preds = %67
  %72 = call i8* @vrna_alloc(i32 noundef 16)
  %73 = bitcast i8* %72 to double*
  %74 = load double**, double*** %10, align 8
  %75 = load i32, i32* %11, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds double*, double** %74, i64 %76
  store double* %73, double** %77, align 8
  br label %78

78:                                               ; preds = %71
  %79 = load i32, i32* %11, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %11, align 4
  br label %67, !llvm.loop !56

81:                                               ; preds = %67
  %82 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %83 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %82, i32 0, i32 3
  %84 = getelementptr inbounds [2 x double], [2 x double]* %83, i64 0, i64 0
  %85 = load double, double* %84, align 8
  %86 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %87 = load double, double* %86, align 16
  %88 = fsub double %85, %87
  %89 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %90 = load double, double* %89, align 16
  %91 = fadd double %88, %90
  %92 = load double**, double*** %10, align 8
  %93 = getelementptr inbounds double*, double** %92, i64 0
  %94 = load double*, double** %93, align 8
  %95 = getelementptr inbounds double, double* %94, i64 0
  store double %91, double* %95, align 8
  %96 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %97 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %96, i32 0, i32 3
  %98 = getelementptr inbounds [2 x double], [2 x double]* %97, i64 0, i64 1
  %99 = load double, double* %98, align 8
  %100 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 1
  %101 = load double, double* %100, align 8
  %102 = fsub double %99, %101
  %103 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 1
  %104 = load double, double* %103, align 8
  %105 = fadd double %102, %104
  %106 = load double**, double*** %10, align 8
  %107 = getelementptr inbounds double*, double** %106, i64 0
  %108 = load double*, double** %107, align 8
  %109 = getelementptr inbounds double, double* %108, i64 1
  store double %105, double* %109, align 8
  %110 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %111 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %110, i32 0, i32 3
  %112 = getelementptr inbounds [2 x double], [2 x double]* %111, i64 0, i64 0
  %113 = load double, double* %112, align 8
  %114 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %115 = load double, double* %114, align 16
  %116 = fadd double %113, %115
  %117 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %118 = load double, double* %117, align 16
  %119 = fadd double %116, %118
  %120 = load double**, double*** %10, align 8
  %121 = getelementptr inbounds double*, double** %120, i64 1
  %122 = load double*, double** %121, align 8
  %123 = getelementptr inbounds double, double* %122, i64 0
  store double %119, double* %123, align 8
  %124 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %125 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %124, i32 0, i32 3
  %126 = getelementptr inbounds [2 x double], [2 x double]* %125, i64 0, i64 1
  %127 = load double, double* %126, align 8
  %128 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 1
  %129 = load double, double* %128, align 8
  %130 = fadd double %127, %129
  %131 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 1
  %132 = load double, double* %131, align 8
  %133 = fadd double %130, %132
  %134 = load double**, double*** %10, align 8
  %135 = getelementptr inbounds double*, double** %134, i64 1
  %136 = load double*, double** %135, align 8
  %137 = getelementptr inbounds double, double* %136, i64 1
  store double %133, double* %137, align 8
  %138 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %139 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %138, i32 0, i32 3
  %140 = getelementptr inbounds [2 x double], [2 x double]* %139, i64 0, i64 0
  %141 = load double, double* %140, align 8
  %142 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %143 = load double, double* %142, align 16
  %144 = fadd double %141, %143
  %145 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %146 = load double, double* %145, align 16
  %147 = fsub double %144, %146
  %148 = load double**, double*** %10, align 8
  %149 = getelementptr inbounds double*, double** %148, i64 2
  %150 = load double*, double** %149, align 8
  %151 = getelementptr inbounds double, double* %150, i64 0
  store double %147, double* %151, align 8
  %152 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %153 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %152, i32 0, i32 3
  %154 = getelementptr inbounds [2 x double], [2 x double]* %153, i64 0, i64 1
  %155 = load double, double* %154, align 8
  %156 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 1
  %157 = load double, double* %156, align 8
  %158 = fadd double %155, %157
  %159 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 1
  %160 = load double, double* %159, align 8
  %161 = fsub double %158, %160
  %162 = load double**, double*** %10, align 8
  %163 = getelementptr inbounds double*, double** %162, i64 2
  %164 = load double*, double** %163, align 8
  %165 = getelementptr inbounds double, double* %164, i64 1
  store double %161, double* %165, align 8
  %166 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %167 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %166, i32 0, i32 3
  %168 = getelementptr inbounds [2 x double], [2 x double]* %167, i64 0, i64 0
  %169 = load double, double* %168, align 8
  %170 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %171 = load double, double* %170, align 16
  %172 = fsub double %169, %171
  %173 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %174 = load double, double* %173, align 16
  %175 = fsub double %172, %174
  %176 = load double**, double*** %10, align 8
  %177 = getelementptr inbounds double*, double** %176, i64 3
  %178 = load double*, double** %177, align 8
  %179 = getelementptr inbounds double, double* %178, i64 0
  store double %175, double* %179, align 8
  %180 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %181 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %180, i32 0, i32 3
  %182 = getelementptr inbounds [2 x double], [2 x double]* %181, i64 0, i64 1
  %183 = load double, double* %182, align 8
  %184 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 1
  %185 = load double, double* %184, align 8
  %186 = fsub double %183, %185
  %187 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 1
  %188 = load double, double* %187, align 8
  %189 = fsub double %186, %188
  %190 = load double**, double*** %10, align 8
  %191 = getelementptr inbounds double*, double** %190, i64 3
  %192 = load double*, double** %191, align 8
  %193 = getelementptr inbounds double, double* %192, i64 1
  store double %189, double* %193, align 8
  %194 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %6, align 8
  %195 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %194, i32 0, i32 1
  %196 = getelementptr inbounds [2 x double], [2 x double]* %195, i64 0, i64 0
  %197 = load double, double* %196, align 8
  %198 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %6, align 8
  %199 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %198, i32 0, i32 2
  %200 = load double, double* %199, align 8
  %201 = fsub double %197, %200
  %202 = load double**, double*** %10, align 8
  %203 = getelementptr inbounds double*, double** %202, i64 4
  %204 = load double*, double** %203, align 8
  %205 = getelementptr inbounds double, double* %204, i64 0
  store double %201, double* %205, align 8
  %206 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %6, align 8
  %207 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %206, i32 0, i32 1
  %208 = getelementptr inbounds [2 x double], [2 x double]* %207, i64 0, i64 1
  %209 = load double, double* %208, align 8
  %210 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %6, align 8
  %211 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %210, i32 0, i32 2
  %212 = load double, double* %211, align 8
  %213 = fsub double %209, %212
  %214 = load double**, double*** %10, align 8
  %215 = getelementptr inbounds double*, double** %214, i64 4
  %216 = load double*, double** %215, align 8
  %217 = getelementptr inbounds double, double* %216, i64 1
  store double %213, double* %217, align 8
  %218 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %6, align 8
  %219 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %218, i32 0, i32 1
  %220 = getelementptr inbounds [2 x double], [2 x double]* %219, i64 0, i64 0
  %221 = load double, double* %220, align 8
  %222 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %6, align 8
  %223 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %222, i32 0, i32 2
  %224 = load double, double* %223, align 8
  %225 = fadd double %221, %224
  %226 = load double**, double*** %10, align 8
  %227 = getelementptr inbounds double*, double** %226, i64 5
  %228 = load double*, double** %227, align 8
  %229 = getelementptr inbounds double, double* %228, i64 0
  store double %225, double* %229, align 8
  %230 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %6, align 8
  %231 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %230, i32 0, i32 1
  %232 = getelementptr inbounds [2 x double], [2 x double]* %231, i64 0, i64 1
  %233 = load double, double* %232, align 8
  %234 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %6, align 8
  %235 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %234, i32 0, i32 2
  %236 = load double, double* %235, align 8
  %237 = fadd double %233, %236
  %238 = load double**, double*** %10, align 8
  %239 = getelementptr inbounds double*, double** %238, i64 5
  %240 = load double*, double** %239, align 8
  %241 = getelementptr inbounds double, double* %240, i64 1
  store double %237, double* %241, align 8
  store i32 0, i32* %14, align 4
  br label %242

242:                                              ; preds = %259, %81
  %243 = load i32, i32* %14, align 4
  %244 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %245 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %244, i32 0, i32 5
  %246 = load i32, i32* %245, align 8
  %247 = icmp slt i32 %243, %246
  br i1 %247, label %248, label %262

248:                                              ; preds = %242
  %249 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %250 = load i32, i32* %14, align 4
  %251 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %252 = load double**, double*** %10, align 8
  %253 = load i32, i32* %14, align 4
  %254 = add nsw i32 6, %253
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds double*, double** %252, i64 %255
  %257 = load double*, double** %256, align 8
  %258 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  call void @getBulgeCoordinates(%struct.boundingboxStem* noundef %249, i32 noundef %250, double* noundef %251, double* noundef %257, double* noundef %258)
  br label %259

259:                                              ; preds = %248
  %260 = load i32, i32* %14, align 4
  %261 = add nsw i32 %260, 1
  store i32 %261, i32* %14, align 4
  br label %242, !llvm.loop !57

262:                                              ; preds = %242
  %263 = load double**, double*** %10, align 8
  %264 = getelementptr inbounds double*, double** %263, i64 0
  %265 = load double*, double** %264, align 8
  %266 = getelementptr inbounds double, double* %265, i64 0
  %267 = load double, double* %266, align 8
  %268 = load %struct.AABB*, %struct.AABB** %4, align 8
  %269 = getelementptr inbounds %struct.AABB, %struct.AABB* %268, i32 0, i32 0
  %270 = getelementptr inbounds [2 x double], [2 x double]* %269, i64 0, i64 0
  store double %267, double* %270, align 8
  %271 = load double**, double*** %10, align 8
  %272 = getelementptr inbounds double*, double** %271, i64 0
  %273 = load double*, double** %272, align 8
  %274 = getelementptr inbounds double, double* %273, i64 1
  %275 = load double, double* %274, align 8
  %276 = load %struct.AABB*, %struct.AABB** %4, align 8
  %277 = getelementptr inbounds %struct.AABB, %struct.AABB* %276, i32 0, i32 0
  %278 = getelementptr inbounds [2 x double], [2 x double]* %277, i64 0, i64 1
  store double %275, double* %278, align 8
  %279 = load double**, double*** %10, align 8
  %280 = getelementptr inbounds double*, double** %279, i64 0
  %281 = load double*, double** %280, align 8
  %282 = getelementptr inbounds double, double* %281, i64 0
  %283 = load double, double* %282, align 8
  %284 = load %struct.AABB*, %struct.AABB** %4, align 8
  %285 = getelementptr inbounds %struct.AABB, %struct.AABB* %284, i32 0, i32 1
  %286 = getelementptr inbounds [2 x double], [2 x double]* %285, i64 0, i64 0
  store double %283, double* %286, align 8
  %287 = load double**, double*** %10, align 8
  %288 = getelementptr inbounds double*, double** %287, i64 0
  %289 = load double*, double** %288, align 8
  %290 = getelementptr inbounds double, double* %289, i64 1
  %291 = load double, double* %290, align 8
  %292 = load %struct.AABB*, %struct.AABB** %4, align 8
  %293 = getelementptr inbounds %struct.AABB, %struct.AABB* %292, i32 0, i32 1
  %294 = getelementptr inbounds [2 x double], [2 x double]* %293, i64 0, i64 1
  store double %291, double* %294, align 8
  store i32 1, i32* %15, align 4
  br label %295

295:                                              ; preds = %396, %262
  %296 = load i32, i32* %15, align 4
  %297 = load i32, i32* %9, align 4
  %298 = icmp slt i32 %296, %297
  br i1 %298, label %299, label %399

299:                                              ; preds = %295
  %300 = load %struct.AABB*, %struct.AABB** %4, align 8
  %301 = getelementptr inbounds %struct.AABB, %struct.AABB* %300, i32 0, i32 0
  %302 = getelementptr inbounds [2 x double], [2 x double]* %301, i64 0, i64 0
  %303 = load double, double* %302, align 8
  %304 = load double**, double*** %10, align 8
  %305 = load i32, i32* %15, align 4
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds double*, double** %304, i64 %306
  %308 = load double*, double** %307, align 8
  %309 = getelementptr inbounds double, double* %308, i64 0
  %310 = load double, double* %309, align 8
  %311 = fcmp ogt double %303, %310
  br i1 %311, label %312, label %323

312:                                              ; preds = %299
  %313 = load double**, double*** %10, align 8
  %314 = load i32, i32* %15, align 4
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds double*, double** %313, i64 %315
  %317 = load double*, double** %316, align 8
  %318 = getelementptr inbounds double, double* %317, i64 0
  %319 = load double, double* %318, align 8
  %320 = load %struct.AABB*, %struct.AABB** %4, align 8
  %321 = getelementptr inbounds %struct.AABB, %struct.AABB* %320, i32 0, i32 0
  %322 = getelementptr inbounds [2 x double], [2 x double]* %321, i64 0, i64 0
  store double %319, double* %322, align 8
  br label %323

323:                                              ; preds = %312, %299
  %324 = load %struct.AABB*, %struct.AABB** %4, align 8
  %325 = getelementptr inbounds %struct.AABB, %struct.AABB* %324, i32 0, i32 0
  %326 = getelementptr inbounds [2 x double], [2 x double]* %325, i64 0, i64 1
  %327 = load double, double* %326, align 8
  %328 = load double**, double*** %10, align 8
  %329 = load i32, i32* %15, align 4
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds double*, double** %328, i64 %330
  %332 = load double*, double** %331, align 8
  %333 = getelementptr inbounds double, double* %332, i64 1
  %334 = load double, double* %333, align 8
  %335 = fcmp ogt double %327, %334
  br i1 %335, label %336, label %347

336:                                              ; preds = %323
  %337 = load double**, double*** %10, align 8
  %338 = load i32, i32* %15, align 4
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds double*, double** %337, i64 %339
  %341 = load double*, double** %340, align 8
  %342 = getelementptr inbounds double, double* %341, i64 1
  %343 = load double, double* %342, align 8
  %344 = load %struct.AABB*, %struct.AABB** %4, align 8
  %345 = getelementptr inbounds %struct.AABB, %struct.AABB* %344, i32 0, i32 0
  %346 = getelementptr inbounds [2 x double], [2 x double]* %345, i64 0, i64 1
  store double %343, double* %346, align 8
  br label %347

347:                                              ; preds = %336, %323
  %348 = load %struct.AABB*, %struct.AABB** %4, align 8
  %349 = getelementptr inbounds %struct.AABB, %struct.AABB* %348, i32 0, i32 1
  %350 = getelementptr inbounds [2 x double], [2 x double]* %349, i64 0, i64 0
  %351 = load double, double* %350, align 8
  %352 = load double**, double*** %10, align 8
  %353 = load i32, i32* %15, align 4
  %354 = sext i32 %353 to i64
  %355 = getelementptr inbounds double*, double** %352, i64 %354
  %356 = load double*, double** %355, align 8
  %357 = getelementptr inbounds double, double* %356, i64 0
  %358 = load double, double* %357, align 8
  %359 = fcmp olt double %351, %358
  br i1 %359, label %360, label %371

360:                                              ; preds = %347
  %361 = load double**, double*** %10, align 8
  %362 = load i32, i32* %15, align 4
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds double*, double** %361, i64 %363
  %365 = load double*, double** %364, align 8
  %366 = getelementptr inbounds double, double* %365, i64 0
  %367 = load double, double* %366, align 8
  %368 = load %struct.AABB*, %struct.AABB** %4, align 8
  %369 = getelementptr inbounds %struct.AABB, %struct.AABB* %368, i32 0, i32 1
  %370 = getelementptr inbounds [2 x double], [2 x double]* %369, i64 0, i64 0
  store double %367, double* %370, align 8
  br label %371

371:                                              ; preds = %360, %347
  %372 = load %struct.AABB*, %struct.AABB** %4, align 8
  %373 = getelementptr inbounds %struct.AABB, %struct.AABB* %372, i32 0, i32 1
  %374 = getelementptr inbounds [2 x double], [2 x double]* %373, i64 0, i64 1
  %375 = load double, double* %374, align 8
  %376 = load double**, double*** %10, align 8
  %377 = load i32, i32* %15, align 4
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds double*, double** %376, i64 %378
  %380 = load double*, double** %379, align 8
  %381 = getelementptr inbounds double, double* %380, i64 1
  %382 = load double, double* %381, align 8
  %383 = fcmp olt double %375, %382
  br i1 %383, label %384, label %395

384:                                              ; preds = %371
  %385 = load double**, double*** %10, align 8
  %386 = load i32, i32* %15, align 4
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds double*, double** %385, i64 %387
  %389 = load double*, double** %388, align 8
  %390 = getelementptr inbounds double, double* %389, i64 1
  %391 = load double, double* %390, align 8
  %392 = load %struct.AABB*, %struct.AABB** %4, align 8
  %393 = getelementptr inbounds %struct.AABB, %struct.AABB* %392, i32 0, i32 1
  %394 = getelementptr inbounds [2 x double], [2 x double]* %393, i64 0, i64 1
  store double %391, double* %394, align 8
  br label %395

395:                                              ; preds = %384, %371
  br label %396

396:                                              ; preds = %395
  %397 = load i32, i32* %15, align 4
  %398 = add nsw i32 %397, 1
  store i32 %398, i32* %15, align 4
  br label %295, !llvm.loop !58

399:                                              ; preds = %295
  store i32 0, i32* %16, align 4
  br label %400

400:                                              ; preds = %411, %399
  %401 = load i32, i32* %16, align 4
  %402 = load i32, i32* %9, align 4
  %403 = icmp slt i32 %401, %402
  br i1 %403, label %404, label %414

404:                                              ; preds = %400
  %405 = load double**, double*** %10, align 8
  %406 = load i32, i32* %16, align 4
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds double*, double** %405, i64 %407
  %409 = load double*, double** %408, align 8
  %410 = bitcast double* %409 to i8*
  call void @free(i8* noundef %410) #7
  br label %411

411:                                              ; preds = %404
  %412 = load i32, i32* %16, align 4
  %413 = add nsw i32 %412, 1
  store i32 %413, i32* %16, align 4
  br label %400, !llvm.loop !59

414:                                              ; preds = %400
  %415 = load double**, double*** %10, align 8
  %416 = bitcast double** %415 to i8*
  call void @free(i8* noundef %416) #7
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.configtree* @getChild(%struct.configtree* noundef %0, i32 noundef %1) #0 {
  %3 = alloca %struct.configtree*, align 8
  %4 = alloca %struct.configtree*, align 8
  %5 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %4, align 8
  store i32 %1, i32* %5, align 4
  %6 = load %struct.configtree*, %struct.configtree** %4, align 8
  %7 = icmp eq %struct.configtree* %6, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  store %struct.configtree* null, %struct.configtree** %3, align 8
  br label %28

9:                                                ; preds = %2
  %10 = load i32, i32* %5, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  store %struct.configtree* null, %struct.configtree** %3, align 8
  br label %28

13:                                               ; preds = %9
  %14 = load i32, i32* %5, align 4
  %15 = load %struct.configtree*, %struct.configtree** %4, align 8
  %16 = getelementptr inbounds %struct.configtree, %struct.configtree* %15, i32 0, i32 3
  %17 = load i32, i32* %16, align 8
  %18 = icmp sge i32 %14, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %13
  store %struct.configtree* null, %struct.configtree** %3, align 8
  br label %28

20:                                               ; preds = %13
  %21 = load %struct.configtree*, %struct.configtree** %4, align 8
  %22 = getelementptr inbounds %struct.configtree, %struct.configtree* %21, i32 0, i32 2
  %23 = load %struct.configtree**, %struct.configtree*** %22, align 8
  %24 = load i32, i32* %5, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %struct.configtree*, %struct.configtree** %23, i64 %25
  %27 = load %struct.configtree*, %struct.configtree** %26, align 8
  store %struct.configtree* %27, %struct.configtree** %3, align 8
  br label %28

28:                                               ; preds = %20, %19, %12, %8
  %29 = load %struct.configtree*, %struct.configtree** %3, align 8
  ret %struct.configtree* %29
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @getLoopData(double* noundef %0, double* noundef %1, i32 noundef %2, i16* noundef %3, %struct.tBaseInformation* noundef %4, double* noundef %5, double* noundef %6) #0 {
  %8 = alloca double*, align 8
  %9 = alloca double*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i16*, align 8
  %12 = alloca %struct.tBaseInformation*, align 8
  %13 = alloca double*, align 8
  %14 = alloca double*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca %struct.config*, align 8
  %18 = alloca double, align 8
  %19 = alloca [2 x double], align 16
  %20 = alloca [2 x double], align 16
  %21 = alloca [2 x double], align 16
  %22 = alloca i16, align 2
  %23 = alloca [2 x double], align 16
  %24 = alloca [2 x double], align 16
  %25 = alloca double, align 8
  %26 = alloca double, align 8
  %27 = alloca i16, align 2
  store double* %0, double** %8, align 8
  store double* %1, double** %9, align 8
  store i32 %2, i32* %10, align 4
  store i16* %3, i16** %11, align 8
  store %struct.tBaseInformation* %4, %struct.tBaseInformation** %12, align 8
  store double* %5, double** %13, align 8
  store double* %6, double** %14, align 8
  %28 = load i32, i32* %10, align 4
  store i32 %28, i32* %15, align 4
  %29 = load i16*, i16** %11, align 8
  %30 = load i32, i32* %10, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i16, i16* %29, i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = sext i16 %33 to i32
  store i32 %34, i32* %16, align 4
  %35 = load %struct.tBaseInformation*, %struct.tBaseInformation** %12, align 8
  %36 = load i32, i32* %15, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %35, i64 %37
  %39 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %38, i32 0, i32 3
  %40 = load %struct.config*, %struct.config** %39, align 8
  store %struct.config* %40, %struct.config** %17, align 8
  %41 = load %struct.config*, %struct.config** %17, align 8
  %42 = getelementptr inbounds %struct.config, %struct.config* %41, i32 0, i32 0
  %43 = load double, double* %42, align 8
  store double %43, double* %18, align 8
  %44 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  %45 = load double*, double** %13, align 8
  %46 = load i32, i32* %10, align 4
  %47 = sub nsw i32 %46, 1
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds double, double* %45, i64 %48
  %50 = load double, double* %49, align 8
  store double %50, double* %44, align 8
  %51 = getelementptr inbounds double, double* %44, i64 1
  %52 = load double*, double** %14, align 8
  %53 = load i32, i32* %10, align 4
  %54 = sub nsw i32 %53, 1
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds double, double* %52, i64 %55
  %57 = load double, double* %56, align 8
  store double %57, double* %51, align 8
  %58 = getelementptr inbounds [2 x double], [2 x double]* %20, i64 0, i64 0
  %59 = load double*, double** %13, align 8
  %60 = load i32, i32* %10, align 4
  %61 = add nsw i32 %60, 1
  %62 = sub nsw i32 %61, 1
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds double, double* %59, i64 %63
  %65 = load double, double* %64, align 8
  store double %65, double* %58, align 8
  %66 = getelementptr inbounds double, double* %58, i64 1
  %67 = load double*, double** %14, align 8
  %68 = load i32, i32* %10, align 4
  %69 = add nsw i32 %68, 1
  %70 = sub nsw i32 %69, 1
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds double, double* %67, i64 %71
  %73 = load double, double* %72, align 8
  store double %73, double* %66, align 8
  %74 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 0
  %75 = load double*, double** %13, align 8
  %76 = load i32, i32* %16, align 4
  %77 = sub nsw i32 %76, 1
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds double, double* %75, i64 %78
  %80 = load double, double* %79, align 8
  store double %80, double* %74, align 8
  %81 = getelementptr inbounds double, double* %74, i64 1
  %82 = load double*, double** %14, align 8
  %83 = load i32, i32* %16, align 4
  %84 = sub nsw i32 %83, 1
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds double, double* %82, i64 %85
  %87 = load double, double* %86, align 8
  store double %87, double* %81, align 8
  %88 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  %89 = getelementptr inbounds [2 x double], [2 x double]* %20, i64 0, i64 0
  %90 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 0
  %91 = call signext i16 @isToTheRightPointPoint(double* noundef %88, double* noundef %89, double* noundef %90)
  store i16 %91, i16* %22, align 2
  %92 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 0
  %93 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  %94 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  call void @vector(double* noundef %92, double* noundef %93, double* noundef %94)
  %95 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  %96 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  call void @normal(double* noundef %95, double* noundef %96)
  %97 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  %98 = call double @vectorLength2D(double* noundef %97)
  store double %98, double* %25, align 8
  %99 = load double, double* %18, align 8
  %100 = load double, double* %18, align 8
  %101 = load double, double* %25, align 8
  %102 = fmul double 2.500000e-01, %101
  %103 = load double, double* %25, align 8
  %104 = fmul double %102, %103
  %105 = fneg double %104
  %106 = call double @llvm.fmuladd.f64(double %99, double %100, double %105)
  %107 = call double @sqrt(double noundef %106) #7
  store double %107, double* %26, align 8
  %108 = load i16, i16* %22, align 2
  %109 = sext i16 %108 to i32
  %110 = icmp ne i32 %109, 0
  %111 = zext i1 %110 to i64
  %112 = select i1 %110, i32 1, i32 -1
  %113 = trunc i32 %112 to i16
  store i16 %113, i16* %27, align 2
  %114 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 0
  %115 = load double, double* %114, align 16
  %116 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  %117 = load double, double* %116, align 16
  %118 = call double @llvm.fmuladd.f64(double 5.000000e-01, double %117, double %115)
  %119 = load i16, i16* %27, align 2
  %120 = sext i16 %119 to i32
  %121 = sitofp i32 %120 to double
  %122 = load double, double* %26, align 8
  %123 = fmul double %121, %122
  %124 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  %125 = load double, double* %124, align 16
  %126 = call double @llvm.fmuladd.f64(double %123, double %125, double %118)
  %127 = load double*, double** %8, align 8
  %128 = getelementptr inbounds double, double* %127, i64 0
  store double %126, double* %128, align 8
  %129 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 1
  %130 = load double, double* %129, align 8
  %131 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 1
  %132 = load double, double* %131, align 8
  %133 = call double @llvm.fmuladd.f64(double 5.000000e-01, double %132, double %130)
  %134 = load i16, i16* %27, align 2
  %135 = sext i16 %134 to i32
  %136 = sitofp i32 %135 to double
  %137 = load double, double* %26, align 8
  %138 = fmul double %136, %137
  %139 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 1
  %140 = load double, double* %139, align 8
  %141 = call double @llvm.fmuladd.f64(double %138, double %140, double %133)
  %142 = load double*, double** %8, align 8
  %143 = getelementptr inbounds double, double* %142, i64 1
  store double %141, double* %143, align 8
  %144 = load double, double* %18, align 8
  %145 = load double*, double** %9, align 8
  store double %144, double* %145, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.boundingboxLoop* @createLoopBox(double* noundef %0, double noundef %1) #0 {
  %3 = alloca double*, align 8
  %4 = alloca double, align 8
  %5 = alloca %struct.boundingboxLoop*, align 8
  store double* %0, double** %3, align 8
  store double %1, double* %4, align 8
  %6 = call i8* @vrna_alloc(i32 noundef 32)
  %7 = bitcast i8* %6 to %struct.boundingboxLoop*
  store %struct.boundingboxLoop* %7, %struct.boundingboxLoop** %5, align 8
  %8 = load double*, double** %3, align 8
  %9 = getelementptr inbounds double, double* %8, i64 0
  %10 = load double, double* %9, align 8
  %11 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %5, align 8
  %12 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %11, i32 0, i32 1
  %13 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  store double %10, double* %13, align 8
  %14 = load double*, double** %3, align 8
  %15 = getelementptr inbounds double, double* %14, i64 1
  %16 = load double, double* %15, align 8
  %17 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %5, align 8
  %18 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %17, i32 0, i32 1
  %19 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 1
  store double %16, double* %19, align 8
  %20 = load double, double* %4, align 8
  %21 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %5, align 8
  %22 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %21, i32 0, i32 2
  store double %20, double* %22, align 8
  %23 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %5, align 8
  ret %struct.boundingboxLoop* %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @isToTheRightPointPoint(double* noundef %0, double* noundef %1, double* noundef %2) #0 {
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca [2 x double], align 16
  %8 = alloca [2 x double], align 16
  %9 = alloca [2 x double], align 16
  %10 = alloca [2 x double], align 16
  %11 = alloca [2 x double], align 16
  %12 = alloca [2 x double], align 16
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca i16, align 2
  store double* %0, double** %4, align 8
  store double* %1, double** %5, align 8
  store double* %2, double** %6, align 8
  %16 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %17 = load double*, double** %5, align 8
  %18 = getelementptr inbounds double, double* %17, i64 0
  %19 = load double, double* %18, align 8
  %20 = load double*, double** %4, align 8
  %21 = getelementptr inbounds double, double* %20, i64 0
  %22 = load double, double* %21, align 8
  %23 = fsub double %19, %22
  store double %23, double* %16, align 8
  %24 = getelementptr inbounds double, double* %16, i64 1
  %25 = load double*, double** %5, align 8
  %26 = getelementptr inbounds double, double* %25, i64 1
  %27 = load double, double* %26, align 8
  %28 = load double*, double** %4, align 8
  %29 = getelementptr inbounds double, double* %28, i64 1
  %30 = load double, double* %29, align 8
  %31 = fsub double %27, %30
  store double %31, double* %24, align 8
  %32 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %33 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 1
  %34 = load double, double* %33, align 8
  store double %34, double* %32, align 8
  %35 = getelementptr inbounds double, double* %32, i64 1
  %36 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %37 = load double, double* %36, align 16
  %38 = fneg double %37
  store double %38, double* %35, align 8
  %39 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %40 = load double*, double** %5, align 8
  %41 = getelementptr inbounds double, double* %40, i64 0
  %42 = load double, double* %41, align 8
  %43 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %44 = load double, double* %43, align 16
  %45 = fadd double %42, %44
  store double %45, double* %39, align 8
  %46 = getelementptr inbounds double, double* %39, i64 1
  %47 = load double*, double** %5, align 8
  %48 = getelementptr inbounds double, double* %47, i64 1
  %49 = load double, double* %48, align 8
  %50 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 1
  %51 = load double, double* %50, align 8
  %52 = fadd double %49, %51
  store double %52, double* %46, align 8
  %53 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %54 = load double*, double** %5, align 8
  %55 = getelementptr inbounds double, double* %54, i64 0
  %56 = load double, double* %55, align 8
  %57 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %58 = load double, double* %57, align 16
  %59 = fsub double %56, %58
  store double %59, double* %53, align 8
  %60 = getelementptr inbounds double, double* %53, i64 1
  %61 = load double*, double** %5, align 8
  %62 = getelementptr inbounds double, double* %61, i64 1
  %63 = load double, double* %62, align 8
  %64 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 1
  %65 = load double, double* %64, align 8
  %66 = fsub double %63, %65
  store double %66, double* %60, align 8
  %67 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %68 = load double*, double** %6, align 8
  %69 = getelementptr inbounds double, double* %68, i64 0
  %70 = load double, double* %69, align 8
  %71 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %72 = load double, double* %71, align 16
  %73 = fsub double %70, %72
  store double %73, double* %67, align 8
  %74 = getelementptr inbounds double, double* %67, i64 1
  %75 = load double*, double** %6, align 8
  %76 = getelementptr inbounds double, double* %75, i64 1
  %77 = load double, double* %76, align 8
  %78 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 1
  %79 = load double, double* %78, align 8
  %80 = fsub double %77, %79
  store double %80, double* %74, align 8
  %81 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %82 = load double*, double** %6, align 8
  %83 = getelementptr inbounds double, double* %82, i64 0
  %84 = load double, double* %83, align 8
  %85 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %86 = load double, double* %85, align 16
  %87 = fsub double %84, %86
  store double %87, double* %81, align 8
  %88 = getelementptr inbounds double, double* %81, i64 1
  %89 = load double*, double** %6, align 8
  %90 = getelementptr inbounds double, double* %89, i64 1
  %91 = load double, double* %90, align 8
  %92 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 1
  %93 = load double, double* %92, align 8
  %94 = fsub double %91, %93
  store double %94, double* %88, align 8
  %95 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %96 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %97 = call double @scalarProduct2D(double* noundef %95, double* noundef %96)
  store double %97, double* %13, align 8
  %98 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %99 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %100 = call double @scalarProduct2D(double* noundef %98, double* noundef %99)
  store double %100, double* %14, align 8
  %101 = load double, double* %13, align 8
  %102 = load double, double* %14, align 8
  %103 = fcmp olt double %101, %102
  %104 = zext i1 %103 to i32
  %105 = trunc i32 %104 to i16
  store i16 %105, i16* %15, align 2
  %106 = load i16, i16* %15, align 2
  ret i16 %106
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @vector(double* noundef %0, double* noundef %1, double* noundef %2) #0 {
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  store double* %0, double** %4, align 8
  store double* %1, double** %5, align 8
  store double* %2, double** %6, align 8
  %7 = load double*, double** %5, align 8
  %8 = getelementptr inbounds double, double* %7, i64 0
  %9 = load double, double* %8, align 8
  %10 = load double*, double** %4, align 8
  %11 = getelementptr inbounds double, double* %10, i64 0
  %12 = load double, double* %11, align 8
  %13 = fsub double %9, %12
  %14 = load double*, double** %6, align 8
  %15 = getelementptr inbounds double, double* %14, i64 0
  store double %13, double* %15, align 8
  %16 = load double*, double** %5, align 8
  %17 = getelementptr inbounds double, double* %16, i64 1
  %18 = load double, double* %17, align 8
  %19 = load double*, double** %4, align 8
  %20 = getelementptr inbounds double, double* %19, i64 1
  %21 = load double, double* %20, align 8
  %22 = fsub double %18, %21
  %23 = load double*, double** %6, align 8
  %24 = getelementptr inbounds double, double* %23, i64 1
  store double %22, double* %24, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @normal(double* noundef %0, double* noundef %1) #0 {
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca [2 x double], align 16
  %6 = alloca [2 x double], align 16
  store double* %0, double** %3, align 8
  store double* %1, double** %4, align 8
  %7 = load double*, double** %3, align 8
  %8 = getelementptr inbounds double, double* %7, i64 1
  %9 = load double, double* %8, align 8
  %10 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  store double %9, double* %10, align 16
  %11 = load double*, double** %3, align 8
  %12 = getelementptr inbounds double, double* %11, i64 0
  %13 = load double, double* %12, align 8
  %14 = fneg double %13
  %15 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 1
  store double %14, double* %15, align 8
  %16 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %17 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  call void @unit(double* noundef %16, double* noundef %17)
  %18 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %19 = load double, double* %18, align 16
  %20 = load double*, double** %4, align 8
  %21 = getelementptr inbounds double, double* %20, i64 0
  store double %19, double* %21, align 8
  %22 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 1
  %23 = load double, double* %22, align 8
  %24 = load double*, double** %4, align 8
  %25 = getelementptr inbounds double, double* %24, i64 1
  store double %23, double* %25, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @vectorLength2D(double* noundef %0) #0 {
  %2 = alloca double*, align 8
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  store double* %0, double** %2, align 8
  %5 = load double*, double** %2, align 8
  %6 = getelementptr inbounds double, double* %5, i64 0
  %7 = load double, double* %6, align 8
  store double %7, double* %3, align 8
  %8 = load double*, double** %2, align 8
  %9 = getelementptr inbounds double, double* %8, i64 1
  %10 = load double, double* %9, align 8
  store double %10, double* %4, align 8
  %11 = load double, double* %3, align 8
  %12 = load double, double* %3, align 8
  %13 = load double, double* %4, align 8
  %14 = load double, double* %4, align 8
  %15 = fmul double %13, %14
  %16 = call double @llvm.fmuladd.f64(double %11, double %12, double %15)
  %17 = call double @sqrt(double noundef %16) #7
  ret double %17
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @scalarProduct2D(double* noundef %0, double* noundef %1) #0 {
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  store double* %0, double** %3, align 8
  store double* %1, double** %4, align 8
  %10 = load double*, double** %3, align 8
  %11 = getelementptr inbounds double, double* %10, i64 0
  %12 = load double, double* %11, align 8
  store double %12, double* %5, align 8
  %13 = load double*, double** %3, align 8
  %14 = getelementptr inbounds double, double* %13, i64 1
  %15 = load double, double* %14, align 8
  store double %15, double* %6, align 8
  %16 = load double*, double** %4, align 8
  %17 = getelementptr inbounds double, double* %16, i64 0
  %18 = load double, double* %17, align 8
  store double %18, double* %7, align 8
  %19 = load double*, double** %4, align 8
  %20 = getelementptr inbounds double, double* %19, i64 1
  %21 = load double, double* %20, align 8
  store double %21, double* %8, align 8
  %22 = load double, double* %5, align 8
  %23 = load double, double* %7, align 8
  %24 = load double, double* %6, align 8
  %25 = load double, double* %8, align 8
  %26 = fmul double %24, %25
  %27 = call double @llvm.fmuladd.f64(double %22, double %23, double %26)
  store double %27, double* %9, align 8
  %28 = load double, double* %9, align 8
  ret double %28
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @unit(double* noundef %0, double* noundef %1) #0 {
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca double, align 8
  store double* %0, double** %3, align 8
  store double* %1, double** %4, align 8
  %6 = load double*, double** %3, align 8
  %7 = call double @vectorLength2D(double* noundef %6)
  store double %7, double* %5, align 8
  %8 = load double*, double** %3, align 8
  %9 = getelementptr inbounds double, double* %8, i64 0
  %10 = load double, double* %9, align 8
  %11 = load double, double* %5, align 8
  %12 = fdiv double %10, %11
  %13 = load double*, double** %4, align 8
  %14 = getelementptr inbounds double, double* %13, i64 0
  store double %12, double* %14, align 8
  %15 = load double*, double** %3, align 8
  %16 = getelementptr inbounds double, double* %15, i64 1
  %17 = load double, double* %16, align 8
  %18 = load double, double* %5, align 8
  %19 = fdiv double %17, %18
  %20 = load double*, double** %4, align 8
  %21 = getelementptr inbounds double, double* %20, i64 1
  store double %19, double* %21, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.boundingboxStem* @createStemBox(double* noundef %0, double* noundef %1, double* noundef %2) #0 {
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca %struct.boundingboxStem*, align 8
  %8 = alloca [2 x double], align 16
  %9 = alloca [2 x double], align 16
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  store double* %0, double** %4, align 8
  store double* %1, double** %5, align 8
  store double* %2, double** %6, align 8
  %12 = call i8* @vrna_alloc(i32 noundef 96)
  %13 = bitcast i8* %12 to %struct.boundingboxStem*
  store %struct.boundingboxStem* %13, %struct.boundingboxStem** %7, align 8
  %14 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %15 = load double*, double** %5, align 8
  %16 = getelementptr inbounds double, double* %15, i64 0
  %17 = load double, double* %16, align 8
  %18 = load double*, double** %4, align 8
  %19 = getelementptr inbounds double, double* %18, i64 0
  %20 = load double, double* %19, align 8
  %21 = fsub double %17, %20
  %22 = fmul double 5.000000e-01, %21
  store double %22, double* %14, align 8
  %23 = getelementptr inbounds double, double* %14, i64 1
  %24 = load double*, double** %5, align 8
  %25 = getelementptr inbounds double, double* %24, i64 1
  %26 = load double, double* %25, align 8
  %27 = load double*, double** %4, align 8
  %28 = getelementptr inbounds double, double* %27, i64 1
  %29 = load double, double* %28, align 8
  %30 = fsub double %26, %29
  %31 = fmul double 5.000000e-01, %30
  store double %31, double* %23, align 8
  %32 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %33 = load double*, double** %4, align 8
  %34 = getelementptr inbounds double, double* %33, i64 0
  %35 = load double, double* %34, align 8
  %36 = load double*, double** %6, align 8
  %37 = getelementptr inbounds double, double* %36, i64 0
  %38 = load double, double* %37, align 8
  %39 = fsub double %35, %38
  %40 = fmul double 5.000000e-01, %39
  store double %40, double* %32, align 8
  %41 = getelementptr inbounds double, double* %32, i64 1
  %42 = load double*, double** %4, align 8
  %43 = getelementptr inbounds double, double* %42, i64 1
  %44 = load double, double* %43, align 8
  %45 = load double*, double** %6, align 8
  %46 = getelementptr inbounds double, double* %45, i64 1
  %47 = load double, double* %46, align 8
  %48 = fsub double %44, %47
  %49 = fmul double 5.000000e-01, %48
  store double %49, double* %41, align 8
  %50 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %51 = call double @vectorLength2D(double* noundef %50)
  store double %51, double* %10, align 8
  %52 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %53 = call double @vectorLength2D(double* noundef %52)
  store double %53, double* %11, align 8
  %54 = load double, double* %10, align 8
  %55 = fcmp oeq double %54, 0.000000e+00
  br i1 %55, label %56, label %69

56:                                               ; preds = %3
  %57 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %58 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  call void @normal(double* noundef %57, double* noundef %58)
  store double 1.000000e-01, double* %10, align 8
  %59 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %60 = load double, double* %59, align 16
  %61 = load double, double* %10, align 8
  %62 = fmul double %60, %61
  %63 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  store double %62, double* %63, align 16
  %64 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 1
  %65 = load double, double* %64, align 8
  %66 = load double, double* %10, align 8
  %67 = fmul double %65, %66
  %68 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 1
  store double %67, double* %68, align 8
  br label %69

69:                                               ; preds = %56, %3
  %70 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %71 = load double, double* %70, align 16
  %72 = load double, double* %10, align 8
  %73 = fdiv double %71, %72
  %74 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %75 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %74, i32 0, i32 1
  %76 = getelementptr inbounds [2 x double], [2 x double]* %75, i64 0, i64 0
  store double %73, double* %76, align 8
  %77 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 1
  %78 = load double, double* %77, align 8
  %79 = load double, double* %10, align 8
  %80 = fdiv double %78, %79
  %81 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %82 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %81, i32 0, i32 1
  %83 = getelementptr inbounds [2 x double], [2 x double]* %82, i64 0, i64 1
  store double %80, double* %83, align 8
  %84 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %85 = load double, double* %84, align 16
  %86 = load double, double* %11, align 8
  %87 = fdiv double %85, %86
  %88 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %89 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %88, i32 0, i32 2
  %90 = getelementptr inbounds [2 x double], [2 x double]* %89, i64 0, i64 0
  store double %87, double* %90, align 8
  %91 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 1
  %92 = load double, double* %91, align 8
  %93 = load double, double* %11, align 8
  %94 = fdiv double %92, %93
  %95 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %96 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %95, i32 0, i32 2
  %97 = getelementptr inbounds [2 x double], [2 x double]* %96, i64 0, i64 1
  store double %94, double* %97, align 8
  %98 = load double*, double** %4, align 8
  %99 = getelementptr inbounds double, double* %98, i64 0
  %100 = load double, double* %99, align 8
  %101 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %102 = load double, double* %101, align 16
  %103 = fadd double %100, %102
  %104 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %105 = load double, double* %104, align 16
  %106 = fsub double %103, %105
  %107 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %108 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %107, i32 0, i32 3
  %109 = getelementptr inbounds [2 x double], [2 x double]* %108, i64 0, i64 0
  store double %106, double* %109, align 8
  %110 = load double*, double** %4, align 8
  %111 = getelementptr inbounds double, double* %110, i64 1
  %112 = load double, double* %111, align 8
  %113 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 1
  %114 = load double, double* %113, align 8
  %115 = fadd double %112, %114
  %116 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 1
  %117 = load double, double* %116, align 8
  %118 = fsub double %115, %117
  %119 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %120 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %119, i32 0, i32 3
  %121 = getelementptr inbounds [2 x double], [2 x double]* %120, i64 0, i64 1
  store double %118, double* %121, align 8
  %122 = load double, double* %10, align 8
  %123 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %124 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %123, i32 0, i32 4
  %125 = getelementptr inbounds [2 x double], [2 x double]* %124, i64 0, i64 0
  store double %122, double* %125, align 8
  %126 = load double, double* %11, align 8
  %127 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %128 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %127, i32 0, i32 4
  %129 = getelementptr inbounds [2 x double], [2 x double]* %128, i64 0, i64 1
  store double %126, double* %129, align 8
  %130 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  ret %struct.boundingboxStem* %130
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @countBulges(i16* noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = alloca i16*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i16* %0, i16** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store i32 0, i32* %7, align 4
  %10 = load i32, i32* %5, align 4
  store i32 %10, i32* %8, align 4
  br label %11

11:                                               ; preds = %27, %3
  %12 = load i32, i32* %8, align 4
  %13 = load i32, i32* %6, align 4
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %15, label %30

15:                                               ; preds = %11
  %16 = load i16*, i16** %4, align 8
  %17 = load i32, i32* %8, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i16, i16* %16, i64 %18
  %20 = load i16, i16* %19, align 2
  %21 = sext i16 %20 to i32
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %15
  %24 = load i32, i32* %7, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %7, align 4
  br label %26

26:                                               ; preds = %23, %15
  br label %27

27:                                               ; preds = %26
  %28 = load i32, i32* %8, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %8, align 4
  br label %11, !llvm.loop !60

30:                                               ; preds = %11
  %31 = load i16*, i16** %4, align 8
  %32 = load i32, i32* %6, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i16, i16* %31, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = sext i16 %35 to i32
  store i32 %36, i32* %9, align 4
  br label %37

37:                                               ; preds = %58, %30
  %38 = load i32, i32* %9, align 4
  %39 = load i16*, i16** %4, align 8
  %40 = load i32, i32* %5, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i16, i16* %39, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = sext i16 %43 to i32
  %45 = icmp slt i32 %38, %44
  br i1 %45, label %46, label %61

46:                                               ; preds = %37
  %47 = load i16*, i16** %4, align 8
  %48 = load i32, i32* %9, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i16, i16* %47, i64 %49
  %51 = load i16, i16* %50, align 2
  %52 = sext i16 %51 to i32
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %46
  %55 = load i32, i32* %7, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %7, align 4
  br label %57

57:                                               ; preds = %54, %46
  br label %58

58:                                               ; preds = %57
  %59 = load i32, i32* %9, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %9, align 4
  br label %37, !llvm.loop !61

61:                                               ; preds = %37
  %62 = load i32, i32* %7, align 4
  ret i32 %62
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @setBulges(%struct.boundingboxStem* noundef %0, i16* noundef %1, i32 noundef %2, i32 noundef %3, double* noundef %4, double* noundef %5, i32 noundef %6, double noundef %7) #0 {
  %9 = alloca %struct.boundingboxStem*, align 8
  %10 = alloca i16*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double*, align 8
  %14 = alloca double*, align 8
  %15 = alloca i32, align 4
  %16 = alloca double, align 8
  %17 = alloca double**, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca double, align 8
  %21 = alloca double*, align 8
  %22 = alloca i32, align 4
  %23 = alloca double, align 8
  %24 = alloca double*, align 8
  store %struct.boundingboxStem* %0, %struct.boundingboxStem** %9, align 8
  store i16* %1, i16** %10, align 8
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store double* %4, double** %13, align 8
  store double* %5, double** %14, align 8
  store i32 %6, i32* %15, align 4
  store double %7, double* %16, align 8
  %25 = load i32, i32* %15, align 4
  %26 = icmp sle i32 %25, 0
  br i1 %26, label %27, label %35

27:                                               ; preds = %8
  %28 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %29 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %28, i32 0, i32 7
  store double** null, double*** %29, align 8
  %30 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %31 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %30, i32 0, i32 5
  store i32 0, i32* %31, align 8
  %32 = load double, double* %16, align 8
  %33 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %34 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %33, i32 0, i32 6
  store double %32, double* %34, align 8
  br label %125

35:                                               ; preds = %8
  %36 = load i32, i32* %15, align 4
  %37 = sext i32 %36 to i64
  %38 = mul i64 %37, 8
  %39 = trunc i64 %38 to i32
  %40 = call i8* @vrna_alloc(i32 noundef %39)
  %41 = bitcast i8* %40 to double**
  store double** %41, double*** %17, align 8
  store i32 0, i32* %18, align 4
  %42 = load i32, i32* %11, align 4
  store i32 %42, i32* %19, align 4
  br label %43

43:                                               ; preds = %70, %35
  %44 = load i32, i32* %19, align 4
  %45 = load i32, i32* %12, align 4
  %46 = icmp slt i32 %44, %45
  br i1 %46, label %47, label %73

47:                                               ; preds = %43
  %48 = load i16*, i16** %10, align 8
  %49 = load i32, i32* %19, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i16, i16* %48, i64 %50
  %52 = load i16, i16* %51, align 2
  %53 = sext i16 %52 to i32
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %69

55:                                               ; preds = %47
  store double 1.000000e+00, double* %20, align 8
  %56 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %57 = load double*, double** %13, align 8
  %58 = load double*, double** %14, align 8
  %59 = load i32, i32* %19, align 4
  %60 = load double, double* %20, align 8
  %61 = call double* @createBulge(%struct.boundingboxStem* noundef %56, double* noundef %57, double* noundef %58, i32 noundef %59, double noundef %60)
  store double* %61, double** %21, align 8
  %62 = load double*, double** %21, align 8
  %63 = load double**, double*** %17, align 8
  %64 = load i32, i32* %18, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds double*, double** %63, i64 %65
  store double* %62, double** %66, align 8
  %67 = load i32, i32* %18, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %18, align 4
  br label %69

69:                                               ; preds = %55, %47
  br label %70

70:                                               ; preds = %69
  %71 = load i32, i32* %19, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %19, align 4
  br label %43, !llvm.loop !62

73:                                               ; preds = %43
  %74 = load i16*, i16** %10, align 8
  %75 = load i32, i32* %12, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i16, i16* %74, i64 %76
  %78 = load i16, i16* %77, align 2
  %79 = sext i16 %78 to i32
  store i32 %79, i32* %22, align 4
  br label %80

80:                                               ; preds = %112, %73
  %81 = load i32, i32* %22, align 4
  %82 = load i16*, i16** %10, align 8
  %83 = load i32, i32* %11, align 4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i16, i16* %82, i64 %84
  %86 = load i16, i16* %85, align 2
  %87 = sext i16 %86 to i32
  %88 = icmp slt i32 %81, %87
  br i1 %88, label %89, label %115

89:                                               ; preds = %80
  %90 = load i16*, i16** %10, align 8
  %91 = load i32, i32* %22, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i16, i16* %90, i64 %92
  %94 = load i16, i16* %93, align 2
  %95 = sext i16 %94 to i32
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %111

97:                                               ; preds = %89
  store double -1.000000e+00, double* %23, align 8
  %98 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %99 = load double*, double** %13, align 8
  %100 = load double*, double** %14, align 8
  %101 = load i32, i32* %22, align 4
  %102 = load double, double* %23, align 8
  %103 = call double* @createBulge(%struct.boundingboxStem* noundef %98, double* noundef %99, double* noundef %100, i32 noundef %101, double noundef %102)
  store double* %103, double** %24, align 8
  %104 = load double*, double** %24, align 8
  %105 = load double**, double*** %17, align 8
  %106 = load i32, i32* %18, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds double*, double** %105, i64 %107
  store double* %104, double** %108, align 8
  %109 = load i32, i32* %18, align 4
  %110 = add nsw i32 %109, 1
  store i32 %110, i32* %18, align 4
  br label %111

111:                                              ; preds = %97, %89
  br label %112

112:                                              ; preds = %111
  %113 = load i32, i32* %22, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* %22, align 4
  br label %80, !llvm.loop !63

115:                                              ; preds = %80
  %116 = load i32, i32* %15, align 4
  %117 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %118 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %117, i32 0, i32 5
  store i32 %116, i32* %118, align 8
  %119 = load double, double* %16, align 8
  %120 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %121 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %120, i32 0, i32 6
  store double %119, double* %121, align 8
  %122 = load double**, double*** %17, align 8
  %123 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %124 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %123, i32 0, i32 7
  store double** %122, double*** %124, align 8
  br label %125

125:                                              ; preds = %115, %27
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double* @createBulge(%struct.boundingboxStem* noundef %0, double* noundef %1, double* noundef %2, i32 noundef %3, double noundef %4) #0 {
  %6 = alloca %struct.boundingboxStem*, align 8
  %7 = alloca double*, align 8
  %8 = alloca double*, align 8
  %9 = alloca i32, align 4
  %10 = alloca double, align 8
  %11 = alloca double*, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  store %struct.boundingboxStem* %0, %struct.boundingboxStem** %6, align 8
  store double* %1, double** %7, align 8
  store double* %2, double** %8, align 8
  store i32 %3, i32* %9, align 4
  store double %4, double* %10, align 8
  %15 = call i8* @vrna_alloc(i32 noundef 32)
  %16 = bitcast i8* %15 to double*
  store double* %16, double** %11, align 8
  %17 = load %struct.boundingboxStem*, %struct.boundingboxStem** %6, align 8
  %18 = load double*, double** %7, align 8
  %19 = load i32, i32* %9, align 4
  %20 = sub nsw i32 %19, 1
  %21 = sub nsw i32 %20, 1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds double, double* %18, i64 %22
  %24 = load double, double* %23, align 8
  %25 = load double*, double** %8, align 8
  %26 = load i32, i32* %9, align 4
  %27 = sub nsw i32 %26, 1
  %28 = sub nsw i32 %27, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %25, i64 %29
  %31 = load double, double* %30, align 8
  %32 = call double @getA(%struct.boundingboxStem* noundef %17, double noundef %24, double noundef %31)
  store double %32, double* %12, align 8
  %33 = load %struct.boundingboxStem*, %struct.boundingboxStem** %6, align 8
  %34 = load double*, double** %7, align 8
  %35 = load i32, i32* %9, align 4
  %36 = sub nsw i32 %35, 1
  %37 = add nsw i32 %36, 0
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds double, double* %34, i64 %38
  %40 = load double, double* %39, align 8
  %41 = load double*, double** %8, align 8
  %42 = load i32, i32* %9, align 4
  %43 = sub nsw i32 %42, 1
  %44 = add nsw i32 %43, 0
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds double, double* %41, i64 %45
  %47 = load double, double* %46, align 8
  %48 = call double @getA(%struct.boundingboxStem* noundef %33, double noundef %40, double noundef %47)
  store double %48, double* %13, align 8
  %49 = load %struct.boundingboxStem*, %struct.boundingboxStem** %6, align 8
  %50 = load double*, double** %7, align 8
  %51 = load i32, i32* %9, align 4
  %52 = sub nsw i32 %51, 1
  %53 = add nsw i32 %52, 1
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds double, double* %50, i64 %54
  %56 = load double, double* %55, align 8
  %57 = load double*, double** %8, align 8
  %58 = load i32, i32* %9, align 4
  %59 = sub nsw i32 %58, 1
  %60 = add nsw i32 %59, 1
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds double, double* %57, i64 %61
  %63 = load double, double* %62, align 8
  %64 = call double @getA(%struct.boundingboxStem* noundef %49, double noundef %56, double noundef %63)
  store double %64, double* %14, align 8
  %65 = load double, double* %10, align 8
  %66 = load double*, double** %11, align 8
  %67 = getelementptr inbounds double, double* %66, i64 0
  store double %65, double* %67, align 8
  %68 = load double, double* %12, align 8
  %69 = load double*, double** %11, align 8
  %70 = getelementptr inbounds double, double* %69, i64 1
  store double %68, double* %70, align 8
  %71 = load double, double* %13, align 8
  %72 = load double*, double** %11, align 8
  %73 = getelementptr inbounds double, double* %72, i64 2
  store double %71, double* %73, align 8
  %74 = load double, double* %14, align 8
  %75 = load double*, double** %11, align 8
  %76 = getelementptr inbounds double, double* %75, i64 3
  store double %74, double* %76, align 8
  %77 = load double*, double** %11, align 8
  ret double* %77
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @getA(%struct.boundingboxStem* noundef %0, double noundef %1, double noundef %2) #0 {
  %4 = alloca %struct.boundingboxStem*, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca [2 x double], align 16
  %8 = alloca [2 x double], align 16
  %9 = alloca [2 x double], align 16
  %10 = alloca [2 x double], align 16
  %11 = alloca double, align 8
  store %struct.boundingboxStem* %0, %struct.boundingboxStem** %4, align 8
  store double %1, double* %5, align 8
  store double %2, double* %6, align 8
  %12 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %13 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %14 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %13, i32 0, i32 1
  %15 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %16 = load double, double* %15, align 8
  store double %16, double* %12, align 8
  %17 = getelementptr inbounds double, double* %12, i64 1
  %18 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %19 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %18, i32 0, i32 1
  %20 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 1
  %21 = load double, double* %20, align 8
  store double %21, double* %17, align 8
  %22 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %23 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %24 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %23, i32 0, i32 2
  %25 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  %26 = load double, double* %25, align 8
  store double %26, double* %22, align 8
  %27 = getelementptr inbounds double, double* %22, i64 1
  %28 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %29 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %28, i32 0, i32 2
  %30 = getelementptr inbounds [2 x double], [2 x double]* %29, i64 0, i64 1
  %31 = load double, double* %30, align 8
  store double %31, double* %27, align 8
  %32 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %33 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %34 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %33, i32 0, i32 3
  %35 = getelementptr inbounds [2 x double], [2 x double]* %34, i64 0, i64 0
  %36 = load double, double* %35, align 8
  store double %36, double* %32, align 8
  %37 = getelementptr inbounds double, double* %32, i64 1
  %38 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %39 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %38, i32 0, i32 3
  %40 = getelementptr inbounds [2 x double], [2 x double]* %39, i64 0, i64 1
  %41 = load double, double* %40, align 8
  store double %41, double* %37, align 8
  %42 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %43 = load double, double* %5, align 8
  %44 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %45 = load double, double* %44, align 16
  %46 = fsub double %43, %45
  store double %46, double* %42, align 8
  %47 = getelementptr inbounds double, double* %42, i64 1
  %48 = load double, double* %6, align 8
  %49 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 1
  %50 = load double, double* %49, align 8
  %51 = fsub double %48, %50
  store double %51, double* %47, align 8
  store double 0.000000e+00, double* %11, align 8
  %52 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %53 = load double, double* %52, align 16
  %54 = fcmp oeq double %53, 0.000000e+00
  br i1 %54, label %55, label %61

55:                                               ; preds = %3
  %56 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %57 = load double, double* %56, align 16
  %58 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %59 = load double, double* %58, align 16
  %60 = fdiv double %57, %59
  store double %60, double* %11, align 8
  br label %96

61:                                               ; preds = %3
  %62 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 1
  %63 = load double, double* %62, align 8
  %64 = fcmp oeq double %63, 0.000000e+00
  br i1 %64, label %65, label %71

65:                                               ; preds = %61
  %66 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 1
  %67 = load double, double* %66, align 8
  %68 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 1
  %69 = load double, double* %68, align 8
  %70 = fdiv double %67, %69
  store double %70, double* %11, align 8
  br label %95

71:                                               ; preds = %61
  %72 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %73 = load double, double* %72, align 16
  %74 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 1
  %75 = load double, double* %74, align 8
  %76 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 1
  %77 = load double, double* %76, align 8
  %78 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %79 = load double, double* %78, align 16
  %80 = fmul double %77, %79
  %81 = fneg double %80
  %82 = call double @llvm.fmuladd.f64(double %73, double %75, double %81)
  %83 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %84 = load double, double* %83, align 16
  %85 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 1
  %86 = load double, double* %85, align 8
  %87 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 1
  %88 = load double, double* %87, align 8
  %89 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %90 = load double, double* %89, align 16
  %91 = fmul double %88, %90
  %92 = fneg double %91
  %93 = call double @llvm.fmuladd.f64(double %84, double %86, double %92)
  %94 = fdiv double %82, %93
  store double %94, double* %11, align 8
  br label %95

95:                                               ; preds = %71, %65
  br label %96

96:                                               ; preds = %95, %55
  %97 = load double, double* %11, align 8
  ret double %97
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @getBulgeCoordinates(%struct.boundingboxStem* noundef %0, i32 noundef %1, double* noundef %2, double* noundef %3, double* noundef %4) #0 {
  %6 = alloca %struct.boundingboxStem*, align 8
  %7 = alloca i32, align 4
  %8 = alloca double*, align 8
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  store %struct.boundingboxStem* %0, %struct.boundingboxStem** %6, align 8
  store i32 %1, i32* %7, align 4
  store double* %2, double** %8, align 8
  store double* %3, double** %9, align 8
  store double* %4, double** %10, align 8
  %11 = load %struct.boundingboxStem*, %struct.boundingboxStem** %6, align 8
  %12 = load i32, i32* %7, align 4
  %13 = load double*, double** %8, align 8
  %14 = load double*, double** %9, align 8
  %15 = load double*, double** %10, align 8
  call void @getBulgeCoordinatesExtraDistance(%struct.boundingboxStem* noundef %11, i32 noundef %12, double noundef 0.000000e+00, double* noundef %13, double* noundef %14, double* noundef %15)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @getBulgeCoordinatesExtraDistance(%struct.boundingboxStem* noundef %0, i32 noundef %1, double noundef %2, double* noundef %3, double* noundef %4, double* noundef %5) #0 {
  %7 = alloca %struct.boundingboxStem*, align 8
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  %10 = alloca double*, align 8
  %11 = alloca double*, align 8
  %12 = alloca double*, align 8
  %13 = alloca double*, align 8
  store %struct.boundingboxStem* %0, %struct.boundingboxStem** %7, align 8
  store i32 %1, i32* %8, align 4
  store double %2, double* %9, align 8
  store double* %3, double** %10, align 8
  store double* %4, double** %11, align 8
  store double* %5, double** %12, align 8
  %14 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %15 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %14, i32 0, i32 7
  %16 = load double**, double*** %15, align 8
  %17 = load i32, i32* %8, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds double*, double** %16, i64 %18
  %20 = load double*, double** %19, align 8
  store double* %20, double** %13, align 8
  %21 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %22 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %21, i32 0, i32 3
  %23 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 0
  %24 = load double, double* %23, align 8
  %25 = load double*, double** %13, align 8
  %26 = getelementptr inbounds double, double* %25, i64 1
  %27 = load double, double* %26, align 8
  %28 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %29 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %28, i32 0, i32 1
  %30 = getelementptr inbounds [2 x double], [2 x double]* %29, i64 0, i64 0
  %31 = load double, double* %30, align 8
  %32 = call double @llvm.fmuladd.f64(double %27, double %31, double %24)
  %33 = load double*, double** %13, align 8
  %34 = getelementptr inbounds double, double* %33, i64 0
  %35 = load double, double* %34, align 8
  %36 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %37 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %36, i32 0, i32 2
  %38 = getelementptr inbounds [2 x double], [2 x double]* %37, i64 0, i64 0
  %39 = load double, double* %38, align 8
  %40 = fmul double %35, %39
  %41 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %42 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %41, i32 0, i32 4
  %43 = getelementptr inbounds [2 x double], [2 x double]* %42, i64 0, i64 1
  %44 = load double, double* %43, align 8
  %45 = call double @llvm.fmuladd.f64(double %40, double %44, double %32)
  %46 = load double*, double** %10, align 8
  %47 = getelementptr inbounds double, double* %46, i64 0
  store double %45, double* %47, align 8
  %48 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %49 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %48, i32 0, i32 3
  %50 = getelementptr inbounds [2 x double], [2 x double]* %49, i64 0, i64 1
  %51 = load double, double* %50, align 8
  %52 = load double*, double** %13, align 8
  %53 = getelementptr inbounds double, double* %52, i64 1
  %54 = load double, double* %53, align 8
  %55 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %56 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %55, i32 0, i32 1
  %57 = getelementptr inbounds [2 x double], [2 x double]* %56, i64 0, i64 1
  %58 = load double, double* %57, align 8
  %59 = call double @llvm.fmuladd.f64(double %54, double %58, double %51)
  %60 = load double*, double** %13, align 8
  %61 = getelementptr inbounds double, double* %60, i64 0
  %62 = load double, double* %61, align 8
  %63 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %64 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %63, i32 0, i32 2
  %65 = getelementptr inbounds [2 x double], [2 x double]* %64, i64 0, i64 1
  %66 = load double, double* %65, align 8
  %67 = fmul double %62, %66
  %68 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %69 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %68, i32 0, i32 4
  %70 = getelementptr inbounds [2 x double], [2 x double]* %69, i64 0, i64 1
  %71 = load double, double* %70, align 8
  %72 = call double @llvm.fmuladd.f64(double %67, double %71, double %59)
  %73 = load double*, double** %10, align 8
  %74 = getelementptr inbounds double, double* %73, i64 1
  store double %72, double* %74, align 8
  %75 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %76 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %75, i32 0, i32 3
  %77 = getelementptr inbounds [2 x double], [2 x double]* %76, i64 0, i64 0
  %78 = load double, double* %77, align 8
  %79 = load double*, double** %13, align 8
  %80 = getelementptr inbounds double, double* %79, i64 2
  %81 = load double, double* %80, align 8
  %82 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %83 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %82, i32 0, i32 1
  %84 = getelementptr inbounds [2 x double], [2 x double]* %83, i64 0, i64 0
  %85 = load double, double* %84, align 8
  %86 = call double @llvm.fmuladd.f64(double %81, double %85, double %78)
  %87 = load double*, double** %13, align 8
  %88 = getelementptr inbounds double, double* %87, i64 0
  %89 = load double, double* %88, align 8
  %90 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %91 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %90, i32 0, i32 2
  %92 = getelementptr inbounds [2 x double], [2 x double]* %91, i64 0, i64 0
  %93 = load double, double* %92, align 8
  %94 = fmul double %89, %93
  %95 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %96 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %95, i32 0, i32 4
  %97 = getelementptr inbounds [2 x double], [2 x double]* %96, i64 0, i64 1
  %98 = load double, double* %97, align 8
  %99 = load double, double* %9, align 8
  %100 = fadd double %98, %99
  %101 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %102 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %101, i32 0, i32 6
  %103 = load double, double* %102, align 8
  %104 = fadd double %100, %103
  %105 = call double @llvm.fmuladd.f64(double %94, double %104, double %86)
  %106 = load double*, double** %11, align 8
  %107 = getelementptr inbounds double, double* %106, i64 0
  store double %105, double* %107, align 8
  %108 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %109 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %108, i32 0, i32 3
  %110 = getelementptr inbounds [2 x double], [2 x double]* %109, i64 0, i64 1
  %111 = load double, double* %110, align 8
  %112 = load double*, double** %13, align 8
  %113 = getelementptr inbounds double, double* %112, i64 2
  %114 = load double, double* %113, align 8
  %115 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %116 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %115, i32 0, i32 1
  %117 = getelementptr inbounds [2 x double], [2 x double]* %116, i64 0, i64 1
  %118 = load double, double* %117, align 8
  %119 = call double @llvm.fmuladd.f64(double %114, double %118, double %111)
  %120 = load double*, double** %13, align 8
  %121 = getelementptr inbounds double, double* %120, i64 0
  %122 = load double, double* %121, align 8
  %123 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %124 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %123, i32 0, i32 2
  %125 = getelementptr inbounds [2 x double], [2 x double]* %124, i64 0, i64 1
  %126 = load double, double* %125, align 8
  %127 = fmul double %122, %126
  %128 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %129 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %128, i32 0, i32 4
  %130 = getelementptr inbounds [2 x double], [2 x double]* %129, i64 0, i64 1
  %131 = load double, double* %130, align 8
  %132 = load double, double* %9, align 8
  %133 = fadd double %131, %132
  %134 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %135 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %134, i32 0, i32 6
  %136 = load double, double* %135, align 8
  %137 = fadd double %133, %136
  %138 = call double @llvm.fmuladd.f64(double %127, double %137, double %119)
  %139 = load double*, double** %11, align 8
  %140 = getelementptr inbounds double, double* %139, i64 1
  store double %138, double* %140, align 8
  %141 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %142 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %141, i32 0, i32 3
  %143 = getelementptr inbounds [2 x double], [2 x double]* %142, i64 0, i64 0
  %144 = load double, double* %143, align 8
  %145 = load double*, double** %13, align 8
  %146 = getelementptr inbounds double, double* %145, i64 3
  %147 = load double, double* %146, align 8
  %148 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %149 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %148, i32 0, i32 1
  %150 = getelementptr inbounds [2 x double], [2 x double]* %149, i64 0, i64 0
  %151 = load double, double* %150, align 8
  %152 = call double @llvm.fmuladd.f64(double %147, double %151, double %144)
  %153 = load double*, double** %13, align 8
  %154 = getelementptr inbounds double, double* %153, i64 0
  %155 = load double, double* %154, align 8
  %156 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %157 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %156, i32 0, i32 2
  %158 = getelementptr inbounds [2 x double], [2 x double]* %157, i64 0, i64 0
  %159 = load double, double* %158, align 8
  %160 = fmul double %155, %159
  %161 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %162 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %161, i32 0, i32 4
  %163 = getelementptr inbounds [2 x double], [2 x double]* %162, i64 0, i64 1
  %164 = load double, double* %163, align 8
  %165 = call double @llvm.fmuladd.f64(double %160, double %164, double %152)
  %166 = load double*, double** %12, align 8
  %167 = getelementptr inbounds double, double* %166, i64 0
  store double %165, double* %167, align 8
  %168 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %169 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %168, i32 0, i32 3
  %170 = getelementptr inbounds [2 x double], [2 x double]* %169, i64 0, i64 1
  %171 = load double, double* %170, align 8
  %172 = load double*, double** %13, align 8
  %173 = getelementptr inbounds double, double* %172, i64 3
  %174 = load double, double* %173, align 8
  %175 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %176 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %175, i32 0, i32 1
  %177 = getelementptr inbounds [2 x double], [2 x double]* %176, i64 0, i64 1
  %178 = load double, double* %177, align 8
  %179 = call double @llvm.fmuladd.f64(double %174, double %178, double %171)
  %180 = load double*, double** %13, align 8
  %181 = getelementptr inbounds double, double* %180, i64 0
  %182 = load double, double* %181, align 8
  %183 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %184 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %183, i32 0, i32 2
  %185 = getelementptr inbounds [2 x double], [2 x double]* %184, i64 0, i64 1
  %186 = load double, double* %185, align 8
  %187 = fmul double %182, %186
  %188 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %189 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %188, i32 0, i32 4
  %190 = getelementptr inbounds [2 x double], [2 x double]* %189, i64 0, i64 1
  %191 = load double, double* %190, align 8
  %192 = call double @llvm.fmuladd.f64(double %187, double %191, double %179)
  %193 = load double*, double** %12, align 8
  %194 = getelementptr inbounds double, double* %193, i64 1
  store double %192, double* %194, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @isExterior(%struct.configtree* noundef %0) #0 {
  %2 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %2, align 8
  %3 = load %struct.configtree*, %struct.configtree** %2, align 8
  %4 = call i32 @getNodeID(%struct.configtree* noundef %3)
  %5 = icmp eq i32 %4, 0
  %6 = zext i1 %5 to i32
  %7 = trunc i32 %6 to i16
  ret i16 %7
}

; Function Attrs: nounwind
declare dso_local i64 @lround(double noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @getLoopCenter(%struct.configtree* noundef %0, double* noundef %1) #0 {
  %3 = alloca %struct.configtree*, align 8
  %4 = alloca double*, align 8
  store %struct.configtree* %0, %struct.configtree** %3, align 8
  store double* %1, double** %4, align 8
  %5 = load %struct.configtree*, %struct.configtree** %3, align 8
  %6 = getelementptr inbounds %struct.configtree, %struct.configtree* %5, i32 0, i32 7
  %7 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %6, align 8
  %8 = load double*, double** %4, align 8
  call void @getLBoxCenter(%struct.boundingboxLoop* noundef %7, double* noundef %8)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rotateVectorByAngle(double* noundef %0, double noundef %1, double* noundef %2) #0 {
  %4 = alloca double*, align 8
  %5 = alloca double, align 8
  %6 = alloca double*, align 8
  %7 = alloca [2 x double], align 16
  store double* %0, double** %4, align 8
  store double %1, double* %5, align 8
  store double* %2, double** %6, align 8
  %8 = bitcast [2 x double]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %8, i8 0, i64 16, i1 false)
  %9 = load double*, double** %4, align 8
  %10 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %11 = load double, double* %5, align 8
  %12 = load double*, double** %6, align 8
  call void @rotatePointAroundPoint(double* noundef %9, double* noundef %10, double noundef %11, double* noundef %12)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getNodeID(%struct.configtree* noundef %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %3, align 8
  %4 = load %struct.configtree*, %struct.configtree** %3, align 8
  %5 = icmp ne %struct.configtree* %4, null
  br i1 %5, label %6, label %10

6:                                                ; preds = %1
  %7 = load %struct.configtree*, %struct.configtree** %3, align 8
  %8 = getelementptr inbounds %struct.configtree, %struct.configtree* %7, i32 0, i32 0
  %9 = load i32, i32* %8, align 8
  store i32 %9, i32* %2, align 4
  br label %11

10:                                               ; preds = %1
  store i32 -1, i32* %2, align 4
  br label %11

11:                                               ; preds = %10, %6
  %12 = load i32, i32* %2, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @getLBoxCenter(%struct.boundingboxLoop* noundef %0, double* noundef %1) #0 {
  %3 = alloca %struct.boundingboxLoop*, align 8
  %4 = alloca double*, align 8
  store %struct.boundingboxLoop* %0, %struct.boundingboxLoop** %3, align 8
  store double* %1, double** %4, align 8
  %5 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %3, align 8
  %6 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %5, i32 0, i32 1
  %7 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %8 = load double, double* %7, align 8
  %9 = load double*, double** %4, align 8
  %10 = getelementptr inbounds double, double* %9, i64 0
  store double %8, double* %10, align 8
  %11 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %3, align 8
  %12 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %11, i32 0, i32 1
  %13 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 1
  %14 = load double, double* %13, align 8
  %15 = load double*, double** %4, align 8
  %16 = getelementptr inbounds double, double* %15, i64 1
  store double %14, double* %16, align 8
  ret void
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal void @rotatePointAroundPoint(double* noundef %0, double* noundef %1, double noundef %2, double* noundef %3) #0 {
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca double, align 8
  %8 = alloca double*, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  store double* %0, double** %5, align 8
  store double* %1, double** %6, align 8
  store double %2, double* %7, align 8
  store double* %3, double** %8, align 8
  %14 = load double*, double** %5, align 8
  %15 = getelementptr inbounds double, double* %14, i64 0
  %16 = load double, double* %15, align 8
  store double %16, double* %9, align 8
  %17 = load double*, double** %5, align 8
  %18 = getelementptr inbounds double, double* %17, i64 1
  %19 = load double, double* %18, align 8
  store double %19, double* %10, align 8
  %20 = load double*, double** %6, align 8
  %21 = getelementptr inbounds double, double* %20, i64 0
  %22 = load double, double* %21, align 8
  store double %22, double* %11, align 8
  %23 = load double*, double** %6, align 8
  %24 = getelementptr inbounds double, double* %23, i64 1
  %25 = load double, double* %24, align 8
  store double %25, double* %12, align 8
  %26 = load double, double* %7, align 8
  %27 = fneg double %26
  store double %27, double* %13, align 8
  %28 = load double, double* %11, align 8
  %29 = load double, double* %9, align 8
  %30 = load double, double* %11, align 8
  %31 = fsub double %29, %30
  %32 = load double, double* %13, align 8
  %33 = call double @cos(double noundef %32) #7
  %34 = call double @llvm.fmuladd.f64(double %31, double %33, double %28)
  %35 = load double, double* %10, align 8
  %36 = load double, double* %12, align 8
  %37 = fsub double %35, %36
  %38 = load double, double* %13, align 8
  %39 = call double @sin(double noundef %38) #7
  %40 = fneg double %37
  %41 = call double @llvm.fmuladd.f64(double %40, double %39, double %34)
  %42 = load double*, double** %8, align 8
  %43 = getelementptr inbounds double, double* %42, i64 0
  store double %41, double* %43, align 8
  %44 = load double, double* %12, align 8
  %45 = load double, double* %9, align 8
  %46 = load double, double* %11, align 8
  %47 = fsub double %45, %46
  %48 = load double, double* %13, align 8
  %49 = call double @sin(double noundef %48) #7
  %50 = call double @llvm.fmuladd.f64(double %47, double %49, double %44)
  %51 = load double, double* %10, align 8
  %52 = load double, double* %12, align 8
  %53 = fsub double %51, %52
  %54 = load double, double* %13, align 8
  %55 = call double @cos(double noundef %54) #7
  %56 = call double @llvm.fmuladd.f64(double %53, double %55, double %50)
  %57 = load double*, double** %8, align 8
  %58 = getelementptr inbounds double, double* %57, i64 1
  store double %56, double* %58, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.configtree* @checkNodeAgainstAncestors(%struct.configtree* noundef %0, %struct.vrna_plot_options_puzzler_t* noundef %1) #0 {
  %3 = alloca %struct.configtree*, align 8
  %4 = alloca %struct.configtree*, align 8
  %5 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca %struct.configtree*, align 8
  %9 = alloca %struct.configtree*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %4, align 8
  store %struct.vrna_plot_options_puzzler_t* %1, %struct.vrna_plot_options_puzzler_t** %5, align 8
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8** %6, align 8
  store %struct.configtree* null, %struct.configtree** %7, align 8
  %12 = load %struct.configtree*, %struct.configtree** %4, align 8
  %13 = call %struct.configtree* @getParent(%struct.configtree* noundef %12)
  store %struct.configtree* %13, %struct.configtree** %8, align 8
  %14 = load %struct.configtree*, %struct.configtree** %4, align 8
  store %struct.configtree* %14, %struct.configtree** %9, align 8
  br label %15

15:                                               ; preds = %37, %2
  %16 = load %struct.configtree*, %struct.configtree** %8, align 8
  %17 = call signext i16 @isExterior(%struct.configtree* noundef %16)
  %18 = icmp ne i16 %17, 0
  %19 = xor i1 %18, true
  br i1 %19, label %20, label %40

20:                                               ; preds = %15
  %21 = load %struct.configtree*, %struct.configtree** %8, align 8
  store %struct.configtree* %21, %struct.configtree** %9, align 8
  %22 = load %struct.configtree*, %struct.configtree** %4, align 8
  %23 = load %struct.configtree*, %struct.configtree** %8, align 8
  %24 = call i32 @intersectNodeNode(%struct.configtree* noundef %22, %struct.configtree* noundef %23)
  store i32 %24, i32* %10, align 4
  %25 = load i32, i32* %10, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %37

27:                                               ; preds = %20
  %28 = load %struct.configtree*, %struct.configtree** %8, align 8
  %29 = load %struct.configtree*, %struct.configtree** %4, align 8
  %30 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %5, align 8
  %31 = call %struct.configtree* @handleIntersectionWithAncestor(%struct.configtree* noundef %28, %struct.configtree* noundef %29, i32 noundef 0, %struct.vrna_plot_options_puzzler_t* noundef %30)
  store %struct.configtree* %31, %struct.configtree** %7, align 8
  %32 = load %struct.configtree*, %struct.configtree** %7, align 8
  %33 = icmp ne %struct.configtree* %32, null
  br i1 %33, label %34, label %36

34:                                               ; preds = %27
  %35 = load %struct.configtree*, %struct.configtree** %7, align 8
  store %struct.configtree* %35, %struct.configtree** %3, align 8
  br label %64

36:                                               ; preds = %27
  br label %37

37:                                               ; preds = %36, %20
  %38 = load %struct.configtree*, %struct.configtree** %8, align 8
  %39 = call %struct.configtree* @getParent(%struct.configtree* noundef %38)
  store %struct.configtree* %39, %struct.configtree** %8, align 8
  br label %15, !llvm.loop !64

40:                                               ; preds = %15
  %41 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %5, align 8
  %42 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %41, i32 0, i32 5
  %43 = load i16, i16* %42, align 4
  %44 = icmp ne i16 %43, 0
  br i1 %44, label %45, label %62

45:                                               ; preds = %40
  %46 = load %struct.configtree*, %struct.configtree** %4, align 8
  %47 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %5, align 8
  %48 = call signext i16 @intersectNodeExterior(%struct.configtree* noundef %46, %struct.vrna_plot_options_puzzler_t* noundef %47)
  %49 = icmp ne i16 %48, 0
  br i1 %49, label %50, label %61

50:                                               ; preds = %45
  %51 = load %struct.configtree*, %struct.configtree** %9, align 8
  %52 = call %struct.configtree* @getParent(%struct.configtree* noundef %51)
  store %struct.configtree* %52, %struct.configtree** %11, align 8
  %53 = load %struct.configtree*, %struct.configtree** %11, align 8
  %54 = load %struct.configtree*, %struct.configtree** %9, align 8
  %55 = load %struct.configtree*, %struct.configtree** %4, align 8
  %56 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %5, align 8
  call void @TENTATIVE3_setupExteriorBoundingBoxes(%struct.configtree* noundef %53, %struct.configtree* noundef %54, %struct.configtree* noundef %55, %struct.vrna_plot_options_puzzler_t* noundef %56)
  %57 = load %struct.configtree*, %struct.configtree** %11, align 8
  %58 = load %struct.configtree*, %struct.configtree** %4, align 8
  %59 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %5, align 8
  %60 = call %struct.configtree* @handleIntersectionWithAncestor(%struct.configtree* noundef %57, %struct.configtree* noundef %58, i32 noundef 0, %struct.vrna_plot_options_puzzler_t* noundef %59)
  store %struct.configtree* %60, %struct.configtree** %7, align 8
  br label %61

61:                                               ; preds = %50, %45
  br label %62

62:                                               ; preds = %61, %40
  %63 = load %struct.configtree*, %struct.configtree** %7, align 8
  store %struct.configtree* %63, %struct.configtree** %3, align 8
  br label %64

64:                                               ; preds = %62, %34
  %65 = load %struct.configtree*, %struct.configtree** %3, align 8
  ret %struct.configtree* %65
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @checkSiblings(%struct.configtree* noundef %0, %struct.vrna_plot_options_puzzler_t* noundef %1) #0 {
  %3 = alloca %struct.configtree*, align 8
  %4 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i16, align 2
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.configtree*, align 8
  %14 = alloca %struct.configtree*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32*, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i16, align 2
  store %struct.configtree* %0, %struct.configtree** %3, align 8
  store %struct.vrna_plot_options_puzzler_t* %1, %struct.vrna_plot_options_puzzler_t** %4, align 8
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.41, i64 0, i64 0), i8** %5, align 8
  store i16 0, i16* %6, align 2
  %21 = load %struct.configtree*, %struct.configtree** %3, align 8
  %22 = getelementptr inbounds %struct.configtree, %struct.configtree* %21, i32 0, i32 3
  %23 = load i32, i32* %22, align 8
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %7, align 4
  %25 = load i32, i32* %7, align 4
  %26 = mul nsw i32 %24, %25
  %27 = sext i32 %26 to i64
  %28 = mul i64 %27, 4
  %29 = trunc i64 %28 to i32
  %30 = call i8* @vrna_alloc(i32 noundef %29)
  %31 = bitcast i8* %30 to i32*
  store i32* %31, i32** %8, align 8
  store i32 0, i32* %9, align 4
  br label %32

32:                                               ; preds = %43, %2
  %33 = load i32, i32* %9, align 4
  %34 = load i32, i32* %7, align 4
  %35 = load i32, i32* %7, align 4
  %36 = mul nsw i32 %34, %35
  %37 = icmp slt i32 %33, %36
  br i1 %37, label %38, label %46

38:                                               ; preds = %32
  %39 = load i32*, i32** %8, align 8
  %40 = load i32, i32* %9, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %39, i64 %41
  store i32 -1, i32* %42, align 4
  br label %43

43:                                               ; preds = %38
  %44 = load i32, i32* %9, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %9, align 4
  br label %32, !llvm.loop !65

46:                                               ; preds = %32
  store i32 0, i32* %10, align 4
  br label %47

47:                                               ; preds = %86, %46
  %48 = load i32, i32* %10, align 4
  %49 = load i32, i32* %7, align 4
  %50 = icmp slt i32 %48, %49
  br i1 %50, label %51, label %89

51:                                               ; preds = %47
  store i32 0, i32* %11, align 4
  %52 = load i32, i32* %10, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %12, align 4
  br label %54

54:                                               ; preds = %82, %51
  %55 = load i32, i32* %12, align 4
  %56 = load i32, i32* %7, align 4
  %57 = icmp slt i32 %55, %56
  br i1 %57, label %58, label %85

58:                                               ; preds = %54
  %59 = load %struct.configtree*, %struct.configtree** %3, align 8
  %60 = load i32, i32* %10, align 4
  %61 = call %struct.configtree* @getChild(%struct.configtree* noundef %59, i32 noundef %60)
  store %struct.configtree* %61, %struct.configtree** %13, align 8
  %62 = load %struct.configtree*, %struct.configtree** %3, align 8
  %63 = load i32, i32* %12, align 4
  %64 = call %struct.configtree* @getChild(%struct.configtree* noundef %62, i32 noundef %63)
  store %struct.configtree* %64, %struct.configtree** %14, align 8
  %65 = load %struct.configtree*, %struct.configtree** %13, align 8
  %66 = load %struct.configtree*, %struct.configtree** %14, align 8
  %67 = call signext i16 @intersectTrees(%struct.configtree* noundef %65, %struct.configtree* noundef %66)
  %68 = icmp ne i16 %67, 0
  br i1 %68, label %69, label %81

69:                                               ; preds = %58
  %70 = load i32, i32* %12, align 4
  %71 = load i32*, i32** %8, align 8
  %72 = load i32, i32* %10, align 4
  %73 = load i32, i32* %7, align 4
  %74 = mul nsw i32 %72, %73
  %75 = load i32, i32* %11, align 4
  %76 = add nsw i32 %74, %75
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i32, i32* %71, i64 %77
  store i32 %70, i32* %78, align 4
  %79 = load i32, i32* %11, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %11, align 4
  br label %81

81:                                               ; preds = %69, %58
  br label %82

82:                                               ; preds = %81
  %83 = load i32, i32* %12, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %12, align 4
  br label %54, !llvm.loop !66

85:                                               ; preds = %54
  br label %86

86:                                               ; preds = %85
  %87 = load i32, i32* %10, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %10, align 4
  br label %47, !llvm.loop !67

89:                                               ; preds = %47
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  br label %90

90:                                               ; preds = %107, %89
  %91 = load i32, i32* %16, align 4
  %92 = load i32, i32* %7, align 4
  %93 = load i32, i32* %7, align 4
  %94 = mul nsw i32 %92, %93
  %95 = icmp slt i32 %91, %94
  br i1 %95, label %96, label %110

96:                                               ; preds = %90
  %97 = load i32*, i32** %8, align 8
  %98 = load i32, i32* %16, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i32, i32* %97, i64 %99
  %101 = load i32, i32* %100, align 4
  %102 = icmp ne i32 %101, -1
  br i1 %102, label %103, label %106

103:                                              ; preds = %96
  %104 = load i32, i32* %15, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %15, align 4
  br label %106

106:                                              ; preds = %103, %96
  br label %107

107:                                              ; preds = %106
  %108 = load i32, i32* %16, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %16, align 4
  br label %90, !llvm.loop !68

110:                                              ; preds = %90
  %111 = load i32, i32* %15, align 4
  %112 = icmp sgt i32 %111, 0
  br i1 %112, label %113, label %191

113:                                              ; preds = %110
  %114 = load i16, i16* %6, align 2
  %115 = sext i16 %114 to i32
  %116 = or i32 %115, 1
  %117 = trunc i32 %116 to i16
  store i16 %117, i16* %6, align 2
  %118 = load i32, i32* %15, align 4
  %119 = mul nsw i32 2, %118
  %120 = add nsw i32 1, %119
  %121 = sext i32 %120 to i64
  %122 = mul i64 %121, 4
  %123 = trunc i64 %122 to i32
  %124 = call i8* @vrna_alloc(i32 noundef %123)
  %125 = bitcast i8* %124 to i32*
  store i32* %125, i32** %17, align 8
  %126 = load i32, i32* %15, align 4
  %127 = load i32*, i32** %17, align 8
  %128 = getelementptr inbounds i32, i32* %127, i64 0
  store i32 %126, i32* %128, align 4
  store i32 0, i32* %18, align 4
  store i32 0, i32* %19, align 4
  br label %129

129:                                              ; preds = %166, %113
  %130 = load i32, i32* %19, align 4
  %131 = load i32, i32* %7, align 4
  %132 = load i32, i32* %7, align 4
  %133 = mul nsw i32 %131, %132
  %134 = icmp slt i32 %130, %133
  br i1 %134, label %135, label %169

135:                                              ; preds = %129
  %136 = load i32*, i32** %8, align 8
  %137 = load i32, i32* %19, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i32, i32* %136, i64 %138
  %140 = load i32, i32* %139, align 4
  %141 = icmp ne i32 %140, -1
  br i1 %141, label %142, label %165

142:                                              ; preds = %135
  %143 = load i32, i32* %19, align 4
  %144 = load i32, i32* %7, align 4
  %145 = sdiv i32 %143, %144
  %146 = load i32*, i32** %17, align 8
  %147 = load i32, i32* %18, align 4
  %148 = mul nsw i32 2, %147
  %149 = add nsw i32 %148, 1
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i32, i32* %146, i64 %150
  store i32 %145, i32* %151, align 4
  %152 = load i32*, i32** %8, align 8
  %153 = load i32, i32* %19, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i32, i32* %152, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = load i32*, i32** %17, align 8
  %158 = load i32, i32* %18, align 4
  %159 = mul nsw i32 2, %158
  %160 = add nsw i32 %159, 2
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i32, i32* %157, i64 %161
  store i32 %156, i32* %162, align 4
  %163 = load i32, i32* %18, align 4
  %164 = add nsw i32 %163, 1
  store i32 %164, i32* %18, align 4
  br label %165

165:                                              ; preds = %142, %135
  br label %166

166:                                              ; preds = %165
  %167 = load i32, i32* %19, align 4
  %168 = add nsw i32 %167, 1
  store i32 %168, i32* %19, align 4
  br label %129, !llvm.loop !69

169:                                              ; preds = %129
  %170 = load %struct.configtree*, %struct.configtree** %3, align 8
  %171 = load i32*, i32** %17, align 8
  %172 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %4, align 8
  %173 = call signext i16 @handleIntersectionOfSiblings(%struct.configtree* noundef %170, i32* noundef %171, %struct.vrna_plot_options_puzzler_t* noundef %172)
  store i16 %173, i16* %20, align 2
  %174 = load i16, i16* %20, align 2
  %175 = sext i16 %174 to i32
  %176 = icmp slt i32 %175, 0
  br i1 %176, label %177, label %179

177:                                              ; preds = %169
  %178 = load i16, i16* %20, align 2
  store i16 %178, i16* %6, align 2
  br label %188

179:                                              ; preds = %169
  %180 = load i16, i16* %20, align 2
  %181 = icmp ne i16 %180, 0
  br i1 %181, label %182, label %187

182:                                              ; preds = %179
  %183 = load i16, i16* %6, align 2
  %184 = sext i16 %183 to i32
  %185 = or i32 %184, 2
  %186 = trunc i32 %185 to i16
  store i16 %186, i16* %6, align 2
  br label %187

187:                                              ; preds = %182, %179
  br label %188

188:                                              ; preds = %187, %177
  %189 = load i32*, i32** %17, align 8
  %190 = bitcast i32* %189 to i8*
  call void @free(i8* noundef %190) #7
  br label %191

191:                                              ; preds = %188, %110
  %192 = load i32*, i32** %8, align 8
  %193 = bitcast i32* %192 to i8*
  call void @free(i8* noundef %193) #7
  %194 = load i16, i16* %6, align 2
  ret i16 %194
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.configtree* @getParent(%struct.configtree* noundef %0) #0 {
  %2 = alloca %struct.configtree*, align 8
  %3 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %3, align 8
  %4 = load %struct.configtree*, %struct.configtree** %3, align 8
  %5 = icmp eq %struct.configtree* %4, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  store %struct.configtree* null, %struct.configtree** %2, align 8
  br label %11

7:                                                ; preds = %1
  %8 = load %struct.configtree*, %struct.configtree** %3, align 8
  %9 = getelementptr inbounds %struct.configtree, %struct.configtree* %8, i32 0, i32 1
  %10 = load %struct.configtree*, %struct.configtree** %9, align 8
  store %struct.configtree* %10, %struct.configtree** %2, align 8
  br label %11

11:                                               ; preds = %7, %6
  %12 = load %struct.configtree*, %struct.configtree** %2, align 8
  ret %struct.configtree* %12
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @optimizeTree(%struct.configtree* noundef %0, %struct.vrna_plot_options_puzzler_t* noundef %1) #0 {
  %3 = alloca double, align 8
  %4 = alloca %struct.configtree*, align 8
  %5 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.configtree**, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.configtree**, align 8
  store %struct.configtree* %0, %struct.configtree** %4, align 8
  store %struct.vrna_plot_options_puzzler_t* %1, %struct.vrna_plot_options_puzzler_t** %5, align 8
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.43, i64 0, i64 0), i8** %6, align 8
  %12 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %5, align 8
  %13 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %12, i32 0, i32 7
  %14 = load i16, i16* %13, align 8
  %15 = icmp ne i16 %14, 0
  br i1 %15, label %17, label %16

16:                                               ; preds = %2
  store double 1.000000e+00, double* %3, align 8
  br label %60

17:                                               ; preds = %2
  store double 1.000000e+00, double* %7, align 8
  %18 = load %struct.configtree*, %struct.configtree** %4, align 8
  %19 = call i32 @countSubtreeNodes(%struct.configtree* noundef %18)
  store i32 %19, i32* %8, align 4
  %20 = load i32, i32* %8, align 4
  %21 = sext i32 %20 to i64
  %22 = mul i64 %21, 8
  %23 = trunc i64 %22 to i32
  %24 = call i8* @vrna_alloc(i32 noundef %23)
  %25 = bitcast i8* %24 to %struct.configtree**
  store %struct.configtree** %25, %struct.configtree*** %9, align 8
  %26 = load %struct.configtree*, %struct.configtree** %4, align 8
  %27 = load %struct.configtree**, %struct.configtree*** %9, align 8
  %28 = call i32 @collectSubtreeNodes(%struct.configtree* noundef %26, %struct.configtree** noundef %27, i32 noundef 0)
  %29 = load %struct.configtree*, %struct.configtree** %4, align 8
  %30 = call i32 @countAncestorNodes(%struct.configtree* noundef %29)
  store i32 %30, i32* %10, align 4
  %31 = load i32, i32* %10, align 4
  %32 = sext i32 %31 to i64
  %33 = mul i64 %32, 8
  %34 = trunc i64 %33 to i32
  %35 = call i8* @vrna_alloc(i32 noundef %34)
  %36 = bitcast i8* %35 to %struct.configtree**
  store %struct.configtree** %36, %struct.configtree*** %11, align 8
  %37 = load %struct.configtree*, %struct.configtree** %4, align 8
  %38 = load %struct.configtree**, %struct.configtree*** %11, align 8
  call void @collectAncestorNodes(%struct.configtree* noundef %37, %struct.configtree** noundef %38)
  %39 = load %struct.configtree**, %struct.configtree*** %9, align 8
  %40 = load i32, i32* %8, align 4
  %41 = load %struct.configtree**, %struct.configtree*** %11, align 8
  %42 = load i32, i32* %10, align 4
  %43 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %5, align 8
  %44 = call signext i16 @checkIntersections(%struct.configtree** noundef %39, i32 noundef %40, %struct.configtree** noundef %41, i32 noundef %42, %struct.vrna_plot_options_puzzler_t* noundef %43)
  %45 = icmp ne i16 %44, 0
  br i1 %45, label %54, label %46

46:                                               ; preds = %17
  %47 = load %struct.configtree*, %struct.configtree** %4, align 8
  %48 = load %struct.configtree**, %struct.configtree*** %9, align 8
  %49 = load i32, i32* %8, align 4
  %50 = load %struct.configtree**, %struct.configtree*** %11, align 8
  %51 = load i32, i32* %10, align 4
  %52 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %5, align 8
  %53 = call double @optimizeTreeRecursive(%struct.configtree* noundef %47, %struct.configtree** noundef %48, i32 noundef %49, %struct.configtree** noundef %50, i32 noundef %51, %struct.vrna_plot_options_puzzler_t* noundef %52)
  store double %53, double* %7, align 8
  br label %54

54:                                               ; preds = %46, %17
  %55 = load %struct.configtree**, %struct.configtree*** %11, align 8
  %56 = bitcast %struct.configtree** %55 to i8*
  call void @free(i8* noundef %56) #7
  %57 = load %struct.configtree**, %struct.configtree*** %9, align 8
  %58 = bitcast %struct.configtree** %57 to i8*
  call void @free(i8* noundef %58) #7
  %59 = load double, double* %7, align 8
  store double %59, double* %3, align 8
  br label %60

60:                                               ; preds = %54, %16
  %61 = load double, double* %3, align 8
  ret double %61
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @intersectNodeNode(%struct.configtree* noundef %0, %struct.configtree* noundef %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.configtree*, align 8
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.boundingboxStem*, align 8
  %10 = alloca %struct.boundingboxLoop*, align 8
  %11 = alloca %struct.boundingboxStem*, align 8
  %12 = alloca %struct.boundingboxLoop*, align 8
  %13 = alloca i16, align 2
  %14 = alloca %struct.configtree*, align 8
  %15 = alloca %struct.configtree*, align 8
  %16 = alloca i16, align 2
  %17 = alloca i16, align 2
  %18 = alloca i16, align 2
  store %struct.configtree* %0, %struct.configtree** %4, align 8
  store %struct.configtree* %1, %struct.configtree** %5, align 8
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i8** %6, align 8
  store i32 -1, i32* %7, align 4
  store i32 -1, i32* %8, align 4
  %19 = load %struct.configtree*, %struct.configtree** %4, align 8
  %20 = load %struct.configtree*, %struct.configtree** %5, align 8
  %21 = icmp eq %struct.configtree* %19, %20
  br i1 %21, label %22, label %23

22:                                               ; preds = %2
  store i32 0, i32* %3, align 4
  br label %153

23:                                               ; preds = %2
  %24 = load %struct.configtree*, %struct.configtree** %4, align 8
  %25 = getelementptr inbounds %struct.configtree, %struct.configtree* %24, i32 0, i32 8
  %26 = load %struct.boundingboxStem*, %struct.boundingboxStem** %25, align 8
  store %struct.boundingboxStem* %26, %struct.boundingboxStem** %9, align 8
  %27 = load %struct.configtree*, %struct.configtree** %4, align 8
  %28 = getelementptr inbounds %struct.configtree, %struct.configtree* %27, i32 0, i32 7
  %29 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %28, align 8
  store %struct.boundingboxLoop* %29, %struct.boundingboxLoop** %10, align 8
  %30 = load %struct.configtree*, %struct.configtree** %5, align 8
  %31 = getelementptr inbounds %struct.configtree, %struct.configtree* %30, i32 0, i32 8
  %32 = load %struct.boundingboxStem*, %struct.boundingboxStem** %31, align 8
  store %struct.boundingboxStem* %32, %struct.boundingboxStem** %11, align 8
  %33 = load %struct.configtree*, %struct.configtree** %5, align 8
  %34 = getelementptr inbounds %struct.configtree, %struct.configtree* %33, i32 0, i32 7
  %35 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %34, align 8
  store %struct.boundingboxLoop* %35, %struct.boundingboxLoop** %12, align 8
  %36 = load %struct.configtree*, %struct.configtree** %4, align 8
  %37 = getelementptr inbounds %struct.configtree, %struct.configtree* %36, i32 0, i32 9
  %38 = load %struct.configtree*, %struct.configtree** %5, align 8
  %39 = getelementptr inbounds %struct.configtree, %struct.configtree* %38, i32 0, i32 9
  %40 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %41 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %42 = call signext i16 @intersectNodesBoundingBoxes(%struct.AABB* noundef %37, %struct.AABB* noundef %39, %struct.boundingboxStem* noundef %40, %struct.boundingboxStem* noundef %41)
  store i16 %42, i16* %13, align 2
  %43 = load i16, i16* %13, align 2
  %44 = icmp ne i16 %43, 0
  br i1 %44, label %46, label %45

45:                                               ; preds = %23
  store i32 0, i32* %3, align 4
  br label %153

46:                                               ; preds = %23
  %47 = load %struct.configtree*, %struct.configtree** %4, align 8
  %48 = call %struct.configtree* @getParent(%struct.configtree* noundef %47)
  store %struct.configtree* %48, %struct.configtree** %14, align 8
  %49 = load %struct.configtree*, %struct.configtree** %5, align 8
  %50 = call %struct.configtree* @getParent(%struct.configtree* noundef %49)
  store %struct.configtree* %50, %struct.configtree** %15, align 8
  %51 = load %struct.configtree*, %struct.configtree** %4, align 8
  %52 = load %struct.configtree*, %struct.configtree** %15, align 8
  %53 = icmp eq %struct.configtree* %51, %52
  %54 = zext i1 %53 to i32
  %55 = trunc i32 %54 to i16
  store i16 %55, i16* %16, align 2
  %56 = load %struct.configtree*, %struct.configtree** %5, align 8
  %57 = load %struct.configtree*, %struct.configtree** %14, align 8
  %58 = icmp eq %struct.configtree* %56, %57
  %59 = zext i1 %58 to i32
  %60 = trunc i32 %59 to i16
  store i16 %60, i16* %17, align 2
  %61 = load %struct.configtree*, %struct.configtree** %14, align 8
  %62 = load %struct.configtree*, %struct.configtree** %15, align 8
  %63 = icmp eq %struct.configtree* %61, %62
  %64 = zext i1 %63 to i32
  %65 = trunc i32 %64 to i16
  store i16 %65, i16* %18, align 2
  %66 = load i16, i16* %16, align 2
  %67 = icmp ne i16 %66, 0
  br i1 %67, label %81, label %68

68:                                               ; preds = %46
  %69 = load i16, i16* %17, align 2
  %70 = icmp ne i16 %69, 0
  br i1 %70, label %81, label %71

71:                                               ; preds = %68
  %72 = load i16, i16* %18, align 2
  %73 = icmp ne i16 %72, 0
  br i1 %73, label %81, label %74

74:                                               ; preds = %71
  %75 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %76 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %77 = call signext i16 @intersectStemStem(%struct.boundingboxStem* noundef %75, %struct.boundingboxStem* noundef %76)
  %78 = sext i16 %77 to i32
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %74
  store i32 4, i32* %3, align 4
  br label %153

81:                                               ; preds = %74, %71, %68, %46
  %82 = load i16, i16* %16, align 2
  %83 = icmp ne i16 %82, 0
  br i1 %83, label %94, label %84

84:                                               ; preds = %81
  %85 = load i16, i16* %17, align 2
  %86 = icmp ne i16 %85, 0
  br i1 %86, label %94, label %87

87:                                               ; preds = %84
  %88 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %10, align 8
  %89 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %12, align 8
  %90 = call signext i16 @intersectLoopLoop(%struct.boundingboxLoop* noundef %88, %struct.boundingboxLoop* noundef %89)
  %91 = sext i16 %90 to i32
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %93, label %94

93:                                               ; preds = %87
  store i32 1, i32* %3, align 4
  br label %153

94:                                               ; preds = %87, %84, %81
  %95 = load i16, i16* %17, align 2
  %96 = icmp ne i16 %95, 0
  br i1 %96, label %104, label %97

97:                                               ; preds = %94
  %98 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %99 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %12, align 8
  %100 = call signext i16 @intersectStemLoop(%struct.boundingboxStem* noundef %98, %struct.boundingboxLoop* noundef %99)
  %101 = sext i16 %100 to i32
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %103, label %104

103:                                              ; preds = %97
  store i32 3, i32* %3, align 4
  br label %153

104:                                              ; preds = %97, %94
  %105 = load i16, i16* %16, align 2
  %106 = icmp ne i16 %105, 0
  br i1 %106, label %114, label %107

107:                                              ; preds = %104
  %108 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %109 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %10, align 8
  %110 = call signext i16 @intersectStemLoop(%struct.boundingboxStem* noundef %108, %struct.boundingboxLoop* noundef %109)
  %111 = sext i16 %110 to i32
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %113, label %114

113:                                              ; preds = %107
  store i32 2, i32* %3, align 4
  br label %153

114:                                              ; preds = %107, %104
  %115 = load i16, i16* %16, align 2
  %116 = icmp ne i16 %115, 0
  br i1 %116, label %124, label %117

117:                                              ; preds = %114
  %118 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %10, align 8
  %119 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %120 = call signext i16 @intersectLoopBulges(%struct.boundingboxLoop* noundef %118, %struct.boundingboxStem* noundef %119, i32* noundef %8)
  %121 = icmp ne i16 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %117
  store i32 5, i32* %3, align 4
  br label %153

123:                                              ; preds = %117
  br label %124

124:                                              ; preds = %123, %114
  %125 = load i16, i16* %17, align 2
  %126 = icmp ne i16 %125, 0
  br i1 %126, label %134, label %127

127:                                              ; preds = %124
  %128 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %12, align 8
  %129 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %130 = call signext i16 @intersectLoopBulges(%struct.boundingboxLoop* noundef %128, %struct.boundingboxStem* noundef %129, i32* noundef %7)
  %131 = icmp ne i16 %130, 0
  br i1 %131, label %132, label %133

132:                                              ; preds = %127
  store i32 6, i32* %3, align 4
  br label %153

133:                                              ; preds = %127
  br label %134

134:                                              ; preds = %133, %124
  %135 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %136 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %137 = call signext i16 @intersectStemBulges(%struct.boundingboxStem* noundef %135, %struct.boundingboxStem* noundef %136, i32* noundef %8)
  %138 = icmp ne i16 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %134
  store i32 7, i32* %3, align 4
  br label %153

140:                                              ; preds = %134
  %141 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %142 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %143 = call signext i16 @intersectStemBulges(%struct.boundingboxStem* noundef %141, %struct.boundingboxStem* noundef %142, i32* noundef %7)
  %144 = icmp ne i16 %143, 0
  br i1 %144, label %145, label %146

145:                                              ; preds = %140
  store i32 8, i32* %3, align 4
  br label %153

146:                                              ; preds = %140
  %147 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %148 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %149 = call signext i16 @intersectBulgesBulges(%struct.boundingboxStem* noundef %147, %struct.boundingboxStem* noundef %148, i32* noundef %7, i32* noundef %8)
  %150 = icmp ne i16 %149, 0
  br i1 %150, label %151, label %152

151:                                              ; preds = %146
  store i32 9, i32* %3, align 4
  br label %153

152:                                              ; preds = %146
  store i32 0, i32* %3, align 4
  br label %153

153:                                              ; preds = %152, %151, %145, %139, %132, %122, %113, %103, %93, %80, %45, %22
  %154 = load i32, i32* %3, align 4
  ret i32 %154
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.configtree* @handleIntersectionWithAncestor(%struct.configtree* noundef %0, %struct.configtree* noundef %1, i32 noundef %2, %struct.vrna_plot_options_puzzler_t* noundef %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.configtree**, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i32, align 4
  %16 = alloca %struct.configtree*, align 8
  %17 = alloca i16, align 2
  %18 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %6, align 8
  store %struct.configtree* %1, %struct.configtree** %7, align 8
  store i32 %2, i32* %8, align 4
  store %struct.vrna_plot_options_puzzler_t* %3, %struct.vrna_plot_options_puzzler_t** %9, align 8
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i64 0, i64 0), i8** %10, align 8
  %19 = load %struct.configtree*, %struct.configtree** %6, align 8
  %20 = load %struct.configtree*, %struct.configtree** %7, align 8
  %21 = call i32 @intersectNodeNode(%struct.configtree* noundef %19, %struct.configtree* noundef %20)
  store i32 %21, i32* %11, align 4
  %22 = load i32, i32* %11, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %4
  store %struct.configtree* null, %struct.configtree** %5, align 8
  br label %155

25:                                               ; preds = %4
  store i32 0, i32* %12, align 4
  %26 = load %struct.configtree*, %struct.configtree** %6, align 8
  %27 = load %struct.configtree*, %struct.configtree** %7, align 8
  %28 = load i32, i32* %11, align 4
  %29 = call %struct.configtree** @constructReducedIntersectionPath(%struct.configtree* noundef %26, %struct.configtree* noundef %27, i32 noundef %28, i32* noundef %12)
  store %struct.configtree** %29, %struct.configtree*** %13, align 8
  %30 = load i32, i32* %12, align 4
  %31 = sub nsw i32 %30, 1
  %32 = sext i32 %31 to i64
  %33 = mul i64 %32, 4
  %34 = trunc i64 %33 to i32
  %35 = call i8* @vrna_alloc(i32 noundef %34)
  %36 = bitcast i8* %35 to i32*
  store i32* %36, i32** %14, align 8
  store i32 0, i32* %15, align 4
  br label %37

37:                                               ; preds = %60, %25
  %38 = load i32, i32* %15, align 4
  %39 = load i32, i32* %12, align 4
  %40 = sub nsw i32 %39, 1
  %41 = icmp slt i32 %38, %40
  br i1 %41, label %42, label %63

42:                                               ; preds = %37
  %43 = load %struct.configtree**, %struct.configtree*** %13, align 8
  %44 = load i32, i32* %15, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %struct.configtree*, %struct.configtree** %43, i64 %45
  %47 = load %struct.configtree*, %struct.configtree** %46, align 8
  %48 = load %struct.configtree**, %struct.configtree*** %13, align 8
  %49 = load i32, i32* %15, align 4
  %50 = add nsw i32 %49, 1
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds %struct.configtree*, %struct.configtree** %48, i64 %51
  %53 = load %struct.configtree*, %struct.configtree** %52, align 8
  %54 = call i32 @getNodeID(%struct.configtree* noundef %53)
  %55 = call i32 @getChildIndex(%struct.configtree* noundef %47, i32 noundef %54)
  %56 = load i32*, i32** %14, align 8
  %57 = load i32, i32* %15, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i32, i32* %56, i64 %58
  store i32 %55, i32* %59, align 4
  br label %60

60:                                               ; preds = %42
  %61 = load i32, i32* %15, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %15, align 4
  br label %37, !llvm.loop !70

63:                                               ; preds = %37
  store %struct.configtree* null, %struct.configtree** %16, align 8
  %64 = load %struct.configtree**, %struct.configtree*** %13, align 8
  %65 = load i32, i32* %12, align 4
  %66 = call signext i16 @TENTATIVE2_getRotationSign(%struct.configtree** noundef %64, i32 noundef %65)
  store i16 %66, i16* %17, align 2
  %67 = load i16, i16* %17, align 2
  %68 = sext i16 %67 to i32
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %70, label %149

70:                                               ; preds = %63
  %71 = load i32, i32* %12, align 4
  %72 = sub nsw i32 %71, 2
  store i32 %72, i32* %18, align 4
  br label %73

73:                                               ; preds = %106, %70
  %74 = load %struct.configtree*, %struct.configtree** %16, align 8
  %75 = icmp eq %struct.configtree* %74, null
  br i1 %75, label %76, label %79

76:                                               ; preds = %73
  %77 = load i32, i32* %18, align 4
  %78 = icmp sge i32 %77, 0
  br label %79

79:                                               ; preds = %76, %73
  %80 = phi i1 [ false, %73 ], [ %78, %76 ]
  br i1 %80, label %81, label %109

81:                                               ; preds = %79
  %82 = load %struct.configtree**, %struct.configtree*** %13, align 8
  %83 = load i32, i32* %18, align 4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds %struct.configtree*, %struct.configtree** %82, i64 %84
  %86 = load %struct.configtree*, %struct.configtree** %85, align 8
  %87 = call signext i16 @isInteriorLoop(%struct.configtree* noundef %86)
  %88 = icmp ne i16 %87, 0
  br i1 %88, label %89, label %106

89:                                               ; preds = %81
  %90 = load %struct.configtree*, %struct.configtree** %6, align 8
  %91 = load %struct.configtree**, %struct.configtree*** %13, align 8
  %92 = load i32, i32* %18, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds %struct.configtree*, %struct.configtree** %91, i64 %93
  %95 = load %struct.configtree*, %struct.configtree** %94, align 8
  %96 = load %struct.configtree*, %struct.configtree** %7, align 8
  %97 = load i32*, i32** %14, align 8
  %98 = load i32, i32* %18, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i32, i32* %97, i64 %99
  %101 = load i32, i32* %100, align 4
  %102 = load i16, i16* %17, align 2
  %103 = load i32, i32* %11, align 4
  %104 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %9, align 8
  %105 = call %struct.configtree* @fixIntersectionWithAncestor(%struct.configtree* noundef %90, %struct.configtree* noundef %95, %struct.configtree* noundef %96, i32 noundef %101, i16 noundef signext %102, i32 noundef %103, %struct.vrna_plot_options_puzzler_t* noundef %104)
  store %struct.configtree* %105, %struct.configtree** %16, align 8
  br label %106

106:                                              ; preds = %89, %81
  %107 = load i32, i32* %18, align 4
  %108 = add nsw i32 %107, -1
  store i32 %108, i32* %18, align 4
  br label %73, !llvm.loop !71

109:                                              ; preds = %79
  %110 = load i32, i32* %12, align 4
  %111 = sub nsw i32 %110, 2
  store i32 %111, i32* %18, align 4
  br label %112

112:                                              ; preds = %145, %109
  %113 = load %struct.configtree*, %struct.configtree** %16, align 8
  %114 = icmp eq %struct.configtree* %113, null
  br i1 %114, label %115, label %118

115:                                              ; preds = %112
  %116 = load i32, i32* %18, align 4
  %117 = icmp sge i32 %116, 0
  br label %118

118:                                              ; preds = %115, %112
  %119 = phi i1 [ false, %112 ], [ %117, %115 ]
  br i1 %119, label %120, label %148

120:                                              ; preds = %118
  %121 = load %struct.configtree**, %struct.configtree*** %13, align 8
  %122 = load i32, i32* %18, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %struct.configtree*, %struct.configtree** %121, i64 %123
  %125 = load %struct.configtree*, %struct.configtree** %124, align 8
  %126 = call signext i16 @isMultiLoop(%struct.configtree* noundef %125)
  %127 = icmp ne i16 %126, 0
  br i1 %127, label %128, label %145

128:                                              ; preds = %120
  %129 = load %struct.configtree*, %struct.configtree** %6, align 8
  %130 = load %struct.configtree**, %struct.configtree*** %13, align 8
  %131 = load i32, i32* %18, align 4
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds %struct.configtree*, %struct.configtree** %130, i64 %132
  %134 = load %struct.configtree*, %struct.configtree** %133, align 8
  %135 = load %struct.configtree*, %struct.configtree** %7, align 8
  %136 = load i32*, i32** %14, align 8
  %137 = load i32, i32* %18, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i32, i32* %136, i64 %138
  %140 = load i32, i32* %139, align 4
  %141 = load i16, i16* %17, align 2
  %142 = load i32, i32* %11, align 4
  %143 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %9, align 8
  %144 = call %struct.configtree* @fixIntersectionWithAncestor(%struct.configtree* noundef %129, %struct.configtree* noundef %134, %struct.configtree* noundef %135, i32 noundef %140, i16 noundef signext %141, i32 noundef %142, %struct.vrna_plot_options_puzzler_t* noundef %143)
  store %struct.configtree* %144, %struct.configtree** %16, align 8
  br label %145

145:                                              ; preds = %128, %120
  %146 = load i32, i32* %18, align 4
  %147 = add nsw i32 %146, -1
  store i32 %147, i32* %18, align 4
  br label %112, !llvm.loop !72

148:                                              ; preds = %118
  br label %149

149:                                              ; preds = %148, %63
  %150 = load %struct.configtree**, %struct.configtree*** %13, align 8
  %151 = bitcast %struct.configtree** %150 to i8*
  call void @free(i8* noundef %151) #7
  %152 = load i32*, i32** %14, align 8
  %153 = bitcast i32* %152 to i8*
  call void @free(i8* noundef %153) #7
  %154 = load %struct.configtree*, %struct.configtree** %16, align 8
  store %struct.configtree* %154, %struct.configtree** %5, align 8
  br label %155

155:                                              ; preds = %149, %24
  %156 = load %struct.configtree*, %struct.configtree** %5, align 8
  ret %struct.configtree* %156
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectNodeExterior(%struct.configtree* noundef %0, %struct.vrna_plot_options_puzzler_t* noundef %1) #0 {
  %3 = alloca i16, align 2
  %4 = alloca %struct.configtree*, align 8
  %5 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %4, align 8
  store %struct.vrna_plot_options_puzzler_t* %1, %struct.vrna_plot_options_puzzler_t** %5, align 8
  %8 = load %struct.configtree*, %struct.configtree** %4, align 8
  %9 = call signext i16 @isExterior(%struct.configtree* noundef %8)
  %10 = icmp ne i16 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %2
  store i16 0, i16* %3, align 2
  br label %43

12:                                               ; preds = %2
  %13 = load %struct.configtree*, %struct.configtree** %4, align 8
  %14 = call %struct.configtree* @getParent(%struct.configtree* noundef %13)
  %15 = call signext i16 @isExterior(%struct.configtree* noundef %14)
  %16 = icmp ne i16 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %12
  store i16 0, i16* %3, align 2
  br label %43

18:                                               ; preds = %12
  %19 = load %struct.configtree*, %struct.configtree** %4, align 8
  %20 = getelementptr inbounds %struct.configtree, %struct.configtree* %19, i32 0, i32 7
  %21 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %20, align 8
  %22 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %21, i32 0, i32 1
  %23 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 1
  %24 = load double, double* %23, align 8
  store double %24, double* %6, align 8
  %25 = load %struct.configtree*, %struct.configtree** %4, align 8
  %26 = getelementptr inbounds %struct.configtree, %struct.configtree* %25, i32 0, i32 7
  %27 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %26, align 8
  %28 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %27, i32 0, i32 2
  %29 = load double, double* %28, align 8
  %30 = fadd double %29, 1.400000e+01
  store double %30, double* %7, align 8
  %31 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %5, align 8
  %32 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %31, i32 0, i32 5
  %33 = load i16, i16* %32, align 4
  %34 = icmp ne i16 %33, 0
  br i1 %34, label %35, label %42

35:                                               ; preds = %18
  %36 = load double, double* %6, align 8
  %37 = load double, double* %7, align 8
  %38 = fsub double %36, %37
  %39 = fcmp ole double %38, 1.000000e+02
  %40 = zext i1 %39 to i32
  %41 = trunc i32 %40 to i16
  store i16 %41, i16* %3, align 2
  br label %43

42:                                               ; preds = %18
  store i16 0, i16* %3, align 2
  br label %43

43:                                               ; preds = %42, %35, %17, %11
  %44 = load i16, i16* %3, align 2
  ret i16 %44
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @TENTATIVE3_setupExteriorBoundingBoxes(%struct.configtree* noundef %0, %struct.configtree* noundef %1, %struct.configtree* noundef %2, %struct.vrna_plot_options_puzzler_t* noundef %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca [2 x double], align 16
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca %struct.AABB*, align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  %21 = alloca double, align 8
  %22 = alloca %struct.boundingboxLoop*, align 8
  %23 = alloca double, align 8
  %24 = alloca double, align 8
  %25 = alloca double, align 8
  %26 = alloca double, align 8
  %27 = alloca %struct.boundingboxLoop*, align 8
  %28 = alloca double, align 8
  %29 = alloca double, align 8
  %30 = alloca double, align 8
  %31 = alloca double, align 8
  %32 = alloca %struct.boundingboxLoop*, align 8
  %33 = alloca double, align 8
  %34 = alloca double, align 8
  %35 = alloca double, align 8
  %36 = alloca double, align 8
  %37 = alloca %struct.boundingboxLoop*, align 8
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store %struct.configtree* %1, %struct.configtree** %6, align 8
  store %struct.configtree* %2, %struct.configtree** %7, align 8
  store %struct.vrna_plot_options_puzzler_t* %3, %struct.vrna_plot_options_puzzler_t** %8, align 8
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.40, i64 0, i64 0), i8** %9, align 8
  store double 1.000000e+02, double* %10, align 8
  %38 = load double, double* %10, align 8
  %39 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %8, align 8
  %40 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %39, i32 0, i32 1
  %41 = load double, double* %40, align 8
  %42 = fsub double %38, %41
  store double %42, double* %11, align 8
  %43 = load %struct.configtree*, %struct.configtree** %6, align 8
  %44 = getelementptr inbounds %struct.configtree, %struct.configtree* %43, i32 0, i32 7
  %45 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %44, align 8
  %46 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %45, i32 0, i32 1
  %47 = getelementptr inbounds [2 x double], [2 x double]* %46, i64 0, i64 0
  %48 = load double, double* %47, align 8
  store double %48, double* %12, align 8
  %49 = load double, double* %10, align 8
  %50 = load double, double* %11, align 8
  %51 = fsub double %49, %50
  %52 = fmul double 5.000000e-01, %51
  store double %52, double* %13, align 8
  %53 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %54 = load double, double* %12, align 8
  store double %54, double* %53, align 8
  %55 = getelementptr inbounds double, double* %53, i64 1
  %56 = load double, double* %10, align 8
  %57 = load double, double* %13, align 8
  %58 = fsub double %56, %57
  store double %58, double* %55, align 8
  %59 = load double, double* %12, align 8
  store double %59, double* %15, align 8
  %60 = load double, double* %12, align 8
  store double %60, double* %16, align 8
  %61 = load %struct.configtree*, %struct.configtree** %7, align 8
  %62 = getelementptr inbounds %struct.configtree, %struct.configtree* %61, i32 0, i32 9
  store %struct.AABB* %62, %struct.AABB** %17, align 8
  %63 = load %struct.AABB*, %struct.AABB** %17, align 8
  %64 = getelementptr inbounds %struct.AABB, %struct.AABB* %63, i32 0, i32 1
  %65 = getelementptr inbounds [2 x double], [2 x double]* %64, i64 0, i64 0
  %66 = load double, double* %65, align 8
  %67 = load double, double* %12, align 8
  %68 = fcmp olt double %66, %67
  br i1 %68, label %69, label %86

69:                                               ; preds = %4
  %70 = load double, double* %12, align 8
  store double %70, double* %18, align 8
  %71 = load %struct.AABB*, %struct.AABB** %17, align 8
  %72 = getelementptr inbounds %struct.AABB, %struct.AABB* %71, i32 0, i32 0
  %73 = getelementptr inbounds [2 x double], [2 x double]* %72, i64 0, i64 0
  %74 = load double, double* %73, align 8
  store double %74, double* %19, align 8
  %75 = load double, double* %10, align 8
  store double %75, double* %20, align 8
  %76 = load double, double* %11, align 8
  store double %76, double* %21, align 8
  %77 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %78 = load double, double* %13, align 8
  %79 = call %struct.boundingboxLoop* @createLoopBox(double* noundef %77, double noundef %78)
  store %struct.boundingboxLoop* %79, %struct.boundingboxLoop** %22, align 8
  %80 = load %struct.configtree*, %struct.configtree** %5, align 8
  %81 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %22, align 8
  %82 = load double, double* %18, align 8
  %83 = load double, double* %19, align 8
  %84 = load double, double* %20, align 8
  %85 = load double, double* %21, align 8
  call void @TENTATIVE2_updateExteriorBoundingBoxes(%struct.configtree* noundef %80, %struct.boundingboxLoop* noundef %81, double noundef %82, double noundef %83, double noundef %84, double noundef %85)
  br label %150

86:                                               ; preds = %4
  %87 = load double, double* %12, align 8
  %88 = load %struct.AABB*, %struct.AABB** %17, align 8
  %89 = getelementptr inbounds %struct.AABB, %struct.AABB* %88, i32 0, i32 0
  %90 = getelementptr inbounds [2 x double], [2 x double]* %89, i64 0, i64 0
  %91 = load double, double* %90, align 8
  %92 = fcmp olt double %87, %91
  br i1 %92, label %93, label %110

93:                                               ; preds = %86
  %94 = load double, double* %12, align 8
  store double %94, double* %23, align 8
  %95 = load %struct.AABB*, %struct.AABB** %17, align 8
  %96 = getelementptr inbounds %struct.AABB, %struct.AABB* %95, i32 0, i32 1
  %97 = getelementptr inbounds [2 x double], [2 x double]* %96, i64 0, i64 0
  %98 = load double, double* %97, align 8
  store double %98, double* %24, align 8
  %99 = load double, double* %11, align 8
  store double %99, double* %25, align 8
  %100 = load double, double* %10, align 8
  store double %100, double* %26, align 8
  %101 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %102 = load double, double* %13, align 8
  %103 = call %struct.boundingboxLoop* @createLoopBox(double* noundef %101, double noundef %102)
  store %struct.boundingboxLoop* %103, %struct.boundingboxLoop** %27, align 8
  %104 = load %struct.configtree*, %struct.configtree** %5, align 8
  %105 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %27, align 8
  %106 = load double, double* %23, align 8
  %107 = load double, double* %24, align 8
  %108 = load double, double* %25, align 8
  %109 = load double, double* %26, align 8
  call void @TENTATIVE2_updateExteriorBoundingBoxes(%struct.configtree* noundef %104, %struct.boundingboxLoop* noundef %105, double noundef %106, double noundef %107, double noundef %108, double noundef %109)
  br label %149

110:                                              ; preds = %86
  %111 = load double, double* %12, align 8
  store double %111, double* %28, align 8
  %112 = load %struct.AABB*, %struct.AABB** %17, align 8
  %113 = getelementptr inbounds %struct.AABB, %struct.AABB* %112, i32 0, i32 0
  %114 = getelementptr inbounds [2 x double], [2 x double]* %113, i64 0, i64 0
  %115 = load double, double* %114, align 8
  store double %115, double* %29, align 8
  %116 = load double, double* %10, align 8
  store double %116, double* %30, align 8
  %117 = load double, double* %11, align 8
  store double %117, double* %31, align 8
  %118 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %119 = load double, double* %13, align 8
  %120 = call %struct.boundingboxLoop* @createLoopBox(double* noundef %118, double noundef %119)
  store %struct.boundingboxLoop* %120, %struct.boundingboxLoop** %32, align 8
  %121 = load %struct.configtree*, %struct.configtree** %5, align 8
  %122 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %32, align 8
  %123 = load double, double* %28, align 8
  %124 = load double, double* %29, align 8
  %125 = load double, double* %30, align 8
  %126 = load double, double* %31, align 8
  call void @TENTATIVE2_updateExteriorBoundingBoxes(%struct.configtree* noundef %121, %struct.boundingboxLoop* noundef %122, double noundef %123, double noundef %124, double noundef %125, double noundef %126)
  %127 = load %struct.configtree*, %struct.configtree** %7, align 8
  %128 = load %struct.configtree*, %struct.configtree** %5, align 8
  %129 = call i32 @intersectNodeNode(%struct.configtree* noundef %127, %struct.configtree* noundef %128)
  %130 = icmp eq i32 0, %129
  br i1 %130, label %131, label %148

131:                                              ; preds = %110
  %132 = load double, double* %12, align 8
  store double %132, double* %33, align 8
  %133 = load %struct.AABB*, %struct.AABB** %17, align 8
  %134 = getelementptr inbounds %struct.AABB, %struct.AABB* %133, i32 0, i32 1
  %135 = getelementptr inbounds [2 x double], [2 x double]* %134, i64 0, i64 0
  %136 = load double, double* %135, align 8
  store double %136, double* %34, align 8
  %137 = load double, double* %11, align 8
  store double %137, double* %35, align 8
  %138 = load double, double* %10, align 8
  store double %138, double* %36, align 8
  %139 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %140 = load double, double* %13, align 8
  %141 = call %struct.boundingboxLoop* @createLoopBox(double* noundef %139, double noundef %140)
  store %struct.boundingboxLoop* %141, %struct.boundingboxLoop** %37, align 8
  %142 = load %struct.configtree*, %struct.configtree** %5, align 8
  %143 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %37, align 8
  %144 = load double, double* %33, align 8
  %145 = load double, double* %34, align 8
  %146 = load double, double* %35, align 8
  %147 = load double, double* %36, align 8
  call void @TENTATIVE2_updateExteriorBoundingBoxes(%struct.configtree* noundef %142, %struct.boundingboxLoop* noundef %143, double noundef %144, double noundef %145, double noundef %146, double noundef %147)
  br label %148

148:                                              ; preds = %131, %110
  br label %149

149:                                              ; preds = %148, %93
  br label %150

150:                                              ; preds = %149, %69
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectNodesBoundingBoxes(%struct.AABB* noundef %0, %struct.AABB* noundef %1, %struct.boundingboxStem* noundef %2, %struct.boundingboxStem* noundef %3) #0 {
  %5 = alloca i16, align 2
  %6 = alloca %struct.AABB*, align 8
  %7 = alloca %struct.AABB*, align 8
  %8 = alloca %struct.boundingboxStem*, align 8
  %9 = alloca %struct.boundingboxStem*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca double, align 8
  %12 = alloca i32, align 4
  store %struct.AABB* %0, %struct.AABB** %6, align 8
  store %struct.AABB* %1, %struct.AABB** %7, align 8
  store %struct.boundingboxStem* %2, %struct.boundingboxStem** %8, align 8
  store %struct.boundingboxStem* %3, %struct.boundingboxStem** %9, align 8
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), i8** %10, align 8
  store double 0.000000e+00, double* %11, align 8
  %13 = load double, double* %11, align 8
  %14 = fadd double %13, 1.400000e+01
  store double %14, double* %11, align 8
  store i32 0, i32* %12, align 4
  %15 = load %struct.boundingboxStem*, %struct.boundingboxStem** %8, align 8
  %16 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %15, i32 0, i32 6
  %17 = load double, double* %16, align 8
  %18 = fcmp ogt double %17, 0.000000e+00
  br i1 %18, label %19, label %22

19:                                               ; preds = %4
  %20 = load i32, i32* %12, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %12, align 4
  br label %22

22:                                               ; preds = %19, %4
  %23 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %24 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %23, i32 0, i32 6
  %25 = load double, double* %24, align 8
  %26 = fcmp ogt double %25, 0.000000e+00
  br i1 %26, label %27, label %30

27:                                               ; preds = %22
  %28 = load i32, i32* %12, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %12, align 4
  br label %30

30:                                               ; preds = %27, %22
  %31 = load i32, i32* %12, align 4
  %32 = icmp sgt i32 %31, 0
  br i1 %32, label %33, label %46

33:                                               ; preds = %30
  %34 = load i32, i32* %12, align 4
  %35 = sitofp i32 %34 to double
  %36 = fdiv double 1.000000e+00, %35
  %37 = load %struct.boundingboxStem*, %struct.boundingboxStem** %8, align 8
  %38 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %37, i32 0, i32 6
  %39 = load double, double* %38, align 8
  %40 = load %struct.boundingboxStem*, %struct.boundingboxStem** %9, align 8
  %41 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %40, i32 0, i32 6
  %42 = load double, double* %41, align 8
  %43 = fadd double %39, %42
  %44 = load double, double* %11, align 8
  %45 = call double @llvm.fmuladd.f64(double %36, double %43, double %44)
  store double %45, double* %11, align 8
  br label %46

46:                                               ; preds = %33, %30
  %47 = load %struct.AABB*, %struct.AABB** %6, align 8
  %48 = getelementptr inbounds %struct.AABB, %struct.AABB* %47, i32 0, i32 1
  %49 = getelementptr inbounds [2 x double], [2 x double]* %48, i64 0, i64 0
  %50 = load double, double* %49, align 8
  %51 = load %struct.AABB*, %struct.AABB** %7, align 8
  %52 = getelementptr inbounds %struct.AABB, %struct.AABB* %51, i32 0, i32 0
  %53 = getelementptr inbounds [2 x double], [2 x double]* %52, i64 0, i64 0
  %54 = load double, double* %53, align 8
  %55 = load double, double* %11, align 8
  %56 = fsub double %54, %55
  %57 = fcmp olt double %50, %56
  br i1 %57, label %94, label %58

58:                                               ; preds = %46
  %59 = load %struct.AABB*, %struct.AABB** %7, align 8
  %60 = getelementptr inbounds %struct.AABB, %struct.AABB* %59, i32 0, i32 1
  %61 = getelementptr inbounds [2 x double], [2 x double]* %60, i64 0, i64 0
  %62 = load double, double* %61, align 8
  %63 = load %struct.AABB*, %struct.AABB** %6, align 8
  %64 = getelementptr inbounds %struct.AABB, %struct.AABB* %63, i32 0, i32 0
  %65 = getelementptr inbounds [2 x double], [2 x double]* %64, i64 0, i64 0
  %66 = load double, double* %65, align 8
  %67 = load double, double* %11, align 8
  %68 = fsub double %66, %67
  %69 = fcmp olt double %62, %68
  br i1 %69, label %94, label %70

70:                                               ; preds = %58
  %71 = load %struct.AABB*, %struct.AABB** %6, align 8
  %72 = getelementptr inbounds %struct.AABB, %struct.AABB* %71, i32 0, i32 1
  %73 = getelementptr inbounds [2 x double], [2 x double]* %72, i64 0, i64 1
  %74 = load double, double* %73, align 8
  %75 = load %struct.AABB*, %struct.AABB** %7, align 8
  %76 = getelementptr inbounds %struct.AABB, %struct.AABB* %75, i32 0, i32 0
  %77 = getelementptr inbounds [2 x double], [2 x double]* %76, i64 0, i64 1
  %78 = load double, double* %77, align 8
  %79 = load double, double* %11, align 8
  %80 = fsub double %78, %79
  %81 = fcmp olt double %74, %80
  br i1 %81, label %94, label %82

82:                                               ; preds = %70
  %83 = load %struct.AABB*, %struct.AABB** %7, align 8
  %84 = getelementptr inbounds %struct.AABB, %struct.AABB* %83, i32 0, i32 1
  %85 = getelementptr inbounds [2 x double], [2 x double]* %84, i64 0, i64 1
  %86 = load double, double* %85, align 8
  %87 = load %struct.AABB*, %struct.AABB** %6, align 8
  %88 = getelementptr inbounds %struct.AABB, %struct.AABB* %87, i32 0, i32 0
  %89 = getelementptr inbounds [2 x double], [2 x double]* %88, i64 0, i64 1
  %90 = load double, double* %89, align 8
  %91 = load double, double* %11, align 8
  %92 = fsub double %90, %91
  %93 = fcmp olt double %86, %92
  br i1 %93, label %94, label %95

94:                                               ; preds = %82, %70, %58, %46
  store i16 0, i16* %5, align 2
  br label %96

95:                                               ; preds = %82
  store i16 1, i16* %5, align 2
  br label %96

96:                                               ; preds = %95, %94
  %97 = load i16, i16* %5, align 2
  ret i16 %97
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectStemStem(%struct.boundingboxStem* noundef %0, %struct.boundingboxStem* noundef %1) #0 {
  %3 = alloca i16, align 2
  %4 = alloca %struct.boundingboxStem*, align 8
  %5 = alloca %struct.boundingboxStem*, align 8
  %6 = alloca [2 x double], align 16
  %7 = alloca [2 x double], align 16
  %8 = alloca [2 x double], align 16
  %9 = alloca [2 x double], align 16
  %10 = alloca [2 x double], align 16
  %11 = alloca [2 x double], align 16
  %12 = alloca [2 x double], align 16
  %13 = alloca [2 x double], align 16
  %14 = alloca [2 x double], align 16
  %15 = alloca [2 x double], align 16
  %16 = alloca [2 x double], align 16
  %17 = alloca [2 x double], align 16
  store %struct.boundingboxStem* %0, %struct.boundingboxStem** %4, align 8
  store %struct.boundingboxStem* %1, %struct.boundingboxStem** %5, align 8
  %18 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %19 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %20 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %19, i32 0, i32 4
  %21 = getelementptr inbounds [2 x double], [2 x double]* %20, i64 0, i64 0
  %22 = load double, double* %21, align 8
  %23 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %24 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %23, i32 0, i32 1
  %25 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  %26 = load double, double* %25, align 8
  %27 = fmul double %22, %26
  store double %27, double* %18, align 8
  %28 = getelementptr inbounds double, double* %18, i64 1
  %29 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %30 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %29, i32 0, i32 4
  %31 = getelementptr inbounds [2 x double], [2 x double]* %30, i64 0, i64 0
  %32 = load double, double* %31, align 8
  %33 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %34 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %33, i32 0, i32 1
  %35 = getelementptr inbounds [2 x double], [2 x double]* %34, i64 0, i64 1
  %36 = load double, double* %35, align 8
  %37 = fmul double %32, %36
  store double %37, double* %28, align 8
  %38 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %39 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %40 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %39, i32 0, i32 4
  %41 = getelementptr inbounds [2 x double], [2 x double]* %40, i64 0, i64 1
  %42 = load double, double* %41, align 8
  %43 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %44 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %43, i32 0, i32 2
  %45 = getelementptr inbounds [2 x double], [2 x double]* %44, i64 0, i64 0
  %46 = load double, double* %45, align 8
  %47 = fmul double %42, %46
  store double %47, double* %38, align 8
  %48 = getelementptr inbounds double, double* %38, i64 1
  %49 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %50 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %49, i32 0, i32 4
  %51 = getelementptr inbounds [2 x double], [2 x double]* %50, i64 0, i64 1
  %52 = load double, double* %51, align 8
  %53 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %54 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %53, i32 0, i32 2
  %55 = getelementptr inbounds [2 x double], [2 x double]* %54, i64 0, i64 1
  %56 = load double, double* %55, align 8
  %57 = fmul double %52, %56
  store double %57, double* %48, align 8
  %58 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %59 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %60 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %59, i32 0, i32 3
  %61 = getelementptr inbounds [2 x double], [2 x double]* %60, i64 0, i64 0
  %62 = load double, double* %61, align 8
  %63 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %64 = load double, double* %63, align 16
  %65 = fadd double %62, %64
  %66 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %67 = load double, double* %66, align 16
  %68 = fadd double %65, %67
  store double %68, double* %58, align 8
  %69 = getelementptr inbounds double, double* %58, i64 1
  %70 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %71 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %70, i32 0, i32 3
  %72 = getelementptr inbounds [2 x double], [2 x double]* %71, i64 0, i64 1
  %73 = load double, double* %72, align 8
  %74 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 1
  %75 = load double, double* %74, align 8
  %76 = fadd double %73, %75
  %77 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 1
  %78 = load double, double* %77, align 8
  %79 = fadd double %76, %78
  store double %79, double* %69, align 8
  %80 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %81 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %82 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %81, i32 0, i32 3
  %83 = getelementptr inbounds [2 x double], [2 x double]* %82, i64 0, i64 0
  %84 = load double, double* %83, align 8
  %85 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %86 = load double, double* %85, align 16
  %87 = fadd double %84, %86
  %88 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %89 = load double, double* %88, align 16
  %90 = fsub double %87, %89
  store double %90, double* %80, align 8
  %91 = getelementptr inbounds double, double* %80, i64 1
  %92 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %93 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %92, i32 0, i32 3
  %94 = getelementptr inbounds [2 x double], [2 x double]* %93, i64 0, i64 1
  %95 = load double, double* %94, align 8
  %96 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 1
  %97 = load double, double* %96, align 8
  %98 = fadd double %95, %97
  %99 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 1
  %100 = load double, double* %99, align 8
  %101 = fsub double %98, %100
  store double %101, double* %91, align 8
  %102 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %103 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %104 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %103, i32 0, i32 3
  %105 = getelementptr inbounds [2 x double], [2 x double]* %104, i64 0, i64 0
  %106 = load double, double* %105, align 8
  %107 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %108 = load double, double* %107, align 16
  %109 = fsub double %106, %108
  %110 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %111 = load double, double* %110, align 16
  %112 = fsub double %109, %111
  store double %112, double* %102, align 8
  %113 = getelementptr inbounds double, double* %102, i64 1
  %114 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %115 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %114, i32 0, i32 3
  %116 = getelementptr inbounds [2 x double], [2 x double]* %115, i64 0, i64 1
  %117 = load double, double* %116, align 8
  %118 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 1
  %119 = load double, double* %118, align 8
  %120 = fsub double %117, %119
  %121 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 1
  %122 = load double, double* %121, align 8
  %123 = fsub double %120, %122
  store double %123, double* %113, align 8
  %124 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %125 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %126 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %125, i32 0, i32 3
  %127 = getelementptr inbounds [2 x double], [2 x double]* %126, i64 0, i64 0
  %128 = load double, double* %127, align 8
  %129 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %130 = load double, double* %129, align 16
  %131 = fsub double %128, %130
  %132 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %133 = load double, double* %132, align 16
  %134 = fadd double %131, %133
  store double %134, double* %124, align 8
  %135 = getelementptr inbounds double, double* %124, i64 1
  %136 = load %struct.boundingboxStem*, %struct.boundingboxStem** %4, align 8
  %137 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %136, i32 0, i32 3
  %138 = getelementptr inbounds [2 x double], [2 x double]* %137, i64 0, i64 1
  %139 = load double, double* %138, align 8
  %140 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 1
  %141 = load double, double* %140, align 8
  %142 = fsub double %139, %141
  %143 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 1
  %144 = load double, double* %143, align 8
  %145 = fadd double %142, %144
  store double %145, double* %135, align 8
  %146 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %147 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %148 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %147, i32 0, i32 4
  %149 = getelementptr inbounds [2 x double], [2 x double]* %148, i64 0, i64 0
  %150 = load double, double* %149, align 8
  %151 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %152 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %151, i32 0, i32 1
  %153 = getelementptr inbounds [2 x double], [2 x double]* %152, i64 0, i64 0
  %154 = load double, double* %153, align 8
  %155 = fmul double %150, %154
  store double %155, double* %146, align 8
  %156 = getelementptr inbounds double, double* %146, i64 1
  %157 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %158 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %157, i32 0, i32 4
  %159 = getelementptr inbounds [2 x double], [2 x double]* %158, i64 0, i64 0
  %160 = load double, double* %159, align 8
  %161 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %162 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %161, i32 0, i32 1
  %163 = getelementptr inbounds [2 x double], [2 x double]* %162, i64 0, i64 1
  %164 = load double, double* %163, align 8
  %165 = fmul double %160, %164
  store double %165, double* %156, align 8
  %166 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %167 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %168 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %167, i32 0, i32 4
  %169 = getelementptr inbounds [2 x double], [2 x double]* %168, i64 0, i64 1
  %170 = load double, double* %169, align 8
  %171 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %172 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %171, i32 0, i32 2
  %173 = getelementptr inbounds [2 x double], [2 x double]* %172, i64 0, i64 0
  %174 = load double, double* %173, align 8
  %175 = fmul double %170, %174
  store double %175, double* %166, align 8
  %176 = getelementptr inbounds double, double* %166, i64 1
  %177 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %178 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %177, i32 0, i32 4
  %179 = getelementptr inbounds [2 x double], [2 x double]* %178, i64 0, i64 1
  %180 = load double, double* %179, align 8
  %181 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %182 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %181, i32 0, i32 2
  %183 = getelementptr inbounds [2 x double], [2 x double]* %182, i64 0, i64 1
  %184 = load double, double* %183, align 8
  %185 = fmul double %180, %184
  store double %185, double* %176, align 8
  %186 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %187 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %188 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %187, i32 0, i32 3
  %189 = getelementptr inbounds [2 x double], [2 x double]* %188, i64 0, i64 0
  %190 = load double, double* %189, align 8
  %191 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %192 = load double, double* %191, align 16
  %193 = fadd double %190, %192
  %194 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %195 = load double, double* %194, align 16
  %196 = fadd double %193, %195
  store double %196, double* %186, align 8
  %197 = getelementptr inbounds double, double* %186, i64 1
  %198 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %199 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %198, i32 0, i32 3
  %200 = getelementptr inbounds [2 x double], [2 x double]* %199, i64 0, i64 1
  %201 = load double, double* %200, align 8
  %202 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 1
  %203 = load double, double* %202, align 8
  %204 = fadd double %201, %203
  %205 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 1
  %206 = load double, double* %205, align 8
  %207 = fadd double %204, %206
  store double %207, double* %197, align 8
  %208 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %209 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %210 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %209, i32 0, i32 3
  %211 = getelementptr inbounds [2 x double], [2 x double]* %210, i64 0, i64 0
  %212 = load double, double* %211, align 8
  %213 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %214 = load double, double* %213, align 16
  %215 = fadd double %212, %214
  %216 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %217 = load double, double* %216, align 16
  %218 = fsub double %215, %217
  store double %218, double* %208, align 8
  %219 = getelementptr inbounds double, double* %208, i64 1
  %220 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %221 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %220, i32 0, i32 3
  %222 = getelementptr inbounds [2 x double], [2 x double]* %221, i64 0, i64 1
  %223 = load double, double* %222, align 8
  %224 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 1
  %225 = load double, double* %224, align 8
  %226 = fadd double %223, %225
  %227 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 1
  %228 = load double, double* %227, align 8
  %229 = fsub double %226, %228
  store double %229, double* %219, align 8
  %230 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %231 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %232 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %231, i32 0, i32 3
  %233 = getelementptr inbounds [2 x double], [2 x double]* %232, i64 0, i64 0
  %234 = load double, double* %233, align 8
  %235 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %236 = load double, double* %235, align 16
  %237 = fsub double %234, %236
  %238 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %239 = load double, double* %238, align 16
  %240 = fsub double %237, %239
  store double %240, double* %230, align 8
  %241 = getelementptr inbounds double, double* %230, i64 1
  %242 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %243 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %242, i32 0, i32 3
  %244 = getelementptr inbounds [2 x double], [2 x double]* %243, i64 0, i64 1
  %245 = load double, double* %244, align 8
  %246 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 1
  %247 = load double, double* %246, align 8
  %248 = fsub double %245, %247
  %249 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 1
  %250 = load double, double* %249, align 8
  %251 = fsub double %248, %250
  store double %251, double* %241, align 8
  %252 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %253 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %254 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %253, i32 0, i32 3
  %255 = getelementptr inbounds [2 x double], [2 x double]* %254, i64 0, i64 0
  %256 = load double, double* %255, align 8
  %257 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %258 = load double, double* %257, align 16
  %259 = fsub double %256, %258
  %260 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %261 = load double, double* %260, align 16
  %262 = fadd double %259, %261
  store double %262, double* %252, align 8
  %263 = getelementptr inbounds double, double* %252, i64 1
  %264 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %265 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %264, i32 0, i32 3
  %266 = getelementptr inbounds [2 x double], [2 x double]* %265, i64 0, i64 1
  %267 = load double, double* %266, align 8
  %268 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 1
  %269 = load double, double* %268, align 8
  %270 = fsub double %267, %269
  %271 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 1
  %272 = load double, double* %271, align 8
  %273 = fadd double %270, %272
  store double %273, double* %263, align 8
  %274 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %275 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %276 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %277 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %278 = call signext i16 @intersectLineSegments(double* noundef %274, double* noundef %275, double* noundef %276, double* noundef %277, double* noundef null)
  %279 = sext i16 %278 to i32
  %280 = icmp ne i32 %279, 0
  br i1 %280, label %305, label %281

281:                                              ; preds = %2
  %282 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %283 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %284 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %285 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %286 = call signext i16 @intersectLineSegments(double* noundef %282, double* noundef %283, double* noundef %284, double* noundef %285, double* noundef null)
  %287 = sext i16 %286 to i32
  %288 = icmp ne i32 %287, 0
  br i1 %288, label %305, label %289

289:                                              ; preds = %281
  %290 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %291 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %292 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %293 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %294 = call signext i16 @intersectLineSegments(double* noundef %290, double* noundef %291, double* noundef %292, double* noundef %293, double* noundef null)
  %295 = sext i16 %294 to i32
  %296 = icmp ne i32 %295, 0
  br i1 %296, label %305, label %297

297:                                              ; preds = %289
  %298 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %299 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %300 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %301 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %302 = call signext i16 @intersectLineSegments(double* noundef %298, double* noundef %299, double* noundef %300, double* noundef %301, double* noundef null)
  %303 = sext i16 %302 to i32
  %304 = icmp ne i32 %303, 0
  br i1 %304, label %305, label %306

305:                                              ; preds = %297, %289, %281, %2
  store i16 1, i16* %3, align 2
  br label %307

306:                                              ; preds = %297
  store i16 0, i16* %3, align 2
  br label %307

307:                                              ; preds = %306, %305
  %308 = load i16, i16* %3, align 2
  ret i16 %308
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectLoopLoop(%struct.boundingboxLoop* noundef %0, %struct.boundingboxLoop* noundef %1) #0 {
  %3 = alloca %struct.boundingboxLoop*, align 8
  %4 = alloca %struct.boundingboxLoop*, align 8
  %5 = alloca [2 x double], align 16
  %6 = alloca double, align 8
  %7 = alloca [2 x double], align 16
  %8 = alloca double, align 8
  store %struct.boundingboxLoop* %0, %struct.boundingboxLoop** %3, align 8
  store %struct.boundingboxLoop* %1, %struct.boundingboxLoop** %4, align 8
  %9 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %10 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %3, align 8
  %11 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %10, i32 0, i32 1
  %12 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %13 = load double, double* %12, align 8
  store double %13, double* %9, align 8
  %14 = getelementptr inbounds double, double* %9, i64 1
  %15 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %3, align 8
  %16 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %15, i32 0, i32 1
  %17 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 1
  %18 = load double, double* %17, align 8
  store double %18, double* %14, align 8
  %19 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %3, align 8
  %20 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %19, i32 0, i32 2
  %21 = load double, double* %20, align 8
  %22 = fadd double %21, 7.000000e+00
  store double %22, double* %6, align 8
  %23 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %24 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %4, align 8
  %25 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %24, i32 0, i32 1
  %26 = getelementptr inbounds [2 x double], [2 x double]* %25, i64 0, i64 0
  %27 = load double, double* %26, align 8
  store double %27, double* %23, align 8
  %28 = getelementptr inbounds double, double* %23, i64 1
  %29 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %4, align 8
  %30 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %29, i32 0, i32 1
  %31 = getelementptr inbounds [2 x double], [2 x double]* %30, i64 0, i64 1
  %32 = load double, double* %31, align 8
  store double %32, double* %28, align 8
  %33 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %4, align 8
  %34 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %33, i32 0, i32 2
  %35 = load double, double* %34, align 8
  %36 = fadd double %35, 7.000000e+00
  store double %36, double* %8, align 8
  %37 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %38 = load double, double* %6, align 8
  %39 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %40 = load double, double* %8, align 8
  %41 = call signext i16 @intersectCircleCircle(double* noundef %37, double noundef %38, double* noundef %39, double noundef %40)
  ret i16 %41
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectStemLoop(%struct.boundingboxStem* noundef %0, %struct.boundingboxLoop* noundef %1) #0 {
  %3 = alloca %struct.boundingboxStem*, align 8
  %4 = alloca %struct.boundingboxLoop*, align 8
  %5 = alloca i16, align 2
  %6 = alloca [2 x double], align 16
  %7 = alloca [2 x double], align 16
  %8 = alloca double, align 8
  store %struct.boundingboxStem* %0, %struct.boundingboxStem** %3, align 8
  store %struct.boundingboxLoop* %1, %struct.boundingboxLoop** %4, align 8
  store i16 0, i16* %5, align 2
  %9 = load %struct.boundingboxStem*, %struct.boundingboxStem** %3, align 8
  %10 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %4, align 8
  %11 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %10, i32 0, i32 1
  %12 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %13 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  call void @ClosestPtPointOBB(%struct.boundingboxStem* noundef byval(%struct.boundingboxStem) align 8 %9, double* noundef %12, double* noundef %13)
  %14 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %4, align 8
  %15 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %14, i32 0, i32 1
  %16 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %17 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %18 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  call void @vector(double* noundef %16, double* noundef %17, double* noundef %18)
  %19 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %20 = call double @vectorLength2DSquared(double* noundef %19)
  store double %20, double* %8, align 8
  %21 = load double, double* %8, align 8
  %22 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %4, align 8
  %23 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %22, i32 0, i32 2
  %24 = load double, double* %23, align 8
  %25 = fadd double %24, 1.400000e+01
  %26 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %4, align 8
  %27 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %26, i32 0, i32 2
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, 1.400000e+01
  %30 = fmul double %25, %29
  %31 = fcmp olt double %21, %30
  %32 = zext i1 %31 to i32
  %33 = trunc i32 %32 to i16
  store i16 %33, i16* %5, align 2
  %34 = load i16, i16* %5, align 2
  ret i16 %34
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectLoopBulges(%struct.boundingboxLoop* noundef %0, %struct.boundingboxStem* noundef %1, i32* noundef %2) #0 {
  %4 = alloca i16, align 2
  %5 = alloca %struct.boundingboxLoop*, align 8
  %6 = alloca %struct.boundingboxStem*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca [2 x double], align 16
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca [2 x double], align 16
  %12 = alloca [2 x double], align 16
  %13 = alloca [2 x double], align 16
  %14 = alloca [2 x double], align 16
  store %struct.boundingboxLoop* %0, %struct.boundingboxLoop** %5, align 8
  store %struct.boundingboxStem* %1, %struct.boundingboxStem** %6, align 8
  store i32* %2, i32** %7, align 8
  %15 = load i32*, i32** %7, align 8
  store i32 -1, i32* %15, align 4
  %16 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %17 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %5, align 8
  %18 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %17, i32 0, i32 1
  %19 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 0
  %20 = load double, double* %19, align 8
  store double %20, double* %16, align 8
  %21 = getelementptr inbounds double, double* %16, i64 1
  %22 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %5, align 8
  %23 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %22, i32 0, i32 1
  %24 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 1
  %25 = load double, double* %24, align 8
  store double %25, double* %21, align 8
  %26 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %5, align 8
  %27 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %26, i32 0, i32 2
  %28 = load double, double* %27, align 8
  %29 = fadd double %28, 1.400000e+01
  store double %29, double* %9, align 8
  store i32 0, i32* %10, align 4
  br label %30

30:                                               ; preds = %54, %3
  %31 = load i32, i32* %10, align 4
  %32 = load %struct.boundingboxStem*, %struct.boundingboxStem** %6, align 8
  %33 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %32, i32 0, i32 5
  %34 = load i32, i32* %33, align 8
  %35 = icmp slt i32 %31, %34
  br i1 %35, label %36, label %57

36:                                               ; preds = %30
  %37 = load %struct.boundingboxStem*, %struct.boundingboxStem** %6, align 8
  %38 = load i32, i32* %10, align 4
  %39 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %40 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %41 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  call void @getBulgeCoordinates(%struct.boundingboxStem* noundef %37, i32 noundef %38, double* noundef %39, double* noundef %40, double* noundef %41)
  %42 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %43 = load double, double* %9, align 8
  %44 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %45 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %46 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %47 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %48 = call signext i16 @TestCircleTriangle(double* noundef %42, double noundef %43, double* noundef %44, double* noundef %45, double* noundef %46, double* noundef %47)
  %49 = icmp ne i16 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %36
  %51 = load i32, i32* %10, align 4
  %52 = load i32*, i32** %7, align 8
  store i32 %51, i32* %52, align 4
  store i16 1, i16* %4, align 2
  br label %58

53:                                               ; preds = %36
  br label %54

54:                                               ; preds = %53
  %55 = load i32, i32* %10, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %10, align 4
  br label %30, !llvm.loop !73

57:                                               ; preds = %30
  store i16 0, i16* %4, align 2
  br label %58

58:                                               ; preds = %57, %50
  %59 = load i16, i16* %4, align 2
  ret i16 %59
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectStemBulges(%struct.boundingboxStem* noundef %0, %struct.boundingboxStem* noundef %1, i32* noundef %2) #0 {
  %4 = alloca i16, align 2
  %5 = alloca %struct.boundingboxStem*, align 8
  %6 = alloca %struct.boundingboxStem*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca [2 x double], align 16
  %9 = alloca [2 x double], align 16
  %10 = alloca [2 x double], align 16
  %11 = alloca [2 x double], align 16
  %12 = alloca double, align 8
  %13 = alloca i32, align 4
  %14 = alloca [2 x double], align 16
  %15 = alloca [2 x double], align 16
  %16 = alloca [2 x double], align 16
  store %struct.boundingboxStem* %0, %struct.boundingboxStem** %5, align 8
  store %struct.boundingboxStem* %1, %struct.boundingboxStem** %6, align 8
  store i32* %2, i32** %7, align 8
  %17 = load i32*, i32** %7, align 8
  store i32 -1, i32* %17, align 4
  %18 = load %struct.boundingboxStem*, %struct.boundingboxStem** %6, align 8
  %19 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %18, i32 0, i32 5
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %3
  store i16 0, i16* %4, align 2
  br label %268

23:                                               ; preds = %3
  %24 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %25 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %24, i32 0, i32 3
  %26 = getelementptr inbounds [2 x double], [2 x double]* %25, i64 0, i64 0
  %27 = load double, double* %26, align 8
  %28 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %29 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %28, i32 0, i32 4
  %30 = getelementptr inbounds [2 x double], [2 x double]* %29, i64 0, i64 0
  %31 = load double, double* %30, align 8
  %32 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %33 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %32, i32 0, i32 1
  %34 = getelementptr inbounds [2 x double], [2 x double]* %33, i64 0, i64 0
  %35 = load double, double* %34, align 8
  %36 = call double @llvm.fmuladd.f64(double %31, double %35, double %27)
  %37 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %38 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %37, i32 0, i32 4
  %39 = getelementptr inbounds [2 x double], [2 x double]* %38, i64 0, i64 1
  %40 = load double, double* %39, align 8
  %41 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %42 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %41, i32 0, i32 2
  %43 = getelementptr inbounds [2 x double], [2 x double]* %42, i64 0, i64 0
  %44 = load double, double* %43, align 8
  %45 = fneg double %40
  %46 = call double @llvm.fmuladd.f64(double %45, double %44, double %36)
  %47 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  store double %46, double* %47, align 16
  %48 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %49 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %48, i32 0, i32 3
  %50 = getelementptr inbounds [2 x double], [2 x double]* %49, i64 0, i64 1
  %51 = load double, double* %50, align 8
  %52 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %53 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %52, i32 0, i32 4
  %54 = getelementptr inbounds [2 x double], [2 x double]* %53, i64 0, i64 0
  %55 = load double, double* %54, align 8
  %56 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %57 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %56, i32 0, i32 1
  %58 = getelementptr inbounds [2 x double], [2 x double]* %57, i64 0, i64 1
  %59 = load double, double* %58, align 8
  %60 = call double @llvm.fmuladd.f64(double %55, double %59, double %51)
  %61 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %62 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %61, i32 0, i32 4
  %63 = getelementptr inbounds [2 x double], [2 x double]* %62, i64 0, i64 1
  %64 = load double, double* %63, align 8
  %65 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %66 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %65, i32 0, i32 2
  %67 = getelementptr inbounds [2 x double], [2 x double]* %66, i64 0, i64 1
  %68 = load double, double* %67, align 8
  %69 = fneg double %64
  %70 = call double @llvm.fmuladd.f64(double %69, double %68, double %60)
  %71 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 1
  store double %70, double* %71, align 8
  %72 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %73 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %72, i32 0, i32 3
  %74 = getelementptr inbounds [2 x double], [2 x double]* %73, i64 0, i64 0
  %75 = load double, double* %74, align 8
  %76 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %77 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %76, i32 0, i32 4
  %78 = getelementptr inbounds [2 x double], [2 x double]* %77, i64 0, i64 0
  %79 = load double, double* %78, align 8
  %80 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %81 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %80, i32 0, i32 1
  %82 = getelementptr inbounds [2 x double], [2 x double]* %81, i64 0, i64 0
  %83 = load double, double* %82, align 8
  %84 = fneg double %79
  %85 = call double @llvm.fmuladd.f64(double %84, double %83, double %75)
  %86 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %87 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %86, i32 0, i32 4
  %88 = getelementptr inbounds [2 x double], [2 x double]* %87, i64 0, i64 1
  %89 = load double, double* %88, align 8
  %90 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %91 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %90, i32 0, i32 2
  %92 = getelementptr inbounds [2 x double], [2 x double]* %91, i64 0, i64 0
  %93 = load double, double* %92, align 8
  %94 = fneg double %89
  %95 = call double @llvm.fmuladd.f64(double %94, double %93, double %85)
  %96 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  store double %95, double* %96, align 16
  %97 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %98 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %97, i32 0, i32 3
  %99 = getelementptr inbounds [2 x double], [2 x double]* %98, i64 0, i64 1
  %100 = load double, double* %99, align 8
  %101 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %102 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %101, i32 0, i32 4
  %103 = getelementptr inbounds [2 x double], [2 x double]* %102, i64 0, i64 0
  %104 = load double, double* %103, align 8
  %105 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %106 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %105, i32 0, i32 1
  %107 = getelementptr inbounds [2 x double], [2 x double]* %106, i64 0, i64 1
  %108 = load double, double* %107, align 8
  %109 = fneg double %104
  %110 = call double @llvm.fmuladd.f64(double %109, double %108, double %100)
  %111 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %112 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %111, i32 0, i32 4
  %113 = getelementptr inbounds [2 x double], [2 x double]* %112, i64 0, i64 1
  %114 = load double, double* %113, align 8
  %115 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %116 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %115, i32 0, i32 2
  %117 = getelementptr inbounds [2 x double], [2 x double]* %116, i64 0, i64 1
  %118 = load double, double* %117, align 8
  %119 = fneg double %114
  %120 = call double @llvm.fmuladd.f64(double %119, double %118, double %110)
  %121 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 1
  store double %120, double* %121, align 8
  %122 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %123 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %122, i32 0, i32 3
  %124 = getelementptr inbounds [2 x double], [2 x double]* %123, i64 0, i64 0
  %125 = load double, double* %124, align 8
  %126 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %127 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %126, i32 0, i32 4
  %128 = getelementptr inbounds [2 x double], [2 x double]* %127, i64 0, i64 0
  %129 = load double, double* %128, align 8
  %130 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %131 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %130, i32 0, i32 1
  %132 = getelementptr inbounds [2 x double], [2 x double]* %131, i64 0, i64 0
  %133 = load double, double* %132, align 8
  %134 = call double @llvm.fmuladd.f64(double %129, double %133, double %125)
  %135 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %136 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %135, i32 0, i32 4
  %137 = getelementptr inbounds [2 x double], [2 x double]* %136, i64 0, i64 1
  %138 = load double, double* %137, align 8
  %139 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %140 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %139, i32 0, i32 2
  %141 = getelementptr inbounds [2 x double], [2 x double]* %140, i64 0, i64 0
  %142 = load double, double* %141, align 8
  %143 = call double @llvm.fmuladd.f64(double %138, double %142, double %134)
  %144 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  store double %143, double* %144, align 16
  %145 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %146 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %145, i32 0, i32 3
  %147 = getelementptr inbounds [2 x double], [2 x double]* %146, i64 0, i64 1
  %148 = load double, double* %147, align 8
  %149 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %150 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %149, i32 0, i32 4
  %151 = getelementptr inbounds [2 x double], [2 x double]* %150, i64 0, i64 0
  %152 = load double, double* %151, align 8
  %153 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %154 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %153, i32 0, i32 1
  %155 = getelementptr inbounds [2 x double], [2 x double]* %154, i64 0, i64 1
  %156 = load double, double* %155, align 8
  %157 = call double @llvm.fmuladd.f64(double %152, double %156, double %148)
  %158 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %159 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %158, i32 0, i32 4
  %160 = getelementptr inbounds [2 x double], [2 x double]* %159, i64 0, i64 1
  %161 = load double, double* %160, align 8
  %162 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %163 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %162, i32 0, i32 2
  %164 = getelementptr inbounds [2 x double], [2 x double]* %163, i64 0, i64 1
  %165 = load double, double* %164, align 8
  %166 = call double @llvm.fmuladd.f64(double %161, double %165, double %157)
  %167 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 1
  store double %166, double* %167, align 8
  %168 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %169 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %168, i32 0, i32 3
  %170 = getelementptr inbounds [2 x double], [2 x double]* %169, i64 0, i64 0
  %171 = load double, double* %170, align 8
  %172 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %173 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %172, i32 0, i32 4
  %174 = getelementptr inbounds [2 x double], [2 x double]* %173, i64 0, i64 0
  %175 = load double, double* %174, align 8
  %176 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %177 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %176, i32 0, i32 1
  %178 = getelementptr inbounds [2 x double], [2 x double]* %177, i64 0, i64 0
  %179 = load double, double* %178, align 8
  %180 = fneg double %175
  %181 = call double @llvm.fmuladd.f64(double %180, double %179, double %171)
  %182 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %183 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %182, i32 0, i32 4
  %184 = getelementptr inbounds [2 x double], [2 x double]* %183, i64 0, i64 1
  %185 = load double, double* %184, align 8
  %186 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %187 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %186, i32 0, i32 2
  %188 = getelementptr inbounds [2 x double], [2 x double]* %187, i64 0, i64 0
  %189 = load double, double* %188, align 8
  %190 = call double @llvm.fmuladd.f64(double %185, double %189, double %181)
  %191 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  store double %190, double* %191, align 16
  %192 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %193 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %192, i32 0, i32 3
  %194 = getelementptr inbounds [2 x double], [2 x double]* %193, i64 0, i64 1
  %195 = load double, double* %194, align 8
  %196 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %197 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %196, i32 0, i32 4
  %198 = getelementptr inbounds [2 x double], [2 x double]* %197, i64 0, i64 0
  %199 = load double, double* %198, align 8
  %200 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %201 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %200, i32 0, i32 1
  %202 = getelementptr inbounds [2 x double], [2 x double]* %201, i64 0, i64 1
  %203 = load double, double* %202, align 8
  %204 = fneg double %199
  %205 = call double @llvm.fmuladd.f64(double %204, double %203, double %195)
  %206 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %207 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %206, i32 0, i32 4
  %208 = getelementptr inbounds [2 x double], [2 x double]* %207, i64 0, i64 1
  %209 = load double, double* %208, align 8
  %210 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %211 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %210, i32 0, i32 2
  %212 = getelementptr inbounds [2 x double], [2 x double]* %211, i64 0, i64 1
  %213 = load double, double* %212, align 8
  %214 = call double @llvm.fmuladd.f64(double %209, double %213, double %205)
  %215 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 1
  store double %214, double* %215, align 8
  store double 1.400000e+01, double* %12, align 8
  store i32 0, i32* %13, align 4
  br label %216

216:                                              ; preds = %264, %23
  %217 = load i32, i32* %13, align 4
  %218 = load %struct.boundingboxStem*, %struct.boundingboxStem** %6, align 8
  %219 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %218, i32 0, i32 5
  %220 = load i32, i32* %219, align 8
  %221 = icmp slt i32 %217, %220
  br i1 %221, label %222, label %267

222:                                              ; preds = %216
  %223 = load %struct.boundingboxStem*, %struct.boundingboxStem** %6, align 8
  %224 = load i32, i32* %13, align 4
  %225 = load double, double* %12, align 8
  %226 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %227 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %228 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  call void @getBulgeCoordinatesExtraDistance(%struct.boundingboxStem* noundef %223, i32 noundef %224, double noundef %225, double* noundef %226, double* noundef %227, double* noundef %228)
  %229 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %230 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %231 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %232 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %233 = call signext i16 @intersectLineSegments(double* noundef %229, double* noundef %230, double* noundef %231, double* noundef %232, double* noundef null)
  %234 = sext i16 %233 to i32
  %235 = icmp ne i32 %234, 0
  br i1 %235, label %260, label %236

236:                                              ; preds = %222
  %237 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %238 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %239 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %240 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %241 = call signext i16 @intersectLineSegments(double* noundef %237, double* noundef %238, double* noundef %239, double* noundef %240, double* noundef null)
  %242 = sext i16 %241 to i32
  %243 = icmp ne i32 %242, 0
  br i1 %243, label %260, label %244

244:                                              ; preds = %236
  %245 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %246 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %247 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %248 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %249 = call signext i16 @intersectLineSegments(double* noundef %245, double* noundef %246, double* noundef %247, double* noundef %248, double* noundef null)
  %250 = sext i16 %249 to i32
  %251 = icmp ne i32 %250, 0
  br i1 %251, label %260, label %252

252:                                              ; preds = %244
  %253 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %254 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %255 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %256 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %257 = call signext i16 @intersectLineSegments(double* noundef %253, double* noundef %254, double* noundef %255, double* noundef %256, double* noundef null)
  %258 = sext i16 %257 to i32
  %259 = icmp ne i32 %258, 0
  br i1 %259, label %260, label %263

260:                                              ; preds = %252, %244, %236, %222
  %261 = load i32, i32* %13, align 4
  %262 = load i32*, i32** %7, align 8
  store i32 %261, i32* %262, align 4
  store i16 1, i16* %4, align 2
  br label %268

263:                                              ; preds = %252
  br label %264

264:                                              ; preds = %263
  %265 = load i32, i32* %13, align 4
  %266 = add nsw i32 %265, 1
  store i32 %266, i32* %13, align 4
  br label %216, !llvm.loop !74

267:                                              ; preds = %216
  store i16 0, i16* %4, align 2
  br label %268

268:                                              ; preds = %267, %260, %22
  %269 = load i16, i16* %4, align 2
  ret i16 %269
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectBulgesBulges(%struct.boundingboxStem* noundef %0, %struct.boundingboxStem* noundef %1, i32* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i16, align 2
  %6 = alloca %struct.boundingboxStem*, align 8
  %7 = alloca %struct.boundingboxStem*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca double, align 8
  %11 = alloca i32, align 4
  %12 = alloca [2 x double], align 16
  %13 = alloca [2 x double], align 16
  %14 = alloca [2 x double], align 16
  %15 = alloca i32, align 4
  %16 = alloca [2 x double], align 16
  %17 = alloca [2 x double], align 16
  %18 = alloca [2 x double], align 16
  store %struct.boundingboxStem* %0, %struct.boundingboxStem** %6, align 8
  store %struct.boundingboxStem* %1, %struct.boundingboxStem** %7, align 8
  store i32* %2, i32** %8, align 8
  store i32* %3, i32** %9, align 8
  %19 = load i32*, i32** %8, align 8
  store i32 -1, i32* %19, align 4
  %20 = load i32*, i32** %9, align 8
  store i32 -1, i32* %20, align 4
  store double 7.000000e+00, double* %10, align 8
  store i32 0, i32* %11, align 4
  br label %21

21:                                               ; preds = %88, %4
  %22 = load i32, i32* %11, align 4
  %23 = load %struct.boundingboxStem*, %struct.boundingboxStem** %6, align 8
  %24 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %23, i32 0, i32 5
  %25 = load i32, i32* %24, align 8
  %26 = icmp slt i32 %22, %25
  br i1 %26, label %27, label %91

27:                                               ; preds = %21
  %28 = load %struct.boundingboxStem*, %struct.boundingboxStem** %6, align 8
  %29 = load i32, i32* %11, align 4
  %30 = load double, double* %10, align 8
  %31 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %32 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %33 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  call void @getBulgeCoordinatesExtraDistance(%struct.boundingboxStem* noundef %28, i32 noundef %29, double noundef %30, double* noundef %31, double* noundef %32, double* noundef %33)
  store i32 0, i32* %15, align 4
  br label %34

34:                                               ; preds = %84, %27
  %35 = load i32, i32* %15, align 4
  %36 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %37 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %36, i32 0, i32 5
  %38 = load i32, i32* %37, align 8
  %39 = icmp slt i32 %35, %38
  br i1 %39, label %40, label %87

40:                                               ; preds = %34
  %41 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %42 = load i32, i32* %15, align 4
  %43 = load double, double* %10, align 8
  %44 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %45 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %46 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 0
  call void @getBulgeCoordinatesExtraDistance(%struct.boundingboxStem* noundef %41, i32 noundef %42, double noundef %43, double* noundef %44, double* noundef %45, double* noundef %46)
  %47 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %48 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %49 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %50 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %51 = call signext i16 @intersectLineSegments(double* noundef %47, double* noundef %48, double* noundef %49, double* noundef %50, double* noundef null)
  %52 = sext i16 %51 to i32
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %78, label %54

54:                                               ; preds = %40
  %55 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %56 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %57 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %58 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 0
  %59 = call signext i16 @intersectLineSegments(double* noundef %55, double* noundef %56, double* noundef %57, double* noundef %58, double* noundef null)
  %60 = sext i16 %59 to i32
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %78, label %62

62:                                               ; preds = %54
  %63 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %64 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %65 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %66 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %67 = call signext i16 @intersectLineSegments(double* noundef %63, double* noundef %64, double* noundef %65, double* noundef %66, double* noundef null)
  %68 = sext i16 %67 to i32
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %78, label %70

70:                                               ; preds = %62
  %71 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %72 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %73 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %74 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 0
  %75 = call signext i16 @intersectLineSegments(double* noundef %71, double* noundef %72, double* noundef %73, double* noundef %74, double* noundef null)
  %76 = sext i16 %75 to i32
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %78, label %83

78:                                               ; preds = %70, %62, %54, %40
  %79 = load i32, i32* %11, align 4
  %80 = load i32*, i32** %8, align 8
  store i32 %79, i32* %80, align 4
  %81 = load i32, i32* %15, align 4
  %82 = load i32*, i32** %9, align 8
  store i32 %81, i32* %82, align 4
  store i16 1, i16* %5, align 2
  br label %92

83:                                               ; preds = %70
  br label %84

84:                                               ; preds = %83
  %85 = load i32, i32* %15, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %15, align 4
  br label %34, !llvm.loop !75

87:                                               ; preds = %34
  br label %88

88:                                               ; preds = %87
  %89 = load i32, i32* %11, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %11, align 4
  br label %21, !llvm.loop !76

91:                                               ; preds = %21
  store i16 0, i16* %5, align 2
  br label %92

92:                                               ; preds = %91, %78
  %93 = load i16, i16* %5, align 2
  ret i16 %93
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectLineSegments(double* noundef %0, double* noundef %1, double* noundef %2, double* noundef %3, double* noundef %4) #0 {
  %6 = alloca i16, align 2
  %7 = alloca double*, align 8
  %8 = alloca double*, align 8
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  %11 = alloca double*, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  %21 = alloca double, align 8
  %22 = alloca double, align 8
  %23 = alloca [2 x double], align 16
  %24 = alloca [2 x double], align 16
  store double* %0, double** %7, align 8
  store double* %1, double** %8, align 8
  store double* %2, double** %9, align 8
  store double* %3, double** %10, align 8
  store double* %4, double** %11, align 8
  %25 = load double*, double** %9, align 8
  %26 = getelementptr inbounds double, double* %25, i64 0
  %27 = load double, double* %26, align 8
  %28 = load double*, double** %7, align 8
  %29 = getelementptr inbounds double, double* %28, i64 0
  %30 = load double, double* %29, align 8
  %31 = fsub double %30, 0x3E7AD7F29ABCAF48
  %32 = fcmp olt double %27, %31
  br i1 %32, label %33, label %60

33:                                               ; preds = %5
  %34 = load double*, double** %9, align 8
  %35 = getelementptr inbounds double, double* %34, i64 0
  %36 = load double, double* %35, align 8
  %37 = load double*, double** %8, align 8
  %38 = getelementptr inbounds double, double* %37, i64 0
  %39 = load double, double* %38, align 8
  %40 = fsub double %39, 0x3E7AD7F29ABCAF48
  %41 = fcmp olt double %36, %40
  br i1 %41, label %42, label %60

42:                                               ; preds = %33
  %43 = load double*, double** %10, align 8
  %44 = getelementptr inbounds double, double* %43, i64 0
  %45 = load double, double* %44, align 8
  %46 = load double*, double** %7, align 8
  %47 = getelementptr inbounds double, double* %46, i64 0
  %48 = load double, double* %47, align 8
  %49 = fsub double %48, 0x3E7AD7F29ABCAF48
  %50 = fcmp olt double %45, %49
  br i1 %50, label %51, label %60

51:                                               ; preds = %42
  %52 = load double*, double** %10, align 8
  %53 = getelementptr inbounds double, double* %52, i64 0
  %54 = load double, double* %53, align 8
  %55 = load double*, double** %8, align 8
  %56 = getelementptr inbounds double, double* %55, i64 0
  %57 = load double, double* %56, align 8
  %58 = fsub double %57, 0x3E7AD7F29ABCAF48
  %59 = fcmp olt double %54, %58
  br i1 %59, label %96, label %60

60:                                               ; preds = %51, %42, %33, %5
  %61 = load double*, double** %9, align 8
  %62 = getelementptr inbounds double, double* %61, i64 0
  %63 = load double, double* %62, align 8
  %64 = load double*, double** %7, align 8
  %65 = getelementptr inbounds double, double* %64, i64 0
  %66 = load double, double* %65, align 8
  %67 = fadd double %66, 0x3E7AD7F29ABCAF48
  %68 = fcmp ogt double %63, %67
  br i1 %68, label %69, label %97

69:                                               ; preds = %60
  %70 = load double*, double** %9, align 8
  %71 = getelementptr inbounds double, double* %70, i64 0
  %72 = load double, double* %71, align 8
  %73 = load double*, double** %8, align 8
  %74 = getelementptr inbounds double, double* %73, i64 0
  %75 = load double, double* %74, align 8
  %76 = fadd double %75, 0x3E7AD7F29ABCAF48
  %77 = fcmp ogt double %72, %76
  br i1 %77, label %78, label %97

78:                                               ; preds = %69
  %79 = load double*, double** %10, align 8
  %80 = getelementptr inbounds double, double* %79, i64 0
  %81 = load double, double* %80, align 8
  %82 = load double*, double** %7, align 8
  %83 = getelementptr inbounds double, double* %82, i64 0
  %84 = load double, double* %83, align 8
  %85 = fadd double %84, 0x3E7AD7F29ABCAF48
  %86 = fcmp ogt double %81, %85
  br i1 %86, label %87, label %97

87:                                               ; preds = %78
  %88 = load double*, double** %10, align 8
  %89 = getelementptr inbounds double, double* %88, i64 0
  %90 = load double, double* %89, align 8
  %91 = load double*, double** %8, align 8
  %92 = getelementptr inbounds double, double* %91, i64 0
  %93 = load double, double* %92, align 8
  %94 = fadd double %93, 0x3E7AD7F29ABCAF48
  %95 = fcmp ogt double %90, %94
  br i1 %95, label %96, label %97

96:                                               ; preds = %87, %51
  store i16 0, i16* %6, align 2
  br label %482

97:                                               ; preds = %87, %78, %69, %60
  %98 = load double*, double** %9, align 8
  %99 = getelementptr inbounds double, double* %98, i64 1
  %100 = load double, double* %99, align 8
  %101 = load double*, double** %7, align 8
  %102 = getelementptr inbounds double, double* %101, i64 1
  %103 = load double, double* %102, align 8
  %104 = fsub double %103, 0x3E7AD7F29ABCAF48
  %105 = fcmp olt double %100, %104
  br i1 %105, label %106, label %133

106:                                              ; preds = %97
  %107 = load double*, double** %9, align 8
  %108 = getelementptr inbounds double, double* %107, i64 1
  %109 = load double, double* %108, align 8
  %110 = load double*, double** %8, align 8
  %111 = getelementptr inbounds double, double* %110, i64 1
  %112 = load double, double* %111, align 8
  %113 = fsub double %112, 0x3E7AD7F29ABCAF48
  %114 = fcmp olt double %109, %113
  br i1 %114, label %115, label %133

115:                                              ; preds = %106
  %116 = load double*, double** %10, align 8
  %117 = getelementptr inbounds double, double* %116, i64 1
  %118 = load double, double* %117, align 8
  %119 = load double*, double** %7, align 8
  %120 = getelementptr inbounds double, double* %119, i64 1
  %121 = load double, double* %120, align 8
  %122 = fsub double %121, 0x3E7AD7F29ABCAF48
  %123 = fcmp olt double %118, %122
  br i1 %123, label %124, label %133

124:                                              ; preds = %115
  %125 = load double*, double** %10, align 8
  %126 = getelementptr inbounds double, double* %125, i64 1
  %127 = load double, double* %126, align 8
  %128 = load double*, double** %8, align 8
  %129 = getelementptr inbounds double, double* %128, i64 1
  %130 = load double, double* %129, align 8
  %131 = fsub double %130, 0x3E7AD7F29ABCAF48
  %132 = fcmp olt double %127, %131
  br i1 %132, label %169, label %133

133:                                              ; preds = %124, %115, %106, %97
  %134 = load double*, double** %9, align 8
  %135 = getelementptr inbounds double, double* %134, i64 1
  %136 = load double, double* %135, align 8
  %137 = load double*, double** %7, align 8
  %138 = getelementptr inbounds double, double* %137, i64 1
  %139 = load double, double* %138, align 8
  %140 = fadd double %139, 0x3E7AD7F29ABCAF48
  %141 = fcmp ogt double %136, %140
  br i1 %141, label %142, label %170

142:                                              ; preds = %133
  %143 = load double*, double** %9, align 8
  %144 = getelementptr inbounds double, double* %143, i64 1
  %145 = load double, double* %144, align 8
  %146 = load double*, double** %8, align 8
  %147 = getelementptr inbounds double, double* %146, i64 1
  %148 = load double, double* %147, align 8
  %149 = fadd double %148, 0x3E7AD7F29ABCAF48
  %150 = fcmp ogt double %145, %149
  br i1 %150, label %151, label %170

151:                                              ; preds = %142
  %152 = load double*, double** %10, align 8
  %153 = getelementptr inbounds double, double* %152, i64 1
  %154 = load double, double* %153, align 8
  %155 = load double*, double** %7, align 8
  %156 = getelementptr inbounds double, double* %155, i64 1
  %157 = load double, double* %156, align 8
  %158 = fadd double %157, 0x3E7AD7F29ABCAF48
  %159 = fcmp ogt double %154, %158
  br i1 %159, label %160, label %170

160:                                              ; preds = %151
  %161 = load double*, double** %10, align 8
  %162 = getelementptr inbounds double, double* %161, i64 1
  %163 = load double, double* %162, align 8
  %164 = load double*, double** %8, align 8
  %165 = getelementptr inbounds double, double* %164, i64 1
  %166 = load double, double* %165, align 8
  %167 = fadd double %166, 0x3E7AD7F29ABCAF48
  %168 = fcmp ogt double %163, %167
  br i1 %168, label %169, label %170

169:                                              ; preds = %160, %124
  store i16 0, i16* %6, align 2
  br label %482

170:                                              ; preds = %160, %151, %142, %133
  %171 = load double*, double** %8, align 8
  %172 = getelementptr inbounds double, double* %171, i64 0
  %173 = load double, double* %172, align 8
  %174 = load double*, double** %7, align 8
  %175 = getelementptr inbounds double, double* %174, i64 0
  %176 = load double, double* %175, align 8
  %177 = fsub double %173, %176
  %178 = load double*, double** %9, align 8
  %179 = getelementptr inbounds double, double* %178, i64 1
  %180 = load double, double* %179, align 8
  %181 = load double*, double** %10, align 8
  %182 = getelementptr inbounds double, double* %181, i64 1
  %183 = load double, double* %182, align 8
  %184 = fsub double %180, %183
  %185 = load double*, double** %8, align 8
  %186 = getelementptr inbounds double, double* %185, i64 1
  %187 = load double, double* %186, align 8
  %188 = load double*, double** %7, align 8
  %189 = getelementptr inbounds double, double* %188, i64 1
  %190 = load double, double* %189, align 8
  %191 = fsub double %187, %190
  %192 = load double*, double** %9, align 8
  %193 = getelementptr inbounds double, double* %192, i64 0
  %194 = load double, double* %193, align 8
  %195 = load double*, double** %10, align 8
  %196 = getelementptr inbounds double, double* %195, i64 0
  %197 = load double, double* %196, align 8
  %198 = fsub double %194, %197
  %199 = fmul double %191, %198
  %200 = fneg double %199
  %201 = call double @llvm.fmuladd.f64(double %177, double %184, double %200)
  store double %201, double* %12, align 8
  %202 = load double, double* %12, align 8
  %203 = call double @llvm.fabs.f64(double %202)
  %204 = fcmp olt double %203, 0x3E7AD7F29ABCAF48
  br i1 %204, label %205, label %318

205:                                              ; preds = %170
  %206 = load double*, double** %8, align 8
  %207 = getelementptr inbounds double, double* %206, i64 0
  %208 = load double, double* %207, align 8
  %209 = load double*, double** %7, align 8
  %210 = getelementptr inbounds double, double* %209, i64 0
  %211 = load double, double* %210, align 8
  %212 = fsub double %208, %211
  store double %212, double* %15, align 8
  %213 = load double*, double** %8, align 8
  %214 = getelementptr inbounds double, double* %213, i64 1
  %215 = load double, double* %214, align 8
  %216 = load double*, double** %7, align 8
  %217 = getelementptr inbounds double, double* %216, i64 1
  %218 = load double, double* %217, align 8
  %219 = fsub double %215, %218
  store double %219, double* %16, align 8
  %220 = load double, double* %15, align 8
  %221 = call double @llvm.fabs.f64(double %220)
  %222 = fcmp ogt double %221, 0x3E7AD7F29ABCAF48
  br i1 %222, label %223, label %257

223:                                              ; preds = %205
  %224 = load double*, double** %9, align 8
  %225 = getelementptr inbounds double, double* %224, i64 0
  %226 = load double, double* %225, align 8
  %227 = load double*, double** %7, align 8
  %228 = getelementptr inbounds double, double* %227, i64 0
  %229 = load double, double* %228, align 8
  %230 = fsub double %226, %229
  %231 = load double, double* %15, align 8
  %232 = fdiv double %230, %231
  store double %232, double* %13, align 8
  %233 = load double*, double** %7, align 8
  %234 = getelementptr inbounds double, double* %233, i64 1
  %235 = load double, double* %234, align 8
  %236 = load double, double* %13, align 8
  %237 = load double, double* %16, align 8
  %238 = call double @llvm.fmuladd.f64(double %236, double %237, double %235)
  store double %238, double* %17, align 8
  %239 = load double, double* %17, align 8
  %240 = load double*, double** %9, align 8
  %241 = getelementptr inbounds double, double* %240, i64 1
  %242 = load double, double* %241, align 8
  %243 = fsub double %239, %242
  %244 = call double @llvm.fabs.f64(double %243)
  %245 = fcmp ogt double %244, 0x3E7AD7F29ABCAF48
  br i1 %245, label %246, label %247

246:                                              ; preds = %223
  store i16 0, i16* %6, align 2
  br label %482

247:                                              ; preds = %223
  %248 = load double*, double** %10, align 8
  %249 = getelementptr inbounds double, double* %248, i64 0
  %250 = load double, double* %249, align 8
  %251 = load double*, double** %7, align 8
  %252 = getelementptr inbounds double, double* %251, i64 0
  %253 = load double, double* %252, align 8
  %254 = fsub double %250, %253
  %255 = load double, double* %15, align 8
  %256 = fdiv double %254, %255
  store double %256, double* %14, align 8
  br label %291

257:                                              ; preds = %205
  %258 = load double*, double** %9, align 8
  %259 = getelementptr inbounds double, double* %258, i64 1
  %260 = load double, double* %259, align 8
  %261 = load double*, double** %7, align 8
  %262 = getelementptr inbounds double, double* %261, i64 1
  %263 = load double, double* %262, align 8
  %264 = fsub double %260, %263
  %265 = load double, double* %16, align 8
  %266 = fdiv double %264, %265
  store double %266, double* %13, align 8
  %267 = load double*, double** %7, align 8
  %268 = getelementptr inbounds double, double* %267, i64 0
  %269 = load double, double* %268, align 8
  %270 = load double, double* %13, align 8
  %271 = load double, double* %15, align 8
  %272 = call double @llvm.fmuladd.f64(double %270, double %271, double %269)
  store double %272, double* %18, align 8
  %273 = load double, double* %18, align 8
  %274 = load double*, double** %9, align 8
  %275 = getelementptr inbounds double, double* %274, i64 0
  %276 = load double, double* %275, align 8
  %277 = fsub double %273, %276
  %278 = call double @llvm.fabs.f64(double %277)
  %279 = fcmp ogt double %278, 0x3E7AD7F29ABCAF48
  br i1 %279, label %280, label %281

280:                                              ; preds = %257
  store i16 0, i16* %6, align 2
  br label %482

281:                                              ; preds = %257
  %282 = load double*, double** %10, align 8
  %283 = getelementptr inbounds double, double* %282, i64 1
  %284 = load double, double* %283, align 8
  %285 = load double*, double** %7, align 8
  %286 = getelementptr inbounds double, double* %285, i64 1
  %287 = load double, double* %286, align 8
  %288 = fsub double %284, %287
  %289 = load double, double* %16, align 8
  %290 = fdiv double %288, %289
  store double %290, double* %14, align 8
  br label %291

291:                                              ; preds = %281, %247
  %292 = load double, double* %13, align 8
  %293 = fcmp ole double 0.000000e+00, %292
  br i1 %293, label %294, label %297

294:                                              ; preds = %291
  %295 = load double, double* %13, align 8
  %296 = fcmp ole double %295, 1.000000e+00
  br i1 %296, label %303, label %297

297:                                              ; preds = %294, %291
  %298 = load double, double* %14, align 8
  %299 = fcmp ole double 0.000000e+00, %298
  br i1 %299, label %300, label %304

300:                                              ; preds = %297
  %301 = load double, double* %14, align 8
  %302 = fcmp ole double %301, 1.000000e+00
  br i1 %302, label %303, label %304

303:                                              ; preds = %300, %294
  store i16 1, i16* %6, align 2
  br label %482

304:                                              ; preds = %300, %297
  %305 = load double, double* %13, align 8
  %306 = fcmp olt double %305, 0.000000e+00
  br i1 %306, label %307, label %310

307:                                              ; preds = %304
  %308 = load double, double* %14, align 8
  %309 = fcmp olt double 1.000000e+00, %308
  br i1 %309, label %316, label %310

310:                                              ; preds = %307, %304
  %311 = load double, double* %14, align 8
  %312 = fcmp olt double %311, 0.000000e+00
  br i1 %312, label %313, label %317

313:                                              ; preds = %310
  %314 = load double, double* %13, align 8
  %315 = fcmp olt double 1.000000e+00, %314
  br i1 %315, label %316, label %317

316:                                              ; preds = %313, %307
  store i16 1, i16* %6, align 2
  br label %482

317:                                              ; preds = %313, %310
  br label %481

318:                                              ; preds = %170
  %319 = load double*, double** %9, align 8
  %320 = getelementptr inbounds double, double* %319, i64 0
  %321 = load double, double* %320, align 8
  %322 = load double*, double** %10, align 8
  %323 = getelementptr inbounds double, double* %322, i64 0
  %324 = load double, double* %323, align 8
  %325 = fsub double %321, %324
  %326 = load double*, double** %7, align 8
  %327 = getelementptr inbounds double, double* %326, i64 1
  %328 = load double, double* %327, align 8
  %329 = load double*, double** %9, align 8
  %330 = getelementptr inbounds double, double* %329, i64 1
  %331 = load double, double* %330, align 8
  %332 = fsub double %328, %331
  %333 = load double*, double** %9, align 8
  %334 = getelementptr inbounds double, double* %333, i64 1
  %335 = load double, double* %334, align 8
  %336 = load double*, double** %10, align 8
  %337 = getelementptr inbounds double, double* %336, i64 1
  %338 = load double, double* %337, align 8
  %339 = fsub double %335, %338
  %340 = load double*, double** %7, align 8
  %341 = getelementptr inbounds double, double* %340, i64 0
  %342 = load double, double* %341, align 8
  %343 = load double*, double** %9, align 8
  %344 = getelementptr inbounds double, double* %343, i64 0
  %345 = load double, double* %344, align 8
  %346 = fsub double %342, %345
  %347 = fmul double %339, %346
  %348 = fneg double %347
  %349 = call double @llvm.fmuladd.f64(double %325, double %332, double %348)
  store double %349, double* %19, align 8
  %350 = load double*, double** %7, align 8
  %351 = getelementptr inbounds double, double* %350, i64 0
  %352 = load double, double* %351, align 8
  %353 = load double*, double** %9, align 8
  %354 = getelementptr inbounds double, double* %353, i64 0
  %355 = load double, double* %354, align 8
  %356 = fsub double %352, %355
  %357 = load double*, double** %8, align 8
  %358 = getelementptr inbounds double, double* %357, i64 1
  %359 = load double, double* %358, align 8
  %360 = load double*, double** %7, align 8
  %361 = getelementptr inbounds double, double* %360, i64 1
  %362 = load double, double* %361, align 8
  %363 = fsub double %359, %362
  %364 = load double*, double** %7, align 8
  %365 = getelementptr inbounds double, double* %364, i64 1
  %366 = load double, double* %365, align 8
  %367 = load double*, double** %9, align 8
  %368 = getelementptr inbounds double, double* %367, i64 1
  %369 = load double, double* %368, align 8
  %370 = fsub double %366, %369
  %371 = load double*, double** %8, align 8
  %372 = getelementptr inbounds double, double* %371, i64 0
  %373 = load double, double* %372, align 8
  %374 = load double*, double** %7, align 8
  %375 = getelementptr inbounds double, double* %374, i64 0
  %376 = load double, double* %375, align 8
  %377 = fsub double %373, %376
  %378 = fmul double %370, %377
  %379 = fneg double %378
  %380 = call double @llvm.fmuladd.f64(double %356, double %363, double %379)
  store double %380, double* %20, align 8
  %381 = load double, double* %19, align 8
  %382 = load double, double* %12, align 8
  %383 = fdiv double %381, %382
  store double %383, double* %21, align 8
  %384 = load double, double* %20, align 8
  %385 = load double, double* %12, align 8
  %386 = fdiv double %384, %385
  store double %386, double* %22, align 8
  %387 = load double, double* %21, align 8
  %388 = fcmp ole double 0.000000e+00, %387
  br i1 %388, label %389, label %480

389:                                              ; preds = %318
  %390 = load double, double* %21, align 8
  %391 = fcmp ole double %390, 1.000000e+00
  br i1 %391, label %392, label %480

392:                                              ; preds = %389
  %393 = load double, double* %22, align 8
  %394 = fcmp ole double 0.000000e+00, %393
  br i1 %394, label %395, label %480

395:                                              ; preds = %392
  %396 = load double, double* %22, align 8
  %397 = fcmp ole double %396, 1.000000e+00
  br i1 %397, label %398, label %480

398:                                              ; preds = %395
  %399 = load double*, double** %7, align 8
  %400 = getelementptr inbounds double, double* %399, i64 0
  %401 = load double, double* %400, align 8
  %402 = load double, double* %21, align 8
  %403 = load double*, double** %8, align 8
  %404 = getelementptr inbounds double, double* %403, i64 0
  %405 = load double, double* %404, align 8
  %406 = load double*, double** %7, align 8
  %407 = getelementptr inbounds double, double* %406, i64 0
  %408 = load double, double* %407, align 8
  %409 = fsub double %405, %408
  %410 = call double @llvm.fmuladd.f64(double %402, double %409, double %401)
  %411 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  store double %410, double* %411, align 16
  %412 = load double*, double** %7, align 8
  %413 = getelementptr inbounds double, double* %412, i64 1
  %414 = load double, double* %413, align 8
  %415 = load double, double* %21, align 8
  %416 = load double*, double** %8, align 8
  %417 = getelementptr inbounds double, double* %416, i64 1
  %418 = load double, double* %417, align 8
  %419 = load double*, double** %7, align 8
  %420 = getelementptr inbounds double, double* %419, i64 1
  %421 = load double, double* %420, align 8
  %422 = fsub double %418, %421
  %423 = call double @llvm.fmuladd.f64(double %415, double %422, double %414)
  %424 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 1
  store double %423, double* %424, align 8
  %425 = load double*, double** %9, align 8
  %426 = getelementptr inbounds double, double* %425, i64 0
  %427 = load double, double* %426, align 8
  %428 = load double, double* %22, align 8
  %429 = load double*, double** %10, align 8
  %430 = getelementptr inbounds double, double* %429, i64 0
  %431 = load double, double* %430, align 8
  %432 = load double*, double** %9, align 8
  %433 = getelementptr inbounds double, double* %432, i64 0
  %434 = load double, double* %433, align 8
  %435 = fsub double %431, %434
  %436 = call double @llvm.fmuladd.f64(double %428, double %435, double %427)
  %437 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  store double %436, double* %437, align 16
  %438 = load double*, double** %9, align 8
  %439 = getelementptr inbounds double, double* %438, i64 1
  %440 = load double, double* %439, align 8
  %441 = load double, double* %22, align 8
  %442 = load double*, double** %10, align 8
  %443 = getelementptr inbounds double, double* %442, i64 1
  %444 = load double, double* %443, align 8
  %445 = load double*, double** %9, align 8
  %446 = getelementptr inbounds double, double* %445, i64 1
  %447 = load double, double* %446, align 8
  %448 = fsub double %444, %447
  %449 = call double @llvm.fmuladd.f64(double %441, double %448, double %440)
  %450 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 1
  store double %449, double* %450, align 8
  %451 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  %452 = load double, double* %451, align 16
  %453 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  %454 = load double, double* %453, align 16
  %455 = fsub double %452, %454
  %456 = call double @llvm.fabs.f64(double %455)
  %457 = fcmp olt double %456, 0x3E7AD7F29ABCAF48
  br i1 %457, label %458, label %479

458:                                              ; preds = %398
  %459 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 1
  %460 = load double, double* %459, align 8
  %461 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 1
  %462 = load double, double* %461, align 8
  %463 = fsub double %460, %462
  %464 = call double @llvm.fabs.f64(double %463)
  %465 = fcmp olt double %464, 0x3E7AD7F29ABCAF48
  br i1 %465, label %466, label %479

466:                                              ; preds = %458
  %467 = load double*, double** %11, align 8
  %468 = icmp ne double* %467, null
  br i1 %468, label %469, label %478

469:                                              ; preds = %466
  %470 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  %471 = load double, double* %470, align 16
  %472 = load double*, double** %11, align 8
  %473 = getelementptr inbounds double, double* %472, i64 0
  store double %471, double* %473, align 8
  %474 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 1
  %475 = load double, double* %474, align 8
  %476 = load double*, double** %11, align 8
  %477 = getelementptr inbounds double, double* %476, i64 1
  store double %475, double* %477, align 8
  br label %478

478:                                              ; preds = %469, %466
  store i16 1, i16* %6, align 2
  br label %482

479:                                              ; preds = %458, %398
  br label %480

480:                                              ; preds = %479, %395, %392, %389, %318
  br label %481

481:                                              ; preds = %480, %317
  store i16 0, i16* %6, align 2
  br label %482

482:                                              ; preds = %481, %478, %316, %303, %280, %246, %169, %96
  %483 = load i16, i16* %6, align 2
  ret i16 %483
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectCircleCircle(double* noundef %0, double noundef %1, double* noundef %2, double noundef %3) #0 {
  %5 = alloca double*, align 8
  %6 = alloca double, align 8
  %7 = alloca double*, align 8
  %8 = alloca double, align 8
  %9 = alloca [2 x double], align 16
  %10 = alloca double, align 8
  %11 = alloca i16, align 2
  store double* %0, double** %5, align 8
  store double %1, double* %6, align 8
  store double* %2, double** %7, align 8
  store double %3, double* %8, align 8
  %12 = load double*, double** %5, align 8
  %13 = load double*, double** %7, align 8
  %14 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  call void @vector(double* noundef %12, double* noundef %13, double* noundef %14)
  %15 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %16 = call double @vectorLength2D(double* noundef %15)
  store double %16, double* %10, align 8
  %17 = load double, double* %10, align 8
  %18 = load double, double* %6, align 8
  %19 = load double, double* %8, align 8
  %20 = fadd double %18, %19
  %21 = fcmp olt double %17, %20
  %22 = zext i1 %21 to i32
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* %11, align 2
  %24 = load i16, i16* %11, align 2
  ret i16 %24
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @ClosestPtPointOBB(%struct.boundingboxStem* noundef byval(%struct.boundingboxStem) align 8 %0, double* noundef %1, double* noundef %2) #0 {
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca [2 x double], align 16
  %7 = alloca [2 x double], align 16
  %8 = alloca [2 x double], align 16
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca i16, align 2
  %12 = alloca i16, align 2
  %13 = alloca i16, align 2
  %14 = alloca i16, align 2
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  store double* %1, double** %4, align 8
  store double* %2, double** %5, align 8
  %21 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %22 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 1
  %23 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 0
  %24 = load double, double* %23, align 8
  store double %24, double* %21, align 8
  %25 = getelementptr inbounds double, double* %21, i64 1
  %26 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 1
  %27 = getelementptr inbounds [2 x double], [2 x double]* %26, i64 0, i64 1
  %28 = load double, double* %27, align 8
  store double %28, double* %25, align 8
  %29 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %30 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 2
  %31 = getelementptr inbounds [2 x double], [2 x double]* %30, i64 0, i64 0
  %32 = load double, double* %31, align 8
  store double %32, double* %29, align 8
  %33 = getelementptr inbounds double, double* %29, i64 1
  %34 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 2
  %35 = getelementptr inbounds [2 x double], [2 x double]* %34, i64 0, i64 1
  %36 = load double, double* %35, align 8
  store double %36, double* %33, align 8
  %37 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 3
  %38 = getelementptr inbounds [2 x double], [2 x double]* %37, i64 0, i64 0
  %39 = load double*, double** %4, align 8
  %40 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  call void @vector(double* noundef %38, double* noundef %39, double* noundef %40)
  %41 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %42 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %43 = call double @scalarProduct2D(double* noundef %41, double* noundef %42)
  store double %43, double* %9, align 8
  %44 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %45 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %46 = call double @scalarProduct2D(double* noundef %44, double* noundef %45)
  store double %46, double* %10, align 8
  %47 = load double, double* %9, align 8
  %48 = fcmp olt double %47, 0.000000e+00
  %49 = zext i1 %48 to i64
  %50 = select i1 %48, i32 -1, i32 1
  %51 = trunc i32 %50 to i16
  store i16 %51, i16* %11, align 2
  %52 = load double, double* %10, align 8
  %53 = fcmp olt double %52, 0.000000e+00
  %54 = zext i1 %53 to i64
  %55 = select i1 %53, i32 -1, i32 1
  %56 = trunc i32 %55 to i16
  store i16 %56, i16* %12, align 2
  %57 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 4
  %58 = getelementptr inbounds [2 x double], [2 x double]* %57, i64 0, i64 0
  %59 = load double, double* %58, align 8
  %60 = fcmp olt double %59, 0.000000e+00
  %61 = zext i1 %60 to i64
  %62 = select i1 %60, i32 -1, i32 1
  %63 = trunc i32 %62 to i16
  store i16 %63, i16* %13, align 2
  %64 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 4
  %65 = getelementptr inbounds [2 x double], [2 x double]* %64, i64 0, i64 1
  %66 = load double, double* %65, align 8
  %67 = fcmp olt double %66, 0.000000e+00
  %68 = zext i1 %67 to i64
  %69 = select i1 %67, i32 -1, i32 1
  %70 = trunc i32 %69 to i16
  store i16 %70, i16* %14, align 2
  %71 = load i16, i16* %11, align 2
  %72 = sext i16 %71 to i32
  %73 = sitofp i32 %72 to double
  %74 = load double, double* %9, align 8
  %75 = fmul double %73, %74
  store double %75, double* %15, align 8
  %76 = load i16, i16* %12, align 2
  %77 = sext i16 %76 to i32
  %78 = sitofp i32 %77 to double
  %79 = load double, double* %10, align 8
  %80 = fmul double %78, %79
  store double %80, double* %16, align 8
  %81 = load i16, i16* %13, align 2
  %82 = sext i16 %81 to i32
  %83 = sitofp i32 %82 to double
  %84 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 4
  %85 = getelementptr inbounds [2 x double], [2 x double]* %84, i64 0, i64 0
  %86 = load double, double* %85, align 8
  %87 = fmul double %83, %86
  store double %87, double* %17, align 8
  %88 = load i16, i16* %14, align 2
  %89 = sext i16 %88 to i32
  %90 = sitofp i32 %89 to double
  %91 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 4
  %92 = getelementptr inbounds [2 x double], [2 x double]* %91, i64 0, i64 1
  %93 = load double, double* %92, align 8
  %94 = fmul double %90, %93
  store double %94, double* %18, align 8
  %95 = load double, double* %15, align 8
  %96 = load double, double* %17, align 8
  %97 = fcmp ogt double %95, %96
  br i1 %97, label %98, label %104

98:                                               ; preds = %3
  %99 = load i16, i16* %11, align 2
  %100 = sext i16 %99 to i32
  %101 = sitofp i32 %100 to double
  %102 = load double, double* %17, align 8
  %103 = fmul double %101, %102
  br label %110

104:                                              ; preds = %3
  %105 = load i16, i16* %11, align 2
  %106 = sext i16 %105 to i32
  %107 = sitofp i32 %106 to double
  %108 = load double, double* %15, align 8
  %109 = fmul double %107, %108
  br label %110

110:                                              ; preds = %104, %98
  %111 = phi double [ %103, %98 ], [ %109, %104 ]
  store double %111, double* %19, align 8
  %112 = load double, double* %16, align 8
  %113 = load double, double* %18, align 8
  %114 = fcmp ogt double %112, %113
  br i1 %114, label %115, label %121

115:                                              ; preds = %110
  %116 = load i16, i16* %12, align 2
  %117 = sext i16 %116 to i32
  %118 = sitofp i32 %117 to double
  %119 = load double, double* %18, align 8
  %120 = fmul double %118, %119
  br label %127

121:                                              ; preds = %110
  %122 = load i16, i16* %12, align 2
  %123 = sext i16 %122 to i32
  %124 = sitofp i32 %123 to double
  %125 = load double, double* %16, align 8
  %126 = fmul double %124, %125
  br label %127

127:                                              ; preds = %121, %115
  %128 = phi double [ %120, %115 ], [ %126, %121 ]
  store double %128, double* %20, align 8
  %129 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 3
  %130 = getelementptr inbounds [2 x double], [2 x double]* %129, i64 0, i64 0
  %131 = load double, double* %130, align 8
  %132 = load double, double* %19, align 8
  %133 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 1
  %134 = getelementptr inbounds [2 x double], [2 x double]* %133, i64 0, i64 0
  %135 = load double, double* %134, align 8
  %136 = call double @llvm.fmuladd.f64(double %132, double %135, double %131)
  %137 = load double, double* %20, align 8
  %138 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 2
  %139 = getelementptr inbounds [2 x double], [2 x double]* %138, i64 0, i64 0
  %140 = load double, double* %139, align 8
  %141 = call double @llvm.fmuladd.f64(double %137, double %140, double %136)
  %142 = load double*, double** %5, align 8
  %143 = getelementptr inbounds double, double* %142, i64 0
  store double %141, double* %143, align 8
  %144 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 3
  %145 = getelementptr inbounds [2 x double], [2 x double]* %144, i64 0, i64 1
  %146 = load double, double* %145, align 8
  %147 = load double, double* %19, align 8
  %148 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 1
  %149 = getelementptr inbounds [2 x double], [2 x double]* %148, i64 0, i64 1
  %150 = load double, double* %149, align 8
  %151 = call double @llvm.fmuladd.f64(double %147, double %150, double %146)
  %152 = load double, double* %20, align 8
  %153 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %0, i32 0, i32 2
  %154 = getelementptr inbounds [2 x double], [2 x double]* %153, i64 0, i64 1
  %155 = load double, double* %154, align 8
  %156 = call double @llvm.fmuladd.f64(double %152, double %155, double %151)
  %157 = load double*, double** %5, align 8
  %158 = getelementptr inbounds double, double* %157, i64 1
  store double %156, double* %158, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @vectorLength2DSquared(double* noundef %0) #0 {
  %2 = alloca double*, align 8
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  store double* %0, double** %2, align 8
  %5 = load double*, double** %2, align 8
  %6 = getelementptr inbounds double, double* %5, i64 0
  %7 = load double, double* %6, align 8
  store double %7, double* %3, align 8
  %8 = load double*, double** %2, align 8
  %9 = getelementptr inbounds double, double* %8, i64 1
  %10 = load double, double* %9, align 8
  store double %10, double* %4, align 8
  %11 = load double, double* %3, align 8
  %12 = load double, double* %3, align 8
  %13 = load double, double* %4, align 8
  %14 = load double, double* %4, align 8
  %15 = fmul double %13, %14
  %16 = call double @llvm.fmuladd.f64(double %11, double %12, double %15)
  ret double %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @TestCircleTriangle(double* noundef %0, double noundef %1, double* noundef %2, double* noundef %3, double* noundef %4, double* noundef %5) #0 {
  %7 = alloca double*, align 8
  %8 = alloca double, align 8
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  %11 = alloca double*, align 8
  %12 = alloca double*, align 8
  %13 = alloca [2 x double], align 16
  %14 = alloca i16, align 2
  store double* %0, double** %7, align 8
  store double %1, double* %8, align 8
  store double* %2, double** %9, align 8
  store double* %3, double** %10, align 8
  store double* %4, double** %11, align 8
  store double* %5, double** %12, align 8
  %15 = load double*, double** %7, align 8
  %16 = load double*, double** %9, align 8
  %17 = load double*, double** %10, align 8
  %18 = load double*, double** %11, align 8
  %19 = load double*, double** %12, align 8
  call void @ClosestPtPointBulge(double* noundef %15, double* noundef %16, double* noundef %17, double* noundef %18, double* noundef %19)
  %20 = load double*, double** %12, align 8
  %21 = load double*, double** %7, align 8
  %22 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  call void @vector(double* noundef %20, double* noundef %21, double* noundef %22)
  %23 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %24 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %25 = call double @scalarProduct2D(double* noundef %23, double* noundef %24)
  %26 = load double, double* %8, align 8
  %27 = load double, double* %8, align 8
  %28 = fmul double %26, %27
  %29 = fcmp ole double %25, %28
  %30 = zext i1 %29 to i32
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %14, align 2
  %32 = load i16, i16* %14, align 2
  ret i16 %32
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @ClosestPtPointBulge(double* noundef %0, double* noundef %1, double* noundef %2, double* noundef %3, double* noundef %4) #0 {
  %6 = alloca double*, align 8
  %7 = alloca double*, align 8
  %8 = alloca double*, align 8
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i16, align 2
  %13 = alloca i16, align 2
  %14 = alloca i16, align 2
  %15 = alloca i16, align 2
  %16 = alloca i16, align 2
  %17 = alloca i16, align 2
  store double* %0, double** %6, align 8
  store double* %1, double** %7, align 8
  store double* %2, double** %8, align 8
  store double* %3, double** %9, align 8
  store double* %4, double** %10, align 8
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0), i8** %11, align 8
  %18 = load double*, double** %7, align 8
  %19 = load double*, double** %8, align 8
  %20 = load double*, double** %9, align 8
  %21 = call signext i16 @isToTheRightPointPoint(double* noundef %18, double* noundef %19, double* noundef %20)
  store i16 %21, i16* %12, align 2
  %22 = load double*, double** %7, align 8
  %23 = load double*, double** %8, align 8
  %24 = load double*, double** %6, align 8
  %25 = call signext i16 @isToTheRightPointPoint(double* noundef %22, double* noundef %23, double* noundef %24)
  store i16 %25, i16* %13, align 2
  %26 = load i16, i16* %12, align 2
  %27 = sext i16 %26 to i32
  %28 = load i16, i16* %13, align 2
  %29 = sext i16 %28 to i32
  %30 = icmp ne i32 %27, %29
  br i1 %30, label %31, label %36

31:                                               ; preds = %5
  %32 = load double*, double** %7, align 8
  %33 = load double*, double** %8, align 8
  %34 = load double*, double** %6, align 8
  %35 = load double*, double** %10, align 8
  call void @projectPointOntoLine(double* noundef %32, double* noundef %33, double* noundef %34, double* noundef %35)
  br label %85

36:                                               ; preds = %5
  %37 = load double*, double** %8, align 8
  %38 = load double*, double** %9, align 8
  %39 = load double*, double** %7, align 8
  %40 = call signext i16 @isToTheRightPointPoint(double* noundef %37, double* noundef %38, double* noundef %39)
  store i16 %40, i16* %14, align 2
  %41 = load double*, double** %8, align 8
  %42 = load double*, double** %9, align 8
  %43 = load double*, double** %6, align 8
  %44 = call signext i16 @isToTheRightPointPoint(double* noundef %41, double* noundef %42, double* noundef %43)
  store i16 %44, i16* %15, align 2
  %45 = load i16, i16* %14, align 2
  %46 = sext i16 %45 to i32
  %47 = load i16, i16* %15, align 2
  %48 = sext i16 %47 to i32
  %49 = icmp ne i32 %46, %48
  br i1 %49, label %50, label %55

50:                                               ; preds = %36
  %51 = load double*, double** %8, align 8
  %52 = load double*, double** %9, align 8
  %53 = load double*, double** %6, align 8
  %54 = load double*, double** %10, align 8
  call void @projectPointOntoLine(double* noundef %51, double* noundef %52, double* noundef %53, double* noundef %54)
  br label %85

55:                                               ; preds = %36
  %56 = load double*, double** %9, align 8
  %57 = load double*, double** %7, align 8
  %58 = load double*, double** %8, align 8
  %59 = call signext i16 @isToTheRightPointPoint(double* noundef %56, double* noundef %57, double* noundef %58)
  store i16 %59, i16* %16, align 2
  %60 = load double*, double** %9, align 8
  %61 = load double*, double** %7, align 8
  %62 = load double*, double** %6, align 8
  %63 = call signext i16 @isToTheRightPointPoint(double* noundef %60, double* noundef %61, double* noundef %62)
  store i16 %63, i16* %17, align 2
  %64 = load i16, i16* %16, align 2
  %65 = sext i16 %64 to i32
  %66 = load i16, i16* %17, align 2
  %67 = sext i16 %66 to i32
  %68 = icmp ne i32 %65, %67
  br i1 %68, label %69, label %74

69:                                               ; preds = %55
  %70 = load double*, double** %9, align 8
  %71 = load double*, double** %7, align 8
  %72 = load double*, double** %6, align 8
  %73 = load double*, double** %10, align 8
  call void @projectPointOntoLine(double* noundef %70, double* noundef %71, double* noundef %72, double* noundef %73)
  br label %85

74:                                               ; preds = %55
  %75 = load double*, double** %6, align 8
  %76 = getelementptr inbounds double, double* %75, i64 0
  %77 = load double, double* %76, align 8
  %78 = load double*, double** %10, align 8
  %79 = getelementptr inbounds double, double* %78, i64 0
  store double %77, double* %79, align 8
  %80 = load double*, double** %6, align 8
  %81 = getelementptr inbounds double, double* %80, i64 1
  %82 = load double, double* %81, align 8
  %83 = load double*, double** %10, align 8
  %84 = getelementptr inbounds double, double* %83, i64 1
  store double %82, double* %84, align 8
  br label %85

85:                                               ; preds = %74, %69, %50, %31
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @projectPointOntoLine(double* noundef %0, double* noundef %1, double* noundef %2, double* noundef %3) #0 {
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca double*, align 8
  %8 = alloca double*, align 8
  %9 = alloca [2 x double], align 16
  %10 = alloca [2 x double], align 16
  %11 = alloca [2 x double], align 16
  %12 = alloca double, align 8
  store double* %0, double** %5, align 8
  store double* %1, double** %6, align 8
  store double* %2, double** %7, align 8
  store double* %3, double** %8, align 8
  %13 = load double*, double** %5, align 8
  %14 = load double*, double** %7, align 8
  %15 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  call void @vector(double* noundef %13, double* noundef %14, double* noundef %15)
  %16 = load double*, double** %5, align 8
  %17 = load double*, double** %6, align 8
  %18 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  call void @vector(double* noundef %16, double* noundef %17, double* noundef %18)
  %19 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %20 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 1
  %21 = load double, double* %20, align 8
  %22 = fneg double %21
  store double %22, double* %19, align 8
  %23 = getelementptr inbounds double, double* %19, i64 1
  %24 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %25 = load double, double* %24, align 16
  store double %25, double* %23, align 8
  %26 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 1
  %27 = load double, double* %26, align 8
  %28 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %29 = load double, double* %28, align 16
  %30 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 1
  %31 = load double, double* %30, align 8
  %32 = fmul double %29, %31
  %33 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %34 = load double, double* %33, align 16
  %35 = fdiv double %32, %34
  %36 = fsub double %27, %35
  %37 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 1
  %38 = load double, double* %37, align 8
  %39 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %40 = load double, double* %39, align 16
  %41 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 1
  %42 = load double, double* %41, align 8
  %43 = fmul double %40, %42
  %44 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %45 = load double, double* %44, align 16
  %46 = fdiv double %43, %45
  %47 = fsub double %38, %46
  %48 = fdiv double %36, %47
  store double %48, double* %12, align 8
  %49 = load double, double* %12, align 8
  %50 = fcmp olt double %49, 0.000000e+00
  br i1 %50, label %51, label %62

51:                                               ; preds = %4
  %52 = load double*, double** %5, align 8
  %53 = getelementptr inbounds double, double* %52, i64 0
  %54 = load double, double* %53, align 8
  %55 = load double*, double** %8, align 8
  %56 = getelementptr inbounds double, double* %55, i64 0
  store double %54, double* %56, align 8
  %57 = load double*, double** %5, align 8
  %58 = getelementptr inbounds double, double* %57, i64 1
  %59 = load double, double* %58, align 8
  %60 = load double*, double** %8, align 8
  %61 = getelementptr inbounds double, double* %60, i64 1
  store double %59, double* %61, align 8
  br label %96

62:                                               ; preds = %4
  %63 = load double, double* %12, align 8
  %64 = fcmp ogt double %63, 1.000000e+00
  br i1 %64, label %65, label %76

65:                                               ; preds = %62
  %66 = load double*, double** %6, align 8
  %67 = getelementptr inbounds double, double* %66, i64 0
  %68 = load double, double* %67, align 8
  %69 = load double*, double** %8, align 8
  %70 = getelementptr inbounds double, double* %69, i64 0
  store double %68, double* %70, align 8
  %71 = load double*, double** %6, align 8
  %72 = getelementptr inbounds double, double* %71, i64 1
  %73 = load double, double* %72, align 8
  %74 = load double*, double** %8, align 8
  %75 = getelementptr inbounds double, double* %74, i64 1
  store double %73, double* %75, align 8
  br label %95

76:                                               ; preds = %62
  %77 = load double*, double** %5, align 8
  %78 = getelementptr inbounds double, double* %77, i64 0
  %79 = load double, double* %78, align 8
  %80 = load double, double* %12, align 8
  %81 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %82 = load double, double* %81, align 16
  %83 = call double @llvm.fmuladd.f64(double %80, double %82, double %79)
  %84 = load double*, double** %8, align 8
  %85 = getelementptr inbounds double, double* %84, i64 0
  store double %83, double* %85, align 8
  %86 = load double*, double** %5, align 8
  %87 = getelementptr inbounds double, double* %86, i64 1
  %88 = load double, double* %87, align 8
  %89 = load double, double* %12, align 8
  %90 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 1
  %91 = load double, double* %90, align 8
  %92 = call double @llvm.fmuladd.f64(double %89, double %91, double %88)
  %93 = load double*, double** %8, align 8
  %94 = getelementptr inbounds double, double* %93, i64 1
  store double %92, double* %94, align 8
  br label %95

95:                                               ; preds = %76, %65
  br label %96

96:                                               ; preds = %95, %51
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.configtree** @constructReducedIntersectionPath(%struct.configtree* noundef %0, %struct.configtree* noundef %1, i32 noundef %2, i32* noundef %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  %9 = alloca %struct.configtree*, align 8
  %10 = alloca %struct.configtree**, align 8
  %11 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store %struct.configtree* %1, %struct.configtree** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32* %3, i32** %8, align 8
  %12 = load i32*, i32** %8, align 8
  store i32 1, i32* %12, align 4
  %13 = load %struct.configtree*, %struct.configtree** %6, align 8
  store %struct.configtree* %13, %struct.configtree** %9, align 8
  br label %14

14:                                               ; preds = %28, %4
  %15 = load %struct.configtree*, %struct.configtree** %9, align 8
  %16 = load %struct.configtree*, %struct.configtree** %5, align 8
  %17 = icmp ne %struct.configtree* %15, %16
  br i1 %17, label %18, label %29

18:                                               ; preds = %14
  %19 = load %struct.configtree*, %struct.configtree** %9, align 8
  %20 = call %struct.configtree* @getParent(%struct.configtree* noundef %19)
  store %struct.configtree* %20, %struct.configtree** %9, align 8
  %21 = load %struct.configtree*, %struct.configtree** %9, align 8
  %22 = call signext i16 @isStraightInteriorLoop(%struct.configtree* noundef %21)
  %23 = icmp ne i16 %22, 0
  br i1 %23, label %28, label %24

24:                                               ; preds = %18
  %25 = load i32*, i32** %8, align 8
  %26 = load i32, i32* %25, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %25, align 4
  br label %28

28:                                               ; preds = %24, %18
  br label %14, !llvm.loop !77

29:                                               ; preds = %14
  %30 = load i32, i32* %7, align 4
  switch i32 %30, label %40 [
    i32 1, label %31
    i32 2, label %31
    i32 5, label %31
  ]

31:                                               ; preds = %29, %29, %29
  %32 = load %struct.configtree*, %struct.configtree** %5, align 8
  %33 = call signext i16 @isStraightInteriorLoop(%struct.configtree* noundef %32)
  %34 = icmp ne i16 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %31
  %36 = load i32*, i32** %8, align 8
  %37 = load i32, i32* %36, align 4
  %38 = add nsw i32 %37, -1
  store i32 %38, i32* %36, align 4
  br label %39

39:                                               ; preds = %35, %31
  br label %41

40:                                               ; preds = %29
  br label %41

41:                                               ; preds = %40, %39
  %42 = load i32*, i32** %8, align 8
  %43 = load i32, i32* %42, align 4
  %44 = sext i32 %43 to i64
  %45 = mul i64 %44, 8
  %46 = trunc i64 %45 to i32
  %47 = call i8* @vrna_alloc(i32 noundef %46)
  %48 = bitcast i8* %47 to %struct.configtree**
  store %struct.configtree** %48, %struct.configtree*** %10, align 8
  %49 = load %struct.configtree*, %struct.configtree** %6, align 8
  store %struct.configtree* %49, %struct.configtree** %9, align 8
  %50 = load i32*, i32** %8, align 8
  %51 = load i32, i32* %50, align 4
  %52 = sub nsw i32 %51, 1
  store i32 %52, i32* %11, align 4
  br label %53

53:                                               ; preds = %75, %41
  %54 = load i32, i32* %11, align 4
  %55 = icmp sge i32 %54, 0
  br i1 %55, label %56, label %78

56:                                               ; preds = %53
  %57 = load i32, i32* %11, align 4
  %58 = load i32*, i32** %8, align 8
  %59 = load i32, i32* %58, align 4
  %60 = sub nsw i32 %59, 1
  %61 = icmp eq i32 %57, %60
  br i1 %61, label %66, label %62

62:                                               ; preds = %56
  %63 = load %struct.configtree*, %struct.configtree** %9, align 8
  %64 = call signext i16 @isStraightInteriorLoop(%struct.configtree* noundef %63)
  %65 = icmp ne i16 %64, 0
  br i1 %65, label %74, label %66

66:                                               ; preds = %62, %56
  %67 = load %struct.configtree*, %struct.configtree** %9, align 8
  %68 = load %struct.configtree**, %struct.configtree*** %10, align 8
  %69 = load i32, i32* %11, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds %struct.configtree*, %struct.configtree** %68, i64 %70
  store %struct.configtree* %67, %struct.configtree** %71, align 8
  %72 = load i32, i32* %11, align 4
  %73 = add nsw i32 %72, -1
  store i32 %73, i32* %11, align 4
  br label %74

74:                                               ; preds = %66, %62
  br label %75

75:                                               ; preds = %74
  %76 = load %struct.configtree*, %struct.configtree** %9, align 8
  %77 = call %struct.configtree* @getParent(%struct.configtree* noundef %76)
  store %struct.configtree* %77, %struct.configtree** %9, align 8
  br label %53, !llvm.loop !78

78:                                               ; preds = %53
  %79 = load %struct.configtree**, %struct.configtree*** %10, align 8
  ret %struct.configtree** %79
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getChildIndex(%struct.configtree* noundef %0, i32 noundef %1) #0 {
  %3 = alloca %struct.configtree*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %3, align 8
  store i32 %1, i32* %4, align 4
  %8 = load %struct.configtree*, %struct.configtree** %3, align 8
  %9 = getelementptr inbounds %struct.configtree, %struct.configtree* %8, i32 0, i32 3
  %10 = load i32, i32* %9, align 8
  %11 = sub nsw i32 %10, 1
  store i32 %11, i32* %5, align 4
  store i32 0, i32* %6, align 4
  br label %12

12:                                               ; preds = %30, %2
  %13 = load i32, i32* %6, align 4
  %14 = load %struct.configtree*, %struct.configtree** %3, align 8
  %15 = getelementptr inbounds %struct.configtree, %struct.configtree* %14, i32 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = icmp slt i32 %13, %16
  br i1 %17, label %18, label %33

18:                                               ; preds = %12
  %19 = load %struct.configtree*, %struct.configtree** %3, align 8
  %20 = load i32, i32* %6, align 4
  %21 = call %struct.configtree* @getChild(%struct.configtree* noundef %19, i32 noundef %20)
  store %struct.configtree* %21, %struct.configtree** %7, align 8
  %22 = load %struct.configtree*, %struct.configtree** %7, align 8
  %23 = call i32 @getNodeID(%struct.configtree* noundef %22)
  %24 = load i32, i32* %4, align 4
  %25 = icmp sgt i32 %23, %24
  br i1 %25, label %26, label %29

26:                                               ; preds = %18
  %27 = load i32, i32* %6, align 4
  %28 = sub nsw i32 %27, 1
  store i32 %28, i32* %5, align 4
  br label %33

29:                                               ; preds = %18
  br label %30

30:                                               ; preds = %29
  %31 = load i32, i32* %6, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %6, align 4
  br label %12, !llvm.loop !79

33:                                               ; preds = %26, %12
  %34 = load i32, i32* %5, align 4
  ret i32 %34
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @TENTATIVE2_getRotationSign(%struct.configtree** noundef %0, i32 noundef %1) #0 {
  %3 = alloca i16, align 2
  %4 = alloca %struct.configtree**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i16, align 2
  %8 = alloca double, align 8
  %9 = alloca %struct.configtree*, align 8
  %10 = alloca %struct.configtree*, align 8
  %11 = alloca i32, align 4
  store %struct.configtree** %0, %struct.configtree*** %4, align 8
  store i32 %1, i32* %5, align 4
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0), i8** %6, align 8
  store i16 0, i16* %7, align 2
  %12 = load i32, i32* %5, align 4
  %13 = icmp slt i32 %12, 2
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = load i16, i16* %7, align 2
  store i16 %15, i16* %3, align 2
  br label %53

16:                                               ; preds = %2
  store double 0.000000e+00, double* %8, align 8
  %17 = load %struct.configtree**, %struct.configtree*** %4, align 8
  %18 = getelementptr inbounds %struct.configtree*, %struct.configtree** %17, i64 0
  %19 = load %struct.configtree*, %struct.configtree** %18, align 8
  store %struct.configtree* %19, %struct.configtree** %9, align 8
  store i32 1, i32* %11, align 4
  br label %20

20:                                               ; preds = %38, %16
  %21 = load i32, i32* %11, align 4
  %22 = load i32, i32* %5, align 4
  %23 = icmp slt i32 %21, %22
  br i1 %23, label %24, label %41

24:                                               ; preds = %20
  %25 = load %struct.configtree**, %struct.configtree*** %4, align 8
  %26 = load i32, i32* %11, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds %struct.configtree*, %struct.configtree** %25, i64 %27
  %29 = load %struct.configtree*, %struct.configtree** %28, align 8
  store %struct.configtree* %29, %struct.configtree** %10, align 8
  %30 = load %struct.configtree*, %struct.configtree** %9, align 8
  %31 = load %struct.configtree*, %struct.configtree** %10, align 8
  %32 = call double @getChildAngle(%struct.configtree* noundef %30, %struct.configtree* noundef %31)
  %33 = load double, double* %8, align 8
  %34 = fadd double %33, %32
  store double %34, double* %8, align 8
  %35 = load double, double* %8, align 8
  %36 = fsub double %35, 0x400921FB54442D18
  store double %36, double* %8, align 8
  %37 = load %struct.configtree*, %struct.configtree** %10, align 8
  store %struct.configtree* %37, %struct.configtree** %9, align 8
  br label %38

38:                                               ; preds = %24
  %39 = load i32, i32* %11, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %11, align 4
  br label %20, !llvm.loop !80

41:                                               ; preds = %20
  %42 = load double, double* %8, align 8
  %43 = fcmp olt double %42, 0.000000e+00
  br i1 %43, label %44, label %45

44:                                               ; preds = %41
  store i16 1, i16* %7, align 2
  br label %51

45:                                               ; preds = %41
  %46 = load double, double* %8, align 8
  %47 = fcmp ogt double %46, 0.000000e+00
  br i1 %47, label %48, label %49

48:                                               ; preds = %45
  store i16 -1, i16* %7, align 2
  br label %50

49:                                               ; preds = %45
  store i16 0, i16* %7, align 2
  br label %50

50:                                               ; preds = %49, %48
  br label %51

51:                                               ; preds = %50, %44
  %52 = load i16, i16* %7, align 2
  store i16 %52, i16* %3, align 2
  br label %53

53:                                               ; preds = %51, %14
  %54 = load i16, i16* %3, align 2
  ret i16 %54
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @isInteriorLoop(%struct.configtree* noundef %0) #0 {
  %2 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %2, align 8
  %3 = load %struct.configtree*, %struct.configtree** %2, align 8
  %4 = call signext i16 @isExterior(%struct.configtree* noundef %3)
  %5 = icmp ne i16 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = load %struct.configtree*, %struct.configtree** %2, align 8
  %8 = getelementptr inbounds %struct.configtree, %struct.configtree* %7, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 1
  br label %11

11:                                               ; preds = %6, %1
  %12 = phi i1 [ false, %1 ], [ %10, %6 ]
  %13 = zext i1 %12 to i32
  %14 = trunc i32 %13 to i16
  ret i16 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.configtree* @fixIntersectionWithAncestor(%struct.configtree* noundef %0, %struct.configtree* noundef %1, %struct.configtree* noundef %2, i32 noundef %3, i16 noundef signext %4, i32 noundef %5, %struct.vrna_plot_options_puzzler_t* noundef %6) #0 {
  %8 = alloca %struct.configtree*, align 8
  %9 = alloca %struct.configtree*, align 8
  %10 = alloca %struct.configtree*, align 8
  %11 = alloca %struct.configtree*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i16, align 2
  %14 = alloca i32, align 4
  %15 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca double, align 8
  %18 = alloca i16, align 2
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  %21 = alloca i16, align 2
  %22 = alloca double*, align 8
  %23 = alloca double, align 8
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %9, align 8
  store %struct.configtree* %1, %struct.configtree** %10, align 8
  store %struct.configtree* %2, %struct.configtree** %11, align 8
  store i32 %3, i32* %12, align 4
  store i16 %4, i16* %13, align 2
  store i32 %5, i32* %14, align 4
  store %struct.vrna_plot_options_puzzler_t* %6, %struct.vrna_plot_options_puzzler_t** %15, align 8
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i8** %16, align 8
  %27 = load %struct.configtree*, %struct.configtree** %10, align 8
  %28 = load %struct.configtree*, %struct.configtree** %9, align 8
  %29 = icmp eq %struct.configtree* %27, %28
  br i1 %29, label %30, label %40

30:                                               ; preds = %7
  %31 = load i32, i32* %14, align 4
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %39, label %33

33:                                               ; preds = %30
  %34 = load i32, i32* %14, align 4
  %35 = icmp eq i32 %34, 2
  br i1 %35, label %39, label %36

36:                                               ; preds = %33
  %37 = load i32, i32* %14, align 4
  %38 = icmp eq i32 %37, 5
  br i1 %38, label %39, label %40

39:                                               ; preds = %36, %33, %30
  store %struct.configtree* null, %struct.configtree** %8, align 8
  br label %136

40:                                               ; preds = %36, %7
  %41 = load %struct.configtree*, %struct.configtree** %10, align 8
  %42 = call signext i16 @isInteriorLoop(%struct.configtree* noundef %41)
  %43 = icmp ne i16 %42, 0
  br i1 %43, label %44, label %63

44:                                               ; preds = %40
  %45 = load %struct.configtree*, %struct.configtree** %10, align 8
  %46 = call double @getChildAngleByIndex(%struct.configtree* noundef %45, i32 noundef 0)
  store double %46, double* %17, align 8
  store i16 0, i16* %18, align 2
  %47 = load double, double* %17, align 8
  %48 = fcmp ogt double %47, 0x400921FB54442D18
  br i1 %48, label %49, label %50

49:                                               ; preds = %44
  store i16 -1, i16* %18, align 2
  br label %55

50:                                               ; preds = %44
  %51 = load double, double* %17, align 8
  %52 = fcmp olt double %51, 0x400921FB54442D18
  br i1 %52, label %53, label %54

53:                                               ; preds = %50
  store i16 1, i16* %18, align 2
  br label %54

54:                                               ; preds = %53, %50
  br label %55

55:                                               ; preds = %54, %49
  %56 = load i16, i16* %13, align 2
  %57 = sext i16 %56 to i32
  %58 = load i16, i16* %18, align 2
  %59 = sext i16 %58 to i32
  %60 = icmp ne i32 %57, %59
  br i1 %60, label %61, label %62

61:                                               ; preds = %55
  store %struct.configtree* null, %struct.configtree** %8, align 8
  br label %136

62:                                               ; preds = %55
  br label %63

63:                                               ; preds = %62, %40
  %64 = load %struct.configtree*, %struct.configtree** %9, align 8
  %65 = load %struct.configtree*, %struct.configtree** %10, align 8
  %66 = load %struct.configtree*, %struct.configtree** %11, align 8
  %67 = load i32, i32* %14, align 4
  %68 = load i16, i16* %13, align 2
  %69 = call double @getRotationAngle(%struct.configtree* noundef %64, %struct.configtree* noundef %65, %struct.configtree* noundef %66, i32 noundef %67, i16 noundef signext %68)
  store double %69, double* %19, align 8
  %70 = load %struct.configtree*, %struct.configtree** %10, align 8
  %71 = call signext i16 @isInteriorLoop(%struct.configtree* noundef %70)
  %72 = icmp ne i16 %71, 0
  br i1 %72, label %73, label %84

73:                                               ; preds = %63
  %74 = load double, double* %17, align 8
  %75 = fsub double 0x400921FB54442D18, %74
  store double %75, double* %20, align 8
  %76 = load double, double* %19, align 8
  %77 = call double @llvm.fabs.f64(double %76)
  %78 = load double, double* %20, align 8
  %79 = call double @llvm.fabs.f64(double %78)
  %80 = fcmp ogt double %77, %79
  br i1 %80, label %81, label %83

81:                                               ; preds = %73
  %82 = load double, double* %20, align 8
  store double %82, double* %19, align 8
  br label %83

83:                                               ; preds = %81, %73
  br label %84

84:                                               ; preds = %83, %63
  store i16 0, i16* %21, align 2
  %85 = load double, double* %19, align 8
  %86 = fcmp une double %85, 0.000000e+00
  br i1 %86, label %87, label %130

87:                                               ; preds = %84
  %88 = load %struct.configtree*, %struct.configtree** %10, align 8
  %89 = getelementptr inbounds %struct.configtree, %struct.configtree* %88, i32 0, i32 3
  %90 = load i32, i32* %89, align 8
  %91 = add nsw i32 %90, 1
  %92 = sext i32 %91 to i64
  %93 = mul i64 %92, 8
  %94 = trunc i64 %93 to i32
  %95 = call i8* @vrna_alloc(i32 noundef %94)
  %96 = bitcast i8* %95 to double*
  store double* %96, double** %22, align 8
  %97 = load double, double* %19, align 8
  %98 = call double @llvm.fabs.f64(double %97)
  store double %98, double* %23, align 8
  store i32 -2, i32* %24, align 4
  store i32 -2, i32* %25, align 4
  %99 = load double, double* %19, align 8
  %100 = fcmp ogt double %99, 0.000000e+00
  br i1 %100, label %101, label %103

101:                                              ; preds = %87
  store i32 -1, i32* %24, align 4
  %102 = load i32, i32* %12, align 4
  store i32 %102, i32* %25, align 4
  br label %105

103:                                              ; preds = %87
  %104 = load i32, i32* %12, align 4
  store i32 %104, i32* %24, align 4
  store i32 -1, i32* %25, align 4
  br label %105

105:                                              ; preds = %103, %101
  %106 = load %struct.configtree*, %struct.configtree** %10, align 8
  %107 = load %struct.configtree*, %struct.configtree** %9, align 8
  %108 = load i32, i32* %24, align 4
  %109 = load i32, i32* %25, align 4
  %110 = load double, double* %23, align 8
  %111 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %15, align 8
  %112 = load double*, double** %22, align 8
  %113 = call double @calcDeltas(%struct.configtree* noundef %106, %struct.configtree* noundef %107, i32 noundef %108, i32 noundef %109, double noundef %110, %struct.vrna_plot_options_puzzler_t* noundef %111, double* noundef %112)
  %114 = load %struct.configtree*, %struct.configtree** %9, align 8
  %115 = call signext i16 @isExterior(%struct.configtree* noundef %114)
  %116 = sext i16 %115 to i32
  %117 = icmp ne i32 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %105
  br label %121

119:                                              ; preds = %105
  %120 = load i32, i32* %14, align 4
  br label %121

121:                                              ; preds = %119, %118
  %122 = phi i32 [ 11, %118 ], [ %120, %119 ]
  store i32 %122, i32* %26, align 4
  %123 = load %struct.configtree*, %struct.configtree** %10, align 8
  %124 = load double*, double** %22, align 8
  %125 = load i32, i32* %26, align 4
  %126 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %15, align 8
  %127 = call signext i16 @checkAndApplyConfigChanges(%struct.configtree* noundef %123, double* noundef %124, i32 noundef %125, %struct.vrna_plot_options_puzzler_t* noundef %126)
  store i16 %127, i16* %21, align 2
  %128 = load double*, double** %22, align 8
  %129 = bitcast double* %128 to i8*
  call void @free(i8* noundef %129) #7
  br label %130

130:                                              ; preds = %121, %84
  %131 = load i16, i16* %21, align 2
  %132 = icmp ne i16 %131, 0
  br i1 %132, label %133, label %135

133:                                              ; preds = %130
  %134 = load %struct.configtree*, %struct.configtree** %10, align 8
  store %struct.configtree* %134, %struct.configtree** %8, align 8
  br label %136

135:                                              ; preds = %130
  store %struct.configtree* null, %struct.configtree** %8, align 8
  br label %136

136:                                              ; preds = %135, %133, %61, %39
  %137 = load %struct.configtree*, %struct.configtree** %8, align 8
  ret %struct.configtree* %137
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @isMultiLoop(%struct.configtree* noundef %0) #0 {
  %2 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %2, align 8
  %3 = load %struct.configtree*, %struct.configtree** %2, align 8
  %4 = call signext i16 @isExterior(%struct.configtree* noundef %3)
  %5 = icmp ne i16 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = load %struct.configtree*, %struct.configtree** %2, align 8
  %8 = getelementptr inbounds %struct.configtree, %struct.configtree* %7, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp sgt i32 %9, 1
  br label %11

11:                                               ; preds = %6, %1
  %12 = phi i1 [ false, %1 ], [ %10, %6 ]
  %13 = zext i1 %12 to i32
  %14 = trunc i32 %13 to i16
  ret i16 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @isStraightInteriorLoop(%struct.configtree* noundef %0) #0 {
  %2 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %2, align 8
  %3 = load %struct.configtree*, %struct.configtree** %2, align 8
  %4 = call signext i16 @isInteriorLoop(%struct.configtree* noundef %3)
  %5 = sext i16 %4 to i32
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %11

7:                                                ; preds = %1
  %8 = load %struct.configtree*, %struct.configtree** %2, align 8
  %9 = call double @getChildAngleByIndex(%struct.configtree* noundef %8, i32 noundef 0)
  %10 = fcmp oeq double %9, 0x400921FB54442D18
  br label %11

11:                                               ; preds = %7, %1
  %12 = phi i1 [ false, %1 ], [ %10, %7 ]
  %13 = zext i1 %12 to i32
  %14 = trunc i32 %13 to i16
  ret i16 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @getChildAngleByIndex(%struct.configtree* noundef %0, i32 noundef %1) #0 {
  %3 = alloca %struct.configtree*, align 8
  %4 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load %struct.configtree*, %struct.configtree** %3, align 8
  %6 = load %struct.configtree*, %struct.configtree** %3, align 8
  %7 = load i32, i32* %4, align 4
  %8 = call %struct.configtree* @getChild(%struct.configtree* noundef %6, i32 noundef %7)
  %9 = call double @getChildAngle(%struct.configtree* noundef %5, %struct.configtree* noundef %8)
  ret double %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @getChildAngle(%struct.configtree* noundef %0, %struct.configtree* noundef %1) #0 {
  %3 = alloca %struct.configtree*, align 8
  %4 = alloca %struct.configtree*, align 8
  %5 = alloca [2 x double], align 16
  %6 = alloca [2 x double], align 16
  %7 = alloca [2 x double], align 16
  %8 = alloca [2 x double], align 16
  %9 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %3, align 8
  store %struct.configtree* %1, %struct.configtree** %4, align 8
  %10 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %11 = load %struct.configtree*, %struct.configtree** %3, align 8
  %12 = getelementptr inbounds %struct.configtree, %struct.configtree* %11, i32 0, i32 7
  %13 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %12, align 8
  %14 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %13, i32 0, i32 1
  %15 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %16 = load double, double* %15, align 8
  store double %16, double* %10, align 8
  %17 = getelementptr inbounds double, double* %10, i64 1
  %18 = load %struct.configtree*, %struct.configtree** %3, align 8
  %19 = getelementptr inbounds %struct.configtree, %struct.configtree* %18, i32 0, i32 7
  %20 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %19, align 8
  %21 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %20, i32 0, i32 1
  %22 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 1
  %23 = load double, double* %22, align 8
  store double %23, double* %17, align 8
  %24 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %25 = load %struct.configtree*, %struct.configtree** %3, align 8
  %26 = getelementptr inbounds %struct.configtree, %struct.configtree* %25, i32 0, i32 8
  %27 = load %struct.boundingboxStem*, %struct.boundingboxStem** %26, align 8
  %28 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %27, i32 0, i32 3
  %29 = getelementptr inbounds [2 x double], [2 x double]* %28, i64 0, i64 0
  %30 = load double, double* %29, align 8
  store double %30, double* %24, align 8
  %31 = getelementptr inbounds double, double* %24, i64 1
  %32 = load %struct.configtree*, %struct.configtree** %3, align 8
  %33 = getelementptr inbounds %struct.configtree, %struct.configtree* %32, i32 0, i32 8
  %34 = load %struct.boundingboxStem*, %struct.boundingboxStem** %33, align 8
  %35 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %34, i32 0, i32 3
  %36 = getelementptr inbounds [2 x double], [2 x double]* %35, i64 0, i64 1
  %37 = load double, double* %36, align 8
  store double %37, double* %31, align 8
  %38 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %39 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %40 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  call void @vector(double* noundef %38, double* noundef %39, double* noundef %40)
  %41 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %42 = load %struct.configtree*, %struct.configtree** %4, align 8
  %43 = getelementptr inbounds %struct.configtree, %struct.configtree* %42, i32 0, i32 7
  %44 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %43, align 8
  %45 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %44, i32 0, i32 1
  %46 = getelementptr inbounds [2 x double], [2 x double]* %45, i64 0, i64 0
  %47 = load double, double* %46, align 8
  store double %47, double* %41, align 8
  %48 = getelementptr inbounds double, double* %41, i64 1
  %49 = load %struct.configtree*, %struct.configtree** %4, align 8
  %50 = getelementptr inbounds %struct.configtree, %struct.configtree* %49, i32 0, i32 7
  %51 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %50, align 8
  %52 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %51, i32 0, i32 1
  %53 = getelementptr inbounds [2 x double], [2 x double]* %52, i64 0, i64 1
  %54 = load double, double* %53, align 8
  store double %54, double* %48, align 8
  %55 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %56 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %57 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %58 = call double @anglePtPtPt2D(double* noundef %55, double* noundef %56, double* noundef %57)
  store double %58, double* %9, align 8
  %59 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %60 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %61 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %62 = call signext i16 @isToTheRightPointVector(double* noundef %59, double* noundef %60, double* noundef %61)
  %63 = icmp ne i16 %62, 0
  br i1 %63, label %67, label %64

64:                                               ; preds = %2
  %65 = load double, double* %9, align 8
  %66 = fsub double 0x401921FB54442D18, %65
  store double %66, double* %9, align 8
  br label %67

67:                                               ; preds = %64, %2
  %68 = load double, double* %9, align 8
  ret double %68
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @anglePtPtPt2D(double* noundef %0, double* noundef %1, double* noundef %2) #0 {
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca [2 x double], align 16
  %8 = alloca [2 x double], align 16
  store double* %0, double** %4, align 8
  store double* %1, double** %5, align 8
  store double* %2, double** %6, align 8
  %9 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %10 = load double*, double** %4, align 8
  %11 = getelementptr inbounds double, double* %10, i64 0
  %12 = load double, double* %11, align 8
  %13 = load double*, double** %5, align 8
  %14 = getelementptr inbounds double, double* %13, i64 0
  %15 = load double, double* %14, align 8
  %16 = fsub double %12, %15
  store double %16, double* %9, align 8
  %17 = getelementptr inbounds double, double* %9, i64 1
  %18 = load double*, double** %4, align 8
  %19 = getelementptr inbounds double, double* %18, i64 1
  %20 = load double, double* %19, align 8
  %21 = load double*, double** %5, align 8
  %22 = getelementptr inbounds double, double* %21, i64 1
  %23 = load double, double* %22, align 8
  %24 = fsub double %20, %23
  store double %24, double* %17, align 8
  %25 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %26 = load double*, double** %6, align 8
  %27 = getelementptr inbounds double, double* %26, i64 0
  %28 = load double, double* %27, align 8
  %29 = load double*, double** %5, align 8
  %30 = getelementptr inbounds double, double* %29, i64 0
  %31 = load double, double* %30, align 8
  %32 = fsub double %28, %31
  store double %32, double* %25, align 8
  %33 = getelementptr inbounds double, double* %25, i64 1
  %34 = load double*, double** %6, align 8
  %35 = getelementptr inbounds double, double* %34, i64 1
  %36 = load double, double* %35, align 8
  %37 = load double*, double** %5, align 8
  %38 = getelementptr inbounds double, double* %37, i64 1
  %39 = load double, double* %38, align 8
  %40 = fsub double %36, %39
  store double %40, double* %33, align 8
  %41 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %42 = getelementptr inbounds [2 x double], [2 x double]* %8, i64 0, i64 0
  %43 = call double @angleBetweenVectors2D(double* noundef %41, double* noundef %42)
  ret double %43
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @isToTheRightPointVector(double* noundef %0, double* noundef %1, double* noundef %2) #0 {
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca [2 x double], align 16
  store double* %0, double** %4, align 8
  store double* %1, double** %5, align 8
  store double* %2, double** %6, align 8
  %8 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %9 = load double*, double** %4, align 8
  %10 = getelementptr inbounds double, double* %9, i64 0
  %11 = load double, double* %10, align 8
  %12 = load double*, double** %5, align 8
  %13 = getelementptr inbounds double, double* %12, i64 0
  %14 = load double, double* %13, align 8
  %15 = fadd double %11, %14
  store double %15, double* %8, align 8
  %16 = getelementptr inbounds double, double* %8, i64 1
  %17 = load double*, double** %4, align 8
  %18 = getelementptr inbounds double, double* %17, i64 1
  %19 = load double, double* %18, align 8
  %20 = load double*, double** %5, align 8
  %21 = getelementptr inbounds double, double* %20, i64 1
  %22 = load double, double* %21, align 8
  %23 = fadd double %19, %22
  store double %23, double* %16, align 8
  %24 = load double*, double** %4, align 8
  %25 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %26 = load double*, double** %6, align 8
  %27 = call signext i16 @isToTheRightPointPoint(double* noundef %24, double* noundef %25, double* noundef %26)
  ret i16 %27
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @angleBetweenVectors2D(double* noundef %0, double* noundef %1) #0 {
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca [2 x double], align 16
  %6 = alloca [2 x double], align 16
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  store double* %0, double** %3, align 8
  store double* %1, double** %4, align 8
  %9 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %10 = load double*, double** %3, align 8
  %11 = getelementptr inbounds double, double* %10, i64 0
  %12 = load double, double* %11, align 8
  store double %12, double* %9, align 8
  %13 = getelementptr inbounds double, double* %9, i64 1
  %14 = load double*, double** %3, align 8
  %15 = getelementptr inbounds double, double* %14, i64 1
  %16 = load double, double* %15, align 8
  store double %16, double* %13, align 8
  %17 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %18 = load double*, double** %4, align 8
  %19 = getelementptr inbounds double, double* %18, i64 0
  %20 = load double, double* %19, align 8
  store double %20, double* %17, align 8
  %21 = getelementptr inbounds double, double* %17, i64 1
  %22 = load double*, double** %4, align 8
  %23 = getelementptr inbounds double, double* %22, i64 1
  %24 = load double, double* %23, align 8
  store double %24, double* %21, align 8
  %25 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  call void @normalize(double* noundef %25)
  %26 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  call void @normalize(double* noundef %26)
  %27 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %28 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %29 = call double @scalarProduct2D(double* noundef %27, double* noundef %28)
  store double %29, double* %7, align 8
  store double 0.000000e+00, double* %8, align 8
  %30 = load double, double* %7, align 8
  %31 = fsub double %30, -1.000000e+00
  %32 = call double @llvm.fabs.f64(double %31)
  %33 = fcmp olt double %32, 0x3E7AD7F29ABCAF48
  br i1 %33, label %34, label %35

34:                                               ; preds = %2
  store double 0x400921FB54442D18, double* %8, align 8
  br label %45

35:                                               ; preds = %2
  %36 = load double, double* %7, align 8
  %37 = fsub double %36, 1.000000e+00
  %38 = call double @llvm.fabs.f64(double %37)
  %39 = fcmp olt double %38, 0x3E7AD7F29ABCAF48
  br i1 %39, label %40, label %41

40:                                               ; preds = %35
  store double 0.000000e+00, double* %8, align 8
  br label %44

41:                                               ; preds = %35
  %42 = load double, double* %7, align 8
  %43 = call double @acos(double noundef %42) #7
  store double %43, double* %8, align 8
  br label %44

44:                                               ; preds = %41, %40
  br label %45

45:                                               ; preds = %44, %34
  %46 = load double, double* %8, align 8
  ret double %46
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @normalize(double* noundef %0) #0 {
  %2 = alloca double*, align 8
  %3 = alloca double, align 8
  store double* %0, double** %2, align 8
  %4 = load double*, double** %2, align 8
  %5 = call double @vectorLength2D(double* noundef %4)
  store double %5, double* %3, align 8
  %6 = load double, double* %3, align 8
  %7 = load double*, double** %2, align 8
  %8 = getelementptr inbounds double, double* %7, i64 0
  %9 = load double, double* %8, align 8
  %10 = fdiv double %9, %6
  store double %10, double* %8, align 8
  %11 = load double, double* %3, align 8
  %12 = load double*, double** %2, align 8
  %13 = getelementptr inbounds double, double* %12, i64 1
  %14 = load double, double* %13, align 8
  %15 = fdiv double %14, %11
  store double %15, double* %13, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @getRotationAngle(%struct.configtree* noundef %0, %struct.configtree* noundef %1, %struct.configtree* noundef %2, i32 noundef %3, i16 noundef signext %4) #0 {
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca %struct.configtree*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i16, align 2
  %11 = alloca i8*, align 8
  %12 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %6, align 8
  store %struct.configtree* %1, %struct.configtree** %7, align 8
  store %struct.configtree* %2, %struct.configtree** %8, align 8
  store i32 %3, i32* %9, align 4
  store i16 %4, i16* %10, align 2
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i8** %11, align 8
  store double 0.000000e+00, double* %12, align 8
  %13 = load i32, i32* %9, align 4
  switch i32 %13, label %68 [
    i32 1, label %14
    i32 2, label %20
    i32 5, label %26
    i32 3, label %32
    i32 4, label %38
    i32 7, label %44
    i32 6, label %50
    i32 8, label %56
    i32 9, label %62
  ]

14:                                               ; preds = %5
  %15 = load %struct.configtree*, %struct.configtree** %6, align 8
  %16 = load %struct.configtree*, %struct.configtree** %7, align 8
  %17 = load %struct.configtree*, %struct.configtree** %8, align 8
  %18 = load i16, i16* %10, align 2
  %19 = call double @getRotationAngleLxL(%struct.configtree* noundef %15, %struct.configtree* noundef %16, %struct.configtree* noundef %17, i16 noundef signext %18)
  store double %19, double* %12, align 8
  br label %71

20:                                               ; preds = %5
  %21 = load %struct.configtree*, %struct.configtree** %6, align 8
  %22 = load %struct.configtree*, %struct.configtree** %7, align 8
  %23 = load %struct.configtree*, %struct.configtree** %8, align 8
  %24 = load i16, i16* %10, align 2
  %25 = call double @getRotationAngleLxS(%struct.configtree* noundef %21, %struct.configtree* noundef %22, %struct.configtree* noundef %23, i16 noundef signext %24)
  store double %25, double* %12, align 8
  br label %71

26:                                               ; preds = %5
  %27 = load %struct.configtree*, %struct.configtree** %6, align 8
  %28 = load %struct.configtree*, %struct.configtree** %7, align 8
  %29 = load %struct.configtree*, %struct.configtree** %8, align 8
  %30 = load i16, i16* %10, align 2
  %31 = call double @getRotationAngleLxB(%struct.configtree* noundef %27, %struct.configtree* noundef %28, %struct.configtree* noundef %29, i16 noundef signext %30)
  store double %31, double* %12, align 8
  br label %71

32:                                               ; preds = %5
  %33 = load %struct.configtree*, %struct.configtree** %6, align 8
  %34 = load %struct.configtree*, %struct.configtree** %7, align 8
  %35 = load %struct.configtree*, %struct.configtree** %8, align 8
  %36 = load i16, i16* %10, align 2
  %37 = call double @getRotationAngleSxL(%struct.configtree* noundef %33, %struct.configtree* noundef %34, %struct.configtree* noundef %35, i16 noundef signext %36)
  store double %37, double* %12, align 8
  br label %71

38:                                               ; preds = %5
  %39 = load %struct.configtree*, %struct.configtree** %6, align 8
  %40 = load %struct.configtree*, %struct.configtree** %7, align 8
  %41 = load %struct.configtree*, %struct.configtree** %8, align 8
  %42 = load i16, i16* %10, align 2
  %43 = call double @getRotationAngleSxS(%struct.configtree* noundef %39, %struct.configtree* noundef %40, %struct.configtree* noundef %41, i16 noundef signext %42)
  store double %43, double* %12, align 8
  br label %71

44:                                               ; preds = %5
  %45 = load %struct.configtree*, %struct.configtree** %6, align 8
  %46 = load %struct.configtree*, %struct.configtree** %7, align 8
  %47 = load %struct.configtree*, %struct.configtree** %8, align 8
  %48 = load i16, i16* %10, align 2
  %49 = call double @getRotationAngleSxB(%struct.configtree* noundef %45, %struct.configtree* noundef %46, %struct.configtree* noundef %47, i16 noundef signext %48)
  store double %49, double* %12, align 8
  br label %71

50:                                               ; preds = %5
  %51 = load %struct.configtree*, %struct.configtree** %6, align 8
  %52 = load %struct.configtree*, %struct.configtree** %7, align 8
  %53 = load %struct.configtree*, %struct.configtree** %8, align 8
  %54 = load i16, i16* %10, align 2
  %55 = call double @getRotationAngleBxL(%struct.configtree* noundef %51, %struct.configtree* noundef %52, %struct.configtree* noundef %53, i16 noundef signext %54)
  store double %55, double* %12, align 8
  br label %71

56:                                               ; preds = %5
  %57 = load %struct.configtree*, %struct.configtree** %6, align 8
  %58 = load %struct.configtree*, %struct.configtree** %7, align 8
  %59 = load %struct.configtree*, %struct.configtree** %8, align 8
  %60 = load i16, i16* %10, align 2
  %61 = call double @getRotationAngleBxS(%struct.configtree* noundef %57, %struct.configtree* noundef %58, %struct.configtree* noundef %59, i16 noundef signext %60)
  store double %61, double* %12, align 8
  br label %71

62:                                               ; preds = %5
  %63 = load %struct.configtree*, %struct.configtree** %6, align 8
  %64 = load %struct.configtree*, %struct.configtree** %7, align 8
  %65 = load %struct.configtree*, %struct.configtree** %8, align 8
  %66 = load i16, i16* %10, align 2
  %67 = call double @getRotationAngleBxB(%struct.configtree* noundef %63, %struct.configtree* noundef %64, %struct.configtree* noundef %65, i16 noundef signext %66)
  store double %67, double* %12, align 8
  br label %71

68:                                               ; preds = %5
  %69 = load i8*, i8** %11, align 8
  %70 = call i32 (i8*, ...) @printf(i8* noundef %69, i8* noundef getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0))
  br label %71

71:                                               ; preds = %68, %62, %56, %50, %44, %38, %32, %26, %20, %14
  %72 = load double, double* %12, align 8
  ret double %72
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @calcDeltas(%struct.configtree* noundef %0, %struct.configtree* noundef %1, i32 noundef %2, i32 noundef %3, double noundef %4, %struct.vrna_plot_options_puzzler_t* noundef %5, double* noundef %6) #0 {
  %8 = alloca double, align 8
  %9 = alloca %struct.configtree*, align 8
  %10 = alloca %struct.configtree*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double, align 8
  %14 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %15 = alloca double*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca double, align 8
  %20 = alloca double*, align 8
  %21 = alloca double*, align 8
  %22 = alloca double*, align 8
  %23 = alloca double*, align 8
  %24 = alloca i16*, align 8
  %25 = alloca i16*, align 8
  %26 = alloca double*, align 8
  %27 = alloca %struct.config*, align 8
  %28 = alloca i32, align 4
  %29 = alloca double, align 8
  %30 = alloca double, align 8
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca double, align 8
  %37 = alloca i16, align 2
  %38 = alloca %struct.configtree*, align 8
  %39 = alloca i16, align 2
  %40 = alloca i16, align 2
  %41 = alloca double, align 8
  %42 = alloca i16, align 2
  %43 = alloca i32, align 4
  %44 = alloca i16, align 2
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca double, align 8
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %9, align 8
  store %struct.configtree* %1, %struct.configtree** %10, align 8
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store double %4, double* %13, align 8
  store %struct.vrna_plot_options_puzzler_t* %5, %struct.vrna_plot_options_puzzler_t** %14, align 8
  store double* %6, double** %15, align 8
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0), i8** %16, align 8
  %53 = load double, double* %13, align 8
  %54 = fcmp olt double %53, 0.000000e+00
  br i1 %54, label %55, label %56

55:                                               ; preds = %7
  store double 0.000000e+00, double* %8, align 8
  br label %545

56:                                               ; preds = %7
  %57 = load %struct.configtree*, %struct.configtree** %9, align 8
  %58 = getelementptr inbounds %struct.configtree, %struct.configtree* %57, i32 0, i32 3
  %59 = load i32, i32* %58, align 8
  store i32 %59, i32* %17, align 4
  %60 = load i32, i32* %17, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %18, align 4
  %62 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %14, align 8
  %63 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %62, i32 0, i32 1
  %64 = load double, double* %63, align 8
  %65 = load %struct.configtree*, %struct.configtree** %9, align 8
  %66 = getelementptr inbounds %struct.configtree, %struct.configtree* %65, i32 0, i32 4
  %67 = load %struct.config*, %struct.config** %66, align 8
  %68 = getelementptr inbounds %struct.config, %struct.config* %67, i32 0, i32 0
  %69 = load double, double* %68, align 8
  %70 = fmul double 2.000000e+00, %69
  %71 = fdiv double %64, %70
  %72 = call double @asin(double noundef %71) #7
  store double %72, double* %19, align 8
  %73 = load i32, i32* %17, align 4
  %74 = sext i32 %73 to i64
  %75 = mul i64 %74, 8
  %76 = trunc i64 %75 to i32
  %77 = call i8* @vrna_alloc(i32 noundef %76)
  %78 = bitcast i8* %77 to double*
  store double* %78, double** %20, align 8
  %79 = load i32, i32* %17, align 4
  %80 = sext i32 %79 to i64
  %81 = mul i64 %80, 8
  %82 = trunc i64 %81 to i32
  %83 = call i8* @vrna_alloc(i32 noundef %82)
  %84 = bitcast i8* %83 to double*
  store double* %84, double** %21, align 8
  %85 = load i32, i32* %18, align 4
  %86 = sext i32 %85 to i64
  %87 = mul i64 %86, 8
  %88 = trunc i64 %87 to i32
  %89 = call i8* @vrna_alloc(i32 noundef %88)
  %90 = bitcast i8* %89 to double*
  store double* %90, double** %22, align 8
  %91 = load i32, i32* %18, align 4
  %92 = sext i32 %91 to i64
  %93 = mul i64 %92, 8
  %94 = trunc i64 %93 to i32
  %95 = call i8* @vrna_alloc(i32 noundef %94)
  %96 = bitcast i8* %95 to double*
  store double* %96, double** %23, align 8
  %97 = load i32, i32* %18, align 4
  %98 = sext i32 %97 to i64
  %99 = mul i64 %98, 2
  %100 = trunc i64 %99 to i32
  %101 = call i8* @vrna_alloc(i32 noundef %100)
  %102 = bitcast i8* %101 to i16*
  store i16* %102, i16** %24, align 8
  %103 = load i32, i32* %18, align 4
  %104 = sext i32 %103 to i64
  %105 = mul i64 %104, 2
  %106 = trunc i64 %105 to i32
  %107 = call i8* @vrna_alloc(i32 noundef %106)
  %108 = bitcast i8* %107 to i16*
  store i16* %108, i16** %25, align 8
  %109 = load i32, i32* %18, align 4
  %110 = sext i32 %109 to i64
  %111 = mul i64 %110, 8
  %112 = trunc i64 %111 to i32
  %113 = call i8* @vrna_alloc(i32 noundef %112)
  %114 = bitcast i8* %113 to double*
  store double* %114, double** %26, align 8
  %115 = load %struct.configtree*, %struct.configtree** %9, align 8
  %116 = getelementptr inbounds %struct.configtree, %struct.configtree* %115, i32 0, i32 4
  %117 = load %struct.config*, %struct.config** %116, align 8
  store %struct.config* %117, %struct.config** %27, align 8
  store i32 0, i32* %28, align 4
  br label %118

118:                                              ; preds = %132, %56
  %119 = load i32, i32* %28, align 4
  %120 = load %struct.config*, %struct.config** %27, align 8
  %121 = getelementptr inbounds %struct.config, %struct.config* %120, i32 0, i32 4
  %122 = load i32, i32* %121, align 8
  %123 = icmp slt i32 %119, %122
  br i1 %123, label %124, label %135

124:                                              ; preds = %118
  %125 = load %struct.config*, %struct.config** %27, align 8
  %126 = load i32, i32* %28, align 4
  %127 = call double @getArcAngle(%struct.config* noundef %125, i32 noundef %126)
  %128 = load double*, double** %26, align 8
  %129 = load i32, i32* %28, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds double, double* %128, i64 %130
  store double %127, double* %131, align 8
  br label %132

132:                                              ; preds = %124
  %133 = load i32, i32* %28, align 4
  %134 = add nsw i32 %133, 1
  store i32 %134, i32* %28, align 4
  br label %118, !llvm.loop !81

135:                                              ; preds = %118
  store i32 0, i32* %31, align 4
  br label %136

136:                                              ; preds = %153, %135
  %137 = load i32, i32* %31, align 4
  %138 = load i32, i32* %17, align 4
  %139 = icmp slt i32 %137, %138
  br i1 %139, label %140, label %156

140:                                              ; preds = %136
  %141 = load %struct.configtree*, %struct.configtree** %9, align 8
  %142 = load i32, i32* %31, align 4
  call void @getBoundingWedge(%struct.configtree* noundef %141, i32 noundef %142, double* noundef %29, double* noundef %30)
  %143 = load double, double* %29, align 8
  %144 = load double*, double** %20, align 8
  %145 = load i32, i32* %31, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds double, double* %144, i64 %146
  store double %143, double* %147, align 8
  %148 = load double, double* %30, align 8
  %149 = load double*, double** %21, align 8
  %150 = load i32, i32* %31, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds double, double* %149, i64 %151
  store double %148, double* %152, align 8
  br label %153

153:                                              ; preds = %140
  %154 = load i32, i32* %31, align 4
  %155 = add nsw i32 %154, 1
  store i32 %155, i32* %31, align 4
  br label %136, !llvm.loop !82

156:                                              ; preds = %136
  %157 = load double*, double** %20, align 8
  %158 = getelementptr inbounds double, double* %157, i64 0
  %159 = load double, double* %158, align 8
  %160 = load double, double* %19, align 8
  %161 = fadd double 0.000000e+00, %160
  %162 = fsub double %159, %161
  %163 = load double*, double** %22, align 8
  %164 = getelementptr inbounds double, double* %163, i64 0
  store double %162, double* %164, align 8
  store i32 1, i32* %32, align 4
  br label %165

165:                                              ; preds = %187, %156
  %166 = load i32, i32* %32, align 4
  %167 = load i32, i32* %18, align 4
  %168 = sub nsw i32 %167, 1
  %169 = icmp slt i32 %166, %168
  br i1 %169, label %170, label %190

170:                                              ; preds = %165
  %171 = load double*, double** %20, align 8
  %172 = load i32, i32* %32, align 4
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds double, double* %171, i64 %173
  %175 = load double, double* %174, align 8
  %176 = load double*, double** %21, align 8
  %177 = load i32, i32* %32, align 4
  %178 = sub nsw i32 %177, 1
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds double, double* %176, i64 %179
  %181 = load double, double* %180, align 8
  %182 = fsub double %175, %181
  %183 = load double*, double** %22, align 8
  %184 = load i32, i32* %32, align 4
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds double, double* %183, i64 %185
  store double %182, double* %186, align 8
  br label %187

187:                                              ; preds = %170
  %188 = load i32, i32* %32, align 4
  %189 = add nsw i32 %188, 1
  store i32 %189, i32* %32, align 4
  br label %165, !llvm.loop !83

190:                                              ; preds = %165
  %191 = load double, double* %19, align 8
  %192 = fsub double 0x401921FB54442D18, %191
  %193 = load double*, double** %21, align 8
  %194 = load i32, i32* %18, align 4
  %195 = sub nsw i32 %194, 2
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds double, double* %193, i64 %196
  %198 = load double, double* %197, align 8
  %199 = fsub double %192, %198
  %200 = load double*, double** %22, align 8
  %201 = load i32, i32* %18, align 4
  %202 = sub nsw i32 %201, 1
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds double, double* %200, i64 %203
  store double %199, double* %204, align 8
  store i32 0, i32* %33, align 4
  br label %205

205:                                              ; preds = %227, %190
  %206 = load i32, i32* %33, align 4
  %207 = load i32, i32* %18, align 4
  %208 = icmp slt i32 %206, %207
  br i1 %208, label %209, label %230

209:                                              ; preds = %205
  %210 = load double*, double** %22, align 8
  %211 = load i32, i32* %33, align 4
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds double, double* %210, i64 %212
  %214 = load double, double* %213, align 8
  %215 = load %struct.configtree*, %struct.configtree** %9, align 8
  %216 = getelementptr inbounds %struct.configtree, %struct.configtree* %215, i32 0, i32 4
  %217 = load %struct.config*, %struct.config** %216, align 8
  %218 = load i32, i32* %33, align 4
  %219 = call double @getArcAngle(%struct.config* noundef %217, i32 noundef %218)
  %220 = load double, double* %19, align 8
  %221 = call double @llvm.fmuladd.f64(double -2.000000e+00, double %220, double %219)
  %222 = call double @llvm.minnum.f64(double %214, double %221)
  %223 = load double*, double** %22, align 8
  %224 = load i32, i32* %33, align 4
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds double, double* %223, i64 %225
  store double %222, double* %226, align 8
  br label %227

227:                                              ; preds = %209
  %228 = load i32, i32* %33, align 4
  %229 = add nsw i32 %228, 1
  store i32 %229, i32* %33, align 4
  br label %205, !llvm.loop !84

230:                                              ; preds = %205
  store i32 0, i32* %34, align 4
  br label %231

231:                                              ; preds = %248, %230
  %232 = load i32, i32* %34, align 4
  %233 = load i32, i32* %18, align 4
  %234 = icmp slt i32 %232, %233
  br i1 %234, label %235, label %251

235:                                              ; preds = %231
  %236 = load double*, double** %23, align 8
  %237 = load i32, i32* %34, align 4
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds double, double* %236, i64 %238
  store double 0.000000e+00, double* %239, align 8
  %240 = load i16*, i16** %24, align 8
  %241 = load i32, i32* %34, align 4
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds i16, i16* %240, i64 %242
  store i16 -1, i16* %243, align 2
  %244 = load i16*, i16** %25, align 8
  %245 = load i32, i32* %34, align 4
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds i16, i16* %244, i64 %246
  store i16 -1, i16* %247, align 2
  br label %248

248:                                              ; preds = %235
  %249 = load i32, i32* %34, align 4
  %250 = add nsw i32 %249, 1
  store i32 %250, i32* %34, align 4
  br label %231, !llvm.loop !85

251:                                              ; preds = %231
  %252 = load i32, i32* %11, align 4
  store i32 %252, i32* %35, align 4
  br label %253

253:                                              ; preds = %275, %251
  %254 = load i32, i32* %35, align 4
  %255 = load i32, i32* %12, align 4
  %256 = icmp ne i32 %254, %255
  br i1 %256, label %257, label %276

257:                                              ; preds = %253
  %258 = load i16*, i16** %24, align 8
  %259 = load i32, i32* %35, align 4
  %260 = add nsw i32 %259, 1
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds i16, i16* %258, i64 %261
  store i16 1, i16* %262, align 2
  %263 = load i16*, i16** %25, align 8
  %264 = load i32, i32* %35, align 4
  %265 = add nsw i32 %264, 1
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds i16, i16* %263, i64 %266
  store i16 0, i16* %267, align 2
  %268 = load i32, i32* %35, align 4
  %269 = add nsw i32 %268, 1
  store i32 %269, i32* %35, align 4
  %270 = load i32, i32* %35, align 4
  %271 = load i32, i32* %18, align 4
  %272 = sub nsw i32 %271, 1
  %273 = icmp eq i32 %270, %272
  br i1 %273, label %274, label %275

274:                                              ; preds = %257
  store i32 -1, i32* %35, align 4
  br label %275

275:                                              ; preds = %274, %257
  br label %253, !llvm.loop !86

276:                                              ; preds = %253
  br label %277

277:                                              ; preds = %308, %276
  %278 = load i32, i32* %35, align 4
  %279 = load i32, i32* %11, align 4
  %280 = icmp ne i32 %278, %279
  br i1 %280, label %281, label %309

281:                                              ; preds = %277
  %282 = load i16*, i16** %24, align 8
  %283 = load i32, i32* %35, align 4
  %284 = add nsw i32 %283, 1
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds i16, i16* %282, i64 %285
  store i16 0, i16* %286, align 2
  %287 = load double*, double** %22, align 8
  %288 = load i32, i32* %35, align 4
  %289 = add nsw i32 %288, 1
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds double, double* %287, i64 %290
  %292 = load double, double* %291, align 8
  %293 = fcmp ogt double %292, 0.000000e+00
  %294 = zext i1 %293 to i32
  %295 = trunc i32 %294 to i16
  %296 = load i16*, i16** %25, align 8
  %297 = load i32, i32* %35, align 4
  %298 = add nsw i32 %297, 1
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds i16, i16* %296, i64 %299
  store i16 %295, i16* %300, align 2
  %301 = load i32, i32* %35, align 4
  %302 = add nsw i32 %301, 1
  store i32 %302, i32* %35, align 4
  %303 = load i32, i32* %35, align 4
  %304 = load i32, i32* %18, align 4
  %305 = sub nsw i32 %304, 1
  %306 = icmp eq i32 %303, %305
  br i1 %306, label %307, label %308

307:                                              ; preds = %281
  store i32 -1, i32* %35, align 4
  br label %308

308:                                              ; preds = %307, %281
  br label %277, !llvm.loop !87

309:                                              ; preds = %277
  %310 = load double, double* %13, align 8
  store double %310, double* %36, align 8
  %311 = load double, double* %36, align 8
  %312 = load i32, i32* %18, align 4
  %313 = load i16*, i16** %24, align 8
  %314 = load double*, double** %23, align 8
  call void @calcDeltasEquidistantIncrease(double noundef %311, i32 noundef %312, i16* noundef %313, double* noundef %314)
  %315 = load double, double* %36, align 8
  %316 = load i32, i32* %11, align 4
  %317 = load i32, i32* %12, align 4
  %318 = load i32, i32* %18, align 4
  %319 = load i16*, i16** %25, align 8
  %320 = load double*, double** %22, align 8
  %321 = load double*, double** %23, align 8
  %322 = call double @calcDeltasNearestNeighborsFirstDecrease(double noundef %315, i32 noundef %316, i32 noundef %317, i32 noundef %318, i16* noundef %319, double* noundef %320, double* noundef %321)
  store double %322, double* %36, align 8
  %323 = load double, double* %36, align 8
  %324 = fcmp une double %323, 0.000000e+00
  %325 = zext i1 %324 to i32
  %326 = trunc i32 %325 to i16
  store i16 %326, i16* %37, align 2
  %327 = load i16, i16* %37, align 2
  %328 = icmp ne i16 %327, 0
  br i1 %328, label %329, label %394

329:                                              ; preds = %309
  %330 = load %struct.configtree*, %struct.configtree** %9, align 8
  %331 = call %struct.configtree* @getParent(%struct.configtree* noundef %330)
  store %struct.configtree* %331, %struct.configtree** %38, align 8
  store i16 0, i16* %39, align 2
  br label %332

332:                                              ; preds = %378, %329
  %333 = load %struct.configtree*, %struct.configtree** %38, align 8
  %334 = load %struct.configtree*, %struct.configtree** %10, align 8
  %335 = icmp ne %struct.configtree* %333, %334
  br i1 %335, label %336, label %341

336:                                              ; preds = %332
  %337 = load %struct.configtree*, %struct.configtree** %38, align 8
  %338 = call signext i16 @isExterior(%struct.configtree* noundef %337)
  %339 = icmp ne i16 %338, 0
  %340 = xor i1 %339, true
  br label %341

341:                                              ; preds = %336, %332
  %342 = phi i1 [ false, %332 ], [ %340, %336 ]
  br i1 %342, label %343, label %381

343:                                              ; preds = %341
  %344 = load %struct.configtree*, %struct.configtree** %38, align 8
  %345 = call signext i16 @isMultiLoop(%struct.configtree* noundef %344)
  store i16 %345, i16* %40, align 2
  %346 = load i16, i16* %40, align 2
  %347 = icmp ne i16 %346, 0
  br i1 %347, label %348, label %349

348:                                              ; preds = %343
  store i16 1, i16* %39, align 2
  br label %381

349:                                              ; preds = %343
  %350 = load %struct.configtree*, %struct.configtree** %38, align 8
  %351 = getelementptr inbounds %struct.configtree, %struct.configtree* %350, i32 0, i32 4
  %352 = load %struct.config*, %struct.config** %351, align 8
  %353 = call double @getArcAngle(%struct.config* noundef %352, i32 noundef 0)
  store double %353, double* %41, align 8
  %354 = load double, double* %41, align 8
  %355 = fsub double %354, 0x400921FB54442D18
  %356 = call double @llvm.fabs.f64(double %355)
  %357 = fcmp olt double %356, 1.000000e-03
  br i1 %357, label %358, label %359

358:                                              ; preds = %349
  br label %377

359:                                              ; preds = %349
  %360 = load double, double* %41, align 8
  %361 = fcmp ogt double %360, 0x400921FB54442D18
  br i1 %361, label %362, label %367

362:                                              ; preds = %359
  %363 = load i32, i32* %11, align 4
  %364 = icmp eq i32 %363, 0
  br i1 %364, label %365, label %366

365:                                              ; preds = %362
  store i16 1, i16* %39, align 2
  br label %381

366:                                              ; preds = %362
  br label %376

367:                                              ; preds = %359
  %368 = load double, double* %41, align 8
  %369 = fcmp olt double %368, 0x400921FB54442D18
  br i1 %369, label %370, label %375

370:                                              ; preds = %367
  %371 = load i32, i32* %11, align 4
  %372 = icmp eq i32 %371, -1
  br i1 %372, label %373, label %374

373:                                              ; preds = %370
  store i16 1, i16* %39, align 2
  br label %381

374:                                              ; preds = %370
  br label %375

375:                                              ; preds = %374, %367
  br label %376

376:                                              ; preds = %375, %366
  br label %377

377:                                              ; preds = %376, %358
  br label %378

378:                                              ; preds = %377
  %379 = load %struct.configtree*, %struct.configtree** %38, align 8
  %380 = call %struct.configtree* @getParent(%struct.configtree* noundef %379)
  store %struct.configtree* %380, %struct.configtree** %38, align 8
  br label %332, !llvm.loop !88

381:                                              ; preds = %373, %365, %348, %341
  %382 = load i16, i16* %39, align 2
  %383 = icmp ne i16 %382, 0
  br i1 %383, label %393, label %384

384:                                              ; preds = %381
  %385 = load double, double* %36, align 8
  %386 = load i32, i32* %11, align 4
  %387 = load i32, i32* %12, align 4
  %388 = load i32, i32* %18, align 4
  %389 = load double*, double** %23, align 8
  %390 = load double*, double** %26, align 8
  %391 = load double, double* %19, align 8
  %392 = call double @calcDeltasMaximumFirstDecrease(double noundef %385, i32 noundef %386, i32 noundef %387, i32 noundef %388, double* noundef %389, double* noundef %390, double noundef %391)
  store double %392, double* %36, align 8
  br label %393

393:                                              ; preds = %384, %381
  br label %394

394:                                              ; preds = %393, %309
  %395 = load double, double* %36, align 8
  %396 = fmul double -1.000000e+00, %395
  %397 = load i32, i32* %18, align 4
  %398 = load i16*, i16** %24, align 8
  %399 = load double*, double** %23, align 8
  call void @calcDeltasEquidistantIncrease(double noundef %396, i32 noundef %397, i16* noundef %398, double* noundef %399)
  store i16 0, i16* %42, align 2
  %400 = load i16, i16* %42, align 2
  %401 = icmp ne i16 %400, 0
  br i1 %401, label %402, label %453

402:                                              ; preds = %394
  store i32 0, i32* %43, align 4
  br label %403

403:                                              ; preds = %449, %402
  %404 = load i32, i32* %43, align 4
  %405 = icmp slt i32 %404, 100
  br i1 %405, label %406, label %452

406:                                              ; preds = %403
  store i16 0, i16* %44, align 2
  store i32 0, i32* %45, align 4
  br label %407

407:                                              ; preds = %421, %406
  %408 = load i32, i32* %45, align 4
  %409 = load i32, i32* %18, align 4
  %410 = icmp slt i32 %408, %409
  br i1 %410, label %411, label %424

411:                                              ; preds = %407
  %412 = load double*, double** %23, align 8
  %413 = load i32, i32* %45, align 4
  %414 = sext i32 %413 to i64
  %415 = getelementptr inbounds double, double* %412, i64 %414
  %416 = load double, double* %415, align 8
  %417 = call double @llvm.fabs.f64(double %416)
  %418 = fcmp oge double %417, 1.000000e-03
  br i1 %418, label %419, label %420

419:                                              ; preds = %411
  store i16 1, i16* %44, align 2
  br label %424

420:                                              ; preds = %411
  br label %421

421:                                              ; preds = %420
  %422 = load i32, i32* %45, align 4
  %423 = add nsw i32 %422, 1
  store i32 %423, i32* %45, align 4
  br label %407, !llvm.loop !89

424:                                              ; preds = %419, %407
  %425 = load i16, i16* %44, align 2
  %426 = icmp ne i16 %425, 0
  br i1 %426, label %427, label %428

427:                                              ; preds = %424
  br label %452

428:                                              ; preds = %424
  store i32 0, i32* %46, align 4
  br label %429

429:                                              ; preds = %444, %428
  %430 = load i32, i32* %46, align 4
  %431 = load i32, i32* %18, align 4
  %432 = icmp slt i32 %430, %431
  br i1 %432, label %433, label %447

433:                                              ; preds = %429
  %434 = load double*, double** %23, align 8
  %435 = load i32, i32* %46, align 4
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds double, double* %434, i64 %436
  %438 = load double, double* %437, align 8
  %439 = fmul double 2.000000e+00, %438
  %440 = load double*, double** %23, align 8
  %441 = load i32, i32* %46, align 4
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds double, double* %440, i64 %442
  store double %439, double* %443, align 8
  br label %444

444:                                              ; preds = %433
  %445 = load i32, i32* %46, align 4
  %446 = add nsw i32 %445, 1
  store i32 %446, i32* %46, align 4
  br label %429, !llvm.loop !90

447:                                              ; preds = %429
  br label %448

448:                                              ; preds = %447
  br label %449

449:                                              ; preds = %448
  %450 = load i32, i32* %43, align 4
  %451 = add nsw i32 %450, 1
  store i32 %451, i32* %43, align 4
  br label %403, !llvm.loop !91

452:                                              ; preds = %427, %403
  br label %453

453:                                              ; preds = %452, %394
  store i32 0, i32* %47, align 4
  br label %454

454:                                              ; preds = %468, %453
  %455 = load i32, i32* %47, align 4
  %456 = load i32, i32* %18, align 4
  %457 = icmp slt i32 %455, %456
  br i1 %457, label %458, label %471

458:                                              ; preds = %454
  %459 = load double*, double** %23, align 8
  %460 = load i32, i32* %47, align 4
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds double, double* %459, i64 %461
  %463 = load double, double* %462, align 8
  %464 = load double*, double** %15, align 8
  %465 = load i32, i32* %47, align 4
  %466 = sext i32 %465 to i64
  %467 = getelementptr inbounds double, double* %464, i64 %466
  store double %463, double* %467, align 8
  br label %468

468:                                              ; preds = %458
  %469 = load i32, i32* %47, align 4
  %470 = add nsw i32 %469, 1
  store i32 %470, i32* %47, align 4
  br label %454, !llvm.loop !92

471:                                              ; preds = %454
  %472 = load double*, double** %20, align 8
  %473 = bitcast double* %472 to i8*
  call void @free(i8* noundef %473) #7
  %474 = load double*, double** %21, align 8
  %475 = bitcast double* %474 to i8*
  call void @free(i8* noundef %475) #7
  %476 = load double*, double** %22, align 8
  %477 = bitcast double* %476 to i8*
  call void @free(i8* noundef %477) #7
  %478 = load double*, double** %23, align 8
  %479 = bitcast double* %478 to i8*
  call void @free(i8* noundef %479) #7
  %480 = load i16*, i16** %24, align 8
  %481 = bitcast i16* %480 to i8*
  call void @free(i8* noundef %481) #7
  %482 = load i16*, i16** %25, align 8
  %483 = bitcast i16* %482 to i8*
  call void @free(i8* noundef %483) #7
  %484 = load double*, double** %26, align 8
  %485 = bitcast double* %484 to i8*
  call void @free(i8* noundef %485) #7
  store double 0.000000e+00, double* %48, align 8
  store i32 0, i32* %49, align 4
  br label %486

486:                                              ; preds = %498, %471
  %487 = load i32, i32* %49, align 4
  %488 = load i32, i32* %18, align 4
  %489 = icmp slt i32 %487, %488
  br i1 %489, label %490, label %501

490:                                              ; preds = %486
  %491 = load double*, double** %15, align 8
  %492 = load i32, i32* %49, align 4
  %493 = sext i32 %492 to i64
  %494 = getelementptr inbounds double, double* %491, i64 %493
  %495 = load double, double* %494, align 8
  %496 = load double, double* %48, align 8
  %497 = fadd double %496, %495
  store double %497, double* %48, align 8
  br label %498

498:                                              ; preds = %490
  %499 = load i32, i32* %49, align 4
  %500 = add nsw i32 %499, 1
  store i32 %500, i32* %49, align 4
  br label %486, !llvm.loop !93

501:                                              ; preds = %486
  %502 = load double, double* %48, align 8
  %503 = call double @llvm.fabs.f64(double %502)
  %504 = fcmp ogt double %503, 1.000000e-03
  br i1 %504, label %505, label %520

505:                                              ; preds = %501
  store i32 0, i32* %50, align 4
  br label %506

506:                                              ; preds = %515, %505
  %507 = load i32, i32* %50, align 4
  %508 = load i32, i32* %18, align 4
  %509 = icmp slt i32 %507, %508
  br i1 %509, label %510, label %518

510:                                              ; preds = %506
  %511 = load double*, double** %15, align 8
  %512 = load i32, i32* %50, align 4
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds double, double* %511, i64 %513
  store double 0.000000e+00, double* %514, align 8
  br label %515

515:                                              ; preds = %510
  %516 = load i32, i32* %50, align 4
  %517 = add nsw i32 %516, 1
  store i32 %517, i32* %50, align 4
  br label %506, !llvm.loop !94

518:                                              ; preds = %506
  %519 = load double, double* %13, align 8
  store double %519, double* %36, align 8
  br label %520

520:                                              ; preds = %518, %501
  %521 = load %struct.config*, %struct.config** %27, align 8
  %522 = load double*, double** %15, align 8
  %523 = call signext i16 @cfgIsValid(%struct.config* noundef %521, double* noundef %522)
  %524 = icmp ne i16 %523, 0
  br i1 %524, label %540, label %525

525:                                              ; preds = %520
  store i32 0, i32* %51, align 4
  br label %526

526:                                              ; preds = %535, %525
  %527 = load i32, i32* %51, align 4
  %528 = load i32, i32* %18, align 4
  %529 = icmp slt i32 %527, %528
  br i1 %529, label %530, label %538

530:                                              ; preds = %526
  %531 = load double*, double** %15, align 8
  %532 = load i32, i32* %51, align 4
  %533 = sext i32 %532 to i64
  %534 = getelementptr inbounds double, double* %531, i64 %533
  store double 0.000000e+00, double* %534, align 8
  br label %535

535:                                              ; preds = %530
  %536 = load i32, i32* %51, align 4
  %537 = add nsw i32 %536, 1
  store i32 %537, i32* %51, align 4
  br label %526, !llvm.loop !95

538:                                              ; preds = %526
  %539 = load double, double* %13, align 8
  store double %539, double* %36, align 8
  br label %540

540:                                              ; preds = %538, %520
  %541 = load double, double* %13, align 8
  %542 = load double, double* %36, align 8
  %543 = fsub double %541, %542
  store double %543, double* %52, align 8
  %544 = load double, double* %52, align 8
  store double %544, double* %8, align 8
  br label %545

545:                                              ; preds = %540, %55
  %546 = load double, double* %8, align 8
  ret double %546
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @checkAndApplyConfigChanges(%struct.configtree* noundef %0, double* noundef %1, i32 noundef %2, %struct.vrna_plot_options_puzzler_t* noundef %3) #0 {
  %5 = alloca i16, align 2
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca double*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca %struct.config*, align 8
  %12 = alloca i16, align 2
  %13 = alloca i32, align 4
  %14 = alloca i16, align 2
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %6, align 8
  store double* %1, double** %7, align 8
  store i32 %2, i32* %8, align 4
  store %struct.vrna_plot_options_puzzler_t* %3, %struct.vrna_plot_options_puzzler_t** %9, align 8
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.27, i64 0, i64 0), i8** %10, align 8
  %21 = load %struct.configtree*, %struct.configtree** %6, align 8
  %22 = getelementptr inbounds %struct.configtree, %struct.configtree* %21, i32 0, i32 4
  %23 = load %struct.config*, %struct.config** %22, align 8
  store %struct.config* %23, %struct.config** %11, align 8
  store i16 1, i16* %12, align 2
  %24 = load i16, i16* %12, align 2
  %25 = sext i16 %24 to i32
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %85

27:                                               ; preds = %4
  %28 = load double*, double** %7, align 8
  %29 = icmp ne double* %28, null
  br i1 %29, label %30, label %85

30:                                               ; preds = %27
  store i32 0, i32* %13, align 4
  br label %31

31:                                               ; preds = %81, %30
  %32 = load i32, i32* %13, align 4
  %33 = icmp slt i32 %32, 100
  br i1 %33, label %34, label %84

34:                                               ; preds = %31
  store i16 0, i16* %14, align 2
  store i32 0, i32* %15, align 4
  br label %35

35:                                               ; preds = %51, %34
  %36 = load i32, i32* %15, align 4
  %37 = load %struct.config*, %struct.config** %11, align 8
  %38 = getelementptr inbounds %struct.config, %struct.config* %37, i32 0, i32 4
  %39 = load i32, i32* %38, align 8
  %40 = icmp slt i32 %36, %39
  br i1 %40, label %41, label %54

41:                                               ; preds = %35
  %42 = load double*, double** %7, align 8
  %43 = load i32, i32* %15, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds double, double* %42, i64 %44
  %46 = load double, double* %45, align 8
  %47 = call double @llvm.fabs.f64(double %46)
  %48 = fcmp oge double %47, 1.000000e-03
  br i1 %48, label %49, label %50

49:                                               ; preds = %41
  store i16 1, i16* %14, align 2
  br label %54

50:                                               ; preds = %41
  br label %51

51:                                               ; preds = %50
  %52 = load i32, i32* %15, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %15, align 4
  br label %35, !llvm.loop !96

54:                                               ; preds = %49, %35
  %55 = load i16, i16* %14, align 2
  %56 = icmp ne i16 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  br label %84

58:                                               ; preds = %54
  store i32 0, i32* %16, align 4
  br label %59

59:                                               ; preds = %76, %58
  %60 = load i32, i32* %16, align 4
  %61 = load %struct.config*, %struct.config** %11, align 8
  %62 = getelementptr inbounds %struct.config, %struct.config* %61, i32 0, i32 4
  %63 = load i32, i32* %62, align 8
  %64 = icmp slt i32 %60, %63
  br i1 %64, label %65, label %79

65:                                               ; preds = %59
  %66 = load double*, double** %7, align 8
  %67 = load i32, i32* %16, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds double, double* %66, i64 %68
  %70 = load double, double* %69, align 8
  %71 = fmul double 2.000000e+00, %70
  %72 = load double*, double** %7, align 8
  %73 = load i32, i32* %16, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds double, double* %72, i64 %74
  store double %71, double* %75, align 8
  br label %76

76:                                               ; preds = %65
  %77 = load i32, i32* %16, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %16, align 4
  br label %59, !llvm.loop !97

79:                                               ; preds = %59
  br label %80

80:                                               ; preds = %79
  br label %81

81:                                               ; preds = %80
  %82 = load i32, i32* %13, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %13, align 4
  br label %31, !llvm.loop !98

84:                                               ; preds = %57, %31
  br label %85

85:                                               ; preds = %84, %27, %4
  %86 = load i32, i32* %8, align 4
  %87 = call i8* @intersectionTypeToString(i32 noundef %86)
  store i8* %87, i8** %17, align 8
  %88 = load %struct.config*, %struct.config** %11, align 8
  %89 = load double*, double** %7, align 8
  %90 = call signext i16 @cfgIsValid(%struct.config* noundef %88, double* noundef %89)
  %91 = icmp ne i16 %90, 0
  br i1 %91, label %92, label %107

92:                                               ; preds = %85
  %93 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %9, align 8
  %94 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %93, i32 0, i32 11
  %95 = load i32, i32* %94, align 8
  %96 = add nsw i32 %95, 1
  store i32 %96, i32* %94, align 8
  %97 = load %struct.config*, %struct.config** %11, align 8
  %98 = getelementptr inbounds %struct.config, %struct.config* %97, i32 0, i32 0
  %99 = load double, double* %98, align 8
  store double %99, double* %18, align 8
  store double -1.000000e+00, double* %19, align 8
  %100 = load %struct.configtree*, %struct.configtree** %6, align 8
  %101 = load double*, double** %7, align 8
  %102 = load double, double* %19, align 8
  %103 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %9, align 8
  call void @applyChangesToConfigAndBoundingBoxes(%struct.configtree* noundef %100, double* noundef %101, double noundef %102, %struct.vrna_plot_options_puzzler_t* noundef %103)
  %104 = load %struct.config*, %struct.config** %11, align 8
  %105 = getelementptr inbounds %struct.config, %struct.config* %104, i32 0, i32 0
  %106 = load double, double* %105, align 8
  store double %106, double* %20, align 8
  store i16 1, i16* %5, align 2
  br label %112

107:                                              ; preds = %85
  %108 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %9, align 8
  %109 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %108, i32 0, i32 11
  %110 = load i32, i32* %109, align 8
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %109, align 8
  store i16 0, i16* %5, align 2
  br label %112

112:                                              ; preds = %107, %92
  %113 = load i16, i16* %5, align 2
  ret i16 %113
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @getRotationAngleLxL(%struct.configtree* noundef %0, %struct.configtree* noundef %1, %struct.configtree* noundef %2, i16 noundef signext %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca i16, align 2
  %9 = alloca i8*, align 8
  %10 = alloca %struct.boundingboxLoop*, align 8
  %11 = alloca %struct.boundingboxLoop*, align 8
  %12 = alloca %struct.boundingboxLoop*, align 8
  %13 = alloca [2 x double], align 16
  %14 = alloca double, align 8
  %15 = alloca [2 x double], align 16
  %16 = alloca double, align 8
  %17 = alloca [2 x double], align 16
  %18 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store %struct.configtree* %1, %struct.configtree** %6, align 8
  store %struct.configtree* %2, %struct.configtree** %7, align 8
  store i16 %3, i16* %8, align 2
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0), i8** %9, align 8
  %19 = load %struct.configtree*, %struct.configtree** %5, align 8
  %20 = getelementptr inbounds %struct.configtree, %struct.configtree* %19, i32 0, i32 7
  %21 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %20, align 8
  store %struct.boundingboxLoop* %21, %struct.boundingboxLoop** %10, align 8
  %22 = load %struct.configtree*, %struct.configtree** %6, align 8
  %23 = getelementptr inbounds %struct.configtree, %struct.configtree* %22, i32 0, i32 7
  %24 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %23, align 8
  store %struct.boundingboxLoop* %24, %struct.boundingboxLoop** %11, align 8
  %25 = load %struct.configtree*, %struct.configtree** %7, align 8
  %26 = getelementptr inbounds %struct.configtree, %struct.configtree* %25, i32 0, i32 7
  %27 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %26, align 8
  store %struct.boundingboxLoop* %27, %struct.boundingboxLoop** %12, align 8
  %28 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %10, align 8
  %29 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  call void @getLBoxCenter(%struct.boundingboxLoop* noundef %28, double* noundef %29)
  %30 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %10, align 8
  %31 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %30, i32 0, i32 2
  %32 = load double, double* %31, align 8
  store double %32, double* %14, align 8
  %33 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %12, align 8
  %34 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  call void @getLBoxCenter(%struct.boundingboxLoop* noundef %33, double* noundef %34)
  %35 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %12, align 8
  %36 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %35, i32 0, i32 2
  %37 = load double, double* %36, align 8
  store double %37, double* %16, align 8
  %38 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %11, align 8
  %39 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  call void @getLBoxCenter(%struct.boundingboxLoop* noundef %38, double* noundef %39)
  %40 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %41 = load double, double* %14, align 8
  %42 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %43 = load double, double* %16, align 8
  %44 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %45 = load i16, i16* %8, align 2
  %46 = call double @fixIntersectionOfCircles(double* noundef %40, double noundef %41, double* noundef %42, double noundef %43, double* noundef %44, i16 noundef signext %45)
  store double %46, double* %18, align 8
  %47 = load double, double* %18, align 8
  ret double %47
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @getRotationAngleLxS(%struct.configtree* noundef %0, %struct.configtree* noundef %1, %struct.configtree* noundef %2, i16 noundef signext %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca i16, align 2
  %9 = alloca i8*, align 8
  %10 = alloca %struct.boundingboxStem*, align 8
  %11 = alloca %struct.boundingboxLoop*, align 8
  %12 = alloca %struct.boundingboxLoop*, align 8
  %13 = alloca i16, align 2
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store %struct.configtree* %1, %struct.configtree** %6, align 8
  store %struct.configtree* %2, %struct.configtree** %7, align 8
  store i16 %3, i16* %8, align 2
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i64 0, i64 0), i8** %9, align 8
  %16 = load %struct.configtree*, %struct.configtree** %7, align 8
  %17 = getelementptr inbounds %struct.configtree, %struct.configtree* %16, i32 0, i32 8
  %18 = load %struct.boundingboxStem*, %struct.boundingboxStem** %17, align 8
  store %struct.boundingboxStem* %18, %struct.boundingboxStem** %10, align 8
  %19 = load %struct.configtree*, %struct.configtree** %5, align 8
  %20 = getelementptr inbounds %struct.configtree, %struct.configtree* %19, i32 0, i32 7
  %21 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %20, align 8
  store %struct.boundingboxLoop* %21, %struct.boundingboxLoop** %11, align 8
  %22 = load %struct.configtree*, %struct.configtree** %6, align 8
  %23 = getelementptr inbounds %struct.configtree, %struct.configtree* %22, i32 0, i32 7
  %24 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %23, align 8
  store %struct.boundingboxLoop* %24, %struct.boundingboxLoop** %12, align 8
  %25 = load i16, i16* %8, align 2
  %26 = sext i16 %25 to i32
  %27 = mul nsw i32 -1, %26
  %28 = trunc i32 %27 to i16
  store i16 %28, i16* %13, align 2
  %29 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %30 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %29, i32 0, i32 3
  %31 = getelementptr inbounds [2 x double], [2 x double]* %30, i64 0, i64 0
  %32 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %33 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %32, i32 0, i32 1
  %34 = getelementptr inbounds [2 x double], [2 x double]* %33, i64 0, i64 0
  %35 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %36 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %35, i32 0, i32 2
  %37 = getelementptr inbounds [2 x double], [2 x double]* %36, i64 0, i64 0
  %38 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %39 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %38, i32 0, i32 4
  %40 = getelementptr inbounds [2 x double], [2 x double]* %39, i64 0, i64 0
  %41 = load double, double* %40, align 8
  %42 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %43 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %42, i32 0, i32 4
  %44 = getelementptr inbounds [2 x double], [2 x double]* %43, i64 0, i64 1
  %45 = load double, double* %44, align 8
  %46 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %11, align 8
  %47 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %46, i32 0, i32 1
  %48 = getelementptr inbounds [2 x double], [2 x double]* %47, i64 0, i64 0
  %49 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %11, align 8
  %50 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %49, i32 0, i32 2
  %51 = load double, double* %50, align 8
  %52 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %12, align 8
  %53 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %52, i32 0, i32 1
  %54 = getelementptr inbounds [2 x double], [2 x double]* %53, i64 0, i64 0
  %55 = load i16, i16* %13, align 2
  %56 = call double @fixIntersectionOfRectangleAndCircle(double* noundef %31, double* noundef %34, double* noundef %37, double noundef %41, double noundef %45, double* noundef %48, double noundef %51, double* noundef %54, i16 noundef signext %55)
  store double %56, double* %14, align 8
  %57 = load double, double* %14, align 8
  %58 = fmul double -1.000000e+00, %57
  store double %58, double* %15, align 8
  %59 = load double, double* %15, align 8
  ret double %59
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @getRotationAngleLxB(%struct.configtree* noundef %0, %struct.configtree* noundef %1, %struct.configtree* noundef %2, i16 noundef signext %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca i16, align 2
  %9 = alloca i8*, align 8
  %10 = alloca %struct.boundingboxLoop*, align 8
  %11 = alloca %struct.boundingboxStem*, align 8
  %12 = alloca [2 x double], align 16
  %13 = alloca double, align 8
  %14 = alloca i32, align 4
  %15 = alloca i16, align 2
  %16 = alloca [3 x [2 x double]], align 16
  %17 = alloca [2 x double], align 16
  %18 = alloca double, align 8
  %19 = alloca %struct.boundingboxLoop*, align 8
  %20 = alloca [2 x double], align 16
  %21 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store %struct.configtree* %1, %struct.configtree** %6, align 8
  store %struct.configtree* %2, %struct.configtree** %7, align 8
  store i16 %3, i16* %8, align 2
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16, i64 0, i64 0), i8** %9, align 8
  %22 = load %struct.configtree*, %struct.configtree** %5, align 8
  %23 = getelementptr inbounds %struct.configtree, %struct.configtree* %22, i32 0, i32 7
  %24 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %23, align 8
  store %struct.boundingboxLoop* %24, %struct.boundingboxLoop** %10, align 8
  %25 = load %struct.configtree*, %struct.configtree** %7, align 8
  %26 = getelementptr inbounds %struct.configtree, %struct.configtree* %25, i32 0, i32 8
  %27 = load %struct.boundingboxStem*, %struct.boundingboxStem** %26, align 8
  store %struct.boundingboxStem* %27, %struct.boundingboxStem** %11, align 8
  %28 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %10, align 8
  %29 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  call void @getLBoxCenter(%struct.boundingboxLoop* noundef %28, double* noundef %29)
  %30 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %10, align 8
  %31 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %30, i32 0, i32 2
  %32 = load double, double* %31, align 8
  store double %32, double* %13, align 8
  store i32 -1, i32* %14, align 4
  %33 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %10, align 8
  %34 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %35 = call signext i16 @intersectLoopBulges(%struct.boundingboxLoop* noundef %33, %struct.boundingboxStem* noundef %34, i32* noundef %14)
  store i16 %35, i16* %15, align 2
  %36 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %37 = load i32, i32* %14, align 4
  %38 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %16, i64 0, i64 0
  %39 = getelementptr inbounds [2 x double], [2 x double]* %38, i64 0, i64 0
  %40 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %16, i64 0, i64 1
  %41 = getelementptr inbounds [2 x double], [2 x double]* %40, i64 0, i64 0
  %42 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %16, i64 0, i64 2
  %43 = getelementptr inbounds [2 x double], [2 x double]* %42, i64 0, i64 0
  call void @getBulgeCoordinates(%struct.boundingboxStem* noundef %36, i32 noundef %37, double* noundef %39, double* noundef %41, double* noundef %43)
  store double 1.000000e+00, double* %18, align 8
  %44 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %16, i64 0, i64 0
  %45 = getelementptr inbounds [2 x double], [2 x double]* %44, i64 0, i64 0
  %46 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %16, i64 0, i64 1
  %47 = getelementptr inbounds [2 x double], [2 x double]* %46, i64 0, i64 0
  %48 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %16, i64 0, i64 2
  %49 = getelementptr inbounds [2 x double], [2 x double]* %48, i64 0, i64 0
  %50 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  call void @circle(double* noundef %45, double* noundef %47, double* noundef %49, double* noundef %50, double* noundef %18)
  %51 = load %struct.configtree*, %struct.configtree** %6, align 8
  %52 = getelementptr inbounds %struct.configtree, %struct.configtree* %51, i32 0, i32 7
  %53 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %52, align 8
  store %struct.boundingboxLoop* %53, %struct.boundingboxLoop** %19, align 8
  %54 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %19, align 8
  %55 = getelementptr inbounds [2 x double], [2 x double]* %20, i64 0, i64 0
  call void @getLBoxCenter(%struct.boundingboxLoop* noundef %54, double* noundef %55)
  %56 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %57 = load double, double* %13, align 8
  %58 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %59 = load double, double* %18, align 8
  %60 = getelementptr inbounds [2 x double], [2 x double]* %20, i64 0, i64 0
  %61 = load i16, i16* %8, align 2
  %62 = call double @fixIntersectionOfCircles(double* noundef %56, double noundef %57, double* noundef %58, double noundef %59, double* noundef %60, i16 noundef signext %61)
  store double %62, double* %21, align 8
  %63 = load double, double* %21, align 8
  ret double %63
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @getRotationAngleSxL(%struct.configtree* noundef %0, %struct.configtree* noundef %1, %struct.configtree* noundef %2, i16 noundef signext %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca i16, align 2
  %9 = alloca i8*, align 8
  %10 = alloca %struct.boundingboxStem*, align 8
  %11 = alloca %struct.boundingboxLoop*, align 8
  %12 = alloca %struct.boundingboxLoop*, align 8
  %13 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store %struct.configtree* %1, %struct.configtree** %6, align 8
  store %struct.configtree* %2, %struct.configtree** %7, align 8
  store i16 %3, i16* %8, align 2
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.17, i64 0, i64 0), i8** %9, align 8
  %14 = load %struct.configtree*, %struct.configtree** %5, align 8
  %15 = getelementptr inbounds %struct.configtree, %struct.configtree* %14, i32 0, i32 8
  %16 = load %struct.boundingboxStem*, %struct.boundingboxStem** %15, align 8
  store %struct.boundingboxStem* %16, %struct.boundingboxStem** %10, align 8
  %17 = load %struct.configtree*, %struct.configtree** %7, align 8
  %18 = getelementptr inbounds %struct.configtree, %struct.configtree* %17, i32 0, i32 7
  %19 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %18, align 8
  store %struct.boundingboxLoop* %19, %struct.boundingboxLoop** %11, align 8
  %20 = load %struct.configtree*, %struct.configtree** %6, align 8
  %21 = getelementptr inbounds %struct.configtree, %struct.configtree* %20, i32 0, i32 7
  %22 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %21, align 8
  store %struct.boundingboxLoop* %22, %struct.boundingboxLoop** %12, align 8
  %23 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %24 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %23, i32 0, i32 3
  %25 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  %26 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %27 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %26, i32 0, i32 1
  %28 = getelementptr inbounds [2 x double], [2 x double]* %27, i64 0, i64 0
  %29 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %30 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %29, i32 0, i32 2
  %31 = getelementptr inbounds [2 x double], [2 x double]* %30, i64 0, i64 0
  %32 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %33 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %32, i32 0, i32 4
  %34 = getelementptr inbounds [2 x double], [2 x double]* %33, i64 0, i64 0
  %35 = load double, double* %34, align 8
  %36 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %37 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %36, i32 0, i32 4
  %38 = getelementptr inbounds [2 x double], [2 x double]* %37, i64 0, i64 1
  %39 = load double, double* %38, align 8
  %40 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %11, align 8
  %41 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %40, i32 0, i32 1
  %42 = getelementptr inbounds [2 x double], [2 x double]* %41, i64 0, i64 0
  %43 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %11, align 8
  %44 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %43, i32 0, i32 2
  %45 = load double, double* %44, align 8
  %46 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %12, align 8
  %47 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %46, i32 0, i32 1
  %48 = getelementptr inbounds [2 x double], [2 x double]* %47, i64 0, i64 0
  %49 = load i16, i16* %8, align 2
  %50 = call double @fixIntersectionOfRectangleAndCircle(double* noundef %25, double* noundef %28, double* noundef %31, double noundef %35, double noundef %39, double* noundef %42, double noundef %45, double* noundef %48, i16 noundef signext %49)
  store double %50, double* %13, align 8
  %51 = load double, double* %13, align 8
  ret double %51
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @getRotationAngleSxS(%struct.configtree* noundef %0, %struct.configtree* noundef %1, %struct.configtree* noundef %2, i16 noundef signext %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca i16, align 2
  %9 = alloca i8*, align 8
  %10 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store %struct.configtree* %1, %struct.configtree** %6, align 8
  store %struct.configtree* %2, %struct.configtree** %7, align 8
  store i16 %3, i16* %8, align 2
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.18, i64 0, i64 0), i8** %9, align 8
  %11 = load %struct.configtree*, %struct.configtree** %5, align 8
  %12 = load %struct.configtree*, %struct.configtree** %6, align 8
  %13 = load %struct.configtree*, %struct.configtree** %7, align 8
  %14 = load i16, i16* %8, align 2
  %15 = call double @getRotationAngleSxL(%struct.configtree* noundef %11, %struct.configtree* noundef %12, %struct.configtree* noundef %13, i16 noundef signext %14)
  store double %15, double* %10, align 8
  %16 = load double, double* %10, align 8
  ret double %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @getRotationAngleSxB(%struct.configtree* noundef %0, %struct.configtree* noundef %1, %struct.configtree* noundef %2, i16 noundef signext %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca i16, align 2
  %9 = alloca i8*, align 8
  %10 = alloca %struct.boundingboxStem*, align 8
  %11 = alloca %struct.boundingboxStem*, align 8
  %12 = alloca %struct.boundingboxLoop*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i16, align 2
  %15 = alloca [3 x [2 x double]], align 16
  %16 = alloca [2 x double], align 16
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store %struct.configtree* %1, %struct.configtree** %6, align 8
  store %struct.configtree* %2, %struct.configtree** %7, align 8
  store i16 %3, i16* %8, align 2
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.19, i64 0, i64 0), i8** %9, align 8
  %19 = load %struct.configtree*, %struct.configtree** %5, align 8
  %20 = getelementptr inbounds %struct.configtree, %struct.configtree* %19, i32 0, i32 8
  %21 = load %struct.boundingboxStem*, %struct.boundingboxStem** %20, align 8
  store %struct.boundingboxStem* %21, %struct.boundingboxStem** %10, align 8
  %22 = load %struct.configtree*, %struct.configtree** %7, align 8
  %23 = getelementptr inbounds %struct.configtree, %struct.configtree* %22, i32 0, i32 8
  %24 = load %struct.boundingboxStem*, %struct.boundingboxStem** %23, align 8
  store %struct.boundingboxStem* %24, %struct.boundingboxStem** %11, align 8
  %25 = load %struct.configtree*, %struct.configtree** %6, align 8
  %26 = getelementptr inbounds %struct.configtree, %struct.configtree* %25, i32 0, i32 7
  %27 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %26, align 8
  store %struct.boundingboxLoop* %27, %struct.boundingboxLoop** %12, align 8
  %28 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %29 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %30 = call signext i16 @intersectStemBulges(%struct.boundingboxStem* noundef %28, %struct.boundingboxStem* noundef %29, i32* noundef %13)
  store i16 %30, i16* %14, align 2
  %31 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %32 = load i32, i32* %13, align 4
  %33 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 0
  %34 = getelementptr inbounds [2 x double], [2 x double]* %33, i64 0, i64 0
  %35 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 1
  %36 = getelementptr inbounds [2 x double], [2 x double]* %35, i64 0, i64 0
  %37 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 2
  %38 = getelementptr inbounds [2 x double], [2 x double]* %37, i64 0, i64 0
  call void @getBulgeCoordinates(%struct.boundingboxStem* noundef %31, i32 noundef %32, double* noundef %34, double* noundef %36, double* noundef %38)
  store double 1.000000e+00, double* %17, align 8
  %39 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 0
  %40 = getelementptr inbounds [2 x double], [2 x double]* %39, i64 0, i64 0
  %41 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 1
  %42 = getelementptr inbounds [2 x double], [2 x double]* %41, i64 0, i64 0
  %43 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 2
  %44 = getelementptr inbounds [2 x double], [2 x double]* %43, i64 0, i64 0
  %45 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  call void @circle(double* noundef %40, double* noundef %42, double* noundef %44, double* noundef %45, double* noundef %17)
  %46 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %47 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %46, i32 0, i32 3
  %48 = getelementptr inbounds [2 x double], [2 x double]* %47, i64 0, i64 0
  %49 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %50 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %49, i32 0, i32 1
  %51 = getelementptr inbounds [2 x double], [2 x double]* %50, i64 0, i64 0
  %52 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %53 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %52, i32 0, i32 2
  %54 = getelementptr inbounds [2 x double], [2 x double]* %53, i64 0, i64 0
  %55 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %56 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %55, i32 0, i32 4
  %57 = getelementptr inbounds [2 x double], [2 x double]* %56, i64 0, i64 0
  %58 = load double, double* %57, align 8
  %59 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %60 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %59, i32 0, i32 4
  %61 = getelementptr inbounds [2 x double], [2 x double]* %60, i64 0, i64 1
  %62 = load double, double* %61, align 8
  %63 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %64 = load double, double* %17, align 8
  %65 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %12, align 8
  %66 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %65, i32 0, i32 1
  %67 = getelementptr inbounds [2 x double], [2 x double]* %66, i64 0, i64 0
  %68 = load i16, i16* %8, align 2
  %69 = call double @fixIntersectionOfRectangleAndCircle(double* noundef %48, double* noundef %51, double* noundef %54, double noundef %58, double noundef %62, double* noundef %63, double noundef %64, double* noundef %67, i16 noundef signext %68)
  store double %69, double* %18, align 8
  %70 = load double, double* %18, align 8
  ret double %70
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @getRotationAngleBxL(%struct.configtree* noundef %0, %struct.configtree* noundef %1, %struct.configtree* noundef %2, i16 noundef signext %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca i16, align 2
  %9 = alloca i8*, align 8
  %10 = alloca %struct.boundingboxStem*, align 8
  %11 = alloca %struct.boundingboxLoop*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i16, align 2
  %14 = alloca [3 x [2 x double]], align 16
  %15 = alloca [2 x double], align 16
  %16 = alloca double, align 8
  %17 = alloca [2 x double], align 16
  %18 = alloca double, align 8
  %19 = alloca %struct.boundingboxLoop*, align 8
  %20 = alloca [2 x double], align 16
  %21 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store %struct.configtree* %1, %struct.configtree** %6, align 8
  store %struct.configtree* %2, %struct.configtree** %7, align 8
  store i16 %3, i16* %8, align 2
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.20, i64 0, i64 0), i8** %9, align 8
  %22 = load %struct.configtree*, %struct.configtree** %5, align 8
  %23 = getelementptr inbounds %struct.configtree, %struct.configtree* %22, i32 0, i32 8
  %24 = load %struct.boundingboxStem*, %struct.boundingboxStem** %23, align 8
  store %struct.boundingboxStem* %24, %struct.boundingboxStem** %10, align 8
  %25 = load %struct.configtree*, %struct.configtree** %7, align 8
  %26 = getelementptr inbounds %struct.configtree, %struct.configtree* %25, i32 0, i32 7
  %27 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %26, align 8
  store %struct.boundingboxLoop* %27, %struct.boundingboxLoop** %11, align 8
  store i32 -1, i32* %12, align 4
  %28 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %11, align 8
  %29 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %30 = call signext i16 @intersectLoopBulges(%struct.boundingboxLoop* noundef %28, %struct.boundingboxStem* noundef %29, i32* noundef %12)
  store i16 %30, i16* %13, align 2
  %31 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %32 = load i32, i32* %12, align 4
  %33 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %14, i64 0, i64 0
  %34 = getelementptr inbounds [2 x double], [2 x double]* %33, i64 0, i64 0
  %35 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %14, i64 0, i64 1
  %36 = getelementptr inbounds [2 x double], [2 x double]* %35, i64 0, i64 0
  %37 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %14, i64 0, i64 2
  %38 = getelementptr inbounds [2 x double], [2 x double]* %37, i64 0, i64 0
  call void @getBulgeCoordinates(%struct.boundingboxStem* noundef %31, i32 noundef %32, double* noundef %34, double* noundef %36, double* noundef %38)
  store double 1.000000e+00, double* %16, align 8
  %39 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %14, i64 0, i64 0
  %40 = getelementptr inbounds [2 x double], [2 x double]* %39, i64 0, i64 0
  %41 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %14, i64 0, i64 1
  %42 = getelementptr inbounds [2 x double], [2 x double]* %41, i64 0, i64 0
  %43 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %14, i64 0, i64 2
  %44 = getelementptr inbounds [2 x double], [2 x double]* %43, i64 0, i64 0
  %45 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  call void @circle(double* noundef %40, double* noundef %42, double* noundef %44, double* noundef %45, double* noundef %16)
  %46 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %11, align 8
  %47 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  call void @getLBoxCenter(%struct.boundingboxLoop* noundef %46, double* noundef %47)
  %48 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %11, align 8
  %49 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %48, i32 0, i32 2
  %50 = load double, double* %49, align 8
  store double %50, double* %18, align 8
  %51 = load %struct.configtree*, %struct.configtree** %6, align 8
  %52 = getelementptr inbounds %struct.configtree, %struct.configtree* %51, i32 0, i32 7
  %53 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %52, align 8
  store %struct.boundingboxLoop* %53, %struct.boundingboxLoop** %19, align 8
  %54 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %19, align 8
  %55 = getelementptr inbounds [2 x double], [2 x double]* %20, i64 0, i64 0
  call void @getLBoxCenter(%struct.boundingboxLoop* noundef %54, double* noundef %55)
  %56 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %57 = load double, double* %16, align 8
  %58 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %59 = load double, double* %18, align 8
  %60 = getelementptr inbounds [2 x double], [2 x double]* %20, i64 0, i64 0
  %61 = load i16, i16* %8, align 2
  %62 = call double @fixIntersectionOfCircles(double* noundef %56, double noundef %57, double* noundef %58, double noundef %59, double* noundef %60, i16 noundef signext %61)
  store double %62, double* %21, align 8
  %63 = load double, double* %21, align 8
  ret double %63
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @getRotationAngleBxS(%struct.configtree* noundef %0, %struct.configtree* noundef %1, %struct.configtree* noundef %2, i16 noundef signext %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca i16, align 2
  %9 = alloca i8*, align 8
  %10 = alloca %struct.boundingboxStem*, align 8
  %11 = alloca %struct.boundingboxStem*, align 8
  %12 = alloca %struct.boundingboxLoop*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i16, align 2
  %15 = alloca [3 x [2 x double]], align 16
  %16 = alloca [2 x double], align 16
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store %struct.configtree* %1, %struct.configtree** %6, align 8
  store %struct.configtree* %2, %struct.configtree** %7, align 8
  store i16 %3, i16* %8, align 2
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.21, i64 0, i64 0), i8** %9, align 8
  %19 = load %struct.configtree*, %struct.configtree** %7, align 8
  %20 = getelementptr inbounds %struct.configtree, %struct.configtree* %19, i32 0, i32 8
  %21 = load %struct.boundingboxStem*, %struct.boundingboxStem** %20, align 8
  store %struct.boundingboxStem* %21, %struct.boundingboxStem** %10, align 8
  %22 = load %struct.configtree*, %struct.configtree** %5, align 8
  %23 = getelementptr inbounds %struct.configtree, %struct.configtree* %22, i32 0, i32 8
  %24 = load %struct.boundingboxStem*, %struct.boundingboxStem** %23, align 8
  store %struct.boundingboxStem* %24, %struct.boundingboxStem** %11, align 8
  %25 = load %struct.configtree*, %struct.configtree** %6, align 8
  %26 = getelementptr inbounds %struct.configtree, %struct.configtree* %25, i32 0, i32 7
  %27 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %26, align 8
  store %struct.boundingboxLoop* %27, %struct.boundingboxLoop** %12, align 8
  %28 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %29 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %30 = call signext i16 @intersectStemBulges(%struct.boundingboxStem* noundef %28, %struct.boundingboxStem* noundef %29, i32* noundef %13)
  store i16 %30, i16* %14, align 2
  %31 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %32 = load i32, i32* %13, align 4
  %33 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 0
  %34 = getelementptr inbounds [2 x double], [2 x double]* %33, i64 0, i64 0
  %35 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 1
  %36 = getelementptr inbounds [2 x double], [2 x double]* %35, i64 0, i64 0
  %37 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 2
  %38 = getelementptr inbounds [2 x double], [2 x double]* %37, i64 0, i64 0
  call void @getBulgeCoordinates(%struct.boundingboxStem* noundef %31, i32 noundef %32, double* noundef %34, double* noundef %36, double* noundef %38)
  store double 1.000000e+00, double* %17, align 8
  %39 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 0
  %40 = getelementptr inbounds [2 x double], [2 x double]* %39, i64 0, i64 0
  %41 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 1
  %42 = getelementptr inbounds [2 x double], [2 x double]* %41, i64 0, i64 0
  %43 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 2
  %44 = getelementptr inbounds [2 x double], [2 x double]* %43, i64 0, i64 0
  %45 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  call void @circle(double* noundef %40, double* noundef %42, double* noundef %44, double* noundef %45, double* noundef %17)
  %46 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %47 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %46, i32 0, i32 3
  %48 = getelementptr inbounds [2 x double], [2 x double]* %47, i64 0, i64 0
  %49 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %50 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %49, i32 0, i32 1
  %51 = getelementptr inbounds [2 x double], [2 x double]* %50, i64 0, i64 0
  %52 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %53 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %52, i32 0, i32 2
  %54 = getelementptr inbounds [2 x double], [2 x double]* %53, i64 0, i64 0
  %55 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %56 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %55, i32 0, i32 4
  %57 = getelementptr inbounds [2 x double], [2 x double]* %56, i64 0, i64 0
  %58 = load double, double* %57, align 8
  %59 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %60 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %59, i32 0, i32 4
  %61 = getelementptr inbounds [2 x double], [2 x double]* %60, i64 0, i64 1
  %62 = load double, double* %61, align 8
  %63 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %64 = load double, double* %17, align 8
  %65 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %12, align 8
  %66 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %65, i32 0, i32 1
  %67 = getelementptr inbounds [2 x double], [2 x double]* %66, i64 0, i64 0
  %68 = load i16, i16* %8, align 2
  %69 = call double @fixIntersectionOfRectangleAndCircle(double* noundef %48, double* noundef %51, double* noundef %54, double noundef %58, double noundef %62, double* noundef %63, double noundef %64, double* noundef %67, i16 noundef signext %68)
  store double %69, double* %18, align 8
  %70 = load double, double* %18, align 8
  ret double %70
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @getRotationAngleBxB(%struct.configtree* noundef %0, %struct.configtree* noundef %1, %struct.configtree* noundef %2, i16 noundef signext %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca i16, align 2
  %9 = alloca i8*, align 8
  %10 = alloca %struct.boundingboxStem*, align 8
  %11 = alloca %struct.boundingboxStem*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i16, align 2
  %15 = alloca [3 x [2 x double]], align 16
  %16 = alloca [2 x double], align 16
  %17 = alloca double, align 8
  %18 = alloca [3 x [2 x double]], align 16
  %19 = alloca [2 x double], align 16
  %20 = alloca double, align 8
  %21 = alloca %struct.boundingboxLoop*, align 8
  %22 = alloca [2 x double], align 16
  %23 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store %struct.configtree* %1, %struct.configtree** %6, align 8
  store %struct.configtree* %2, %struct.configtree** %7, align 8
  store i16 %3, i16* %8, align 2
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.22, i64 0, i64 0), i8** %9, align 8
  %24 = load %struct.configtree*, %struct.configtree** %5, align 8
  %25 = getelementptr inbounds %struct.configtree, %struct.configtree* %24, i32 0, i32 8
  %26 = load %struct.boundingboxStem*, %struct.boundingboxStem** %25, align 8
  store %struct.boundingboxStem* %26, %struct.boundingboxStem** %10, align 8
  %27 = load %struct.configtree*, %struct.configtree** %7, align 8
  %28 = getelementptr inbounds %struct.configtree, %struct.configtree* %27, i32 0, i32 8
  %29 = load %struct.boundingboxStem*, %struct.boundingboxStem** %28, align 8
  store %struct.boundingboxStem* %29, %struct.boundingboxStem** %11, align 8
  store i32 -1, i32* %12, align 4
  store i32 -1, i32* %13, align 4
  %30 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %31 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %32 = call signext i16 @intersectBulgesBulges(%struct.boundingboxStem* noundef %30, %struct.boundingboxStem* noundef %31, i32* noundef %12, i32* noundef %13)
  store i16 %32, i16* %14, align 2
  %33 = load %struct.boundingboxStem*, %struct.boundingboxStem** %10, align 8
  %34 = load i32, i32* %12, align 4
  %35 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 0
  %36 = getelementptr inbounds [2 x double], [2 x double]* %35, i64 0, i64 0
  %37 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 1
  %38 = getelementptr inbounds [2 x double], [2 x double]* %37, i64 0, i64 0
  %39 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 2
  %40 = getelementptr inbounds [2 x double], [2 x double]* %39, i64 0, i64 0
  call void @getBulgeCoordinates(%struct.boundingboxStem* noundef %33, i32 noundef %34, double* noundef %36, double* noundef %38, double* noundef %40)
  store double 1.000000e+00, double* %17, align 8
  %41 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 0
  %42 = getelementptr inbounds [2 x double], [2 x double]* %41, i64 0, i64 0
  %43 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 1
  %44 = getelementptr inbounds [2 x double], [2 x double]* %43, i64 0, i64 0
  %45 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %15, i64 0, i64 2
  %46 = getelementptr inbounds [2 x double], [2 x double]* %45, i64 0, i64 0
  %47 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  call void @circle(double* noundef %42, double* noundef %44, double* noundef %46, double* noundef %47, double* noundef %17)
  %48 = load %struct.boundingboxStem*, %struct.boundingboxStem** %11, align 8
  %49 = load i32, i32* %13, align 4
  %50 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %18, i64 0, i64 0
  %51 = getelementptr inbounds [2 x double], [2 x double]* %50, i64 0, i64 0
  %52 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %18, i64 0, i64 1
  %53 = getelementptr inbounds [2 x double], [2 x double]* %52, i64 0, i64 0
  %54 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %18, i64 0, i64 2
  %55 = getelementptr inbounds [2 x double], [2 x double]* %54, i64 0, i64 0
  call void @getBulgeCoordinates(%struct.boundingboxStem* noundef %48, i32 noundef %49, double* noundef %51, double* noundef %53, double* noundef %55)
  store double 1.000000e+00, double* %20, align 8
  %56 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %18, i64 0, i64 0
  %57 = getelementptr inbounds [2 x double], [2 x double]* %56, i64 0, i64 0
  %58 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %18, i64 0, i64 1
  %59 = getelementptr inbounds [2 x double], [2 x double]* %58, i64 0, i64 0
  %60 = getelementptr inbounds [3 x [2 x double]], [3 x [2 x double]]* %18, i64 0, i64 2
  %61 = getelementptr inbounds [2 x double], [2 x double]* %60, i64 0, i64 0
  %62 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  call void @circle(double* noundef %57, double* noundef %59, double* noundef %61, double* noundef %62, double* noundef %20)
  %63 = load %struct.configtree*, %struct.configtree** %6, align 8
  %64 = getelementptr inbounds %struct.configtree, %struct.configtree* %63, i32 0, i32 7
  %65 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %64, align 8
  store %struct.boundingboxLoop* %65, %struct.boundingboxLoop** %21, align 8
  %66 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %21, align 8
  %67 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 0
  call void @getLBoxCenter(%struct.boundingboxLoop* noundef %66, double* noundef %67)
  %68 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %69 = load double, double* %17, align 8
  %70 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  %71 = load double, double* %20, align 8
  %72 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 0
  %73 = load i16, i16* %8, align 2
  %74 = call double @fixIntersectionOfCircles(double* noundef %68, double noundef %69, double* noundef %70, double noundef %71, double* noundef %72, i16 noundef signext %73)
  store double %74, double* %23, align 8
  %75 = load double, double* %23, align 8
  ret double %75
}

declare dso_local i32 @printf(i8* noundef, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal double @fixIntersectionOfCircles(double* noundef %0, double noundef %1, double* noundef %2, double noundef %3, double* noundef %4, i16 noundef signext %5) #0 {
  %7 = alloca double, align 8
  %8 = alloca double*, align 8
  %9 = alloca double, align 8
  %10 = alloca double*, align 8
  %11 = alloca double, align 8
  %12 = alloca double*, align 8
  %13 = alloca i16, align 2
  %14 = alloca i8*, align 8
  %15 = alloca double, align 8
  %16 = alloca [2 x double], align 16
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca [2 x double], align 16
  %20 = alloca [2 x double], align 16
  %21 = alloca i16, align 2
  %22 = alloca double, align 8
  %23 = alloca double, align 8
  %24 = alloca [2 x double], align 16
  %25 = alloca i16, align 2
  %26 = alloca [2 x double], align 16
  %27 = alloca i16, align 2
  %28 = alloca double, align 8
  store double* %0, double** %8, align 8
  store double %1, double* %9, align 8
  store double* %2, double** %10, align 8
  store double %3, double* %11, align 8
  store double* %4, double** %12, align 8
  store i16 %5, i16* %13, align 2
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.11, i64 0, i64 0), i8** %14, align 8
  %29 = load i16, i16* %13, align 2
  %30 = sext i16 %29 to i32
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %6
  store double 0.000000e+00, double* %7, align 8
  br label %161

33:                                               ; preds = %6
  store double 1.900000e+01, double* %15, align 8
  %34 = load double*, double** %12, align 8
  %35 = load double*, double** %10, align 8
  %36 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  call void @vector(double* noundef %34, double* noundef %35, double* noundef %36)
  %37 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %38 = call double @vectorLength2D(double* noundef %37)
  store double %38, double* %17, align 8
  %39 = load double, double* %9, align 8
  %40 = load double, double* %11, align 8
  %41 = fadd double %39, %40
  %42 = load double, double* %15, align 8
  %43 = fadd double %41, %42
  store double %43, double* %18, align 8
  %44 = load double*, double** %12, align 8
  %45 = load double, double* %17, align 8
  %46 = load double*, double** %8, align 8
  %47 = load double, double* %18, align 8
  %48 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  %49 = getelementptr inbounds [2 x double], [2 x double]* %20, i64 0, i64 0
  %50 = call signext i16 @getCutPointsOfCircles(double* noundef %44, double noundef %45, double* noundef %46, double noundef %47, double* noundef %48, double* noundef %49)
  store i16 %50, i16* %21, align 2
  %51 = load i16, i16* %21, align 2
  %52 = sext i16 %51 to i32
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %33
  store double 0.000000e+00, double* %7, align 8
  br label %161

55:                                               ; preds = %33
  store double 0.000000e+00, double* %22, align 8
  store double 0.000000e+00, double* %23, align 8
  %56 = load double*, double** %12, align 8
  %57 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  %58 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  call void @vector(double* noundef %56, double* noundef %57, double* noundef %58)
  %59 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %60 = getelementptr inbounds [2 x double], [2 x double]* %24, i64 0, i64 0
  %61 = call double @angleBetweenVectors2D(double* noundef %59, double* noundef %60)
  store double %61, double* %22, align 8
  %62 = load double*, double** %12, align 8
  %63 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %64 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  %65 = call signext i16 @isToTheRightPointVector(double* noundef %62, double* noundef %63, double* noundef %64)
  store i16 %65, i16* %25, align 2
  %66 = load i16, i16* %25, align 2
  %67 = icmp ne i16 %66, 0
  br i1 %67, label %71, label %68

68:                                               ; preds = %55
  %69 = load double, double* %22, align 8
  %70 = fmul double %69, -1.000000e+00
  store double %70, double* %22, align 8
  br label %71

71:                                               ; preds = %68, %55
  %72 = load double, double* %22, align 8
  %73 = fcmp oeq double %72, 0.000000e+00
  br i1 %73, label %74, label %80

74:                                               ; preds = %71
  %75 = load double, double* %22, align 8
  %76 = call i32 @__signbit(double noundef %75) #8
  %77 = icmp ne i32 %76, 0
  %78 = zext i1 %77 to i64
  %79 = select i1 %77, double -1.000000e-10, double 1.000000e-10
  store double %79, double* %22, align 8
  br label %80

80:                                               ; preds = %74, %71
  %81 = load double*, double** %12, align 8
  %82 = getelementptr inbounds [2 x double], [2 x double]* %20, i64 0, i64 0
  %83 = getelementptr inbounds [2 x double], [2 x double]* %26, i64 0, i64 0
  call void @vector(double* noundef %81, double* noundef %82, double* noundef %83)
  %84 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %85 = getelementptr inbounds [2 x double], [2 x double]* %26, i64 0, i64 0
  %86 = call double @angleBetweenVectors2D(double* noundef %84, double* noundef %85)
  store double %86, double* %23, align 8
  %87 = load double*, double** %12, align 8
  %88 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %89 = getelementptr inbounds [2 x double], [2 x double]* %20, i64 0, i64 0
  %90 = call signext i16 @isToTheRightPointVector(double* noundef %87, double* noundef %88, double* noundef %89)
  store i16 %90, i16* %27, align 2
  %91 = load i16, i16* %27, align 2
  %92 = icmp ne i16 %91, 0
  br i1 %92, label %96, label %93

93:                                               ; preds = %80
  %94 = load double, double* %23, align 8
  %95 = fmul double %94, -1.000000e+00
  store double %95, double* %23, align 8
  br label %96

96:                                               ; preds = %93, %80
  %97 = load double, double* %23, align 8
  %98 = fcmp oeq double %97, 0.000000e+00
  br i1 %98, label %99, label %105

99:                                               ; preds = %96
  %100 = load double, double* %23, align 8
  %101 = call i32 @__signbit(double noundef %100) #8
  %102 = icmp ne i32 %101, 0
  %103 = zext i1 %102 to i64
  %104 = select i1 %102, double -1.000000e-10, double 1.000000e-10
  store double %104, double* %23, align 8
  br label %105

105:                                              ; preds = %99, %96
  %106 = load i16, i16* %25, align 2
  %107 = sext i16 %106 to i32
  %108 = load i16, i16* %27, align 2
  %109 = sext i16 %108 to i32
  %110 = icmp eq i32 %107, %109
  br i1 %110, label %111, label %138

111:                                              ; preds = %105
  %112 = load double, double* %22, align 8
  %113 = call double @llvm.fabs.f64(double %112)
  %114 = load double, double* %23, align 8
  %115 = call double @llvm.fabs.f64(double %114)
  %116 = fcmp olt double %113, %115
  br i1 %116, label %117, label %127

117:                                              ; preds = %111
  %118 = load i16, i16* %27, align 2
  %119 = icmp ne i16 %118, 0
  br i1 %119, label %120, label %123

120:                                              ; preds = %117
  %121 = load double, double* %23, align 8
  %122 = fsub double %121, 0x401921FB54442D18
  store double %122, double* %23, align 8
  br label %126

123:                                              ; preds = %117
  %124 = load double, double* %23, align 8
  %125 = fsub double 0x401921FB54442D18, %124
  store double %125, double* %23, align 8
  br label %126

126:                                              ; preds = %123, %120
  br label %137

127:                                              ; preds = %111
  %128 = load i16, i16* %25, align 2
  %129 = icmp ne i16 %128, 0
  br i1 %129, label %130, label %133

130:                                              ; preds = %127
  %131 = load double, double* %22, align 8
  %132 = fsub double %131, 0x401921FB54442D18
  store double %132, double* %22, align 8
  br label %136

133:                                              ; preds = %127
  %134 = load double, double* %22, align 8
  %135 = fsub double 0x401921FB54442D18, %134
  store double %135, double* %22, align 8
  br label %136

136:                                              ; preds = %133, %130
  br label %137

137:                                              ; preds = %136, %126
  br label %138

138:                                              ; preds = %137, %105
  store double 0.000000e+00, double* %28, align 8
  %139 = load i16, i16* %13, align 2
  %140 = sext i16 %139 to i32
  %141 = icmp eq i32 %140, 1
  br i1 %141, label %142, label %146

142:                                              ; preds = %138
  %143 = load double, double* %22, align 8
  %144 = load double, double* %23, align 8
  %145 = call double @llvm.maxnum.f64(double %143, double %144)
  store double %145, double* %28, align 8
  br label %155

146:                                              ; preds = %138
  %147 = load i16, i16* %13, align 2
  %148 = sext i16 %147 to i32
  %149 = icmp eq i32 %148, -1
  br i1 %149, label %150, label %154

150:                                              ; preds = %146
  %151 = load double, double* %22, align 8
  %152 = load double, double* %23, align 8
  %153 = call double @llvm.minnum.f64(double %151, double %152)
  store double %153, double* %28, align 8
  br label %154

154:                                              ; preds = %150, %146
  br label %155

155:                                              ; preds = %154, %142
  %156 = load double, double* %28, align 8
  %157 = fcmp oeq double %156, 0.000000e+00
  br i1 %157, label %158, label %159

158:                                              ; preds = %155
  br label %159

159:                                              ; preds = %158, %155
  %160 = load double, double* %28, align 8
  store double %160, double* %7, align 8
  br label %161

161:                                              ; preds = %159, %54, %32
  %162 = load double, double* %7, align 8
  ret double %162
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @getCutPointsOfCircles(double* noundef %0, double noundef %1, double* noundef %2, double noundef %3, double* noundef %4, double* noundef %5) #0 {
  %7 = alloca double*, align 8
  %8 = alloca double, align 8
  %9 = alloca double*, align 8
  %10 = alloca double, align 8
  %11 = alloca double*, align 8
  %12 = alloca double*, align 8
  %13 = alloca i16, align 2
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  %21 = alloca double, align 8
  %22 = alloca i16, align 2
  %23 = alloca i16, align 2
  %24 = alloca i16, align 2
  %25 = alloca double, align 8
  %26 = alloca double, align 8
  %27 = alloca double, align 8
  %28 = alloca double, align 8
  %29 = alloca double, align 8
  %30 = alloca double, align 8
  %31 = alloca double, align 8
  %32 = alloca double, align 8
  %33 = alloca double, align 8
  %34 = alloca double, align 8
  %35 = alloca double, align 8
  %36 = alloca double, align 8
  %37 = alloca double, align 8
  %38 = alloca double, align 8
  %39 = alloca double, align 8
  %40 = alloca double, align 8
  %41 = alloca double, align 8
  %42 = alloca double, align 8
  %43 = alloca double, align 8
  %44 = alloca double, align 8
  store double* %0, double** %7, align 8
  store double %1, double* %8, align 8
  store double* %2, double** %9, align 8
  store double %3, double* %10, align 8
  store double* %4, double** %11, align 8
  store double* %5, double** %12, align 8
  store i16 -2, i16* %13, align 2
  %45 = load double*, double** %7, align 8
  %46 = getelementptr inbounds double, double* %45, i64 0
  %47 = load double, double* %46, align 8
  store double %47, double* %14, align 8
  %48 = load double*, double** %7, align 8
  %49 = getelementptr inbounds double, double* %48, i64 1
  %50 = load double, double* %49, align 8
  store double %50, double* %15, align 8
  %51 = load double*, double** %9, align 8
  %52 = getelementptr inbounds double, double* %51, i64 0
  %53 = load double, double* %52, align 8
  store double %53, double* %16, align 8
  %54 = load double*, double** %9, align 8
  %55 = getelementptr inbounds double, double* %54, i64 1
  %56 = load double, double* %55, align 8
  store double %56, double* %17, align 8
  %57 = load double, double* %14, align 8
  %58 = load double, double* %16, align 8
  %59 = fsub double %57, %58
  store double %59, double* %18, align 8
  %60 = load double, double* %18, align 8
  %61 = fcmp olt double %60, 0.000000e+00
  br i1 %61, label %62, label %65

62:                                               ; preds = %6
  %63 = load double, double* %18, align 8
  %64 = fneg double %63
  br label %67

65:                                               ; preds = %6
  %66 = load double, double* %18, align 8
  br label %67

67:                                               ; preds = %65, %62
  %68 = phi double [ %64, %62 ], [ %66, %65 ]
  store double %68, double* %18, align 8
  %69 = load double, double* %15, align 8
  %70 = load double, double* %17, align 8
  %71 = fsub double %69, %70
  store double %71, double* %19, align 8
  %72 = load double, double* %19, align 8
  %73 = fcmp olt double %72, 0.000000e+00
  br i1 %73, label %74, label %77

74:                                               ; preds = %67
  %75 = load double, double* %19, align 8
  %76 = fneg double %75
  br label %79

77:                                               ; preds = %67
  %78 = load double, double* %19, align 8
  br label %79

79:                                               ; preds = %77, %74
  %80 = phi double [ %76, %74 ], [ %78, %77 ]
  store double %80, double* %19, align 8
  %81 = load double, double* %8, align 8
  %82 = load double, double* %10, align 8
  %83 = fsub double %81, %82
  store double %83, double* %20, align 8
  %84 = load double, double* %20, align 8
  %85 = fcmp olt double %84, 0.000000e+00
  br i1 %85, label %86, label %89

86:                                               ; preds = %79
  %87 = load double, double* %20, align 8
  %88 = fneg double %87
  br label %91

89:                                               ; preds = %79
  %90 = load double, double* %20, align 8
  br label %91

91:                                               ; preds = %89, %86
  %92 = phi double [ %88, %86 ], [ %90, %89 ]
  store double %92, double* %20, align 8
  store double 1.000000e+00, double* %21, align 8
  %93 = load double, double* %18, align 8
  %94 = load double, double* %21, align 8
  %95 = fcmp olt double %93, %94
  %96 = zext i1 %95 to i32
  %97 = trunc i32 %96 to i16
  store i16 %97, i16* %22, align 2
  %98 = load double, double* %19, align 8
  %99 = load double, double* %21, align 8
  %100 = fcmp olt double %98, %99
  %101 = zext i1 %100 to i32
  %102 = trunc i32 %101 to i16
  store i16 %102, i16* %23, align 2
  %103 = load double, double* %20, align 8
  %104 = load double, double* %21, align 8
  %105 = fcmp olt double %103, %104
  %106 = zext i1 %105 to i32
  %107 = trunc i32 %106 to i16
  store i16 %107, i16* %24, align 2
  %108 = load i16, i16* %22, align 2
  %109 = sext i16 %108 to i32
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %111, label %121

111:                                              ; preds = %91
  %112 = load i16, i16* %23, align 2
  %113 = sext i16 %112 to i32
  %114 = icmp ne i32 %113, 0
  br i1 %114, label %115, label %121

115:                                              ; preds = %111
  %116 = load i16, i16* %24, align 2
  %117 = icmp ne i16 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %115
  store i16 -1, i16* %13, align 2
  br label %120

119:                                              ; preds = %115
  store i16 0, i16* %13, align 2
  br label %120

120:                                              ; preds = %119, %118
  br label %326

121:                                              ; preds = %111, %91
  %122 = load i16, i16* %23, align 2
  %123 = icmp ne i16 %122, 0
  br i1 %123, label %219, label %124

124:                                              ; preds = %121
  %125 = load double, double* %14, align 8
  %126 = load double, double* %16, align 8
  %127 = fmul double 2.000000e+00, %126
  %128 = call double @llvm.fmuladd.f64(double -2.000000e+00, double %125, double %127)
  store double %128, double* %25, align 8
  %129 = load double, double* %14, align 8
  %130 = load double, double* %14, align 8
  %131 = load double, double* %16, align 8
  %132 = load double, double* %16, align 8
  %133 = fmul double %131, %132
  %134 = fneg double %133
  %135 = call double @llvm.fmuladd.f64(double %129, double %130, double %134)
  %136 = load double, double* %15, align 8
  %137 = load double, double* %15, align 8
  %138 = call double @llvm.fmuladd.f64(double %136, double %137, double %135)
  %139 = load double, double* %17, align 8
  %140 = load double, double* %17, align 8
  %141 = fneg double %139
  %142 = call double @llvm.fmuladd.f64(double %141, double %140, double %138)
  %143 = load double, double* %8, align 8
  %144 = load double, double* %8, align 8
  %145 = fneg double %143
  %146 = call double @llvm.fmuladd.f64(double %145, double %144, double %142)
  %147 = load double, double* %10, align 8
  %148 = load double, double* %10, align 8
  %149 = call double @llvm.fmuladd.f64(double %147, double %148, double %146)
  store double %149, double* %26, align 8
  %150 = load double, double* %15, align 8
  %151 = load double, double* %17, align 8
  %152 = fmul double 2.000000e+00, %151
  %153 = call double @llvm.fmuladd.f64(double -2.000000e+00, double %150, double %152)
  %154 = fmul double -1.000000e+00, %153
  store double %154, double* %27, align 8
  %155 = load double, double* %15, align 8
  %156 = load double, double* %26, align 8
  %157 = load double, double* %27, align 8
  %158 = fdiv double %156, %157
  %159 = fsub double %155, %158
  store double %159, double* %28, align 8
  %160 = load double, double* %25, align 8
  %161 = load double, double* %27, align 8
  %162 = fdiv double %160, %161
  store double %162, double* %29, align 8
  %163 = load double, double* %29, align 8
  %164 = load double, double* %29, align 8
  %165 = call double @llvm.fmuladd.f64(double %163, double %164, double 1.000000e+00)
  store double %165, double* %30, align 8
  %166 = load double, double* %14, align 8
  %167 = load double, double* %28, align 8
  %168 = fmul double 2.000000e+00, %167
  %169 = load double, double* %29, align 8
  %170 = fmul double %168, %169
  %171 = fneg double %170
  %172 = call double @llvm.fmuladd.f64(double -2.000000e+00, double %166, double %171)
  store double %172, double* %31, align 8
  %173 = load double, double* %14, align 8
  %174 = load double, double* %14, align 8
  %175 = load double, double* %28, align 8
  %176 = load double, double* %28, align 8
  %177 = fmul double %175, %176
  %178 = call double @llvm.fmuladd.f64(double %173, double %174, double %177)
  %179 = load double, double* %8, align 8
  %180 = load double, double* %8, align 8
  %181 = fneg double %179
  %182 = call double @llvm.fmuladd.f64(double %181, double %180, double %178)
  store double %182, double* %32, align 8
  %183 = load double, double* %30, align 8
  %184 = load double, double* %31, align 8
  %185 = load double, double* %32, align 8
  %186 = call signext i16 @solveSquareEquation(double noundef %183, double noundef %184, double noundef %185, double* noundef %33, double* noundef %34)
  store i16 %186, i16* %13, align 2
  %187 = load i16, i16* %13, align 2
  %188 = sext i16 %187 to i32
  %189 = icmp sgt i32 %188, 0
  br i1 %189, label %190, label %202

190:                                              ; preds = %124
  %191 = load double, double* %33, align 8
  %192 = load double*, double** %11, align 8
  %193 = getelementptr inbounds double, double* %192, i64 0
  store double %191, double* %193, align 8
  %194 = load double, double* %33, align 8
  %195 = load double, double* %25, align 8
  %196 = load double, double* %26, align 8
  %197 = call double @llvm.fmuladd.f64(double %194, double %195, double %196)
  %198 = load double, double* %27, align 8
  %199 = fdiv double %197, %198
  %200 = load double*, double** %11, align 8
  %201 = getelementptr inbounds double, double* %200, i64 1
  store double %199, double* %201, align 8
  br label %202

202:                                              ; preds = %190, %124
  %203 = load i16, i16* %13, align 2
  %204 = sext i16 %203 to i32
  %205 = icmp sgt i32 %204, 1
  br i1 %205, label %206, label %218

206:                                              ; preds = %202
  %207 = load double, double* %34, align 8
  %208 = load double*, double** %12, align 8
  %209 = getelementptr inbounds double, double* %208, i64 0
  store double %207, double* %209, align 8
  %210 = load double, double* %34, align 8
  %211 = load double, double* %25, align 8
  %212 = load double, double* %26, align 8
  %213 = call double @llvm.fmuladd.f64(double %210, double %211, double %212)
  %214 = load double, double* %27, align 8
  %215 = fdiv double %213, %214
  %216 = load double*, double** %12, align 8
  %217 = getelementptr inbounds double, double* %216, i64 1
  store double %215, double* %217, align 8
  br label %218

218:                                              ; preds = %206, %202
  br label %325

219:                                              ; preds = %121
  %220 = load double, double* %15, align 8
  %221 = load double, double* %17, align 8
  %222 = fmul double 2.000000e+00, %221
  %223 = call double @llvm.fmuladd.f64(double -2.000000e+00, double %220, double %222)
  store double %223, double* %35, align 8
  %224 = load double, double* %14, align 8
  %225 = load double, double* %14, align 8
  %226 = load double, double* %16, align 8
  %227 = load double, double* %16, align 8
  %228 = fmul double %226, %227
  %229 = fneg double %228
  %230 = call double @llvm.fmuladd.f64(double %224, double %225, double %229)
  %231 = load double, double* %15, align 8
  %232 = load double, double* %15, align 8
  %233 = load double, double* %17, align 8
  %234 = load double, double* %17, align 8
  %235 = fmul double %233, %234
  %236 = fneg double %235
  %237 = call double @llvm.fmuladd.f64(double %231, double %232, double %236)
  %238 = fadd double %230, %237
  %239 = load double, double* %10, align 8
  %240 = load double, double* %10, align 8
  %241 = load double, double* %8, align 8
  %242 = load double, double* %8, align 8
  %243 = fmul double %241, %242
  %244 = fneg double %243
  %245 = call double @llvm.fmuladd.f64(double %239, double %240, double %244)
  %246 = fadd double %238, %245
  store double %246, double* %36, align 8
  %247 = load double, double* %14, align 8
  %248 = load double, double* %16, align 8
  %249 = fmul double 2.000000e+00, %248
  %250 = call double @llvm.fmuladd.f64(double -2.000000e+00, double %247, double %249)
  %251 = fmul double -1.000000e+00, %250
  store double %251, double* %37, align 8
  %252 = load double, double* %14, align 8
  %253 = load double, double* %36, align 8
  %254 = load double, double* %37, align 8
  %255 = fdiv double %253, %254
  %256 = fsub double %252, %255
  store double %256, double* %38, align 8
  %257 = load double, double* %35, align 8
  %258 = load double, double* %37, align 8
  %259 = fdiv double %257, %258
  store double %259, double* %39, align 8
  %260 = load double, double* %39, align 8
  %261 = load double, double* %39, align 8
  %262 = call double @llvm.fmuladd.f64(double %260, double %261, double 1.000000e+00)
  store double %262, double* %40, align 8
  %263 = load double, double* %15, align 8
  %264 = load double, double* %38, align 8
  %265 = fmul double 2.000000e+00, %264
  %266 = load double, double* %39, align 8
  %267 = fmul double %265, %266
  %268 = fneg double %267
  %269 = call double @llvm.fmuladd.f64(double -2.000000e+00, double %263, double %268)
  store double %269, double* %41, align 8
  %270 = load double, double* %15, align 8
  %271 = load double, double* %15, align 8
  %272 = load double, double* %38, align 8
  %273 = load double, double* %38, align 8
  %274 = fmul double %272, %273
  %275 = call double @llvm.fmuladd.f64(double %270, double %271, double %274)
  %276 = load double, double* %8, align 8
  %277 = load double, double* %8, align 8
  %278 = fneg double %276
  %279 = call double @llvm.fmuladd.f64(double %278, double %277, double %275)
  store double %279, double* %42, align 8
  %280 = load double, double* %40, align 8
  %281 = load double, double* %41, align 8
  %282 = load double, double* %42, align 8
  %283 = call signext i16 @solveSquareEquation(double noundef %280, double noundef %281, double noundef %282, double* noundef %43, double* noundef %44)
  store i16 %283, i16* %13, align 2
  %284 = load i16, i16* %13, align 2
  %285 = sext i16 %284 to i32
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %287, label %292

287:                                              ; preds = %219
  %288 = load double, double* %40, align 8
  %289 = load double, double* %41, align 8
  %290 = load double, double* %42, align 8
  %291 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([37 x i8], [37 x i8]* @.str.12, i64 0, i64 0), double noundef %288, double noundef %289, double noundef %290)
  br label %292

292:                                              ; preds = %287, %219
  %293 = load i16, i16* %13, align 2
  %294 = sext i16 %293 to i32
  %295 = icmp sgt i32 %294, 0
  br i1 %295, label %296, label %308

296:                                              ; preds = %292
  %297 = load double, double* %43, align 8
  %298 = load double*, double** %11, align 8
  %299 = getelementptr inbounds double, double* %298, i64 1
  store double %297, double* %299, align 8
  %300 = load double, double* %43, align 8
  %301 = load double, double* %35, align 8
  %302 = load double, double* %36, align 8
  %303 = call double @llvm.fmuladd.f64(double %300, double %301, double %302)
  %304 = load double, double* %37, align 8
  %305 = fdiv double %303, %304
  %306 = load double*, double** %11, align 8
  %307 = getelementptr inbounds double, double* %306, i64 0
  store double %305, double* %307, align 8
  br label %308

308:                                              ; preds = %296, %292
  %309 = load i16, i16* %13, align 2
  %310 = sext i16 %309 to i32
  %311 = icmp sgt i32 %310, 1
  br i1 %311, label %312, label %324

312:                                              ; preds = %308
  %313 = load double, double* %44, align 8
  %314 = load double*, double** %12, align 8
  %315 = getelementptr inbounds double, double* %314, i64 1
  store double %313, double* %315, align 8
  %316 = load double, double* %44, align 8
  %317 = load double, double* %35, align 8
  %318 = load double, double* %36, align 8
  %319 = call double @llvm.fmuladd.f64(double %316, double %317, double %318)
  %320 = load double, double* %37, align 8
  %321 = fdiv double %319, %320
  %322 = load double*, double** %12, align 8
  %323 = getelementptr inbounds double, double* %322, i64 0
  store double %321, double* %323, align 8
  br label %324

324:                                              ; preds = %312, %308
  br label %325

325:                                              ; preds = %324, %218
  br label %326

326:                                              ; preds = %325, %120
  %327 = load i16, i16* %13, align 2
  ret i16 %327
}

; Function Attrs: nounwind readnone willreturn
declare dso_local i32 @__signbit(double noundef) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.minnum.f64(double, double) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @solveSquareEquation(double noundef %0, double noundef %1, double noundef %2, double* noundef %3, double* noundef %4) #0 {
  %6 = alloca i16, align 2
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double*, align 8
  %11 = alloca double*, align 8
  %12 = alloca i16, align 2
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  store double %0, double* %7, align 8
  store double %1, double* %8, align 8
  store double %2, double* %9, align 8
  store double* %3, double** %10, align 8
  store double* %4, double** %11, align 8
  store i16 0, i16* %12, align 2
  %16 = load double, double* %8, align 8
  %17 = load double, double* %8, align 8
  %18 = load double, double* %7, align 8
  %19 = fmul double 4.000000e+00, %18
  %20 = load double, double* %9, align 8
  %21 = fmul double %19, %20
  %22 = fneg double %21
  %23 = call double @llvm.fmuladd.f64(double %16, double %17, double %22)
  store double %23, double* %13, align 8
  %24 = load double, double* %13, align 8
  %25 = fcmp olt double %24, 0.000000e+00
  br i1 %25, label %26, label %28

26:                                               ; preds = %5
  store i16 0, i16* %12, align 2
  %27 = load i16, i16* %12, align 2
  store i16 %27, i16* %6, align 2
  br label %55

28:                                               ; preds = %5
  %29 = load double, double* %13, align 8
  %30 = fcmp oeq double %29, 0.000000e+00
  br i1 %30, label %31, label %32

31:                                               ; preds = %28
  store i16 1, i16* %12, align 2
  br label %33

32:                                               ; preds = %28
  store i16 2, i16* %12, align 2
  br label %33

33:                                               ; preds = %32, %31
  %34 = load double, double* %8, align 8
  %35 = fneg double %34
  %36 = load double, double* %13, align 8
  %37 = call double @sqrt(double noundef %36) #7
  %38 = fadd double %35, %37
  %39 = load double, double* %7, align 8
  %40 = fmul double 2.000000e+00, %39
  %41 = fdiv double %38, %40
  store double %41, double* %14, align 8
  %42 = load double, double* %8, align 8
  %43 = fneg double %42
  %44 = load double, double* %13, align 8
  %45 = call double @sqrt(double noundef %44) #7
  %46 = fsub double %43, %45
  %47 = load double, double* %7, align 8
  %48 = fmul double 2.000000e+00, %47
  %49 = fdiv double %46, %48
  store double %49, double* %15, align 8
  %50 = load double, double* %14, align 8
  %51 = load double*, double** %10, align 8
  store double %50, double* %51, align 8
  %52 = load double, double* %15, align 8
  %53 = load double*, double** %11, align 8
  store double %52, double* %53, align 8
  %54 = load i16, i16* %12, align 2
  store i16 %54, i16* %6, align 2
  br label %55

55:                                               ; preds = %33, %26
  %56 = load i16, i16* %6, align 2
  ret i16 %56
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @fixIntersectionOfRectangleAndCircle(double* noundef %0, double* noundef %1, double* noundef %2, double noundef %3, double noundef %4, double* noundef %5, double noundef %6, double* noundef %7, i16 noundef signext %8) #0 {
  %10 = alloca double, align 8
  %11 = alloca double*, align 8
  %12 = alloca double*, align 8
  %13 = alloca double*, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double*, align 8
  %17 = alloca double, align 8
  %18 = alloca double*, align 8
  %19 = alloca i16, align 2
  %20 = alloca i8*, align 8
  %21 = alloca double, align 8
  %22 = alloca [2 x double], align 16
  %23 = alloca double, align 8
  %24 = alloca double, align 8
  %25 = alloca [2 x double], align 16
  %26 = alloca [2 x double], align 16
  %27 = alloca [2 x double], align 16
  %28 = alloca i32, align 4
  %29 = alloca [4 x [2 x double]], align 16
  %30 = alloca i16, align 2
  %31 = alloca i16, align 2
  %32 = alloca [2 x double], align 16
  %33 = alloca [4 x double], align 16
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca double, align 8
  %37 = alloca i32, align 4
  %38 = alloca i16, align 2
  %39 = alloca [2 x double], align 16
  store double* %0, double** %11, align 8
  store double* %1, double** %12, align 8
  store double* %2, double** %13, align 8
  store double %3, double* %14, align 8
  store double %4, double* %15, align 8
  store double* %5, double** %16, align 8
  store double %6, double* %17, align 8
  store double* %7, double** %18, align 8
  store i16 %8, i16* %19, align 2
  store i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.14, i64 0, i64 0), i8** %20, align 8
  %40 = load i16, i16* %19, align 2
  %41 = sext i16 %40 to i32
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %9
  store double 0.000000e+00, double* %10, align 8
  br label %309

44:                                               ; preds = %9
  %45 = load double, double* %17, align 8
  %46 = fadd double 1.900000e+01, %45
  store double %46, double* %21, align 8
  %47 = load double*, double** %18, align 8
  %48 = load double*, double** %16, align 8
  %49 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 0
  call void @vector(double* noundef %47, double* noundef %48, double* noundef %49)
  %50 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 0
  %51 = call double @vectorLength2D(double* noundef %50)
  store double %51, double* %23, align 8
  %52 = load double, double* %15, align 8
  %53 = load double, double* %21, align 8
  %54 = fadd double %52, %53
  store double %54, double* %24, align 8
  %55 = getelementptr inbounds [2 x double], [2 x double]* %25, i64 0, i64 0
  %56 = load double*, double** %12, align 8
  %57 = getelementptr inbounds double, double* %56, i64 0
  %58 = load double, double* %57, align 8
  store double %58, double* %55, align 8
  %59 = getelementptr inbounds double, double* %55, i64 1
  %60 = load double*, double** %12, align 8
  %61 = getelementptr inbounds double, double* %60, i64 1
  %62 = load double, double* %61, align 8
  store double %62, double* %59, align 8
  %63 = getelementptr inbounds [2 x double], [2 x double]* %26, i64 0, i64 0
  %64 = load double*, double** %11, align 8
  %65 = getelementptr inbounds double, double* %64, i64 0
  %66 = load double, double* %65, align 8
  %67 = load double, double* %24, align 8
  %68 = load double*, double** %13, align 8
  %69 = getelementptr inbounds double, double* %68, i64 0
  %70 = load double, double* %69, align 8
  %71 = call double @llvm.fmuladd.f64(double %67, double %70, double %66)
  store double %71, double* %63, align 8
  %72 = getelementptr inbounds double, double* %63, i64 1
  %73 = load double*, double** %11, align 8
  %74 = getelementptr inbounds double, double* %73, i64 1
  %75 = load double, double* %74, align 8
  %76 = load double, double* %24, align 8
  %77 = load double*, double** %13, align 8
  %78 = getelementptr inbounds double, double* %77, i64 1
  %79 = load double, double* %78, align 8
  %80 = call double @llvm.fmuladd.f64(double %76, double %79, double %75)
  store double %80, double* %72, align 8
  %81 = getelementptr inbounds [2 x double], [2 x double]* %27, i64 0, i64 0
  %82 = load double*, double** %11, align 8
  %83 = getelementptr inbounds double, double* %82, i64 0
  %84 = load double, double* %83, align 8
  %85 = load double, double* %24, align 8
  %86 = load double*, double** %13, align 8
  %87 = getelementptr inbounds double, double* %86, i64 0
  %88 = load double, double* %87, align 8
  %89 = fneg double %85
  %90 = call double @llvm.fmuladd.f64(double %89, double %88, double %84)
  store double %90, double* %81, align 8
  %91 = getelementptr inbounds double, double* %81, i64 1
  %92 = load double*, double** %11, align 8
  %93 = getelementptr inbounds double, double* %92, i64 1
  %94 = load double, double* %93, align 8
  %95 = load double, double* %24, align 8
  %96 = load double*, double** %13, align 8
  %97 = getelementptr inbounds double, double* %96, i64 1
  %98 = load double, double* %97, align 8
  %99 = fneg double %95
  %100 = call double @llvm.fmuladd.f64(double %99, double %98, double %94)
  store double %100, double* %91, align 8
  store i32 0, i32* %28, align 4
  %101 = load double*, double** %18, align 8
  %102 = load double, double* %23, align 8
  %103 = getelementptr inbounds [2 x double], [2 x double]* %26, i64 0, i64 0
  %104 = getelementptr inbounds [2 x double], [2 x double]* %25, i64 0, i64 0
  %105 = load i32, i32* %28, align 4
  %106 = add nsw i32 %105, 0
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [4 x [2 x double]], [4 x [2 x double]]* %29, i64 0, i64 %107
  %109 = getelementptr inbounds [2 x double], [2 x double]* %108, i64 0, i64 0
  %110 = load i32, i32* %28, align 4
  %111 = add nsw i32 %110, 1
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [4 x [2 x double]], [4 x [2 x double]]* %29, i64 0, i64 %112
  %114 = getelementptr inbounds [2 x double], [2 x double]* %113, i64 0, i64 0
  %115 = call signext i16 @getCutPointsOfCircleAndLine(double* noundef %101, double noundef %102, double* noundef %103, double* noundef %104, double* noundef %109, double* noundef %114)
  store i16 %115, i16* %30, align 2
  %116 = load i16, i16* %30, align 2
  %117 = sext i16 %116 to i32
  %118 = load i32, i32* %28, align 4
  %119 = add nsw i32 %118, %117
  store i32 %119, i32* %28, align 4
  %120 = load double*, double** %18, align 8
  %121 = load double, double* %23, align 8
  %122 = getelementptr inbounds [2 x double], [2 x double]* %27, i64 0, i64 0
  %123 = getelementptr inbounds [2 x double], [2 x double]* %25, i64 0, i64 0
  %124 = load i32, i32* %28, align 4
  %125 = add nsw i32 %124, 0
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [4 x [2 x double]], [4 x [2 x double]]* %29, i64 0, i64 %126
  %128 = getelementptr inbounds [2 x double], [2 x double]* %127, i64 0, i64 0
  %129 = load i32, i32* %28, align 4
  %130 = add nsw i32 %129, 1
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [4 x [2 x double]], [4 x [2 x double]]* %29, i64 0, i64 %131
  %133 = getelementptr inbounds [2 x double], [2 x double]* %132, i64 0, i64 0
  %134 = call signext i16 @getCutPointsOfCircleAndLine(double* noundef %120, double noundef %121, double* noundef %122, double* noundef %123, double* noundef %128, double* noundef %133)
  store i16 %134, i16* %31, align 2
  %135 = load i16, i16* %31, align 2
  %136 = sext i16 %135 to i32
  %137 = load i32, i32* %28, align 4
  %138 = add nsw i32 %137, %136
  store i32 %138, i32* %28, align 4
  %139 = load i32, i32* %28, align 4
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %194

141:                                              ; preds = %44
  %142 = getelementptr inbounds [2 x double], [2 x double]* %25, i64 0, i64 0
  %143 = getelementptr inbounds [2 x double], [2 x double]* %32, i64 0, i64 0
  call void @normal(double* noundef %142, double* noundef %143)
  %144 = load double*, double** %18, align 8
  %145 = getelementptr inbounds double, double* %144, i64 0
  %146 = load double, double* %145, align 8
  %147 = load double, double* %23, align 8
  %148 = getelementptr inbounds [2 x double], [2 x double]* %32, i64 0, i64 0
  %149 = load double, double* %148, align 16
  %150 = call double @llvm.fmuladd.f64(double %147, double %149, double %146)
  %151 = load i32, i32* %28, align 4
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds [4 x [2 x double]], [4 x [2 x double]]* %29, i64 0, i64 %152
  %154 = getelementptr inbounds [2 x double], [2 x double]* %153, i64 0, i64 0
  store double %150, double* %154, align 16
  %155 = load double*, double** %18, align 8
  %156 = getelementptr inbounds double, double* %155, i64 1
  %157 = load double, double* %156, align 8
  %158 = load double, double* %23, align 8
  %159 = getelementptr inbounds [2 x double], [2 x double]* %32, i64 0, i64 1
  %160 = load double, double* %159, align 8
  %161 = call double @llvm.fmuladd.f64(double %158, double %160, double %157)
  %162 = load i32, i32* %28, align 4
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds [4 x [2 x double]], [4 x [2 x double]]* %29, i64 0, i64 %163
  %165 = getelementptr inbounds [2 x double], [2 x double]* %164, i64 0, i64 1
  store double %161, double* %165, align 8
  %166 = load i32, i32* %28, align 4
  %167 = add nsw i32 %166, 1
  store i32 %167, i32* %28, align 4
  %168 = load double*, double** %18, align 8
  %169 = getelementptr inbounds double, double* %168, i64 0
  %170 = load double, double* %169, align 8
  %171 = load double, double* %23, align 8
  %172 = getelementptr inbounds [2 x double], [2 x double]* %32, i64 0, i64 0
  %173 = load double, double* %172, align 16
  %174 = fneg double %171
  %175 = call double @llvm.fmuladd.f64(double %174, double %173, double %170)
  %176 = load i32, i32* %28, align 4
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds [4 x [2 x double]], [4 x [2 x double]]* %29, i64 0, i64 %177
  %179 = getelementptr inbounds [2 x double], [2 x double]* %178, i64 0, i64 0
  store double %175, double* %179, align 16
  %180 = load double*, double** %18, align 8
  %181 = getelementptr inbounds double, double* %180, i64 1
  %182 = load double, double* %181, align 8
  %183 = load double, double* %23, align 8
  %184 = getelementptr inbounds [2 x double], [2 x double]* %32, i64 0, i64 1
  %185 = load double, double* %184, align 8
  %186 = fneg double %183
  %187 = call double @llvm.fmuladd.f64(double %186, double %185, double %182)
  %188 = load i32, i32* %28, align 4
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds [4 x [2 x double]], [4 x [2 x double]]* %29, i64 0, i64 %189
  %191 = getelementptr inbounds [2 x double], [2 x double]* %190, i64 0, i64 1
  store double %187, double* %191, align 8
  %192 = load i32, i32* %28, align 4
  %193 = add nsw i32 %192, 1
  store i32 %193, i32* %28, align 4
  br label %194

194:                                              ; preds = %141, %44
  store i32 0, i32* %34, align 4
  br label %195

195:                                              ; preds = %211, %194
  %196 = load i32, i32* %34, align 4
  %197 = load i32, i32* %28, align 4
  %198 = icmp slt i32 %196, %197
  br i1 %198, label %199, label %214

199:                                              ; preds = %195
  %200 = load double*, double** %18, align 8
  %201 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 0
  %202 = load i16, i16* %19, align 2
  %203 = load i32, i32* %34, align 4
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds [4 x [2 x double]], [4 x [2 x double]]* %29, i64 0, i64 %204
  %206 = getelementptr inbounds [2 x double], [2 x double]* %205, i64 0, i64 0
  %207 = call double @pointToAngle(double* noundef %200, double* noundef %201, i16 noundef signext %202, double* noundef %206)
  %208 = load i32, i32* %34, align 4
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds [4 x double], [4 x double]* %33, i64 0, i64 %209
  store double %207, double* %210, align 8
  br label %211

211:                                              ; preds = %199
  %212 = load i32, i32* %34, align 4
  %213 = add nsw i32 %212, 1
  store i32 %213, i32* %34, align 4
  br label %195, !llvm.loop !99

214:                                              ; preds = %195
  store i32 0, i32* %35, align 4
  br label %215

215:                                              ; preds = %238, %214
  %216 = load i32, i32* %35, align 4
  %217 = load i32, i32* %28, align 4
  %218 = icmp slt i32 %216, %217
  br i1 %218, label %219, label %241

219:                                              ; preds = %215
  %220 = load i32, i32* %35, align 4
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds [4 x double], [4 x double]* %33, i64 0, i64 %221
  %223 = load double, double* %222, align 8
  %224 = fcmp oeq double %223, 0.000000e+00
  br i1 %224, label %225, label %237

225:                                              ; preds = %219
  %226 = load i32, i32* %35, align 4
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds [4 x double], [4 x double]* %33, i64 0, i64 %227
  %229 = load double, double* %228, align 8
  %230 = call i32 @__signbit(double noundef %229) #8
  %231 = icmp ne i32 %230, 0
  %232 = zext i1 %231 to i64
  %233 = select i1 %231, double -1.000000e-10, double 1.000000e-10
  %234 = load i32, i32* %35, align 4
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds [4 x double], [4 x double]* %33, i64 0, i64 %235
  store double %233, double* %236, align 8
  br label %237

237:                                              ; preds = %225, %219
  br label %238

238:                                              ; preds = %237
  %239 = load i32, i32* %35, align 4
  %240 = add nsw i32 %239, 1
  store i32 %240, i32* %35, align 4
  br label %215, !llvm.loop !100

241:                                              ; preds = %215
  %242 = load i16, i16* %19, align 2
  %243 = sext i16 %242 to i32
  %244 = sitofp i32 %243 to double
  %245 = fmul double %244, 0x401921FB54442D18
  store double %245, double* %36, align 8
  store i32 0, i32* %37, align 4
  br label %246

246:                                              ; preds = %287, %241
  %247 = load i32, i32* %37, align 4
  %248 = load i32, i32* %28, align 4
  %249 = icmp slt i32 %247, %248
  br i1 %249, label %250, label %290

250:                                              ; preds = %246
  %251 = load i16, i16* %19, align 2
  %252 = sext i16 %251 to i32
  %253 = sitofp i32 %252 to double
  %254 = fcmp ogt double %253, 0.000000e+00
  br i1 %254, label %255, label %268

255:                                              ; preds = %250
  %256 = load i32, i32* %37, align 4
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds [4 x double], [4 x double]* %33, i64 0, i64 %257
  %259 = load double, double* %258, align 8
  %260 = fcmp ogt double %259, 0.000000e+00
  br i1 %260, label %261, label %268

261:                                              ; preds = %255
  %262 = load double, double* %36, align 8
  %263 = load i32, i32* %37, align 4
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds [4 x double], [4 x double]* %33, i64 0, i64 %264
  %266 = load double, double* %265, align 8
  %267 = call double @llvm.minnum.f64(double %262, double %266)
  store double %267, double* %36, align 8
  br label %268

268:                                              ; preds = %261, %255, %250
  %269 = load i16, i16* %19, align 2
  %270 = sext i16 %269 to i32
  %271 = sitofp i32 %270 to double
  %272 = fcmp olt double %271, 0.000000e+00
  br i1 %272, label %273, label %286

273:                                              ; preds = %268
  %274 = load i32, i32* %37, align 4
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds [4 x double], [4 x double]* %33, i64 0, i64 %275
  %277 = load double, double* %276, align 8
  %278 = fcmp olt double %277, 0.000000e+00
  br i1 %278, label %279, label %286

279:                                              ; preds = %273
  %280 = load double, double* %36, align 8
  %281 = load i32, i32* %37, align 4
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds [4 x double], [4 x double]* %33, i64 0, i64 %282
  %284 = load double, double* %283, align 8
  %285 = call double @llvm.maxnum.f64(double %280, double %284)
  store double %285, double* %36, align 8
  br label %286

286:                                              ; preds = %279, %273, %268
  br label %287

287:                                              ; preds = %286
  %288 = load i32, i32* %37, align 4
  %289 = add nsw i32 %288, 1
  store i32 %289, i32* %37, align 4
  br label %246, !llvm.loop !101

290:                                              ; preds = %246
  %291 = load double, double* %36, align 8
  %292 = call double @llvm.fabs.f64(double %291)
  %293 = fcmp oeq double %292, 0.000000e+00
  br i1 %293, label %298, label %294

294:                                              ; preds = %290
  %295 = load double, double* %36, align 8
  %296 = call double @llvm.fabs.f64(double %295)
  %297 = fcmp oeq double %296, 0x401921FB54442D18
  br i1 %297, label %298, label %307

298:                                              ; preds = %294, %290
  store double 0.000000e+00, double* %36, align 8
  store i16 0, i16* %38, align 2
  %299 = load i16, i16* %38, align 2
  %300 = icmp ne i16 %299, 0
  br i1 %300, label %301, label %306

301:                                              ; preds = %298
  %302 = getelementptr inbounds [2 x double], [2 x double]* %39, i64 0, i64 0
  %303 = load double, double* %14, align 8
  store double %303, double* %302, align 8
  %304 = getelementptr inbounds double, double* %302, i64 1
  %305 = load double, double* %15, align 8
  store double %305, double* %304, align 8
  br label %306

306:                                              ; preds = %301, %298
  br label %307

307:                                              ; preds = %306, %294
  %308 = load double, double* %36, align 8
  store double %308, double* %10, align 8
  br label %309

309:                                              ; preds = %307, %43
  %310 = load double, double* %10, align 8
  ret double %310
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @getCutPointsOfCircleAndLine(double* noundef %0, double noundef %1, double* noundef %2, double* noundef %3, double* noundef %4, double* noundef %5) #0 {
  %7 = alloca double*, align 8
  %8 = alloca double, align 8
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  %11 = alloca double*, align 8
  %12 = alloca double*, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca i16, align 2
  store double* %0, double** %7, align 8
  store double %1, double* %8, align 8
  store double* %2, double** %9, align 8
  store double* %3, double** %10, align 8
  store double* %4, double** %11, align 8
  store double* %5, double** %12, align 8
  %19 = load double*, double** %10, align 8
  %20 = getelementptr inbounds double, double* %19, i64 0
  %21 = load double, double* %20, align 8
  %22 = load double*, double** %10, align 8
  %23 = getelementptr inbounds double, double* %22, i64 0
  %24 = load double, double* %23, align 8
  %25 = load double*, double** %10, align 8
  %26 = getelementptr inbounds double, double* %25, i64 1
  %27 = load double, double* %26, align 8
  %28 = load double*, double** %10, align 8
  %29 = getelementptr inbounds double, double* %28, i64 1
  %30 = load double, double* %29, align 8
  %31 = fmul double %27, %30
  %32 = call double @llvm.fmuladd.f64(double %21, double %24, double %31)
  store double %32, double* %13, align 8
  %33 = load double*, double** %10, align 8
  %34 = getelementptr inbounds double, double* %33, i64 0
  %35 = load double, double* %34, align 8
  %36 = fmul double 2.000000e+00, %35
  %37 = load double*, double** %9, align 8
  %38 = getelementptr inbounds double, double* %37, i64 0
  %39 = load double, double* %38, align 8
  %40 = load double*, double** %7, align 8
  %41 = getelementptr inbounds double, double* %40, i64 0
  %42 = load double, double* %41, align 8
  %43 = fsub double %39, %42
  %44 = load double*, double** %10, align 8
  %45 = getelementptr inbounds double, double* %44, i64 1
  %46 = load double, double* %45, align 8
  %47 = fmul double 2.000000e+00, %46
  %48 = load double*, double** %9, align 8
  %49 = getelementptr inbounds double, double* %48, i64 1
  %50 = load double, double* %49, align 8
  %51 = load double*, double** %7, align 8
  %52 = getelementptr inbounds double, double* %51, i64 1
  %53 = load double, double* %52, align 8
  %54 = fsub double %50, %53
  %55 = fmul double %47, %54
  %56 = call double @llvm.fmuladd.f64(double %36, double %43, double %55)
  store double %56, double* %14, align 8
  %57 = load double*, double** %9, align 8
  %58 = getelementptr inbounds double, double* %57, i64 0
  %59 = load double, double* %58, align 8
  %60 = load double*, double** %7, align 8
  %61 = getelementptr inbounds double, double* %60, i64 0
  %62 = load double, double* %61, align 8
  %63 = fsub double %59, %62
  %64 = load double*, double** %9, align 8
  %65 = getelementptr inbounds double, double* %64, i64 0
  %66 = load double, double* %65, align 8
  %67 = load double*, double** %7, align 8
  %68 = getelementptr inbounds double, double* %67, i64 0
  %69 = load double, double* %68, align 8
  %70 = fsub double %66, %69
  %71 = load double*, double** %9, align 8
  %72 = getelementptr inbounds double, double* %71, i64 1
  %73 = load double, double* %72, align 8
  %74 = load double*, double** %7, align 8
  %75 = getelementptr inbounds double, double* %74, i64 1
  %76 = load double, double* %75, align 8
  %77 = fsub double %73, %76
  %78 = load double*, double** %9, align 8
  %79 = getelementptr inbounds double, double* %78, i64 1
  %80 = load double, double* %79, align 8
  %81 = load double*, double** %7, align 8
  %82 = getelementptr inbounds double, double* %81, i64 1
  %83 = load double, double* %82, align 8
  %84 = fsub double %80, %83
  %85 = fmul double %77, %84
  %86 = call double @llvm.fmuladd.f64(double %63, double %70, double %85)
  %87 = load double, double* %8, align 8
  %88 = load double, double* %8, align 8
  %89 = fneg double %87
  %90 = call double @llvm.fmuladd.f64(double %89, double %88, double %86)
  store double %90, double* %15, align 8
  %91 = load double, double* %13, align 8
  %92 = load double, double* %14, align 8
  %93 = load double, double* %15, align 8
  %94 = call signext i16 @solveSquareEquation(double noundef %91, double noundef %92, double noundef %93, double* noundef %16, double* noundef %17)
  store i16 %94, i16* %18, align 2
  %95 = load i16, i16* %18, align 2
  %96 = sext i16 %95 to i32
  %97 = icmp sgt i32 %96, 0
  br i1 %97, label %98, label %119

98:                                               ; preds = %6
  %99 = load double*, double** %9, align 8
  %100 = getelementptr inbounds double, double* %99, i64 0
  %101 = load double, double* %100, align 8
  %102 = load double, double* %16, align 8
  %103 = load double*, double** %10, align 8
  %104 = getelementptr inbounds double, double* %103, i64 0
  %105 = load double, double* %104, align 8
  %106 = call double @llvm.fmuladd.f64(double %102, double %105, double %101)
  %107 = load double*, double** %11, align 8
  %108 = getelementptr inbounds double, double* %107, i64 0
  store double %106, double* %108, align 8
  %109 = load double*, double** %9, align 8
  %110 = getelementptr inbounds double, double* %109, i64 1
  %111 = load double, double* %110, align 8
  %112 = load double, double* %16, align 8
  %113 = load double*, double** %10, align 8
  %114 = getelementptr inbounds double, double* %113, i64 1
  %115 = load double, double* %114, align 8
  %116 = call double @llvm.fmuladd.f64(double %112, double %115, double %111)
  %117 = load double*, double** %11, align 8
  %118 = getelementptr inbounds double, double* %117, i64 1
  store double %116, double* %118, align 8
  br label %119

119:                                              ; preds = %98, %6
  %120 = load i16, i16* %18, align 2
  %121 = sext i16 %120 to i32
  %122 = icmp sgt i32 %121, 1
  br i1 %122, label %123, label %144

123:                                              ; preds = %119
  %124 = load double*, double** %9, align 8
  %125 = getelementptr inbounds double, double* %124, i64 0
  %126 = load double, double* %125, align 8
  %127 = load double, double* %17, align 8
  %128 = load double*, double** %10, align 8
  %129 = getelementptr inbounds double, double* %128, i64 0
  %130 = load double, double* %129, align 8
  %131 = call double @llvm.fmuladd.f64(double %127, double %130, double %126)
  %132 = load double*, double** %12, align 8
  %133 = getelementptr inbounds double, double* %132, i64 0
  store double %131, double* %133, align 8
  %134 = load double*, double** %9, align 8
  %135 = getelementptr inbounds double, double* %134, i64 1
  %136 = load double, double* %135, align 8
  %137 = load double, double* %17, align 8
  %138 = load double*, double** %10, align 8
  %139 = getelementptr inbounds double, double* %138, i64 1
  %140 = load double, double* %139, align 8
  %141 = call double @llvm.fmuladd.f64(double %137, double %140, double %136)
  %142 = load double*, double** %12, align 8
  %143 = getelementptr inbounds double, double* %142, i64 1
  store double %141, double* %143, align 8
  br label %144

144:                                              ; preds = %123, %119
  %145 = load i16, i16* %18, align 2
  ret i16 %145
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @pointToAngle(double* noundef %0, double* noundef %1, i16 noundef signext %2, double* noundef %3) #0 {
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca i16, align 2
  %8 = alloca double*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca [2 x double], align 16
  %11 = alloca double, align 8
  %12 = alloca i16, align 2
  store double* %0, double** %5, align 8
  store double* %1, double** %6, align 8
  store i16 %2, i16* %7, align 2
  store double* %3, double** %8, align 8
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0), i8** %9, align 8
  %13 = load double*, double** %5, align 8
  %14 = load double*, double** %8, align 8
  %15 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  call void @vector(double* noundef %13, double* noundef %14, double* noundef %15)
  %16 = load double*, double** %6, align 8
  %17 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %18 = call double @angleBetweenVectors2D(double* noundef %16, double* noundef %17)
  store double %18, double* %11, align 8
  %19 = load double*, double** %5, align 8
  %20 = load double*, double** %6, align 8
  %21 = load double*, double** %8, align 8
  %22 = call signext i16 @isToTheRightPointVector(double* noundef %19, double* noundef %20, double* noundef %21)
  store i16 %22, i16* %12, align 2
  %23 = load i16, i16* %7, align 2
  %24 = sext i16 %23 to i32
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %26, label %31

26:                                               ; preds = %4
  %27 = load i16, i16* %12, align 2
  %28 = sext i16 %27 to i32
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %26
  br label %65

31:                                               ; preds = %26, %4
  %32 = load i16, i16* %7, align 2
  %33 = sext i16 %32 to i32
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %35, label %41

35:                                               ; preds = %31
  %36 = load i16, i16* %12, align 2
  %37 = icmp ne i16 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %35
  %39 = load double, double* %11, align 8
  %40 = fsub double 0x401921FB54442D18, %39
  store double %40, double* %11, align 8
  br label %64

41:                                               ; preds = %35, %31
  %42 = load i16, i16* %7, align 2
  %43 = sext i16 %42 to i32
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %45, label %52

45:                                               ; preds = %41
  %46 = load i16, i16* %12, align 2
  %47 = sext i16 %46 to i32
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %45
  %50 = load double, double* %11, align 8
  %51 = fadd double 0xC01921FB54442D18, %50
  store double %51, double* %11, align 8
  br label %63

52:                                               ; preds = %45, %41
  %53 = load i16, i16* %7, align 2
  %54 = sext i16 %53 to i32
  %55 = icmp slt i32 %54, 0
  br i1 %55, label %56, label %62

56:                                               ; preds = %52
  %57 = load i16, i16* %12, align 2
  %58 = icmp ne i16 %57, 0
  br i1 %58, label %62, label %59

59:                                               ; preds = %56
  %60 = load double, double* %11, align 8
  %61 = fneg double %60
  store double %61, double* %11, align 8
  br label %62

62:                                               ; preds = %59, %56, %52
  br label %63

63:                                               ; preds = %62, %49
  br label %64

64:                                               ; preds = %63, %38
  br label %65

65:                                               ; preds = %64, %30
  %66 = load double, double* %11, align 8
  ret double %66
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @circle(double* noundef %0, double* noundef %1, double* noundef %2, double* noundef %3, double* noundef %4) #0 {
  %6 = alloca double*, align 8
  %7 = alloca double*, align 8
  %8 = alloca double*, align 8
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  %11 = alloca [3 x double], align 16
  %12 = alloca [3 x double], align 16
  %13 = alloca [3 x double], align 16
  %14 = alloca [3 x double], align 16
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  store double* %0, double** %6, align 8
  store double* %1, double** %7, align 8
  store double* %2, double** %8, align 8
  store double* %3, double** %9, align 8
  store double* %4, double** %10, align 8
  %18 = getelementptr inbounds [3 x double], [3 x double]* %11, i64 0, i64 0
  store double 1.000000e+00, double* %18, align 16
  %19 = getelementptr inbounds [3 x double], [3 x double]* %11, i64 0, i64 1
  store double 1.000000e+00, double* %19, align 8
  %20 = getelementptr inbounds [3 x double], [3 x double]* %11, i64 0, i64 2
  store double 1.000000e+00, double* %20, align 16
  %21 = load double*, double** %6, align 8
  %22 = getelementptr inbounds double, double* %21, i64 0
  %23 = load double, double* %22, align 8
  %24 = fneg double %23
  %25 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 0
  store double %24, double* %25, align 16
  %26 = load double*, double** %7, align 8
  %27 = getelementptr inbounds double, double* %26, i64 0
  %28 = load double, double* %27, align 8
  %29 = fneg double %28
  %30 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 1
  store double %29, double* %30, align 8
  %31 = load double*, double** %8, align 8
  %32 = getelementptr inbounds double, double* %31, i64 0
  %33 = load double, double* %32, align 8
  %34 = fneg double %33
  %35 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 2
  store double %34, double* %35, align 16
  %36 = load double*, double** %6, align 8
  %37 = getelementptr inbounds double, double* %36, i64 1
  %38 = load double, double* %37, align 8
  %39 = fneg double %38
  %40 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 0
  store double %39, double* %40, align 16
  %41 = load double*, double** %7, align 8
  %42 = getelementptr inbounds double, double* %41, i64 1
  %43 = load double, double* %42, align 8
  %44 = fneg double %43
  %45 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 1
  store double %44, double* %45, align 8
  %46 = load double*, double** %8, align 8
  %47 = getelementptr inbounds double, double* %46, i64 1
  %48 = load double, double* %47, align 8
  %49 = fneg double %48
  %50 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 2
  store double %49, double* %50, align 16
  %51 = load double*, double** %6, align 8
  %52 = getelementptr inbounds double, double* %51, i64 0
  %53 = load double, double* %52, align 8
  %54 = load double*, double** %6, align 8
  %55 = getelementptr inbounds double, double* %54, i64 0
  %56 = load double, double* %55, align 8
  %57 = load double*, double** %6, align 8
  %58 = getelementptr inbounds double, double* %57, i64 1
  %59 = load double, double* %58, align 8
  %60 = load double*, double** %6, align 8
  %61 = getelementptr inbounds double, double* %60, i64 1
  %62 = load double, double* %61, align 8
  %63 = fmul double %59, %62
  %64 = call double @llvm.fmuladd.f64(double %53, double %56, double %63)
  %65 = fneg double %64
  %66 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 0
  store double %65, double* %66, align 16
  %67 = load double*, double** %7, align 8
  %68 = getelementptr inbounds double, double* %67, i64 0
  %69 = load double, double* %68, align 8
  %70 = load double*, double** %7, align 8
  %71 = getelementptr inbounds double, double* %70, i64 0
  %72 = load double, double* %71, align 8
  %73 = load double*, double** %7, align 8
  %74 = getelementptr inbounds double, double* %73, i64 1
  %75 = load double, double* %74, align 8
  %76 = load double*, double** %7, align 8
  %77 = getelementptr inbounds double, double* %76, i64 1
  %78 = load double, double* %77, align 8
  %79 = fmul double %75, %78
  %80 = call double @llvm.fmuladd.f64(double %69, double %72, double %79)
  %81 = fneg double %80
  %82 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 1
  store double %81, double* %82, align 8
  %83 = load double*, double** %8, align 8
  %84 = getelementptr inbounds double, double* %83, i64 0
  %85 = load double, double* %84, align 8
  %86 = load double*, double** %8, align 8
  %87 = getelementptr inbounds double, double* %86, i64 0
  %88 = load double, double* %87, align 8
  %89 = load double*, double** %8, align 8
  %90 = getelementptr inbounds double, double* %89, i64 1
  %91 = load double, double* %90, align 8
  %92 = load double*, double** %8, align 8
  %93 = getelementptr inbounds double, double* %92, i64 1
  %94 = load double, double* %93, align 8
  %95 = fmul double %91, %94
  %96 = call double @llvm.fmuladd.f64(double %85, double %88, double %95)
  %97 = fneg double %96
  %98 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 2
  store double %97, double* %98, align 16
  %99 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 0
  %100 = load double, double* %99, align 16
  %101 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 1
  %102 = load double, double* %101, align 8
  %103 = fsub double %102, %100
  store double %103, double* %101, align 8
  %104 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 0
  %105 = load double, double* %104, align 16
  %106 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 1
  %107 = load double, double* %106, align 8
  %108 = fsub double %107, %105
  store double %108, double* %106, align 8
  %109 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 0
  %110 = load double, double* %109, align 16
  %111 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 2
  %112 = load double, double* %111, align 16
  %113 = fsub double %112, %110
  store double %113, double* %111, align 16
  %114 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 0
  %115 = load double, double* %114, align 16
  %116 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 2
  %117 = load double, double* %116, align 16
  %118 = fsub double %117, %115
  store double %118, double* %116, align 16
  %119 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 0
  %120 = load double, double* %119, align 16
  %121 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 1
  %122 = load double, double* %121, align 8
  %123 = fsub double %122, %120
  store double %123, double* %121, align 8
  %124 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 0
  %125 = load double, double* %124, align 16
  %126 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 2
  %127 = load double, double* %126, align 16
  %128 = fsub double %127, %125
  store double %128, double* %126, align 16
  %129 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 1
  %130 = load double, double* %129, align 8
  %131 = call double @llvm.fabs.f64(double %130)
  %132 = fcmp olt double %131, 0x3E7AD7F29ABCAF48
  br i1 %132, label %133, label %154

133:                                              ; preds = %5
  %134 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 1
  %135 = load double, double* %134, align 8
  %136 = call double @llvm.fabs.f64(double %135)
  %137 = fcmp ogt double %136, 0x3E7AD7F29ABCAF48
  br i1 %137, label %138, label %154

138:                                              ; preds = %133
  %139 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 1
  %140 = load double, double* %139, align 8
  %141 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 1
  %142 = load double, double* %141, align 8
  %143 = fdiv double %140, %142
  store double %143, double* %17, align 8
  %144 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 2
  %145 = load double, double* %144, align 16
  %146 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 2
  %147 = load double, double* %146, align 16
  %148 = load double, double* %17, align 8
  %149 = fneg double %147
  %150 = call double @llvm.fmuladd.f64(double %149, double %148, double %145)
  %151 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 2
  %152 = load double, double* %151, align 16
  %153 = fdiv double %150, %152
  store double %153, double* %16, align 8
  br label %265

154:                                              ; preds = %133, %5
  %155 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 2
  %156 = load double, double* %155, align 16
  %157 = call double @llvm.fabs.f64(double %156)
  %158 = fcmp olt double %157, 0x3E7AD7F29ABCAF48
  br i1 %158, label %159, label %180

159:                                              ; preds = %154
  %160 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 2
  %161 = load double, double* %160, align 16
  %162 = call double @llvm.fabs.f64(double %161)
  %163 = fcmp ogt double %162, 0x3E7AD7F29ABCAF48
  br i1 %163, label %164, label %180

164:                                              ; preds = %159
  %165 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 2
  %166 = load double, double* %165, align 16
  %167 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 2
  %168 = load double, double* %167, align 16
  %169 = fdiv double %166, %168
  store double %169, double* %17, align 8
  %170 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 1
  %171 = load double, double* %170, align 8
  %172 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 1
  %173 = load double, double* %172, align 8
  %174 = load double, double* %17, align 8
  %175 = fneg double %173
  %176 = call double @llvm.fmuladd.f64(double %175, double %174, double %171)
  %177 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 1
  %178 = load double, double* %177, align 8
  %179 = fdiv double %176, %178
  store double %179, double* %16, align 8
  br label %264

180:                                              ; preds = %159, %154
  %181 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 1
  %182 = load double, double* %181, align 8
  %183 = call double @llvm.fabs.f64(double %182)
  %184 = fcmp olt double %183, 0x3E7AD7F29ABCAF48
  br i1 %184, label %185, label %201

185:                                              ; preds = %180
  %186 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 1
  %187 = load double, double* %186, align 8
  %188 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 1
  %189 = load double, double* %188, align 8
  %190 = fdiv double %187, %189
  store double %190, double* %16, align 8
  %191 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 2
  %192 = load double, double* %191, align 16
  %193 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 2
  %194 = load double, double* %193, align 16
  %195 = load double, double* %16, align 8
  %196 = fneg double %194
  %197 = call double @llvm.fmuladd.f64(double %196, double %195, double %192)
  %198 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 2
  %199 = load double, double* %198, align 16
  %200 = fdiv double %197, %199
  store double %200, double* %17, align 8
  br label %263

201:                                              ; preds = %180
  %202 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 2
  %203 = load double, double* %202, align 16
  %204 = call double @llvm.fabs.f64(double %203)
  %205 = fcmp olt double %204, 0x3E7AD7F29ABCAF48
  br i1 %205, label %206, label %222

206:                                              ; preds = %201
  %207 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 2
  %208 = load double, double* %207, align 16
  %209 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 2
  %210 = load double, double* %209, align 16
  %211 = fdiv double %208, %210
  store double %211, double* %16, align 8
  %212 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 1
  %213 = load double, double* %212, align 8
  %214 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 1
  %215 = load double, double* %214, align 8
  %216 = load double, double* %16, align 8
  %217 = fneg double %215
  %218 = call double @llvm.fmuladd.f64(double %217, double %216, double %213)
  %219 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 1
  %220 = load double, double* %219, align 8
  %221 = fdiv double %218, %220
  store double %221, double* %17, align 8
  br label %262

222:                                              ; preds = %201
  %223 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 2
  %224 = load double, double* %223, align 16
  %225 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 1
  %226 = load double, double* %225, align 8
  %227 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 1
  %228 = load double, double* %227, align 8
  %229 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 2
  %230 = load double, double* %229, align 16
  %231 = fmul double %228, %230
  %232 = fneg double %231
  %233 = call double @llvm.fmuladd.f64(double %224, double %226, double %232)
  %234 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 2
  store double %233, double* %234, align 16
  %235 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 2
  %236 = load double, double* %235, align 16
  %237 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 1
  %238 = load double, double* %237, align 8
  %239 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 1
  %240 = load double, double* %239, align 8
  %241 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 2
  %242 = load double, double* %241, align 16
  %243 = fmul double %240, %242
  %244 = fneg double %243
  %245 = call double @llvm.fmuladd.f64(double %236, double %238, double %244)
  %246 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 2
  store double %245, double* %246, align 16
  %247 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 2
  %248 = load double, double* %247, align 16
  %249 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 2
  %250 = load double, double* %249, align 16
  %251 = fdiv double %248, %250
  store double %251, double* %17, align 8
  %252 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 1
  %253 = load double, double* %252, align 8
  %254 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 1
  %255 = load double, double* %254, align 8
  %256 = load double, double* %17, align 8
  %257 = fneg double %255
  %258 = call double @llvm.fmuladd.f64(double %257, double %256, double %253)
  %259 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 1
  %260 = load double, double* %259, align 8
  %261 = fdiv double %258, %260
  store double %261, double* %16, align 8
  br label %262

262:                                              ; preds = %222, %206
  br label %263

263:                                              ; preds = %262, %185
  br label %264

264:                                              ; preds = %263, %164
  br label %265

265:                                              ; preds = %264, %138
  %266 = getelementptr inbounds [3 x double], [3 x double]* %14, i64 0, i64 0
  %267 = load double, double* %266, align 16
  %268 = getelementptr inbounds [3 x double], [3 x double]* %12, i64 0, i64 0
  %269 = load double, double* %268, align 16
  %270 = load double, double* %16, align 8
  %271 = fneg double %269
  %272 = call double @llvm.fmuladd.f64(double %271, double %270, double %267)
  %273 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 0
  %274 = load double, double* %273, align 16
  %275 = load double, double* %17, align 8
  %276 = fneg double %274
  %277 = call double @llvm.fmuladd.f64(double %276, double %275, double %272)
  store double %277, double* %15, align 8
  %278 = load double, double* %16, align 8
  %279 = fdiv double %278, 2.000000e+00
  %280 = load double*, double** %9, align 8
  %281 = getelementptr inbounds double, double* %280, i64 0
  store double %279, double* %281, align 8
  %282 = load double, double* %17, align 8
  %283 = fdiv double %282, 2.000000e+00
  %284 = load double*, double** %9, align 8
  %285 = getelementptr inbounds double, double* %284, i64 1
  store double %283, double* %285, align 8
  %286 = load double*, double** %9, align 8
  %287 = getelementptr inbounds double, double* %286, i64 0
  %288 = load double, double* %287, align 8
  %289 = load double*, double** %9, align 8
  %290 = getelementptr inbounds double, double* %289, i64 0
  %291 = load double, double* %290, align 8
  %292 = load double*, double** %9, align 8
  %293 = getelementptr inbounds double, double* %292, i64 1
  %294 = load double, double* %293, align 8
  %295 = load double*, double** %9, align 8
  %296 = getelementptr inbounds double, double* %295, i64 1
  %297 = load double, double* %296, align 8
  %298 = fmul double %294, %297
  %299 = call double @llvm.fmuladd.f64(double %288, double %291, double %298)
  %300 = load double, double* %15, align 8
  %301 = fsub double %299, %300
  %302 = call double @sqrt(double noundef %301) #7
  %303 = load double*, double** %10, align 8
  store double %302, double* %303, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @getBoundingWedge(%struct.configtree* noundef %0, i32 noundef %1, double* noundef %2, double* noundef %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca i32, align 4
  %7 = alloca double*, align 8
  %8 = alloca double*, align 8
  %9 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store i32 %1, i32* %6, align 4
  store double* %2, double** %7, align 8
  store double* %3, double** %8, align 8
  %10 = load %struct.configtree*, %struct.configtree** %5, align 8
  %11 = load i32, i32* %6, align 4
  %12 = call %struct.configtree* @getChild(%struct.configtree* noundef %10, i32 noundef %11)
  store %struct.configtree* %12, %struct.configtree** %9, align 8
  %13 = load %struct.configtree*, %struct.configtree** %5, align 8
  %14 = load %struct.configtree*, %struct.configtree** %9, align 8
  %15 = load double*, double** %7, align 8
  %16 = load double*, double** %8, align 8
  call void @getBoundingWedgeRec(%struct.configtree* noundef %13, %struct.configtree* noundef %14, double noundef 0.000000e+00, double* noundef %15, double* noundef %16)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @calcDeltasEquidistantIncrease(double noundef %0, i32 noundef %1, i16* noundef %2, double* noundef %3) #0 {
  %5 = alloca double, align 8
  %6 = alloca i32, align 4
  %7 = alloca i16*, align 8
  %8 = alloca double*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca double, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double, align 8
  %14 = alloca i32, align 4
  store double %0, double* %5, align 8
  store i32 %1, i32* %6, align 4
  store i16* %2, i16** %7, align 8
  store double* %3, double** %8, align 8
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.24, i64 0, i64 0), i8** %9, align 8
  %15 = load double, double* %5, align 8
  store double %15, double* %10, align 8
  store i32 0, i32* %11, align 4
  store i32 0, i32* %12, align 4
  br label %16

16:                                               ; preds = %31, %4
  %17 = load i32, i32* %12, align 4
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %34

20:                                               ; preds = %16
  %21 = load i16*, i16** %7, align 8
  %22 = load i32, i32* %12, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i16, i16* %21, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = icmp ne i16 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %20
  %28 = load i32, i32* %11, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %11, align 4
  br label %30

30:                                               ; preds = %27, %20
  br label %31

31:                                               ; preds = %30
  %32 = load i32, i32* %12, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %12, align 4
  br label %16, !llvm.loop !102

34:                                               ; preds = %16
  %35 = load double, double* %10, align 8
  %36 = load i32, i32* %11, align 4
  %37 = sitofp i32 %36 to double
  %38 = fdiv double %35, %37
  store double %38, double* %13, align 8
  store i32 0, i32* %14, align 4
  br label %39

39:                                               ; preds = %59, %34
  %40 = load i32, i32* %14, align 4
  %41 = load i32, i32* %6, align 4
  %42 = icmp slt i32 %40, %41
  br i1 %42, label %43, label %62

43:                                               ; preds = %39
  %44 = load i16*, i16** %7, align 8
  %45 = load i32, i32* %14, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i16, i16* %44, i64 %46
  %48 = load i16, i16* %47, align 2
  %49 = icmp ne i16 %48, 0
  br i1 %49, label %50, label %58

50:                                               ; preds = %43
  %51 = load double, double* %13, align 8
  %52 = load double*, double** %8, align 8
  %53 = load i32, i32* %14, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds double, double* %52, i64 %54
  %56 = load double, double* %55, align 8
  %57 = fadd double %56, %51
  store double %57, double* %55, align 8
  br label %58

58:                                               ; preds = %50, %43
  br label %59

59:                                               ; preds = %58
  %60 = load i32, i32* %14, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %14, align 4
  br label %39, !llvm.loop !103

62:                                               ; preds = %39
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @calcDeltasNearestNeighborsFirstDecrease(double noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, i16* noundef %4, double* noundef %5, double* noundef %6) #0 {
  %8 = alloca double, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i16*, align 8
  %13 = alloca double*, align 8
  %14 = alloca double*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca double, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32*, align 8
  %23 = alloca i16, align 2
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca double, align 8
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca double, align 8
  store double %0, double* %8, align 8
  store i32 %1, i32* %9, align 4
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store i16* %4, i16** %12, align 8
  store double* %5, double** %13, align 8
  store double* %6, double** %14, align 8
  store i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.25, i64 0, i64 0), i8** %15, align 8
  %32 = load double, double* %8, align 8
  store double %32, double* %16, align 8
  %33 = load i32, i32* %10, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %17, align 4
  %35 = load i32, i32* %17, align 4
  %36 = load i32, i32* %11, align 4
  %37 = icmp eq i32 %35, %36
  br i1 %37, label %38, label %39

38:                                               ; preds = %7
  store i32 -1, i32* %17, align 4
  br label %39

39:                                               ; preds = %38, %7
  %40 = load i32, i32* %9, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %18, align 4
  %42 = load i32, i32* %18, align 4
  %43 = load i32, i32* %11, align 4
  %44 = icmp eq i32 %42, %43
  br i1 %44, label %45, label %46

45:                                               ; preds = %39
  store i32 -1, i32* %18, align 4
  br label %46

46:                                               ; preds = %45, %39
  store i32 0, i32* %19, align 4
  %47 = load i32, i32* %10, align 4
  store i32 %47, i32* %20, align 4
  br label %48

48:                                               ; preds = %59, %46
  %49 = load i32, i32* %20, align 4
  %50 = load i32, i32* %9, align 4
  %51 = icmp ne i32 %49, %50
  br i1 %51, label %52, label %62

52:                                               ; preds = %48
  %53 = load i32, i32* %20, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %20, align 4
  %55 = load i32, i32* %20, align 4
  %56 = load i32, i32* %11, align 4
  %57 = icmp eq i32 %55, %56
  br i1 %57, label %58, label %59

58:                                               ; preds = %52
  store i32 -1, i32* %20, align 4
  br label %59

59:                                               ; preds = %58, %52
  %60 = load i32, i32* %19, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %19, align 4
  br label %48, !llvm.loop !104

62:                                               ; preds = %48
  %63 = load i32, i32* %19, align 4
  %64 = sdiv i32 %63, 2
  store i32 %64, i32* %21, align 4
  %65 = load i32, i32* %19, align 4
  %66 = sext i32 %65 to i64
  %67 = mul i64 %66, 4
  %68 = trunc i64 %67 to i32
  %69 = call i8* @vrna_alloc(i32 noundef %68)
  %70 = bitcast i8* %69 to i32*
  store i32* %70, i32** %22, align 8
  store i16 1, i16* %23, align 2
  br label %71

71:                                               ; preds = %229, %62
  %72 = load i16, i16* %23, align 2
  %73 = icmp ne i16 %72, 0
  br i1 %73, label %74, label %230

74:                                               ; preds = %71
  store i16 0, i16* %23, align 2
  store i32 0, i32* %24, align 4
  %75 = load i32, i32* %9, align 4
  store i32 %75, i32* %25, align 4
  %76 = load i32, i32* %25, align 4
  %77 = icmp eq i32 %76, -1
  br i1 %77, label %78, label %81

78:                                               ; preds = %74
  %79 = load i32, i32* %11, align 4
  %80 = sub nsw i32 %79, 1
  store i32 %80, i32* %25, align 4
  br label %81

81:                                               ; preds = %78, %74
  %82 = load i32, i32* %10, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %26, align 4
  %84 = load i32, i32* %26, align 4
  %85 = load i32, i32* %11, align 4
  %86 = icmp eq i32 %84, %85
  br i1 %86, label %87, label %88

87:                                               ; preds = %81
  store i32 0, i32* %26, align 4
  br label %88

88:                                               ; preds = %87, %81
  store i32 0, i32* %27, align 4
  br label %89

89:                                               ; preds = %139, %88
  %90 = load i32, i32* %27, align 4
  %91 = load i32, i32* %21, align 4
  %92 = icmp slt i32 %90, %91
  br i1 %92, label %93, label %142

93:                                               ; preds = %89
  %94 = load i16*, i16** %12, align 8
  %95 = load i32, i32* %25, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i16, i16* %94, i64 %96
  %98 = load i16, i16* %97, align 2
  %99 = icmp ne i16 %98, 0
  br i1 %99, label %100, label %108

100:                                              ; preds = %93
  %101 = load i32, i32* %25, align 4
  %102 = load i32*, i32** %22, align 8
  %103 = load i32, i32* %24, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i32, i32* %102, i64 %104
  store i32 %101, i32* %105, align 4
  %106 = load i32, i32* %24, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %24, align 4
  br label %108

108:                                              ; preds = %100, %93
  %109 = load i16*, i16** %12, align 8
  %110 = load i32, i32* %26, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i16, i16* %109, i64 %111
  %113 = load i16, i16* %112, align 2
  %114 = icmp ne i16 %113, 0
  br i1 %114, label %115, label %123

115:                                              ; preds = %108
  %116 = load i32, i32* %26, align 4
  %117 = load i32*, i32** %22, align 8
  %118 = load i32, i32* %24, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds i32, i32* %117, i64 %119
  store i32 %116, i32* %120, align 4
  %121 = load i32, i32* %24, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %24, align 4
  br label %123

123:                                              ; preds = %115, %108
  %124 = load i32, i32* %25, align 4
  %125 = add nsw i32 %124, -1
  store i32 %125, i32* %25, align 4
  %126 = load i32, i32* %25, align 4
  %127 = icmp eq i32 %126, -1
  br i1 %127, label %128, label %131

128:                                              ; preds = %123
  %129 = load i32, i32* %11, align 4
  %130 = sub nsw i32 %129, 1
  store i32 %130, i32* %25, align 4
  br label %131

131:                                              ; preds = %128, %123
  %132 = load i32, i32* %26, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %26, align 4
  %134 = load i32, i32* %26, align 4
  %135 = load i32, i32* %11, align 4
  %136 = icmp eq i32 %134, %135
  br i1 %136, label %137, label %138

137:                                              ; preds = %131
  store i32 0, i32* %26, align 4
  br label %138

138:                                              ; preds = %137, %131
  br label %139

139:                                              ; preds = %138
  %140 = load i32, i32* %27, align 4
  %141 = add nsw i32 %140, 1
  store i32 %141, i32* %27, align 4
  br label %89, !llvm.loop !105

142:                                              ; preds = %89
  %143 = load i32, i32* %21, align 4
  %144 = sitofp i32 %143 to double
  %145 = load i32, i32* %19, align 4
  %146 = sitofp i32 %145 to double
  %147 = fmul double 5.000000e-01, %146
  %148 = fcmp olt double %144, %147
  br i1 %148, label %149, label %165

149:                                              ; preds = %142
  %150 = load i32, i32* %25, align 4
  %151 = load i32*, i32** %22, align 8
  %152 = load i32, i32* %24, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i32, i32* %151, i64 %153
  store i32 %150, i32* %154, align 4
  %155 = load i32, i32* %24, align 4
  %156 = add nsw i32 %155, 1
  store i32 %156, i32* %24, align 4
  %157 = load i32, i32* %25, align 4
  %158 = add nsw i32 %157, -1
  store i32 %158, i32* %25, align 4
  %159 = load i32, i32* %25, align 4
  %160 = icmp eq i32 %159, -1
  br i1 %160, label %161, label %164

161:                                              ; preds = %149
  %162 = load i32, i32* %11, align 4
  %163 = sub nsw i32 %162, 1
  store i32 %163, i32* %25, align 4
  br label %164

164:                                              ; preds = %161, %149
  br label %165

165:                                              ; preds = %164, %142
  %166 = load i32, i32* %24, align 4
  %167 = icmp sgt i32 %166, 0
  br i1 %167, label %168, label %229

168:                                              ; preds = %165
  %169 = load double, double* %16, align 8
  %170 = load i32, i32* %24, align 4
  %171 = sitofp i32 %170 to double
  %172 = fdiv double %169, %171
  store double %172, double* %28, align 8
  store i32 0, i32* %29, align 4
  br label %173

173:                                              ; preds = %225, %168
  %174 = load i32, i32* %29, align 4
  %175 = load i32, i32* %24, align 4
  %176 = icmp slt i32 %174, %175
  br i1 %176, label %177, label %228

177:                                              ; preds = %173
  %178 = load i32*, i32** %22, align 8
  %179 = load i32, i32* %29, align 4
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds i32, i32* %178, i64 %180
  %182 = load i32, i32* %181, align 4
  store i32 %182, i32* %30, align 4
  %183 = load i16*, i16** %12, align 8
  %184 = load i32, i32* %30, align 4
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i16, i16* %183, i64 %185
  %187 = load i16, i16* %186, align 2
  %188 = icmp ne i16 %187, 0
  br i1 %188, label %189, label %224

189:                                              ; preds = %177
  %190 = load double*, double** %13, align 8
  %191 = load i32, i32* %30, align 4
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds double, double* %190, i64 %192
  %194 = load double, double* %193, align 8
  %195 = load double*, double** %14, align 8
  %196 = load i32, i32* %30, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds double, double* %195, i64 %197
  %199 = load double, double* %198, align 8
  %200 = fadd double %194, %199
  %201 = load double, double* %28, align 8
  %202 = call double @llvm.minnum.f64(double %200, double %201)
  %203 = fmul double -1.000000e+00, %202
  store double %203, double* %31, align 8
  %204 = load double, double* %31, align 8
  %205 = load double*, double** %14, align 8
  %206 = load i32, i32* %30, align 4
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds double, double* %205, i64 %207
  %209 = load double, double* %208, align 8
  %210 = fadd double %209, %204
  store double %210, double* %208, align 8
  %211 = load double, double* %31, align 8
  %212 = load double, double* %16, align 8
  %213 = fadd double %212, %211
  store double %213, double* %16, align 8
  %214 = load i16, i16* %23, align 2
  %215 = sext i16 %214 to i32
  %216 = icmp ne i32 %215, 0
  br i1 %216, label %220, label %217

217:                                              ; preds = %189
  %218 = load double, double* %31, align 8
  %219 = fcmp une double %218, 0.000000e+00
  br label %220

220:                                              ; preds = %217, %189
  %221 = phi i1 [ true, %189 ], [ %219, %217 ]
  %222 = zext i1 %221 to i32
  %223 = trunc i32 %222 to i16
  store i16 %223, i16* %23, align 2
  br label %224

224:                                              ; preds = %220, %177
  br label %225

225:                                              ; preds = %224
  %226 = load i32, i32* %29, align 4
  %227 = add nsw i32 %226, 1
  store i32 %227, i32* %29, align 4
  br label %173, !llvm.loop !106

228:                                              ; preds = %173
  br label %229

229:                                              ; preds = %228, %165
  br label %71, !llvm.loop !107

230:                                              ; preds = %71
  %231 = load i32*, i32** %22, align 8
  %232 = bitcast i32* %231 to i8*
  call void @free(i8* noundef %232) #7
  %233 = load double, double* %16, align 8
  ret double %233
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @calcDeltasMaximumFirstDecrease(double noundef %0, i32 noundef %1, i32 noundef %2, i32 noundef %3, double* noundef %4, double* noundef %5, double noundef %6) #0 {
  %8 = alloca double, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca double*, align 8
  %13 = alloca double*, align 8
  %14 = alloca double, align 8
  %15 = alloca i8*, align 8
  %16 = alloca double, align 8
  %17 = alloca i32, align 4
  %18 = alloca i16, align 2
  %19 = alloca double, align 8
  %20 = alloca i32, align 4
  %21 = alloca double, align 8
  %22 = alloca double, align 8
  %23 = alloca double, align 8
  %24 = alloca double, align 8
  %25 = alloca double, align 8
  %26 = alloca double, align 8
  %27 = alloca double, align 8
  %28 = alloca double, align 8
  %29 = alloca double, align 8
  store double %0, double* %8, align 8
  store i32 %1, i32* %9, align 4
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store double* %4, double** %12, align 8
  store double* %5, double** %13, align 8
  store double %6, double* %14, align 8
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.26, i64 0, i64 0), i8** %15, align 8
  %30 = load double, double* %8, align 8
  store double %30, double* %16, align 8
  store i16 1, i16* %18, align 2
  br label %31

31:                                               ; preds = %243, %7
  %32 = load i16, i16* %18, align 2
  %33 = icmp ne i16 %32, 0
  br i1 %33, label %34, label %247

34:                                               ; preds = %31
  store double 0.000000e+00, double* %19, align 8
  store i32 -1, i32* %20, align 4
  %35 = load i32, i32* %9, align 4
  %36 = icmp eq i32 %35, -1
  br i1 %36, label %37, label %99

37:                                               ; preds = %34
  store double 0.000000e+00, double* %21, align 8
  store i32 -1, i32* %17, align 4
  br label %38

38:                                               ; preds = %42, %37
  %39 = load i32, i32* %17, align 4
  %40 = load i32, i32* %10, align 4
  %41 = icmp ne i32 %39, %40
  br i1 %41, label %42, label %61

42:                                               ; preds = %38
  %43 = load i32, i32* %17, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %17, align 4
  %45 = load double*, double** %13, align 8
  %46 = load i32, i32* %17, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds double, double* %45, i64 %47
  %49 = load double, double* %48, align 8
  %50 = load double*, double** %12, align 8
  %51 = load i32, i32* %17, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds double, double* %50, i64 %52
  %54 = load double, double* %53, align 8
  %55 = fadd double %49, %54
  %56 = load double, double* %14, align 8
  %57 = call double @llvm.fmuladd.f64(double -2.000000e+00, double %56, double %55)
  store double %57, double* %22, align 8
  %58 = load double, double* %22, align 8
  %59 = load double, double* %21, align 8
  %60 = fadd double %59, %58
  store double %60, double* %21, align 8
  br label %38, !llvm.loop !108

61:                                               ; preds = %38
  br label %62

62:                                               ; preds = %94, %61
  %63 = load i32, i32* %17, align 4
  %64 = load i32, i32* %11, align 4
  %65 = sub nsw i32 %64, 1
  %66 = icmp ne i32 %63, %65
  br i1 %66, label %67, label %98

67:                                               ; preds = %62
  %68 = load i32, i32* %17, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %17, align 4
  %70 = load double*, double** %13, align 8
  %71 = load i32, i32* %17, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds double, double* %70, i64 %72
  %74 = load double, double* %73, align 8
  %75 = load double*, double** %12, align 8
  %76 = load i32, i32* %17, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds double, double* %75, i64 %77
  %79 = load double, double* %78, align 8
  %80 = fadd double %74, %79
  %81 = load double, double* %14, align 8
  %82 = call double @llvm.fmuladd.f64(double -2.000000e+00, double %81, double %80)
  store double %82, double* %23, align 8
  %83 = load double, double* %21, align 8
  %84 = fcmp olt double %83, 0x400921FB54442D18
  br i1 %84, label %85, label %93

85:                                               ; preds = %67
  %86 = load double, double* %23, align 8
  %87 = load double, double* %19, align 8
  %88 = fcmp ogt double %86, %87
  br i1 %88, label %89, label %92

89:                                               ; preds = %85
  %90 = load double, double* %23, align 8
  store double %90, double* %19, align 8
  %91 = load i32, i32* %17, align 4
  store i32 %91, i32* %20, align 4
  br label %92

92:                                               ; preds = %89, %85
  br label %94

93:                                               ; preds = %67
  br label %98

94:                                               ; preds = %92
  %95 = load double, double* %23, align 8
  %96 = load double, double* %21, align 8
  %97 = fadd double %96, %95
  store double %97, double* %21, align 8
  br label %62, !llvm.loop !109

98:                                               ; preds = %93, %62
  br label %210

99:                                               ; preds = %34
  %100 = load i32, i32* %10, align 4
  %101 = icmp eq i32 %100, -1
  br i1 %101, label %102, label %164

102:                                              ; preds = %99
  store double 0.000000e+00, double* %24, align 8
  %103 = load i32, i32* %11, align 4
  %104 = sub nsw i32 %103, 1
  store i32 %104, i32* %17, align 4
  br label %105

105:                                              ; preds = %109, %102
  %106 = load i32, i32* %17, align 4
  %107 = load i32, i32* %9, align 4
  %108 = icmp ne i32 %106, %107
  br i1 %108, label %109, label %128

109:                                              ; preds = %105
  %110 = load double*, double** %13, align 8
  %111 = load i32, i32* %17, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds double, double* %110, i64 %112
  %114 = load double, double* %113, align 8
  %115 = load double*, double** %12, align 8
  %116 = load i32, i32* %17, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds double, double* %115, i64 %117
  %119 = load double, double* %118, align 8
  %120 = fadd double %114, %119
  %121 = load double, double* %14, align 8
  %122 = call double @llvm.fmuladd.f64(double -2.000000e+00, double %121, double %120)
  store double %122, double* %25, align 8
  %123 = load double, double* %25, align 8
  %124 = load double, double* %24, align 8
  %125 = fadd double %124, %123
  store double %125, double* %24, align 8
  %126 = load i32, i32* %17, align 4
  %127 = add nsw i32 %126, -1
  store i32 %127, i32* %17, align 4
  br label %105, !llvm.loop !110

128:                                              ; preds = %105
  br label %129

129:                                              ; preds = %157, %128
  %130 = load i32, i32* %17, align 4
  %131 = icmp ne i32 %130, -1
  br i1 %131, label %132, label %163

132:                                              ; preds = %129
  %133 = load double*, double** %13, align 8
  %134 = load i32, i32* %17, align 4
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds double, double* %133, i64 %135
  %137 = load double, double* %136, align 8
  %138 = load double*, double** %12, align 8
  %139 = load i32, i32* %17, align 4
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds double, double* %138, i64 %140
  %142 = load double, double* %141, align 8
  %143 = fadd double %137, %142
  %144 = load double, double* %14, align 8
  %145 = call double @llvm.fmuladd.f64(double -2.000000e+00, double %144, double %143)
  store double %145, double* %26, align 8
  %146 = load double, double* %24, align 8
  %147 = fcmp olt double %146, 0x400921FB54442D18
  br i1 %147, label %148, label %156

148:                                              ; preds = %132
  %149 = load double, double* %26, align 8
  %150 = load double, double* %19, align 8
  %151 = fcmp ogt double %149, %150
  br i1 %151, label %152, label %155

152:                                              ; preds = %148
  %153 = load double, double* %26, align 8
  store double %153, double* %19, align 8
  %154 = load i32, i32* %17, align 4
  store i32 %154, i32* %20, align 4
  br label %155

155:                                              ; preds = %152, %148
  br label %157

156:                                              ; preds = %132
  br label %163

157:                                              ; preds = %155
  %158 = load double, double* %26, align 8
  %159 = load double, double* %24, align 8
  %160 = fadd double %159, %158
  store double %160, double* %24, align 8
  %161 = load i32, i32* %17, align 4
  %162 = add nsw i32 %161, -1
  store i32 %162, i32* %17, align 4
  br label %129, !llvm.loop !111

163:                                              ; preds = %156, %129
  br label %209

164:                                              ; preds = %99
  %165 = load i32, i32* %10, align 4
  store i32 %165, i32* %17, align 4
  %166 = load i32, i32* %17, align 4
  %167 = load i32, i32* %11, align 4
  %168 = sub nsw i32 %167, 1
  %169 = icmp eq i32 %166, %168
  br i1 %169, label %170, label %171

170:                                              ; preds = %164
  store i32 -1, i32* %17, align 4
  br label %171

171:                                              ; preds = %170, %164
  br label %172

172:                                              ; preds = %207, %171
  %173 = load i32, i32* %17, align 4
  %174 = load i32, i32* %9, align 4
  %175 = icmp ne i32 %173, %174
  br i1 %175, label %176, label %208

176:                                              ; preds = %172
  %177 = load double*, double** %13, align 8
  %178 = load i32, i32* %17, align 4
  %179 = add nsw i32 %178, 1
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds double, double* %177, i64 %180
  %182 = load double, double* %181, align 8
  %183 = load double*, double** %12, align 8
  %184 = load i32, i32* %17, align 4
  %185 = add nsw i32 %184, 1
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds double, double* %183, i64 %186
  %188 = load double, double* %187, align 8
  %189 = fadd double %182, %188
  %190 = load double, double* %14, align 8
  %191 = call double @llvm.fmuladd.f64(double -2.000000e+00, double %190, double %189)
  store double %191, double* %27, align 8
  %192 = load double, double* %27, align 8
  %193 = load double, double* %19, align 8
  %194 = fcmp ogt double %192, %193
  br i1 %194, label %195, label %199

195:                                              ; preds = %176
  %196 = load double, double* %27, align 8
  store double %196, double* %19, align 8
  %197 = load i32, i32* %17, align 4
  %198 = add nsw i32 %197, 1
  store i32 %198, i32* %20, align 4
  br label %199

199:                                              ; preds = %195, %176
  %200 = load i32, i32* %17, align 4
  %201 = add nsw i32 %200, 1
  store i32 %201, i32* %17, align 4
  %202 = load i32, i32* %17, align 4
  %203 = load i32, i32* %11, align 4
  %204 = sub nsw i32 %203, 1
  %205 = icmp eq i32 %202, %204
  br i1 %205, label %206, label %207

206:                                              ; preds = %199
  store i32 -1, i32* %17, align 4
  br label %207

207:                                              ; preds = %206, %199
  br label %172, !llvm.loop !112

208:                                              ; preds = %172
  br label %209

209:                                              ; preds = %208, %163
  br label %210

210:                                              ; preds = %209, %98
  store double 0.000000e+00, double* %28, align 8
  %211 = load i32, i32* %20, align 4
  %212 = icmp ne i32 %211, -1
  br i1 %212, label %213, label %236

213:                                              ; preds = %210
  %214 = load double, double* %16, align 8
  %215 = load double, double* %8, align 8
  %216 = fmul double 1.000000e-01, %215
  %217 = fcmp olt double %214, %216
  %218 = zext i1 %217 to i64
  %219 = select i1 %217, double 1.000000e+00, double 5.000000e-01
  store double %219, double* %29, align 8
  %220 = load double, double* %29, align 8
  %221 = load double, double* %19, align 8
  %222 = fmul double %220, %221
  %223 = load double, double* %16, align 8
  %224 = call double @llvm.minnum.f64(double %222, double %223)
  %225 = fmul double -1.000000e+00, %224
  store double %225, double* %28, align 8
  %226 = load double, double* %28, align 8
  %227 = load double*, double** %12, align 8
  %228 = load i32, i32* %20, align 4
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds double, double* %227, i64 %229
  %231 = load double, double* %230, align 8
  %232 = fadd double %231, %226
  store double %232, double* %230, align 8
  %233 = load double, double* %28, align 8
  %234 = load double, double* %16, align 8
  %235 = fadd double %234, %233
  store double %235, double* %16, align 8
  br label %236

236:                                              ; preds = %213, %210
  %237 = load double, double* %16, align 8
  %238 = fcmp ogt double %237, 0.000000e+00
  br i1 %238, label %239, label %243

239:                                              ; preds = %236
  %240 = load double, double* %28, align 8
  %241 = call double @llvm.fabs.f64(double %240)
  %242 = fcmp ogt double %241, 1.000000e-03
  br label %243

243:                                              ; preds = %239, %236
  %244 = phi i1 [ false, %236 ], [ %242, %239 ]
  %245 = zext i1 %244 to i32
  %246 = trunc i32 %245 to i16
  store i16 %246, i16* %18, align 2
  br label %31, !llvm.loop !113

247:                                              ; preds = %31
  %248 = load double, double* %16, align 8
  ret double %248
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @cfgIsValid(%struct.config* noundef %0, double* noundef %1) #0 {
  %3 = alloca i16, align 2
  %4 = alloca %struct.config*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double, align 8
  %7 = alloca i16, align 2
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  %10 = alloca i16, align 2
  %11 = alloca i16, align 2
  store %struct.config* %0, %struct.config** %4, align 8
  store double* %1, double** %5, align 8
  %12 = load double*, double** %5, align 8
  %13 = icmp eq double* %12, null
  br i1 %13, label %14, label %15

14:                                               ; preds = %2
  store i16 0, i16* %3, align 2
  br label %76

15:                                               ; preds = %2
  store double 0.000000e+00, double* %6, align 8
  store i16 1, i16* %7, align 2
  store i32 0, i32* %8, align 4
  br label %16

16:                                               ; preds = %55, %15
  %17 = load i32, i32* %8, align 4
  %18 = load %struct.config*, %struct.config** %4, align 8
  %19 = getelementptr inbounds %struct.config, %struct.config* %18, i32 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = icmp slt i32 %17, %20
  br i1 %21, label %22, label %58

22:                                               ; preds = %16
  %23 = load %struct.config*, %struct.config** %4, align 8
  %24 = load i32, i32* %8, align 4
  %25 = call double @getArcAngle(%struct.config* noundef %23, i32 noundef %24)
  %26 = load double*, double** %5, align 8
  %27 = load i32, i32* %8, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds double, double* %26, i64 %28
  %30 = load double, double* %29, align 8
  %31 = fadd double %25, %30
  store double %31, double* %9, align 8
  %32 = load double, double* %9, align 8
  %33 = load double, double* %6, align 8
  %34 = fadd double %33, %32
  store double %34, double* %6, align 8
  %35 = load double, double* %9, align 8
  %36 = fcmp olt double 0.000000e+00, %35
  br i1 %36, label %37, label %40

37:                                               ; preds = %22
  %38 = load double, double* %9, align 8
  %39 = fcmp olt double %38, 0x401921FB54442D18
  br label %40

40:                                               ; preds = %37, %22
  %41 = phi i1 [ false, %22 ], [ %39, %37 ]
  %42 = zext i1 %41 to i32
  %43 = trunc i32 %42 to i16
  store i16 %43, i16* %10, align 2
  %44 = load i16, i16* %7, align 2
  %45 = sext i16 %44 to i32
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %40
  %48 = load i16, i16* %10, align 2
  %49 = sext i16 %48 to i32
  %50 = icmp ne i32 %49, 0
  br label %51

51:                                               ; preds = %47, %40
  %52 = phi i1 [ false, %40 ], [ %50, %47 ]
  %53 = zext i1 %52 to i32
  %54 = trunc i32 %53 to i16
  store i16 %54, i16* %7, align 2
  br label %55

55:                                               ; preds = %51
  %56 = load i32, i32* %8, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %8, align 4
  br label %16, !llvm.loop !114

58:                                               ; preds = %16
  %59 = load double, double* %6, align 8
  %60 = fsub double %59, 0x401921FB54442D18
  %61 = call double @llvm.fabs.f64(double %60)
  %62 = fcmp olt double %61, 1.000000e-03
  %63 = zext i1 %62 to i32
  %64 = trunc i32 %63 to i16
  store i16 %64, i16* %11, align 2
  %65 = load i16, i16* %7, align 2
  %66 = sext i16 %65 to i32
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %72

68:                                               ; preds = %58
  %69 = load i16, i16* %11, align 2
  %70 = sext i16 %69 to i32
  %71 = icmp ne i32 %70, 0
  br label %72

72:                                               ; preds = %68, %58
  %73 = phi i1 [ false, %58 ], [ %71, %68 ]
  %74 = zext i1 %73 to i32
  %75 = trunc i32 %74 to i16
  store i16 %75, i16* %3, align 2
  br label %76

76:                                               ; preds = %72, %14
  %77 = load i16, i16* %3, align 2
  ret i16 %77
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @getBoundingWedgeRec(%struct.configtree* noundef %0, %struct.configtree* noundef %1, double noundef %2, double* noundef %3, double* noundef %4) #0 {
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca double, align 8
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  %11 = alloca double, align 8
  %12 = alloca %struct.configtree*, align 8
  %13 = alloca [2 x double], align 16
  %14 = alloca [2 x double], align 16
  %15 = alloca [2 x double], align 16
  %16 = alloca double, align 8
  %17 = alloca [2 x double], align 16
  %18 = alloca [2 x double], align 16
  %19 = alloca double, align 8
  %20 = alloca %struct.boundingboxLoop*, align 8
  %21 = alloca %struct.boundingboxStem*, align 8
  %22 = alloca i32, align 4
  %23 = alloca double**, align 8
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca [2 x double], align 16
  %27 = alloca [2 x double], align 16
  %28 = alloca double*, align 8
  %29 = alloca double*, align 8
  %30 = alloca double*, align 8
  %31 = alloca double, align 8
  %32 = alloca double, align 8
  %33 = alloca double, align 8
  %34 = alloca double, align 8
  %35 = alloca [2 x double], align 16
  %36 = alloca i32, align 4
  %37 = alloca double, align 8
  %38 = alloca double, align 8
  %39 = alloca i32, align 4
  %40 = alloca double*, align 8
  %41 = alloca [2 x double], align 16
  %42 = alloca double, align 8
  %43 = alloca double, align 8
  %44 = alloca double, align 8
  %45 = alloca i32, align 4
  %46 = alloca double*, align 8
  %47 = alloca i32, align 4
  %48 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %6, align 8
  store %struct.configtree* %1, %struct.configtree** %7, align 8
  store double %2, double* %8, align 8
  store double* %3, double** %9, align 8
  store double* %4, double** %10, align 8
  store double 1.900000e+01, double* %11, align 8
  %49 = load %struct.configtree*, %struct.configtree** %7, align 8
  %50 = call %struct.configtree* @getParent(%struct.configtree* noundef %49)
  store %struct.configtree* %50, %struct.configtree** %12, align 8
  %51 = load %struct.configtree*, %struct.configtree** %6, align 8
  %52 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  call void @getLoopCenter(%struct.configtree* noundef %51, double* noundef %52)
  %53 = load %struct.configtree*, %struct.configtree** %7, align 8
  %54 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  call void @getLoopCenter(%struct.configtree* noundef %53, double* noundef %54)
  %55 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %56 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %57 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  call void @vector(double* noundef %55, double* noundef %56, double* noundef %57)
  %58 = load %struct.configtree*, %struct.configtree** %12, align 8
  %59 = load %struct.configtree*, %struct.configtree** %6, align 8
  %60 = icmp eq %struct.configtree* %58, %59
  br i1 %60, label %61, label %69

61:                                               ; preds = %5
  %62 = load %struct.configtree*, %struct.configtree** %6, align 8
  %63 = load %struct.configtree*, %struct.configtree** %7, align 8
  %64 = call double @getChildAngle(%struct.configtree* noundef %62, %struct.configtree* noundef %63)
  store double %64, double* %16, align 8
  %65 = load double, double* %16, align 8
  %66 = load double*, double** %9, align 8
  store double %65, double* %66, align 8
  %67 = load double, double* %16, align 8
  %68 = load double*, double** %10, align 8
  store double %67, double* %68, align 8
  br label %90

69:                                               ; preds = %5
  %70 = load %struct.configtree*, %struct.configtree** %12, align 8
  %71 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  call void @getLoopCenter(%struct.configtree* noundef %70, double* noundef %71)
  %72 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %73 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %74 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 0
  call void @vector(double* noundef %72, double* noundef %73, double* noundef %74)
  %75 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 0
  %76 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %77 = call double @angleBetweenVectors2D(double* noundef %75, double* noundef %76)
  store double %77, double* %19, align 8
  %78 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %79 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 0
  %80 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %81 = call signext i16 @isToTheRightPointVector(double* noundef %78, double* noundef %79, double* noundef %80)
  %82 = icmp ne i16 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %69
  %84 = load double, double* %19, align 8
  %85 = fmul double %84, -1.000000e+00
  store double %85, double* %19, align 8
  br label %86

86:                                               ; preds = %83, %69
  %87 = load double, double* %8, align 8
  %88 = load double, double* %19, align 8
  %89 = fadd double %87, %88
  store double %89, double* %16, align 8
  br label %90

90:                                               ; preds = %86, %61
  %91 = load %struct.configtree*, %struct.configtree** %7, align 8
  %92 = getelementptr inbounds %struct.configtree, %struct.configtree* %91, i32 0, i32 7
  %93 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %92, align 8
  store %struct.boundingboxLoop* %93, %struct.boundingboxLoop** %20, align 8
  %94 = load %struct.configtree*, %struct.configtree** %7, align 8
  %95 = getelementptr inbounds %struct.configtree, %struct.configtree* %94, i32 0, i32 8
  %96 = load %struct.boundingboxStem*, %struct.boundingboxStem** %95, align 8
  store %struct.boundingboxStem* %96, %struct.boundingboxStem** %21, align 8
  %97 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %98 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %97, i32 0, i32 5
  %99 = load i32, i32* %98, align 8
  store i32 %99, i32* %22, align 4
  %100 = load %struct.configtree*, %struct.configtree** %12, align 8
  %101 = load %struct.configtree*, %struct.configtree** %6, align 8
  %102 = icmp eq %struct.configtree* %100, %101
  br i1 %102, label %103, label %106

103:                                              ; preds = %90
  %104 = load i32, i32* %22, align 4
  %105 = add nsw i32 %104, 2
  store i32 %105, i32* %22, align 4
  br label %106

106:                                              ; preds = %103, %90
  %107 = load i32, i32* %22, align 4
  %108 = sext i32 %107 to i64
  %109 = mul i64 %108, 8
  %110 = trunc i64 %109 to i32
  %111 = call i8* @vrna_alloc(i32 noundef %110)
  %112 = bitcast i8* %111 to double**
  store double** %112, double*** %23, align 8
  store i32 0, i32* %24, align 4
  store i32 0, i32* %25, align 4
  br label %113

113:                                              ; preds = %134, %106
  %114 = load i32, i32* %25, align 4
  %115 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %116 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %115, i32 0, i32 5
  %117 = load i32, i32* %116, align 8
  %118 = icmp slt i32 %114, %117
  br i1 %118, label %119, label %137

119:                                              ; preds = %113
  %120 = call i8* @vrna_alloc(i32 noundef 16)
  %121 = bitcast i8* %120 to double*
  store double* %121, double** %28, align 8
  %122 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %123 = load i32, i32* %25, align 4
  %124 = getelementptr inbounds [2 x double], [2 x double]* %26, i64 0, i64 0
  %125 = load double*, double** %28, align 8
  %126 = getelementptr inbounds [2 x double], [2 x double]* %27, i64 0, i64 0
  call void @getBulgeCoordinatesExtraDistance(%struct.boundingboxStem* noundef %122, i32 noundef %123, double noundef 1.900000e+01, double* noundef %124, double* noundef %125, double* noundef %126)
  %127 = load double*, double** %28, align 8
  %128 = load double**, double*** %23, align 8
  %129 = load i32, i32* %24, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds double*, double** %128, i64 %130
  store double* %127, double** %131, align 8
  %132 = load i32, i32* %24, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %24, align 4
  br label %134

134:                                              ; preds = %119
  %135 = load i32, i32* %25, align 4
  %136 = add nsw i32 %135, 1
  store i32 %136, i32* %25, align 4
  br label %113, !llvm.loop !115

137:                                              ; preds = %113
  %138 = load %struct.configtree*, %struct.configtree** %12, align 8
  %139 = load %struct.configtree*, %struct.configtree** %6, align 8
  %140 = icmp eq %struct.configtree* %138, %139
  br i1 %140, label %141, label %262

141:                                              ; preds = %137
  %142 = call i8* @vrna_alloc(i32 noundef 16)
  %143 = bitcast i8* %142 to double*
  store double* %143, double** %29, align 8
  %144 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %145 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %144, i32 0, i32 3
  %146 = getelementptr inbounds [2 x double], [2 x double]* %145, i64 0, i64 0
  %147 = load double, double* %146, align 8
  %148 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %149 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %148, i32 0, i32 4
  %150 = getelementptr inbounds [2 x double], [2 x double]* %149, i64 0, i64 0
  %151 = load double, double* %150, align 8
  %152 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %153 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %152, i32 0, i32 1
  %154 = getelementptr inbounds [2 x double], [2 x double]* %153, i64 0, i64 0
  %155 = load double, double* %154, align 8
  %156 = fneg double %151
  %157 = call double @llvm.fmuladd.f64(double %156, double %155, double %147)
  %158 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %159 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %158, i32 0, i32 4
  %160 = getelementptr inbounds [2 x double], [2 x double]* %159, i64 0, i64 1
  %161 = load double, double* %160, align 8
  %162 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %163 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %162, i32 0, i32 2
  %164 = getelementptr inbounds [2 x double], [2 x double]* %163, i64 0, i64 0
  %165 = load double, double* %164, align 8
  %166 = call double @llvm.fmuladd.f64(double %161, double %165, double %157)
  %167 = load double*, double** %29, align 8
  %168 = getelementptr inbounds double, double* %167, i64 0
  store double %166, double* %168, align 8
  %169 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %170 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %169, i32 0, i32 3
  %171 = getelementptr inbounds [2 x double], [2 x double]* %170, i64 0, i64 1
  %172 = load double, double* %171, align 8
  %173 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %174 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %173, i32 0, i32 4
  %175 = getelementptr inbounds [2 x double], [2 x double]* %174, i64 0, i64 0
  %176 = load double, double* %175, align 8
  %177 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %178 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %177, i32 0, i32 1
  %179 = getelementptr inbounds [2 x double], [2 x double]* %178, i64 0, i64 1
  %180 = load double, double* %179, align 8
  %181 = fneg double %176
  %182 = call double @llvm.fmuladd.f64(double %181, double %180, double %172)
  %183 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %184 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %183, i32 0, i32 4
  %185 = getelementptr inbounds [2 x double], [2 x double]* %184, i64 0, i64 1
  %186 = load double, double* %185, align 8
  %187 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %188 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %187, i32 0, i32 2
  %189 = getelementptr inbounds [2 x double], [2 x double]* %188, i64 0, i64 1
  %190 = load double, double* %189, align 8
  %191 = call double @llvm.fmuladd.f64(double %186, double %190, double %182)
  %192 = load double*, double** %29, align 8
  %193 = getelementptr inbounds double, double* %192, i64 1
  store double %191, double* %193, align 8
  %194 = load double*, double** %29, align 8
  %195 = load double**, double*** %23, align 8
  %196 = load i32, i32* %24, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds double*, double** %195, i64 %197
  store double* %194, double** %198, align 8
  %199 = load i32, i32* %24, align 4
  %200 = add nsw i32 %199, 1
  store i32 %200, i32* %24, align 4
  %201 = call i8* @vrna_alloc(i32 noundef 16)
  %202 = bitcast i8* %201 to double*
  store double* %202, double** %30, align 8
  %203 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %204 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %203, i32 0, i32 3
  %205 = getelementptr inbounds [2 x double], [2 x double]* %204, i64 0, i64 0
  %206 = load double, double* %205, align 8
  %207 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %208 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %207, i32 0, i32 4
  %209 = getelementptr inbounds [2 x double], [2 x double]* %208, i64 0, i64 0
  %210 = load double, double* %209, align 8
  %211 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %212 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %211, i32 0, i32 1
  %213 = getelementptr inbounds [2 x double], [2 x double]* %212, i64 0, i64 0
  %214 = load double, double* %213, align 8
  %215 = fneg double %210
  %216 = call double @llvm.fmuladd.f64(double %215, double %214, double %206)
  %217 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %218 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %217, i32 0, i32 4
  %219 = getelementptr inbounds [2 x double], [2 x double]* %218, i64 0, i64 1
  %220 = load double, double* %219, align 8
  %221 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %222 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %221, i32 0, i32 2
  %223 = getelementptr inbounds [2 x double], [2 x double]* %222, i64 0, i64 0
  %224 = load double, double* %223, align 8
  %225 = fneg double %220
  %226 = call double @llvm.fmuladd.f64(double %225, double %224, double %216)
  %227 = load double*, double** %30, align 8
  %228 = getelementptr inbounds double, double* %227, i64 0
  store double %226, double* %228, align 8
  %229 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %230 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %229, i32 0, i32 3
  %231 = getelementptr inbounds [2 x double], [2 x double]* %230, i64 0, i64 1
  %232 = load double, double* %231, align 8
  %233 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %234 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %233, i32 0, i32 4
  %235 = getelementptr inbounds [2 x double], [2 x double]* %234, i64 0, i64 0
  %236 = load double, double* %235, align 8
  %237 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %238 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %237, i32 0, i32 1
  %239 = getelementptr inbounds [2 x double], [2 x double]* %238, i64 0, i64 1
  %240 = load double, double* %239, align 8
  %241 = fneg double %236
  %242 = call double @llvm.fmuladd.f64(double %241, double %240, double %232)
  %243 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %244 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %243, i32 0, i32 4
  %245 = getelementptr inbounds [2 x double], [2 x double]* %244, i64 0, i64 1
  %246 = load double, double* %245, align 8
  %247 = load %struct.boundingboxStem*, %struct.boundingboxStem** %21, align 8
  %248 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %247, i32 0, i32 2
  %249 = getelementptr inbounds [2 x double], [2 x double]* %248, i64 0, i64 1
  %250 = load double, double* %249, align 8
  %251 = fneg double %246
  %252 = call double @llvm.fmuladd.f64(double %251, double %250, double %242)
  %253 = load double*, double** %30, align 8
  %254 = getelementptr inbounds double, double* %253, i64 1
  store double %252, double* %254, align 8
  %255 = load double*, double** %30, align 8
  %256 = load double**, double*** %23, align 8
  %257 = load i32, i32* %24, align 4
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds double*, double** %256, i64 %258
  store double* %255, double** %259, align 8
  %260 = load i32, i32* %24, align 4
  %261 = add nsw i32 %260, 1
  store i32 %261, i32* %24, align 4
  br label %262

262:                                              ; preds = %141, %137
  %263 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %20, align 8
  %264 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %263, i32 0, i32 2
  %265 = load double, double* %264, align 8
  %266 = fadd double %265, 1.900000e+01
  store double %266, double* %31, align 8
  %267 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %268 = call double @vectorLength2D(double* noundef %267)
  store double %268, double* %32, align 8
  %269 = load double, double* %31, align 8
  %270 = load double, double* %32, align 8
  %271 = fdiv double %269, %270
  %272 = call double @asin(double noundef %271) #7
  store double %272, double* %33, align 8
  %273 = load double, double* %33, align 8
  %274 = fmul double -1.000000e+00, %273
  store double %274, double* %34, align 8
  %275 = getelementptr inbounds [2 x double], [2 x double]* %35, i64 0, i64 0
  %276 = load double, double* %33, align 8
  store double %276, double* %275, align 8
  %277 = getelementptr inbounds double, double* %275, i64 1
  %278 = load double, double* %34, align 8
  store double %278, double* %277, align 8
  store i32 0, i32* %36, align 4
  br label %279

279:                                              ; preds = %306, %262
  %280 = load i32, i32* %36, align 4
  %281 = icmp slt i32 %280, 2
  br i1 %281, label %282, label %309

282:                                              ; preds = %279
  %283 = load i32, i32* %36, align 4
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds [2 x double], [2 x double]* %35, i64 0, i64 %284
  %286 = load double, double* %285, align 8
  store double %286, double* %37, align 8
  %287 = load double, double* %16, align 8
  %288 = load double, double* %37, align 8
  %289 = fadd double %287, %288
  store double %289, double* %38, align 8
  %290 = load double, double* %38, align 8
  %291 = load double*, double** %9, align 8
  %292 = load double, double* %291, align 8
  %293 = fcmp olt double %290, %292
  br i1 %293, label %294, label %297

294:                                              ; preds = %282
  %295 = load double, double* %38, align 8
  %296 = load double*, double** %9, align 8
  store double %295, double* %296, align 8
  br label %297

297:                                              ; preds = %294, %282
  %298 = load double, double* %38, align 8
  %299 = load double*, double** %10, align 8
  %300 = load double, double* %299, align 8
  %301 = fcmp ogt double %298, %300
  br i1 %301, label %302, label %305

302:                                              ; preds = %297
  %303 = load double, double* %38, align 8
  %304 = load double*, double** %10, align 8
  store double %303, double* %304, align 8
  br label %305

305:                                              ; preds = %302, %297
  br label %306

306:                                              ; preds = %305
  %307 = load i32, i32* %36, align 4
  %308 = add nsw i32 %307, 1
  store i32 %308, i32* %36, align 4
  br label %279, !llvm.loop !116

309:                                              ; preds = %279
  store i32 0, i32* %39, align 4
  br label %310

310:                                              ; preds = %356, %309
  %311 = load i32, i32* %39, align 4
  %312 = load i32, i32* %22, align 4
  %313 = icmp slt i32 %311, %312
  br i1 %313, label %314, label %359

314:                                              ; preds = %310
  %315 = load double**, double*** %23, align 8
  %316 = load i32, i32* %39, align 4
  %317 = sext i32 %316 to i64
  %318 = getelementptr inbounds double*, double** %315, i64 %317
  %319 = load double*, double** %318, align 8
  store double* %319, double** %40, align 8
  %320 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %321 = load double*, double** %40, align 8
  %322 = getelementptr inbounds [2 x double], [2 x double]* %41, i64 0, i64 0
  call void @vector(double* noundef %320, double* noundef %321, double* noundef %322)
  %323 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %324 = getelementptr inbounds [2 x double], [2 x double]* %41, i64 0, i64 0
  %325 = call double @angleBetweenVectors2D(double* noundef %323, double* noundef %324)
  store double %325, double* %42, align 8
  %326 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %327 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %328 = load double*, double** %40, align 8
  %329 = call signext i16 @isToTheRightPointVector(double* noundef %326, double* noundef %327, double* noundef %328)
  %330 = icmp ne i16 %329, 0
  br i1 %330, label %331, label %332

331:                                              ; preds = %314
  store double 1.000000e+00, double* %43, align 8
  br label %333

332:                                              ; preds = %314
  store double -1.000000e+00, double* %43, align 8
  br label %333

333:                                              ; preds = %332, %331
  %334 = load double, double* %43, align 8
  %335 = load double, double* %42, align 8
  %336 = fmul double %335, %334
  store double %336, double* %42, align 8
  %337 = load double, double* %16, align 8
  %338 = load double, double* %42, align 8
  %339 = fadd double %337, %338
  store double %339, double* %44, align 8
  %340 = load double, double* %44, align 8
  %341 = load double*, double** %9, align 8
  %342 = load double, double* %341, align 8
  %343 = fcmp olt double %340, %342
  br i1 %343, label %344, label %347

344:                                              ; preds = %333
  %345 = load double, double* %44, align 8
  %346 = load double*, double** %9, align 8
  store double %345, double* %346, align 8
  br label %347

347:                                              ; preds = %344, %333
  %348 = load double, double* %44, align 8
  %349 = load double*, double** %10, align 8
  %350 = load double, double* %349, align 8
  %351 = fcmp ogt double %348, %350
  br i1 %351, label %352, label %355

352:                                              ; preds = %347
  %353 = load double, double* %44, align 8
  %354 = load double*, double** %10, align 8
  store double %353, double* %354, align 8
  br label %355

355:                                              ; preds = %352, %347
  br label %356

356:                                              ; preds = %355
  %357 = load i32, i32* %39, align 4
  %358 = add nsw i32 %357, 1
  store i32 %358, i32* %39, align 4
  br label %310, !llvm.loop !117

359:                                              ; preds = %310
  store i32 0, i32* %45, align 4
  br label %360

360:                                              ; preds = %372, %359
  %361 = load i32, i32* %45, align 4
  %362 = load i32, i32* %22, align 4
  %363 = icmp slt i32 %361, %362
  br i1 %363, label %364, label %375

364:                                              ; preds = %360
  %365 = load double**, double*** %23, align 8
  %366 = load i32, i32* %45, align 4
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds double*, double** %365, i64 %367
  %369 = load double*, double** %368, align 8
  store double* %369, double** %46, align 8
  %370 = load double*, double** %46, align 8
  %371 = bitcast double* %370 to i8*
  call void @free(i8* noundef %371) #7
  br label %372

372:                                              ; preds = %364
  %373 = load i32, i32* %45, align 4
  %374 = add nsw i32 %373, 1
  store i32 %374, i32* %45, align 4
  br label %360, !llvm.loop !118

375:                                              ; preds = %360
  %376 = load double**, double*** %23, align 8
  %377 = bitcast double** %376 to i8*
  call void @free(i8* noundef %377) #7
  store i32 0, i32* %47, align 4
  br label %378

378:                                              ; preds = %393, %375
  %379 = load i32, i32* %47, align 4
  %380 = load %struct.configtree*, %struct.configtree** %7, align 8
  %381 = getelementptr inbounds %struct.configtree, %struct.configtree* %380, i32 0, i32 3
  %382 = load i32, i32* %381, align 8
  %383 = icmp slt i32 %379, %382
  br i1 %383, label %384, label %396

384:                                              ; preds = %378
  %385 = load %struct.configtree*, %struct.configtree** %7, align 8
  %386 = load i32, i32* %47, align 4
  %387 = call %struct.configtree* @getChild(%struct.configtree* noundef %385, i32 noundef %386)
  store %struct.configtree* %387, %struct.configtree** %48, align 8
  %388 = load %struct.configtree*, %struct.configtree** %6, align 8
  %389 = load %struct.configtree*, %struct.configtree** %48, align 8
  %390 = load double, double* %16, align 8
  %391 = load double*, double** %9, align 8
  %392 = load double*, double** %10, align 8
  call void @getBoundingWedgeRec(%struct.configtree* noundef %388, %struct.configtree* noundef %389, double noundef %390, double* noundef %391, double* noundef %392)
  br label %393

393:                                              ; preds = %384
  %394 = load i32, i32* %47, align 4
  %395 = add nsw i32 %394, 1
  store i32 %395, i32* %47, align 4
  br label %378, !llvm.loop !119

396:                                              ; preds = %378
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @intersectionTypeToString(i32 noundef %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %16 [
    i32 1, label %5
    i32 2, label %6
    i32 5, label %7
    i32 3, label %8
    i32 4, label %9
    i32 7, label %10
    i32 6, label %11
    i32 8, label %12
    i32 9, label %13
    i32 10, label %14
    i32 11, label %15
  ]

5:                                                ; preds = %1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.28, i64 0, i64 0), i8** %2, align 8
  br label %17

6:                                                ; preds = %1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i64 0, i64 0), i8** %2, align 8
  br label %17

7:                                                ; preds = %1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.30, i64 0, i64 0), i8** %2, align 8
  br label %17

8:                                                ; preds = %1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i64 0, i64 0), i8** %2, align 8
  br label %17

9:                                                ; preds = %1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0), i8** %2, align 8
  br label %17

10:                                               ; preds = %1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.33, i64 0, i64 0), i8** %2, align 8
  br label %17

11:                                               ; preds = %1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.34, i64 0, i64 0), i8** %2, align 8
  br label %17

12:                                               ; preds = %1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.35, i64 0, i64 0), i8** %2, align 8
  br label %17

13:                                               ; preds = %1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i64 0, i64 0), i8** %2, align 8
  br label %17

14:                                               ; preds = %1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i64 0, i64 0), i8** %2, align 8
  br label %17

15:                                               ; preds = %1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.38, i64 0, i64 0), i8** %2, align 8
  br label %17

16:                                               ; preds = %1
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.39, i64 0, i64 0), i8** %2, align 8
  br label %17

17:                                               ; preds = %16, %15, %14, %13, %12, %11, %10, %9, %8, %7, %6, %5
  %18 = load i8*, i8** %2, align 8
  ret i8* %18
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @applyChangesToConfigAndBoundingBoxes(%struct.configtree* noundef %0, double* noundef %1, double noundef %2, %struct.vrna_plot_options_puzzler_t* noundef %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca double*, align 8
  %7 = alloca double, align 8
  %8 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %9 = alloca %struct.config*, align 8
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store double* %1, double** %6, align 8
  store double %2, double* %7, align 8
  store %struct.vrna_plot_options_puzzler_t* %3, %struct.vrna_plot_options_puzzler_t** %8, align 8
  %10 = load %struct.configtree*, %struct.configtree** %5, align 8
  %11 = getelementptr inbounds %struct.configtree, %struct.configtree* %10, i32 0, i32 4
  %12 = load %struct.config*, %struct.config** %11, align 8
  store %struct.config* %12, %struct.config** %9, align 8
  %13 = load %struct.config*, %struct.config** %9, align 8
  %14 = load %struct.configtree*, %struct.configtree** %5, align 8
  %15 = call signext i8 @getNodeName(%struct.configtree* noundef %14)
  %16 = load double*, double** %6, align 8
  %17 = load double, double* %7, align 8
  %18 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %8, align 8
  %19 = call double @cfgApplyChanges(%struct.config* noundef %13, i8 noundef signext %15, double* noundef %16, double noundef %17, %struct.vrna_plot_options_puzzler_t* noundef %18)
  %20 = load %struct.configtree*, %struct.configtree** %5, align 8
  %21 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %8, align 8
  call void @updateBoundingBoxes(%struct.configtree* noundef %20, %struct.vrna_plot_options_puzzler_t* noundef %21)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @cfgApplyChanges(%struct.config* noundef %0, i8 noundef signext %1, double* noundef %2, double noundef %3, %struct.vrna_plot_options_puzzler_t* noundef %4) #0 {
  %6 = alloca %struct.config*, align 8
  %7 = alloca i8, align 1
  %8 = alloca double*, align 8
  %9 = alloca double, align 8
  %10 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %11 = alloca i32, align 4
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  store %struct.config* %0, %struct.config** %6, align 8
  store i8 %1, i8* %7, align 1
  store double* %2, double** %8, align 8
  store double %3, double* %9, align 8
  store %struct.vrna_plot_options_puzzler_t* %4, %struct.vrna_plot_options_puzzler_t** %10, align 8
  %15 = load double*, double** %8, align 8
  %16 = icmp ne double* %15, null
  br i1 %16, label %17, label %43

17:                                               ; preds = %5
  store i32 0, i32* %11, align 4
  br label %18

18:                                               ; preds = %39, %17
  %19 = load i32, i32* %11, align 4
  %20 = load %struct.config*, %struct.config** %6, align 8
  %21 = getelementptr inbounds %struct.config, %struct.config* %20, i32 0, i32 4
  %22 = load i32, i32* %21, align 8
  %23 = icmp slt i32 %19, %22
  br i1 %23, label %24, label %42

24:                                               ; preds = %18
  %25 = load double*, double** %8, align 8
  %26 = load i32, i32* %11, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds double, double* %25, i64 %27
  %29 = load double, double* %28, align 8
  %30 = load %struct.config*, %struct.config** %6, align 8
  %31 = getelementptr inbounds %struct.config, %struct.config* %30, i32 0, i32 3
  %32 = load %struct.configArc*, %struct.configArc** %31, align 8
  %33 = load i32, i32* %11, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.configArc, %struct.configArc* %32, i64 %34
  %36 = getelementptr inbounds %struct.configArc, %struct.configArc* %35, i32 0, i32 1
  %37 = load double, double* %36, align 8
  %38 = fadd double %37, %29
  store double %38, double* %36, align 8
  br label %39

39:                                               ; preds = %24
  %40 = load i32, i32* %11, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %11, align 4
  br label %18, !llvm.loop !120

42:                                               ; preds = %18
  br label %43

43:                                               ; preds = %42, %5
  %44 = load %struct.config*, %struct.config** %6, align 8
  %45 = getelementptr inbounds %struct.config, %struct.config* %44, i32 0, i32 0
  %46 = load double, double* %45, align 8
  store double %46, double* %12, align 8
  store double -1.000000e+00, double* %13, align 8
  %47 = load double, double* %9, align 8
  %48 = fcmp ogt double %47, 0.000000e+00
  br i1 %48, label %49, label %64

49:                                               ; preds = %43
  %50 = load %struct.config*, %struct.config** %6, align 8
  %51 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %10, align 8
  %52 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %51, i32 0, i32 2
  %53 = load double, double* %52, align 8
  %54 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %10, align 8
  %55 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %54, i32 0, i32 1
  %56 = load double, double* %55, align 8
  call void @cfgUpdateMinRadius(%struct.config* noundef %50, double noundef %53, double noundef %56)
  %57 = load double, double* %9, align 8
  %58 = load %struct.config*, %struct.config** %6, align 8
  %59 = getelementptr inbounds %struct.config, %struct.config* %58, i32 0, i32 1
  %60 = load double, double* %59, align 8
  %61 = call double @llvm.maxnum.f64(double %57, double %60)
  store double %61, double* %13, align 8
  %62 = load %struct.config*, %struct.config** %6, align 8
  %63 = load double, double* %13, align 8
  call void @cfgSetRadius(%struct.config* noundef %62, double noundef %63)
  br label %111

64:                                               ; preds = %43
  %65 = load double, double* %9, align 8
  %66 = fcmp oeq double %65, 0.000000e+00
  br i1 %66, label %67, label %80

67:                                               ; preds = %64
  %68 = load %struct.config*, %struct.config** %6, align 8
  %69 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %10, align 8
  %70 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %69, i32 0, i32 2
  %71 = load double, double* %70, align 8
  %72 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %10, align 8
  %73 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %72, i32 0, i32 1
  %74 = load double, double* %73, align 8
  call void @cfgUpdateMinRadius(%struct.config* noundef %68, double noundef %71, double noundef %74)
  %75 = load %struct.config*, %struct.config** %6, align 8
  %76 = getelementptr inbounds %struct.config, %struct.config* %75, i32 0, i32 1
  %77 = load double, double* %76, align 8
  store double %77, double* %13, align 8
  %78 = load %struct.config*, %struct.config** %6, align 8
  %79 = load double, double* %13, align 8
  call void @cfgSetRadius(%struct.config* noundef %78, double noundef %79)
  br label %110

80:                                               ; preds = %64
  %81 = load double, double* %9, align 8
  %82 = fcmp oeq double %81, -1.000000e+00
  br i1 %82, label %83, label %108

83:                                               ; preds = %80
  %84 = load %struct.config*, %struct.config** %6, align 8
  %85 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %10, align 8
  %86 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %85, i32 0, i32 2
  %87 = load double, double* %86, align 8
  %88 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %10, align 8
  %89 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %88, i32 0, i32 1
  %90 = load double, double* %89, align 8
  call void @cfgUpdateMinRadius(%struct.config* noundef %84, double noundef %87, double noundef %90)
  %91 = load %struct.config*, %struct.config** %6, align 8
  %92 = getelementptr inbounds %struct.config, %struct.config* %91, i32 0, i32 1
  %93 = load double, double* %92, align 8
  %94 = fsub double %93, 1.000000e+00
  %95 = load double, double* %12, align 8
  %96 = fcmp ogt double %94, %95
  br i1 %96, label %97, label %101

97:                                               ; preds = %83
  %98 = load %struct.config*, %struct.config** %6, align 8
  %99 = getelementptr inbounds %struct.config, %struct.config* %98, i32 0, i32 1
  %100 = load double, double* %99, align 8
  store double %100, double* %13, align 8
  br label %105

101:                                              ; preds = %83
  store double 1.050000e+00, double* %14, align 8
  %102 = load double, double* %12, align 8
  %103 = load double, double* %14, align 8
  %104 = fmul double %102, %103
  store double %104, double* %13, align 8
  br label %105

105:                                              ; preds = %101, %97
  %106 = load %struct.config*, %struct.config** %6, align 8
  %107 = load double, double* %13, align 8
  call void @cfgSetRadius(%struct.config* noundef %106, double noundef %107)
  br label %109

108:                                              ; preds = %80
  store double -1.000000e+00, double* %13, align 8
  br label %109

109:                                              ; preds = %108, %105
  br label %110

110:                                              ; preds = %109, %67
  br label %111

111:                                              ; preds = %110, %49
  %112 = load double, double* %13, align 8
  ret double %112
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i8 @getNodeName(%struct.configtree* noundef %0) #0 {
  %2 = alloca i8, align 1
  %3 = alloca %struct.configtree*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  store %struct.configtree* %0, %struct.configtree** %3, align 8
  store i8 95, i8* %4, align 1
  %8 = load %struct.configtree*, %struct.configtree** %3, align 8
  %9 = call i32 @getNodeID(%struct.configtree* noundef %8)
  store i32 %9, i32* %5, align 4
  %10 = load i32, i32* %5, align 4
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  store i8 95, i8* %2, align 1
  br label %28

13:                                               ; preds = %1
  %14 = load i32, i32* %5, align 4
  %15 = add nsw i32 %14, 33
  %16 = srem i32 %15, 128
  store i32 %16, i32* %6, align 4
  br label %17

17:                                               ; preds = %20, %13
  %18 = load i32, i32* %6, align 4
  %19 = icmp slt i32 %18, 33
  br i1 %19, label %20, label %24

20:                                               ; preds = %17
  %21 = load i32, i32* %6, align 4
  %22 = add nsw i32 %21, 33
  %23 = srem i32 %22, 128
  store i32 %23, i32* %6, align 4
  br label %17, !llvm.loop !121

24:                                               ; preds = %17
  %25 = load i32, i32* %6, align 4
  %26 = trunc i32 %25 to i8
  store i8 %26, i8* %7, align 1
  %27 = load i8, i8* %7, align 1
  store i8 %27, i8* %2, align 1
  br label %28

28:                                               ; preds = %24, %12
  %29 = load i8, i8* %2, align 1
  ret i8 %29
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfgUpdateMinRadius(%struct.config* noundef %0, double noundef %1, double noundef %2) #0 {
  %4 = alloca %struct.config*, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  store %struct.config* %0, %struct.config** %4, align 8
  store double %1, double* %5, align 8
  store double %2, double* %6, align 8
  %8 = load %struct.config*, %struct.config** %4, align 8
  %9 = load double, double* %5, align 8
  %10 = load double, double* %6, align 8
  %11 = call double @approximateConfigRadius(%struct.config* noundef %8, double noundef %9, double noundef %10)
  store double %11, double* %7, align 8
  %12 = load double, double* %7, align 8
  %13 = load %struct.config*, %struct.config** %4, align 8
  %14 = getelementptr inbounds %struct.config, %struct.config* %13, i32 0, i32 1
  store double %12, double* %14, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfgSetRadius(%struct.config* noundef %0, double noundef %1) #0 {
  %3 = alloca %struct.config*, align 8
  %4 = alloca double, align 8
  store %struct.config* %0, %struct.config** %3, align 8
  store double %1, double* %4, align 8
  %5 = load double, double* %4, align 8
  %6 = load %struct.config*, %struct.config** %3, align 8
  %7 = getelementptr inbounds %struct.config, %struct.config* %6, i32 0, i32 0
  store double %5, double* %7, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @approximateConfigRadius(%struct.config* noundef %0, double noundef %1, double noundef %2) #0 {
  %4 = alloca %struct.config*, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  store %struct.config* %0, %struct.config** %4, align 8
  store double %1, double* %5, align 8
  store double %2, double* %6, align 8
  store double 0.000000e+00, double* %7, align 8
  store i32 0, i32* %8, align 4
  br label %13

13:                                               ; preds = %45, %3
  %14 = load i32, i32* %8, align 4
  %15 = load %struct.config*, %struct.config** %4, align 8
  %16 = getelementptr inbounds %struct.config, %struct.config* %15, i32 0, i32 4
  %17 = load i32, i32* %16, align 8
  %18 = icmp slt i32 %14, %17
  br i1 %18, label %19, label %48

19:                                               ; preds = %13
  store i32 1, i32* %9, align 4
  %20 = load %struct.config*, %struct.config** %4, align 8
  %21 = getelementptr inbounds %struct.config, %struct.config* %20, i32 0, i32 3
  %22 = load %struct.configArc*, %struct.configArc** %21, align 8
  %23 = load i32, i32* %8, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.configArc, %struct.configArc* %22, i64 %24
  %26 = getelementptr inbounds %struct.configArc, %struct.configArc* %25, i32 0, i32 0
  %27 = load i32, i32* %26, align 8
  store i32 %27, i32* %10, align 4
  %28 = load %struct.config*, %struct.config** %4, align 8
  %29 = load i32, i32* %8, align 4
  %30 = call double @getArcAngle(%struct.config* noundef %28, i32 noundef %29)
  store double %30, double* %11, align 8
  %31 = load double, double* %6, align 8
  %32 = load double, double* %5, align 8
  %33 = load i32, i32* %9, align 4
  %34 = trunc i32 %33 to i16
  %35 = load i32, i32* %10, align 4
  %36 = trunc i32 %35 to i16
  %37 = load double, double* %11, align 8
  %38 = call double @approximateConfigArcRadius(double noundef %31, double noundef %32, i16 noundef signext %34, i16 noundef signext %36, double noundef %37)
  store double %38, double* %12, align 8
  %39 = load double, double* %12, align 8
  %40 = load double, double* %7, align 8
  %41 = fcmp ogt double %39, %40
  br i1 %41, label %42, label %44

42:                                               ; preds = %19
  %43 = load double, double* %12, align 8
  store double %43, double* %7, align 8
  br label %44

44:                                               ; preds = %42, %19
  br label %45

45:                                               ; preds = %44
  %46 = load i32, i32* %8, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %8, align 4
  br label %13, !llvm.loop !122

48:                                               ; preds = %13
  %49 = load double, double* %7, align 8
  ret double %49
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @TENTATIVE2_updateExteriorBoundingBoxes(%struct.configtree* noundef %0, %struct.boundingboxLoop* noundef %1, double noundef %2, double noundef %3, double noundef %4, double noundef %5) #0 {
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca %struct.boundingboxLoop*, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca [2 x double], align 16
  %14 = alloca [2 x double], align 16
  %15 = alloca [2 x double], align 16
  %16 = alloca %struct.boundingboxStem*, align 8
  store %struct.configtree* %0, %struct.configtree** %7, align 8
  store %struct.boundingboxLoop* %1, %struct.boundingboxLoop** %8, align 8
  store double %2, double* %9, align 8
  store double %3, double* %10, align 8
  store double %4, double* %11, align 8
  store double %5, double* %12, align 8
  %17 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %18 = load double, double* %10, align 8
  store double %18, double* %17, align 8
  %19 = getelementptr inbounds double, double* %17, i64 1
  %20 = load double, double* %11, align 8
  store double %20, double* %19, align 8
  %21 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %22 = load double, double* %9, align 8
  store double %22, double* %21, align 8
  %23 = getelementptr inbounds double, double* %21, i64 1
  %24 = load double, double* %11, align 8
  store double %24, double* %23, align 8
  %25 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %26 = load double, double* %10, align 8
  store double %26, double* %25, align 8
  %27 = getelementptr inbounds double, double* %25, i64 1
  %28 = load double, double* %12, align 8
  store double %28, double* %27, align 8
  %29 = getelementptr inbounds [2 x double], [2 x double]* %13, i64 0, i64 0
  %30 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 0
  %31 = getelementptr inbounds [2 x double], [2 x double]* %15, i64 0, i64 0
  %32 = call %struct.boundingboxStem* @createStemBox(double* noundef %29, double* noundef %30, double* noundef %31)
  store %struct.boundingboxStem* %32, %struct.boundingboxStem** %16, align 8
  %33 = load %struct.configtree*, %struct.configtree** %7, align 8
  %34 = getelementptr inbounds %struct.configtree, %struct.configtree* %33, i32 0, i32 7
  %35 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %34, align 8
  %36 = icmp ne %struct.boundingboxLoop* %35, null
  br i1 %36, label %37, label %42

37:                                               ; preds = %6
  %38 = load %struct.configtree*, %struct.configtree** %7, align 8
  %39 = getelementptr inbounds %struct.configtree, %struct.configtree* %38, i32 0, i32 7
  %40 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %39, align 8
  %41 = bitcast %struct.boundingboxLoop* %40 to i8*
  call void @free(i8* noundef %41) #7
  br label %42

42:                                               ; preds = %37, %6
  %43 = load %struct.configtree*, %struct.configtree** %7, align 8
  %44 = getelementptr inbounds %struct.configtree, %struct.configtree* %43, i32 0, i32 8
  %45 = load %struct.boundingboxStem*, %struct.boundingboxStem** %44, align 8
  %46 = icmp ne %struct.boundingboxStem* %45, null
  br i1 %46, label %47, label %52

47:                                               ; preds = %42
  %48 = load %struct.configtree*, %struct.configtree** %7, align 8
  %49 = getelementptr inbounds %struct.configtree, %struct.configtree* %48, i32 0, i32 8
  %50 = load %struct.boundingboxStem*, %struct.boundingboxStem** %49, align 8
  %51 = bitcast %struct.boundingboxStem* %50 to i8*
  call void @free(i8* noundef %51) #7
  br label %52

52:                                               ; preds = %47, %42
  %53 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %8, align 8
  %54 = load %struct.configtree*, %struct.configtree** %7, align 8
  %55 = getelementptr inbounds %struct.configtree, %struct.configtree* %54, i32 0, i32 7
  store %struct.boundingboxLoop* %53, %struct.boundingboxLoop** %55, align 8
  %56 = load %struct.boundingboxStem*, %struct.boundingboxStem** %16, align 8
  %57 = load %struct.configtree*, %struct.configtree** %7, align 8
  %58 = getelementptr inbounds %struct.configtree, %struct.configtree* %57, i32 0, i32 8
  store %struct.boundingboxStem* %56, %struct.boundingboxStem** %58, align 8
  %59 = load %struct.configtree*, %struct.configtree** %7, align 8
  %60 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %8, align 8
  %61 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %60, i32 0, i32 0
  store %struct.configtree* %59, %struct.configtree** %61, align 8
  %62 = load %struct.configtree*, %struct.configtree** %7, align 8
  %63 = load %struct.boundingboxStem*, %struct.boundingboxStem** %16, align 8
  %64 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %63, i32 0, i32 0
  store %struct.configtree* %62, %struct.configtree** %64, align 8
  %65 = load %struct.configtree*, %struct.configtree** %7, align 8
  %66 = getelementptr inbounds %struct.configtree, %struct.configtree* %65, i32 0, i32 9
  %67 = load %struct.boundingboxStem*, %struct.boundingboxStem** %16, align 8
  %68 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %8, align 8
  call void @updateAABB(%struct.AABB* noundef %66, %struct.boundingboxStem* noundef %67, %struct.boundingboxLoop* noundef %68)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectTrees(%struct.configtree* noundef %0, %struct.configtree* noundef %1) #0 {
  %3 = alloca %struct.configtree*, align 8
  %4 = alloca %struct.configtree*, align 8
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca i16, align 2
  store %struct.configtree* %0, %struct.configtree** %3, align 8
  store %struct.configtree* %1, %struct.configtree** %4, align 8
  store %struct.configtree* null, %struct.configtree** %5, align 8
  store %struct.configtree* null, %struct.configtree** %6, align 8
  %8 = load %struct.configtree*, %struct.configtree** %3, align 8
  %9 = load %struct.configtree*, %struct.configtree** %4, align 8
  %10 = call signext i16 @intersect_iterateTree(%struct.configtree* noundef %8, %struct.configtree* noundef %9, %struct.configtree** noundef %5, %struct.configtree** noundef %6)
  store i16 %10, i16* %7, align 2
  %11 = load i16, i16* %7, align 2
  ret i16 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @handleIntersectionOfSiblings(%struct.configtree* noundef %0, i32* noundef %1, %struct.vrna_plot_options_puzzler_t* noundef %2) #0 {
  %4 = alloca i16, align 2
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i16, align 2
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store i32* %1, i32** %6, align 8
  store %struct.vrna_plot_options_puzzler_t* %2, %struct.vrna_plot_options_puzzler_t** %7, align 8
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.42, i64 0, i64 0), i8** %8, align 8
  %18 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %7, align 8
  %19 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %18, i32 0, i32 11
  %20 = load i32, i32* %19, align 8
  %21 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %7, align 8
  %22 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %21, i32 0, i32 8
  %23 = load i32, i32* %22, align 4
  %24 = icmp sgt i32 %20, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %3
  store i16 -1, i16* %4, align 2
  br label %90

26:                                               ; preds = %3
  store i16 0, i16* %9, align 2
  %27 = load i32*, i32** %6, align 8
  %28 = getelementptr inbounds i32, i32* %27, i64 0
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %10, align 4
  %30 = load %struct.configtree*, %struct.configtree** %5, align 8
  %31 = getelementptr inbounds %struct.configtree, %struct.configtree* %30, i32 0, i32 3
  %32 = load i32, i32* %31, align 8
  store i32 %32, i32* %11, align 4
  %33 = load i32, i32* %11, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %12, align 4
  %35 = load i32, i32* %12, align 4
  %36 = sext i32 %35 to i64
  %37 = mul i64 %36, 8
  %38 = trunc i64 %37 to i32
  %39 = call i8* @vrna_alloc(i32 noundef %38)
  %40 = bitcast i8* %39 to double*
  store double* %40, double** %13, align 8
  store i32 0, i32* %14, align 4
  br label %41

41:                                               ; preds = %50, %26
  %42 = load i32, i32* %14, align 4
  %43 = load i32, i32* %12, align 4
  %44 = icmp slt i32 %42, %43
  br i1 %44, label %45, label %53

45:                                               ; preds = %41
  %46 = load double*, double** %13, align 8
  %47 = load i32, i32* %14, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds double, double* %46, i64 %48
  store double 0.000000e+00, double* %49, align 8
  br label %50

50:                                               ; preds = %45
  %51 = load i32, i32* %14, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %14, align 4
  br label %41, !llvm.loop !123

53:                                               ; preds = %41
  store i32 0, i32* %15, align 4
  br label %54

54:                                               ; preds = %83, %53
  %55 = load i32, i32* %15, align 4
  %56 = load i32, i32* %10, align 4
  %57 = icmp slt i32 %55, %56
  br i1 %57, label %58, label %86

58:                                               ; preds = %54
  %59 = load i32*, i32** %6, align 8
  %60 = load i32, i32* %15, align 4
  %61 = mul nsw i32 2, %60
  %62 = add nsw i32 %61, 1
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i32, i32* %59, i64 %63
  %65 = load i32, i32* %64, align 4
  store i32 %65, i32* %16, align 4
  %66 = load i32*, i32** %6, align 8
  %67 = load i32, i32* %15, align 4
  %68 = mul nsw i32 2, %67
  %69 = add nsw i32 %68, 2
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i32, i32* %66, i64 %70
  %72 = load i32, i32* %71, align 4
  store i32 %72, i32* %17, align 4
  %73 = load %struct.configtree*, %struct.configtree** %5, align 8
  %74 = load i32, i32* %16, align 4
  %75 = load i32, i32* %17, align 4
  %76 = load double*, double** %13, align 8
  %77 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %7, align 8
  %78 = call signext i16 @fixIntersectionOfSiblings(%struct.configtree* noundef %73, i32 noundef %74, i32 noundef %75, double* noundef %76, %struct.vrna_plot_options_puzzler_t* noundef %77)
  store i16 %78, i16* %9, align 2
  %79 = load i16, i16* %9, align 2
  %80 = icmp ne i16 %79, 0
  br i1 %80, label %81, label %82

81:                                               ; preds = %58
  br label %86

82:                                               ; preds = %58
  br label %83

83:                                               ; preds = %82
  %84 = load i32, i32* %15, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %15, align 4
  br label %54, !llvm.loop !124

86:                                               ; preds = %81, %54
  %87 = load double*, double** %13, align 8
  %88 = bitcast double* %87 to i8*
  call void @free(i8* noundef %88) #7
  %89 = load i16, i16* %9, align 2
  store i16 %89, i16* %4, align 2
  br label %90

90:                                               ; preds = %86, %25
  %91 = load i16, i16* %4, align 2
  ret i16 %91
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersect_iterateTree(%struct.configtree* noundef %0, %struct.configtree* noundef %1, %struct.configtree** noundef %2, %struct.configtree** noundef %3) #0 {
  %5 = alloca i16, align 2
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca %struct.configtree**, align 8
  %9 = alloca %struct.configtree**, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %6, align 8
  store %struct.configtree* %1, %struct.configtree** %7, align 8
  store %struct.configtree** %2, %struct.configtree*** %8, align 8
  store %struct.configtree** %3, %struct.configtree*** %9, align 8
  %12 = load %struct.configtree*, %struct.configtree** %6, align 8
  %13 = load %struct.configtree*, %struct.configtree** %7, align 8
  %14 = load %struct.configtree**, %struct.configtree*** %9, align 8
  %15 = call signext i16 @intersectNodeTree(%struct.configtree* noundef %12, %struct.configtree* noundef %13, %struct.configtree** noundef %14)
  %16 = icmp ne i16 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %4
  %18 = load %struct.configtree*, %struct.configtree** %6, align 8
  %19 = load %struct.configtree**, %struct.configtree*** %8, align 8
  store %struct.configtree* %18, %struct.configtree** %19, align 8
  store i16 1, i16* %5, align 2
  br label %44

20:                                               ; preds = %4
  %21 = load %struct.configtree*, %struct.configtree** %6, align 8
  %22 = getelementptr inbounds %struct.configtree, %struct.configtree* %21, i32 0, i32 3
  %23 = load i32, i32* %22, align 8
  store i32 %23, i32* %10, align 4
  store i32 0, i32* %11, align 4
  br label %24

24:                                               ; preds = %39, %20
  %25 = load i32, i32* %11, align 4
  %26 = load i32, i32* %10, align 4
  %27 = icmp slt i32 %25, %26
  br i1 %27, label %28, label %42

28:                                               ; preds = %24
  %29 = load %struct.configtree*, %struct.configtree** %6, align 8
  %30 = load i32, i32* %11, align 4
  %31 = call %struct.configtree* @getChild(%struct.configtree* noundef %29, i32 noundef %30)
  %32 = load %struct.configtree*, %struct.configtree** %7, align 8
  %33 = load %struct.configtree**, %struct.configtree*** %8, align 8
  %34 = load %struct.configtree**, %struct.configtree*** %9, align 8
  %35 = call signext i16 @intersect_iterateTree(%struct.configtree* noundef %31, %struct.configtree* noundef %32, %struct.configtree** noundef %33, %struct.configtree** noundef %34)
  %36 = icmp ne i16 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  store i16 1, i16* %5, align 2
  br label %44

38:                                               ; preds = %28
  br label %39

39:                                               ; preds = %38
  %40 = load i32, i32* %11, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %11, align 4
  br label %24, !llvm.loop !125

42:                                               ; preds = %24
  br label %43

43:                                               ; preds = %42
  store i16 0, i16* %5, align 2
  br label %44

44:                                               ; preds = %43, %37, %17
  %45 = load i16, i16* %5, align 2
  ret i16 %45
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectNodeTree(%struct.configtree* noundef %0, %struct.configtree* noundef %1, %struct.configtree** noundef %2) #0 {
  %4 = alloca i16, align 2
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca %struct.configtree**, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store %struct.configtree* %1, %struct.configtree** %6, align 8
  store %struct.configtree** %2, %struct.configtree*** %7, align 8
  %11 = load %struct.configtree*, %struct.configtree** %5, align 8
  %12 = load %struct.configtree*, %struct.configtree** %6, align 8
  %13 = call i32 @intersectNodeNode(%struct.configtree* noundef %11, %struct.configtree* noundef %12)
  store i32 %13, i32* %8, align 4
  %14 = load i32, i32* %8, align 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %3
  %17 = load %struct.configtree*, %struct.configtree** %6, align 8
  %18 = load %struct.configtree**, %struct.configtree*** %7, align 8
  store %struct.configtree* %17, %struct.configtree** %18, align 8
  store i16 1, i16* %4, align 2
  br label %42

19:                                               ; preds = %3
  %20 = load %struct.configtree*, %struct.configtree** %6, align 8
  %21 = getelementptr inbounds %struct.configtree, %struct.configtree* %20, i32 0, i32 3
  %22 = load i32, i32* %21, align 8
  store i32 %22, i32* %9, align 4
  store i32 0, i32* %10, align 4
  br label %23

23:                                               ; preds = %37, %19
  %24 = load i32, i32* %10, align 4
  %25 = load i32, i32* %9, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %40

27:                                               ; preds = %23
  %28 = load %struct.configtree*, %struct.configtree** %5, align 8
  %29 = load %struct.configtree*, %struct.configtree** %6, align 8
  %30 = load i32, i32* %10, align 4
  %31 = call %struct.configtree* @getChild(%struct.configtree* noundef %29, i32 noundef %30)
  %32 = load %struct.configtree**, %struct.configtree*** %7, align 8
  %33 = call signext i16 @intersectNodeTree(%struct.configtree* noundef %28, %struct.configtree* noundef %31, %struct.configtree** noundef %32)
  %34 = icmp ne i16 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %27
  store i16 1, i16* %4, align 2
  br label %42

36:                                               ; preds = %27
  br label %37

37:                                               ; preds = %36
  %38 = load i32, i32* %10, align 4
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %10, align 4
  br label %23, !llvm.loop !126

40:                                               ; preds = %23
  br label %41

41:                                               ; preds = %40
  store i16 0, i16* %4, align 2
  br label %42

42:                                               ; preds = %41, %35, %16
  %43 = load i16, i16* %4, align 2
  ret i16 %43
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @fixIntersectionOfSiblings(%struct.configtree* noundef %0, i32 noundef %1, i32 noundef %2, double* noundef %3, %struct.vrna_plot_options_puzzler_t* noundef %4) #0 {
  %6 = alloca %struct.configtree*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca double*, align 8
  %10 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca i16, align 2
  %17 = alloca double, align 8
  %18 = alloca %struct.configtree*, align 8
  %19 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store double* %3, double** %9, align 8
  store %struct.vrna_plot_options_puzzler_t* %4, %struct.vrna_plot_options_puzzler_t** %10, align 8
  %20 = load %struct.configtree*, %struct.configtree** %6, align 8
  %21 = load i32, i32* %8, align 4
  call void @getBoundingWedge(%struct.configtree* noundef %20, i32 noundef %21, double* noundef %11, double* noundef %12)
  %22 = load double, double* %11, align 8
  store double %22, double* %13, align 8
  %23 = load %struct.configtree*, %struct.configtree** %6, align 8
  %24 = load i32, i32* %7, align 4
  call void @getBoundingWedge(%struct.configtree* noundef %23, i32 noundef %24, double* noundef %11, double* noundef %12)
  %25 = load double, double* %12, align 8
  store double %25, double* %14, align 8
  %26 = load double, double* %13, align 8
  %27 = load double, double* %14, align 8
  %28 = fsub double %26, %27
  store double %28, double* %15, align 8
  store i16 0, i16* %16, align 2
  %29 = load double, double* %15, align 8
  %30 = fcmp olt double %29, 0.000000e+00
  br i1 %30, label %31, label %58

31:                                               ; preds = %5
  %32 = load double, double* %15, align 8
  %33 = call double @llvm.maxnum.f64(double %32, double 0xBFF921FB54442D18)
  store double %33, double* %15, align 8
  %34 = load %struct.configtree*, %struct.configtree** %6, align 8
  %35 = load %struct.configtree*, %struct.configtree** %6, align 8
  %36 = call %struct.configtree* @getParent(%struct.configtree* noundef %35)
  %37 = load i32, i32* %7, align 4
  %38 = load i32, i32* %8, align 4
  %39 = load double, double* %15, align 8
  %40 = fmul double -1.000000e+00, %39
  %41 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %10, align 8
  %42 = load double*, double** %9, align 8
  %43 = call double @calcDeltas(%struct.configtree* noundef %34, %struct.configtree* noundef %36, i32 noundef %37, i32 noundef %38, double noundef %40, %struct.vrna_plot_options_puzzler_t* noundef %41, double* noundef %42)
  store double %43, double* %17, align 8
  %44 = load double, double* %17, align 8
  %45 = fcmp une double %44, 0.000000e+00
  br i1 %45, label %46, label %57

46:                                               ; preds = %31
  %47 = load %struct.configtree*, %struct.configtree** %6, align 8
  %48 = load i32, i32* %7, align 4
  %49 = call %struct.configtree* @getChild(%struct.configtree* noundef %47, i32 noundef %48)
  store %struct.configtree* %49, %struct.configtree** %18, align 8
  %50 = load %struct.configtree*, %struct.configtree** %6, align 8
  %51 = load i32, i32* %8, align 4
  %52 = call %struct.configtree* @getChild(%struct.configtree* noundef %50, i32 noundef %51)
  store %struct.configtree* %52, %struct.configtree** %19, align 8
  %53 = load %struct.configtree*, %struct.configtree** %6, align 8
  %54 = load double*, double** %9, align 8
  %55 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %10, align 8
  %56 = call signext i16 @checkAndApplyConfigChanges(%struct.configtree* noundef %53, double* noundef %54, i32 noundef 10, %struct.vrna_plot_options_puzzler_t* noundef %55)
  store i16 %56, i16* %16, align 2
  br label %57

57:                                               ; preds = %46, %31
  br label %58

58:                                               ; preds = %57, %5
  %59 = load i16, i16* %16, align 2
  ret i16 %59
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @countSubtreeNodes(%struct.configtree* noundef %0) #0 {
  %2 = alloca %struct.configtree*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %2, align 8
  store i32 1, i32* %3, align 4
  store i32 0, i32* %4, align 4
  br label %5

5:                                                ; preds = %18, %1
  %6 = load i32, i32* %4, align 4
  %7 = load %struct.configtree*, %struct.configtree** %2, align 8
  %8 = getelementptr inbounds %struct.configtree, %struct.configtree* %7, i32 0, i32 3
  %9 = load i32, i32* %8, align 8
  %10 = icmp slt i32 %6, %9
  br i1 %10, label %11, label %21

11:                                               ; preds = %5
  %12 = load %struct.configtree*, %struct.configtree** %2, align 8
  %13 = load i32, i32* %4, align 4
  %14 = call %struct.configtree* @getChild(%struct.configtree* noundef %12, i32 noundef %13)
  %15 = call i32 @countSubtreeNodes(%struct.configtree* noundef %14)
  %16 = load i32, i32* %3, align 4
  %17 = add nsw i32 %16, %15
  store i32 %17, i32* %3, align 4
  br label %18

18:                                               ; preds = %11
  %19 = load i32, i32* %4, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* %4, align 4
  br label %5, !llvm.loop !127

21:                                               ; preds = %5
  %22 = load i32, i32* %3, align 4
  ret i32 %22
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @collectSubtreeNodes(%struct.configtree* noundef %0, %struct.configtree** noundef %1, i32 noundef %2) #0 {
  %4 = alloca %struct.configtree*, align 8
  %5 = alloca %struct.configtree**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %4, align 8
  store %struct.configtree** %1, %struct.configtree*** %5, align 8
  store i32 %2, i32* %6, align 4
  %9 = load %struct.configtree*, %struct.configtree** %4, align 8
  %10 = load %struct.configtree**, %struct.configtree*** %5, align 8
  %11 = load i32, i32* %6, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct.configtree*, %struct.configtree** %10, i64 %12
  store %struct.configtree* %9, %struct.configtree** %13, align 8
  %14 = load i32, i32* %6, align 4
  %15 = add nsw i32 %14, 1
  store i32 %15, i32* %7, align 4
  store i32 0, i32* %8, align 4
  br label %16

16:                                               ; preds = %29, %3
  %17 = load i32, i32* %8, align 4
  %18 = load %struct.configtree*, %struct.configtree** %4, align 8
  %19 = getelementptr inbounds %struct.configtree, %struct.configtree* %18, i32 0, i32 3
  %20 = load i32, i32* %19, align 8
  %21 = icmp slt i32 %17, %20
  br i1 %21, label %22, label %32

22:                                               ; preds = %16
  %23 = load %struct.configtree*, %struct.configtree** %4, align 8
  %24 = load i32, i32* %8, align 4
  %25 = call %struct.configtree* @getChild(%struct.configtree* noundef %23, i32 noundef %24)
  %26 = load %struct.configtree**, %struct.configtree*** %5, align 8
  %27 = load i32, i32* %7, align 4
  %28 = call i32 @collectSubtreeNodes(%struct.configtree* noundef %25, %struct.configtree** noundef %26, i32 noundef %27)
  store i32 %28, i32* %7, align 4
  br label %29

29:                                               ; preds = %22
  %30 = load i32, i32* %8, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %8, align 4
  br label %16, !llvm.loop !128

32:                                               ; preds = %16
  %33 = load i32, i32* %7, align 4
  ret i32 %33
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @countAncestorNodes(%struct.configtree* noundef %0) #0 {
  %2 = alloca %struct.configtree*, align 8
  %3 = alloca i32, align 4
  %4 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %2, align 8
  store i32 0, i32* %3, align 4
  %5 = load %struct.configtree*, %struct.configtree** %2, align 8
  %6 = call %struct.configtree* @getParent(%struct.configtree* noundef %5)
  store %struct.configtree* %6, %struct.configtree** %4, align 8
  br label %7

7:                                                ; preds = %10, %1
  %8 = load %struct.configtree*, %struct.configtree** %4, align 8
  %9 = icmp ne %struct.configtree* %8, null
  br i1 %9, label %10, label %15

10:                                               ; preds = %7
  %11 = load i32, i32* %3, align 4
  %12 = add nsw i32 %11, 1
  store i32 %12, i32* %3, align 4
  %13 = load %struct.configtree*, %struct.configtree** %4, align 8
  %14 = call %struct.configtree* @getParent(%struct.configtree* noundef %13)
  store %struct.configtree* %14, %struct.configtree** %4, align 8
  br label %7, !llvm.loop !129

15:                                               ; preds = %7
  %16 = load i32, i32* %3, align 4
  ret i32 %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @collectAncestorNodes(%struct.configtree* noundef %0, %struct.configtree** noundef %1) #0 {
  %3 = alloca %struct.configtree*, align 8
  %4 = alloca %struct.configtree**, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %3, align 8
  store %struct.configtree** %1, %struct.configtree*** %4, align 8
  store i32 0, i32* %5, align 4
  %7 = load %struct.configtree*, %struct.configtree** %3, align 8
  %8 = call %struct.configtree* @getParent(%struct.configtree* noundef %7)
  store %struct.configtree* %8, %struct.configtree** %6, align 8
  br label %9

9:                                                ; preds = %12, %2
  %10 = load %struct.configtree*, %struct.configtree** %6, align 8
  %11 = icmp ne %struct.configtree* %10, null
  br i1 %11, label %12, label %22

12:                                               ; preds = %9
  %13 = load %struct.configtree*, %struct.configtree** %6, align 8
  %14 = load %struct.configtree**, %struct.configtree*** %4, align 8
  %15 = load i32, i32* %5, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %struct.configtree*, %struct.configtree** %14, i64 %16
  store %struct.configtree* %13, %struct.configtree** %17, align 8
  %18 = load i32, i32* %5, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %5, align 4
  %20 = load %struct.configtree*, %struct.configtree** %6, align 8
  %21 = call %struct.configtree* @getParent(%struct.configtree* noundef %20)
  store %struct.configtree* %21, %struct.configtree** %6, align 8
  br label %9, !llvm.loop !130

22:                                               ; preds = %9
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @checkIntersections(%struct.configtree** noundef %0, i32 noundef %1, %struct.configtree** noundef %2, i32 noundef %3, %struct.vrna_plot_options_puzzler_t* noundef %4) #0 {
  %6 = alloca %struct.configtree**, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.configtree**, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  store %struct.configtree** %0, %struct.configtree*** %6, align 8
  store i32 %1, i32* %7, align 4
  store %struct.configtree** %2, %struct.configtree*** %8, align 8
  store i32 %3, i32* %9, align 4
  store %struct.vrna_plot_options_puzzler_t* %4, %struct.vrna_plot_options_puzzler_t** %10, align 8
  %11 = load %struct.configtree**, %struct.configtree*** %6, align 8
  %12 = load i32, i32* %7, align 4
  %13 = load %struct.configtree**, %struct.configtree*** %6, align 8
  %14 = load i32, i32* %7, align 4
  %15 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %10, align 8
  %16 = call signext i16 @intersectNodeLists(%struct.configtree** noundef %11, i32 noundef %12, %struct.configtree** noundef %13, i32 noundef %14, %struct.vrna_plot_options_puzzler_t* noundef %15)
  %17 = sext i16 %16 to i32
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %28, label %19

19:                                               ; preds = %5
  %20 = load %struct.configtree**, %struct.configtree*** %6, align 8
  %21 = load i32, i32* %7, align 4
  %22 = load %struct.configtree**, %struct.configtree*** %8, align 8
  %23 = load i32, i32* %9, align 4
  %24 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %10, align 8
  %25 = call signext i16 @intersectNodeLists(%struct.configtree** noundef %20, i32 noundef %21, %struct.configtree** noundef %22, i32 noundef %23, %struct.vrna_plot_options_puzzler_t* noundef %24)
  %26 = sext i16 %25 to i32
  %27 = icmp ne i32 %26, 0
  br label %28

28:                                               ; preds = %19, %5
  %29 = phi i1 [ true, %5 ], [ %27, %19 ]
  %30 = zext i1 %29 to i32
  %31 = trunc i32 %30 to i16
  ret i16 %31
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @optimizeTreeRecursive(%struct.configtree* noundef %0, %struct.configtree** noundef %1, i32 noundef %2, %struct.configtree** noundef %3, i32 noundef %4, %struct.vrna_plot_options_puzzler_t* noundef %5) #0 {
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca %struct.configtree**, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.configtree**, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.configtree*, align 8
  store %struct.configtree* %0, %struct.configtree** %7, align 8
  store %struct.configtree** %1, %struct.configtree*** %8, align 8
  store i32 %2, i32* %9, align 4
  store %struct.configtree** %3, %struct.configtree*** %10, align 8
  store i32 %4, i32* %11, align 4
  store %struct.vrna_plot_options_puzzler_t* %5, %struct.vrna_plot_options_puzzler_t** %12, align 8
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0), i8** %13, align 8
  store double 1.000000e+00, double* %14, align 8
  store double 1.000000e+00, double* %15, align 8
  store double 1.000000e+00, double* %16, align 8
  br label %19

19:                                               ; preds = %78, %6
  %20 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %12, align 8
  %21 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %20, i32 0, i32 11
  %22 = load i32, i32* %21, align 8
  %23 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %12, align 8
  %24 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %23, i32 0, i32 8
  %25 = load i32, i32* %24, align 4
  %26 = icmp sgt i32 %22, %25
  br i1 %26, label %27, label %28

27:                                               ; preds = %19
  store double 1.000000e+00, double* %16, align 8
  br label %81

28:                                               ; preds = %19
  store double 1.000000e+00, double* %16, align 8
  store i32 0, i32* %17, align 4
  br label %29

29:                                               ; preds = %52, %28
  %30 = load i32, i32* %17, align 4
  %31 = load %struct.configtree*, %struct.configtree** %7, align 8
  %32 = getelementptr inbounds %struct.configtree, %struct.configtree* %31, i32 0, i32 3
  %33 = load i32, i32* %32, align 8
  %34 = icmp slt i32 %30, %33
  br i1 %34, label %35, label %55

35:                                               ; preds = %29
  %36 = load %struct.configtree*, %struct.configtree** %7, align 8
  %37 = load i32, i32* %17, align 4
  %38 = call %struct.configtree* @getChild(%struct.configtree* noundef %36, i32 noundef %37)
  store %struct.configtree* %38, %struct.configtree** %18, align 8
  %39 = load %struct.configtree*, %struct.configtree** %18, align 8
  %40 = load %struct.configtree**, %struct.configtree*** %8, align 8
  %41 = load i32, i32* %9, align 4
  %42 = load %struct.configtree**, %struct.configtree*** %10, align 8
  %43 = load i32, i32* %11, align 4
  %44 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %12, align 8
  %45 = call double @optimizeTreeRecursive(%struct.configtree* noundef %39, %struct.configtree** noundef %40, i32 noundef %41, %struct.configtree** noundef %42, i32 noundef %43, %struct.vrna_plot_options_puzzler_t* noundef %44)
  store double %45, double* %15, align 8
  %46 = load double, double* %15, align 8
  %47 = load double, double* %16, align 8
  %48 = call double @llvm.minnum.f64(double %46, double %47)
  store double %48, double* %16, align 8
  %49 = load double, double* %15, align 8
  %50 = load double, double* %14, align 8
  %51 = fmul double %50, %49
  store double %51, double* %14, align 8
  br label %52

52:                                               ; preds = %35
  %53 = load i32, i32* %17, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %17, align 4
  br label %29, !llvm.loop !131

55:                                               ; preds = %29
  %56 = load double, double* %16, align 8
  %57 = fcmp olt double %56, 1.000000e+00
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  br label %78

59:                                               ; preds = %55
  %60 = load %struct.configtree*, %struct.configtree** %7, align 8
  %61 = call signext i16 @isExterior(%struct.configtree* noundef %60)
  %62 = icmp ne i16 %61, 0
  br i1 %62, label %77, label %63

63:                                               ; preds = %59
  %64 = load %struct.configtree*, %struct.configtree** %7, align 8
  %65 = load %struct.configtree**, %struct.configtree*** %8, align 8
  %66 = load i32, i32* %9, align 4
  %67 = load %struct.configtree**, %struct.configtree*** %10, align 8
  %68 = load i32, i32* %11, align 4
  %69 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %12, align 8
  %70 = call double @optimizeNode(%struct.configtree* noundef %64, %struct.configtree** noundef %65, i32 noundef %66, %struct.configtree** noundef %67, i32 noundef %68, %struct.vrna_plot_options_puzzler_t* noundef %69)
  store double %70, double* %15, align 8
  %71 = load double, double* %15, align 8
  %72 = load double, double* %16, align 8
  %73 = call double @llvm.minnum.f64(double %71, double %72)
  store double %73, double* %16, align 8
  %74 = load double, double* %15, align 8
  %75 = load double, double* %14, align 8
  %76 = fmul double %75, %74
  store double %76, double* %14, align 8
  br label %77

77:                                               ; preds = %63, %59
  br label %78

78:                                               ; preds = %77, %58
  %79 = load double, double* %16, align 8
  %80 = fcmp olt double %79, 1.000000e+00
  br i1 %80, label %19, label %81, !llvm.loop !132

81:                                               ; preds = %78, %27
  %82 = load double, double* %14, align 8
  ret double %82
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectNodeLists(%struct.configtree** noundef %0, i32 noundef %1, %struct.configtree** noundef %2, i32 noundef %3, %struct.vrna_plot_options_puzzler_t* noundef %4) #0 {
  %6 = alloca i16, align 2
  %7 = alloca %struct.configtree**, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.configtree**, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %12 = alloca i32, align 4
  %13 = alloca %struct.configtree*, align 8
  %14 = alloca i16, align 2
  %15 = alloca i32, align 4
  %16 = alloca %struct.configtree*, align 8
  store %struct.configtree** %0, %struct.configtree*** %7, align 8
  store i32 %1, i32* %8, align 4
  store %struct.configtree** %2, %struct.configtree*** %9, align 8
  store i32 %3, i32* %10, align 4
  store %struct.vrna_plot_options_puzzler_t* %4, %struct.vrna_plot_options_puzzler_t** %11, align 8
  store i32 0, i32* %12, align 4
  br label %17

17:                                               ; preds = %72, %5
  %18 = load i32, i32* %12, align 4
  %19 = load i32, i32* %8, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %75

21:                                               ; preds = %17
  %22 = load %struct.configtree**, %struct.configtree*** %7, align 8
  %23 = load i32, i32* %12, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %struct.configtree*, %struct.configtree** %22, i64 %24
  %26 = load %struct.configtree*, %struct.configtree** %25, align 8
  store %struct.configtree* %26, %struct.configtree** %13, align 8
  %27 = load %struct.configtree*, %struct.configtree** %13, align 8
  %28 = call signext i16 @isExterior(%struct.configtree* noundef %27)
  store i16 %28, i16* %14, align 2
  store i32 0, i32* %15, align 4
  br label %29

29:                                               ; preds = %68, %21
  %30 = load i32, i32* %15, align 4
  %31 = load i32, i32* %10, align 4
  %32 = icmp slt i32 %30, %31
  br i1 %32, label %33, label %71

33:                                               ; preds = %29
  %34 = load %struct.configtree**, %struct.configtree*** %9, align 8
  %35 = load i32, i32* %15, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.configtree*, %struct.configtree** %34, i64 %36
  %38 = load %struct.configtree*, %struct.configtree** %37, align 8
  store %struct.configtree* %38, %struct.configtree** %16, align 8
  %39 = load i16, i16* %14, align 2
  %40 = icmp ne i16 %39, 0
  br i1 %40, label %41, label %48

41:                                               ; preds = %33
  %42 = load %struct.configtree*, %struct.configtree** %16, align 8
  %43 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %11, align 8
  %44 = call signext i16 @intersectNodeExterior(%struct.configtree* noundef %42, %struct.vrna_plot_options_puzzler_t* noundef %43)
  %45 = icmp ne i16 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %41
  store i16 1, i16* %6, align 2
  br label %76

47:                                               ; preds = %41
  br label %67

48:                                               ; preds = %33
  %49 = load %struct.configtree*, %struct.configtree** %16, align 8
  %50 = call signext i16 @isExterior(%struct.configtree* noundef %49)
  %51 = icmp ne i16 %50, 0
  br i1 %51, label %52, label %59

52:                                               ; preds = %48
  %53 = load %struct.configtree*, %struct.configtree** %13, align 8
  %54 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %11, align 8
  %55 = call signext i16 @intersectNodeExterior(%struct.configtree* noundef %53, %struct.vrna_plot_options_puzzler_t* noundef %54)
  %56 = icmp ne i16 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %52
  store i16 1, i16* %6, align 2
  br label %76

58:                                               ; preds = %52
  br label %66

59:                                               ; preds = %48
  %60 = load %struct.configtree*, %struct.configtree** %13, align 8
  %61 = load %struct.configtree*, %struct.configtree** %16, align 8
  %62 = call i32 @intersectNodeNode(%struct.configtree* noundef %60, %struct.configtree* noundef %61)
  %63 = icmp ne i32 0, %62
  br i1 %63, label %64, label %65

64:                                               ; preds = %59
  store i16 1, i16* %6, align 2
  br label %76

65:                                               ; preds = %59
  br label %66

66:                                               ; preds = %65, %58
  br label %67

67:                                               ; preds = %66, %47
  br label %68

68:                                               ; preds = %67
  %69 = load i32, i32* %15, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %15, align 4
  br label %29, !llvm.loop !133

71:                                               ; preds = %29
  br label %72

72:                                               ; preds = %71
  %73 = load i32, i32* %12, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %12, align 4
  br label %17, !llvm.loop !134

75:                                               ; preds = %17
  store i16 0, i16* %6, align 2
  br label %76

76:                                               ; preds = %75, %64, %57, %46
  %77 = load i16, i16* %6, align 2
  ret i16 %77
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @optimizeNode(%struct.configtree* noundef %0, %struct.configtree** noundef %1, i32 noundef %2, %struct.configtree** noundef %3, i32 noundef %4, %struct.vrna_plot_options_puzzler_t* noundef %5) #0 {
  %7 = alloca double, align 8
  %8 = alloca %struct.configtree*, align 8
  %9 = alloca %struct.configtree**, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.configtree**, align 8
  %12 = alloca i32, align 4
  %13 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca %struct.config*, align 8
  %16 = alloca double, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.config*, align 8
  %19 = alloca %struct.config*, align 8
  %20 = alloca double, align 8
  %21 = alloca double*, align 8
  %22 = alloca double*, align 8
  %23 = alloca double*, align 8
  %24 = alloca i32*, align 8
  %25 = alloca i32*, align 8
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i16, align 2
  %30 = alloca double, align 8
  %31 = alloca double, align 8
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca double, align 8
  %36 = alloca double, align 8
  %37 = alloca double, align 8
  %38 = alloca double, align 8
  %39 = alloca double, align 8
  %40 = alloca double, align 8
  %41 = alloca double, align 8
  %42 = alloca i32, align 4
  %43 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %8, align 8
  store %struct.configtree** %1, %struct.configtree*** %9, align 8
  store i32 %2, i32* %10, align 4
  store %struct.configtree** %3, %struct.configtree*** %11, align 8
  store i32 %4, i32* %12, align 4
  store %struct.vrna_plot_options_puzzler_t* %5, %struct.vrna_plot_options_puzzler_t** %13, align 8
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.45, i64 0, i64 0), i8** %14, align 8
  %44 = load %struct.configtree*, %struct.configtree** %8, align 8
  %45 = getelementptr inbounds %struct.configtree, %struct.configtree* %44, i32 0, i32 3
  %46 = load i32, i32* %45, align 8
  %47 = icmp sle i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %6
  store double 1.000000e+00, double* %7, align 8
  br label %355

49:                                               ; preds = %6
  %50 = load %struct.configtree*, %struct.configtree** %8, align 8
  %51 = getelementptr inbounds %struct.configtree, %struct.configtree* %50, i32 0, i32 4
  %52 = load %struct.config*, %struct.config** %51, align 8
  store %struct.config* %52, %struct.config** %15, align 8
  %53 = load %struct.config*, %struct.config** %15, align 8
  %54 = getelementptr inbounds %struct.config, %struct.config* %53, i32 0, i32 0
  %55 = load double, double* %54, align 8
  %56 = load %struct.config*, %struct.config** %15, align 8
  %57 = getelementptr inbounds %struct.config, %struct.config* %56, i32 0, i32 2
  %58 = load double, double* %57, align 8
  %59 = fsub double %55, %58
  %60 = fcmp olt double %59, 5.000000e+00
  br i1 %60, label %61, label %62

61:                                               ; preds = %49
  store double 1.000000e+00, double* %7, align 8
  br label %355

62:                                               ; preds = %49
  store double 2.000000e+00, double* %16, align 8
  %63 = load %struct.config*, %struct.config** %15, align 8
  %64 = getelementptr inbounds %struct.config, %struct.config* %63, i32 0, i32 4
  %65 = load i32, i32* %64, align 8
  store i32 %65, i32* %17, align 4
  %66 = load %struct.config*, %struct.config** %15, align 8
  %67 = call %struct.config* @cfgCloneConfig(%struct.config* noundef %66)
  store %struct.config* %67, %struct.config** %18, align 8
  %68 = load %struct.config*, %struct.config** %18, align 8
  %69 = call %struct.config* @cfgCloneConfig(%struct.config* noundef %68)
  store %struct.config* %69, %struct.config** %19, align 8
  %70 = load %struct.config*, %struct.config** %15, align 8
  %71 = getelementptr inbounds %struct.config, %struct.config* %70, i32 0, i32 0
  %72 = load double, double* %71, align 8
  store double %72, double* %20, align 8
  %73 = load i32, i32* %17, align 4
  %74 = sext i32 %73 to i64
  %75 = mul i64 %74, 8
  %76 = trunc i64 %75 to i32
  %77 = call i8* @vrna_alloc(i32 noundef %76)
  %78 = bitcast i8* %77 to double*
  store double* %78, double** %21, align 8
  %79 = load i32, i32* %17, align 4
  %80 = sext i32 %79 to i64
  %81 = mul i64 %80, 8
  %82 = trunc i64 %81 to i32
  %83 = call i8* @vrna_alloc(i32 noundef %82)
  %84 = bitcast i8* %83 to double*
  store double* %84, double** %22, align 8
  %85 = load i32, i32* %17, align 4
  %86 = sext i32 %85 to i64
  %87 = mul i64 %86, 8
  %88 = trunc i64 %87 to i32
  %89 = call i8* @vrna_alloc(i32 noundef %88)
  %90 = bitcast i8* %89 to double*
  store double* %90, double** %23, align 8
  %91 = load i32, i32* %17, align 4
  %92 = sext i32 %91 to i64
  %93 = mul i64 %92, 4
  %94 = trunc i64 %93 to i32
  %95 = call i8* @vrna_alloc(i32 noundef %94)
  %96 = bitcast i8* %95 to i32*
  store i32* %96, i32** %24, align 8
  %97 = load i32, i32* %17, align 4
  %98 = add nsw i32 %97, 1
  %99 = sext i32 %98 to i64
  %100 = mul i64 %99, 4
  %101 = trunc i64 %100 to i32
  %102 = call i8* @vrna_alloc(i32 noundef %101)
  %103 = bitcast i8* %102 to i32*
  store i32* %103, i32** %25, align 8
  store i32 0, i32* %26, align 4
  store i32 0, i32* %27, align 4
  %104 = load i32, i32* %17, align 4
  %105 = mul nsw i32 100, %104
  store i32 %105, i32* %28, align 4
  store i16 1, i16* %29, align 2
  br label %106

106:                                              ; preds = %276, %275, %62
  %107 = load i32, i32* %26, align 4
  %108 = load i32, i32* %17, align 4
  %109 = icmp slt i32 %107, %108
  br i1 %109, label %110, label %114

110:                                              ; preds = %106
  %111 = load i32, i32* %27, align 4
  %112 = load i32, i32* %28, align 4
  %113 = icmp slt i32 %111, %112
  br label %114

114:                                              ; preds = %110, %106
  %115 = phi i1 [ false, %106 ], [ %113, %110 ]
  br i1 %115, label %116, label %296

116:                                              ; preds = %114
  %117 = load i32, i32* %27, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %27, align 4
  %119 = load i32*, i32** %25, align 8
  %120 = getelementptr inbounds i32, i32* %119, i64 0
  store i32 0, i32* %120, align 4
  %121 = load i16, i16* %29, align 2
  %122 = icmp ne i16 %121, 0
  br i1 %122, label %123, label %193

123:                                              ; preds = %116
  %124 = load %struct.config*, %struct.config** %15, align 8
  %125 = getelementptr inbounds %struct.config, %struct.config* %124, i32 0, i32 0
  %126 = load double, double* %125, align 8
  %127 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %128 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %127, i32 0, i32 2
  %129 = load double, double* %128, align 8
  %130 = call double @distanceToAngle(double noundef %126, double noundef %129)
  store double %130, double* %30, align 8
  %131 = load double*, double** %21, align 8
  %132 = load %struct.config*, %struct.config** %15, align 8
  %133 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %134 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %133, i32 0, i32 1
  %135 = load double, double* %134, align 8
  %136 = fptosi double %135 to i32
  call void @computeAlphas(double* noundef %131, %struct.config* noundef %132, i32 noundef %136)
  %137 = load double*, double** %21, align 8
  %138 = load i32, i32* %17, align 4
  %139 = load double, double* %30, align 8
  %140 = call signext i16 @canShrink(double* noundef %137, i32 noundef %138, double noundef %139)
  %141 = sext i16 %140 to i32
  %142 = icmp ne i32 %141, 0
  br i1 %142, label %143, label %169

143:                                              ; preds = %123
  %144 = load %struct.configtree*, %struct.configtree** %8, align 8
  %145 = load %struct.configtree**, %struct.configtree*** %9, align 8
  %146 = load i32, i32* %10, align 4
  %147 = load %struct.configtree**, %struct.configtree*** %11, align 8
  %148 = load i32, i32* %12, align 4
  %149 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %150 = call double @shrinkLoopRadius(%struct.configtree* noundef %144, %struct.configtree** noundef %145, i32 noundef %146, %struct.configtree** noundef %147, i32 noundef %148, %struct.vrna_plot_options_puzzler_t* noundef %149)
  %151 = fcmp olt double %150, 1.000000e+00
  br i1 %151, label %152, label %169

152:                                              ; preds = %143
  %153 = load %struct.config*, %struct.config** %19, align 8
  call void @cfgFreeConfig(%struct.config* noundef %153)
  %154 = load %struct.config*, %struct.config** %15, align 8
  %155 = call %struct.config* @cfgCloneConfig(%struct.config* noundef %154)
  store %struct.config* %155, %struct.config** %19, align 8
  store i32 0, i32* %26, align 4
  %156 = load %struct.config*, %struct.config** %15, align 8
  %157 = getelementptr inbounds %struct.config, %struct.config* %156, i32 0, i32 0
  %158 = load double, double* %157, align 8
  %159 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %160 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %159, i32 0, i32 2
  %161 = load double, double* %160, align 8
  %162 = call double @distanceToAngle(double noundef %158, double noundef %161)
  store double %162, double* %30, align 8
  %163 = load double*, double** %21, align 8
  %164 = load %struct.config*, %struct.config** %15, align 8
  %165 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %166 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %165, i32 0, i32 1
  %167 = load double, double* %166, align 8
  %168 = fptosi double %167 to i32
  call void @computeAlphas(double* noundef %163, %struct.config* noundef %164, i32 noundef %168)
  br label %173

169:                                              ; preds = %143, %123
  %170 = load %struct.configtree*, %struct.configtree** %8, align 8
  %171 = load %struct.config*, %struct.config** %19, align 8
  %172 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  call void @applyConfig(%struct.configtree* noundef %170, %struct.config* noundef %171, %struct.vrna_plot_options_puzzler_t* noundef %172)
  br label %173

173:                                              ; preds = %169, %152
  %174 = load i32, i32* %26, align 4
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %176, label %192

176:                                              ; preds = %173
  %177 = load %struct.config*, %struct.config** %15, align 8
  %178 = getelementptr inbounds %struct.config, %struct.config* %177, i32 0, i32 0
  %179 = load double, double* %178, align 8
  %180 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %181 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %180, i32 0, i32 1
  %182 = load double, double* %181, align 8
  %183 = call double @distanceToAngle(double noundef %179, double noundef %182)
  store double %183, double* %31, align 8
  %184 = load %struct.configtree*, %struct.configtree** %8, align 8
  %185 = load i32, i32* %17, align 4
  %186 = load double, double* %31, align 8
  %187 = load double*, double** %22, align 8
  call void @getSpaces(%struct.configtree* noundef %184, i32 noundef %185, double noundef %186, double* noundef %187)
  %188 = load i32, i32* %17, align 4
  %189 = load double*, double** %21, align 8
  %190 = load double*, double** %22, align 8
  %191 = load i32*, i32** %24, align 8
  call void @bubblesort(i32 noundef %188, double* noundef %189, double* noundef %190, i32* noundef %191)
  br label %192

192:                                              ; preds = %176, %173
  br label %197

193:                                              ; preds = %116
  %194 = load %struct.configtree*, %struct.configtree** %8, align 8
  %195 = load %struct.config*, %struct.config** %19, align 8
  %196 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  call void @applyConfig(%struct.configtree* noundef %194, %struct.config* noundef %195, %struct.vrna_plot_options_puzzler_t* noundef %196)
  br label %197

197:                                              ; preds = %193, %192
  store i32 -1, i32* %32, align 4
  %198 = load i32, i32* %26, align 4
  store i32 %198, i32* %33, align 4
  br label %199

199:                                              ; preds = %228, %197
  %200 = load i32, i32* %33, align 4
  %201 = load i32, i32* %17, align 4
  %202 = icmp slt i32 %200, %201
  br i1 %202, label %203, label %231

203:                                              ; preds = %199
  %204 = load i32*, i32** %24, align 8
  %205 = load i32, i32* %33, align 4
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i32, i32* %204, i64 %206
  %208 = load i32, i32* %207, align 4
  store i32 %208, i32* %34, align 4
  %209 = load double*, double** %22, align 8
  %210 = load i32, i32* %34, align 4
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds double, double* %209, i64 %211
  %213 = load double, double* %212, align 8
  store double %213, double* %35, align 8
  %214 = load double, double* %35, align 8
  %215 = fcmp ogt double %214, 0x400921FB54442D18
  br i1 %215, label %216, label %217

216:                                              ; preds = %203
  store double 0x400921FB54442D18, double* %35, align 8
  br label %217

217:                                              ; preds = %216, %203
  %218 = load double, double* %30, align 8
  %219 = fmul double 2.000000e+00, %218
  store double %219, double* %36, align 8
  %220 = load double, double* %35, align 8
  %221 = load double, double* %36, align 8
  %222 = fcmp ogt double %220, %221
  br i1 %222, label %223, label %227

223:                                              ; preds = %217
  %224 = load i32, i32* %34, align 4
  store i32 %224, i32* %32, align 4
  %225 = load i32, i32* %33, align 4
  %226 = add nsw i32 %225, 1
  store i32 %226, i32* %26, align 4
  br label %231

227:                                              ; preds = %217
  br label %228

228:                                              ; preds = %227
  %229 = load i32, i32* %33, align 4
  %230 = add nsw i32 %229, 1
  store i32 %230, i32* %33, align 4
  br label %199, !llvm.loop !135

231:                                              ; preds = %223, %199
  %232 = load i32, i32* %32, align 4
  %233 = icmp slt i32 %232, 0
  br i1 %233, label %234, label %235

234:                                              ; preds = %231
  br label %296

235:                                              ; preds = %231
  %236 = load double*, double** %22, align 8
  %237 = load i32, i32* %32, align 4
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds double, double* %236, i64 %238
  %240 = load double, double* %239, align 8
  store double %240, double* %37, align 8
  %241 = load %struct.config*, %struct.config** %15, align 8
  %242 = getelementptr inbounds %struct.config, %struct.config* %241, i32 0, i32 3
  %243 = load %struct.configArc*, %struct.configArc** %242, align 8
  %244 = load i32, i32* %32, align 4
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds %struct.configArc, %struct.configArc* %243, i64 %245
  %247 = getelementptr inbounds %struct.configArc, %struct.configArc* %246, i32 0, i32 0
  %248 = load i32, i32* %247, align 8
  %249 = sitofp i32 %248 to double
  %250 = load double, double* %30, align 8
  %251 = fmul double %249, %250
  store double %251, double* %38, align 8
  %252 = load %struct.config*, %struct.config** %15, align 8
  %253 = getelementptr inbounds %struct.config, %struct.config* %252, i32 0, i32 3
  %254 = load %struct.configArc*, %struct.configArc** %253, align 8
  %255 = load i32, i32* %32, align 4
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds %struct.configArc, %struct.configArc* %254, i64 %256
  %258 = getelementptr inbounds %struct.configArc, %struct.configArc* %257, i32 0, i32 0
  %259 = load i32, i32* %258, align 8
  %260 = sitofp i32 %259 to double
  %261 = load double*, double** %21, align 8
  %262 = load i32, i32* %32, align 4
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds double, double* %261, i64 %263
  %265 = load double, double* %264, align 8
  %266 = fmul double %260, %265
  store double %266, double* %39, align 8
  store double 5.000000e-01, double* %40, align 8
  %267 = load double, double* %39, align 8
  %268 = load double, double* %38, align 8
  %269 = fsub double %267, %268
  %270 = load double, double* %37, align 8
  %271 = call double @llvm.minnum.f64(double %269, double %270)
  %272 = fmul double 5.000000e-01, %271
  store double %272, double* %41, align 8
  %273 = load double, double* %41, align 8
  %274 = fcmp olt double %273, 1.000000e-03
  br i1 %274, label %275, label %276

275:                                              ; preds = %235
  br label %106, !llvm.loop !136

276:                                              ; preds = %235
  %277 = load i32*, i32** %25, align 8
  %278 = load i32, i32* %32, align 4
  %279 = load i32, i32* %17, align 4
  call void @computeIncreases(i32* noundef %277, i32 noundef %278, i32 noundef %279)
  %280 = load double*, double** %23, align 8
  %281 = load i32, i32* %32, align 4
  %282 = load double, double* %41, align 8
  %283 = load %struct.config*, %struct.config** %15, align 8
  %284 = getelementptr inbounds %struct.config, %struct.config* %283, i32 0, i32 3
  %285 = load %struct.configArc*, %struct.configArc** %284, align 8
  %286 = load double*, double** %21, align 8
  %287 = load i32*, i32** %25, align 8
  call void @computeDeltas(double* noundef %280, i32 noundef %281, double noundef %282, %struct.configArc* noundef %285, double* noundef %286, i32* noundef %287)
  %288 = load %struct.configtree*, %struct.configtree** %8, align 8
  %289 = load double*, double** %23, align 8
  %290 = load %struct.configtree**, %struct.configtree*** %9, align 8
  %291 = load i32, i32* %10, align 4
  %292 = load %struct.configtree**, %struct.configtree*** %11, align 8
  %293 = load i32, i32* %12, align 4
  %294 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %295 = call signext i16 @searchBestConfig(%struct.configtree* noundef %288, double* noundef %289, %struct.configtree** noundef %290, i32 noundef %291, %struct.configtree** noundef %292, i32 noundef %293, %struct.vrna_plot_options_puzzler_t* noundef %294)
  store i16 %295, i16* %29, align 2
  br label %106, !llvm.loop !136

296:                                              ; preds = %234, %114
  %297 = load %struct.configtree*, %struct.configtree** %8, align 8
  %298 = load %struct.config*, %struct.config** %19, align 8
  %299 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  call void @applyConfig(%struct.configtree* noundef %297, %struct.config* noundef %298, %struct.vrna_plot_options_puzzler_t* noundef %299)
  %300 = load %struct.config*, %struct.config** %19, align 8
  %301 = getelementptr inbounds %struct.config, %struct.config* %300, i32 0, i32 0
  %302 = load double, double* %301, align 8
  %303 = load %struct.config*, %struct.config** %18, align 8
  %304 = getelementptr inbounds %struct.config, %struct.config* %303, i32 0, i32 0
  %305 = load double, double* %304, align 8
  %306 = fcmp olt double %302, %305
  br i1 %306, label %307, label %332

307:                                              ; preds = %296
  store i32 0, i32* %42, align 4
  br label %308

308:                                              ; preds = %324, %307
  %309 = load i32, i32* %42, align 4
  %310 = load i32, i32* %17, align 4
  %311 = icmp slt i32 %309, %310
  br i1 %311, label %312, label %327

312:                                              ; preds = %308
  %313 = load %struct.config*, %struct.config** %19, align 8
  %314 = load i32, i32* %42, align 4
  %315 = call double @getArcAngle(%struct.config* noundef %313, i32 noundef %314)
  %316 = load %struct.config*, %struct.config** %18, align 8
  %317 = load i32, i32* %42, align 4
  %318 = call double @getArcAngle(%struct.config* noundef %316, i32 noundef %317)
  %319 = fsub double %315, %318
  %320 = load double*, double** %23, align 8
  %321 = load i32, i32* %42, align 4
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds double, double* %320, i64 %322
  store double %319, double* %323, align 8
  br label %324

324:                                              ; preds = %312
  %325 = load i32, i32* %42, align 4
  %326 = add nsw i32 %325, 1
  store i32 %326, i32* %42, align 4
  br label %308, !llvm.loop !137

327:                                              ; preds = %308
  %328 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %329 = getelementptr inbounds %struct.vrna_plot_options_puzzler_t, %struct.vrna_plot_options_puzzler_t* %328, i32 0, i32 11
  %330 = load i32, i32* %329, align 8
  %331 = add nsw i32 %330, 1
  store i32 %331, i32* %329, align 8
  br label %336

332:                                              ; preds = %296
  %333 = load %struct.configtree*, %struct.configtree** %8, align 8
  %334 = load %struct.config*, %struct.config** %18, align 8
  %335 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  call void @applyConfig(%struct.configtree* noundef %333, %struct.config* noundef %334, %struct.vrna_plot_options_puzzler_t* noundef %335)
  br label %336

336:                                              ; preds = %332, %327
  %337 = load double*, double** %21, align 8
  %338 = bitcast double* %337 to i8*
  call void @free(i8* noundef %338) #7
  %339 = load double*, double** %22, align 8
  %340 = bitcast double* %339 to i8*
  call void @free(i8* noundef %340) #7
  %341 = load i32*, i32** %24, align 8
  %342 = bitcast i32* %341 to i8*
  call void @free(i8* noundef %342) #7
  %343 = load i32*, i32** %25, align 8
  %344 = bitcast i32* %343 to i8*
  call void @free(i8* noundef %344) #7
  %345 = load double*, double** %23, align 8
  %346 = bitcast double* %345 to i8*
  call void @free(i8* noundef %346) #7
  %347 = load %struct.config*, %struct.config** %19, align 8
  call void @cfgFreeConfig(%struct.config* noundef %347)
  %348 = load %struct.config*, %struct.config** %18, align 8
  call void @cfgFreeConfig(%struct.config* noundef %348)
  %349 = load %struct.config*, %struct.config** %15, align 8
  %350 = getelementptr inbounds %struct.config, %struct.config* %349, i32 0, i32 0
  %351 = load double, double* %350, align 8
  %352 = load double, double* %20, align 8
  %353 = fdiv double %351, %352
  store double %353, double* %43, align 8
  %354 = load double, double* %43, align 8
  store double %354, double* %7, align 8
  br label %355

355:                                              ; preds = %336, %61, %48
  %356 = load double, double* %7, align 8
  ret double %356
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.config* @cfgCloneConfig(%struct.config* noundef %0) #0 {
  %2 = alloca %struct.config*, align 8
  %3 = alloca %struct.config*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct.config* %0, %struct.config** %2, align 8
  %6 = call i8* @vrna_alloc(i32 noundef 40)
  %7 = bitcast i8* %6 to %struct.config*
  store %struct.config* %7, %struct.config** %3, align 8
  %8 = load %struct.config*, %struct.config** %2, align 8
  %9 = getelementptr inbounds %struct.config, %struct.config* %8, i32 0, i32 0
  %10 = load double, double* %9, align 8
  %11 = load %struct.config*, %struct.config** %3, align 8
  %12 = getelementptr inbounds %struct.config, %struct.config* %11, i32 0, i32 0
  store double %10, double* %12, align 8
  %13 = load %struct.config*, %struct.config** %2, align 8
  %14 = getelementptr inbounds %struct.config, %struct.config* %13, i32 0, i32 1
  %15 = load double, double* %14, align 8
  %16 = load %struct.config*, %struct.config** %3, align 8
  %17 = getelementptr inbounds %struct.config, %struct.config* %16, i32 0, i32 1
  store double %15, double* %17, align 8
  %18 = load %struct.config*, %struct.config** %2, align 8
  %19 = getelementptr inbounds %struct.config, %struct.config* %18, i32 0, i32 2
  %20 = load double, double* %19, align 8
  %21 = load %struct.config*, %struct.config** %3, align 8
  %22 = getelementptr inbounds %struct.config, %struct.config* %21, i32 0, i32 2
  store double %20, double* %22, align 8
  %23 = load %struct.config*, %struct.config** %2, align 8
  %24 = getelementptr inbounds %struct.config, %struct.config* %23, i32 0, i32 4
  %25 = load i32, i32* %24, align 8
  %26 = load %struct.config*, %struct.config** %3, align 8
  %27 = getelementptr inbounds %struct.config, %struct.config* %26, i32 0, i32 4
  store i32 %25, i32* %27, align 8
  %28 = load %struct.config*, %struct.config** %2, align 8
  %29 = getelementptr inbounds %struct.config, %struct.config* %28, i32 0, i32 4
  %30 = load i32, i32* %29, align 8
  store i32 %30, i32* %4, align 4
  %31 = load i32, i32* %4, align 4
  %32 = sext i32 %31 to i64
  %33 = mul i64 %32, 16
  %34 = trunc i64 %33 to i32
  %35 = call i8* @vrna_alloc(i32 noundef %34)
  %36 = bitcast i8* %35 to %struct.configArc*
  %37 = load %struct.config*, %struct.config** %3, align 8
  %38 = getelementptr inbounds %struct.config, %struct.config* %37, i32 0, i32 3
  store %struct.configArc* %36, %struct.configArc** %38, align 8
  store i32 0, i32* %5, align 4
  br label %39

39:                                               ; preds = %74, %1
  %40 = load i32, i32* %5, align 4
  %41 = load i32, i32* %4, align 4
  %42 = icmp slt i32 %40, %41
  br i1 %42, label %43, label %77

43:                                               ; preds = %39
  %44 = load %struct.config*, %struct.config** %2, align 8
  %45 = getelementptr inbounds %struct.config, %struct.config* %44, i32 0, i32 3
  %46 = load %struct.configArc*, %struct.configArc** %45, align 8
  %47 = load i32, i32* %5, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds %struct.configArc, %struct.configArc* %46, i64 %48
  %50 = getelementptr inbounds %struct.configArc, %struct.configArc* %49, i32 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = load %struct.config*, %struct.config** %3, align 8
  %53 = getelementptr inbounds %struct.config, %struct.config* %52, i32 0, i32 3
  %54 = load %struct.configArc*, %struct.configArc** %53, align 8
  %55 = load i32, i32* %5, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds %struct.configArc, %struct.configArc* %54, i64 %56
  %58 = getelementptr inbounds %struct.configArc, %struct.configArc* %57, i32 0, i32 0
  store i32 %51, i32* %58, align 8
  %59 = load %struct.config*, %struct.config** %2, align 8
  %60 = getelementptr inbounds %struct.config, %struct.config* %59, i32 0, i32 3
  %61 = load %struct.configArc*, %struct.configArc** %60, align 8
  %62 = load i32, i32* %5, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds %struct.configArc, %struct.configArc* %61, i64 %63
  %65 = getelementptr inbounds %struct.configArc, %struct.configArc* %64, i32 0, i32 1
  %66 = load double, double* %65, align 8
  %67 = load %struct.config*, %struct.config** %3, align 8
  %68 = getelementptr inbounds %struct.config, %struct.config* %67, i32 0, i32 3
  %69 = load %struct.configArc*, %struct.configArc** %68, align 8
  %70 = load i32, i32* %5, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds %struct.configArc, %struct.configArc* %69, i64 %71
  %73 = getelementptr inbounds %struct.configArc, %struct.configArc* %72, i32 0, i32 1
  store double %66, double* %73, align 8
  br label %74

74:                                               ; preds = %43
  %75 = load i32, i32* %5, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %5, align 4
  br label %39, !llvm.loop !138

77:                                               ; preds = %39
  %78 = load %struct.config*, %struct.config** %3, align 8
  ret %struct.config* %78
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @distanceToAngle(double noundef %0, double noundef %1) #0 {
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  store double %0, double* %3, align 8
  store double %1, double* %4, align 8
  %5 = load double, double* %4, align 8
  %6 = load double, double* %3, align 8
  %7 = fmul double 2.000000e+00, %6
  %8 = fdiv double %5, %7
  %9 = call double @asin(double noundef %8) #7
  %10 = fmul double 2.000000e+00, %9
  ret double %10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @computeAlphas(double* noundef %0, %struct.config* noundef %1, i32 noundef %2) #0 {
  %4 = alloca double*, align 8
  %5 = alloca %struct.config*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca double, align 8
  %9 = alloca i32, align 4
  store double* %0, double** %4, align 8
  store %struct.config* %1, %struct.config** %5, align 8
  store i32 %2, i32* %6, align 4
  %10 = load %struct.config*, %struct.config** %5, align 8
  %11 = getelementptr inbounds %struct.config, %struct.config* %10, i32 0, i32 4
  %12 = load i32, i32* %11, align 8
  store i32 %12, i32* %7, align 4
  %13 = load %struct.config*, %struct.config** %5, align 8
  %14 = getelementptr inbounds %struct.config, %struct.config* %13, i32 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = load i32, i32* %6, align 4
  %17 = sitofp i32 %16 to double
  %18 = call double @distanceToAngle(double noundef %15, double noundef %17)
  store double %18, double* %8, align 8
  store i32 0, i32* %9, align 4
  br label %19

19:                                               ; preds = %43, %3
  %20 = load i32, i32* %9, align 4
  %21 = load i32, i32* %7, align 4
  %22 = icmp slt i32 %20, %21
  br i1 %22, label %23, label %46

23:                                               ; preds = %19
  %24 = load %struct.config*, %struct.config** %5, align 8
  %25 = load i32, i32* %9, align 4
  %26 = call double @getArcAngle(%struct.config* noundef %24, i32 noundef %25)
  %27 = load double, double* %8, align 8
  %28 = fsub double %26, %27
  %29 = load %struct.config*, %struct.config** %5, align 8
  %30 = getelementptr inbounds %struct.config, %struct.config* %29, i32 0, i32 3
  %31 = load %struct.configArc*, %struct.configArc** %30, align 8
  %32 = load i32, i32* %9, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds %struct.configArc, %struct.configArc* %31, i64 %33
  %35 = getelementptr inbounds %struct.configArc, %struct.configArc* %34, i32 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = sitofp i32 %36 to double
  %38 = fdiv double %28, %37
  %39 = load double*, double** %4, align 8
  %40 = load i32, i32* %9, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds double, double* %39, i64 %41
  store double %38, double* %42, align 8
  br label %43

43:                                               ; preds = %23
  %44 = load i32, i32* %9, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %9, align 4
  br label %19, !llvm.loop !139

46:                                               ; preds = %19
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @canShrink(double* noundef %0, i32 noundef %1, double noundef %2) #0 {
  %4 = alloca i16, align 2
  %5 = alloca double*, align 8
  %6 = alloca i32, align 4
  %7 = alloca double, align 8
  %8 = alloca i32, align 4
  store double* %0, double** %5, align 8
  store i32 %1, i32* %6, align 4
  store double %2, double* %7, align 8
  store i32 0, i32* %8, align 4
  br label %9

9:                                                ; preds = %23, %3
  %10 = load i32, i32* %8, align 4
  %11 = load i32, i32* %6, align 4
  %12 = icmp slt i32 %10, %11
  br i1 %12, label %13, label %26

13:                                               ; preds = %9
  %14 = load double*, double** %5, align 8
  %15 = load i32, i32* %8, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds double, double* %14, i64 %16
  %18 = load double, double* %17, align 8
  %19 = load double, double* %7, align 8
  %20 = fcmp ole double %18, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %13
  store i16 0, i16* %4, align 2
  br label %27

22:                                               ; preds = %13
  br label %23

23:                                               ; preds = %22
  %24 = load i32, i32* %8, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %8, align 4
  br label %9, !llvm.loop !140

26:                                               ; preds = %9
  store i16 1, i16* %4, align 2
  br label %27

27:                                               ; preds = %26, %21
  %28 = load i16, i16* %4, align 2
  ret i16 %28
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @shrinkLoopRadius(%struct.configtree* noundef %0, %struct.configtree** noundef %1, i32 noundef %2, %struct.configtree** noundef %3, i32 noundef %4, %struct.vrna_plot_options_puzzler_t* noundef %5) #0 {
  %7 = alloca %struct.configtree*, align 8
  %8 = alloca %struct.configtree**, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.configtree**, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %13 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %7, align 8
  store %struct.configtree** %1, %struct.configtree*** %8, align 8
  store i32 %2, i32* %9, align 4
  store %struct.configtree** %3, %struct.configtree*** %10, align 8
  store i32 %4, i32* %11, align 4
  store %struct.vrna_plot_options_puzzler_t* %5, %struct.vrna_plot_options_puzzler_t** %12, align 8
  store i32 1, i32* %13, align 4
  %14 = load %struct.configtree*, %struct.configtree** %7, align 8
  %15 = load %struct.configtree**, %struct.configtree*** %8, align 8
  %16 = load i32, i32* %9, align 4
  %17 = load %struct.configtree**, %struct.configtree*** %10, align 8
  %18 = load i32, i32* %11, align 4
  %19 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %12, align 8
  %20 = call double @shrinkLoopRadiusLinearSearch(%struct.configtree* noundef %14, %struct.configtree** noundef %15, i32 noundef %16, %struct.configtree** noundef %17, i32 noundef %18, %struct.vrna_plot_options_puzzler_t* noundef %19)
  ret double %20
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cfgFreeConfig(%struct.config* noundef %0) #0 {
  %2 = alloca %struct.config*, align 8
  store %struct.config* %0, %struct.config** %2, align 8
  %3 = load %struct.config*, %struct.config** %2, align 8
  %4 = getelementptr inbounds %struct.config, %struct.config* %3, i32 0, i32 3
  %5 = load %struct.configArc*, %struct.configArc** %4, align 8
  %6 = bitcast %struct.configArc* %5 to i8*
  call void @free(i8* noundef %6) #7
  %7 = load %struct.config*, %struct.config** %2, align 8
  %8 = bitcast %struct.config* %7 to i8*
  call void @free(i8* noundef %8) #7
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @applyConfig(%struct.configtree* noundef %0, %struct.config* noundef %1, %struct.vrna_plot_options_puzzler_t* noundef %2) #0 {
  %4 = alloca %struct.configtree*, align 8
  %5 = alloca %struct.config*, align 8
  %6 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %7 = alloca %struct.config*, align 8
  %8 = alloca i32, align 4
  %9 = alloca double*, align 8
  %10 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %4, align 8
  store %struct.config* %1, %struct.config** %5, align 8
  store %struct.vrna_plot_options_puzzler_t* %2, %struct.vrna_plot_options_puzzler_t** %6, align 8
  %11 = load %struct.configtree*, %struct.configtree** %4, align 8
  %12 = getelementptr inbounds %struct.configtree, %struct.configtree* %11, i32 0, i32 4
  %13 = load %struct.config*, %struct.config** %12, align 8
  store %struct.config* %13, %struct.config** %7, align 8
  %14 = load %struct.config*, %struct.config** %7, align 8
  %15 = getelementptr inbounds %struct.config, %struct.config* %14, i32 0, i32 4
  %16 = load i32, i32* %15, align 8
  store i32 %16, i32* %8, align 4
  %17 = load i32, i32* %8, align 4
  %18 = sext i32 %17 to i64
  %19 = mul i64 %18, 8
  %20 = trunc i64 %19 to i32
  %21 = call i8* @vrna_alloc(i32 noundef %20)
  %22 = bitcast i8* %21 to double*
  store double* %22, double** %9, align 8
  store i32 0, i32* %10, align 4
  br label %23

23:                                               ; preds = %39, %3
  %24 = load i32, i32* %10, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %42

27:                                               ; preds = %23
  %28 = load %struct.config*, %struct.config** %5, align 8
  %29 = load i32, i32* %10, align 4
  %30 = call double @getArcAngle(%struct.config* noundef %28, i32 noundef %29)
  %31 = load %struct.config*, %struct.config** %7, align 8
  %32 = load i32, i32* %10, align 4
  %33 = call double @getArcAngle(%struct.config* noundef %31, i32 noundef %32)
  %34 = fsub double %30, %33
  %35 = load double*, double** %9, align 8
  %36 = load i32, i32* %10, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds double, double* %35, i64 %37
  store double %34, double* %38, align 8
  br label %39

39:                                               ; preds = %27
  %40 = load i32, i32* %10, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %10, align 4
  br label %23, !llvm.loop !141

42:                                               ; preds = %23
  %43 = load %struct.configtree*, %struct.configtree** %4, align 8
  %44 = load double*, double** %9, align 8
  %45 = load %struct.config*, %struct.config** %5, align 8
  %46 = getelementptr inbounds %struct.config, %struct.config* %45, i32 0, i32 0
  %47 = load double, double* %46, align 8
  %48 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %6, align 8
  call void @applyDeltas(%struct.configtree* noundef %43, double* noundef %44, double noundef %47, %struct.vrna_plot_options_puzzler_t* noundef %48)
  %49 = load double*, double** %9, align 8
  %50 = bitcast double* %49 to i8*
  call void @free(i8* noundef %50) #7
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @getSpaces(%struct.configtree* noundef %0, i32 noundef %1, double noundef %2, double* noundef %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca i32, align 4
  %7 = alloca double, align 8
  %8 = alloca double*, align 8
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store i32 %1, i32* %6, align 4
  store double %2, double* %7, align 8
  store double* %3, double** %8, align 8
  %15 = load i32, i32* %6, align 4
  %16 = sext i32 %15 to i64
  %17 = mul i64 %16, 8
  %18 = trunc i64 %17 to i32
  %19 = call i8* @vrna_alloc(i32 noundef %18)
  %20 = bitcast i8* %19 to double*
  store double* %20, double** %9, align 8
  %21 = load i32, i32* %6, align 4
  %22 = sext i32 %21 to i64
  %23 = mul i64 %22, 8
  %24 = trunc i64 %23 to i32
  %25 = call i8* @vrna_alloc(i32 noundef %24)
  %26 = bitcast i8* %25 to double*
  store double* %26, double** %10, align 8
  %27 = load double, double* %7, align 8
  %28 = call double @llvm.fmuladd.f64(double 5.000000e-01, double %27, double 0.000000e+00)
  %29 = load double*, double** %9, align 8
  %30 = getelementptr inbounds double, double* %29, i64 0
  store double %28, double* %30, align 8
  store i32 0, i32* %13, align 4
  br label %31

31:                                               ; preds = %50, %4
  %32 = load i32, i32* %13, align 4
  %33 = load i32, i32* %6, align 4
  %34 = sub nsw i32 %33, 1
  %35 = icmp slt i32 %32, %34
  br i1 %35, label %36, label %53

36:                                               ; preds = %31
  %37 = load %struct.configtree*, %struct.configtree** %5, align 8
  %38 = load i32, i32* %13, align 4
  call void @getBoundingWedge(%struct.configtree* noundef %37, i32 noundef %38, double* noundef %11, double* noundef %12)
  %39 = load double, double* %11, align 8
  %40 = load double*, double** %10, align 8
  %41 = load i32, i32* %13, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds double, double* %40, i64 %42
  store double %39, double* %43, align 8
  %44 = load double, double* %12, align 8
  %45 = load double*, double** %9, align 8
  %46 = load i32, i32* %13, align 4
  %47 = add nsw i32 %46, 1
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds double, double* %45, i64 %48
  store double %44, double* %49, align 8
  br label %50

50:                                               ; preds = %36
  %51 = load i32, i32* %13, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %13, align 4
  br label %31, !llvm.loop !142

53:                                               ; preds = %31
  %54 = load double, double* %7, align 8
  %55 = call double @llvm.fmuladd.f64(double -5.000000e-01, double %54, double 0x401921FB54442D18)
  %56 = load double*, double** %10, align 8
  %57 = load i32, i32* %6, align 4
  %58 = sub nsw i32 %57, 1
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds double, double* %56, i64 %59
  store double %55, double* %60, align 8
  store i32 0, i32* %14, align 4
  br label %61

61:                                               ; preds = %81, %53
  %62 = load i32, i32* %14, align 4
  %63 = load i32, i32* %6, align 4
  %64 = icmp slt i32 %62, %63
  br i1 %64, label %65, label %84

65:                                               ; preds = %61
  %66 = load double*, double** %10, align 8
  %67 = load i32, i32* %14, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds double, double* %66, i64 %68
  %70 = load double, double* %69, align 8
  %71 = load double*, double** %9, align 8
  %72 = load i32, i32* %14, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds double, double* %71, i64 %73
  %75 = load double, double* %74, align 8
  %76 = fsub double %70, %75
  %77 = load double*, double** %8, align 8
  %78 = load i32, i32* %14, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds double, double* %77, i64 %79
  store double %76, double* %80, align 8
  br label %81

81:                                               ; preds = %65
  %82 = load i32, i32* %14, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %14, align 4
  br label %61, !llvm.loop !143

84:                                               ; preds = %61
  %85 = load double*, double** %9, align 8
  %86 = bitcast double* %85 to i8*
  call void @free(i8* noundef %86) #7
  %87 = load double*, double** %10, align 8
  %88 = bitcast double* %87 to i8*
  call void @free(i8* noundef %88) #7
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @bubblesort(i32 noundef %0, double* noundef %1, double* noundef %2, i32* noundef %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca double*, align 8
  %7 = alloca double*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca i16, align 2
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store double* %1, double** %6, align 8
  store double* %2, double** %7, align 8
  store i32* %3, i32** %8, align 8
  store i32 0, i32* %9, align 4
  br label %16

16:                                               ; preds = %26, %4
  %17 = load i32, i32* %9, align 4
  %18 = load i32, i32* %5, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %29

20:                                               ; preds = %16
  %21 = load i32, i32* %9, align 4
  %22 = load i32*, i32** %8, align 8
  %23 = load i32, i32* %9, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i32, i32* %22, i64 %24
  store i32 %21, i32* %25, align 4
  br label %26

26:                                               ; preds = %20
  %27 = load i32, i32* %9, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %9, align 4
  br label %16, !llvm.loop !144

29:                                               ; preds = %16
  store double 0.000000e+00, double* %10, align 8
  store double 0.000000e+00, double* %11, align 8
  store i16 0, i16* %12, align 2
  store i32 0, i32* %13, align 4
  br label %30

30:                                               ; preds = %135, %29
  %31 = load i32, i32* %13, align 4
  %32 = load i32, i32* %5, align 4
  %33 = sub nsw i32 %32, 1
  %34 = icmp slt i32 %31, %33
  br i1 %34, label %35, label %138

35:                                               ; preds = %30
  store i32 0, i32* %14, align 4
  br label %36

36:                                               ; preds = %131, %35
  %37 = load i32, i32* %14, align 4
  %38 = load i32, i32* %5, align 4
  %39 = load i32, i32* %13, align 4
  %40 = sub nsw i32 %38, %39
  %41 = sub nsw i32 %40, 1
  %42 = icmp slt i32 %37, %41
  br i1 %42, label %43, label %134

43:                                               ; preds = %36
  %44 = load double*, double** %6, align 8
  %45 = load i32*, i32** %8, align 8
  %46 = load i32, i32* %14, align 4
  %47 = add nsw i32 %46, 0
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i32, i32* %45, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds double, double* %44, i64 %51
  %53 = load double, double* %52, align 8
  store double %53, double* %10, align 8
  %54 = load double*, double** %6, align 8
  %55 = load i32*, i32** %8, align 8
  %56 = load i32, i32* %14, align 4
  %57 = add nsw i32 %56, 1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i32, i32* %55, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds double, double* %54, i64 %61
  %63 = load double, double* %62, align 8
  store double %63, double* %11, align 8
  store i16 0, i16* %12, align 2
  %64 = load double, double* %11, align 8
  %65 = load double, double* %10, align 8
  %66 = fsub double %64, %65
  %67 = fcmp ogt double %66, 0x3E7AD7F29ABCAF48
  br i1 %67, label %68, label %69

68:                                               ; preds = %43
  store i16 1, i16* %12, align 2
  br label %103

69:                                               ; preds = %43
  %70 = load double, double* %11, align 8
  %71 = load double, double* %10, align 8
  %72 = fsub double %70, %71
  %73 = call double @llvm.fabs.f64(double %72)
  %74 = fcmp olt double %73, 0x3E7AD7F29ABCAF48
  br i1 %74, label %75, label %102

75:                                               ; preds = %69
  %76 = load double*, double** %7, align 8
  %77 = load i32*, i32** %8, align 8
  %78 = load i32, i32* %14, align 4
  %79 = add nsw i32 %78, 0
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i32, i32* %77, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds double, double* %76, i64 %83
  %85 = load double, double* %84, align 8
  store double %85, double* %10, align 8
  %86 = load double*, double** %7, align 8
  %87 = load i32*, i32** %8, align 8
  %88 = load i32, i32* %14, align 4
  %89 = add nsw i32 %88, 1
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i32, i32* %87, i64 %90
  %92 = load i32, i32* %91, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds double, double* %86, i64 %93
  %95 = load double, double* %94, align 8
  store double %95, double* %11, align 8
  %96 = load double, double* %11, align 8
  %97 = load double, double* %10, align 8
  %98 = fsub double %96, %97
  %99 = fcmp ogt double %98, 0x3E7AD7F29ABCAF48
  br i1 %99, label %100, label %101

100:                                              ; preds = %75
  store i16 1, i16* %12, align 2
  br label %101

101:                                              ; preds = %100, %75
  br label %102

102:                                              ; preds = %101, %69
  br label %103

103:                                              ; preds = %102, %68
  %104 = load i16, i16* %12, align 2
  %105 = icmp ne i16 %104, 0
  br i1 %105, label %106, label %130

106:                                              ; preds = %103
  %107 = load i32*, i32** %8, align 8
  %108 = load i32, i32* %14, align 4
  %109 = add nsw i32 %108, 0
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i32, i32* %107, i64 %110
  %112 = load i32, i32* %111, align 4
  store i32 %112, i32* %15, align 4
  %113 = load i32*, i32** %8, align 8
  %114 = load i32, i32* %14, align 4
  %115 = add nsw i32 %114, 1
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i32, i32* %113, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = load i32*, i32** %8, align 8
  %120 = load i32, i32* %14, align 4
  %121 = add nsw i32 %120, 0
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i32, i32* %119, i64 %122
  store i32 %118, i32* %123, align 4
  %124 = load i32, i32* %15, align 4
  %125 = load i32*, i32** %8, align 8
  %126 = load i32, i32* %14, align 4
  %127 = add nsw i32 %126, 1
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i32, i32* %125, i64 %128
  store i32 %124, i32* %129, align 4
  br label %130

130:                                              ; preds = %106, %103
  br label %131

131:                                              ; preds = %130
  %132 = load i32, i32* %14, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %14, align 4
  br label %36, !llvm.loop !145

134:                                              ; preds = %36
  br label %135

135:                                              ; preds = %134
  %136 = load i32, i32* %13, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %13, align 4
  br label %30, !llvm.loop !146

138:                                              ; preds = %30
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @computeIncreases(i32* noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32* %0, i32** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store i32 0, i32* %7, align 4
  %8 = load i32*, i32** %4, align 8
  %9 = load i32, i32* %5, align 4
  %10 = load i32, i32* %6, align 4
  call void @computeIncreasesAllOther(i32* noundef %8, i32 noundef %9, i32 noundef %10)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @computeDeltas(double* noundef %0, i32 noundef %1, double noundef %2, %struct.configArc* noundef %3, double* noundef %4, i32* noundef %5) #0 {
  %7 = alloca double*, align 8
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  %10 = alloca %struct.configArc*, align 8
  %11 = alloca double*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  store double* %0, double** %7, align 8
  store i32 %1, i32* %8, align 4
  store double %2, double* %9, align 8
  store %struct.configArc* %3, %struct.configArc** %10, align 8
  store double* %4, double** %11, align 8
  store i32* %5, i32** %12, align 8
  store i32 1, i32* %13, align 4
  %14 = load double*, double** %7, align 8
  %15 = load i32, i32* %8, align 4
  %16 = load double, double* %9, align 8
  %17 = load %struct.configArc*, %struct.configArc** %10, align 8
  %18 = load double*, double** %11, align 8
  %19 = load i32*, i32** %12, align 8
  call void @computeDeltasDistributeProportionally(double* noundef %14, i32 noundef %15, double noundef %16, %struct.configArc* noundef %17, double* noundef %18, i32* noundef %19)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @searchBestConfig(%struct.configtree* noundef %0, double* noundef %1, %struct.configtree** noundef %2, i32 noundef %3, %struct.configtree** noundef %4, i32 noundef %5, %struct.vrna_plot_options_puzzler_t* noundef %6) #0 {
  %8 = alloca %struct.configtree*, align 8
  %9 = alloca double*, align 8
  %10 = alloca %struct.configtree**, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.configtree**, align 8
  %13 = alloca i32, align 4
  %14 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %15 = alloca %struct.config*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca double, align 8
  %19 = alloca i32, align 4
  %20 = alloca i16, align 2
  %21 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %8, align 8
  store double* %1, double** %9, align 8
  store %struct.configtree** %2, %struct.configtree*** %10, align 8
  store i32 %3, i32* %11, align 4
  store %struct.configtree** %4, %struct.configtree*** %12, align 8
  store i32 %5, i32* %13, align 4
  store %struct.vrna_plot_options_puzzler_t* %6, %struct.vrna_plot_options_puzzler_t** %14, align 8
  %22 = load %struct.configtree*, %struct.configtree** %8, align 8
  %23 = getelementptr inbounds %struct.configtree, %struct.configtree* %22, i32 0, i32 4
  %24 = load %struct.config*, %struct.config** %23, align 8
  store %struct.config* %24, %struct.config** %15, align 8
  %25 = load %struct.config*, %struct.config** %15, align 8
  %26 = getelementptr inbounds %struct.config, %struct.config* %25, i32 0, i32 4
  %27 = load i32, i32* %26, align 8
  store i32 %27, i32* %16, align 4
  %28 = load %struct.configtree*, %struct.configtree** %8, align 8
  %29 = load double*, double** %9, align 8
  %30 = load %struct.config*, %struct.config** %15, align 8
  %31 = getelementptr inbounds %struct.config, %struct.config* %30, i32 0, i32 0
  %32 = load double, double* %31, align 8
  %33 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %14, align 8
  call void @applyDeltas(%struct.configtree* noundef %28, double* noundef %29, double noundef %32, %struct.vrna_plot_options_puzzler_t* noundef %33)
  store i32 10, i32* %17, align 4
  %34 = load i32, i32* %17, align 4
  %35 = sitofp i32 %34 to double
  %36 = fdiv double 1.000000e+00, %35
  store double %36, double* %18, align 8
  store i32 0, i32* %19, align 4
  br label %37

37:                                               ; preds = %50, %7
  %38 = load i32, i32* %19, align 4
  %39 = load i32, i32* %16, align 4
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %41, label %53

41:                                               ; preds = %37
  %42 = load double, double* %18, align 8
  %43 = fmul double -1.000000e+00, %42
  %44 = load double*, double** %9, align 8
  %45 = load i32, i32* %19, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds double, double* %44, i64 %46
  %48 = load double, double* %47, align 8
  %49 = fmul double %48, %43
  store double %49, double* %47, align 8
  br label %50

50:                                               ; preds = %41
  %51 = load i32, i32* %19, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* %19, align 4
  br label %37, !llvm.loop !147

53:                                               ; preds = %37
  %54 = load %struct.configtree**, %struct.configtree*** %10, align 8
  %55 = load i32, i32* %11, align 4
  %56 = load %struct.configtree**, %struct.configtree*** %12, align 8
  %57 = load i32, i32* %13, align 4
  %58 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %14, align 8
  %59 = call signext i16 @checkIntersections(%struct.configtree** noundef %54, i32 noundef %55, %struct.configtree** noundef %56, i32 noundef %57, %struct.vrna_plot_options_puzzler_t* noundef %58)
  store i16 %59, i16* %20, align 2
  %60 = load i16, i16* %20, align 2
  %61 = icmp ne i16 %60, 0
  br i1 %61, label %62, label %89

62:                                               ; preds = %53
  store i32 0, i32* %21, align 4
  br label %63

63:                                               ; preds = %85, %62
  %64 = load i32, i32* %21, align 4
  %65 = load i32, i32* %17, align 4
  %66 = sub nsw i32 %65, 1
  %67 = icmp slt i32 %64, %66
  br i1 %67, label %68, label %88

68:                                               ; preds = %63
  %69 = load %struct.configtree*, %struct.configtree** %8, align 8
  %70 = load double*, double** %9, align 8
  %71 = load %struct.config*, %struct.config** %15, align 8
  %72 = getelementptr inbounds %struct.config, %struct.config* %71, i32 0, i32 0
  %73 = load double, double* %72, align 8
  %74 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %14, align 8
  call void @applyDeltas(%struct.configtree* noundef %69, double* noundef %70, double noundef %73, %struct.vrna_plot_options_puzzler_t* noundef %74)
  %75 = load %struct.configtree**, %struct.configtree*** %10, align 8
  %76 = load i32, i32* %11, align 4
  %77 = load %struct.configtree**, %struct.configtree*** %12, align 8
  %78 = load i32, i32* %13, align 4
  %79 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %14, align 8
  %80 = call signext i16 @checkIntersections(%struct.configtree** noundef %75, i32 noundef %76, %struct.configtree** noundef %77, i32 noundef %78, %struct.vrna_plot_options_puzzler_t* noundef %79)
  store i16 %80, i16* %20, align 2
  %81 = load i16, i16* %20, align 2
  %82 = icmp ne i16 %81, 0
  br i1 %82, label %84, label %83

83:                                               ; preds = %68
  br label %88

84:                                               ; preds = %68
  br label %85

85:                                               ; preds = %84
  %86 = load i32, i32* %21, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %21, align 4
  br label %63, !llvm.loop !148

88:                                               ; preds = %83, %63
  br label %89

89:                                               ; preds = %88, %53
  %90 = load i16, i16* %20, align 2
  %91 = icmp ne i16 %90, 0
  %92 = xor i1 %91, true
  %93 = zext i1 %92 to i32
  %94 = trunc i32 %93 to i16
  ret i16 %94
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @shrinkLoopRadiusLinearSearch(%struct.configtree* noundef %0, %struct.configtree** noundef %1, i32 noundef %2, %struct.configtree** noundef %3, i32 noundef %4, %struct.vrna_plot_options_puzzler_t* noundef %5) #0 {
  %7 = alloca double, align 8
  %8 = alloca %struct.configtree*, align 8
  %9 = alloca %struct.configtree**, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.configtree**, align 8
  %12 = alloca i32, align 4
  %13 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca %struct.config*, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  %21 = alloca double, align 8
  %22 = alloca double, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i16, align 2
  %26 = alloca double, align 8
  store %struct.configtree* %0, %struct.configtree** %8, align 8
  store %struct.configtree** %1, %struct.configtree*** %9, align 8
  store i32 %2, i32* %10, align 4
  store %struct.configtree** %3, %struct.configtree*** %11, align 8
  store i32 %4, i32* %12, align 4
  store %struct.vrna_plot_options_puzzler_t* %5, %struct.vrna_plot_options_puzzler_t** %13, align 8
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.46, i64 0, i64 0), i8** %14, align 8
  %27 = load %struct.configtree*, %struct.configtree** %8, align 8
  %28 = getelementptr inbounds %struct.configtree, %struct.configtree* %27, i32 0, i32 4
  %29 = load %struct.config*, %struct.config** %28, align 8
  store %struct.config* %29, %struct.config** %15, align 8
  %30 = load %struct.config*, %struct.config** %15, align 8
  %31 = getelementptr inbounds %struct.config, %struct.config* %30, i32 0, i32 0
  %32 = load double, double* %31, align 8
  store double %32, double* %16, align 8
  %33 = load double, double* %16, align 8
  store double %33, double* %17, align 8
  %34 = load double, double* %16, align 8
  store double %34, double* %18, align 8
  %35 = load %struct.config*, %struct.config** %15, align 8
  %36 = getelementptr inbounds %struct.config, %struct.config* %35, i32 0, i32 1
  %37 = load double, double* %36, align 8
  store double %37, double* %19, align 8
  store double 1.000000e+00, double* %20, align 8
  %38 = load double, double* %18, align 8
  %39 = load double, double* %19, align 8
  %40 = fsub double %38, %39
  %41 = load double, double* %20, align 8
  %42 = fcmp olt double %40, %41
  br i1 %42, label %43, label %44

43:                                               ; preds = %6
  store double 1.000000e+00, double* %7, align 8
  br label %93

44:                                               ; preds = %6
  %45 = load double, double* %19, align 8
  store double %45, double* %21, align 8
  %46 = load double, double* %18, align 8
  %47 = load double, double* %19, align 8
  %48 = fsub double %46, %47
  %49 = fmul double 1.000000e-01, %48
  store double %49, double* %22, align 8
  store i32 0, i32* %23, align 4
  store i32 10, i32* %24, align 4
  br label %50

50:                                               ; preds = %70, %44
  %51 = load i32, i32* %23, align 4
  %52 = icmp slt i32 %51, 10
  br i1 %52, label %53, label %73

53:                                               ; preds = %50
  %54 = load %struct.configtree*, %struct.configtree** %8, align 8
  %55 = load double, double* %21, align 8
  %56 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  call void @applyChangesToConfigAndBoundingBoxes(%struct.configtree* noundef %54, double* noundef null, double noundef %55, %struct.vrna_plot_options_puzzler_t* noundef %56)
  %57 = load %struct.configtree**, %struct.configtree*** %9, align 8
  %58 = load i32, i32* %10, align 4
  %59 = load %struct.configtree**, %struct.configtree*** %11, align 8
  %60 = load i32, i32* %12, align 4
  %61 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  %62 = call signext i16 @checkIntersections(%struct.configtree** noundef %57, i32 noundef %58, %struct.configtree** noundef %59, i32 noundef %60, %struct.vrna_plot_options_puzzler_t* noundef %61)
  store i16 %62, i16* %25, align 2
  %63 = load i16, i16* %25, align 2
  %64 = icmp ne i16 %63, 0
  br i1 %64, label %65, label %69

65:                                               ; preds = %53
  %66 = load double, double* %22, align 8
  %67 = load double, double* %21, align 8
  %68 = fadd double %67, %66
  store double %68, double* %21, align 8
  br label %70

69:                                               ; preds = %53
  br label %73

70:                                               ; preds = %65
  %71 = load i32, i32* %23, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %23, align 4
  br label %50, !llvm.loop !149

73:                                               ; preds = %69, %50
  %74 = load i32, i32* %23, align 4
  %75 = icmp sge i32 %74, 10
  br i1 %75, label %82, label %76

76:                                               ; preds = %73
  %77 = load %struct.config*, %struct.config** %15, align 8
  %78 = getelementptr inbounds %struct.config, %struct.config* %77, i32 0, i32 0
  %79 = load double, double* %78, align 8
  %80 = load double, double* %18, align 8
  %81 = fcmp ogt double %79, %80
  br i1 %81, label %82, label %86

82:                                               ; preds = %76, %73
  %83 = load %struct.configtree*, %struct.configtree** %8, align 8
  %84 = load double, double* %17, align 8
  %85 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %13, align 8
  call void @applyChangesToConfigAndBoundingBoxes(%struct.configtree* noundef %83, double* noundef null, double noundef %84, %struct.vrna_plot_options_puzzler_t* noundef %85)
  br label %86

86:                                               ; preds = %82, %76
  %87 = load %struct.config*, %struct.config** %15, align 8
  %88 = getelementptr inbounds %struct.config, %struct.config* %87, i32 0, i32 0
  %89 = load double, double* %88, align 8
  %90 = load double, double* %18, align 8
  %91 = fdiv double %89, %90
  store double %91, double* %26, align 8
  %92 = load double, double* %26, align 8
  store double %92, double* %7, align 8
  br label %93

93:                                               ; preds = %86, %43
  %94 = load double, double* %7, align 8
  ret double %94
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @applyDeltas(%struct.configtree* noundef %0, double* noundef %1, double noundef %2, %struct.vrna_plot_options_puzzler_t* noundef %3) #0 {
  %5 = alloca %struct.configtree*, align 8
  %6 = alloca double*, align 8
  %7 = alloca double, align 8
  %8 = alloca %struct.vrna_plot_options_puzzler_t*, align 8
  store %struct.configtree* %0, %struct.configtree** %5, align 8
  store double* %1, double** %6, align 8
  store double %2, double* %7, align 8
  store %struct.vrna_plot_options_puzzler_t* %3, %struct.vrna_plot_options_puzzler_t** %8, align 8
  %9 = load %struct.configtree*, %struct.configtree** %5, align 8
  %10 = getelementptr inbounds %struct.configtree, %struct.configtree* %9, i32 0, i32 4
  %11 = load %struct.config*, %struct.config** %10, align 8
  %12 = load %struct.configtree*, %struct.configtree** %5, align 8
  %13 = getelementptr inbounds %struct.configtree, %struct.configtree* %12, i32 0, i32 4
  %14 = load %struct.config*, %struct.config** %13, align 8
  %15 = getelementptr inbounds %struct.config, %struct.config* %14, i32 0, i32 0
  %16 = load double, double* %15, align 8
  %17 = load double, double* %7, align 8
  %18 = load double*, double** %6, align 8
  %19 = call signext i16 @somethingChanged(%struct.config* noundef %11, double noundef %16, double noundef %17, double* noundef %18)
  %20 = icmp ne i16 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %4
  %22 = load %struct.configtree*, %struct.configtree** %5, align 8
  %23 = load double*, double** %6, align 8
  %24 = load double, double* %7, align 8
  %25 = load %struct.vrna_plot_options_puzzler_t*, %struct.vrna_plot_options_puzzler_t** %8, align 8
  call void @applyChangesToConfigAndBoundingBoxes(%struct.configtree* noundef %22, double* noundef %23, double noundef %24, %struct.vrna_plot_options_puzzler_t* noundef %25)
  br label %26

26:                                               ; preds = %21, %4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @somethingChanged(%struct.config* noundef %0, double noundef %1, double noundef %2, double* noundef %3) #0 {
  %5 = alloca %struct.config*, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double*, align 8
  %9 = alloca i16, align 2
  %10 = alloca i32, align 4
  store %struct.config* %0, %struct.config** %5, align 8
  store double %1, double* %6, align 8
  store double %2, double* %7, align 8
  store double* %3, double** %8, align 8
  %11 = load double, double* %7, align 8
  %12 = load double, double* %6, align 8
  %13 = fsub double %11, %12
  %14 = fcmp une double %13, 0.000000e+00
  %15 = zext i1 %14 to i32
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %9, align 2
  %17 = load i16, i16* %9, align 2
  %18 = icmp ne i16 %17, 0
  br i1 %18, label %42, label %19

19:                                               ; preds = %4
  %20 = load double*, double** %8, align 8
  %21 = icmp ne double* %20, null
  br i1 %21, label %22, label %42

22:                                               ; preds = %19
  store i32 0, i32* %10, align 4
  br label %23

23:                                               ; preds = %38, %22
  %24 = load i32, i32* %10, align 4
  %25 = load %struct.config*, %struct.config** %5, align 8
  %26 = getelementptr inbounds %struct.config, %struct.config* %25, i32 0, i32 4
  %27 = load i32, i32* %26, align 8
  %28 = icmp slt i32 %24, %27
  br i1 %28, label %29, label %41

29:                                               ; preds = %23
  %30 = load double*, double** %8, align 8
  %31 = load i32, i32* %10, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds double, double* %30, i64 %32
  %34 = load double, double* %33, align 8
  %35 = fcmp une double %34, 0.000000e+00
  br i1 %35, label %36, label %37

36:                                               ; preds = %29
  store i16 1, i16* %9, align 2
  br label %41

37:                                               ; preds = %29
  br label %38

38:                                               ; preds = %37
  %39 = load i32, i32* %10, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %10, align 4
  br label %23, !llvm.loop !150

41:                                               ; preds = %36, %23
  br label %42

42:                                               ; preds = %41, %19, %4
  %43 = load i16, i16* %9, align 2
  ret i16 %43
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @computeIncreasesAllOther(i32* noundef %0, i32 noundef %1, i32 noundef %2) #0 {
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32* %0, i32** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store i32 0, i32* %7, align 4
  br label %8

8:                                                ; preds = %29, %3
  %9 = load i32, i32* %7, align 4
  %10 = load i32, i32* %6, align 4
  %11 = icmp slt i32 %9, %10
  br i1 %11, label %12, label %32

12:                                               ; preds = %8
  %13 = load i32, i32* %7, align 4
  %14 = load i32, i32* %5, align 4
  %15 = icmp ne i32 %13, %14
  br i1 %15, label %16, label %28

16:                                               ; preds = %12
  %17 = load i32*, i32** %4, align 8
  %18 = getelementptr inbounds i32, i32* %17, i64 0
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* %18, align 4
  %21 = load i32, i32* %7, align 4
  %22 = load i32*, i32** %4, align 8
  %23 = load i32*, i32** %4, align 8
  %24 = getelementptr inbounds i32, i32* %23, i64 0
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i32, i32* %22, i64 %26
  store i32 %21, i32* %27, align 4
  br label %28

28:                                               ; preds = %16, %12
  br label %29

29:                                               ; preds = %28
  %30 = load i32, i32* %7, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %7, align 4
  br label %8, !llvm.loop !151

32:                                               ; preds = %8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @computeDeltasDistributeProportionally(double* noundef %0, i32 noundef %1, double noundef %2, %struct.configArc* noundef %3, double* noundef %4, i32* noundef %5) #0 {
  %7 = alloca double*, align 8
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  %10 = alloca %struct.configArc*, align 8
  %11 = alloca double*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca double, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store double* %0, double** %7, align 8
  store i32 %1, i32* %8, align 4
  store double %2, double* %9, align 8
  store %struct.configArc* %3, %struct.configArc** %10, align 8
  store double* %4, double** %11, align 8
  store i32* %5, i32** %12, align 8
  store double 0.000000e+00, double* %13, align 8
  store i32 1, i32* %14, align 4
  br label %18

18:                                               ; preds = %44, %6
  %19 = load i32, i32* %14, align 4
  %20 = load i32*, i32** %12, align 8
  %21 = getelementptr inbounds i32, i32* %20, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp sle i32 %19, %22
  br i1 %23, label %24, label %47

24:                                               ; preds = %18
  %25 = load i32*, i32** %12, align 8
  %26 = load i32, i32* %14, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i32, i32* %25, i64 %27
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %15, align 4
  %30 = load %struct.configArc*, %struct.configArc** %10, align 8
  %31 = load i32, i32* %15, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds %struct.configArc, %struct.configArc* %30, i64 %32
  %34 = getelementptr inbounds %struct.configArc, %struct.configArc* %33, i32 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = sitofp i32 %35 to double
  %37 = load double*, double** %11, align 8
  %38 = load i32, i32* %15, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds double, double* %37, i64 %39
  %41 = load double, double* %40, align 8
  %42 = load double, double* %13, align 8
  %43 = call double @llvm.fmuladd.f64(double %36, double %41, double %42)
  store double %43, double* %13, align 8
  br label %44

44:                                               ; preds = %24
  %45 = load i32, i32* %14, align 4
  %46 = add nsw i32 %45, 1
  store i32 %46, i32* %14, align 4
  br label %18, !llvm.loop !152

47:                                               ; preds = %18
  store i32 1, i32* %16, align 4
  br label %48

48:                                               ; preds = %81, %47
  %49 = load i32, i32* %16, align 4
  %50 = load i32*, i32** %12, align 8
  %51 = getelementptr inbounds i32, i32* %50, i64 0
  %52 = load i32, i32* %51, align 4
  %53 = icmp sle i32 %49, %52
  br i1 %53, label %54, label %84

54:                                               ; preds = %48
  %55 = load i32*, i32** %12, align 8
  %56 = load i32, i32* %16, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i32, i32* %55, i64 %57
  %59 = load i32, i32* %58, align 4
  store i32 %59, i32* %17, align 4
  %60 = load %struct.configArc*, %struct.configArc** %10, align 8
  %61 = load i32, i32* %17, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds %struct.configArc, %struct.configArc* %60, i64 %62
  %64 = getelementptr inbounds %struct.configArc, %struct.configArc* %63, i32 0, i32 0
  %65 = load i32, i32* %64, align 8
  %66 = sitofp i32 %65 to double
  %67 = load double*, double** %11, align 8
  %68 = load i32, i32* %17, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds double, double* %67, i64 %69
  %71 = load double, double* %70, align 8
  %72 = fmul double %66, %71
  %73 = load double, double* %13, align 8
  %74 = fdiv double %72, %73
  %75 = load double, double* %9, align 8
  %76 = fmul double %74, %75
  %77 = load double*, double** %7, align 8
  %78 = load i32, i32* %17, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds double, double* %77, i64 %79
  store double %76, double* %80, align 8
  br label %81

81:                                               ; preds = %54
  %82 = load i32, i32* %16, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %16, align 4
  br label %48, !llvm.loop !153

84:                                               ; preds = %48
  %85 = load double, double* %9, align 8
  %86 = fmul double -1.000000e+00, %85
  %87 = load double*, double** %7, align 8
  %88 = load i32, i32* %8, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds double, double* %87, i64 %89
  store double %86, double* %90, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @getBulgeXY(%struct.boundingboxStem* noundef %0, i32 noundef %1, double* noundef %2, double* noundef %3) #0 {
  %5 = alloca %struct.boundingboxStem*, align 8
  %6 = alloca i32, align 4
  %7 = alloca double*, align 8
  %8 = alloca double*, align 8
  %9 = alloca double*, align 8
  store %struct.boundingboxStem* %0, %struct.boundingboxStem** %5, align 8
  store i32 %1, i32* %6, align 4
  store double* %2, double** %7, align 8
  store double* %3, double** %8, align 8
  %10 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %11 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %10, i32 0, i32 7
  %12 = load double**, double*** %11, align 8
  %13 = load i32, i32* %6, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds double*, double** %12, i64 %14
  %16 = load double*, double** %15, align 8
  store double* %16, double** %9, align 8
  %17 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %18 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %17, i32 0, i32 3
  %19 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 0
  %20 = load double, double* %19, align 8
  %21 = load double*, double** %9, align 8
  %22 = getelementptr inbounds double, double* %21, i64 2
  %23 = load double, double* %22, align 8
  %24 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %25 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %24, i32 0, i32 1
  %26 = getelementptr inbounds [2 x double], [2 x double]* %25, i64 0, i64 0
  %27 = load double, double* %26, align 8
  %28 = call double @llvm.fmuladd.f64(double %23, double %27, double %20)
  %29 = load double*, double** %9, align 8
  %30 = getelementptr inbounds double, double* %29, i64 0
  %31 = load double, double* %30, align 8
  %32 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %33 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %32, i32 0, i32 2
  %34 = getelementptr inbounds [2 x double], [2 x double]* %33, i64 0, i64 0
  %35 = load double, double* %34, align 8
  %36 = fmul double %31, %35
  %37 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %38 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %37, i32 0, i32 4
  %39 = getelementptr inbounds [2 x double], [2 x double]* %38, i64 0, i64 1
  %40 = load double, double* %39, align 8
  %41 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %42 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %41, i32 0, i32 6
  %43 = load double, double* %42, align 8
  %44 = fadd double %40, %43
  %45 = call double @llvm.fmuladd.f64(double %36, double %44, double %28)
  %46 = load double*, double** %7, align 8
  store double %45, double* %46, align 8
  %47 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %48 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %47, i32 0, i32 3
  %49 = getelementptr inbounds [2 x double], [2 x double]* %48, i64 0, i64 1
  %50 = load double, double* %49, align 8
  %51 = load double*, double** %9, align 8
  %52 = getelementptr inbounds double, double* %51, i64 2
  %53 = load double, double* %52, align 8
  %54 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %55 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %54, i32 0, i32 1
  %56 = getelementptr inbounds [2 x double], [2 x double]* %55, i64 0, i64 1
  %57 = load double, double* %56, align 8
  %58 = call double @llvm.fmuladd.f64(double %53, double %57, double %50)
  %59 = load double*, double** %9, align 8
  %60 = getelementptr inbounds double, double* %59, i64 0
  %61 = load double, double* %60, align 8
  %62 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %63 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %62, i32 0, i32 2
  %64 = getelementptr inbounds [2 x double], [2 x double]* %63, i64 0, i64 1
  %65 = load double, double* %64, align 8
  %66 = fmul double %61, %65
  %67 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %68 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %67, i32 0, i32 4
  %69 = getelementptr inbounds [2 x double], [2 x double]* %68, i64 0, i64 1
  %70 = load double, double* %69, align 8
  %71 = load %struct.boundingboxStem*, %struct.boundingboxStem** %5, align 8
  %72 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %71, i32 0, i32 6
  %73 = load double, double* %72, align 8
  %74 = fadd double %70, %73
  %75 = call double @llvm.fmuladd.f64(double %66, double %74, double %58)
  %76 = load double*, double** %8, align 8
  store double %75, double* %76, align 8
  ret void
}

; Function Attrs: nounwind
declare dso_local double @atan2(double noundef, double noundef) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @translateBoundingBoxes(%struct.configtree* noundef %0, double* noundef %1) #0 {
  %3 = alloca %struct.configtree*, align 8
  %4 = alloca double*, align 8
  %5 = alloca i32, align 4
  store %struct.configtree* %0, %struct.configtree** %3, align 8
  store double* %1, double** %4, align 8
  %6 = load %struct.configtree*, %struct.configtree** %3, align 8
  %7 = getelementptr inbounds %struct.configtree, %struct.configtree* %6, i32 0, i32 8
  %8 = load %struct.boundingboxStem*, %struct.boundingboxStem** %7, align 8
  %9 = load double*, double** %4, align 8
  call void @translateStemBox(%struct.boundingboxStem* noundef %8, double* noundef %9)
  %10 = load %struct.configtree*, %struct.configtree** %3, align 8
  %11 = getelementptr inbounds %struct.configtree, %struct.configtree* %10, i32 0, i32 7
  %12 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %11, align 8
  %13 = load double*, double** %4, align 8
  call void @translateLoopBox(%struct.boundingboxLoop* noundef %12, double* noundef %13)
  %14 = load %struct.configtree*, %struct.configtree** %3, align 8
  %15 = getelementptr inbounds %struct.configtree, %struct.configtree* %14, i32 0, i32 9
  %16 = load %struct.configtree*, %struct.configtree** %3, align 8
  %17 = getelementptr inbounds %struct.configtree, %struct.configtree* %16, i32 0, i32 8
  %18 = load %struct.boundingboxStem*, %struct.boundingboxStem** %17, align 8
  %19 = load %struct.configtree*, %struct.configtree** %3, align 8
  %20 = getelementptr inbounds %struct.configtree, %struct.configtree* %19, i32 0, i32 7
  %21 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %20, align 8
  call void @updateAABB(%struct.AABB* noundef %15, %struct.boundingboxStem* noundef %18, %struct.boundingboxLoop* noundef %21)
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %33, %2
  %23 = load i32, i32* %5, align 4
  %24 = load %struct.configtree*, %struct.configtree** %3, align 8
  %25 = getelementptr inbounds %struct.configtree, %struct.configtree* %24, i32 0, i32 3
  %26 = load i32, i32* %25, align 8
  %27 = icmp slt i32 %23, %26
  br i1 %27, label %28, label %36

28:                                               ; preds = %22
  %29 = load %struct.configtree*, %struct.configtree** %3, align 8
  %30 = load i32, i32* %5, align 4
  %31 = call %struct.configtree* @getChild(%struct.configtree* noundef %29, i32 noundef %30)
  %32 = load double*, double** %4, align 8
  call void @translateBoundingBoxes(%struct.configtree* noundef %31, double* noundef %32)
  br label %33

33:                                               ; preds = %28
  %34 = load i32, i32* %5, align 4
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %5, align 4
  br label %22, !llvm.loop !154

36:                                               ; preds = %22
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @translateStemBox(%struct.boundingboxStem* noundef %0, double* noundef %1) #0 {
  %3 = alloca %struct.boundingboxStem*, align 8
  %4 = alloca double*, align 8
  %5 = alloca [2 x double], align 16
  %6 = alloca [2 x double], align 16
  store %struct.boundingboxStem* %0, %struct.boundingboxStem** %3, align 8
  store double* %1, double** %4, align 8
  %7 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %8 = load %struct.boundingboxStem*, %struct.boundingboxStem** %3, align 8
  %9 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %8, i32 0, i32 3
  %10 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %11 = load double, double* %10, align 8
  store double %11, double* %7, align 8
  %12 = getelementptr inbounds double, double* %7, i64 1
  %13 = load %struct.boundingboxStem*, %struct.boundingboxStem** %3, align 8
  %14 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %13, i32 0, i32 3
  %15 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 1
  %16 = load double, double* %15, align 8
  store double %16, double* %12, align 8
  %17 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %18 = load double*, double** %4, align 8
  %19 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  call void @translatePointByVector(double* noundef %17, double* noundef %18, double* noundef %19)
  %20 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %21 = load double, double* %20, align 16
  %22 = load %struct.boundingboxStem*, %struct.boundingboxStem** %3, align 8
  %23 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %22, i32 0, i32 3
  %24 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  store double %21, double* %24, align 8
  %25 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 1
  %26 = load double, double* %25, align 8
  %27 = load %struct.boundingboxStem*, %struct.boundingboxStem** %3, align 8
  %28 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %27, i32 0, i32 3
  %29 = getelementptr inbounds [2 x double], [2 x double]* %28, i64 0, i64 1
  store double %26, double* %29, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @translateLoopBox(%struct.boundingboxLoop* noundef %0, double* noundef %1) #0 {
  %3 = alloca %struct.boundingboxLoop*, align 8
  %4 = alloca double*, align 8
  %5 = alloca [2 x double], align 16
  %6 = alloca [2 x double], align 16
  store %struct.boundingboxLoop* %0, %struct.boundingboxLoop** %3, align 8
  store double* %1, double** %4, align 8
  %7 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %8 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %3, align 8
  %9 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %8, i32 0, i32 1
  %10 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %11 = load double, double* %10, align 8
  store double %11, double* %7, align 8
  %12 = getelementptr inbounds double, double* %7, i64 1
  %13 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %3, align 8
  %14 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %13, i32 0, i32 1
  %15 = getelementptr inbounds [2 x double], [2 x double]* %14, i64 0, i64 1
  %16 = load double, double* %15, align 8
  store double %16, double* %12, align 8
  %17 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %18 = load double*, double** %4, align 8
  %19 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  call void @translatePointByVector(double* noundef %17, double* noundef %18, double* noundef %19)
  %20 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 0
  %21 = load double, double* %20, align 16
  %22 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %3, align 8
  %23 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %22, i32 0, i32 1
  %24 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  store double %21, double* %24, align 8
  %25 = getelementptr inbounds [2 x double], [2 x double]* %6, i64 0, i64 1
  %26 = load double, double* %25, align 8
  %27 = load %struct.boundingboxLoop*, %struct.boundingboxLoop** %3, align 8
  %28 = getelementptr inbounds %struct.boundingboxLoop, %struct.boundingboxLoop* %27, i32 0, i32 1
  %29 = getelementptr inbounds [2 x double], [2 x double]* %28, i64 0, i64 1
  store double %26, double* %29, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @translatePointByVector(double* noundef %0, double* noundef %1, double* noundef %2) #0 {
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  store double* %0, double** %4, align 8
  store double* %1, double** %5, align 8
  store double* %2, double** %6, align 8
  %7 = load double*, double** %4, align 8
  %8 = getelementptr inbounds double, double* %7, i64 0
  %9 = load double, double* %8, align 8
  %10 = load double*, double** %5, align 8
  %11 = getelementptr inbounds double, double* %10, i64 0
  %12 = load double, double* %11, align 8
  %13 = fadd double %9, %12
  %14 = load double*, double** %6, align 8
  %15 = getelementptr inbounds double, double* %14, i64 0
  store double %13, double* %15, align 8
  %16 = load double*, double** %4, align 8
  %17 = getelementptr inbounds double, double* %16, i64 1
  %18 = load double, double* %17, align 8
  %19 = load double*, double** %5, align 8
  %20 = getelementptr inbounds double, double* %19, i64 1
  %21 = load double, double* %20, align 8
  %22 = fadd double %18, %21
  %23 = load double*, double** %6, align 8
  %24 = getelementptr inbounds double, double* %23, i64 1
  store double %22, double* %24, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @calcArcsHandleStem(i32 noundef %0, i16* noundef %1, double* noundef %2, double* noundef %3, %struct.tBaseInformation* noundef %4, double* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i16*, align 8
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  %11 = alloca %struct.tBaseInformation*, align 8
  %12 = alloca double*, align 8
  %13 = alloca i32, align 4
  %14 = alloca %struct.config*, align 8
  store i32 %0, i32* %7, align 4
  store i16* %1, i16** %8, align 8
  store double* %2, double** %9, align 8
  store double* %3, double** %10, align 8
  store %struct.tBaseInformation* %4, %struct.tBaseInformation** %11, align 8
  store double* %5, double** %12, align 8
  %15 = load i32, i32* %7, align 4
  store i32 %15, i32* %13, align 4
  %16 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %17 = load i32, i32* %13, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %16, i64 %18
  %20 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %19, i32 0, i32 3
  %21 = load %struct.config*, %struct.config** %20, align 8
  store %struct.config* %21, %struct.config** %14, align 8
  br label %22

22:                                               ; preds = %25, %6
  %23 = load %struct.config*, %struct.config** %14, align 8
  %24 = icmp eq %struct.config* %23, null
  br i1 %24, label %25, label %34

25:                                               ; preds = %22
  %26 = load i32, i32* %13, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %13, align 4
  %28 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %29 = load i32, i32* %13, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %28, i64 %30
  %32 = getelementptr inbounds %struct.tBaseInformation, %struct.tBaseInformation* %31, i32 0, i32 3
  %33 = load %struct.config*, %struct.config** %32, align 8
  store %struct.config* %33, %struct.config** %14, align 8
  br label %22, !llvm.loop !155

34:                                               ; preds = %22
  %35 = load i32, i32* %13, align 4
  %36 = load i16*, i16** %8, align 8
  %37 = load double*, double** %9, align 8
  %38 = load double*, double** %10, align 8
  %39 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %40 = load double*, double** %12, align 8
  call void @calcArcsHandleLoop(i32 noundef %35, i16* noundef %36, double* noundef %37, double* noundef %38, %struct.tBaseInformation* noundef %39, double* noundef %40)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @calcArcsHandleLoop(i32 noundef %0, i16* noundef %1, double* noundef %2, double* noundef %3, %struct.tBaseInformation* noundef %4, double* noundef %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i16*, align 8
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  %11 = alloca %struct.tBaseInformation*, align 8
  %12 = alloca double*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca double**, align 8
  %17 = alloca i32, align 4
  %18 = alloca double*, align 8
  %19 = alloca i32, align 4
  %20 = alloca double*, align 8
  %21 = alloca double*, align 8
  %22 = alloca i16, align 2
  %23 = alloca [2 x double], align 16
  %24 = alloca double, align 8
  %25 = alloca i32, align 4
  store i32 %0, i32* %7, align 4
  store i16* %1, i16** %8, align 8
  store double* %2, double** %9, align 8
  store double* %3, double** %10, align 8
  store %struct.tBaseInformation* %4, %struct.tBaseInformation** %11, align 8
  store double* %5, double** %12, align 8
  %26 = load i16*, i16** %8, align 8
  %27 = load i32, i32* %7, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i16, i16* %26, i64 %28
  %30 = load i16, i16* %29, align 2
  %31 = sext i16 %30 to i32
  store i32 %31, i32* %13, align 4
  store i32 1, i32* %14, align 4
  %32 = load i32, i32* %7, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %15, align 4
  br label %34

34:                                               ; preds = %69, %6
  %35 = load i32, i32* %15, align 4
  %36 = load i32, i32* %13, align 4
  %37 = icmp slt i32 %35, %36
  br i1 %37, label %38, label %72

38:                                               ; preds = %34
  %39 = load i16*, i16** %8, align 8
  %40 = load i32, i32* %15, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i16, i16* %39, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = sext i16 %43 to i32
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %38
  %47 = load i32, i32* %15, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %15, align 4
  br label %69

49:                                               ; preds = %38
  %50 = load i16*, i16** %8, align 8
  %51 = load i32, i32* %15, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i16, i16* %50, i64 %52
  %54 = load i16, i16* %53, align 2
  %55 = sext i16 %54 to i32
  %56 = load i32, i32* %15, align 4
  %57 = icmp sgt i32 %55, %56
  br i1 %57, label %58, label %65

58:                                               ; preds = %49
  %59 = load i16*, i16** %8, align 8
  %60 = load i32, i32* %15, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i16, i16* %59, i64 %61
  %63 = load i16, i16* %62, align 2
  %64 = sext i16 %63 to i32
  store i32 %64, i32* %15, align 4
  br label %68

65:                                               ; preds = %49
  %66 = load i32, i32* %15, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %15, align 4
  br label %68

68:                                               ; preds = %65, %58
  br label %69

69:                                               ; preds = %68, %46
  %70 = load i32, i32* %14, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %14, align 4
  br label %34, !llvm.loop !156

72:                                               ; preds = %34
  %73 = load i32, i32* %14, align 4
  %74 = sext i32 %73 to i64
  %75 = mul i64 %74, 8
  %76 = trunc i64 %75 to i32
  %77 = call i8* @vrna_alloc(i32 noundef %76)
  %78 = bitcast i8* %77 to double**
  store double** %78, double*** %16, align 8
  store i32 0, i32* %17, align 4
  br label %79

79:                                               ; preds = %91, %72
  %80 = load i32, i32* %17, align 4
  %81 = load i32, i32* %14, align 4
  %82 = icmp slt i32 %80, %81
  br i1 %82, label %83, label %94

83:                                               ; preds = %79
  %84 = call i8* @vrna_alloc(i32 noundef 16)
  %85 = bitcast i8* %84 to double*
  store double* %85, double** %18, align 8
  %86 = load double*, double** %18, align 8
  %87 = load double**, double*** %16, align 8
  %88 = load i32, i32* %17, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds double*, double** %87, i64 %89
  store double* %86, double** %90, align 8
  br label %91

91:                                               ; preds = %83
  %92 = load i32, i32* %17, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %17, align 4
  br label %79, !llvm.loop !157

94:                                               ; preds = %79
  store i32 0, i32* %19, align 4
  %95 = load i32, i32* %7, align 4
  %96 = add nsw i32 %95, 1
  store i32 %96, i32* %15, align 4
  br label %97

97:                                               ; preds = %161, %94
  %98 = load i32, i32* %15, align 4
  %99 = load i32, i32* %13, align 4
  %100 = icmp slt i32 %98, %99
  br i1 %100, label %101, label %162

101:                                              ; preds = %97
  %102 = load double**, double*** %16, align 8
  %103 = load i32, i32* %19, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds double*, double** %102, i64 %104
  %106 = load double*, double** %105, align 8
  store double* %106, double** %20, align 8
  %107 = load double*, double** %9, align 8
  %108 = load i32, i32* %15, align 4
  %109 = sub nsw i32 %108, 1
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds double, double* %107, i64 %110
  %112 = load double, double* %111, align 8
  %113 = load double*, double** %20, align 8
  %114 = getelementptr inbounds double, double* %113, i64 0
  store double %112, double* %114, align 8
  %115 = load double*, double** %10, align 8
  %116 = load i32, i32* %15, align 4
  %117 = sub nsw i32 %116, 1
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds double, double* %115, i64 %118
  %120 = load double, double* %119, align 8
  %121 = load double*, double** %20, align 8
  %122 = getelementptr inbounds double, double* %121, i64 1
  store double %120, double* %122, align 8
  %123 = load i32, i32* %19, align 4
  %124 = add nsw i32 %123, 1
  store i32 %124, i32* %19, align 4
  %125 = load i16*, i16** %8, align 8
  %126 = load i32, i32* %15, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i16, i16* %125, i64 %127
  %129 = load i16, i16* %128, align 2
  %130 = sext i16 %129 to i32
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %135

132:                                              ; preds = %101
  %133 = load i32, i32* %15, align 4
  %134 = add nsw i32 %133, 1
  store i32 %134, i32* %15, align 4
  br label %161

135:                                              ; preds = %101
  %136 = load i16*, i16** %8, align 8
  %137 = load i32, i32* %15, align 4
  %138 = sext i32 %137 to i64
  %139 = getelementptr inbounds i16, i16* %136, i64 %138
  %140 = load i16, i16* %139, align 2
  %141 = sext i16 %140 to i32
  %142 = load i32, i32* %15, align 4
  %143 = icmp sgt i32 %141, %142
  br i1 %143, label %144, label %157

144:                                              ; preds = %135
  %145 = load i32, i32* %15, align 4
  %146 = load i16*, i16** %8, align 8
  %147 = load double*, double** %9, align 8
  %148 = load double*, double** %10, align 8
  %149 = load %struct.tBaseInformation*, %struct.tBaseInformation** %11, align 8
  %150 = load double*, double** %12, align 8
  call void @calcArcsHandleStem(i32 noundef %145, i16* noundef %146, double* noundef %147, double* noundef %148, %struct.tBaseInformation* noundef %149, double* noundef %150)
  %151 = load i16*, i16** %8, align 8
  %152 = load i32, i32* %15, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i16, i16* %151, i64 %153
  %155 = load i16, i16* %154, align 2
  %156 = sext i16 %155 to i32
  store i32 %156, i32* %15, align 4
  br label %160

157:                                              ; preds = %135
  %158 = load i32, i32* %15, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %15, align 4
  br label %160

160:                                              ; preds = %157, %144
  br label %161

161:                                              ; preds = %160, %132
  br label %97, !llvm.loop !158

162:                                              ; preds = %97
  %163 = load double**, double*** %16, align 8
  %164 = load i32, i32* %19, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds double*, double** %163, i64 %165
  %167 = load double*, double** %166, align 8
  store double* %167, double** %21, align 8
  %168 = load double*, double** %9, align 8
  %169 = load i32, i32* %15, align 4
  %170 = sub nsw i32 %169, 1
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds double, double* %168, i64 %171
  %173 = load double, double* %172, align 8
  %174 = load double*, double** %21, align 8
  %175 = getelementptr inbounds double, double* %174, i64 0
  store double %173, double* %175, align 8
  %176 = load double*, double** %10, align 8
  %177 = load i32, i32* %15, align 4
  %178 = sub nsw i32 %177, 1
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds double, double* %176, i64 %179
  %181 = load double, double* %180, align 8
  %182 = load double*, double** %21, align 8
  %183 = getelementptr inbounds double, double* %182, i64 1
  store double %181, double* %183, align 8
  %184 = load double**, double*** %16, align 8
  %185 = load i32, i32* %14, align 4
  %186 = sub nsw i32 %185, 1
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds double*, double** %184, i64 %187
  %189 = load double*, double** %188, align 8
  %190 = load double**, double*** %16, align 8
  %191 = getelementptr inbounds double*, double** %190, i64 0
  %192 = load double*, double** %191, align 8
  %193 = load double**, double*** %16, align 8
  %194 = load i32, i32* %14, align 4
  %195 = sdiv i32 %194, 2
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds double*, double** %193, i64 %196
  %198 = load double*, double** %197, align 8
  %199 = call signext i16 @isToTheRightPointPoint(double* noundef %189, double* noundef %192, double* noundef %198)
  store i16 %199, i16* %22, align 2
  %200 = load double**, double*** %16, align 8
  %201 = load i32, i32* %14, align 4
  %202 = mul nsw i32 0, %201
  %203 = sdiv i32 %202, 3
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds double*, double** %200, i64 %204
  %206 = load double*, double** %205, align 8
  %207 = load double**, double*** %16, align 8
  %208 = load i32, i32* %14, align 4
  %209 = mul nsw i32 1, %208
  %210 = sdiv i32 %209, 3
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds double*, double** %207, i64 %211
  %213 = load double*, double** %212, align 8
  %214 = load double**, double*** %16, align 8
  %215 = load i32, i32* %14, align 4
  %216 = mul nsw i32 2, %215
  %217 = sdiv i32 %216, 3
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds double*, double** %214, i64 %218
  %220 = load double*, double** %219, align 8
  %221 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  call void @circle(double* noundef %206, double* noundef %213, double* noundef %220, double* noundef %221, double* noundef %24)
  store i32 0, i32* %25, align 4
  br label %222

222:                                              ; preds = %233, %162
  %223 = load i32, i32* %25, align 4
  %224 = load i32, i32* %14, align 4
  %225 = icmp slt i32 %223, %224
  br i1 %225, label %226, label %236

226:                                              ; preds = %222
  %227 = load double**, double*** %16, align 8
  %228 = load i32, i32* %25, align 4
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds double*, double** %227, i64 %229
  %231 = load double*, double** %230, align 8
  %232 = bitcast double* %231 to i8*
  call void @free(i8* noundef %232) #7
  br label %233

233:                                              ; preds = %226
  %234 = load i32, i32* %25, align 4
  %235 = add nsw i32 %234, 1
  store i32 %235, i32* %25, align 4
  br label %222, !llvm.loop !159

236:                                              ; preds = %222
  %237 = load double**, double*** %16, align 8
  %238 = bitcast double** %237 to i8*
  call void @free(i8* noundef %238) #7
  %239 = load i32, i32* %7, align 4
  %240 = add nsw i32 %239, 1
  store i32 %240, i32* %15, align 4
  br label %241

241:                                              ; preds = %292, %236
  %242 = load i32, i32* %15, align 4
  %243 = load i32, i32* %13, align 4
  %244 = icmp slt i32 %242, %243
  br i1 %244, label %245, label %293

245:                                              ; preds = %241
  %246 = load i16*, i16** %8, align 8
  %247 = load i32, i32* %15, align 4
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds i16, i16* %246, i64 %248
  %250 = load i16, i16* %249, align 2
  %251 = sext i16 %250 to i32
  %252 = icmp eq i32 %251, 0
  br i1 %252, label %253, label %264

253:                                              ; preds = %245
  %254 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  %255 = load double, double* %24, align 8
  %256 = load i16, i16* %22, align 2
  %257 = load i32, i32* %15, align 4
  %258 = sub nsw i32 %257, 1
  %259 = load double*, double** %9, align 8
  %260 = load double*, double** %10, align 8
  %261 = load double*, double** %12, align 8
  call void @calcArc(double* noundef %254, double noundef %255, i16 noundef signext %256, i32 noundef %258, double* noundef %259, double* noundef %260, double* noundef %261)
  %262 = load i32, i32* %15, align 4
  %263 = add nsw i32 %262, 1
  store i32 %263, i32* %15, align 4
  br label %292

264:                                              ; preds = %245
  %265 = load i16*, i16** %8, align 8
  %266 = load i32, i32* %15, align 4
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds i16, i16* %265, i64 %267
  %269 = load i16, i16* %268, align 2
  %270 = sext i16 %269 to i32
  %271 = load i32, i32* %15, align 4
  %272 = icmp sgt i32 %270, %271
  br i1 %272, label %273, label %288

273:                                              ; preds = %264
  %274 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  %275 = load double, double* %24, align 8
  %276 = load i16, i16* %22, align 2
  %277 = load i32, i32* %15, align 4
  %278 = sub nsw i32 %277, 1
  %279 = load double*, double** %9, align 8
  %280 = load double*, double** %10, align 8
  %281 = load double*, double** %12, align 8
  call void @calcArc(double* noundef %274, double noundef %275, i16 noundef signext %276, i32 noundef %278, double* noundef %279, double* noundef %280, double* noundef %281)
  %282 = load i16*, i16** %8, align 8
  %283 = load i32, i32* %15, align 4
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds i16, i16* %282, i64 %284
  %286 = load i16, i16* %285, align 2
  %287 = sext i16 %286 to i32
  store i32 %287, i32* %15, align 4
  br label %291

288:                                              ; preds = %264
  %289 = load i32, i32* %15, align 4
  %290 = add nsw i32 %289, 1
  store i32 %290, i32* %15, align 4
  br label %291

291:                                              ; preds = %288, %273
  br label %292

292:                                              ; preds = %291, %253
  br label %241, !llvm.loop !160

293:                                              ; preds = %241
  %294 = getelementptr inbounds [2 x double], [2 x double]* %23, i64 0, i64 0
  %295 = load double, double* %24, align 8
  %296 = load i16, i16* %22, align 2
  %297 = load i32, i32* %13, align 4
  %298 = sub nsw i32 %297, 1
  %299 = load double*, double** %9, align 8
  %300 = load double*, double** %10, align 8
  %301 = load double*, double** %12, align 8
  call void @calcArc(double* noundef %294, double noundef %295, i16 noundef signext %296, i32 noundef %298, double* noundef %299, double* noundef %300, double* noundef %301)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @calcArc(double* noundef %0, double noundef %1, i16 noundef signext %2, i32 noundef %3, double* noundef %4, double* noundef %5, double* noundef %6) #0 {
  %8 = alloca double*, align 8
  %9 = alloca double, align 8
  %10 = alloca i16, align 2
  %11 = alloca i32, align 4
  %12 = alloca double*, align 8
  %13 = alloca double*, align 8
  %14 = alloca double*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca [2 x double], align 16
  %18 = alloca [2 x double], align 16
  %19 = alloca [2 x double], align 16
  %20 = alloca [2 x double], align 16
  %21 = alloca [2 x double], align 16
  %22 = alloca [2 x double], align 16
  %23 = alloca double, align 8
  %24 = alloca double, align 8
  store double* %0, double** %8, align 8
  store double %1, double* %9, align 8
  store i16 %2, i16* %10, align 2
  store i32 %3, i32* %11, align 4
  store double* %4, double** %12, align 8
  store double* %5, double** %13, align 8
  store double* %6, double** %14, align 8
  %25 = load i32, i32* %11, align 4
  %26 = sub nsw i32 %25, 1
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %11, align 4
  store i32 %27, i32* %16, align 4
  %28 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %29 = load double*, double** %12, align 8
  %30 = load i32, i32* %15, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds double, double* %29, i64 %31
  %33 = load double, double* %32, align 8
  store double %33, double* %28, align 8
  %34 = getelementptr inbounds double, double* %28, i64 1
  %35 = load double*, double** %13, align 8
  %36 = load i32, i32* %15, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds double, double* %35, i64 %37
  %39 = load double, double* %38, align 8
  store double %39, double* %34, align 8
  %40 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 0
  %41 = load double*, double** %12, align 8
  %42 = load i32, i32* %16, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds double, double* %41, i64 %43
  %45 = load double, double* %44, align 8
  store double %45, double* %40, align 8
  %46 = getelementptr inbounds double, double* %40, i64 1
  %47 = load double*, double** %13, align 8
  %48 = load i32, i32* %16, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds double, double* %47, i64 %49
  %51 = load double, double* %50, align 8
  store double %51, double* %46, align 8
  %52 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  %53 = load double*, double** %8, align 8
  %54 = getelementptr inbounds double, double* %53, i64 0
  %55 = load double, double* %54, align 8
  store double %55, double* %52, align 8
  %56 = getelementptr inbounds double, double* %52, i64 1
  %57 = load double*, double** %8, align 8
  %58 = getelementptr inbounds double, double* %57, i64 1
  %59 = load double, double* %58, align 8
  store double %59, double* %56, align 8
  %60 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  %61 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %62 = getelementptr inbounds [2 x double], [2 x double]* %20, i64 0, i64 0
  call void @vector(double* noundef %60, double* noundef %61, double* noundef %62)
  %63 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  %64 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 0
  %65 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 0
  call void @vector(double* noundef %63, double* noundef %64, double* noundef %65)
  %66 = bitcast [2 x double]* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %66, i8* align 16 bitcast ([2 x double]* @__const.calcArc.v_1_0 to i8*), i64 16, i1 false)
  %67 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 0
  %68 = getelementptr inbounds [2 x double], [2 x double]* %20, i64 0, i64 0
  %69 = call double @angleBetweenVectors2D(double* noundef %67, double* noundef %68)
  %70 = call double @toDegree(double noundef %69)
  store double %70, double* %23, align 8
  %71 = getelementptr inbounds [2 x double], [2 x double]* %22, i64 0, i64 0
  %72 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 0
  %73 = call double @angleBetweenVectors2D(double* noundef %71, double* noundef %72)
  %74 = call double @toDegree(double noundef %73)
  store double %74, double* %24, align 8
  %75 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 1
  %76 = load double, double* %75, align 8
  %77 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 1
  %78 = load double, double* %77, align 8
  %79 = fcmp olt double %76, %78
  br i1 %79, label %80, label %83

80:                                               ; preds = %7
  %81 = load double, double* %23, align 8
  %82 = fsub double 3.600000e+02, %81
  store double %82, double* %23, align 8
  br label %83

83:                                               ; preds = %80, %7
  %84 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 1
  %85 = load double, double* %84, align 8
  %86 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 1
  %87 = load double, double* %86, align 8
  %88 = fcmp olt double %85, %87
  br i1 %88, label %89, label %92

89:                                               ; preds = %83
  %90 = load double, double* %24, align 8
  %91 = fsub double 3.600000e+02, %90
  store double %91, double* %24, align 8
  br label %92

92:                                               ; preds = %89, %83
  %93 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 0
  %94 = load double, double* %93, align 16
  %95 = load double*, double** %14, align 8
  %96 = load i32, i32* %11, align 4
  %97 = mul nsw i32 6, %96
  %98 = add nsw i32 %97, 0
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds double, double* %95, i64 %99
  store double %94, double* %100, align 8
  %101 = getelementptr inbounds [2 x double], [2 x double]* %19, i64 0, i64 1
  %102 = load double, double* %101, align 8
  %103 = load double*, double** %14, align 8
  %104 = load i32, i32* %11, align 4
  %105 = mul nsw i32 6, %104
  %106 = add nsw i32 %105, 1
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds double, double* %103, i64 %107
  store double %102, double* %108, align 8
  %109 = load double, double* %9, align 8
  %110 = load double*, double** %14, align 8
  %111 = load i32, i32* %11, align 4
  %112 = mul nsw i32 6, %111
  %113 = add nsw i32 %112, 2
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds double, double* %110, i64 %114
  store double %109, double* %115, align 8
  %116 = load double, double* %23, align 8
  %117 = load double*, double** %14, align 8
  %118 = load i32, i32* %11, align 4
  %119 = mul nsw i32 6, %118
  %120 = add nsw i32 %119, 3
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds double, double* %117, i64 %121
  store double %116, double* %122, align 8
  %123 = load double, double* %24, align 8
  %124 = load double*, double** %14, align 8
  %125 = load i32, i32* %11, align 4
  %126 = mul nsw i32 6, %125
  %127 = add nsw i32 %126, 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds double, double* %124, i64 %128
  store double %123, double* %129, align 8
  %130 = load i16, i16* %10, align 2
  %131 = sitofp i16 %130 to double
  %132 = load double*, double** %14, align 8
  %133 = load i32, i32* %11, align 4
  %134 = mul nsw i32 6, %133
  %135 = add nsw i32 %134, 5
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds double, double* %132, i64 %136
  store double %131, double* %137, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @toDegree(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, double* %2, align 8
  %3 = load double, double* %2, align 8
  %4 = fmul double %3, 0x404CA5DC1A63C1F8
  ret double %4
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectLineArc(double* noundef %0, double* noundef %1, double* noundef %2) #0 {
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca double*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca [2 x [2 x double]], align 16
  %9 = alloca [2 x double], align 16
  %10 = alloca double, align 8
  %11 = alloca [2 x double], align 16
  %12 = alloca [2 x double], align 16
  %13 = alloca i16, align 2
  %14 = alloca i16, align 2
  %15 = alloca i32, align 4
  %16 = alloca [2 x double], align 16
  %17 = alloca [2 x double], align 16
  %18 = alloca [2 x double], align 16
  %19 = alloca double, align 8
  %20 = alloca [2 x double], align 16
  %21 = alloca [2 x double], align 16
  store double* %0, double** %4, align 8
  store double* %1, double** %5, align 8
  store double* %2, double** %6, align 8
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.48, i64 0, i64 0), i8** %7, align 8
  %22 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %23 = load double*, double** %6, align 8
  %24 = getelementptr inbounds double, double* %23, i64 0
  %25 = load double, double* %24, align 8
  store double %25, double* %22, align 8
  %26 = getelementptr inbounds double, double* %22, i64 1
  %27 = load double*, double** %6, align 8
  %28 = getelementptr inbounds double, double* %27, i64 1
  %29 = load double, double* %28, align 8
  store double %29, double* %26, align 8
  %30 = load double*, double** %6, align 8
  %31 = getelementptr inbounds double, double* %30, i64 2
  %32 = load double, double* %31, align 8
  store double %32, double* %10, align 8
  %33 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %34 = load double*, double** %4, align 8
  %35 = getelementptr inbounds double, double* %34, i64 0
  %36 = load double, double* %35, align 8
  store double %36, double* %33, align 8
  %37 = getelementptr inbounds double, double* %33, i64 1
  %38 = load double*, double** %4, align 8
  %39 = getelementptr inbounds double, double* %38, i64 1
  %40 = load double, double* %39, align 8
  store double %40, double* %37, align 8
  %41 = load double*, double** %4, align 8
  %42 = load double*, double** %5, align 8
  %43 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  call void @vector(double* noundef %41, double* noundef %42, double* noundef %43)
  %44 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %45 = load double, double* %10, align 8
  %46 = getelementptr inbounds [2 x double], [2 x double]* %11, i64 0, i64 0
  %47 = getelementptr inbounds [2 x double], [2 x double]* %12, i64 0, i64 0
  %48 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %8, i64 0, i64 0
  %49 = getelementptr inbounds [2 x double], [2 x double]* %48, i64 0, i64 0
  %50 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %8, i64 0, i64 1
  %51 = getelementptr inbounds [2 x double], [2 x double]* %50, i64 0, i64 0
  %52 = call signext i16 @getCutPointsOfCircleAndLine(double* noundef %44, double noundef %45, double* noundef %46, double* noundef %47, double* noundef %49, double* noundef %51)
  store i16 %52, i16* %13, align 2
  store i16 0, i16* %14, align 2
  store i32 0, i32* %15, align 4
  br label %53

53:                                               ; preds = %123, %3
  %54 = load i32, i32* %15, align 4
  %55 = load i16, i16* %13, align 2
  %56 = sext i16 %55 to i32
  %57 = icmp slt i32 %54, %56
  br i1 %57, label %58, label %126

58:                                               ; preds = %53
  %59 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %60 = load double*, double** %4, align 8
  %61 = getelementptr inbounds double, double* %60, i64 0
  %62 = load double, double* %61, align 8
  store double %62, double* %59, align 8
  %63 = getelementptr inbounds double, double* %59, i64 1
  %64 = load double*, double** %4, align 8
  %65 = getelementptr inbounds double, double* %64, i64 1
  %66 = load double, double* %65, align 8
  store double %66, double* %63, align 8
  %67 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %68 = load double*, double** %5, align 8
  %69 = getelementptr inbounds double, double* %68, i64 0
  %70 = load double, double* %69, align 8
  store double %70, double* %67, align 8
  %71 = getelementptr inbounds double, double* %67, i64 1
  %72 = load double*, double** %5, align 8
  %73 = getelementptr inbounds double, double* %72, i64 1
  %74 = load double, double* %73, align 8
  store double %74, double* %71, align 8
  %75 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %76 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %77 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 0
  call void @vector(double* noundef %75, double* noundef %76, double* noundef %77)
  %78 = getelementptr inbounds [2 x double], [2 x double]* %18, i64 0, i64 0
  %79 = call double @vectorLength2D(double* noundef %78)
  store double %79, double* %19, align 8
  %80 = getelementptr inbounds [2 x double], [2 x double]* %16, i64 0, i64 0
  %81 = load i32, i32* %15, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %8, i64 0, i64 %82
  %84 = getelementptr inbounds [2 x double], [2 x double]* %83, i64 0, i64 0
  %85 = getelementptr inbounds [2 x double], [2 x double]* %20, i64 0, i64 0
  call void @vector(double* noundef %80, double* noundef %84, double* noundef %85)
  %86 = getelementptr inbounds [2 x double], [2 x double]* %17, i64 0, i64 0
  %87 = load i32, i32* %15, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %8, i64 0, i64 %88
  %90 = getelementptr inbounds [2 x double], [2 x double]* %89, i64 0, i64 0
  %91 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 0
  call void @vector(double* noundef %86, double* noundef %90, double* noundef %91)
  %92 = load double, double* %19, align 8
  %93 = getelementptr inbounds [2 x double], [2 x double]* %20, i64 0, i64 0
  %94 = call double @vectorLength2D(double* noundef %93)
  %95 = fsub double %92, %94
  %96 = getelementptr inbounds [2 x double], [2 x double]* %21, i64 0, i64 0
  %97 = call double @vectorLength2D(double* noundef %96)
  %98 = fsub double %95, %97
  %99 = call double @llvm.fabs.f64(double %98)
  %100 = fcmp ogt double %99, 1.000000e-02
  br i1 %100, label %101, label %102

101:                                              ; preds = %58
  br label %123

102:                                              ; preds = %58
  %103 = load i16, i16* %14, align 2
  %104 = sext i16 %103 to i32
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %115, label %106

106:                                              ; preds = %102
  %107 = load i32, i32* %15, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %8, i64 0, i64 %108
  %110 = getelementptr inbounds [2 x double], [2 x double]* %109, i64 0, i64 0
  %111 = load double*, double** %6, align 8
  %112 = call signext i16 @matchPointArc(double* noundef %110, double* noundef %111)
  %113 = sext i16 %112 to i32
  %114 = icmp ne i32 %113, 0
  br label %115

115:                                              ; preds = %106, %102
  %116 = phi i1 [ true, %102 ], [ %114, %106 ]
  %117 = zext i1 %116 to i32
  %118 = trunc i32 %117 to i16
  store i16 %118, i16* %14, align 2
  %119 = load i16, i16* %14, align 2
  %120 = icmp ne i16 %119, 0
  br i1 %120, label %121, label %122

121:                                              ; preds = %115
  br label %126

122:                                              ; preds = %115
  br label %123

123:                                              ; preds = %122, %101
  %124 = load i32, i32* %15, align 4
  %125 = add nsw i32 %124, 1
  store i32 %125, i32* %15, align 4
  br label %53, !llvm.loop !161

126:                                              ; preds = %121, %53
  %127 = load i16, i16* %14, align 2
  ret i16 %127
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @intersectArcArc(double* noundef %0, double* noundef %1) #0 {
  %3 = alloca i16, align 2
  %4 = alloca double*, align 8
  %5 = alloca double*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca [2 x double], align 16
  %8 = alloca double, align 8
  %9 = alloca [2 x double], align 16
  %10 = alloca double, align 8
  %11 = alloca [2 x [2 x double]], align 16
  %12 = alloca i16, align 2
  %13 = alloca i16, align 2
  %14 = alloca i32, align 4
  %15 = alloca i16, align 2
  %16 = alloca i16, align 2
  store double* %0, double** %4, align 8
  store double* %1, double** %5, align 8
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.49, i64 0, i64 0), i8** %6, align 8
  %17 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %18 = load double*, double** %4, align 8
  %19 = getelementptr inbounds double, double* %18, i64 0
  %20 = load double, double* %19, align 8
  store double %20, double* %17, align 8
  %21 = getelementptr inbounds double, double* %17, i64 1
  %22 = load double*, double** %4, align 8
  %23 = getelementptr inbounds double, double* %22, i64 1
  %24 = load double, double* %23, align 8
  store double %24, double* %21, align 8
  %25 = load double*, double** %4, align 8
  %26 = getelementptr inbounds double, double* %25, i64 2
  %27 = load double, double* %26, align 8
  store double %27, double* %8, align 8
  %28 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %29 = load double*, double** %5, align 8
  %30 = getelementptr inbounds double, double* %29, i64 0
  %31 = load double, double* %30, align 8
  store double %31, double* %28, align 8
  %32 = getelementptr inbounds double, double* %28, i64 1
  %33 = load double*, double** %5, align 8
  %34 = getelementptr inbounds double, double* %33, i64 1
  %35 = load double, double* %34, align 8
  store double %35, double* %32, align 8
  %36 = load double*, double** %5, align 8
  %37 = getelementptr inbounds double, double* %36, i64 2
  %38 = load double, double* %37, align 8
  store double %38, double* %10, align 8
  %39 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %40 = load double, double* %8, align 8
  %41 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %42 = load double, double* %10, align 8
  %43 = call signext i16 @intersectCircleCircle(double* noundef %39, double noundef %40, double* noundef %41, double noundef %42)
  %44 = icmp ne i16 %43, 0
  br i1 %44, label %46, label %45

45:                                               ; preds = %2
  store i16 0, i16* %3, align 2
  br label %96

46:                                               ; preds = %2
  %47 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %48 = load double, double* %8, align 8
  %49 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %50 = load double, double* %10, align 8
  %51 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %11, i64 0, i64 0
  %52 = getelementptr inbounds [2 x double], [2 x double]* %51, i64 0, i64 0
  %53 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %11, i64 0, i64 1
  %54 = getelementptr inbounds [2 x double], [2 x double]* %53, i64 0, i64 0
  %55 = call signext i16 @getCutPointsOfCircles(double* noundef %47, double noundef %48, double* noundef %49, double noundef %50, double* noundef %52, double* noundef %54)
  store i16 %55, i16* %12, align 2
  store i16 0, i16* %13, align 2
  store i32 0, i32* %14, align 4
  br label %56

56:                                               ; preds = %91, %46
  %57 = load i32, i32* %14, align 4
  %58 = load i16, i16* %12, align 2
  %59 = sext i16 %58 to i32
  %60 = icmp slt i32 %57, %59
  br i1 %60, label %61, label %94

61:                                               ; preds = %56
  %62 = load i32, i32* %14, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %11, i64 0, i64 %63
  %65 = getelementptr inbounds [2 x double], [2 x double]* %64, i64 0, i64 0
  %66 = load double*, double** %4, align 8
  %67 = call signext i16 @matchPointArc(double* noundef %65, double* noundef %66)
  store i16 %67, i16* %15, align 2
  %68 = load i32, i32* %14, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %11, i64 0, i64 %69
  %71 = getelementptr inbounds [2 x double], [2 x double]* %70, i64 0, i64 0
  %72 = load double*, double** %5, align 8
  %73 = call signext i16 @matchPointArc(double* noundef %71, double* noundef %72)
  store i16 %73, i16* %16, align 2
  %74 = load i16, i16* %13, align 2
  %75 = sext i16 %74 to i32
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %87, label %77

77:                                               ; preds = %61
  %78 = load i16, i16* %15, align 2
  %79 = sext i16 %78 to i32
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %81, label %85

81:                                               ; preds = %77
  %82 = load i16, i16* %16, align 2
  %83 = sext i16 %82 to i32
  %84 = icmp ne i32 %83, 0
  br label %85

85:                                               ; preds = %81, %77
  %86 = phi i1 [ false, %77 ], [ %84, %81 ]
  br label %87

87:                                               ; preds = %85, %61
  %88 = phi i1 [ true, %61 ], [ %86, %85 ]
  %89 = zext i1 %88 to i32
  %90 = trunc i32 %89 to i16
  store i16 %90, i16* %13, align 2
  br label %91

91:                                               ; preds = %87
  %92 = load i32, i32* %14, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %14, align 4
  br label %56, !llvm.loop !162

94:                                               ; preds = %56
  %95 = load i16, i16* %13, align 2
  store i16 %95, i16* %3, align 2
  br label %96

96:                                               ; preds = %94, %45
  %97 = load i16, i16* %3, align 2
  ret i16 %97
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i16 @matchPointArc(double* noundef %0, double* noundef %1) #0 {
  %3 = alloca double*, align 8
  %4 = alloca double*, align 8
  %5 = alloca [2 x double], align 16
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca i16, align 2
  %9 = alloca [2 x double], align 16
  %10 = alloca [2 x double], align 16
  %11 = alloca double, align 8
  %12 = alloca i16, align 2
  store double* %0, double** %3, align 8
  store double* %1, double** %4, align 8
  %13 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %14 = load double*, double** %4, align 8
  %15 = getelementptr inbounds double, double* %14, i64 0
  %16 = load double, double* %15, align 8
  store double %16, double* %13, align 8
  %17 = getelementptr inbounds double, double* %13, i64 1
  %18 = load double*, double** %4, align 8
  %19 = getelementptr inbounds double, double* %18, i64 1
  %20 = load double, double* %19, align 8
  store double %20, double* %17, align 8
  %21 = load double*, double** %4, align 8
  %22 = getelementptr inbounds double, double* %21, i64 3
  %23 = load double, double* %22, align 8
  %24 = call double @toRad(double noundef %23)
  store double %24, double* %6, align 8
  %25 = load double*, double** %4, align 8
  %26 = getelementptr inbounds double, double* %25, i64 4
  %27 = load double, double* %26, align 8
  %28 = call double @toRad(double noundef %27)
  store double %28, double* %7, align 8
  %29 = load double*, double** %4, align 8
  %30 = getelementptr inbounds double, double* %29, i64 5
  %31 = load double, double* %30, align 8
  %32 = fcmp ogt double %31, 5.000000e-01
  %33 = zext i1 %32 to i32
  %34 = trunc i32 %33 to i16
  store i16 %34, i16* %8, align 2
  %35 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 0
  %36 = load double*, double** %3, align 8
  %37 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  call void @vector(double* noundef %35, double* noundef %36, double* noundef %37)
  %38 = bitcast [2 x double]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %38, i8* align 16 bitcast ([2 x double]* @__const.matchPointArc.zero_degree to i8*), i64 16, i1 false)
  %39 = getelementptr inbounds [2 x double], [2 x double]* %9, i64 0, i64 0
  %40 = getelementptr inbounds [2 x double], [2 x double]* %10, i64 0, i64 0
  %41 = call double @angleBetweenVectors2D(double* noundef %39, double* noundef %40)
  store double %41, double* %11, align 8
  %42 = load double*, double** %3, align 8
  %43 = getelementptr inbounds double, double* %42, i64 1
  %44 = load double, double* %43, align 8
  %45 = getelementptr inbounds [2 x double], [2 x double]* %5, i64 0, i64 1
  %46 = load double, double* %45, align 8
  %47 = fcmp olt double %44, %46
  br i1 %47, label %48, label %51

48:                                               ; preds = %2
  %49 = load double, double* %11, align 8
  %50 = fsub double 0x401921FB54442D18, %49
  store double %50, double* %11, align 8
  br label %51

51:                                               ; preds = %48, %2
  store i16 0, i16* %12, align 2
  %52 = load i16, i16* %8, align 2
  %53 = icmp ne i16 %52, 0
  br i1 %53, label %54, label %91

54:                                               ; preds = %51
  %55 = load double, double* %6, align 8
  %56 = load double, double* %7, align 8
  %57 = fcmp ogt double %55, %56
  br i1 %57, label %58, label %70

58:                                               ; preds = %54
  %59 = load double, double* %6, align 8
  %60 = load double, double* %11, align 8
  %61 = fcmp oge double %59, %60
  br i1 %61, label %62, label %66

62:                                               ; preds = %58
  %63 = load double, double* %11, align 8
  %64 = load double, double* %7, align 8
  %65 = fcmp oge double %63, %64
  br label %66

66:                                               ; preds = %62, %58
  %67 = phi i1 [ false, %58 ], [ %65, %62 ]
  %68 = zext i1 %67 to i32
  %69 = trunc i32 %68 to i16
  store i16 %69, i16* %12, align 2
  br label %90

70:                                               ; preds = %54
  %71 = load double, double* %6, align 8
  %72 = load double, double* %11, align 8
  %73 = fcmp oge double %71, %72
  br i1 %73, label %74, label %77

74:                                               ; preds = %70
  %75 = load double, double* %11, align 8
  %76 = fcmp oge double %75, 0.000000e+00
  br i1 %76, label %86, label %77

77:                                               ; preds = %74, %70
  %78 = load double, double* %11, align 8
  %79 = fcmp oge double 0x401921FB54442D18, %78
  br i1 %79, label %80, label %84

80:                                               ; preds = %77
  %81 = load double, double* %11, align 8
  %82 = load double, double* %7, align 8
  %83 = fcmp oge double %81, %82
  br label %84

84:                                               ; preds = %80, %77
  %85 = phi i1 [ false, %77 ], [ %83, %80 ]
  br label %86

86:                                               ; preds = %84, %74
  %87 = phi i1 [ true, %74 ], [ %85, %84 ]
  %88 = zext i1 %87 to i32
  %89 = trunc i32 %88 to i16
  store i16 %89, i16* %12, align 2
  br label %90

90:                                               ; preds = %86, %66
  br label %128

91:                                               ; preds = %51
  %92 = load double, double* %6, align 8
  %93 = load double, double* %7, align 8
  %94 = fcmp olt double %92, %93
  br i1 %94, label %95, label %107

95:                                               ; preds = %91
  %96 = load double, double* %6, align 8
  %97 = load double, double* %11, align 8
  %98 = fcmp ole double %96, %97
  br i1 %98, label %99, label %103

99:                                               ; preds = %95
  %100 = load double, double* %11, align 8
  %101 = load double, double* %7, align 8
  %102 = fcmp ole double %100, %101
  br label %103

103:                                              ; preds = %99, %95
  %104 = phi i1 [ false, %95 ], [ %102, %99 ]
  %105 = zext i1 %104 to i32
  %106 = trunc i32 %105 to i16
  store i16 %106, i16* %12, align 2
  br label %127

107:                                              ; preds = %91
  %108 = load double, double* %6, align 8
  %109 = load double, double* %11, align 8
  %110 = fcmp ole double %108, %109
  br i1 %110, label %111, label %114

111:                                              ; preds = %107
  %112 = load double, double* %11, align 8
  %113 = fcmp ole double %112, 0x401921FB54442D18
  br i1 %113, label %123, label %114

114:                                              ; preds = %111, %107
  %115 = load double, double* %11, align 8
  %116 = fcmp ole double 0.000000e+00, %115
  br i1 %116, label %117, label %121

117:                                              ; preds = %114
  %118 = load double, double* %11, align 8
  %119 = load double, double* %7, align 8
  %120 = fcmp ole double %118, %119
  br label %121

121:                                              ; preds = %117, %114
  %122 = phi i1 [ false, %114 ], [ %120, %117 ]
  br label %123

123:                                              ; preds = %121, %111
  %124 = phi i1 [ true, %111 ], [ %122, %121 ]
  %125 = zext i1 %124 to i32
  %126 = trunc i32 %125 to i16
  store i16 %126, i16* %12, align 2
  br label %127

127:                                              ; preds = %123, %103
  br label %128

128:                                              ; preds = %127, %90
  %129 = load i16, i16* %12, align 2
  ret i16 %129
}

; Function Attrs: noinline nounwind optnone uwtable
define internal double @toRad(double noundef %0) #0 {
  %2 = alloca double, align 8
  store double %0, double* %2, align 8
  %3 = load double, double* %2, align 8
  %4 = fmul double %3, 0x3F91DF46A2529D39
  ret double %4
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @freeBulges(%struct.boundingboxStem* noundef %0) #0 {
  %2 = alloca %struct.boundingboxStem*, align 8
  %3 = alloca i32, align 4
  store %struct.boundingboxStem* %0, %struct.boundingboxStem** %2, align 8
  %4 = load %struct.boundingboxStem*, %struct.boundingboxStem** %2, align 8
  %5 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %4, i32 0, i32 7
  %6 = load double**, double*** %5, align 8
  %7 = icmp ne double** %6, null
  br i1 %7, label %8, label %32

8:                                                ; preds = %1
  store i32 0, i32* %3, align 4
  br label %9

9:                                                ; preds = %24, %8
  %10 = load i32, i32* %3, align 4
  %11 = load %struct.boundingboxStem*, %struct.boundingboxStem** %2, align 8
  %12 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %11, i32 0, i32 5
  %13 = load i32, i32* %12, align 8
  %14 = icmp slt i32 %10, %13
  br i1 %14, label %15, label %27

15:                                               ; preds = %9
  %16 = load %struct.boundingboxStem*, %struct.boundingboxStem** %2, align 8
  %17 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %16, i32 0, i32 7
  %18 = load double**, double*** %17, align 8
  %19 = load i32, i32* %3, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds double*, double** %18, i64 %20
  %22 = load double*, double** %21, align 8
  %23 = bitcast double* %22 to i8*
  call void @free(i8* noundef %23) #7
  br label %24

24:                                               ; preds = %15
  %25 = load i32, i32* %3, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %3, align 4
  br label %9, !llvm.loop !163

27:                                               ; preds = %9
  %28 = load %struct.boundingboxStem*, %struct.boundingboxStem** %2, align 8
  %29 = getelementptr inbounds %struct.boundingboxStem, %struct.boundingboxStem* %28, i32 0, i32 7
  %30 = load double**, double*** %29, align 8
  %31 = bitcast double** %30 to i8*
  call void @free(i8* noundef %31) #7
  br label %32

32:                                               ; preds = %27, %1
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #4 = { argmemonly nofree nounwind willreturn }
attributes #5 = { argmemonly nofree nounwind willreturn writeonly }
attributes #6 = { nounwind readnone willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind }
attributes #8 = { nounwind readnone willreturn }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{!"clang version 14.0.0 (https://github.com/llvm/llvm-project.git a2a7fc7ea5612fd86c46f054690f532092d92a3d)"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.mustprogress"}
!6 = distinct !{!6, !5}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !5}
!9 = distinct !{!9, !5}
!10 = distinct !{!10, !5}
!11 = distinct !{!11, !5}
!12 = distinct !{!12, !5}
!13 = distinct !{!13, !5}
!14 = distinct !{!14, !5}
!15 = distinct !{!15, !5}
!16 = distinct !{!16, !5}
!17 = distinct !{!17, !5}
!18 = distinct !{!18, !5}
!19 = distinct !{!19, !5}
!20 = distinct !{!20, !5}
!21 = distinct !{!21, !5}
!22 = distinct !{!22, !5}
!23 = distinct !{!23, !5}
!24 = distinct !{!24, !5}
!25 = distinct !{!25, !5}
!26 = distinct !{!26, !5}
!27 = distinct !{!27, !5}
!28 = distinct !{!28, !5}
!29 = distinct !{!29, !5}
!30 = distinct !{!30, !5}
!31 = distinct !{!31, !5}
!32 = distinct !{!32, !5}
!33 = distinct !{!33, !5}
!34 = distinct !{!34, !5}
!35 = distinct !{!35, !5}
!36 = distinct !{!36, !5}
!37 = distinct !{!37, !5}
!38 = distinct !{!38, !5}
!39 = distinct !{!39, !5}
!40 = distinct !{!40, !5}
!41 = distinct !{!41, !5}
!42 = distinct !{!42, !5}
!43 = distinct !{!43, !5}
!44 = distinct !{!44, !5}
!45 = distinct !{!45, !5}
!46 = distinct !{!46, !5}
!47 = distinct !{!47, !5}
!48 = distinct !{!48, !5}
!49 = distinct !{!49, !5}
!50 = distinct !{!50, !5}
!51 = distinct !{!51, !5}
!52 = distinct !{!52, !5}
!53 = distinct !{!53, !5}
!54 = distinct !{!54, !5}
!55 = distinct !{!55, !5}
!56 = distinct !{!56, !5}
!57 = distinct !{!57, !5}
!58 = distinct !{!58, !5}
!59 = distinct !{!59, !5}
!60 = distinct !{!60, !5}
!61 = distinct !{!61, !5}
!62 = distinct !{!62, !5}
!63 = distinct !{!63, !5}
!64 = distinct !{!64, !5}
!65 = distinct !{!65, !5}
!66 = distinct !{!66, !5}
!67 = distinct !{!67, !5}
!68 = distinct !{!68, !5}
!69 = distinct !{!69, !5}
!70 = distinct !{!70, !5}
!71 = distinct !{!71, !5}
!72 = distinct !{!72, !5}
!73 = distinct !{!73, !5}
!74 = distinct !{!74, !5}
!75 = distinct !{!75, !5}
!76 = distinct !{!76, !5}
!77 = distinct !{!77, !5}
!78 = distinct !{!78, !5}
!79 = distinct !{!79, !5}
!80 = distinct !{!80, !5}
!81 = distinct !{!81, !5}
!82 = distinct !{!82, !5}
!83 = distinct !{!83, !5}
!84 = distinct !{!84, !5}
!85 = distinct !{!85, !5}
!86 = distinct !{!86, !5}
!87 = distinct !{!87, !5}
!88 = distinct !{!88, !5}
!89 = distinct !{!89, !5}
!90 = distinct !{!90, !5}
!91 = distinct !{!91, !5}
!92 = distinct !{!92, !5}
!93 = distinct !{!93, !5}
!94 = distinct !{!94, !5}
!95 = distinct !{!95, !5}
!96 = distinct !{!96, !5}
!97 = distinct !{!97, !5}
!98 = distinct !{!98, !5}
!99 = distinct !{!99, !5}
!100 = distinct !{!100, !5}
!101 = distinct !{!101, !5}
!102 = distinct !{!102, !5}
!103 = distinct !{!103, !5}
!104 = distinct !{!104, !5}
!105 = distinct !{!105, !5}
!106 = distinct !{!106, !5}
!107 = distinct !{!107, !5}
!108 = distinct !{!108, !5}
!109 = distinct !{!109, !5}
!110 = distinct !{!110, !5}
!111 = distinct !{!111, !5}
!112 = distinct !{!112, !5}
!113 = distinct !{!113, !5}
!114 = distinct !{!114, !5}
!115 = distinct !{!115, !5}
!116 = distinct !{!116, !5}
!117 = distinct !{!117, !5}
!118 = distinct !{!118, !5}
!119 = distinct !{!119, !5}
!120 = distinct !{!120, !5}
!121 = distinct !{!121, !5}
!122 = distinct !{!122, !5}
!123 = distinct !{!123, !5}
!124 = distinct !{!124, !5}
!125 = distinct !{!125, !5}
!126 = distinct !{!126, !5}
!127 = distinct !{!127, !5}
!128 = distinct !{!128, !5}
!129 = distinct !{!129, !5}
!130 = distinct !{!130, !5}
!131 = distinct !{!131, !5}
!132 = distinct !{!132, !5}
!133 = distinct !{!133, !5}
!134 = distinct !{!134, !5}
!135 = distinct !{!135, !5}
!136 = distinct !{!136, !5}
!137 = distinct !{!137, !5}
!138 = distinct !{!138, !5}
!139 = distinct !{!139, !5}
!140 = distinct !{!140, !5}
!141 = distinct !{!141, !5}
!142 = distinct !{!142, !5}
!143 = distinct !{!143, !5}
!144 = distinct !{!144, !5}
!145 = distinct !{!145, !5}
!146 = distinct !{!146, !5}
!147 = distinct !{!147, !5}
!148 = distinct !{!148, !5}
!149 = distinct !{!149, !5}
!150 = distinct !{!150, !5}
!151 = distinct !{!151, !5}
!152 = distinct !{!152, !5}
!153 = distinct !{!153, !5}
!154 = distinct !{!154, !5}
!155 = distinct !{!155, !5}
!156 = distinct !{!156, !5}
!157 = distinct !{!157, !5}
!158 = distinct !{!158, !5}
!159 = distinct !{!159, !5}
!160 = distinct !{!160, !5}
!161 = distinct !{!161, !5}
!162 = distinct !{!162, !5}
!163 = distinct !{!163, !5}
