; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.15.6"

%struct.config = type { i16, i16, i16, i16 }
%struct.rpl_option = type { i8*, i32, i32*, i32 }
%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sFILEX = type opaque
%struct.__sbuf = type { i8*, i32 }
%struct.stat = type { i32, i16, i16, i64, i32, i32, i32, %struct.timespec, %struct.timespec, %struct.timespec, %struct.timespec, i64, i64, i32, i32, i32, i32, [2 x i64] }
%struct.timespec = type { i64, i64 }
%struct.ct_data = type { %union.anon.0, %union.anon.0 }
%union.anon.0 = type { i16 }
%struct.tree_desc = type { %struct.ct_data*, %struct.ct_data*, i32*, i32, i32, i32, i32 }
%struct._opaque_pthread_mutexattr_t = type { i64, [8 x i8] }
%struct.sigaction = type { %union.__sigaction_u, i32, i32 }
%union.__sigaction_u = type { void (i32)* }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.DIR = type { i32, i64, i64, i8*, i32, i64, i64, i32, %struct._opaque_pthread_mutex_t, %struct._telldir* }
%struct._opaque_pthread_mutex_t = type { i64, [56 x i8] }
%struct._telldir = type opaque
%struct.huft = type { i8, i8, %union.anon }
%union.anon = type { %struct.huft* }
%struct.cd_buf = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%union.anon.37 = type { i64 }
%struct.saved_cwd = type { i32, i8* }
%struct.direntry_t = type { i8* }
%struct.dirent = type { i64, i64, i16, i16, i8, [1024 x i8] }
%struct.timeval = type { i64, i32 }

@zfile = internal global i32 0, align 4
@bi_buf = internal global i16 0, align 2
@bi_valid = internal global i32 0, align 4
@lookahead = internal global i32 0, align 4
@ins_h = internal global i32 0, align 4
@prev_length = global i32 0, align 4
@match_start = global i32 0, align 4
@max_lazy_match = internal global i32 0, align 4
@window_size = internal global i64 65536, align 8
@rsync_chunk_end = internal global i64 0, align 8
@eofile = internal global i32 0, align 4
@max_chain_length = global i32 0, align 4
@good_match = global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"bad pack level\00", align 1
@rsync_sum = internal global i64 0, align 8
@configuration_table = internal global [10 x %struct.config] [%struct.config zeroinitializer, %struct.config { i16 4, i16 4, i16 8, i16 4 }, %struct.config { i16 4, i16 5, i16 16, i16 8 }, %struct.config { i16 4, i16 6, i16 32, i16 32 }, %struct.config { i16 4, i16 4, i16 16, i16 16 }, %struct.config { i16 8, i16 16, i16 32, i16 32 }, %struct.config { i16 8, i16 16, i16 128, i16 128 }, %struct.config { i16 8, i16 32, i16 128, i16 256 }, %struct.config { i16 32, i16 128, i16 258, i16 1024 }, %struct.config { i16 32, i16 258, i16 258, i16 4096 }], align 16
@nice_match = internal global i32 0, align 4
@read_buf = global i32 (i8*, i32)* null, align 8
@rsync = global i32 0, align 4
@.str.11 = private unnamed_addr constant [5 x i8] c".exe\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"GZIP\00", align 1
@env = internal global i8* null, align 8
@.str.2 = private unnamed_addr constant [4 x i8] c".gz\00", align 1
@z_suffix = internal global i8* null, align 8
@z_len = internal global i64 0, align 8
@rpl_optind = external global i32, align 4
@.str.3 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@shortopts = internal constant [34 x i8] c"ab:cdfhH?klLmMnNqrS:tvVZ123456789\00", align 16
@longopts = internal constant [27 x %struct.rpl_option] [%struct.rpl_option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i32 0, i32* null, i32 97 }, %struct.rpl_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16, i32 0, i32 0), i32 0, i32* null, i32 99 }, %struct.rpl_option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i32 0, i32 0), i32 0, i32* null, i32 99 }, %struct.rpl_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i32 0, i32 0), i32 0, i32* null, i32 100 }, %struct.rpl_option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19, i32 0, i32 0), i32 0, i32* null, i32 100 }, %struct.rpl_option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i32 0, i32* null, i32 102 }, %struct.rpl_option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i32 0, i32 0), i32 0, i32* null, i32 104 }, %struct.rpl_option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i32 0, i32 0), i32 0, i32* null, i32 107 }, %struct.rpl_option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i32 0, i32 0), i32 0, i32* null, i32 108 }, %struct.rpl_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.24, i32 0, i32 0), i32 0, i32* null, i32 76 }, %struct.rpl_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.rpl_option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i32 0, i32 0), i32 0, i32* null, i32 78 }, %struct.rpl_option { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.27, i32 0, i32 0), i32 0, i32* null, i32 128 }, %struct.rpl_option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.28, i32 0, i32 0), i32 0, i32* null, i32 113 }, %struct.rpl_option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29, i32 0, i32 0), i32 0, i32* null, i32 113 }, %struct.rpl_option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.30, i32 0, i32 0), i32 0, i32* null, i32 130 }, %struct.rpl_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.rpl_option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.32, i32 0, i32 0), i32 1, i32* null, i32 83 }, %struct.rpl_option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0), i32 0, i32* null, i32 116 }, %struct.rpl_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 118 }, %struct.rpl_option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 86 }, %struct.rpl_option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36, i32 0, i32 0), i32 0, i32* null, i32 49 }, %struct.rpl_option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i32 0, i32 0), i32 0, i32* null, i32 57 }, %struct.rpl_option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.38, i32 0, i32 0), i32 0, i32* null, i32 90 }, %struct.rpl_option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39, i32 0, i32 0), i32 1, i32* null, i32 98 }, %struct.rpl_option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40, i32 0, i32 0), i32 0, i32* null, i32 129 }, %struct.rpl_option zeroinitializer], align 16
@.str.4 = private unnamed_addr constant [49 x i8] c"%s: %s: non-option in GZIP environment variable\0A\00", align 1
@.str.5 = private unnamed_addr constant [78 x i8] c"%s: warning: GZIP environment variable is deprecated; use an alias or script\0A\00", align 1
@ascii = internal global i32 0, align 4
@rpl_optarg = external global i8*, align 8
@.str.6 = private unnamed_addr constant [34 x i8] c"%s: -b operand is not an integer\0A\00", align 1
@decompress = internal global i32 0, align 4
@force = internal global i32 0, align 4
@keep = internal global i32 0, align 4
@list = internal global i32 0, align 4
@no_time = internal global i32 -1, align 4
@no_name = internal global i32 -1, align 4
@presume_input_tty = internal global i8 0, align 1
@verbose = internal global i32 0, align 4
@recursive = internal global i32 0, align 4
@synchronous = internal global i8 0, align 1
@.str.7 = private unnamed_addr constant [38 x i8] c"%s: -Z not supported in this version\0A\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"-%c: \00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"--%s: \00", align 1
@.str.11.12 = private unnamed_addr constant [47 x i8] c"option not valid in GZIP environment variable\0A\00", align 1
@.str.12 = private unnamed_addr constant [43 x i8] c"%s: option --ascii ignored on this system\0A\00", align 1
@.str.13 = private unnamed_addr constant [25 x i8] c"%s: invalid suffix '%s'\0A\00", align 1
@exiting_signal = internal global i32 0, align 4
@stdin_was_read = internal global i8 0, align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@__stdoutp = external global %struct.__sFILE*, align 8
@.str.15 = private unnamed_addr constant [6 x i8] c"ascii\00", align 1
@.str.16 = private unnamed_addr constant [10 x i8] c"to-stdout\00", align 1
@.str.17 = private unnamed_addr constant [7 x i8] c"stdout\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"decompress\00", align 1
@.str.19 = private unnamed_addr constant [11 x i8] c"uncompress\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"force\00", align 1
@.str.21 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"keep\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"list\00", align 1
@.str.24 = private unnamed_addr constant [8 x i8] c"license\00", align 1
@.str.25 = private unnamed_addr constant [8 x i8] c"no-name\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.27 = private unnamed_addr constant [19 x i8] c"-presume-input-tty\00", align 1
@.str.28 = private unnamed_addr constant [6 x i8] c"quiet\00", align 1
@.str.29 = private unnamed_addr constant [7 x i8] c"silent\00", align 1
@.str.30 = private unnamed_addr constant [12 x i8] c"synchronous\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"recursive\00", align 1
@.str.32 = private unnamed_addr constant [7 x i8] c"suffix\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@.str.34 = private unnamed_addr constant [8 x i8] c"verbose\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.36 = private unnamed_addr constant [5 x i8] c"fast\00", align 1
@.str.37 = private unnamed_addr constant [5 x i8] c"best\00", align 1
@.str.38 = private unnamed_addr constant [4 x i8] c"lzw\00", align 1
@.str.39 = private unnamed_addr constant [5 x i8] c"bits\00", align 1
@.str.40 = private unnamed_addr constant [10 x i8] c"rsyncable\00", align 1
@.str.41 = private unnamed_addr constant [39 x i8] c"Try `%s --help' for more information.\0A\00", align 1
@help.help_msg = internal constant [28 x i8*] [i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.65, i32 0, i32 0), i8* null], align 16
@.str.42 = private unnamed_addr constant [68 x i8] c"Compress or uncompress FILEs (by default, compress FILES in-place).\00", align 1
@.str.43 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.44 = private unnamed_addr constant [73 x i8] c"Mandatory arguments to long options are mandatory for short options too.\00", align 1
@.str.45 = private unnamed_addr constant [76 x i8] c"  -c, --stdout      write on standard output, keep original files unchanged\00", align 1
@.str.46 = private unnamed_addr constant [31 x i8] c"  -d, --decompress  decompress\00", align 1
@.str.47 = private unnamed_addr constant [70 x i8] c"  -f, --force       force overwrite of output file and compress links\00", align 1
@.str.48 = private unnamed_addr constant [35 x i8] c"  -h, --help        give this help\00", align 1
@.str.49 = private unnamed_addr constant [52 x i8] c"  -k, --keep        keep (don't delete) input files\00", align 1
@.str.50 = private unnamed_addr constant [50 x i8] c"  -l, --list        list compressed file contents\00", align 1
@.str.51 = private unnamed_addr constant [45 x i8] c"  -L, --license     display software license\00", align 1
@.str.52 = private unnamed_addr constant [75 x i8] c"  -n, --no-name     do not save or restore the original name and timestamp\00", align 1
@.str.53 = private unnamed_addr constant [68 x i8] c"  -N, --name        save or restore the original name and timestamp\00", align 1
@.str.54 = private unnamed_addr constant [42 x i8] c"  -q, --quiet       suppress all warnings\00", align 1
@.str.55 = private unnamed_addr constant [55 x i8] c"  -r, --recursive   operate recursively on directories\00", align 1
@.str.56 = private unnamed_addr constant [48 x i8] c"      --rsyncable   make rsync-friendly archive\00", align 1
@.str.57 = private unnamed_addr constant [55 x i8] c"  -S, --suffix=SUF  use suffix SUF on compressed files\00", align 1
@.str.58 = private unnamed_addr constant [77 x i8] c"      --synchronous synchronous output (safer if system crashes, but slower)\00", align 1
@.str.59 = private unnamed_addr constant [51 x i8] c"  -t, --test        test compressed file integrity\00", align 1
@.str.60 = private unnamed_addr constant [33 x i8] c"  -v, --verbose     verbose mode\00", align 1
@.str.61 = private unnamed_addr constant [43 x i8] c"  -V, --version     display version number\00", align 1
@.str.62 = private unnamed_addr constant [36 x i8] c"  -1, --fast        compress faster\00", align 1
@.str.63 = private unnamed_addr constant [36 x i8] c"  -9, --best        compress better\00", align 1
@.str.64 = private unnamed_addr constant [54 x i8] c"With no FILE, or when FILE is -, read standard input.\00", align 1
@.str.65 = private unnamed_addr constant [35 x i8] c"Report bugs to <bug-gzip@gnu.org>.\00", align 1
@.str.66 = private unnamed_addr constant [33 x i8] c"Usage: %s [OPTION]... [FILE]...\0A\00", align 1
@.str.67 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@license_msg = internal constant [6 x i8*] [i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.73, i32 0, i32 0), i8* null], align 16
@.str.68 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.69 = private unnamed_addr constant [50 x i8] c"Copyright (C) 2018 Free Software Foundation, Inc.\00", align 1
@.str.70 = private unnamed_addr constant [37 x i8] c"Copyright (C) 1993 Jean-loup Gailly.\00", align 1
@.str.71 = private unnamed_addr constant [77 x i8] c"This is free software.  You may redistribute copies of it under the terms of\00", align 1
@.str.72 = private unnamed_addr constant [72 x i8] c"the GNU General Public License <https://www.gnu.org/licenses/gpl.html>.\00", align 1
@.str.73 = private unnamed_addr constant [54 x i8] c"There is NO WARRANTY, to the extent permitted by law.\00", align 1
@.str.74 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.75 = private unnamed_addr constant [30 x i8] c"Written by Jean-loup Gailly.\0A\00", align 1
@.str.76 = private unnamed_addr constant [93 x i8] c"%s: compressed data not %s a terminal. Use -f to force %scompression.\0AFor help, type: %s -h\0A\00", align 1
@.str.77 = private unnamed_addr constant [10 x i8] c"read from\00", align 1
@.str.78 = private unnamed_addr constant [11 x i8] c"written to\00", align 1
@.str.79 = private unnamed_addr constant [3 x i8] c"de\00", align 1
@istat = internal global %struct.stat zeroinitializer, align 8
@.str.80 = private unnamed_addr constant [15 x i8] c"standard input\00", align 1
@part_nb = internal global i32 0, align 4
@work = internal global i32 (i32, i32)* @zip, align 8
@.str.81 = private unnamed_addr constant [5 x i8] c" OK\0A\00", align 1
@last_member = internal global i32 0, align 4
@.str.82 = private unnamed_addr constant [3 x i8] c"\1F\8B\00", align 1
@.str.83 = private unnamed_addr constant [3 x i8] c"\1F\9E\00", align 1
@.str.84 = private unnamed_addr constant [44 x i8] c"%s: %s: unknown method %d -- not supported\0A\00", align 1
@.str.85 = private unnamed_addr constant [38 x i8] c"%s: %s is encrypted -- not supported\0A\00", align 1
@.str.86 = private unnamed_addr constant [40 x i8] c"%s: %s has flags 0x%x -- not supported\0A\00", align 1
@.str.87 = private unnamed_addr constant [50 x i8] c"%s: %s: MTIME %lu out of range for this platform\0A\00", align 1
@.str.88 = private unnamed_addr constant [41 x i8] c"%s: %s: extra field of %u bytes ignored\0A\00", align 1
@.str.89 = private unnamed_addr constant [39 x i8] c"corrupted input -- file name too large\00", align 1
@.str.90 = private unnamed_addr constant [60 x i8] c"%s: %s: header checksum 0x%04x != computed checksum 0x%04x\0A\00", align 1
@.str.91 = private unnamed_addr constant [5 x i8] c"PK\03\04\00", align 1
@.str.92 = private unnamed_addr constant [3 x i8] c"\1F\1E\00", align 1
@.str.93 = private unnamed_addr constant [3 x i8] c"\1F\9D\00", align 1
@.str.94 = private unnamed_addr constant [3 x i8] c"\1F\A0\00", align 1
@.str.95 = private unnamed_addr constant [29 x i8] c"\0A%s: %s: not in gzip format\0A\00", align 1
@.str.96 = private unnamed_addr constant [56 x i8] c"\0A%s: %s: decompression OK, trailing zero bytes ignored\0A\00", align 1
@.str.97 = private unnamed_addr constant [53 x i8] c"\0A%s: %s: decompression OK, trailing garbage ignored\0A\00", align 1
@.str.98 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.99 = private unnamed_addr constant [34 x i8] c"%s: %s is a directory -- ignored\0A\00", align 1
@.str.100 = private unnamed_addr constant [55 x i8] c"%s: %s is not a directory or a regular file - ignored\0A\00", align 1
@.str.101 = private unnamed_addr constant [46 x i8] c"%s: %s is set-user-ID on execution - ignored\0A\00", align 1
@.str.102 = private unnamed_addr constant [47 x i8] c"%s: %s is set-group-ID on execution - ignored\0A\00", align 1
@.str.103 = private unnamed_addr constant [46 x i8] c"%s: %s has the sticky bit set - file ignored\0A\00", align 1
@.str.104 = private unnamed_addr constant [45 x i8] c"%s: %s has %lu other link%s -- file ignored\0A\00", align 1
@.str.105 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.106 = private unnamed_addr constant [25 x i8] c"%s: %s compressed to %s\0A\00", align 1
@.str.107 = private unnamed_addr constant [5 x i8] c"%s:\09\00", align 1
@dfd = internal global i32 -1, align 4
@caught_signals = internal global i32 0, align 4
@remove_ofname_fd = internal global i32 -1, align 4
@.str.108 = private unnamed_addr constant [4 x i8] c" OK\00", align 1
@.str.109 = private unnamed_addr constant [10 x i8] c" -- %s %s\00", align 1
@.str.110 = private unnamed_addr constant [8 x i8] c"created\00", align 1
@.str.111 = private unnamed_addr constant [14 x i8] c"replaced with\00", align 1
@open_input_file.suffixes = internal global [6 x i8*] [i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.114, i32 0, i32 0), i8* null], align 16
@.str.112 = private unnamed_addr constant [3 x i8] c".z\00", align 1
@.str.113 = private unnamed_addr constant [3 x i8] c"-z\00", align 1
@.str.114 = private unnamed_addr constant [3 x i8] c".Z\00", align 1
@.str.115 = private unnamed_addr constant [28 x i8] c"%s: %s: file name too long\0A\00", align 1
@dot = internal constant i8 46, align 1
@dfname = internal global [1024 x i8] zeroinitializer, align 16
@get_suffix.known_suffixes = internal global [10 x i8*] [i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* null, i8* null], align 16
@.str.116 = private unnamed_addr constant [5 x i8] c".taz\00", align 1
@.str.117 = private unnamed_addr constant [5 x i8] c".tgz\00", align 1
@.str.118 = private unnamed_addr constant [4 x i8] c"-gz\00", align 1
@.str.119 = private unnamed_addr constant [3 x i8] c"_z\00", align 1
@.str.120 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.121 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.122 = private unnamed_addr constant [30 x i8] c"%s: %s/%s: pathname too long\0A\00", align 1
@.str.123 = private unnamed_addr constant [35 x i8] c"%s: %s: unknown suffix -- ignored\0A\00", align 1
@.str.124 = private unnamed_addr constant [5 x i8] c".tar\00", align 1
@.str.125 = private unnamed_addr constant [43 x i8] c"%s: %s already has %s suffix -- unchanged\0A\00", align 1
@remove_ofname = internal global [1024 x i8] zeroinitializer, align 16
@.str.126 = private unnamed_addr constant [33 x i8] c"%s: %s: warning, name truncated\0A\00", align 1
@.str.127 = private unnamed_addr constant [15 x i8] c"name too short\00", align 1
@.str.128 = private unnamed_addr constant [22 x i8] c"can't recover suffix\0A\00", align 1
@.str.129 = private unnamed_addr constant [31 x i8] c"internal error in shorten_name\00", align 1
@.str.130 = private unnamed_addr constant [23 x i8] c"%s: %s already exists;\00", align 1
@foreground = internal global i32 0, align 4
@.str.131 = private unnamed_addr constant [37 x i8] c" do you wish to overwrite (y or n)? \00", align 1
@.str.132 = private unnamed_addr constant [18 x i8] c"\09not overwritten\0A\00", align 1
@.str.133 = private unnamed_addr constant [24 x i8] c"%s: timestamp restored\0A\00", align 1
@do_list.first_time = internal global i32 1, align 4
@do_list.methods = internal constant [9 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.138, i32 0, i32 0)], align 16
@.str.134 = private unnamed_addr constant [6 x i8] c"store\00", align 1
@.str.135 = private unnamed_addr constant [6 x i8] c"compr\00", align 1
@.str.136 = private unnamed_addr constant [6 x i8] c"pack \00", align 1
@.str.137 = private unnamed_addr constant [6 x i8] c"lzh  \00", align 1
@.str.138 = private unnamed_addr constant [6 x i8] c"defla\00", align 1
@.str.139 = private unnamed_addr constant [29 x i8] c"method  crc     date  time  \00", align 1
@.str.140 = private unnamed_addr constant [38 x i8] c"%*.*s %*.*s  ratio uncompressed_name\0A\00", align 1
@.str.141 = private unnamed_addr constant [11 x i8] c"compressed\00", align 1
@.str.142 = private unnamed_addr constant [13 x i8] c"uncompressed\00", align 1
@total_in = internal global i64 0, align 8
@total_out = internal global i64 0, align 8
@.str.143 = private unnamed_addr constant [29 x i8] c"                            \00", align 1
@.str.144 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.145 = private unnamed_addr constant [11 x i8] c" (totals)\0A\00", align 1
@do_list.month_abbr = internal constant [12 x [4 x i8]] [[4 x i8] c"Jan\00", [4 x i8] c"Feb\00", [4 x i8] c"Mar\00", [4 x i8] c"Apr\00", [4 x i8] c"May\00", [4 x i8] c"Jun\00", [4 x i8] c"Jul\00", [4 x i8] c"Aug\00", [4 x i8] c"Sep\00", [4 x i8] c"Oct\00", [4 x i8] c"Nov\00", [4 x i8] c"Dec\00"], align 16
@.str.146 = private unnamed_addr constant [11 x i8] c"%5s %08lx \00", align 1
@.str.147 = private unnamed_addr constant [17 x i8] c"%s%3d %02d:%02d \00", align 1
@.str.148 = private unnamed_addr constant [14 x i8] c"??? ?? ??:?? \00", align 1
@.str.149 = private unnamed_addr constant [5 x i8] c" %s\0A\00", align 1
@handled_sig = internal global [6 x i32] [i32 2, i32 1, i32 13, i32 15, i32 24, i32 25], align 16
@do_exit.in_exit = internal global i32 0, align 4
@bk = internal global i32 0, align 4
@bb = internal global i64 0, align 8
@hufts = internal global i32 0, align 4
@border = internal global [19 x i32] [i32 16, i32 17, i32 18, i32 0, i32 8, i32 7, i32 9, i32 6, i32 10, i32 5, i32 11, i32 4, i32 12, i32 3, i32 13, i32 2, i32 14, i32 1, i32 15], align 16
@mask_bits = internal global [17 x i16] [i16 0, i16 1, i16 3, i16 7, i16 15, i16 31, i16 63, i16 127, i16 255, i16 511, i16 1023, i16 2047, i16 4095, i16 8191, i16 16383, i16 32767, i16 -1], align 16
@lbits = internal global i32 9, align 4
@cplens = internal global [31 x i16] [i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 10, i16 11, i16 13, i16 15, i16 17, i16 19, i16 23, i16 27, i16 31, i16 35, i16 43, i16 51, i16 59, i16 67, i16 83, i16 99, i16 115, i16 131, i16 163, i16 195, i16 227, i16 258, i16 0, i16 0], align 16
@cplext = internal global [31 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1, i16 1, i16 1, i16 1, i16 2, i16 2, i16 2, i16 2, i16 3, i16 3, i16 3, i16 3, i16 4, i16 4, i16 4, i16 4, i16 5, i16 5, i16 5, i16 5, i16 0, i16 99, i16 99], align 16
@dbits = internal global i32 6, align 4
@cpdist = internal global [30 x i16] [i16 1, i16 2, i16 3, i16 4, i16 5, i16 7, i16 9, i16 13, i16 17, i16 25, i16 33, i16 49, i16 65, i16 97, i16 129, i16 193, i16 257, i16 385, i16 513, i16 769, i16 1025, i16 1537, i16 2049, i16 3073, i16 4097, i16 6145, i16 8193, i16 12289, i16 16385, i16 24577], align 16
@cpdext = internal global [30 x i16] [i16 0, i16 0, i16 0, i16 0, i16 1, i16 1, i16 2, i16 2, i16 3, i16 3, i16 4, i16 4, i16 5, i16 5, i16 6, i16 6, i16 7, i16 7, i16 8, i16 8, i16 9, i16 9, i16 10, i16 10, i16 11, i16 11, i16 12, i16 12, i16 13, i16 13], align 16
@file_type = internal global i16* null, align 8
@file_method = internal global i32* null, align 8
@input_len = internal global i64 0, align 8
@compressed_len = internal global i64 0, align 8
@static_dtree = internal global [30 x %struct.ct_data] zeroinitializer, align 16
@base_length = internal global [29 x i32] zeroinitializer, align 16
@extra_lbits = internal global [29 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 5, i32 0], align 16
@length_code = internal global [256 x i8] zeroinitializer, align 16
@base_dist = internal global [30 x i32] zeroinitializer, align 16
@extra_dbits = internal global [30 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 4, i32 4, i32 5, i32 5, i32 6, i32 6, i32 7, i32 7, i32 8, i32 8, i32 9, i32 9, i32 10, i32 10, i32 11, i32 11, i32 12, i32 12, i32 13, i32 13], align 16
@dist_code = internal global [512 x i8] zeroinitializer, align 16
@bl_count = internal global [16 x i16] zeroinitializer, align 16
@static_ltree = internal global [288 x %struct.ct_data] zeroinitializer, align 16
@flags = internal global i8 0, align 1
@flag_buf = internal global [4096 x i8] zeroinitializer, align 16
@last_flags = internal global i32 0, align 4
@l_desc = internal global %struct.tree_desc { %struct.ct_data* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i32 0, i32 0), %struct.ct_data* getelementptr inbounds ([288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i32 0, i32 0), i32* getelementptr inbounds ([29 x i32], [29 x i32]* @extra_lbits, i32 0, i32 0), i32 257, i32 286, i32 15, i32 0 }, align 8
@d_desc = internal global %struct.tree_desc { %struct.ct_data* getelementptr inbounds ([61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i32 0, i32 0), %struct.ct_data* getelementptr inbounds ([30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i32 0, i32 0), i32* getelementptr inbounds ([30 x i32], [30 x i32]* @extra_dbits, i32 0, i32 0), i32 0, i32 30, i32 15, i32 0 }, align 8
@opt_len = internal global i64 0, align 8
@static_len = internal global i64 0, align 8
@.str.150 = private unnamed_addr constant [15 x i8] c"block vanished\00", align 1
@dyn_ltree = internal global [573 x %struct.ct_data] zeroinitializer, align 16
@dyn_dtree = internal global [61 x %struct.ct_data] zeroinitializer, align 16
@last_lit = internal global i32 0, align 4
@last_dist = internal global i32 0, align 4
@flag_bit = internal global i8 0, align 1
@strstart = global i32 0, align 4
@block_start = global i64 0, align 8
@bl_tree = internal global [39 x %struct.ct_data] zeroinitializer, align 16
@heap_len = internal global i32 0, align 4
@heap_max = internal global i32 0, align 4
@heap = internal global [573 x i32] zeroinitializer, align 16
@depth = internal global [573 x i8] zeroinitializer, align 16
@bl_desc = internal global %struct.tree_desc { %struct.ct_data* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i32 0, i32 0), %struct.ct_data* null, i32* getelementptr inbounds ([19 x i32], [19 x i32]* @extra_blbits, i32 0, i32 0), i32 0, i32 19, i32 7, i32 0 }, align 8
@bl_order = internal global [19 x i8] c"\10\11\12\00\08\07\09\06\0A\05\0B\04\0C\03\0D\02\0E\01\0F", align 16
@extra_blbits = internal global [19 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 3, i32 7], align 16
@.str.1.151 = private unnamed_addr constant [23 x i8] c"-l used on binary file\00", align 1
@done = internal global i32 0, align 4
@j = internal global i32 0, align 4
@blocksize = internal global i32 0, align 4
@bitbuf = internal global i16 0, align 2
@subbitbuf = internal global i32 0, align 4
@bitcount = internal global i32 0, align 4
@decode.i = internal global i32 0, align 4
@pt_len = internal global [32 x i8] zeroinitializer, align 16
@pt_table = internal global [256 x i16] zeroinitializer, align 16
@.str.156 = private unnamed_addr constant [11 x i8] c"Bad table\0A\00", align 1
@maxbits = global i32 16, align 4
@block_mode = internal global i32 128, align 4
@.str.159 = private unnamed_addr constant [38 x i8] c"\0A%s: %s: warning, unknown flags 0x%x\0A\00", align 1
@.str.1.160 = private unnamed_addr constant [59 x i8] c"\0A%s: %s: compressed with %d bits, can only handle %d bits\0A\00", align 1
@prev = global [65536 x i16] zeroinitializer, align 16
@.str.2.161 = private unnamed_addr constant [15 x i8] c"corrupt input.\00", align 1
@d_buf = global [32768 x i16] zeroinitializer, align 16
@.str.3.162 = private unnamed_addr constant [46 x i8] c"corrupt input. Use zcat to recover some data.\00", align 1
@valid = internal global i32 0, align 4
@bitbuf.166 = internal global i64 0, align 8
@peek_bits = internal global i32 0, align 4
@leaves = internal global [26 x i32] zeroinitializer, align 16
@max_len = internal global i32 0, align 4
@parents = internal global [26 x i32] zeroinitializer, align 16
@literal = internal global [256 x i8] zeroinitializer, align 16
@lit_base = internal global [26 x i32] zeroinitializer, align 16
@orig_len = internal global i64 0, align 8
@.str.167 = private unnamed_addr constant [38 x i8] c"invalid compressed data--length error\00", align 1
@.str.1.170 = private unnamed_addr constant [64 x i8] c"invalid compressed data -- Huffman code bit length out of range\00", align 1
@.str.2.171 = private unnamed_addr constant [32 x i8] c"too many leaves in Huffman tree\00", align 1
@.str.3.169 = private unnamed_addr constant [31 x i8] c"too few leaves in Huffman tree\00", align 1
@.str.4.168 = private unnamed_addr constant [50 x i8] c"invalid compressed data -- unexpected end of file\00", align 1
@.str.176 = private unnamed_addr constant [31 x i8] c"\0A%s: %s: not a valid zip file\0A\00", align 1
@.str.1.177 = private unnamed_addr constant [58 x i8] c"\0A%s: %s: first entry not deflated or stored -- use unzip\0A\00", align 1
@decrypt = internal global i32 0, align 4
@.str.2.178 = private unnamed_addr constant [38 x i8] c"\0A%s: %s: encrypted file -- use unzip\0A\00", align 1
@ext_header = internal global i32 0, align 4
@pkzip = internal global i32 0, align 4
@.str.3.181 = private unnamed_addr constant [41 x i8] c"invalid compressed data--format violated\00", align 1
@.str.4.182 = private unnamed_addr constant [18 x i8] c"len %lu, siz %lu\0A\00", align 1
@.str.5.183 = private unnamed_addr constant [41 x i8] c"invalid compressed data--length mismatch\00", align 1
@.str.6.184 = private unnamed_addr constant [31 x i8] c"internal error, invalid method\00", align 1
@.str.7.185 = private unnamed_addr constant [45 x i8] c"\0A%s: %s: invalid compressed data--crc error\0A\00", align 1
@.str.8.186 = private unnamed_addr constant [48 x i8] c"\0A%s: %s: invalid compressed data--length error\0A\00", align 1
@to_stdout = global i32 0, align 4
@.str.9.187 = private unnamed_addr constant [46 x i8] c"%s: %s has more than one entry--rest ignored\0A\00", align 1
@.str.10.188 = private unnamed_addr constant [45 x i8] c"%s: %s has more than one entry -- unchanged\0A\00", align 1
@unzip_crc = global i64 0, align 8
@insize = global i32 0, align 4
@inptr = global i32 0, align 4
@inbuf = global [262208 x i8] zeroinitializer, align 4096
@crc = internal global i64 4294967295, align 8
@crc_32_tab = internal constant [256 x i64] [i64 0, i64 1996959894, i64 3993919788, i64 2567524794, i64 124634137, i64 1886057615, i64 3915621685, i64 2657392035, i64 249268274, i64 2044508324, i64 3772115230, i64 2547177864, i64 162941995, i64 2125561021, i64 3887607047, i64 2428444049, i64 498536548, i64 1789927666, i64 4089016648, i64 2227061214, i64 450548861, i64 1843258603, i64 4107580753, i64 2211677639, i64 325883990, i64 1684777152, i64 4251122042, i64 2321926636, i64 335633487, i64 1661365465, i64 4195302755, i64 2366115317, i64 997073096, i64 1281953886, i64 3579855332, i64 2724688242, i64 1006888145, i64 1258607687, i64 3524101629, i64 2768942443, i64 901097722, i64 1119000684, i64 3686517206, i64 2898065728, i64 853044451, i64 1172266101, i64 3705015759, i64 2882616665, i64 651767980, i64 1373503546, i64 3369554304, i64 3218104598, i64 565507253, i64 1454621731, i64 3485111705, i64 3099436303, i64 671266974, i64 1594198024, i64 3322730930, i64 2970347812, i64 795835527, i64 1483230225, i64 3244367275, i64 3060149565, i64 1994146192, i64 31158534, i64 2563907772, i64 4023717930, i64 1907459465, i64 112637215, i64 2680153253, i64 3904427059, i64 2013776290, i64 251722036, i64 2517215374, i64 3775830040, i64 2137656763, i64 141376813, i64 2439277719, i64 3865271297, i64 1802195444, i64 476864866, i64 2238001368, i64 4066508878, i64 1812370925, i64 453092731, i64 2181625025, i64 4111451223, i64 1706088902, i64 314042704, i64 2344532202, i64 4240017532, i64 1658658271, i64 366619977, i64 2362670323, i64 4224994405, i64 1303535960, i64 984961486, i64 2747007092, i64 3569037538, i64 1256170817, i64 1037604311, i64 2765210733, i64 3554079995, i64 1131014506, i64 879679996, i64 2909243462, i64 3663771856, i64 1141124467, i64 855842277, i64 2852801631, i64 3708648649, i64 1342533948, i64 654459306, i64 3188396048, i64 3373015174, i64 1466479909, i64 544179635, i64 3110523913, i64 3462522015, i64 1591671054, i64 702138776, i64 2966460450, i64 3352799412, i64 1504918807, i64 783551873, i64 3082640443, i64 3233442989, i64 3988292384, i64 2596254646, i64 62317068, i64 1957810842, i64 3939845945, i64 2647816111, i64 81470997, i64 1943803523, i64 3814918930, i64 2489596804, i64 225274430, i64 2053790376, i64 3826175755, i64 2466906013, i64 167816743, i64 2097651377, i64 4027552580, i64 2265490386, i64 503444072, i64 1762050814, i64 4150417245, i64 2154129355, i64 426522225, i64 1852507879, i64 4275313526, i64 2312317920, i64 282753626, i64 1742555852, i64 4189708143, i64 2394877945, i64 397917763, i64 1622183637, i64 3604390888, i64 2714866558, i64 953729732, i64 1340076626, i64 3518719985, i64 2797360999, i64 1068828381, i64 1219638859, i64 3624741850, i64 2936675148, i64 906185462, i64 1090812512, i64 3747672003, i64 2825379669, i64 829329135, i64 1181335161, i64 3412177804, i64 3160834842, i64 628085408, i64 1382605366, i64 3423369109, i64 3138078467, i64 570562233, i64 1426400815, i64 3317316542, i64 2998733608, i64 733239954, i64 1555261956, i64 3268935591, i64 3050360625, i64 752459403, i64 1541320221, i64 2607071920, i64 3965973030, i64 1969922972, i64 40735498, i64 2617837225, i64 3943577151, i64 1913087877, i64 83908371, i64 2512341634, i64 3803740692, i64 2075208622, i64 213261112, i64 2463272603, i64 3855990285, i64 2094854071, i64 198958881, i64 2262029012, i64 4057260610, i64 1759359992, i64 534414190, i64 2176718541, i64 4139329115, i64 1873836001, i64 414664567, i64 2282248934, i64 4279200368, i64 1711684554, i64 285281116, i64 2405801727, i64 4167216745, i64 1634467795, i64 376229701, i64 2685067896, i64 3608007406, i64 1308918612, i64 956543938, i64 2808555105, i64 3495958263, i64 1231636301, i64 1047427035, i64 2932959818, i64 3654703836, i64 1088359270, i64 936918000, i64 2847714899, i64 3736837829, i64 1202900863, i64 817233897, i64 3183342108, i64 3401237130, i64 1404277552, i64 615818150, i64 3134207493, i64 3453421203, i64 1423857449, i64 601450431, i64 3009837614, i64 3294710456, i64 1567103746, i64 711928724, i64 3020668471, i64 3272380065, i64 1510334235, i64 755167117], align 16
@bytes_out = global i64 0, align 8
@window = global [65536 x i8] zeroinitializer, align 4096
@test = global i32 0, align 4
@.str.219 = private unnamed_addr constant [3 x i8] c" \09\00", align 1
@.str.1.222 = private unnamed_addr constant [13 x i8] c"\0A%s: %s: %s\0A\00", align 1
@.str.2.225 = private unnamed_addr constant [23 x i8] c"\0A%s: memory_exhausted\0A\00", align 1
@quiet = global i32 0, align 4
@.str.3.228 = private unnamed_addr constant [21 x i8] c"%s: %s: warning: %s\0A\00", align 1
@exit_code = global i32 0, align 4
@.str.4.197 = private unnamed_addr constant [6 x i8] c"\0A%s: \00", align 1
@.str.5.198 = private unnamed_addr constant [28 x i8] c"%s: unexpected end of file\0A\00", align 1
@ofname = global [1024 x i8] zeroinitializer, align 16
@.str.6.231 = private unnamed_addr constant [8 x i8] c"%5.1f%%\00", align 1
@.str.236 = private unnamed_addr constant [5 x i8] c"1.12\00", align 1
@Version = global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.236, i32 0, i32 0), align 8
@ifd = global i32 0, align 4
@ofd = global i32 0, align 4
@outcnt = global i32 0, align 4
@method = global i32 8, align 4
@.str.241 = private unnamed_addr constant [3 x i8] c"\1F\8B\00", align 1
@outbuf = global [264192 x i8] zeroinitializer, align 4096
@save_orig_name = global i32 0, align 4
@time_stamp = global %struct.timespec zeroinitializer, align 8
@.str.1.242 = private unnamed_addr constant [44 x i8] c"file timestamp out of range for gzip format\00", align 1
@level = global i32 6, align 4
@ifname = global [1024 x i8] zeroinitializer, align 16
@header_bytes = global i64 0, align 8
@ifile_size = global i64 0, align 8
@bytes_in = global i64 0, align 8
@__stderrp = external global %struct.__sFILE*, align 8
@.str.2.243 = private unnamed_addr constant [41 x i8] c"%s: %s: file size changed while zipping\0A\00", align 1
@program_name = global i8* null, align 8
@__func__.chdir_long = private unnamed_addr constant [11 x i8] c"chdir_long\00", align 1
@.str.248 = private unnamed_addr constant [13 x i8] c"chdir-long.c\00", align 1
@.str.1.249 = private unnamed_addr constant [8 x i8] c"0 < len\00", align 1
@.str.2.250 = private unnamed_addr constant [12 x i8] c"1024 <= len\00", align 1
@.str.3.251 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.4.252 = private unnamed_addr constant [12 x i8] c"*dir != '/'\00", align 1
@.str.5.253 = private unnamed_addr constant [15 x i8] c"dir <= dir_end\00", align 1
@.str.6.254 = private unnamed_addr constant [19 x i8] c"slash - dir < 1024\00", align 1
@__func__.cdb_free = private unnamed_addr constant [9 x i8] c"cdb_free\00", align 1
@.str.7.255 = private unnamed_addr constant [13 x i8] c"! close_fail\00", align 1
@rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec = internal global i32 0, align 4
@fresh_once = internal constant %struct._opaque_pthread_mutexattr_t { i64 816954554, [8 x i8] zeroinitializer }, align 8
@exit_failure = global i32 1, align 4
@.str.278 = private unnamed_addr constant [43 x i8] c"unable to record current working directory\00", align 1
@.str.1.279 = private unnamed_addr constant [46 x i8] c"failed to return to initial working directory\00", align 1
@openat_proc_name.proc_status = internal global i32 0, align 4
@.str.280 = private unnamed_addr constant [14 x i8] c"/proc/self/fd\00", align 1
@.str.1.281 = private unnamed_addr constant [23 x i8] c"/proc/self/fd/%d/../fd\00", align 1
@.str.2.282 = private unnamed_addr constant [18 x i8] c"/proc/self/fd/%d/\00", align 1
@.str.287 = private unnamed_addr constant [2 x i8] c".\00", align 1
@comparison_function_table = internal constant [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* null, i32 (i8*, i8*)* @direntry_cmp_name], align 16
@utimensat_works_really = internal global i32 0, align 4
@lutimensat_works_really = internal global i32 0, align 4

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @bi_init(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* @zfile, align 4
  store i16 0, i16* @bi_buf, align 2
  store i32 0, i32* @bi_valid, align 4
  %4 = load i32, i32* @zfile, align 4
  %5 = icmp ne i32 %4, -1
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  store i32 (i8*, i32)* @file_read, i32 (i8*, i32)** @read_buf, align 8
  br label %7

7:                                                ; preds = %6, %1
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @send_bits(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* @bi_valid, align 4
  %6 = load i32, i32* %4, align 4
  %7 = sub nsw i32 16, %6
  %8 = icmp sgt i32 %5, %7
  br i1 %8, label %9, label %78

9:                                                ; preds = %2
  %10 = load i32, i32* %3, align 4
  %11 = load i32, i32* @bi_valid, align 4
  %12 = shl i32 %10, %11
  %13 = load i16, i16* @bi_buf, align 2
  %14 = zext i16 %13 to i32
  %15 = or i32 %14, %12
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* @bi_buf, align 2
  %17 = load i32, i32* @outcnt, align 4
  %18 = icmp ult i32 %17, 262142
  br i1 %18, label %19, label %36

19:                                               ; preds = %9
  %20 = load i16, i16* @bi_buf, align 2
  %21 = zext i16 %20 to i32
  %22 = and i32 %21, 255
  %23 = trunc i32 %22 to i8
  %24 = load i32, i32* @outcnt, align 4
  %25 = add i32 %24, 1
  store i32 %25, i32* @outcnt, align 4
  %26 = zext i32 %24 to i64
  %27 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %26
  store i8 %23, i8* %27, align 1
  %28 = load i16, i16* @bi_buf, align 2
  %29 = zext i16 %28 to i32
  %30 = ashr i32 %29, 8
  %31 = trunc i32 %30 to i8
  %32 = load i32, i32* @outcnt, align 4
  %33 = add i32 %32, 1
  store i32 %33, i32* @outcnt, align 4
  %34 = zext i32 %32 to i64
  %35 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %34
  store i8 %31, i8* %35, align 1
  br label %61

36:                                               ; preds = %9
  %37 = load i16, i16* @bi_buf, align 2
  %38 = zext i16 %37 to i32
  %39 = and i32 %38, 255
  %40 = trunc i32 %39 to i8
  %41 = load i32, i32* @outcnt, align 4
  %42 = add i32 %41, 1
  store i32 %42, i32* @outcnt, align 4
  %43 = zext i32 %41 to i64
  %44 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %43
  store i8 %40, i8* %44, align 1
  %45 = load i32, i32* @outcnt, align 4
  %46 = icmp eq i32 %45, 262144
  br i1 %46, label %47, label %48

47:                                               ; preds = %36
  call void @flush_outbuf()
  br label %48

48:                                               ; preds = %47, %36
  %49 = load i16, i16* @bi_buf, align 2
  %50 = zext i16 %49 to i32
  %51 = ashr i32 %50, 8
  %52 = trunc i32 %51 to i8
  %53 = load i32, i32* @outcnt, align 4
  %54 = add i32 %53, 1
  store i32 %54, i32* @outcnt, align 4
  %55 = zext i32 %53 to i64
  %56 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %55
  store i8 %52, i8* %56, align 1
  %57 = load i32, i32* @outcnt, align 4
  %58 = icmp eq i32 %57, 262144
  br i1 %58, label %59, label %60

59:                                               ; preds = %48
  call void @flush_outbuf()
  br label %60

60:                                               ; preds = %59, %48
  br label %61

61:                                               ; preds = %60, %19
  %62 = load i32, i32* %3, align 4
  %63 = trunc i32 %62 to i16
  %64 = zext i16 %63 to i32
  %65 = load i32, i32* @bi_valid, align 4
  %66 = sext i32 %65 to i64
  %67 = sub i64 16, %66
  %68 = trunc i64 %67 to i32
  %69 = ashr i32 %64, %68
  %70 = trunc i32 %69 to i16
  store i16 %70, i16* @bi_buf, align 2
  %71 = load i32, i32* %4, align 4
  %72 = sext i32 %71 to i64
  %73 = sub i64 %72, 16
  %74 = load i32, i32* @bi_valid, align 4
  %75 = sext i32 %74 to i64
  %76 = add i64 %75, %73
  %77 = trunc i64 %76 to i32
  store i32 %77, i32* @bi_valid, align 4
  br label %89

78:                                               ; preds = %2
  %79 = load i32, i32* %3, align 4
  %80 = load i32, i32* @bi_valid, align 4
  %81 = shl i32 %79, %80
  %82 = load i16, i16* @bi_buf, align 2
  %83 = zext i16 %82 to i32
  %84 = or i32 %83, %81
  %85 = trunc i32 %84 to i16
  store i16 %85, i16* @bi_buf, align 2
  %86 = load i32, i32* %4, align 4
  %87 = load i32, i32* @bi_valid, align 4
  %88 = add nsw i32 %87, %86
  store i32 %88, i32* @bi_valid, align 4
  br label %89

89:                                               ; preds = %78, %61
  ret void
}

; Function Attrs: noinline nounwind optnone readnone ssp uwtable willreturn
define i32 @bi_reverse(i32 %0, i32 %1) #1 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 0, i32* %5, align 4
  br label %6

6:                                                ; preds = %15, %2
  %7 = load i32, i32* %3, align 4
  %8 = and i32 %7, 1
  %9 = load i32, i32* %5, align 4
  %10 = or i32 %9, %8
  store i32 %10, i32* %5, align 4
  %11 = load i32, i32* %3, align 4
  %12 = lshr i32 %11, 1
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %5, align 4
  %14 = shl i32 %13, 1
  store i32 %14, i32* %5, align 4
  br label %15

15:                                               ; preds = %6
  %16 = load i32, i32* %4, align 4
  %17 = add nsw i32 %16, -1
  store i32 %17, i32* %4, align 4
  %18 = icmp sgt i32 %17, 0
  br i1 %18, label %6, label %19, !llvm.loop !6

19:                                               ; preds = %15
  %20 = load i32, i32* %5, align 4
  %21 = lshr i32 %20, 1
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @bi_windup() #0 {
  %1 = load i32, i32* @bi_valid, align 4
  %2 = icmp sgt i32 %1, 8
  br i1 %2, label %3, label %49

3:                                                ; preds = %0
  %4 = load i32, i32* @outcnt, align 4
  %5 = icmp ult i32 %4, 262142
  br i1 %5, label %6, label %23

6:                                                ; preds = %3
  %7 = load i16, i16* @bi_buf, align 2
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 255
  %10 = trunc i32 %9 to i8
  %11 = load i32, i32* @outcnt, align 4
  %12 = add i32 %11, 1
  store i32 %12, i32* @outcnt, align 4
  %13 = zext i32 %11 to i64
  %14 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %13
  store i8 %10, i8* %14, align 1
  %15 = load i16, i16* @bi_buf, align 2
  %16 = zext i16 %15 to i32
  %17 = ashr i32 %16, 8
  %18 = trunc i32 %17 to i8
  %19 = load i32, i32* @outcnt, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* @outcnt, align 4
  %21 = zext i32 %19 to i64
  %22 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %21
  store i8 %18, i8* %22, align 1
  br label %48

23:                                               ; preds = %3
  %24 = load i16, i16* @bi_buf, align 2
  %25 = zext i16 %24 to i32
  %26 = and i32 %25, 255
  %27 = trunc i32 %26 to i8
  %28 = load i32, i32* @outcnt, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* @outcnt, align 4
  %30 = zext i32 %28 to i64
  %31 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %30
  store i8 %27, i8* %31, align 1
  %32 = load i32, i32* @outcnt, align 4
  %33 = icmp eq i32 %32, 262144
  br i1 %33, label %34, label %35

34:                                               ; preds = %23
  call void @flush_outbuf()
  br label %35

35:                                               ; preds = %34, %23
  %36 = load i16, i16* @bi_buf, align 2
  %37 = zext i16 %36 to i32
  %38 = ashr i32 %37, 8
  %39 = trunc i32 %38 to i8
  %40 = load i32, i32* @outcnt, align 4
  %41 = add i32 %40, 1
  store i32 %41, i32* @outcnt, align 4
  %42 = zext i32 %40 to i64
  %43 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %42
  store i8 %39, i8* %43, align 1
  %44 = load i32, i32* @outcnt, align 4
  %45 = icmp eq i32 %44, 262144
  br i1 %45, label %46, label %47

46:                                               ; preds = %35
  call void @flush_outbuf()
  br label %47

47:                                               ; preds = %46, %35
  br label %48

48:                                               ; preds = %47, %6
  br label %64

49:                                               ; preds = %0
  %50 = load i32, i32* @bi_valid, align 4
  %51 = icmp sgt i32 %50, 0
  br i1 %51, label %52, label %63

52:                                               ; preds = %49
  %53 = load i16, i16* @bi_buf, align 2
  %54 = trunc i16 %53 to i8
  %55 = load i32, i32* @outcnt, align 4
  %56 = add i32 %55, 1
  store i32 %56, i32* @outcnt, align 4
  %57 = zext i32 %55 to i64
  %58 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %57
  store i8 %54, i8* %58, align 1
  %59 = load i32, i32* @outcnt, align 4
  %60 = icmp eq i32 %59, 262144
  br i1 %60, label %61, label %62

61:                                               ; preds = %52
  call void @flush_outbuf()
  br label %62

62:                                               ; preds = %61, %52
  br label %63

63:                                               ; preds = %62, %49
  br label %64

64:                                               ; preds = %63, %48
  store i16 0, i16* @bi_buf, align 2
  store i32 0, i32* @bi_valid, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @copy_block(i8* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  call void @bi_windup()
  %7 = load i32, i32* %6, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %112

9:                                                ; preds = %3
  %10 = load i32, i32* @outcnt, align 4
  %11 = icmp ult i32 %10, 262142
  br i1 %11, label %12, label %31

12:                                               ; preds = %9
  %13 = load i32, i32* %5, align 4
  %14 = trunc i32 %13 to i16
  %15 = zext i16 %14 to i32
  %16 = and i32 %15, 255
  %17 = trunc i32 %16 to i8
  %18 = load i32, i32* @outcnt, align 4
  %19 = add i32 %18, 1
  store i32 %19, i32* @outcnt, align 4
  %20 = zext i32 %18 to i64
  %21 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %20
  store i8 %17, i8* %21, align 1
  %22 = load i32, i32* %5, align 4
  %23 = trunc i32 %22 to i16
  %24 = zext i16 %23 to i32
  %25 = ashr i32 %24, 8
  %26 = trunc i32 %25 to i8
  %27 = load i32, i32* @outcnt, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* @outcnt, align 4
  %29 = zext i32 %27 to i64
  %30 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %29
  store i8 %26, i8* %30, align 1
  br label %58

31:                                               ; preds = %9
  %32 = load i32, i32* %5, align 4
  %33 = trunc i32 %32 to i16
  %34 = zext i16 %33 to i32
  %35 = and i32 %34, 255
  %36 = trunc i32 %35 to i8
  %37 = load i32, i32* @outcnt, align 4
  %38 = add i32 %37, 1
  store i32 %38, i32* @outcnt, align 4
  %39 = zext i32 %37 to i64
  %40 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %39
  store i8 %36, i8* %40, align 1
  %41 = load i32, i32* @outcnt, align 4
  %42 = icmp eq i32 %41, 262144
  br i1 %42, label %43, label %44

43:                                               ; preds = %31
  call void @flush_outbuf()
  br label %44

44:                                               ; preds = %43, %31
  %45 = load i32, i32* %5, align 4
  %46 = trunc i32 %45 to i16
  %47 = zext i16 %46 to i32
  %48 = ashr i32 %47, 8
  %49 = trunc i32 %48 to i8
  %50 = load i32, i32* @outcnt, align 4
  %51 = add i32 %50, 1
  store i32 %51, i32* @outcnt, align 4
  %52 = zext i32 %50 to i64
  %53 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %52
  store i8 %49, i8* %53, align 1
  %54 = load i32, i32* @outcnt, align 4
  %55 = icmp eq i32 %54, 262144
  br i1 %55, label %56, label %57

56:                                               ; preds = %44
  call void @flush_outbuf()
  br label %57

57:                                               ; preds = %56, %44
  br label %58

58:                                               ; preds = %57, %12
  %59 = load i32, i32* @outcnt, align 4
  %60 = icmp ult i32 %59, 262142
  br i1 %60, label %61, label %82

61:                                               ; preds = %58
  %62 = load i32, i32* %5, align 4
  %63 = xor i32 %62, -1
  %64 = trunc i32 %63 to i16
  %65 = zext i16 %64 to i32
  %66 = and i32 %65, 255
  %67 = trunc i32 %66 to i8
  %68 = load i32, i32* @outcnt, align 4
  %69 = add i32 %68, 1
  store i32 %69, i32* @outcnt, align 4
  %70 = zext i32 %68 to i64
  %71 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %70
  store i8 %67, i8* %71, align 1
  %72 = load i32, i32* %5, align 4
  %73 = xor i32 %72, -1
  %74 = trunc i32 %73 to i16
  %75 = zext i16 %74 to i32
  %76 = ashr i32 %75, 8
  %77 = trunc i32 %76 to i8
  %78 = load i32, i32* @outcnt, align 4
  %79 = add i32 %78, 1
  store i32 %79, i32* @outcnt, align 4
  %80 = zext i32 %78 to i64
  %81 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %80
  store i8 %77, i8* %81, align 1
  br label %111

82:                                               ; preds = %58
  %83 = load i32, i32* %5, align 4
  %84 = xor i32 %83, -1
  %85 = trunc i32 %84 to i16
  %86 = zext i16 %85 to i32
  %87 = and i32 %86, 255
  %88 = trunc i32 %87 to i8
  %89 = load i32, i32* @outcnt, align 4
  %90 = add i32 %89, 1
  store i32 %90, i32* @outcnt, align 4
  %91 = zext i32 %89 to i64
  %92 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %91
  store i8 %88, i8* %92, align 1
  %93 = load i32, i32* @outcnt, align 4
  %94 = icmp eq i32 %93, 262144
  br i1 %94, label %95, label %96

95:                                               ; preds = %82
  call void @flush_outbuf()
  br label %96

96:                                               ; preds = %95, %82
  %97 = load i32, i32* %5, align 4
  %98 = xor i32 %97, -1
  %99 = trunc i32 %98 to i16
  %100 = zext i16 %99 to i32
  %101 = ashr i32 %100, 8
  %102 = trunc i32 %101 to i8
  %103 = load i32, i32* @outcnt, align 4
  %104 = add i32 %103, 1
  store i32 %104, i32* @outcnt, align 4
  %105 = zext i32 %103 to i64
  %106 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %105
  store i8 %102, i8* %106, align 1
  %107 = load i32, i32* @outcnt, align 4
  %108 = icmp eq i32 %107, 262144
  br i1 %108, label %109, label %110

109:                                              ; preds = %96
  call void @flush_outbuf()
  br label %110

110:                                              ; preds = %109, %96
  br label %111

111:                                              ; preds = %110, %61
  br label %112

112:                                              ; preds = %111, %3
  br label %113

113:                                              ; preds = %128, %112
  %114 = load i32, i32* %5, align 4
  %115 = add i32 %114, -1
  store i32 %115, i32* %5, align 4
  %116 = icmp ne i32 %114, 0
  br i1 %116, label %117, label %129

117:                                              ; preds = %113
  %118 = load i8*, i8** %4, align 8
  %119 = getelementptr inbounds i8, i8* %118, i32 1
  store i8* %119, i8** %4, align 8
  %120 = load i8, i8* %118, align 1
  %121 = load i32, i32* @outcnt, align 4
  %122 = add i32 %121, 1
  store i32 %122, i32* @outcnt, align 4
  %123 = zext i32 %121 to i64
  %124 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %123
  store i8 %120, i8* %124, align 1
  %125 = load i32, i32* @outcnt, align 4
  %126 = icmp eq i32 %125, 262144
  br i1 %126, label %127, label %128

127:                                              ; preds = %117
  call void @flush_outbuf()
  br label %128

128:                                              ; preds = %127, %117
  br label %113, !llvm.loop !8

129:                                              ; preds = %113
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @deflate(i32 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i32 2, i32* %8, align 4
  %9 = load i32, i32* %3, align 4
  call void @lm_init(i32 %9)
  %10 = load i32, i32* %3, align 4
  %11 = icmp sle i32 %10, 3
  br i1 %11, label %12, label %14

12:                                               ; preds = %1
  %13 = call i64 @deflate_fast()
  store i64 %13, i64* %2, align 8
  br label %318

14:                                               ; preds = %1
  br label %15

15:                                               ; preds = %288, %14
  %16 = load i32, i32* @lookahead, align 4
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %289

18:                                               ; preds = %15
  %19 = load i32, i32* @ins_h, align 4
  %20 = shl i32 %19, 5
  %21 = load i32, i32* @strstart, align 4
  %22 = add i32 %21, 3
  %23 = sub i32 %22, 1
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  %28 = xor i32 %20, %27
  %29 = and i32 %28, 32767
  store i32 %29, i32* @ins_h, align 4
  %30 = load i32, i32* @ins_h, align 4
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %31
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  store i32 %34, i32* %4, align 4
  %35 = trunc i32 %34 to i16
  %36 = load i32, i32* @strstart, align 4
  %37 = and i32 %36, 32767
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %38
  store i16 %35, i16* %39, align 2
  %40 = load i32, i32* @strstart, align 4
  %41 = trunc i32 %40 to i16
  %42 = load i32, i32* @ins_h, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %43
  store i16 %41, i16* %44, align 2
  %45 = load i32, i32* %8, align 4
  store i32 %45, i32* @prev_length, align 4
  %46 = load i32, i32* @match_start, align 4
  store i32 %46, i32* %5, align 4
  store i32 2, i32* %8, align 4
  %47 = load i32, i32* %4, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %84

49:                                               ; preds = %18
  %50 = load i32, i32* @prev_length, align 4
  %51 = load i32, i32* @max_lazy_match, align 4
  %52 = icmp ult i32 %50, %51
  br i1 %52, label %53, label %84

53:                                               ; preds = %49
  %54 = load i32, i32* @strstart, align 4
  %55 = load i32, i32* %4, align 4
  %56 = sub i32 %54, %55
  %57 = icmp ule i32 %56, 32506
  br i1 %57, label %58, label %84

58:                                               ; preds = %53
  %59 = load i32, i32* @strstart, align 4
  %60 = zext i32 %59 to i64
  %61 = load i64, i64* @window_size, align 8
  %62 = sub i64 %61, 262
  %63 = icmp ule i64 %60, %62
  br i1 %63, label %64, label %84

64:                                               ; preds = %58
  %65 = load i32, i32* %4, align 4
  %66 = call i32 @longest_match(i32 %65)
  store i32 %66, i32* %8, align 4
  %67 = load i32, i32* %8, align 4
  %68 = load i32, i32* @lookahead, align 4
  %69 = icmp ugt i32 %67, %68
  br i1 %69, label %70, label %72

70:                                               ; preds = %64
  %71 = load i32, i32* @lookahead, align 4
  store i32 %71, i32* %8, align 4
  br label %72

72:                                               ; preds = %70, %64
  %73 = load i32, i32* %8, align 4
  %74 = icmp eq i32 %73, 3
  br i1 %74, label %75, label %83

75:                                               ; preds = %72
  %76 = load i32, i32* @strstart, align 4
  %77 = load i32, i32* @match_start, align 4
  %78 = sub i32 %76, %77
  %79 = icmp ugt i32 %78, 4096
  br i1 %79, label %80, label %83

80:                                               ; preds = %75
  %81 = load i32, i32* %8, align 4
  %82 = add i32 %81, -1
  store i32 %82, i32* %8, align 4
  br label %83

83:                                               ; preds = %80, %75, %72
  br label %84

84:                                               ; preds = %83, %58, %53, %49, %18
  %85 = load i32, i32* @prev_length, align 4
  %86 = icmp uge i32 %85, 3
  br i1 %86, label %87, label %182

87:                                               ; preds = %84
  %88 = load i32, i32* %8, align 4
  %89 = load i32, i32* @prev_length, align 4
  %90 = icmp ule i32 %88, %89
  br i1 %90, label %91, label %182

91:                                               ; preds = %87
  %92 = load i32, i32* @strstart, align 4
  %93 = sub i32 %92, 1
  %94 = load i32, i32* %5, align 4
  %95 = sub i32 %93, %94
  %96 = load i32, i32* @prev_length, align 4
  %97 = sub i32 %96, 3
  %98 = call i32 @ct_tally(i32 %95, i32 %97)
  store i32 %98, i32* %6, align 4
  %99 = load i32, i32* @prev_length, align 4
  %100 = sub i32 %99, 1
  %101 = load i32, i32* @lookahead, align 4
  %102 = sub i32 %101, %100
  store i32 %102, i32* @lookahead, align 4
  %103 = load i32, i32* @prev_length, align 4
  %104 = sub i32 %103, 2
  store i32 %104, i32* @prev_length, align 4
  br label %105

105:                                              ; preds = %91
  %106 = load i32, i32* @rsync, align 4
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %108, label %112

108:                                              ; preds = %105
  %109 = load i32, i32* @strstart, align 4
  %110 = load i32, i32* @prev_length, align 4
  %111 = add i32 %110, 1
  call void @rsync_roll(i32 %109, i32 %111)
  br label %112

112:                                              ; preds = %108, %105
  br label %113

113:                                              ; preds = %112
  br label %114

114:                                              ; preds = %143, %113
  %115 = load i32, i32* @strstart, align 4
  %116 = add i32 %115, 1
  store i32 %116, i32* @strstart, align 4
  %117 = load i32, i32* @ins_h, align 4
  %118 = shl i32 %117, 5
  %119 = load i32, i32* @strstart, align 4
  %120 = add i32 %119, 3
  %121 = sub i32 %120, 1
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i32
  %126 = xor i32 %118, %125
  %127 = and i32 %126, 32767
  store i32 %127, i32* @ins_h, align 4
  %128 = load i32, i32* @ins_h, align 4
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %129
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  store i32 %132, i32* %4, align 4
  %133 = trunc i32 %132 to i16
  %134 = load i32, i32* @strstart, align 4
  %135 = and i32 %134, 32767
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %136
  store i16 %133, i16* %137, align 2
  %138 = load i32, i32* @strstart, align 4
  %139 = trunc i32 %138 to i16
  %140 = load i32, i32* @ins_h, align 4
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %141
  store i16 %139, i16* %142, align 2
  br label %143

143:                                              ; preds = %114
  %144 = load i32, i32* @prev_length, align 4
  %145 = add i32 %144, -1
  store i32 %145, i32* @prev_length, align 4
  %146 = icmp ne i32 %145, 0
  br i1 %146, label %114, label %147, !llvm.loop !9

147:                                              ; preds = %143
  store i32 0, i32* %7, align 4
  store i32 2, i32* %8, align 4
  %148 = load i32, i32* @strstart, align 4
  %149 = add i32 %148, 1
  store i32 %149, i32* @strstart, align 4
  %150 = load i32, i32* @rsync, align 4
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %152, label %158

152:                                              ; preds = %147
  %153 = load i32, i32* @strstart, align 4
  %154 = zext i32 %153 to i64
  %155 = load i64, i64* @rsync_chunk_end, align 8
  %156 = icmp ugt i64 %154, %155
  br i1 %156, label %157, label %158

157:                                              ; preds = %152
  store i64 4294967295, i64* @rsync_chunk_end, align 8
  store i32 2, i32* %6, align 4
  br label %158

158:                                              ; preds = %157, %152, %147
  %159 = load i32, i32* %6, align 4
  %160 = icmp ne i32 %159, 0
  br i1 %160, label %161, label %181

161:                                              ; preds = %158
  %162 = load i64, i64* @block_start, align 8
  %163 = icmp sge i64 %162, 0
  br i1 %163, label %164, label %169

164:                                              ; preds = %161
  %165 = load i64, i64* @block_start, align 8
  %166 = trunc i64 %165 to i32
  %167 = zext i32 %166 to i64
  %168 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %167
  br label %170

169:                                              ; preds = %161
  br label %170

170:                                              ; preds = %169, %164
  %171 = phi i8* [ %168, %164 ], [ null, %169 ]
  %172 = load i32, i32* @strstart, align 4
  %173 = zext i32 %172 to i64
  %174 = load i64, i64* @block_start, align 8
  %175 = sub nsw i64 %173, %174
  %176 = load i32, i32* %6, align 4
  %177 = sub nsw i32 %176, 1
  %178 = call i64 @flush_block(i8* %171, i64 %175, i32 %177, i32 0)
  %179 = load i32, i32* @strstart, align 4
  %180 = zext i32 %179 to i64
  store i64 %180, i64* @block_start, align 8
  br label %181

181:                                              ; preds = %170, %158
  br label %277

182:                                              ; preds = %87, %84
  %183 = load i32, i32* %7, align 4
  %184 = icmp ne i32 %183, 0
  br i1 %184, label %185, label %236

185:                                              ; preds = %182
  %186 = load i32, i32* @strstart, align 4
  %187 = sub i32 %186, 1
  %188 = zext i32 %187 to i64
  %189 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %188
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i32
  %192 = call i32 @ct_tally(i32 0, i32 %191)
  store i32 %192, i32* %6, align 4
  %193 = load i32, i32* @rsync, align 4
  %194 = icmp ne i32 %193, 0
  br i1 %194, label %195, label %201

195:                                              ; preds = %185
  %196 = load i32, i32* @strstart, align 4
  %197 = zext i32 %196 to i64
  %198 = load i64, i64* @rsync_chunk_end, align 8
  %199 = icmp ugt i64 %197, %198
  br i1 %199, label %200, label %201

200:                                              ; preds = %195
  store i64 4294967295, i64* @rsync_chunk_end, align 8
  store i32 2, i32* %6, align 4
  br label %201

201:                                              ; preds = %200, %195, %185
  %202 = load i32, i32* %6, align 4
  %203 = icmp ne i32 %202, 0
  br i1 %203, label %204, label %224

204:                                              ; preds = %201
  %205 = load i64, i64* @block_start, align 8
  %206 = icmp sge i64 %205, 0
  br i1 %206, label %207, label %212

207:                                              ; preds = %204
  %208 = load i64, i64* @block_start, align 8
  %209 = trunc i64 %208 to i32
  %210 = zext i32 %209 to i64
  %211 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %210
  br label %213

212:                                              ; preds = %204
  br label %213

213:                                              ; preds = %212, %207
  %214 = phi i8* [ %211, %207 ], [ null, %212 ]
  %215 = load i32, i32* @strstart, align 4
  %216 = zext i32 %215 to i64
  %217 = load i64, i64* @block_start, align 8
  %218 = sub nsw i64 %216, %217
  %219 = load i32, i32* %6, align 4
  %220 = sub nsw i32 %219, 1
  %221 = call i64 @flush_block(i8* %214, i64 %218, i32 %220, i32 0)
  %222 = load i32, i32* @strstart, align 4
  %223 = zext i32 %222 to i64
  store i64 %223, i64* @block_start, align 8
  br label %224

224:                                              ; preds = %213, %201
  br label %225

225:                                              ; preds = %224
  %226 = load i32, i32* @rsync, align 4
  %227 = icmp ne i32 %226, 0
  br i1 %227, label %228, label %230

228:                                              ; preds = %225
  %229 = load i32, i32* @strstart, align 4
  call void @rsync_roll(i32 %229, i32 1)
  br label %230

230:                                              ; preds = %228, %225
  br label %231

231:                                              ; preds = %230
  %232 = load i32, i32* @strstart, align 4
  %233 = add i32 %232, 1
  store i32 %233, i32* @strstart, align 4
  %234 = load i32, i32* @lookahead, align 4
  %235 = add i32 %234, -1
  store i32 %235, i32* @lookahead, align 4
  br label %276

236:                                              ; preds = %182
  %237 = load i32, i32* @rsync, align 4
  %238 = icmp ne i32 %237, 0
  br i1 %238, label %239, label %264

239:                                              ; preds = %236
  %240 = load i32, i32* @strstart, align 4
  %241 = zext i32 %240 to i64
  %242 = load i64, i64* @rsync_chunk_end, align 8
  %243 = icmp ugt i64 %241, %242
  br i1 %243, label %244, label %264

244:                                              ; preds = %239
  store i64 4294967295, i64* @rsync_chunk_end, align 8
  store i32 2, i32* %6, align 4
  %245 = load i64, i64* @block_start, align 8
  %246 = icmp sge i64 %245, 0
  br i1 %246, label %247, label %252

247:                                              ; preds = %244
  %248 = load i64, i64* @block_start, align 8
  %249 = trunc i64 %248 to i32
  %250 = zext i32 %249 to i64
  %251 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %250
  br label %253

252:                                              ; preds = %244
  br label %253

253:                                              ; preds = %252, %247
  %254 = phi i8* [ %251, %247 ], [ null, %252 ]
  %255 = load i32, i32* @strstart, align 4
  %256 = zext i32 %255 to i64
  %257 = load i64, i64* @block_start, align 8
  %258 = sub nsw i64 %256, %257
  %259 = load i32, i32* %6, align 4
  %260 = sub nsw i32 %259, 1
  %261 = call i64 @flush_block(i8* %254, i64 %258, i32 %260, i32 0)
  %262 = load i32, i32* @strstart, align 4
  %263 = zext i32 %262 to i64
  store i64 %263, i64* @block_start, align 8
  br label %264

264:                                              ; preds = %253, %239, %236
  store i32 1, i32* %7, align 4
  br label %265

265:                                              ; preds = %264
  %266 = load i32, i32* @rsync, align 4
  %267 = icmp ne i32 %266, 0
  br i1 %267, label %268, label %270

268:                                              ; preds = %265
  %269 = load i32, i32* @strstart, align 4
  call void @rsync_roll(i32 %269, i32 1)
  br label %270

270:                                              ; preds = %268, %265
  br label %271

271:                                              ; preds = %270
  %272 = load i32, i32* @strstart, align 4
  %273 = add i32 %272, 1
  store i32 %273, i32* @strstart, align 4
  %274 = load i32, i32* @lookahead, align 4
  %275 = add i32 %274, -1
  store i32 %275, i32* @lookahead, align 4
  br label %276

276:                                              ; preds = %271, %231
  br label %277

277:                                              ; preds = %276, %181
  br label %278

278:                                              ; preds = %287, %277
  %279 = load i32, i32* @lookahead, align 4
  %280 = icmp ult i32 %279, 262
  br i1 %280, label %281, label %285

281:                                              ; preds = %278
  %282 = load i32, i32* @eofile, align 4
  %283 = icmp ne i32 %282, 0
  %284 = xor i1 %283, true
  br label %285

285:                                              ; preds = %281, %278
  %286 = phi i1 [ false, %278 ], [ %284, %281 ]
  br i1 %286, label %287, label %288

287:                                              ; preds = %285
  call void @fill_window()
  br label %278, !llvm.loop !10

288:                                              ; preds = %285
  br label %15, !llvm.loop !11

289:                                              ; preds = %15
  %290 = load i32, i32* %7, align 4
  %291 = icmp ne i32 %290, 0
  br i1 %291, label %292, label %300

292:                                              ; preds = %289
  %293 = load i32, i32* @strstart, align 4
  %294 = sub i32 %293, 1
  %295 = zext i32 %294 to i64
  %296 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %295
  %297 = load i8, i8* %296, align 1
  %298 = zext i8 %297 to i32
  %299 = call i32 @ct_tally(i32 0, i32 %298)
  br label %300

300:                                              ; preds = %292, %289
  %301 = load i64, i64* @block_start, align 8
  %302 = icmp sge i64 %301, 0
  br i1 %302, label %303, label %308

303:                                              ; preds = %300
  %304 = load i64, i64* @block_start, align 8
  %305 = trunc i64 %304 to i32
  %306 = zext i32 %305 to i64
  %307 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %306
  br label %309

308:                                              ; preds = %300
  br label %309

309:                                              ; preds = %308, %303
  %310 = phi i8* [ %307, %303 ], [ null, %308 ]
  %311 = load i32, i32* @strstart, align 4
  %312 = zext i32 %311 to i64
  %313 = load i64, i64* @block_start, align 8
  %314 = sub nsw i64 %312, %313
  %315 = load i32, i32* %6, align 4
  %316 = sub nsw i32 %315, 1
  %317 = call i64 @flush_block(i8* %310, i64 %314, i32 %316, i32 1)
  store i64 %317, i64* %2, align 8
  br label %318

318:                                              ; preds = %309, %12
  %319 = load i64, i64* %2, align 8
  ret i64 %319
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @lm_init(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i32, i32* %2, align 4
  %5 = icmp slt i32 %4, 1
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %2, align 4
  %8 = icmp sgt i32 %7, 9
  br i1 %8, label %9, label %10

9:                                                ; preds = %6, %1
  call void @gzip_error(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0)) #23
  unreachable

10:                                               ; preds = %6
  %11 = call i64 @llvm.objectsize.i64.p0i8(i8* bitcast (i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768) to i8*), i1 false, i1 true, i1 false)
  %12 = call i8* @__memset_chk(i8* bitcast (i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768) to i8*), i32 0, i64 65536, i64 %11) #24
  store i64 4294967295, i64* @rsync_chunk_end, align 8
  store i64 0, i64* @rsync_sum, align 8
  %13 = load i32, i32* %2, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [10 x %struct.config], [10 x %struct.config]* @configuration_table, i64 0, i64 %14
  %16 = getelementptr inbounds %struct.config, %struct.config* %15, i32 0, i32 1
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  store i32 %18, i32* @max_lazy_match, align 4
  %19 = load i32, i32* %2, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [10 x %struct.config], [10 x %struct.config]* @configuration_table, i64 0, i64 %20
  %22 = getelementptr inbounds %struct.config, %struct.config* %21, i32 0, i32 0
  %23 = load i16, i16* %22, align 8
  %24 = zext i16 %23 to i32
  store i32 %24, i32* @good_match, align 4
  %25 = load i32, i32* %2, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [10 x %struct.config], [10 x %struct.config]* @configuration_table, i64 0, i64 %26
  %28 = getelementptr inbounds %struct.config, %struct.config* %27, i32 0, i32 2
  %29 = load i16, i16* %28, align 4
  %30 = zext i16 %29 to i32
  store i32 %30, i32* @nice_match, align 4
  %31 = load i32, i32* %2, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [10 x %struct.config], [10 x %struct.config]* @configuration_table, i64 0, i64 %32
  %34 = getelementptr inbounds %struct.config, %struct.config* %33, i32 0, i32 3
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  store i32 %36, i32* @max_chain_length, align 4
  store i32 0, i32* @strstart, align 4
  store i64 0, i64* @block_start, align 8
  %37 = load i32 (i8*, i32)*, i32 (i8*, i32)** @read_buf, align 8
  %38 = call i32 %37(i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i32 65536)
  store i32 %38, i32* @lookahead, align 4
  %39 = load i32, i32* @lookahead, align 4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %10
  %42 = load i32, i32* @lookahead, align 4
  %43 = icmp eq i32 %42, -1
  br i1 %43, label %44, label %45

44:                                               ; preds = %41, %10
  store i32 1, i32* @eofile, align 4
  store i32 0, i32* @lookahead, align 4
  br label %73

45:                                               ; preds = %41
  store i32 0, i32* @eofile, align 4
  br label %46

46:                                               ; preds = %55, %45
  %47 = load i32, i32* @lookahead, align 4
  %48 = icmp ult i32 %47, 262
  br i1 %48, label %49, label %53

49:                                               ; preds = %46
  %50 = load i32, i32* @eofile, align 4
  %51 = icmp ne i32 %50, 0
  %52 = xor i1 %51, true
  br label %53

53:                                               ; preds = %49, %46
  %54 = phi i1 [ false, %46 ], [ %52, %49 ]
  br i1 %54, label %55, label %56

55:                                               ; preds = %53
  call void @fill_window()
  br label %46, !llvm.loop !12

56:                                               ; preds = %53
  store i32 0, i32* @ins_h, align 4
  store i32 0, i32* %3, align 4
  br label %57

57:                                               ; preds = %70, %56
  %58 = load i32, i32* %3, align 4
  %59 = icmp ult i32 %58, 2
  br i1 %59, label %60, label %73

60:                                               ; preds = %57
  %61 = load i32, i32* @ins_h, align 4
  %62 = shl i32 %61, 5
  %63 = load i32, i32* %3, align 4
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = xor i32 %62, %67
  %69 = and i32 %68, 32767
  store i32 %69, i32* @ins_h, align 4
  br label %70

70:                                               ; preds = %60
  %71 = load i32, i32* %3, align 4
  %72 = add i32 %71, 1
  store i32 %72, i32* %3, align 4
  br label %57, !llvm.loop !13

73:                                               ; preds = %57, %44
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i64 @deflate_fast() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 2, i32* @prev_length, align 4
  br label %4

4:                                                ; preds = %200, %0
  %5 = load i32, i32* @lookahead, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %201

7:                                                ; preds = %4
  %8 = load i32, i32* @ins_h, align 4
  %9 = shl i32 %8, 5
  %10 = load i32, i32* @strstart, align 4
  %11 = add i32 %10, 3
  %12 = sub i32 %11, 1
  %13 = zext i32 %12 to i64
  %14 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = xor i32 %9, %16
  %18 = and i32 %17, 32767
  store i32 %18, i32* @ins_h, align 4
  %19 = load i32, i32* @ins_h, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  store i32 %23, i32* %1, align 4
  %24 = trunc i32 %23 to i16
  %25 = load i32, i32* @strstart, align 4
  %26 = and i32 %25, 32767
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %27
  store i16 %24, i16* %28, align 2
  %29 = load i32, i32* @strstart, align 4
  %30 = trunc i32 %29 to i16
  %31 = load i32, i32* @ins_h, align 4
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %32
  store i16 %30, i16* %33, align 2
  %34 = load i32, i32* %1, align 4
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %56

36:                                               ; preds = %7
  %37 = load i32, i32* @strstart, align 4
  %38 = load i32, i32* %1, align 4
  %39 = sub i32 %37, %38
  %40 = icmp ule i32 %39, 32506
  br i1 %40, label %41, label %56

41:                                               ; preds = %36
  %42 = load i32, i32* @strstart, align 4
  %43 = zext i32 %42 to i64
  %44 = load i64, i64* @window_size, align 8
  %45 = sub i64 %44, 262
  %46 = icmp ule i64 %43, %45
  br i1 %46, label %47, label %56

47:                                               ; preds = %41
  %48 = load i32, i32* %1, align 4
  %49 = call i32 @longest_match(i32 %48)
  store i32 %49, i32* %3, align 4
  %50 = load i32, i32* %3, align 4
  %51 = load i32, i32* @lookahead, align 4
  %52 = icmp ugt i32 %50, %51
  br i1 %52, label %53, label %55

53:                                               ; preds = %47
  %54 = load i32, i32* @lookahead, align 4
  store i32 %54, i32* %3, align 4
  br label %55

55:                                               ; preds = %53, %47
  br label %56

56:                                               ; preds = %55, %41, %36, %7
  %57 = load i32, i32* %3, align 4
  %58 = icmp uge i32 %57, 3
  br i1 %58, label %59, label %139

59:                                               ; preds = %56
  %60 = load i32, i32* @strstart, align 4
  %61 = load i32, i32* @match_start, align 4
  %62 = sub i32 %60, %61
  %63 = load i32, i32* %3, align 4
  %64 = sub i32 %63, 3
  %65 = call i32 @ct_tally(i32 %62, i32 %64)
  store i32 %65, i32* %2, align 4
  %66 = load i32, i32* %3, align 4
  %67 = load i32, i32* @lookahead, align 4
  %68 = sub i32 %67, %66
  store i32 %68, i32* @lookahead, align 4
  br label %69

69:                                               ; preds = %59
  %70 = load i32, i32* @rsync, align 4
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %69
  %73 = load i32, i32* @strstart, align 4
  %74 = load i32, i32* %3, align 4
  call void @rsync_roll(i32 %73, i32 %74)
  br label %75

75:                                               ; preds = %72, %69
  br label %76

76:                                               ; preds = %75
  %77 = load i32, i32* %3, align 4
  %78 = load i32, i32* @max_lazy_match, align 4
  %79 = icmp ule i32 %77, %78
  br i1 %79, label %80, label %119

80:                                               ; preds = %76
  %81 = load i32, i32* %3, align 4
  %82 = add i32 %81, -1
  store i32 %82, i32* %3, align 4
  br label %83

83:                                               ; preds = %112, %80
  %84 = load i32, i32* @strstart, align 4
  %85 = add i32 %84, 1
  store i32 %85, i32* @strstart, align 4
  %86 = load i32, i32* @ins_h, align 4
  %87 = shl i32 %86, 5
  %88 = load i32, i32* @strstart, align 4
  %89 = add i32 %88, 3
  %90 = sub i32 %89, 1
  %91 = zext i32 %90 to i64
  %92 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = xor i32 %87, %94
  %96 = and i32 %95, 32767
  store i32 %96, i32* @ins_h, align 4
  %97 = load i32, i32* @ins_h, align 4
  %98 = zext i32 %97 to i64
  %99 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %98
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  store i32 %101, i32* %1, align 4
  %102 = trunc i32 %101 to i16
  %103 = load i32, i32* @strstart, align 4
  %104 = and i32 %103, 32767
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %105
  store i16 %102, i16* %106, align 2
  %107 = load i32, i32* @strstart, align 4
  %108 = trunc i32 %107 to i16
  %109 = load i32, i32* @ins_h, align 4
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %110
  store i16 %108, i16* %111, align 2
  br label %112

112:                                              ; preds = %83
  %113 = load i32, i32* %3, align 4
  %114 = add i32 %113, -1
  store i32 %114, i32* %3, align 4
  %115 = icmp ne i32 %114, 0
  br i1 %115, label %83, label %116, !llvm.loop !14

116:                                              ; preds = %112
  %117 = load i32, i32* @strstart, align 4
  %118 = add i32 %117, 1
  store i32 %118, i32* @strstart, align 4
  br label %138

119:                                              ; preds = %76
  %120 = load i32, i32* %3, align 4
  %121 = load i32, i32* @strstart, align 4
  %122 = add i32 %121, %120
  store i32 %122, i32* @strstart, align 4
  store i32 0, i32* %3, align 4
  %123 = load i32, i32* @strstart, align 4
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  store i32 %127, i32* @ins_h, align 4
  %128 = load i32, i32* @ins_h, align 4
  %129 = shl i32 %128, 5
  %130 = load i32, i32* @strstart, align 4
  %131 = add i32 %130, 1
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %132
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i32
  %136 = xor i32 %129, %135
  %137 = and i32 %136, 32767
  store i32 %137, i32* @ins_h, align 4
  br label %138

138:                                              ; preds = %119, %116
  br label %157

139:                                              ; preds = %56
  %140 = load i32, i32* @strstart, align 4
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %141
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = call i32 @ct_tally(i32 0, i32 %144)
  store i32 %145, i32* %2, align 4
  br label %146

146:                                              ; preds = %139
  %147 = load i32, i32* @rsync, align 4
  %148 = icmp ne i32 %147, 0
  br i1 %148, label %149, label %151

149:                                              ; preds = %146
  %150 = load i32, i32* @strstart, align 4
  call void @rsync_roll(i32 %150, i32 1)
  br label %151

151:                                              ; preds = %149, %146
  br label %152

152:                                              ; preds = %151
  %153 = load i32, i32* @lookahead, align 4
  %154 = add i32 %153, -1
  store i32 %154, i32* @lookahead, align 4
  %155 = load i32, i32* @strstart, align 4
  %156 = add i32 %155, 1
  store i32 %156, i32* @strstart, align 4
  br label %157

157:                                              ; preds = %152, %138
  %158 = load i32, i32* @rsync, align 4
  %159 = icmp ne i32 %158, 0
  br i1 %159, label %160, label %166

160:                                              ; preds = %157
  %161 = load i32, i32* @strstart, align 4
  %162 = zext i32 %161 to i64
  %163 = load i64, i64* @rsync_chunk_end, align 8
  %164 = icmp ugt i64 %162, %163
  br i1 %164, label %165, label %166

165:                                              ; preds = %160
  store i64 4294967295, i64* @rsync_chunk_end, align 8
  store i32 2, i32* %2, align 4
  br label %166

166:                                              ; preds = %165, %160, %157
  %167 = load i32, i32* %2, align 4
  %168 = icmp ne i32 %167, 0
  br i1 %168, label %169, label %189

169:                                              ; preds = %166
  %170 = load i64, i64* @block_start, align 8
  %171 = icmp sge i64 %170, 0
  br i1 %171, label %172, label %177

172:                                              ; preds = %169
  %173 = load i64, i64* @block_start, align 8
  %174 = trunc i64 %173 to i32
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %175
  br label %178

177:                                              ; preds = %169
  br label %178

178:                                              ; preds = %177, %172
  %179 = phi i8* [ %176, %172 ], [ null, %177 ]
  %180 = load i32, i32* @strstart, align 4
  %181 = zext i32 %180 to i64
  %182 = load i64, i64* @block_start, align 8
  %183 = sub nsw i64 %181, %182
  %184 = load i32, i32* %2, align 4
  %185 = sub nsw i32 %184, 1
  %186 = call i64 @flush_block(i8* %179, i64 %183, i32 %185, i32 0)
  %187 = load i32, i32* @strstart, align 4
  %188 = zext i32 %187 to i64
  store i64 %188, i64* @block_start, align 8
  br label %189

189:                                              ; preds = %178, %166
  br label %190

190:                                              ; preds = %199, %189
  %191 = load i32, i32* @lookahead, align 4
  %192 = icmp ult i32 %191, 262
  br i1 %192, label %193, label %197

193:                                              ; preds = %190
  %194 = load i32, i32* @eofile, align 4
  %195 = icmp ne i32 %194, 0
  %196 = xor i1 %195, true
  br label %197

197:                                              ; preds = %193, %190
  %198 = phi i1 [ false, %190 ], [ %196, %193 ]
  br i1 %198, label %199, label %200

199:                                              ; preds = %197
  call void @fill_window()
  br label %190, !llvm.loop !15

200:                                              ; preds = %197
  br label %4, !llvm.loop !16

201:                                              ; preds = %4
  %202 = load i64, i64* @block_start, align 8
  %203 = icmp sge i64 %202, 0
  br i1 %203, label %204, label %209

204:                                              ; preds = %201
  %205 = load i64, i64* @block_start, align 8
  %206 = trunc i64 %205 to i32
  %207 = zext i32 %206 to i64
  %208 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %207
  br label %210

209:                                              ; preds = %201
  br label %210

210:                                              ; preds = %209, %204
  %211 = phi i8* [ %208, %204 ], [ null, %209 ]
  %212 = load i32, i32* @strstart, align 4
  %213 = zext i32 %212 to i64
  %214 = load i64, i64* @block_start, align 8
  %215 = sub nsw i64 %213, %214
  %216 = load i32, i32* %2, align 4
  %217 = sub nsw i32 %216, 1
  %218 = call i64 @flush_block(i8* %211, i64 %215, i32 %217, i32 1)
  ret i64 %218
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @longest_match(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  store i32 %0, i32* %2, align 4
  %12 = load i32, i32* @max_chain_length, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* @strstart, align 4
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %14
  store i8* %15, i8** %4, align 8
  %16 = load i32, i32* @prev_length, align 4
  store i32 %16, i32* %7, align 4
  %17 = load i32, i32* @strstart, align 4
  %18 = icmp ugt i32 %17, 32506
  br i1 %18, label %19, label %22

19:                                               ; preds = %1
  %20 = load i32, i32* @strstart, align 4
  %21 = sub i32 %20, 32506
  br label %23

22:                                               ; preds = %1
  br label %23

23:                                               ; preds = %22, %19
  %24 = phi i32 [ %21, %19 ], [ 0, %22 ]
  store i32 %24, i32* %8, align 4
  %25 = load i32, i32* @strstart, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %26
  %28 = getelementptr inbounds i8, i8* %27, i64 258
  store i8* %28, i8** %9, align 8
  %29 = load i8*, i8** %4, align 8
  %30 = load i32, i32* %7, align 4
  %31 = sub nsw i32 %30, 1
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %29, i64 %32
  %34 = load i8, i8* %33, align 1
  store i8 %34, i8* %10, align 1
  %35 = load i8*, i8** %4, align 8
  %36 = load i32, i32* %7, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %35, i64 %37
  %39 = load i8, i8* %38, align 1
  store i8 %39, i8* %11, align 1
  %40 = load i32, i32* @prev_length, align 4
  %41 = load i32, i32* @good_match, align 4
  %42 = icmp uge i32 %40, %41
  br i1 %42, label %43, label %46

43:                                               ; preds = %23
  %44 = load i32, i32* %3, align 4
  %45 = lshr i32 %44, 2
  store i32 %45, i32* %3, align 4
  br label %46

46:                                               ; preds = %43, %23
  br label %47

47:                                               ; preds = %228, %46
  %48 = load i32, i32* %2, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %49
  store i8* %50, i8** %5, align 8
  %51 = load i8*, i8** %5, align 8
  %52 = load i32, i32* %7, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %51, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = load i8, i8* %11, align 1
  %58 = zext i8 %57 to i32
  %59 = icmp ne i32 %56, %58
  br i1 %59, label %89, label %60

60:                                               ; preds = %47
  %61 = load i8*, i8** %5, align 8
  %62 = load i32, i32* %7, align 4
  %63 = sub nsw i32 %62, 1
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %61, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = load i8, i8* %10, align 1
  %69 = zext i8 %68 to i32
  %70 = icmp ne i32 %67, %69
  br i1 %70, label %89, label %71

71:                                               ; preds = %60
  %72 = load i8*, i8** %5, align 8
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = load i8*, i8** %4, align 8
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = icmp ne i32 %74, %77
  br i1 %78, label %89, label %79

79:                                               ; preds = %71
  %80 = load i8*, i8** %5, align 8
  %81 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %81, i8** %5, align 8
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = load i8*, i8** %4, align 8
  %85 = getelementptr inbounds i8, i8* %84, i64 1
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = icmp ne i32 %83, %87
  br i1 %88, label %89, label %90

89:                                               ; preds = %79, %71, %60, %47
  br label %215

90:                                               ; preds = %79
  %91 = load i8*, i8** %4, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 2
  store i8* %92, i8** %4, align 8
  %93 = load i8*, i8** %5, align 8
  %94 = getelementptr inbounds i8, i8* %93, i32 1
  store i8* %94, i8** %5, align 8
  br label %95

95:                                               ; preds = %180, %90
  br label %96

96:                                               ; preds = %95
  %97 = load i8*, i8** %4, align 8
  %98 = getelementptr inbounds i8, i8* %97, i32 1
  store i8* %98, i8** %4, align 8
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = load i8*, i8** %5, align 8
  %102 = getelementptr inbounds i8, i8* %101, i32 1
  store i8* %102, i8** %5, align 8
  %103 = load i8, i8* %102, align 1
  %104 = zext i8 %103 to i32
  %105 = icmp eq i32 %100, %104
  br i1 %105, label %106, label %180

106:                                              ; preds = %96
  %107 = load i8*, i8** %4, align 8
  %108 = getelementptr inbounds i8, i8* %107, i32 1
  store i8* %108, i8** %4, align 8
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = load i8*, i8** %5, align 8
  %112 = getelementptr inbounds i8, i8* %111, i32 1
  store i8* %112, i8** %5, align 8
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = icmp eq i32 %110, %114
  br i1 %115, label %116, label %180

116:                                              ; preds = %106
  %117 = load i8*, i8** %4, align 8
  %118 = getelementptr inbounds i8, i8* %117, i32 1
  store i8* %118, i8** %4, align 8
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i32
  %121 = load i8*, i8** %5, align 8
  %122 = getelementptr inbounds i8, i8* %121, i32 1
  store i8* %122, i8** %5, align 8
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = icmp eq i32 %120, %124
  br i1 %125, label %126, label %180

126:                                              ; preds = %116
  %127 = load i8*, i8** %4, align 8
  %128 = getelementptr inbounds i8, i8* %127, i32 1
  store i8* %128, i8** %4, align 8
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = load i8*, i8** %5, align 8
  %132 = getelementptr inbounds i8, i8* %131, i32 1
  store i8* %132, i8** %5, align 8
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = icmp eq i32 %130, %134
  br i1 %135, label %136, label %180

136:                                              ; preds = %126
  %137 = load i8*, i8** %4, align 8
  %138 = getelementptr inbounds i8, i8* %137, i32 1
  store i8* %138, i8** %4, align 8
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = load i8*, i8** %5, align 8
  %142 = getelementptr inbounds i8, i8* %141, i32 1
  store i8* %142, i8** %5, align 8
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = icmp eq i32 %140, %144
  br i1 %145, label %146, label %180

146:                                              ; preds = %136
  %147 = load i8*, i8** %4, align 8
  %148 = getelementptr inbounds i8, i8* %147, i32 1
  store i8* %148, i8** %4, align 8
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = load i8*, i8** %5, align 8
  %152 = getelementptr inbounds i8, i8* %151, i32 1
  store i8* %152, i8** %5, align 8
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = icmp eq i32 %150, %154
  br i1 %155, label %156, label %180

156:                                              ; preds = %146
  %157 = load i8*, i8** %4, align 8
  %158 = getelementptr inbounds i8, i8* %157, i32 1
  store i8* %158, i8** %4, align 8
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = load i8*, i8** %5, align 8
  %162 = getelementptr inbounds i8, i8* %161, i32 1
  store i8* %162, i8** %5, align 8
  %163 = load i8, i8* %162, align 1
  %164 = zext i8 %163 to i32
  %165 = icmp eq i32 %160, %164
  br i1 %165, label %166, label %180

166:                                              ; preds = %156
  %167 = load i8*, i8** %4, align 8
  %168 = getelementptr inbounds i8, i8* %167, i32 1
  store i8* %168, i8** %4, align 8
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i32
  %171 = load i8*, i8** %5, align 8
  %172 = getelementptr inbounds i8, i8* %171, i32 1
  store i8* %172, i8** %5, align 8
  %173 = load i8, i8* %172, align 1
  %174 = zext i8 %173 to i32
  %175 = icmp eq i32 %170, %174
  br i1 %175, label %176, label %180

176:                                              ; preds = %166
  %177 = load i8*, i8** %4, align 8
  %178 = load i8*, i8** %9, align 8
  %179 = icmp ult i8* %177, %178
  br label %180

180:                                              ; preds = %176, %166, %156, %146, %136, %126, %116, %106, %96
  %181 = phi i1 [ false, %166 ], [ false, %156 ], [ false, %146 ], [ false, %136 ], [ false, %126 ], [ false, %116 ], [ false, %106 ], [ false, %96 ], [ %179, %176 ]
  br i1 %181, label %95, label %182, !llvm.loop !17

182:                                              ; preds = %180
  %183 = load i8*, i8** %9, align 8
  %184 = load i8*, i8** %4, align 8
  %185 = ptrtoint i8* %183 to i64
  %186 = ptrtoint i8* %184 to i64
  %187 = sub i64 %185, %186
  %188 = trunc i64 %187 to i32
  %189 = sub nsw i32 258, %188
  store i32 %189, i32* %6, align 4
  %190 = load i8*, i8** %9, align 8
  %191 = getelementptr inbounds i8, i8* %190, i64 -258
  store i8* %191, i8** %4, align 8
  %192 = load i32, i32* %6, align 4
  %193 = load i32, i32* %7, align 4
  %194 = icmp sgt i32 %192, %193
  br i1 %194, label %195, label %214

195:                                              ; preds = %182
  %196 = load i32, i32* %2, align 4
  store i32 %196, i32* @match_start, align 4
  %197 = load i32, i32* %6, align 4
  store i32 %197, i32* %7, align 4
  %198 = load i32, i32* %6, align 4
  %199 = load i32, i32* @nice_match, align 4
  %200 = icmp sge i32 %198, %199
  br i1 %200, label %201, label %202

201:                                              ; preds = %195
  br label %230

202:                                              ; preds = %195
  %203 = load i8*, i8** %4, align 8
  %204 = load i32, i32* %7, align 4
  %205 = sub nsw i32 %204, 1
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i8, i8* %203, i64 %206
  %208 = load i8, i8* %207, align 1
  store i8 %208, i8* %10, align 1
  %209 = load i8*, i8** %4, align 8
  %210 = load i32, i32* %7, align 4
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds i8, i8* %209, i64 %211
  %213 = load i8, i8* %212, align 1
  store i8 %213, i8* %11, align 1
  br label %214

214:                                              ; preds = %202, %182
  br label %215

215:                                              ; preds = %214, %89
  %216 = load i32, i32* %2, align 4
  %217 = and i32 %216, 32767
  %218 = zext i32 %217 to i64
  %219 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %218
  %220 = load i16, i16* %219, align 2
  %221 = zext i16 %220 to i32
  store i32 %221, i32* %2, align 4
  %222 = load i32, i32* %8, align 4
  %223 = icmp ugt i32 %221, %222
  br i1 %223, label %224, label %228

224:                                              ; preds = %215
  %225 = load i32, i32* %3, align 4
  %226 = add i32 %225, -1
  store i32 %226, i32* %3, align 4
  %227 = icmp ne i32 %226, 0
  br label %228

228:                                              ; preds = %224, %215
  %229 = phi i1 [ false, %215 ], [ %227, %224 ]
  br i1 %229, label %47, label %230, !llvm.loop !18

230:                                              ; preds = %228, %201
  %231 = load i32, i32* %7, align 4
  ret i32 %231
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @rsync_roll(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %6 = load i32, i32* %3, align 4
  %7 = icmp ult i32 %6, 4096
  br i1 %7, label %8, label %36

8:                                                ; preds = %2
  %9 = load i32, i32* %3, align 4
  store i32 %9, i32* %5, align 4
  br label %10

10:                                               ; preds = %28, %8
  %11 = load i32, i32* %5, align 4
  %12 = icmp ult i32 %11, 4096
  br i1 %12, label %13, label %31

13:                                               ; preds = %10
  %14 = load i32, i32* %5, align 4
  %15 = load i32, i32* %3, align 4
  %16 = load i32, i32* %4, align 4
  %17 = add i32 %15, %16
  %18 = icmp eq i32 %14, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %13
  br label %73

20:                                               ; preds = %13
  %21 = load i32, i32* %5, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = load i64, i64* @rsync_sum, align 8
  %27 = add i64 %26, %25
  store i64 %27, i64* @rsync_sum, align 8
  br label %28

28:                                               ; preds = %20
  %29 = load i32, i32* %5, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %5, align 4
  br label %10, !llvm.loop !19

31:                                               ; preds = %10
  %32 = load i32, i32* %3, align 4
  %33 = sub i32 4096, %32
  %34 = load i32, i32* %4, align 4
  %35 = sub i32 %34, %33
  store i32 %35, i32* %4, align 4
  store i32 4096, i32* %3, align 4
  br label %36

36:                                               ; preds = %31, %2
  %37 = load i32, i32* %3, align 4
  store i32 %37, i32* %5, align 4
  br label %38

38:                                               ; preds = %70, %36
  %39 = load i32, i32* %5, align 4
  %40 = load i32, i32* %3, align 4
  %41 = load i32, i32* %4, align 4
  %42 = add i32 %40, %41
  %43 = icmp ult i32 %39, %42
  br i1 %43, label %44, label %73

44:                                               ; preds = %38
  %45 = load i32, i32* %5, align 4
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i64
  %50 = load i64, i64* @rsync_sum, align 8
  %51 = add i64 %50, %49
  store i64 %51, i64* @rsync_sum, align 8
  %52 = load i32, i32* %5, align 4
  %53 = sub i32 %52, 4096
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i64
  %58 = load i64, i64* @rsync_sum, align 8
  %59 = sub i64 %58, %57
  store i64 %59, i64* @rsync_sum, align 8
  %60 = load i64, i64* @rsync_chunk_end, align 8
  %61 = icmp eq i64 %60, 4294967295
  br i1 %61, label %62, label %69

62:                                               ; preds = %44
  %63 = load i64, i64* @rsync_sum, align 8
  %64 = urem i64 %63, 4096
  %65 = icmp eq i64 %64, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %62
  %67 = load i32, i32* %5, align 4
  %68 = zext i32 %67 to i64
  store i64 %68, i64* @rsync_chunk_end, align 8
  br label %69

69:                                               ; preds = %66, %62, %44
  br label %70

70:                                               ; preds = %69
  %71 = load i32, i32* %5, align 4
  %72 = add i32 %71, 1
  store i32 %72, i32* %5, align 4
  br label %38, !llvm.loop !20

73:                                               ; preds = %38, %19
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @fill_window() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = load i64, i64* @window_size, align 8
  %5 = load i32, i32* @lookahead, align 4
  %6 = zext i32 %5 to i64
  %7 = sub i64 %4, %6
  %8 = load i32, i32* @strstart, align 4
  %9 = zext i32 %8 to i64
  %10 = sub i64 %7, %9
  %11 = trunc i64 %10 to i32
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp eq i32 %12, -1
  br i1 %13, label %14, label %17

14:                                               ; preds = %0
  %15 = load i32, i32* %3, align 4
  %16 = add i32 %15, -1
  store i32 %16, i32* %3, align 4
  br label %88

17:                                               ; preds = %0
  %18 = load i32, i32* @strstart, align 4
  %19 = icmp uge i32 %18, 65274
  br i1 %19, label %20, label %87

20:                                               ; preds = %17
  %21 = call i64 @llvm.objectsize.i64.p0i8(i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i1 false, i1 true, i1 false)
  %22 = call i8* @__memcpy_chk(i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 32768), i64 32768, i64 %21) #24
  %23 = load i32, i32* @match_start, align 4
  %24 = sub i32 %23, 32768
  store i32 %24, i32* @match_start, align 4
  %25 = load i32, i32* @strstart, align 4
  %26 = sub i32 %25, 32768
  store i32 %26, i32* @strstart, align 4
  %27 = load i64, i64* @rsync_chunk_end, align 8
  %28 = icmp ne i64 %27, 4294967295
  br i1 %28, label %29, label %32

29:                                               ; preds = %20
  %30 = load i64, i64* @rsync_chunk_end, align 8
  %31 = sub i64 %30, 32768
  store i64 %31, i64* @rsync_chunk_end, align 8
  br label %32

32:                                               ; preds = %29, %20
  %33 = load i64, i64* @block_start, align 8
  %34 = sub nsw i64 %33, 32768
  store i64 %34, i64* @block_start, align 8
  store i32 0, i32* %1, align 4
  br label %35

35:                                               ; preds = %56, %32
  %36 = load i32, i32* %1, align 4
  %37 = icmp ult i32 %36, 32768
  br i1 %37, label %38, label %59

38:                                               ; preds = %35
  %39 = load i32, i32* %1, align 4
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  store i32 %43, i32* %2, align 4
  %44 = load i32, i32* %2, align 4
  %45 = icmp uge i32 %44, 32768
  br i1 %45, label %46, label %49

46:                                               ; preds = %38
  %47 = load i32, i32* %2, align 4
  %48 = sub i32 %47, 32768
  br label %50

49:                                               ; preds = %38
  br label %50

50:                                               ; preds = %49, %46
  %51 = phi i32 [ %48, %46 ], [ 0, %49 ]
  %52 = trunc i32 %51 to i16
  %53 = load i32, i32* %1, align 4
  %54 = zext i32 %53 to i64
  %55 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %54
  store i16 %52, i16* %55, align 2
  br label %56

56:                                               ; preds = %50
  %57 = load i32, i32* %1, align 4
  %58 = add i32 %57, 1
  store i32 %58, i32* %1, align 4
  br label %35, !llvm.loop !21

59:                                               ; preds = %35
  store i32 0, i32* %1, align 4
  br label %60

60:                                               ; preds = %81, %59
  %61 = load i32, i32* %1, align 4
  %62 = icmp ult i32 %61, 32768
  br i1 %62, label %63, label %84

63:                                               ; preds = %60
  %64 = load i32, i32* %1, align 4
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i32
  store i32 %68, i32* %2, align 4
  %69 = load i32, i32* %2, align 4
  %70 = icmp uge i32 %69, 32768
  br i1 %70, label %71, label %74

71:                                               ; preds = %63
  %72 = load i32, i32* %2, align 4
  %73 = sub i32 %72, 32768
  br label %75

74:                                               ; preds = %63
  br label %75

75:                                               ; preds = %74, %71
  %76 = phi i32 [ %73, %71 ], [ 0, %74 ]
  %77 = trunc i32 %76 to i16
  %78 = load i32, i32* %1, align 4
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %79
  store i16 %77, i16* %80, align 2
  br label %81

81:                                               ; preds = %75
  %82 = load i32, i32* %1, align 4
  %83 = add i32 %82, 1
  store i32 %83, i32* %1, align 4
  br label %60, !llvm.loop !22

84:                                               ; preds = %60
  %85 = load i32, i32* %3, align 4
  %86 = add i32 %85, 32768
  store i32 %86, i32* %3, align 4
  br label %87

87:                                               ; preds = %84, %17
  br label %88

88:                                               ; preds = %87, %14
  %89 = load i32, i32* @eofile, align 4
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %126, label %91

91:                                               ; preds = %88
  %92 = load i32 (i8*, i32)*, i32 (i8*, i32)** @read_buf, align 8
  %93 = load i32, i32* @strstart, align 4
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %94
  %96 = load i32, i32* @lookahead, align 4
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %95, i64 %97
  %99 = load i32, i32* %3, align 4
  %100 = call i32 %92(i8* %98, i32 %99)
  store i32 %100, i32* %1, align 4
  %101 = load i32, i32* %1, align 4
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %106, label %103

103:                                              ; preds = %91
  %104 = load i32, i32* %1, align 4
  %105 = icmp eq i32 %104, -1
  br i1 %105, label %106, label %121

106:                                              ; preds = %103, %91
  store i32 1, i32* @eofile, align 4
  %107 = load i32, i32* @strstart, align 4
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %108
  %110 = load i32, i32* @lookahead, align 4
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %109, i64 %111
  %113 = load i32, i32* @strstart, align 4
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %114
  %116 = load i32, i32* @lookahead, align 4
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %115, i64 %117
  %119 = call i64 @llvm.objectsize.i64.p0i8(i8* %118, i1 false, i1 true, i1 false)
  %120 = call i8* @__memset_chk(i8* %112, i32 0, i64 2, i64 %119) #24
  br label %125

121:                                              ; preds = %103
  %122 = load i32, i32* %1, align 4
  %123 = load i32, i32* @lookahead, align 4
  %124 = add i32 %123, %122
  store i32 %124, i32* @lookahead, align 4
  br label %125

125:                                              ; preds = %121, %106
  br label %126

126:                                              ; preds = %125, %88
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1 immarg, i1 immarg, i1 immarg) #2

; Function Attrs: nounwind
declare i8* @__memcpy_chk(i8*, i8*, i64, i64) #3

; Function Attrs: nounwind
declare i8* @__memset_chk(i8*, i32, i64, i64) #3

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i8**, align 8
  %9 = alloca i32, align 4
  %10 = alloca i8**, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = load i8**, i8*** %5, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 0
  %15 = load i8*, i8** %14, align 8
  %16 = call i8* @gzip_base_name(i8* %15) #25
  store i8* %16, i8** @program_name, align 8
  %17 = load i8*, i8** @program_name, align 8
  %18 = call i64 @strlen(i8* %17)
  store i64 %18, i64* %7, align 8
  %19 = load i64, i64* %7, align 8
  %20 = icmp ult i64 4, %19
  br i1 %20, label %21, label %33

21:                                               ; preds = %2
  %22 = load i8*, i8** @program_name, align 8
  %23 = load i64, i64* %7, align 8
  %24 = getelementptr inbounds i8, i8* %22, i64 %23
  %25 = getelementptr inbounds i8, i8* %24, i64 -4
  %26 = call i32 @strcmp(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0))
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %33

28:                                               ; preds = %21
  %29 = load i8*, i8** @program_name, align 8
  %30 = load i64, i64* %7, align 8
  %31 = sub i64 %30, 4
  %32 = getelementptr inbounds i8, i8* %29, i64 %31
  store i8 0, i8* %32, align 1
  br label %33

33:                                               ; preds = %28, %21, %2
  %34 = load i8**, i8*** %5, align 8
  store i8** %34, i8*** %8, align 8
  %35 = call i8* @add_envopt(i32* %9, i8*** %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  store i8* %35, i8** @env, align 8
  %36 = load i8*, i8** @env, align 8
  %37 = icmp ne i8* %36, null
  br i1 %37, label %38, label %40

38:                                               ; preds = %33
  %39 = load i8**, i8*** %8, align 8
  br label %41

40:                                               ; preds = %33
  br label %41

41:                                               ; preds = %40, %38
  %42 = phi i8** [ %39, %38 ], [ null, %40 ]
  store i8** %42, i8*** %10, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8** @z_suffix, align 8
  %43 = load i8*, i8** @z_suffix, align 8
  %44 = call i64 @strlen(i8* %43)
  store i64 %44, i64* @z_len, align 8
  br label %45

45:                                               ; preds = %207, %41
  store i32 -1, i32* %12, align 4
  %46 = load i8**, i8*** %10, align 8
  %47 = icmp ne i8** %46, null
  br i1 %47, label %48, label %101

48:                                               ; preds = %45
  %49 = load i8**, i8*** %10, align 8
  %50 = load i32, i32* @rpl_optind, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8*, i8** %49, i64 %51
  %53 = load i8*, i8** %52, align 8
  %54 = icmp ne i8* %53, null
  br i1 %54, label %55, label %64

55:                                               ; preds = %48
  %56 = load i8**, i8*** %10, align 8
  %57 = load i32, i32* @rpl_optind, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8*, i8** %56, i64 %58
  %60 = load i8*, i8** %59, align 8
  %61 = call i32 @strcmp(i8* %60, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0))
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %55
  store i32 176, i32* %11, align 4
  br label %100

64:                                               ; preds = %55, %48
  %65 = load i32, i32* %9, align 4
  %66 = load i8**, i8*** %10, align 8
  %67 = call i32 @rpl_getopt_long(i32 %65, i8** %66, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @shortopts, i64 0, i64 0), %struct.rpl_option* getelementptr inbounds ([27 x %struct.rpl_option], [27 x %struct.rpl_option]* @longopts, i64 0, i64 0), i32* %12)
  store i32 %67, i32* %11, align 4
  %68 = load i32, i32* %11, align 4
  %69 = icmp sle i32 0, %68
  br i1 %69, label %70, label %73

70:                                               ; preds = %64
  %71 = load i32, i32* %11, align 4
  %72 = add nsw i32 %71, 131
  store i32 %72, i32* %11, align 4
  br label %99

73:                                               ; preds = %64
  %74 = load i32, i32* @rpl_optind, align 4
  %75 = load i32, i32* %9, align 4
  %76 = icmp ne i32 %74, %75
  br i1 %76, label %77, label %86

77:                                               ; preds = %73
  %78 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %79 = load i8*, i8** @program_name, align 8
  %80 = load i8**, i8*** %10, align 8
  %81 = load i32, i32* @rpl_optind, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8*, i8** %80, i64 %82
  %84 = load i8*, i8** %83, align 8
  %85 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %78, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.4, i64 0, i64 0), i8* %79, i8* %84)
  call void @try_help() #23
  unreachable

86:                                               ; preds = %73
  %87 = load i32, i32* %9, align 4
  %88 = icmp ne i32 %87, 1
  br i1 %88, label %89, label %96

89:                                               ; preds = %86
  %90 = load i32, i32* @quiet, align 4
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %89
  %93 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %94 = load i8*, i8** @program_name, align 8
  %95 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %93, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.5, i64 0, i64 0), i8* %94)
  br label %96

96:                                               ; preds = %92, %89, %86
  %97 = load i8**, i8*** %10, align 8
  %98 = bitcast i8** %97 to i8*
  call void @rpl_free(i8* %98)
  store i8** null, i8*** %10, align 8
  store i32 1, i32* @rpl_optind, align 4
  store i32 -1, i32* %12, align 4
  br label %99

99:                                               ; preds = %96, %70
  br label %100

100:                                              ; preds = %99, %63
  br label %101

101:                                              ; preds = %100, %45
  %102 = load i8**, i8*** %10, align 8
  %103 = icmp ne i8** %102, null
  br i1 %103, label %108, label %104

104:                                              ; preds = %101
  %105 = load i32, i32* %4, align 4
  %106 = load i8**, i8*** %5, align 8
  %107 = call i32 @rpl_getopt_long(i32 %105, i8** %106, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @shortopts, i64 0, i64 0), %struct.rpl_option* getelementptr inbounds ([27 x %struct.rpl_option], [27 x %struct.rpl_option]* @longopts, i64 0, i64 0), i32* %12)
  store i32 %107, i32* %11, align 4
  br label %108

108:                                              ; preds = %104, %101
  %109 = load i32, i32* %11, align 4
  %110 = icmp slt i32 %109, 0
  br i1 %110, label %111, label %112

111:                                              ; preds = %108
  br label %208

112:                                              ; preds = %108
  %113 = load i32, i32* %11, align 4
  switch i32 %113, label %178 [
    i32 97, label %114
    i32 98, label %115
    i32 99, label %141
    i32 100, label %142
    i32 102, label %143
    i32 104, label %146
    i32 72, label %146
    i32 107, label %147
    i32 108, label %148
    i32 76, label %149
    i32 109, label %150
    i32 77, label %151
    i32 110, label %152
    i32 241, label %152
    i32 78, label %153
    i32 209, label %153
    i32 128, label %154
    i32 113, label %155
    i32 244, label %155
    i32 114, label %156
    i32 129, label %157
    i32 260, label %157
    i32 83, label %158
    i32 130, label %162
    i32 116, label %163
    i32 118, label %164
    i32 249, label %164
    i32 86, label %167
    i32 90, label %168
    i32 180, label %172
    i32 181, label %172
    i32 182, label %172
    i32 183, label %172
    i32 184, label %172
    i32 185, label %172
    i32 186, label %172
    i32 187, label %172
    i32 188, label %172
    i32 49, label %175
    i32 50, label %175
    i32 51, label %175
    i32 52, label %175
    i32 53, label %175
    i32 54, label %175
    i32 55, label %175
    i32 56, label %175
    i32 57, label %175
  ]

114:                                              ; preds = %112
  store i32 1, i32* @ascii, align 4
  br label %207

115:                                              ; preds = %112
  %116 = load i8*, i8** @rpl_optarg, align 8
  %117 = call i32 @atoi(i8* %116)
  store i32 %117, i32* @maxbits, align 4
  br label %118

118:                                              ; preds = %137, %115
  %119 = load i8*, i8** @rpl_optarg, align 8
  %120 = load i8, i8* %119, align 1
  %121 = icmp ne i8 %120, 0
  br i1 %121, label %122, label %140

122:                                              ; preds = %118
  %123 = load i8*, i8** @rpl_optarg, align 8
  %124 = load i8, i8* %123, align 1
  %125 = sext i8 %124 to i32
  %126 = icmp sle i32 48, %125
  br i1 %126, label %127, label %132

127:                                              ; preds = %122
  %128 = load i8*, i8** @rpl_optarg, align 8
  %129 = load i8, i8* %128, align 1
  %130 = sext i8 %129 to i32
  %131 = icmp sle i32 %130, 57
  br i1 %131, label %136, label %132

132:                                              ; preds = %127, %122
  %133 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %134 = load i8*, i8** @program_name, align 8
  %135 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %133, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0), i8* %134)
  call void @try_help() #23
  unreachable

136:                                              ; preds = %127
  br label %137

137:                                              ; preds = %136
  %138 = load i8*, i8** @rpl_optarg, align 8
  %139 = getelementptr inbounds i8, i8* %138, i32 1
  store i8* %139, i8** @rpl_optarg, align 8
  br label %118, !llvm.loop !23

140:                                              ; preds = %118
  br label %207

141:                                              ; preds = %112
  store i32 1, i32* @to_stdout, align 4
  br label %207

142:                                              ; preds = %112
  store i32 1, i32* @decompress, align 4
  br label %207

143:                                              ; preds = %112
  %144 = load i32, i32* @force, align 4
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* @force, align 4
  br label %207

146:                                              ; preds = %112, %112
  call void @help()
  call void @finish_out()
  br label %207

147:                                              ; preds = %112
  store i32 1, i32* @keep, align 4
  br label %207

148:                                              ; preds = %112
  store i32 1, i32* @to_stdout, align 4
  store i32 1, i32* @test, align 4
  store i32 1, i32* @decompress, align 4
  store i32 1, i32* @list, align 4
  br label %207

149:                                              ; preds = %112
  call void @license()
  call void @finish_out()
  br label %207

150:                                              ; preds = %112
  store i32 1, i32* @no_time, align 4
  br label %207

151:                                              ; preds = %112
  store i32 0, i32* @no_time, align 4
  br label %207

152:                                              ; preds = %112, %112
  store i32 1, i32* @no_time, align 4
  store i32 1, i32* @no_name, align 4
  br label %207

153:                                              ; preds = %112, %112
  store i32 0, i32* @no_time, align 4
  store i32 0, i32* @no_name, align 4
  br label %207

154:                                              ; preds = %112
  store i8 1, i8* @presume_input_tty, align 1
  br label %207

155:                                              ; preds = %112, %112
  store i32 1, i32* @quiet, align 4
  store i32 0, i32* @verbose, align 4
  br label %207

156:                                              ; preds = %112
  store i32 1, i32* @recursive, align 4
  br label %207

157:                                              ; preds = %112, %112
  store i32 1, i32* @rsync, align 4
  br label %207

158:                                              ; preds = %112
  %159 = load i8*, i8** @rpl_optarg, align 8
  %160 = call i64 @strlen(i8* %159)
  store i64 %160, i64* @z_len, align 8
  %161 = load i8*, i8** @rpl_optarg, align 8
  store i8* %161, i8** @z_suffix, align 8
  br label %207

162:                                              ; preds = %112
  store i8 1, i8* @synchronous, align 1
  br label %207

163:                                              ; preds = %112
  store i32 1, i32* @to_stdout, align 4
  store i32 1, i32* @decompress, align 4
  store i32 1, i32* @test, align 4
  br label %207

164:                                              ; preds = %112, %112
  %165 = load i32, i32* @verbose, align 4
  %166 = add nsw i32 %165, 1
  store i32 %166, i32* @verbose, align 4
  store i32 0, i32* @quiet, align 4
  br label %207

167:                                              ; preds = %112
  call void @version()
  call void @finish_out()
  br label %207

168:                                              ; preds = %112
  %169 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %170 = load i8*, i8** @program_name, align 8
  %171 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %169, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7, i64 0, i64 0), i8* %170)
  call void @try_help() #23
  unreachable

172:                                              ; preds = %112, %112, %112, %112, %112, %112, %112, %112, %112
  %173 = load i32, i32* %11, align 4
  %174 = sub nsw i32 %173, 131
  store i32 %174, i32* %11, align 4
  br label %175

175:                                              ; preds = %172, %112, %112, %112, %112, %112, %112, %112, %112, %112
  %176 = load i32, i32* %11, align 4
  %177 = sub nsw i32 %176, 48
  store i32 %177, i32* @level, align 4
  br label %207

178:                                              ; preds = %112
  %179 = load i32, i32* %11, align 4
  %180 = icmp sle i32 131, %179
  br i1 %180, label %181, label %206

181:                                              ; preds = %178
  %182 = load i32, i32* %11, align 4
  %183 = icmp ne i32 %182, 194
  br i1 %183, label %184, label %206

184:                                              ; preds = %181
  %185 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %186 = load i8*, i8** @program_name, align 8
  %187 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %185, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i8* %186)
  %188 = load i32, i32* %12, align 4
  %189 = icmp slt i32 %188, 0
  br i1 %189, label %190, label %195

190:                                              ; preds = %184
  %191 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %192 = load i32, i32* %11, align 4
  %193 = sub nsw i32 %192, 131
  %194 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %191, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0), i32 %193)
  br label %203

195:                                              ; preds = %184
  %196 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %197 = load i32, i32* %12, align 4
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds [27 x %struct.rpl_option], [27 x %struct.rpl_option]* @longopts, i64 0, i64 %198
  %200 = getelementptr inbounds %struct.rpl_option, %struct.rpl_option* %199, i32 0, i32 0
  %201 = load i8*, i8** %200, align 16
  %202 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %196, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i64 0, i64 0), i8* %201)
  br label %203

203:                                              ; preds = %195, %190
  %204 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %205 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %204, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.11.12, i64 0, i64 0))
  br label %206

206:                                              ; preds = %203, %181, %178
  call void @try_help() #23
  unreachable

207:                                              ; preds = %175, %167, %164, %163, %162, %158, %157, %156, %155, %154, %153, %152, %151, %150, %149, %148, %147, %146, %143, %142, %141, %140, %114
  br label %45

208:                                              ; preds = %111
  %209 = load i32, i32* @no_time, align 4
  %210 = icmp slt i32 %209, 0
  br i1 %210, label %211, label %213

211:                                              ; preds = %208
  %212 = load i32, i32* @decompress, align 4
  store i32 %212, i32* @no_time, align 4
  br label %213

213:                                              ; preds = %211, %208
  %214 = load i32, i32* @no_name, align 4
  %215 = icmp slt i32 %214, 0
  br i1 %215, label %216, label %218

216:                                              ; preds = %213
  %217 = load i32, i32* @decompress, align 4
  store i32 %217, i32* @no_name, align 4
  br label %218

218:                                              ; preds = %216, %213
  %219 = load i32, i32* %4, align 4
  %220 = load i32, i32* @rpl_optind, align 4
  %221 = sub nsw i32 %219, %220
  store i32 %221, i32* %6, align 4
  %222 = load i32, i32* @ascii, align 4
  %223 = icmp ne i32 %222, 0
  br i1 %223, label %224, label %231

224:                                              ; preds = %218
  %225 = load i32, i32* @quiet, align 4
  %226 = icmp ne i32 %225, 0
  br i1 %226, label %231, label %227

227:                                              ; preds = %224
  %228 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %229 = load i8*, i8** @program_name, align 8
  %230 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %228, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12, i64 0, i64 0), i8* %229)
  br label %231

231:                                              ; preds = %227, %224, %218
  %232 = load i64, i64* @z_len, align 8
  %233 = icmp eq i64 %232, 0
  br i1 %233, label %237, label %234

234:                                              ; preds = %231
  %235 = load i64, i64* @z_len, align 8
  %236 = icmp ugt i64 %235, 30
  br i1 %236, label %237, label %242

237:                                              ; preds = %234, %231
  %238 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %239 = load i8*, i8** @program_name, align 8
  %240 = load i8*, i8** @z_suffix, align 8
  %241 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %238, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.13, i64 0, i64 0), i8* %239, i8* %240)
  call void @do_exit(i32 1) #23
  unreachable

242:                                              ; preds = %234
  %243 = load i32, i32* @quiet, align 4
  %244 = icmp ne i32 %243, 0
  %245 = zext i1 %244 to i64
  %246 = select i1 %244, i32 13, i32 0
  store volatile i32 %246, i32* @exiting_signal, align 4
  call void @install_signal_handlers()
  %247 = load i32, i32* %6, align 4
  %248 = icmp ne i32 %247, 0
  br i1 %248, label %249, label %275

249:                                              ; preds = %242
  %250 = load i32, i32* @to_stdout, align 4
  %251 = icmp ne i32 %250, 0
  br i1 %251, label %252, label %262

252:                                              ; preds = %249
  %253 = load i32, i32* @test, align 4
  %254 = icmp ne i32 %253, 0
  br i1 %254, label %262, label %255

255:                                              ; preds = %252
  %256 = load i32, i32* @decompress, align 4
  %257 = icmp ne i32 %256, 0
  br i1 %257, label %258, label %261

258:                                              ; preds = %255
  %259 = load i32, i32* @ascii, align 4
  %260 = icmp ne i32 %259, 0
  br i1 %260, label %262, label %261

261:                                              ; preds = %258, %255
  br label %262

262:                                              ; preds = %261, %258, %252, %249
  br label %263

263:                                              ; preds = %267, %262
  %264 = load i32, i32* @rpl_optind, align 4
  %265 = load i32, i32* %4, align 4
  %266 = icmp slt i32 %264, %265
  br i1 %266, label %267, label %274

267:                                              ; preds = %263
  %268 = load i8**, i8*** %5, align 8
  %269 = load i32, i32* @rpl_optind, align 4
  %270 = add nsw i32 %269, 1
  store i32 %270, i32* @rpl_optind, align 4
  %271 = sext i32 %269 to i64
  %272 = getelementptr inbounds i8*, i8** %268, i64 %271
  %273 = load i8*, i8** %272, align 8
  call void @treat_file(i8* %273)
  br label %263, !llvm.loop !24

274:                                              ; preds = %263
  br label %276

275:                                              ; preds = %242
  call void @treat_stdin()
  br label %276

276:                                              ; preds = %275, %274
  %277 = load i8, i8* @stdin_was_read, align 1
  %278 = trunc i8 %277 to i1
  br i1 %278, label %279, label %284

279:                                              ; preds = %276
  %280 = call i32 @"\01_close"(i32 0)
  %281 = icmp ne i32 %280, 0
  br i1 %281, label %282, label %284

282:                                              ; preds = %279
  %283 = call i8* @__strcpy_chk(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0), i64 1024) #24
  call void @read_error() #23
  unreachable

284:                                              ; preds = %279, %276
  %285 = load i32, i32* @list, align 4
  %286 = icmp ne i32 %285, 0
  br i1 %286, label %287, label %300

287:                                              ; preds = %284
  %288 = load i32, i32* @quiet, align 4
  %289 = icmp ne i32 %288, 0
  br i1 %289, label %294, label %290

290:                                              ; preds = %287
  %291 = load i32, i32* %6, align 4
  %292 = icmp slt i32 1, %291
  br i1 %292, label %293, label %294

293:                                              ; preds = %290
  call void @do_list(i32 -1)
  br label %294

294:                                              ; preds = %293, %290, %287
  %295 = load %struct.__sFILE*, %struct.__sFILE** @__stdoutp, align 8
  %296 = call i32 @rpl_fflush(%struct.__sFILE* %295)
  %297 = icmp ne i32 %296, 0
  br i1 %297, label %298, label %299

298:                                              ; preds = %294
  call void @write_error() #23
  unreachable

299:                                              ; preds = %294
  br label %300

300:                                              ; preds = %299, %284
  %301 = load i32, i32* @to_stdout, align 4
  %302 = icmp ne i32 %301, 0
  br i1 %302, label %303, label %321

303:                                              ; preds = %300
  %304 = load i8, i8* @synchronous, align 1
  %305 = trunc i8 %304 to i1
  br i1 %305, label %306, label %313

306:                                              ; preds = %303
  %307 = call i32 @fdatasync(i32 1)
  %308 = icmp ne i32 %307, 0
  br i1 %308, label %309, label %313

309:                                              ; preds = %306
  %310 = call i32* @__error()
  %311 = load i32, i32* %310, align 4
  %312 = icmp ne i32 %311, 22
  br i1 %312, label %316, label %313

313:                                              ; preds = %309, %306, %303
  %314 = call i32 @"\01_close"(i32 1)
  %315 = icmp ne i32 %314, 0
  br i1 %315, label %316, label %321

316:                                              ; preds = %313, %309
  %317 = call i32* @__error()
  %318 = load i32, i32* %317, align 4
  %319 = icmp ne i32 %318, 9
  br i1 %319, label %320, label %321

320:                                              ; preds = %316
  call void @write_error() #23
  unreachable

321:                                              ; preds = %316, %313, %300
  %322 = load i32, i32* @exit_code, align 4
  call void @do_exit(i32 %322) #23
  unreachable
}

declare i64 @strlen(i8*) #4

declare i32 @strcmp(i8*, i8*) #4

declare i32 @rpl_getopt_long(i32, i8**, i8*, %struct.rpl_option*, i32*) #4

; Function Attrs: noinline noreturn nounwind optnone ssp uwtable
define internal void @try_help() #5 {
  %1 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %2 = load i8*, i8** @program_name, align 8
  %3 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.41, i64 0, i64 0), i8* %2)
  call void @do_exit(i32 1) #23
  unreachable
}

declare i32 @atoi(i8*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @help() #0 {
  %1 = alloca i8**, align 8
  store i8** getelementptr inbounds ([28 x i8*], [28 x i8*]* @help.help_msg, i64 0, i64 0), i8*** %1, align 8
  %2 = load i8*, i8** @program_name, align 8
  %3 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.66, i64 0, i64 0), i8* %2)
  br label %4

4:                                                ; preds = %8, %0
  %5 = load i8**, i8*** %1, align 8
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %13

8:                                                ; preds = %4
  %9 = load i8**, i8*** %1, align 8
  %10 = getelementptr inbounds i8*, i8** %9, i32 1
  store i8** %10, i8*** %1, align 8
  %11 = load i8*, i8** %9, align 8
  %12 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.67, i64 0, i64 0), i8* %11)
  br label %4, !llvm.loop !25

13:                                               ; preds = %4
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @finish_out() #0 {
  %1 = load %struct.__sFILE*, %struct.__sFILE** @__stdoutp, align 8
  %2 = call i32 @rpl_fclose(%struct.__sFILE* %1)
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %4, label %5

4:                                                ; preds = %0
  call void @write_error() #23
  unreachable

5:                                                ; preds = %0
  call void @do_exit(i32 0) #23
  unreachable
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @license() #0 {
  %1 = alloca i8**, align 8
  store i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @license_msg, i64 0, i64 0), i8*** %1, align 8
  %2 = load i8*, i8** @program_name, align 8
  %3 = load i8*, i8** @Version, align 8
  %4 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.68, i64 0, i64 0), i8* %2, i8* %3)
  br label %5

5:                                                ; preds = %9, %0
  %6 = load i8**, i8*** %1, align 8
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ne i8* %7, null
  br i1 %8, label %9, label %14

9:                                                ; preds = %5
  %10 = load i8**, i8*** %1, align 8
  %11 = getelementptr inbounds i8*, i8** %10, i32 1
  store i8** %11, i8*** %1, align 8
  %12 = load i8*, i8** %10, align 8
  %13 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.67, i64 0, i64 0), i8* %12)
  br label %5, !llvm.loop !26

14:                                               ; preds = %5
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @version() #0 {
  call void @license()
  %1 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i64 0, i64 0))
  %2 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.75, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline noreturn nounwind optnone ssp uwtable
define internal void @do_exit(i32 %0) #5 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* @do_exit.in_exit, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = load i32, i32* %2, align 4
  call void @exit(i32 %6) #23
  unreachable

7:                                                ; preds = %1
  store i32 1, i32* @do_exit.in_exit, align 4
  %8 = load i8*, i8** @env, align 8
  call void @rpl_free(i8* %8)
  store i8* null, i8** @env, align 8
  %9 = load i32, i32* %2, align 4
  call void @exit(i32 %9) #23
  unreachable
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @install_signal_handlers() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca %struct.sigaction, align 8
  store i32 6, i32* %1, align 4
  %4 = call i32 @sigemptyset(i32* @caught_signals)
  store i32 0, i32* %2, align 4
  br label %5

5:                                                ; preds = %26, %0
  %6 = load i32, i32* %2, align 4
  %7 = load i32, i32* %1, align 4
  %8 = icmp slt i32 %6, %7
  br i1 %8, label %9, label %29

9:                                                ; preds = %5
  %10 = load i32, i32* %2, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [6 x i32], [6 x i32]* @handled_sig, i64 0, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = call i32 @sigaction(i32 %13, %struct.sigaction* null, %struct.sigaction* %3)
  %15 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %3, i32 0, i32 0
  %16 = bitcast %union.__sigaction_u* %15 to void (i32)**
  %17 = load void (i32)*, void (i32)** %16, align 8
  %18 = icmp ne void (i32)* %17, inttoptr (i64 1 to void (i32)*)
  br i1 %18, label %19, label %25

19:                                               ; preds = %9
  %20 = load i32, i32* %2, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [6 x i32], [6 x i32]* @handled_sig, i64 0, i64 %21
  %23 = load i32, i32* %22, align 4
  %24 = call i32 @sigaddset(i32* @caught_signals, i32 %23)
  br label %25

25:                                               ; preds = %19, %9
  br label %26

26:                                               ; preds = %25
  %27 = load i32, i32* %2, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %2, align 4
  br label %5, !llvm.loop !27

29:                                               ; preds = %5
  %30 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %3, i32 0, i32 0
  %31 = bitcast %union.__sigaction_u* %30 to void (i32)**
  store void (i32)* @abort_gzip_signal, void (i32)** %31, align 8
  %32 = load i32, i32* @caught_signals, align 4
  %33 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %3, i32 0, i32 1
  store i32 %32, i32* %33, align 8
  %34 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %3, i32 0, i32 2
  store i32 0, i32* %34, align 4
  store i32 0, i32* %2, align 4
  br label %35

35:                                               ; preds = %57, %29
  %36 = load i32, i32* %2, align 4
  %37 = load i32, i32* %1, align 4
  %38 = icmp slt i32 %36, %37
  br i1 %38, label %39, label %60

39:                                               ; preds = %35
  %40 = load i32, i32* %2, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [6 x i32], [6 x i32]* @handled_sig, i64 0, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = call i32 @sigismember(i32* @caught_signals, i32 %43)
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %56

46:                                               ; preds = %39
  %47 = load i32, i32* %2, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %46
  store i32 1, i32* @foreground, align 4
  br label %50

50:                                               ; preds = %49, %46
  %51 = load i32, i32* %2, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [6 x i32], [6 x i32]* @handled_sig, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = call i32 @sigaction(i32 %54, %struct.sigaction* %3, %struct.sigaction* null)
  br label %56

56:                                               ; preds = %50, %39
  br label %57

57:                                               ; preds = %56
  %58 = load i32, i32* %2, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %2, align 4
  br label %35, !llvm.loop !28

60:                                               ; preds = %35
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @treat_file(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %9 = load i8*, i8** %2, align 8
  %10 = call i32 @strcmp(i8* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.98, i64 0, i64 0))
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = load i32, i32* @to_stdout, align 4
  store i32 %13, i32* %3, align 4
  call void @treat_stdin()
  %14 = load i32, i32* %3, align 4
  store i32 %14, i32* @to_stdout, align 4
  br label %390

15:                                               ; preds = %1
  %16 = load i8*, i8** %2, align 8
  %17 = call i32 @open_input_file(i8* %16, %struct.stat* @istat)
  store i32 %17, i32* @ifd, align 4
  %18 = load i32, i32* @ifd, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  br label %390

21:                                               ; preds = %15
  %22 = load i16, i16* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 1), align 4
  %23 = zext i16 %22 to i32
  %24 = and i32 %23, 61440
  %25 = icmp eq i32 %24, 16384
  br i1 %25, label %26, label %46

26:                                               ; preds = %21
  %27 = load i32, i32* @recursive, align 4
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %26
  %30 = load i32, i32* @ifd, align 4
  %31 = load i8*, i8** %2, align 8
  call void @treat_dir(i32 %30, i8* %31)
  br label %390

32:                                               ; preds = %26
  %33 = load i32, i32* @ifd, align 4
  %34 = call i32 @"\01_close"(i32 %33)
  %35 = load i32, i32* @quiet, align 4
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %41, label %37

37:                                               ; preds = %32
  %38 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %39 = load i8*, i8** @program_name, align 8
  %40 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %38, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.99, i64 0, i64 0), i8* %39, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %41

41:                                               ; preds = %37, %32
  %42 = load i32, i32* @exit_code, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %41
  store i32 2, i32* @exit_code, align 4
  br label %45

45:                                               ; preds = %44, %41
  br label %390

46:                                               ; preds = %21
  %47 = load i32, i32* @to_stdout, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %156, label %49

49:                                               ; preds = %46
  %50 = load i16, i16* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 1), align 4
  %51 = zext i16 %50 to i32
  %52 = and i32 %51, 61440
  %53 = icmp eq i32 %52, 32768
  br i1 %53, label %68, label %54

54:                                               ; preds = %49
  %55 = load i32, i32* @quiet, align 4
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %61, label %57

57:                                               ; preds = %54
  %58 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %59 = load i8*, i8** @program_name, align 8
  %60 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %58, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.100, i64 0, i64 0), i8* %59, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %61

61:                                               ; preds = %57, %54
  %62 = load i32, i32* @exit_code, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  store i32 2, i32* @exit_code, align 4
  br label %65

65:                                               ; preds = %64, %61
  %66 = load i32, i32* @ifd, align 4
  %67 = call i32 @"\01_close"(i32 %66)
  br label %390

68:                                               ; preds = %49
  %69 = load i16, i16* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 1), align 4
  %70 = zext i16 %69 to i32
  %71 = and i32 %70, 2048
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %87

73:                                               ; preds = %68
  %74 = load i32, i32* @quiet, align 4
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %80, label %76

76:                                               ; preds = %73
  %77 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %78 = load i8*, i8** @program_name, align 8
  %79 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %77, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.101, i64 0, i64 0), i8* %78, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %80

80:                                               ; preds = %76, %73
  %81 = load i32, i32* @exit_code, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %80
  store i32 2, i32* @exit_code, align 4
  br label %84

84:                                               ; preds = %83, %80
  %85 = load i32, i32* @ifd, align 4
  %86 = call i32 @"\01_close"(i32 %85)
  br label %390

87:                                               ; preds = %68
  %88 = load i16, i16* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 1), align 4
  %89 = zext i16 %88 to i32
  %90 = and i32 %89, 1024
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %92, label %106

92:                                               ; preds = %87
  %93 = load i32, i32* @quiet, align 4
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %99, label %95

95:                                               ; preds = %92
  %96 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %97 = load i8*, i8** @program_name, align 8
  %98 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %96, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.102, i64 0, i64 0), i8* %97, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %99

99:                                               ; preds = %95, %92
  %100 = load i32, i32* @exit_code, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %99
  store i32 2, i32* @exit_code, align 4
  br label %103

103:                                              ; preds = %102, %99
  %104 = load i32, i32* @ifd, align 4
  %105 = call i32 @"\01_close"(i32 %104)
  br label %390

106:                                              ; preds = %87
  %107 = load i32, i32* @force, align 4
  %108 = icmp ne i32 %107, 0
  br i1 %108, label %155, label %109

109:                                              ; preds = %106
  %110 = load i16, i16* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 1), align 4
  %111 = zext i16 %110 to i32
  %112 = and i32 %111, 512
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %128

114:                                              ; preds = %109
  %115 = load i32, i32* @quiet, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %121, label %117

117:                                              ; preds = %114
  %118 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %119 = load i8*, i8** @program_name, align 8
  %120 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %118, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.103, i64 0, i64 0), i8* %119, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %121

121:                                              ; preds = %117, %114
  %122 = load i32, i32* @exit_code, align 4
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %121
  store i32 2, i32* @exit_code, align 4
  br label %125

125:                                              ; preds = %124, %121
  %126 = load i32, i32* @ifd, align 4
  %127 = call i32 @"\01_close"(i32 %126)
  br label %390

128:                                              ; preds = %109
  %129 = load i16, i16* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 2), align 2
  %130 = zext i16 %129 to i32
  %131 = icmp sle i32 2, %130
  br i1 %131, label %132, label %154

132:                                              ; preds = %128
  %133 = load i32, i32* @quiet, align 4
  %134 = icmp ne i32 %133, 0
  br i1 %134, label %147, label %135

135:                                              ; preds = %132
  %136 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %137 = load i8*, i8** @program_name, align 8
  %138 = load i16, i16* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 2), align 2
  %139 = zext i16 %138 to i64
  %140 = sub i64 %139, 1
  %141 = load i16, i16* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 2), align 2
  %142 = zext i16 %141 to i32
  %143 = icmp eq i32 %142, 2
  %144 = zext i1 %143 to i64
  %145 = select i1 %143, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.105, i64 0, i64 0)
  %146 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %136, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.104, i64 0, i64 0), i8* %137, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i64 %140, i8* %145)
  br label %147

147:                                              ; preds = %135, %132
  %148 = load i32, i32* @exit_code, align 4
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %151

150:                                              ; preds = %147
  store i32 2, i32* @exit_code, align 4
  br label %151

151:                                              ; preds = %150, %147
  %152 = load i32, i32* @ifd, align 4
  %153 = call i32 @"\01_close"(i32 %152)
  br label %390

154:                                              ; preds = %128
  br label %155

155:                                              ; preds = %154, %106
  br label %156

156:                                              ; preds = %155, %46
  call void @get_input_size_and_time()
  %157 = load i32, i32* @to_stdout, align 4
  %158 = icmp ne i32 %157, 0
  br i1 %158, label %159, label %164

159:                                              ; preds = %156
  %160 = load i32, i32* @test, align 4
  %161 = icmp ne i32 %160, 0
  br i1 %161, label %164, label %162

162:                                              ; preds = %159
  %163 = call i8* @__strcpy_chk(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i64 0, i64 0), i64 1024) #24
  br label %171

164:                                              ; preds = %159, %156
  %165 = call i32 @make_ofname()
  %166 = icmp ne i32 %165, 0
  br i1 %166, label %167, label %170

167:                                              ; preds = %164
  %168 = load i32, i32* @ifd, align 4
  %169 = call i32 @"\01_close"(i32 %168)
  br label %390

170:                                              ; preds = %164
  br label %171

171:                                              ; preds = %170, %162
  call void @clear_bufs()
  store i32 0, i32* @part_nb, align 4
  %172 = load i32, i32* @decompress, align 4
  %173 = icmp ne i32 %172, 0
  br i1 %173, label %174, label %183

174:                                              ; preds = %171
  %175 = load i32, i32* @ifd, align 4
  %176 = call i32 @get_method(i32 %175)
  store i32 %176, i32* @method, align 4
  %177 = load i32, i32* @method, align 4
  %178 = icmp slt i32 %177, 0
  br i1 %178, label %179, label %182

179:                                              ; preds = %174
  %180 = load i32, i32* @ifd, align 4
  %181 = call i32 @"\01_close"(i32 %180)
  br label %390

182:                                              ; preds = %174
  br label %183

183:                                              ; preds = %182, %171
  %184 = load i32, i32* @to_stdout, align 4
  %185 = icmp ne i32 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %183
  store i32 1, i32* @ofd, align 4
  br label %208

187:                                              ; preds = %183
  %188 = call i32 @create_outfile()
  %189 = icmp ne i32 %188, 0
  br i1 %189, label %190, label %191

190:                                              ; preds = %187
  br label %390

191:                                              ; preds = %187
  %192 = load i32, i32* @decompress, align 4
  %193 = icmp ne i32 %192, 0
  br i1 %193, label %207, label %194

194:                                              ; preds = %191
  %195 = load i32, i32* @save_orig_name, align 4
  %196 = icmp ne i32 %195, 0
  br i1 %196, label %197, label %207

197:                                              ; preds = %194
  %198 = load i32, i32* @verbose, align 4
  %199 = icmp ne i32 %198, 0
  br i1 %199, label %207, label %200

200:                                              ; preds = %197
  %201 = load i32, i32* @quiet, align 4
  %202 = icmp ne i32 %201, 0
  br i1 %202, label %207, label %203

203:                                              ; preds = %200
  %204 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %205 = load i8*, i8** @program_name, align 8
  %206 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %204, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.106, i64 0, i64 0), i8* %205, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  br label %207

207:                                              ; preds = %203, %200, %197, %194, %191
  br label %208

208:                                              ; preds = %207, %186
  %209 = load i32, i32* @save_orig_name, align 4
  %210 = icmp ne i32 %209, 0
  br i1 %210, label %216, label %211

211:                                              ; preds = %208
  %212 = load i32, i32* @no_name, align 4
  %213 = icmp ne i32 %212, 0
  %214 = xor i1 %213, true
  %215 = zext i1 %214 to i32
  store i32 %215, i32* @save_orig_name, align 4
  br label %216

216:                                              ; preds = %211, %208
  %217 = load i32, i32* @verbose, align 4
  %218 = icmp ne i32 %217, 0
  br i1 %218, label %219, label %225

219:                                              ; preds = %216
  %220 = load i32, i32* @list, align 4
  %221 = icmp ne i32 %220, 0
  br i1 %221, label %225, label %222

222:                                              ; preds = %219
  %223 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %224 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %223, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.107, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %225

225:                                              ; preds = %222, %219, %216
  br label %226

226:                                              ; preds = %243, %225
  %227 = load i32 (i32, i32)*, i32 (i32, i32)** @work, align 8
  %228 = load i32, i32* @ifd, align 4
  %229 = load i32, i32* @ofd, align 4
  %230 = call i32 %227(i32 %228, i32 %229)
  %231 = icmp ne i32 %230, 0
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  store i32 -1, i32* @method, align 4
  br label %244

233:                                              ; preds = %226
  %234 = call i32 @input_eof()
  %235 = icmp ne i32 %234, 0
  br i1 %235, label %236, label %237

236:                                              ; preds = %233
  br label %244

237:                                              ; preds = %233
  %238 = load i32, i32* @ifd, align 4
  %239 = call i32 @get_method(i32 %238)
  store i32 %239, i32* @method, align 4
  %240 = load i32, i32* @method, align 4
  %241 = icmp slt i32 %240, 0
  br i1 %241, label %242, label %243

242:                                              ; preds = %237
  br label %244

243:                                              ; preds = %237
  store i64 0, i64* @bytes_out, align 8
  br label %226

244:                                              ; preds = %242, %236, %232
  %245 = load i32, i32* @ifd, align 4
  %246 = call i32 @"\01_close"(i32 %245)
  %247 = icmp ne i32 %246, 0
  br i1 %247, label %248, label %249

248:                                              ; preds = %244
  call void @read_error() #23
  unreachable

249:                                              ; preds = %244
  %250 = load i32, i32* @list, align 4
  %251 = icmp ne i32 %250, 0
  br i1 %251, label %252, label %254

252:                                              ; preds = %249
  %253 = load i32, i32* @method, align 4
  call void @do_list(i32 %253)
  br label %390

254:                                              ; preds = %249
  %255 = load i32, i32* @to_stdout, align 4
  %256 = icmp ne i32 %255, 0
  br i1 %256, label %340, label %257

257:                                              ; preds = %254
  call void @copy_stat(%struct.stat* @istat)
  %258 = load i8, i8* @synchronous, align 1
  %259 = trunc i8 %258 to i1
  br i1 %259, label %260, label %279

260:                                              ; preds = %257
  %261 = load i32, i32* @dfd, align 4
  %262 = icmp sle i32 0, %261
  br i1 %262, label %263, label %271

263:                                              ; preds = %260
  %264 = load i32, i32* @dfd, align 4
  %265 = call i32 @fdatasync(i32 %264)
  %266 = icmp ne i32 %265, 0
  br i1 %266, label %267, label %271

267:                                              ; preds = %263
  %268 = call i32* @__error()
  %269 = load i32, i32* %268, align 4
  %270 = icmp ne i32 %269, 22
  br i1 %270, label %283, label %271

271:                                              ; preds = %267, %263, %260
  %272 = load i32, i32* @ofd, align 4
  %273 = call i32 @"\01_fsync"(i32 %272)
  %274 = icmp ne i32 %273, 0
  br i1 %274, label %275, label %279

275:                                              ; preds = %271
  %276 = call i32* @__error()
  %277 = load i32, i32* %276, align 4
  %278 = icmp ne i32 %277, 22
  br i1 %278, label %283, label %279

279:                                              ; preds = %275, %271, %257
  %280 = load i32, i32* @ofd, align 4
  %281 = call i32 @"\01_close"(i32 %280)
  %282 = icmp ne i32 %281, 0
  br i1 %282, label %283, label %284

283:                                              ; preds = %279, %275, %267
  call void @write_error() #23
  unreachable

284:                                              ; preds = %279
  %285 = load i32, i32* @keep, align 4
  %286 = icmp ne i32 %285, 0
  br i1 %286, label %339, label %287

287:                                              ; preds = %284
  %288 = call i8* @last_component(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)) #25
  store i8* %288, i8** %6, align 8
  %289 = load i8*, i8** %6, align 8
  %290 = ptrtoint i8* %289 to i64
  %291 = sub i64 %290, ptrtoint ([1024 x i8]* @ifname to i64)
  %292 = call zeroext i1 @atdir_eq(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i64 %291)
  br i1 %292, label %293, label %295

293:                                              ; preds = %287
  %294 = load i32, i32* @dfd, align 4
  br label %296

295:                                              ; preds = %287
  br label %296

296:                                              ; preds = %295, %293
  %297 = phi i32 [ %294, %293 ], [ -1, %295 ]
  store i32 %297, i32* %7, align 4
  %298 = call i32 @sigprocmask(i32 1, i32* @caught_signals, i32* %4)
  store volatile i32 -1, i32* @remove_ofname_fd, align 4
  %299 = load i32, i32* %7, align 4
  %300 = icmp slt i32 %299, 0
  br i1 %300, label %301, label %303

301:                                              ; preds = %296
  %302 = call i32 @xunlink(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %307

303:                                              ; preds = %296
  %304 = load i32, i32* %7, align 4
  %305 = load i8*, i8** %6, align 8
  %306 = call i32 @rpl_unlinkat(i32 %304, i8* %305, i32 0)
  br label %307

307:                                              ; preds = %303, %301
  %308 = phi i32 [ %302, %301 ], [ %306, %303 ]
  store i32 %308, i32* %8, align 4
  %309 = load i32, i32* %8, align 4
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %311, label %312

311:                                              ; preds = %307
  br label %315

312:                                              ; preds = %307
  %313 = call i32* @__error()
  %314 = load i32, i32* %313, align 4
  br label %315

315:                                              ; preds = %312, %311
  %316 = phi i32 [ 0, %311 ], [ %314, %312 ]
  store i32 %316, i32* %5, align 4
  %317 = call i32 @sigprocmask(i32 3, i32* %4, i32* null)
  %318 = load i32, i32* %5, align 4
  %319 = icmp ne i32 %318, 0
  br i1 %319, label %320, label %338

320:                                              ; preds = %315
  %321 = load i32, i32* @quiet, align 4
  %322 = icmp ne i32 %321, 0
  br i1 %322, label %327, label %323

323:                                              ; preds = %320
  %324 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %325 = load i8*, i8** @program_name, align 8
  %326 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %324, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i8* %325)
  br label %327

327:                                              ; preds = %323, %320
  %328 = load i32, i32* @exit_code, align 4
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %330, label %331

330:                                              ; preds = %327
  store i32 2, i32* @exit_code, align 4
  br label %331

331:                                              ; preds = %330, %327
  %332 = load i32, i32* @quiet, align 4
  %333 = icmp ne i32 %332, 0
  br i1 %333, label %337, label %334

334:                                              ; preds = %331
  %335 = load i32, i32* %5, align 4
  %336 = call i32* @__error()
  store i32 %335, i32* %336, align 4
  call void @rpl_perror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %337

337:                                              ; preds = %334, %331
  br label %338

338:                                              ; preds = %337, %315
  br label %339

339:                                              ; preds = %338, %284
  br label %340

340:                                              ; preds = %339, %254
  %341 = load i32, i32* @method, align 4
  %342 = icmp eq i32 %341, -1
  br i1 %342, label %343, label %348

343:                                              ; preds = %340
  %344 = load i32, i32* @to_stdout, align 4
  %345 = icmp ne i32 %344, 0
  br i1 %345, label %347, label %346

346:                                              ; preds = %343
  call void @remove_output_file(i1 zeroext false)
  br label %347

347:                                              ; preds = %346, %343
  br label %390

348:                                              ; preds = %340
  %349 = load i32, i32* @verbose, align 4
  %350 = icmp ne i32 %349, 0
  br i1 %350, label %351, label %390

351:                                              ; preds = %348
  %352 = load i32, i32* @test, align 4
  %353 = icmp ne i32 %352, 0
  br i1 %353, label %354, label %357

354:                                              ; preds = %351
  %355 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %356 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %355, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.108, i64 0, i64 0))
  br label %377

357:                                              ; preds = %351
  %358 = load i32, i32* @decompress, align 4
  %359 = icmp ne i32 %358, 0
  br i1 %359, label %360, label %368

360:                                              ; preds = %357
  %361 = load i64, i64* @bytes_out, align 8
  %362 = load i64, i64* @bytes_in, align 8
  %363 = load i64, i64* @header_bytes, align 8
  %364 = sub nsw i64 %362, %363
  %365 = sub nsw i64 %361, %364
  %366 = load i64, i64* @bytes_out, align 8
  %367 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  call void @display_ratio(i64 %365, i64 %366, %struct.__sFILE* %367)
  br label %376

368:                                              ; preds = %357
  %369 = load i64, i64* @bytes_in, align 8
  %370 = load i64, i64* @bytes_out, align 8
  %371 = load i64, i64* @header_bytes, align 8
  %372 = sub nsw i64 %370, %371
  %373 = sub nsw i64 %369, %372
  %374 = load i64, i64* @bytes_in, align 8
  %375 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  call void @display_ratio(i64 %373, i64 %374, %struct.__sFILE* %375)
  br label %376

376:                                              ; preds = %368, %360
  br label %377

377:                                              ; preds = %376, %354
  %378 = load i32, i32* @test, align 4
  %379 = icmp ne i32 %378, 0
  br i1 %379, label %387, label %380

380:                                              ; preds = %377
  %381 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %382 = load i32, i32* @keep, align 4
  %383 = icmp ne i32 %382, 0
  %384 = zext i1 %383 to i64
  %385 = select i1 %383, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.111, i64 0, i64 0)
  %386 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %381, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.109, i64 0, i64 0), i8* %385, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  br label %387

387:                                              ; preds = %380, %377
  %388 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %389 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %388, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i64 0, i64 0))
  br label %390

390:                                              ; preds = %387, %348, %347, %252, %190, %179, %167, %151, %125, %103, %84, %65, %45, %29, %20, %12
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @treat_stdin() #0 {
  %1 = load i32, i32* @force, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %33, label %3

3:                                                ; preds = %0
  %4 = load i32, i32* @list, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %33, label %6

6:                                                ; preds = %3
  %7 = load i8, i8* @presume_input_tty, align 1
  %8 = trunc i8 %7 to i1
  br i1 %8, label %16, label %9

9:                                                ; preds = %6
  %10 = load i32, i32* @decompress, align 4
  %11 = icmp ne i32 %10, 0
  %12 = zext i1 %11 to i64
  %13 = select i1 %11, i32 0, i32 1
  %14 = call i32 @isatty(i32 %13)
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %33

16:                                               ; preds = %9, %6
  %17 = load i32, i32* @quiet, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %32, label %19

19:                                               ; preds = %16
  %20 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %21 = load i8*, i8** @program_name, align 8
  %22 = load i32, i32* @decompress, align 4
  %23 = icmp ne i32 %22, 0
  %24 = zext i1 %23 to i64
  %25 = select i1 %23, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.77, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.78, i64 0, i64 0)
  %26 = load i32, i32* @decompress, align 4
  %27 = icmp ne i32 %26, 0
  %28 = zext i1 %27 to i64
  %29 = select i1 %27, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.79, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.43, i64 0, i64 0)
  %30 = load i8*, i8** @program_name, align 8
  %31 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %20, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.76, i64 0, i64 0), i8* %21, i8* %25, i8* %29, i8* %30)
  br label %32

32:                                               ; preds = %19, %16
  call void @do_exit(i32 1) #23
  unreachable

33:                                               ; preds = %9, %3, %0
  %34 = load i32, i32* @decompress, align 4
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %33
  %37 = load i32, i32* @ascii, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %40, label %39

39:                                               ; preds = %36, %33
  br label %40

40:                                               ; preds = %39, %36
  %41 = load i32, i32* @test, align 4
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %50, label %43

43:                                               ; preds = %40
  %44 = load i32, i32* @decompress, align 4
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %43
  %47 = load i32, i32* @ascii, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %50, label %49

49:                                               ; preds = %46, %43
  br label %50

50:                                               ; preds = %49, %46, %40
  %51 = call i8* @__strcpy_chk(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0), i64 1024) #24
  %52 = call i8* @__strcpy_chk(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17, i64 0, i64 0), i64 1024) #24
  %53 = call i32 @"\01_fstat$INODE64"(i32 0, %struct.stat* @istat)
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %50
  call void @progerror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.80, i64 0, i64 0))
  call void @do_exit(i32 1) #23
  unreachable

56:                                               ; preds = %50
  call void @get_input_size_and_time()
  call void @clear_bufs()
  store i32 1, i32* @to_stdout, align 4
  store i32 0, i32* @part_nb, align 4
  store i32 0, i32* @ifd, align 4
  store i8 1, i8* @stdin_was_read, align 1
  %57 = load i32, i32* @decompress, align 4
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %67

59:                                               ; preds = %56
  %60 = load i32, i32* @ifd, align 4
  %61 = call i32 @get_method(i32 %60)
  store i32 %61, i32* @method, align 4
  %62 = load i32, i32* @method, align 4
  %63 = icmp slt i32 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %59
  %65 = load i32, i32* @exit_code, align 4
  call void @do_exit(i32 %65) #23
  unreachable

66:                                               ; preds = %59
  br label %67

67:                                               ; preds = %66, %56
  br label %68

68:                                               ; preds = %83, %67
  %69 = load i32 (i32, i32)*, i32 (i32, i32)** @work, align 8
  %70 = call i32 %69(i32 0, i32 1)
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %68
  br label %113

73:                                               ; preds = %68
  %74 = call i32 @input_eof()
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %73
  br label %84

77:                                               ; preds = %73
  %78 = load i32, i32* @ifd, align 4
  %79 = call i32 @get_method(i32 %78)
  store i32 %79, i32* @method, align 4
  %80 = load i32, i32* @method, align 4
  %81 = icmp slt i32 %80, 0
  br i1 %81, label %82, label %83

82:                                               ; preds = %77
  br label %113

83:                                               ; preds = %77
  store i64 0, i64* @bytes_out, align 8
  br label %68

84:                                               ; preds = %76
  %85 = load i32, i32* @list, align 4
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %89

87:                                               ; preds = %84
  %88 = load i32, i32* @method, align 4
  call void @do_list(i32 %88)
  br label %113

89:                                               ; preds = %84
  %90 = load i32, i32* @verbose, align 4
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %92, label %113

92:                                               ; preds = %89
  %93 = load i32, i32* @test, align 4
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %98

95:                                               ; preds = %92
  %96 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %97 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %96, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.81, i64 0, i64 0))
  br label %112

98:                                               ; preds = %92
  %99 = load i32, i32* @decompress, align 4
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %111, label %101

101:                                              ; preds = %98
  %102 = load i64, i64* @bytes_in, align 8
  %103 = load i64, i64* @bytes_out, align 8
  %104 = load i64, i64* @header_bytes, align 8
  %105 = sub nsw i64 %103, %104
  %106 = sub nsw i64 %102, %105
  %107 = load i64, i64* @bytes_in, align 8
  %108 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  call void @display_ratio(i64 %106, i64 %107, %struct.__sFILE* %108)
  %109 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %110 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %109, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i64 0, i64 0))
  br label %111

111:                                              ; preds = %101, %98
  br label %112

112:                                              ; preds = %111, %95
  br label %113

113:                                              ; preds = %112, %89, %87, %82, %72
  ret void
}

declare i32 @"\01_close"(i32) #4

; Function Attrs: nounwind
declare i8* @__strcpy_chk(i8*, i8*, i64) #3

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @do_list(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.tm*, align 8
  store i32 %0, i32* %2, align 4
  store i32 19, i32* %4, align 4
  %6 = load i32, i32* @do_list.first_time, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %26

8:                                                ; preds = %1
  %9 = load i32, i32* %2, align 4
  %10 = icmp sge i32 %9, 0
  br i1 %10, label %11, label %26

11:                                               ; preds = %8
  store i32 0, i32* @do_list.first_time, align 4
  %12 = load i32, i32* @verbose, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %11
  %15 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.139, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %11
  %17 = load i32, i32* @quiet, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %25, label %19

19:                                               ; preds = %16
  %20 = load i32, i32* %4, align 4
  %21 = load i32, i32* %4, align 4
  %22 = load i32, i32* %4, align 4
  %23 = load i32, i32* %4, align 4
  %24 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.140, i64 0, i64 0), i32 %20, i32 %21, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.141, i64 0, i64 0), i32 %22, i32 %23, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.142, i64 0, i64 0))
  br label %25

25:                                               ; preds = %19, %16
  br label %66

26:                                               ; preds = %8, %1
  %27 = load i32, i32* %2, align 4
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %29, label %65

29:                                               ; preds = %26
  %30 = load i64, i64* @total_in, align 8
  %31 = icmp sle i64 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %29
  %33 = load i64, i64* @total_out, align 8
  %34 = icmp sle i64 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %32, %29
  br label %148

36:                                               ; preds = %32
  %37 = load i32, i32* @verbose, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %36
  %40 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.143, i64 0, i64 0))
  br label %41

41:                                               ; preds = %39, %36
  %42 = load i32, i32* @verbose, align 4
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %47, label %44

44:                                               ; preds = %41
  %45 = load i32, i32* @quiet, align 4
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %56, label %47

47:                                               ; preds = %44, %41
  %48 = load %struct.__sFILE*, %struct.__sFILE** @__stdoutp, align 8
  %49 = load i64, i64* @total_in, align 8
  %50 = load i32, i32* %4, align 4
  call void @fprint_off(%struct.__sFILE* %48, i64 %49, i32 %50)
  %51 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.144, i64 0, i64 0))
  %52 = load %struct.__sFILE*, %struct.__sFILE** @__stdoutp, align 8
  %53 = load i64, i64* @total_out, align 8
  %54 = load i32, i32* %4, align 4
  call void @fprint_off(%struct.__sFILE* %52, i64 %53, i32 %54)
  %55 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.144, i64 0, i64 0))
  br label %56

56:                                               ; preds = %47, %44
  %57 = load i64, i64* @total_out, align 8
  %58 = load i64, i64* @total_in, align 8
  %59 = load i64, i64* @header_bytes, align 8
  %60 = sub nsw i64 %58, %59
  %61 = sub nsw i64 %57, %60
  %62 = load i64, i64* @total_out, align 8
  %63 = load %struct.__sFILE*, %struct.__sFILE** @__stdoutp, align 8
  call void @display_ratio(i64 %61, i64 %62, %struct.__sFILE* %63)
  %64 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.145, i64 0, i64 0))
  br label %148

65:                                               ; preds = %26
  br label %66

66:                                               ; preds = %65, %25
  store i64 -1, i64* %3, align 8
  %67 = load i32, i32* %2, align 4
  %68 = icmp eq i32 %67, 8
  br i1 %68, label %69, label %74

69:                                               ; preds = %66
  %70 = load i32, i32* @last_member, align 4
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %74, label %72

72:                                               ; preds = %69
  %73 = load i64, i64* @unzip_crc, align 8
  store i64 %73, i64* %3, align 8
  br label %74

74:                                               ; preds = %72, %69, %66
  %75 = load i32, i32* @verbose, align 4
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %77, label %107

77:                                               ; preds = %74
  %78 = call %struct.tm* @localtime(i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @time_stamp, i32 0, i32 0))
  store %struct.tm* %78, %struct.tm** %5, align 8
  %79 = load i32, i32* %2, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [9 x i8*], [9 x i8*]* @do_list.methods, i64 0, i64 %80
  %82 = load i8*, i8** %81, align 8
  %83 = load i64, i64* %3, align 8
  %84 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.146, i64 0, i64 0), i8* %82, i64 %83)
  %85 = load %struct.tm*, %struct.tm** %5, align 8
  %86 = icmp ne %struct.tm* %85, null
  br i1 %86, label %87, label %104

87:                                               ; preds = %77
  %88 = load %struct.tm*, %struct.tm** %5, align 8
  %89 = getelementptr inbounds %struct.tm, %struct.tm* %88, i32 0, i32 4
  %90 = load i32, i32* %89, align 8
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds [12 x [4 x i8]], [12 x [4 x i8]]* @do_list.month_abbr, i64 0, i64 %91
  %93 = getelementptr inbounds [4 x i8], [4 x i8]* %92, i64 0, i64 0
  %94 = load %struct.tm*, %struct.tm** %5, align 8
  %95 = getelementptr inbounds %struct.tm, %struct.tm* %94, i32 0, i32 3
  %96 = load i32, i32* %95, align 4
  %97 = load %struct.tm*, %struct.tm** %5, align 8
  %98 = getelementptr inbounds %struct.tm, %struct.tm* %97, i32 0, i32 2
  %99 = load i32, i32* %98, align 8
  %100 = load %struct.tm*, %struct.tm** %5, align 8
  %101 = getelementptr inbounds %struct.tm, %struct.tm* %100, i32 0, i32 1
  %102 = load i32, i32* %101, align 4
  %103 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.147, i64 0, i64 0), i8* %93, i32 %96, i32 %99, i32 %102)
  br label %106

104:                                              ; preds = %77
  %105 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.148, i64 0, i64 0))
  br label %106

106:                                              ; preds = %104, %87
  br label %107

107:                                              ; preds = %106, %74
  %108 = load %struct.__sFILE*, %struct.__sFILE** @__stdoutp, align 8
  %109 = load i64, i64* @bytes_in, align 8
  %110 = load i32, i32* %4, align 4
  call void @fprint_off(%struct.__sFILE* %108, i64 %109, i32 %110)
  %111 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.144, i64 0, i64 0))
  %112 = load %struct.__sFILE*, %struct.__sFILE** @__stdoutp, align 8
  %113 = load i64, i64* @bytes_out, align 8
  %114 = load i32, i32* %4, align 4
  call void @fprint_off(%struct.__sFILE* %112, i64 %113, i32 %114)
  %115 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.144, i64 0, i64 0))
  %116 = load i64, i64* @bytes_in, align 8
  %117 = icmp eq i64 %116, -1
  br i1 %117, label %118, label %119

118:                                              ; preds = %107
  store i64 -1, i64* @total_in, align 8
  store i64 0, i64* @header_bytes, align 8
  store i64 0, i64* @bytes_out, align 8
  store i64 0, i64* @bytes_in, align 8
  br label %127

119:                                              ; preds = %107
  %120 = load i64, i64* @total_in, align 8
  %121 = icmp sge i64 %120, 0
  br i1 %121, label %122, label %126

122:                                              ; preds = %119
  %123 = load i64, i64* @bytes_in, align 8
  %124 = load i64, i64* @total_in, align 8
  %125 = add nsw i64 %124, %123
  store i64 %125, i64* @total_in, align 8
  br label %126

126:                                              ; preds = %122, %119
  br label %127

127:                                              ; preds = %126, %118
  %128 = load i64, i64* @bytes_out, align 8
  %129 = icmp eq i64 %128, -1
  br i1 %129, label %130, label %131

130:                                              ; preds = %127
  store i64 -1, i64* @total_out, align 8
  store i64 0, i64* @header_bytes, align 8
  store i64 0, i64* @bytes_out, align 8
  store i64 0, i64* @bytes_in, align 8
  br label %139

131:                                              ; preds = %127
  %132 = load i64, i64* @total_out, align 8
  %133 = icmp sge i64 %132, 0
  br i1 %133, label %134, label %138

134:                                              ; preds = %131
  %135 = load i64, i64* @bytes_out, align 8
  %136 = load i64, i64* @total_out, align 8
  %137 = add nsw i64 %136, %135
  store i64 %137, i64* @total_out, align 8
  br label %138

138:                                              ; preds = %134, %131
  br label %139

139:                                              ; preds = %138, %130
  %140 = load i64, i64* @bytes_out, align 8
  %141 = load i64, i64* @bytes_in, align 8
  %142 = load i64, i64* @header_bytes, align 8
  %143 = sub nsw i64 %141, %142
  %144 = sub nsw i64 %140, %143
  %145 = load i64, i64* @bytes_out, align 8
  %146 = load %struct.__sFILE*, %struct.__sFILE** @__stdoutp, align 8
  call void @display_ratio(i64 %144, i64 %145, %struct.__sFILE* %146)
  %147 = call i32 (i8*, ...) @"\01_rpl_printf"(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.149, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  br label %148

148:                                              ; preds = %139, %56, %35
  ret void
}

declare i32 @fdatasync(i32) #4

declare i32* @__error() #4

declare i32 @"\01_rpl_printf"(i8*, ...) #4

declare %struct.tm* @localtime(i64*) #4

declare i32 @isatty(i32) #4

declare i32 @"\01_fstat$INODE64"(i32, %struct.stat*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @progerror(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %4 = call i32* @__error()
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %3, align 4
  %6 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %7 = load i8*, i8** @program_name, align 8
  %8 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i8* %7)
  %9 = load i32, i32* %3, align 4
  %10 = call i32* @__error()
  store i32 %9, i32* %10, align 4
  %11 = load i8*, i8** %2, align 8
  call void @rpl_perror(i8* %11)
  store i32 1, i32* @exit_code, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @get_input_size_and_time() #0 {
  %1 = alloca %struct.timespec, align 8
  store i64 -1, i64* @ifile_size, align 8
  store i64 -1, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @time_stamp, i32 0, i32 1), align 8
  %2 = load i16, i16* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 1), align 4
  %3 = zext i16 %2 to i32
  %4 = and i32 %3, 61440
  %5 = icmp eq i32 %4, 32768
  br i1 %5, label %6, label %22

6:                                                ; preds = %0
  %7 = load i64, i64* getelementptr inbounds (%struct.stat, %struct.stat* @istat, i32 0, i32 11), align 8
  store i64 %7, i64* @ifile_size, align 8
  %8 = load i32, i32* @no_time, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %6
  %11 = load i32, i32* @list, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %21

13:                                               ; preds = %10, %6
  %14 = call { i64, i64 } @get_stat_mtime(%struct.stat* @istat) #25
  %15 = bitcast %struct.timespec* %1 to { i64, i64 }*
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %15, i32 0, i32 0
  %17 = extractvalue { i64, i64 } %14, 0
  store i64 %17, i64* %16, align 8
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %15, i32 0, i32 1
  %19 = extractvalue { i64, i64 } %14, 1
  store i64 %19, i64* %18, align 8
  %20 = bitcast %struct.timespec* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.timespec* @time_stamp to i8*), i8* align 8 %20, i64 16, i1 false)
  br label %21

21:                                               ; preds = %13, %10
  br label %22

22:                                               ; preds = %21, %0
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @get_method(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8, align 1
  %5 = alloca [10 x i8], align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca [2 x i8], align 1
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %16 = load i32, i32* @force, align 4
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %56

18:                                               ; preds = %1
  %19 = load i32, i32* @to_stdout, align 4
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %56

21:                                               ; preds = %18
  %22 = load i32, i32* @inptr, align 4
  %23 = load i32, i32* @insize, align 4
  %24 = icmp ult i32 %22, %23
  br i1 %24, label %25, label %32

25:                                               ; preds = %21
  %26 = load i32, i32* @inptr, align 4
  %27 = add i32 %26, 1
  store i32 %27, i32* @inptr, align 4
  %28 = zext i32 %26 to i64
  %29 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  br label %34

32:                                               ; preds = %21
  %33 = call i32 @fill_inbuf(i32 1)
  br label %34

34:                                               ; preds = %32, %25
  %35 = phi i32 [ %31, %25 ], [ %33, %32 ]
  store i32 %35, i32* %6, align 4
  %36 = load i32, i32* %6, align 4
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 0
  store i8 %37, i8* %38, align 1
  %39 = load i32, i32* @inptr, align 4
  %40 = load i32, i32* @insize, align 4
  %41 = icmp ult i32 %39, %40
  br i1 %41, label %42, label %49

42:                                               ; preds = %34
  %43 = load i32, i32* @inptr, align 4
  %44 = add i32 %43, 1
  store i32 %44, i32* @inptr, align 4
  %45 = zext i32 %43 to i64
  %46 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  br label %51

49:                                               ; preds = %34
  %50 = call i32 @fill_inbuf(i32 1)
  br label %51

51:                                               ; preds = %49, %42
  %52 = phi i32 [ %48, %42 ], [ %50, %49 ]
  store i32 %52, i32* %7, align 4
  %53 = load i32, i32* %7, align 4
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 1
  store i8 %54, i8* %55, align 1
  br label %112

56:                                               ; preds = %18, %1
  %57 = load i32, i32* @inptr, align 4
  %58 = load i32, i32* @insize, align 4
  %59 = icmp ult i32 %57, %58
  br i1 %59, label %60, label %67

60:                                               ; preds = %56
  %61 = load i32, i32* @inptr, align 4
  %62 = add i32 %61, 1
  store i32 %62, i32* @inptr, align 4
  %63 = zext i32 %61 to i64
  %64 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  br label %69

67:                                               ; preds = %56
  %68 = call i32 @fill_inbuf(i32 0)
  br label %69

69:                                               ; preds = %67, %60
  %70 = phi i32 [ %66, %60 ], [ %68, %67 ]
  %71 = trunc i32 %70 to i8
  %72 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 0
  store i8 %71, i8* %72, align 1
  store i32 0, i32* %6, align 4
  %73 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 0
  %74 = load i8, i8* %73, align 1
  %75 = icmp ne i8 %74, 0
  br i1 %75, label %76, label %93

76:                                               ; preds = %69
  %77 = load i32, i32* @inptr, align 4
  %78 = load i32, i32* @insize, align 4
  %79 = icmp ult i32 %77, %78
  br i1 %79, label %80, label %87

80:                                               ; preds = %76
  %81 = load i32, i32* @inptr, align 4
  %82 = add i32 %81, 1
  store i32 %82, i32* @inptr, align 4
  %83 = zext i32 %81 to i64
  %84 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  br label %89

87:                                               ; preds = %76
  %88 = call i32 @fill_inbuf(i32 0)
  br label %89

89:                                               ; preds = %87, %80
  %90 = phi i32 [ %86, %80 ], [ %88, %87 ]
  %91 = trunc i32 %90 to i8
  %92 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 1
  store i8 %91, i8* %92, align 1
  store i32 0, i32* %7, align 4
  br label %111

93:                                               ; preds = %69
  %94 = load i32, i32* @inptr, align 4
  %95 = load i32, i32* @insize, align 4
  %96 = icmp ult i32 %94, %95
  br i1 %96, label %97, label %104

97:                                               ; preds = %93
  %98 = load i32, i32* @inptr, align 4
  %99 = add i32 %98, 1
  store i32 %99, i32* @inptr, align 4
  %100 = zext i32 %98 to i64
  %101 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  br label %106

104:                                              ; preds = %93
  %105 = call i32 @fill_inbuf(i32 1)
  br label %106

106:                                              ; preds = %104, %97
  %107 = phi i32 [ %103, %97 ], [ %105, %104 ]
  store i32 %107, i32* %7, align 4
  %108 = load i32, i32* %7, align 4
  %109 = trunc i32 %108 to i8
  %110 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 1
  store i8 %109, i8* %110, align 1
  br label %111

111:                                              ; preds = %106, %89
  br label %112

112:                                              ; preds = %111, %51
  store i32 -1, i32* @method, align 4
  %113 = load i32, i32* @part_nb, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* @part_nb, align 4
  store i64 0, i64* @header_bytes, align 8
  store i32 0, i32* @last_member, align 4
  %115 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 0
  %116 = call i32 @memcmp(i8* %115, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.82, i64 0, i64 0), i64 2)
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %122, label %118

118:                                              ; preds = %112
  %119 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 0
  %120 = call i32 @memcmp(i8* %119, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.83, i64 0, i64 0), i64 2)
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %558

122:                                              ; preds = %118, %112
  %123 = load i32, i32* @inptr, align 4
  %124 = load i32, i32* @insize, align 4
  %125 = icmp ult i32 %123, %124
  br i1 %125, label %126, label %133

126:                                              ; preds = %122
  %127 = load i32, i32* @inptr, align 4
  %128 = add i32 %127, 1
  store i32 %128, i32* @inptr, align 4
  %129 = zext i32 %127 to i64
  %130 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %129
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  br label %135

133:                                              ; preds = %122
  %134 = call i32 @fill_inbuf(i32 0)
  br label %135

135:                                              ; preds = %133, %126
  %136 = phi i32 [ %132, %126 ], [ %134, %133 ]
  store i32 %136, i32* @method, align 4
  %137 = load i32, i32* @method, align 4
  %138 = icmp ne i32 %137, 8
  br i1 %138, label %139, label %144

139:                                              ; preds = %135
  %140 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %141 = load i8*, i8** @program_name, align 8
  %142 = load i32, i32* @method, align 4
  %143 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %140, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.84, i64 0, i64 0), i8* %141, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %142)
  store i32 1, i32* @exit_code, align 4
  store i32 -1, i32* %2, align 4
  br label %685

144:                                              ; preds = %135
  store i32 (i32, i32)* @unzip, i32 (i32, i32)** @work, align 8
  %145 = load i32, i32* @inptr, align 4
  %146 = load i32, i32* @insize, align 4
  %147 = icmp ult i32 %145, %146
  br i1 %147, label %148, label %155

148:                                              ; preds = %144
  %149 = load i32, i32* @inptr, align 4
  %150 = add i32 %149, 1
  store i32 %150, i32* @inptr, align 4
  %151 = zext i32 %149 to i64
  %152 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %151
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  br label %157

155:                                              ; preds = %144
  %156 = call i32 @fill_inbuf(i32 0)
  br label %157

157:                                              ; preds = %155, %148
  %158 = phi i32 [ %154, %148 ], [ %156, %155 ]
  %159 = trunc i32 %158 to i8
  store i8 %159, i8* %4, align 1
  %160 = load i8, i8* %4, align 1
  %161 = zext i8 %160 to i32
  %162 = and i32 %161, 32
  %163 = icmp ne i32 %162, 0
  br i1 %163, label %164, label %168

164:                                              ; preds = %157
  %165 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %166 = load i8*, i8** @program_name, align 8
  %167 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %165, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.85, i64 0, i64 0), i8* %166, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  store i32 1, i32* @exit_code, align 4
  store i32 -1, i32* %2, align 4
  br label %685

168:                                              ; preds = %157
  %169 = load i8, i8* %4, align 1
  %170 = zext i8 %169 to i32
  %171 = and i32 %170, 192
  %172 = icmp ne i32 %171, 0
  br i1 %172, label %173, label %183

173:                                              ; preds = %168
  %174 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %175 = load i8*, i8** @program_name, align 8
  %176 = load i8, i8* %4, align 1
  %177 = zext i8 %176 to i32
  %178 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %174, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.86, i64 0, i64 0), i8* %175, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %177)
  store i32 1, i32* @exit_code, align 4
  %179 = load i32, i32* @force, align 4
  %180 = icmp sle i32 %179, 1
  br i1 %180, label %181, label %182

181:                                              ; preds = %173
  store i32 -1, i32* %2, align 4
  br label %685

182:                                              ; preds = %173
  br label %183

183:                                              ; preds = %182, %168
  %184 = load i32, i32* @inptr, align 4
  %185 = load i32, i32* @insize, align 4
  %186 = icmp ult i32 %184, %185
  br i1 %186, label %187, label %194

187:                                              ; preds = %183
  %188 = load i32, i32* @inptr, align 4
  %189 = add i32 %188, 1
  store i32 %189, i32* @inptr, align 4
  %190 = zext i32 %188 to i64
  %191 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %190
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %192 to i32
  br label %196

194:                                              ; preds = %183
  %195 = call i32 @fill_inbuf(i32 0)
  br label %196

196:                                              ; preds = %194, %187
  %197 = phi i32 [ %193, %187 ], [ %195, %194 ]
  %198 = sext i32 %197 to i64
  store i64 %198, i64* %8, align 8
  %199 = load i32, i32* @inptr, align 4
  %200 = load i32, i32* @insize, align 4
  %201 = icmp ult i32 %199, %200
  br i1 %201, label %202, label %209

202:                                              ; preds = %196
  %203 = load i32, i32* @inptr, align 4
  %204 = add i32 %203, 1
  store i32 %204, i32* @inptr, align 4
  %205 = zext i32 %203 to i64
  %206 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %205
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i32
  br label %211

209:                                              ; preds = %196
  %210 = call i32 @fill_inbuf(i32 0)
  br label %211

211:                                              ; preds = %209, %202
  %212 = phi i32 [ %208, %202 ], [ %210, %209 ]
  %213 = sext i32 %212 to i64
  %214 = shl i64 %213, 8
  %215 = load i64, i64* %8, align 8
  %216 = or i64 %215, %214
  store i64 %216, i64* %8, align 8
  %217 = load i32, i32* @inptr, align 4
  %218 = load i32, i32* @insize, align 4
  %219 = icmp ult i32 %217, %218
  br i1 %219, label %220, label %227

220:                                              ; preds = %211
  %221 = load i32, i32* @inptr, align 4
  %222 = add i32 %221, 1
  store i32 %222, i32* @inptr, align 4
  %223 = zext i32 %221 to i64
  %224 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %223
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  br label %229

227:                                              ; preds = %211
  %228 = call i32 @fill_inbuf(i32 0)
  br label %229

229:                                              ; preds = %227, %220
  %230 = phi i32 [ %226, %220 ], [ %228, %227 ]
  %231 = sext i32 %230 to i64
  %232 = shl i64 %231, 16
  %233 = load i64, i64* %8, align 8
  %234 = or i64 %233, %232
  store i64 %234, i64* %8, align 8
  %235 = load i32, i32* @inptr, align 4
  %236 = load i32, i32* @insize, align 4
  %237 = icmp ult i32 %235, %236
  br i1 %237, label %238, label %245

238:                                              ; preds = %229
  %239 = load i32, i32* @inptr, align 4
  %240 = add i32 %239, 1
  store i32 %240, i32* @inptr, align 4
  %241 = zext i32 %239 to i64
  %242 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %241
  %243 = load i8, i8* %242, align 1
  %244 = zext i8 %243 to i32
  br label %247

245:                                              ; preds = %229
  %246 = call i32 @fill_inbuf(i32 0)
  br label %247

247:                                              ; preds = %245, %238
  %248 = phi i32 [ %244, %238 ], [ %246, %245 ]
  %249 = sext i32 %248 to i64
  %250 = shl i64 %249, 24
  %251 = load i64, i64* %8, align 8
  %252 = or i64 %251, %250
  store i64 %252, i64* %8, align 8
  %253 = load i64, i64* %8, align 8
  %254 = icmp ne i64 %253, 0
  br i1 %254, label %255, label %277

255:                                              ; preds = %247
  %256 = load i32, i32* @no_time, align 4
  %257 = icmp ne i32 %256, 0
  br i1 %257, label %277, label %258

258:                                              ; preds = %255
  %259 = load i64, i64* %8, align 8
  %260 = icmp ule i64 %259, 9223372036854775807
  br i1 %260, label %261, label %263

261:                                              ; preds = %258
  %262 = load i64, i64* %8, align 8
  store i64 %262, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @time_stamp, i32 0, i32 0), align 8
  store i64 0, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @time_stamp, i32 0, i32 1), align 8
  br label %276

263:                                              ; preds = %258
  %264 = load i32, i32* @quiet, align 4
  %265 = icmp ne i32 %264, 0
  br i1 %265, label %271, label %266

266:                                              ; preds = %263
  %267 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %268 = load i8*, i8** @program_name, align 8
  %269 = load i64, i64* %8, align 8
  %270 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %267, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.87, i64 0, i64 0), i8* %268, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i64 %269)
  br label %271

271:                                              ; preds = %266, %263
  %272 = load i32, i32* @exit_code, align 4
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %274, label %275

274:                                              ; preds = %271
  store i32 2, i32* @exit_code, align 4
  br label %275

275:                                              ; preds = %274, %271
  store i64 9223372036854775807, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @time_stamp, i32 0, i32 0), align 8
  store i64 999999999, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @time_stamp, i32 0, i32 1), align 8
  br label %276

276:                                              ; preds = %275, %261
  br label %277

277:                                              ; preds = %276, %255, %247
  %278 = load i32, i32* @inptr, align 4
  %279 = load i32, i32* @insize, align 4
  %280 = icmp ult i32 %278, %279
  br i1 %280, label %281, label %288

281:                                              ; preds = %277
  %282 = load i32, i32* @inptr, align 4
  %283 = add i32 %282, 1
  store i32 %283, i32* @inptr, align 4
  %284 = zext i32 %282 to i64
  %285 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %284
  %286 = load i8, i8* %285, align 1
  %287 = zext i8 %286 to i32
  br label %290

288:                                              ; preds = %277
  %289 = call i32 @fill_inbuf(i32 0)
  br label %290

290:                                              ; preds = %288, %281
  %291 = phi i32 [ %287, %281 ], [ %289, %288 ]
  %292 = trunc i32 %291 to i8
  %293 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 8
  store i8 %292, i8* %293, align 1
  %294 = load i32, i32* @inptr, align 4
  %295 = load i32, i32* @insize, align 4
  %296 = icmp ult i32 %294, %295
  br i1 %296, label %297, label %304

297:                                              ; preds = %290
  %298 = load i32, i32* @inptr, align 4
  %299 = add i32 %298, 1
  store i32 %299, i32* @inptr, align 4
  %300 = zext i32 %298 to i64
  %301 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %300
  %302 = load i8, i8* %301, align 1
  %303 = zext i8 %302 to i32
  br label %306

304:                                              ; preds = %290
  %305 = call i32 @fill_inbuf(i32 0)
  br label %306

306:                                              ; preds = %304, %297
  %307 = phi i32 [ %303, %297 ], [ %305, %304 ]
  %308 = trunc i32 %307 to i8
  %309 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 9
  store i8 %308, i8* %309, align 1
  %310 = load i8, i8* %4, align 1
  %311 = zext i8 %310 to i32
  %312 = and i32 %311, 2
  %313 = icmp ne i32 %312, 0
  br i1 %313, label %314, label %339

314:                                              ; preds = %306
  %315 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 2
  store i8 8, i8* %315, align 1
  %316 = load i8, i8* %4, align 1
  %317 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 3
  store i8 %316, i8* %317, align 1
  %318 = load i64, i64* %8, align 8
  %319 = and i64 %318, 255
  %320 = trunc i64 %319 to i8
  %321 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 4
  store i8 %320, i8* %321, align 1
  %322 = load i64, i64* %8, align 8
  %323 = lshr i64 %322, 8
  %324 = and i64 %323, 255
  %325 = trunc i64 %324 to i8
  %326 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 5
  store i8 %325, i8* %326, align 1
  %327 = load i64, i64* %8, align 8
  %328 = lshr i64 %327, 16
  %329 = and i64 %328, 255
  %330 = trunc i64 %329 to i8
  %331 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 6
  store i8 %330, i8* %331, align 1
  %332 = load i64, i64* %8, align 8
  %333 = lshr i64 %332, 24
  %334 = trunc i64 %333 to i8
  %335 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 7
  store i8 %334, i8* %335, align 1
  %336 = call i64 @updcrc(i8* null, i32 0)
  %337 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 0
  %338 = call i64 @updcrc(i8* %337, i32 10)
  br label %339

339:                                              ; preds = %314, %306
  %340 = load i8, i8* %4, align 1
  %341 = zext i8 %340 to i32
  %342 = and i32 %341, 4
  %343 = icmp ne i32 %342, 0
  br i1 %343, label %344, label %402

344:                                              ; preds = %339
  %345 = load i32, i32* @inptr, align 4
  %346 = load i32, i32* @insize, align 4
  %347 = icmp ult i32 %345, %346
  br i1 %347, label %348, label %355

348:                                              ; preds = %344
  %349 = load i32, i32* @inptr, align 4
  %350 = add i32 %349, 1
  store i32 %350, i32* @inptr, align 4
  %351 = zext i32 %349 to i64
  %352 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %351
  %353 = load i8, i8* %352, align 1
  %354 = zext i8 %353 to i32
  br label %357

355:                                              ; preds = %344
  %356 = call i32 @fill_inbuf(i32 0)
  br label %357

357:                                              ; preds = %355, %348
  %358 = phi i32 [ %354, %348 ], [ %356, %355 ]
  %359 = trunc i32 %358 to i8
  %360 = getelementptr inbounds [2 x i8], [2 x i8]* %9, i64 0, i64 0
  store i8 %359, i8* %360, align 1
  %361 = zext i8 %359 to i32
  store i32 %361, i32* %10, align 4
  %362 = load i32, i32* @inptr, align 4
  %363 = load i32, i32* @insize, align 4
  %364 = icmp ult i32 %362, %363
  br i1 %364, label %365, label %372

365:                                              ; preds = %357
  %366 = load i32, i32* @inptr, align 4
  %367 = add i32 %366, 1
  store i32 %367, i32* @inptr, align 4
  %368 = zext i32 %366 to i64
  %369 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %368
  %370 = load i8, i8* %369, align 1
  %371 = zext i8 %370 to i32
  br label %374

372:                                              ; preds = %357
  %373 = call i32 @fill_inbuf(i32 0)
  br label %374

374:                                              ; preds = %372, %365
  %375 = phi i32 [ %371, %365 ], [ %373, %372 ]
  %376 = trunc i32 %375 to i8
  %377 = getelementptr inbounds [2 x i8], [2 x i8]* %9, i64 0, i64 1
  store i8 %376, i8* %377, align 1
  %378 = zext i8 %376 to i32
  %379 = shl i32 %378, 8
  %380 = load i32, i32* %10, align 4
  %381 = or i32 %380, %379
  store i32 %381, i32* %10, align 4
  %382 = load i32, i32* @verbose, align 4
  %383 = icmp ne i32 %382, 0
  br i1 %383, label %384, label %389

384:                                              ; preds = %374
  %385 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %386 = load i8*, i8** @program_name, align 8
  %387 = load i32, i32* %10, align 4
  %388 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %385, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.88, i64 0, i64 0), i8* %386, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %387)
  br label %389

389:                                              ; preds = %384, %374
  %390 = load i8, i8* %4, align 1
  %391 = zext i8 %390 to i32
  %392 = and i32 %391, 2
  %393 = icmp ne i32 %392, 0
  br i1 %393, label %394, label %397

394:                                              ; preds = %389
  %395 = getelementptr inbounds [2 x i8], [2 x i8]* %9, i64 0, i64 0
  %396 = call i64 @updcrc(i8* %395, i32 2)
  br label %397

397:                                              ; preds = %394, %389
  %398 = load i32, i32* %10, align 4
  %399 = zext i32 %398 to i64
  %400 = load i8, i8* %4, align 1
  %401 = zext i8 %400 to i32
  call void @discard_input_bytes(i64 %399, i32 %401)
  br label %402

402:                                              ; preds = %397, %339
  %403 = load i8, i8* %4, align 1
  %404 = zext i8 %403 to i32
  %405 = and i32 %404, 8
  %406 = icmp ne i32 %405, 0
  br i1 %406, label %407, label %487

407:                                              ; preds = %402
  %408 = load i32, i32* @no_name, align 4
  %409 = icmp ne i32 %408, 0
  br i1 %409, label %419, label %410

410:                                              ; preds = %407
  %411 = load i32, i32* @to_stdout, align 4
  %412 = icmp ne i32 %411, 0
  br i1 %412, label %413, label %416

413:                                              ; preds = %410
  %414 = load i32, i32* @list, align 4
  %415 = icmp ne i32 %414, 0
  br i1 %415, label %416, label %419

416:                                              ; preds = %413, %410
  %417 = load i32, i32* @part_nb, align 4
  %418 = icmp sgt i32 %417, 1
  br i1 %418, label %419, label %422

419:                                              ; preds = %416, %413, %407
  %420 = load i8, i8* %4, align 1
  %421 = zext i8 %420 to i32
  call void @discard_input_bytes(i64 -1, i32 %421)
  br label %486

422:                                              ; preds = %416
  %423 = call i8* @gzip_base_name(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)) #25
  store i8* %423, i8** %11, align 8
  %424 = load i8*, i8** %11, align 8
  store i8* %424, i8** %12, align 8
  br label %425

425:                                              ; preds = %452, %422
  %426 = load i32, i32* @inptr, align 4
  %427 = load i32, i32* @insize, align 4
  %428 = icmp ult i32 %426, %427
  br i1 %428, label %429, label %436

429:                                              ; preds = %425
  %430 = load i32, i32* @inptr, align 4
  %431 = add i32 %430, 1
  store i32 %431, i32* @inptr, align 4
  %432 = zext i32 %430 to i64
  %433 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %432
  %434 = load i8, i8* %433, align 1
  %435 = zext i8 %434 to i32
  br label %438

436:                                              ; preds = %425
  %437 = call i32 @fill_inbuf(i32 0)
  br label %438

438:                                              ; preds = %436, %429
  %439 = phi i32 [ %435, %429 ], [ %437, %436 ]
  %440 = trunc i32 %439 to i8
  %441 = load i8*, i8** %11, align 8
  store i8 %440, i8* %441, align 1
  %442 = load i8*, i8** %11, align 8
  %443 = getelementptr inbounds i8, i8* %442, i32 1
  store i8* %443, i8** %11, align 8
  %444 = load i8, i8* %442, align 1
  %445 = sext i8 %444 to i32
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %447, label %448

447:                                              ; preds = %438
  br label %453

448:                                              ; preds = %438
  %449 = load i8*, i8** %11, align 8
  %450 = icmp uge i8* %449, getelementptr inbounds (i8, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i64 1024)
  br i1 %450, label %451, label %452

451:                                              ; preds = %448
  call void @gzip_error(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.89, i64 0, i64 0)) #23
  unreachable

452:                                              ; preds = %448
  br label %425

453:                                              ; preds = %447
  %454 = load i8, i8* %4, align 1
  %455 = zext i8 %454 to i32
  %456 = and i32 %455, 2
  %457 = icmp ne i32 %456, 0
  br i1 %457, label %458, label %467

458:                                              ; preds = %453
  %459 = load i8*, i8** %12, align 8
  %460 = load i8*, i8** %11, align 8
  %461 = load i8*, i8** %12, align 8
  %462 = ptrtoint i8* %460 to i64
  %463 = ptrtoint i8* %461 to i64
  %464 = sub i64 %462, %463
  %465 = trunc i64 %464 to i32
  %466 = call i64 @updcrc(i8* %459, i32 %465)
  br label %467

467:                                              ; preds = %458, %453
  %468 = load i8*, i8** %12, align 8
  %469 = call i8* @gzip_base_name(i8* %468) #25
  store i8* %469, i8** %11, align 8
  %470 = load i8*, i8** %12, align 8
  %471 = load i8*, i8** %11, align 8
  %472 = load i8*, i8** %11, align 8
  %473 = call i64 @strlen(i8* %472)
  %474 = add i64 %473, 1
  %475 = load i8*, i8** %12, align 8
  %476 = call i64 @llvm.objectsize.i64.p0i8(i8* %475, i1 false, i1 true, i1 false)
  %477 = call i8* @__memmove_chk(i8* %470, i8* %471, i64 %474, i64 %476) #24
  %478 = load i32, i32* @list, align 4
  %479 = icmp ne i32 %478, 0
  br i1 %479, label %485, label %480

480:                                              ; preds = %467
  %481 = load i8*, i8** %12, align 8
  %482 = icmp ne i8* %481, null
  br i1 %482, label %483, label %484

483:                                              ; preds = %480
  store i32 0, i32* @list, align 4
  br label %484

484:                                              ; preds = %483, %480
  br label %485

485:                                              ; preds = %484, %467
  br label %486

486:                                              ; preds = %485, %419
  br label %487

487:                                              ; preds = %486, %402
  %488 = load i8, i8* %4, align 1
  %489 = zext i8 %488 to i32
  %490 = and i32 %489, 16
  %491 = icmp ne i32 %490, 0
  br i1 %491, label %492, label %495

492:                                              ; preds = %487
  %493 = load i8, i8* %4, align 1
  %494 = zext i8 %493 to i32
  call void @discard_input_bytes(i64 -1, i32 %494)
  br label %495

495:                                              ; preds = %492, %487
  %496 = load i8, i8* %4, align 1
  %497 = zext i8 %496 to i32
  %498 = and i32 %497, 2
  %499 = icmp ne i32 %498, 0
  br i1 %499, label %500, label %550

500:                                              ; preds = %495
  %501 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 0
  %502 = call i64 @updcrc(i8* %501, i32 0)
  %503 = and i64 %502, 65535
  %504 = trunc i64 %503 to i32
  store i32 %504, i32* %13, align 4
  %505 = load i32, i32* @inptr, align 4
  %506 = load i32, i32* @insize, align 4
  %507 = icmp ult i32 %505, %506
  br i1 %507, label %508, label %515

508:                                              ; preds = %500
  %509 = load i32, i32* @inptr, align 4
  %510 = add i32 %509, 1
  store i32 %510, i32* @inptr, align 4
  %511 = zext i32 %509 to i64
  %512 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %511
  %513 = load i8, i8* %512, align 1
  %514 = zext i8 %513 to i32
  br label %517

515:                                              ; preds = %500
  %516 = call i32 @fill_inbuf(i32 0)
  br label %517

517:                                              ; preds = %515, %508
  %518 = phi i32 [ %514, %508 ], [ %516, %515 ]
  store i32 %518, i32* %14, align 4
  %519 = load i32, i32* @inptr, align 4
  %520 = load i32, i32* @insize, align 4
  %521 = icmp ult i32 %519, %520
  br i1 %521, label %522, label %529

522:                                              ; preds = %517
  %523 = load i32, i32* @inptr, align 4
  %524 = add i32 %523, 1
  store i32 %524, i32* @inptr, align 4
  %525 = zext i32 %523 to i64
  %526 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %525
  %527 = load i8, i8* %526, align 1
  %528 = zext i8 %527 to i32
  br label %531

529:                                              ; preds = %517
  %530 = call i32 @fill_inbuf(i32 0)
  br label %531

531:                                              ; preds = %529, %522
  %532 = phi i32 [ %528, %522 ], [ %530, %529 ]
  %533 = shl i32 %532, 8
  %534 = load i32, i32* %14, align 4
  %535 = or i32 %534, %533
  store i32 %535, i32* %14, align 4
  %536 = load i32, i32* %14, align 4
  %537 = load i32, i32* %13, align 4
  %538 = icmp ne i32 %536, %537
  br i1 %538, label %539, label %549

539:                                              ; preds = %531
  %540 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %541 = load i8*, i8** @program_name, align 8
  %542 = load i32, i32* %14, align 4
  %543 = load i32, i32* %13, align 4
  %544 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %540, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.90, i64 0, i64 0), i8* %541, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %542, i32 %543)
  store i32 1, i32* @exit_code, align 4
  %545 = load i32, i32* @force, align 4
  %546 = icmp sle i32 %545, 1
  br i1 %546, label %547, label %548

547:                                              ; preds = %539
  store i32 -1, i32* %2, align 4
  br label %685

548:                                              ; preds = %539
  br label %549

549:                                              ; preds = %548, %531
  br label %550

550:                                              ; preds = %549, %495
  %551 = load i32, i32* @part_nb, align 4
  %552 = icmp eq i32 %551, 1
  br i1 %552, label %553, label %557

553:                                              ; preds = %550
  %554 = load i32, i32* @inptr, align 4
  %555 = add i32 %554, 8
  %556 = zext i32 %555 to i64
  store i64 %556, i64* @header_bytes, align 8
  br label %557

557:                                              ; preds = %553, %550
  br label %615

558:                                              ; preds = %118
  %559 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 0
  %560 = call i32 @memcmp(i8* %559, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.91, i64 0, i64 0), i64 2)
  %561 = icmp eq i32 %560, 0
  br i1 %561, label %562, label %574

562:                                              ; preds = %558
  %563 = load i32, i32* @inptr, align 4
  %564 = icmp eq i32 %563, 2
  br i1 %564, label %565, label %574

565:                                              ; preds = %562
  %566 = call i32 @memcmp(i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.91, i64 0, i64 0), i64 4)
  %567 = icmp eq i32 %566, 0
  br i1 %567, label %568, label %574

568:                                              ; preds = %565
  store i32 0, i32* @inptr, align 4
  store i32 (i32, i32)* @unzip, i32 (i32, i32)** @work, align 8
  %569 = load i32, i32* %3, align 4
  %570 = call i32 @check_zipfile(i32 %569)
  %571 = icmp ne i32 %570, 0
  br i1 %571, label %572, label %573

572:                                              ; preds = %568
  store i32 -1, i32* %2, align 4
  br label %685

573:                                              ; preds = %568
  store i32 1, i32* @last_member, align 4
  br label %614

574:                                              ; preds = %565, %562, %558
  %575 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 0
  %576 = call i32 @memcmp(i8* %575, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.92, i64 0, i64 0), i64 2)
  %577 = icmp eq i32 %576, 0
  br i1 %577, label %578, label %579

578:                                              ; preds = %574
  store i32 (i32, i32)* @unpack, i32 (i32, i32)** @work, align 8
  store i32 2, i32* @method, align 4
  br label %613

579:                                              ; preds = %574
  %580 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 0
  %581 = call i32 @memcmp(i8* %580, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.93, i64 0, i64 0), i64 2)
  %582 = icmp eq i32 %581, 0
  br i1 %582, label %583, label %584

583:                                              ; preds = %579
  store i32 (i32, i32)* @unlzw, i32 (i32, i32)** @work, align 8
  store i32 1, i32* @method, align 4
  store i32 1, i32* @last_member, align 4
  br label %612

584:                                              ; preds = %579
  %585 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 0
  %586 = call i32 @memcmp(i8* %585, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.94, i64 0, i64 0), i64 2)
  %587 = icmp eq i32 %586, 0
  br i1 %587, label %588, label %589

588:                                              ; preds = %584
  store i32 (i32, i32)* @unlzh, i32 (i32, i32)** @work, align 8
  store i32 3, i32* @method, align 4
  store i32 1, i32* @last_member, align 4
  br label %611

589:                                              ; preds = %584
  %590 = load i32, i32* @force, align 4
  %591 = icmp ne i32 %590, 0
  br i1 %591, label %592, label %610

592:                                              ; preds = %589
  %593 = load i32, i32* @to_stdout, align 4
  %594 = icmp ne i32 %593, 0
  br i1 %594, label %595, label %610

595:                                              ; preds = %592
  %596 = load i32, i32* @list, align 4
  %597 = icmp ne i32 %596, 0
  br i1 %597, label %610, label %598

598:                                              ; preds = %595
  store i32 0, i32* @method, align 4
  store i32 (i32, i32)* @copy, i32 (i32, i32)** @work, align 8
  %599 = load i32, i32* %7, align 4
  %600 = icmp ne i32 %599, -1
  br i1 %600, label %601, label %604

601:                                              ; preds = %598
  %602 = load i32, i32* @inptr, align 4
  %603 = add i32 %602, -1
  store i32 %603, i32* @inptr, align 4
  br label %604

604:                                              ; preds = %601, %598
  store i32 1, i32* @last_member, align 4
  %605 = load i32, i32* %6, align 4
  %606 = icmp ne i32 %605, -1
  br i1 %606, label %607, label %609

607:                                              ; preds = %604
  %608 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 0
  call void @write_buf(i32 1, i8* %608, i32 1)
  br label %609

609:                                              ; preds = %607, %604
  br label %610

610:                                              ; preds = %609, %595, %592, %589
  br label %611

611:                                              ; preds = %610, %588
  br label %612

612:                                              ; preds = %611, %583
  br label %613

613:                                              ; preds = %612, %578
  br label %614

614:                                              ; preds = %613, %573
  br label %615

615:                                              ; preds = %614, %557
  %616 = load i32, i32* @method, align 4
  %617 = icmp sge i32 %616, 0
  br i1 %617, label %618, label %620

618:                                              ; preds = %615
  %619 = load i32, i32* @method, align 4
  store i32 %619, i32* %2, align 4
  br label %685

620:                                              ; preds = %615
  %621 = load i32, i32* @part_nb, align 4
  %622 = icmp eq i32 %621, 1
  br i1 %622, label %623, label %627

623:                                              ; preds = %620
  %624 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %625 = load i8*, i8** @program_name, align 8
  %626 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %624, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.95, i64 0, i64 0), i8* %625, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  store i32 1, i32* @exit_code, align 4
  store i32 -1, i32* %2, align 4
  br label %685

627:                                              ; preds = %620
  %628 = getelementptr inbounds [10 x i8], [10 x i8]* %5, i64 0, i64 0
  %629 = load i8, i8* %628, align 1
  %630 = zext i8 %629 to i32
  %631 = icmp eq i32 %630, 0
  br i1 %631, label %632, label %673

632:                                              ; preds = %627
  %633 = load i32, i32* %7, align 4
  store i32 %633, i32* %15, align 4
  br label %634

634:                                              ; preds = %651, %632
  %635 = load i32, i32* %15, align 4
  %636 = icmp eq i32 %635, 0
  br i1 %636, label %637, label %653

637:                                              ; preds = %634
  br label %638

638:                                              ; preds = %637
  %639 = load i32, i32* @inptr, align 4
  %640 = load i32, i32* @insize, align 4
  %641 = icmp ult i32 %639, %640
  br i1 %641, label %642, label %649

642:                                              ; preds = %638
  %643 = load i32, i32* @inptr, align 4
  %644 = add i32 %643, 1
  store i32 %644, i32* @inptr, align 4
  %645 = zext i32 %643 to i64
  %646 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %645
  %647 = load i8, i8* %646, align 1
  %648 = zext i8 %647 to i32
  br label %651

649:                                              ; preds = %638
  %650 = call i32 @fill_inbuf(i32 1)
  br label %651

651:                                              ; preds = %649, %642
  %652 = phi i32 [ %648, %642 ], [ %650, %649 ]
  store i32 %652, i32* %15, align 4
  br label %634, !llvm.loop !29

653:                                              ; preds = %634
  %654 = load i32, i32* %15, align 4
  %655 = icmp eq i32 %654, -1
  br i1 %655, label %656, label %672

656:                                              ; preds = %653
  %657 = load i32, i32* @verbose, align 4
  %658 = icmp ne i32 %657, 0
  br i1 %658, label %659, label %671

659:                                              ; preds = %656
  %660 = load i32, i32* @quiet, align 4
  %661 = icmp ne i32 %660, 0
  br i1 %661, label %666, label %662

662:                                              ; preds = %659
  %663 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %664 = load i8*, i8** @program_name, align 8
  %665 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %663, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.96, i64 0, i64 0), i8* %664, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %666

666:                                              ; preds = %662, %659
  %667 = load i32, i32* @exit_code, align 4
  %668 = icmp eq i32 %667, 0
  br i1 %668, label %669, label %670

669:                                              ; preds = %666
  store i32 2, i32* @exit_code, align 4
  br label %670

670:                                              ; preds = %669, %666
  br label %671

671:                                              ; preds = %670, %656
  store i32 -3, i32* %2, align 4
  br label %685

672:                                              ; preds = %653
  br label %673

673:                                              ; preds = %672, %627
  %674 = load i32, i32* @quiet, align 4
  %675 = icmp ne i32 %674, 0
  br i1 %675, label %680, label %676

676:                                              ; preds = %673
  %677 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %678 = load i8*, i8** @program_name, align 8
  %679 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %677, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.97, i64 0, i64 0), i8* %678, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %680

680:                                              ; preds = %676, %673
  %681 = load i32, i32* @exit_code, align 4
  %682 = icmp eq i32 %681, 0
  br i1 %682, label %683, label %684

683:                                              ; preds = %680
  store i32 2, i32* @exit_code, align 4
  br label %684

684:                                              ; preds = %683, %680
  store i32 -2, i32* %2, align 4
  br label %685

685:                                              ; preds = %684, %671, %623, %618, %572, %547, %181, %164, %139
  %686 = load i32, i32* %2, align 4
  ret i32 %686
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @input_eof() #0 {
  %1 = alloca i32, align 4
  %2 = load i32, i32* @decompress, align 4
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %4, label %7

4:                                                ; preds = %0
  %5 = load i32, i32* @last_member, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %4, %0
  store i32 1, i32* %1, align 4
  br label %21

8:                                                ; preds = %4
  %9 = load i32, i32* @inptr, align 4
  %10 = load i32, i32* @insize, align 4
  %11 = icmp eq i32 %9, %10
  br i1 %11, label %12, label %20

12:                                               ; preds = %8
  %13 = load i32, i32* @insize, align 4
  %14 = icmp ne i32 %13, 262144
  br i1 %14, label %18, label %15

15:                                               ; preds = %12
  %16 = call i32 @fill_inbuf(i32 1)
  %17 = icmp eq i32 %16, -1
  br i1 %17, label %18, label %19

18:                                               ; preds = %15, %12
  store i32 1, i32* %1, align 4
  br label %21

19:                                               ; preds = %15
  store i32 0, i32* @inptr, align 4
  br label %20

20:                                               ; preds = %19, %8
  store i32 0, i32* %1, align 4
  br label %21

21:                                               ; preds = %20, %18, %7
  %22 = load i32, i32* %1, align 4
  ret i32 %22
}

declare i32 @memcmp(i8*, i8*, i64) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @discard_input_bytes(i64 %0, i32 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8, align 1
  store i64 %0, i64* %3, align 8
  store i32 %1, i32* %4, align 4
  br label %6

6:                                                ; preds = %41, %2
  %7 = load i64, i64* %3, align 8
  %8 = icmp ne i64 %7, 0
  br i1 %8, label %9, label %42

9:                                                ; preds = %6
  %10 = load i32, i32* @inptr, align 4
  %11 = load i32, i32* @insize, align 4
  %12 = icmp ult i32 %10, %11
  br i1 %12, label %13, label %20

13:                                               ; preds = %9
  %14 = load i32, i32* @inptr, align 4
  %15 = add i32 %14, 1
  store i32 %15, i32* @inptr, align 4
  %16 = zext i32 %14 to i64
  %17 = getelementptr inbounds [262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  br label %22

20:                                               ; preds = %9
  %21 = call i32 @fill_inbuf(i32 0)
  br label %22

22:                                               ; preds = %20, %13
  %23 = phi i32 [ %19, %13 ], [ %21, %20 ]
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %5, align 1
  %25 = load i32, i32* %4, align 4
  %26 = and i32 %25, 2
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = call i64 @updcrc(i8* %5, i32 1)
  br label %30

30:                                               ; preds = %28, %22
  %31 = load i64, i64* %3, align 8
  %32 = icmp ne i64 %31, -1
  br i1 %32, label %33, label %36

33:                                               ; preds = %30
  %34 = load i64, i64* %3, align 8
  %35 = add i64 %34, -1
  store i64 %35, i64* %3, align 8
  br label %41

36:                                               ; preds = %30
  %37 = load i8, i8* %5, align 1
  %38 = icmp ne i8 %37, 0
  br i1 %38, label %40, label %39

39:                                               ; preds = %36
  br label %42

40:                                               ; preds = %36
  br label %41

41:                                               ; preds = %40, %33
  br label %6, !llvm.loop !30

42:                                               ; preds = %39, %6
  ret void
}

; Function Attrs: nounwind
declare i8* @__memmove_chk(i8*, i8*, i64, i64) #3

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6

declare void @rpl_perror(i8*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @open_input_file(i8* %0, %struct.stat* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca %struct.stat*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8**, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  store %struct.stat* %1, %struct.stat** %5, align 8
  store i32 0, i32* %7, align 4
  store i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @open_input_file.suffixes, i64 0, i64 0), i8*** %8, align 8
  %13 = load i32, i32* @ascii, align 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %2
  %16 = load i32, i32* @decompress, align 4
  %17 = icmp ne i32 %16, 0
  %18 = xor i1 %17, true
  br label %19

19:                                               ; preds = %15, %2
  %20 = phi i1 [ false, %2 ], [ %18, %15 ]
  %21 = zext i1 %20 to i64
  %22 = select i1 %20, i32 0, i32 0
  %23 = or i32 131076, %22
  store i32 %23, i32* %11, align 4
  %24 = load i8*, i8** @z_suffix, align 8
  %25 = load i8**, i8*** %8, align 8
  store i8* %24, i8** %25, align 8
  %26 = load i8*, i8** %4, align 8
  %27 = call i64 @strlen(i8* %26)
  %28 = icmp ule i64 1023, %27
  br i1 %28, label %29, label %30

29:                                               ; preds = %19
  br label %111

30:                                               ; preds = %19
  %31 = load i8*, i8** %4, align 8
  %32 = call i8* @__strcpy_chk(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %31, i64 1024) #24
  %33 = load i32, i32* %11, align 4
  %34 = load %struct.stat*, %struct.stat** %5, align 8
  %35 = call i32 @open_and_stat(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %33, %struct.stat* %34)
  store i32 %35, i32* %10, align 4
  %36 = load i32, i32* %10, align 4
  %37 = icmp sle i32 0, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  %39 = load i32, i32* %10, align 4
  store i32 %39, i32* %3, align 4
  br label %116

40:                                               ; preds = %30
  %41 = load i32, i32* @decompress, align 4
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %47

43:                                               ; preds = %40
  %44 = call i32* @__error()
  %45 = load i32, i32* %44, align 4
  %46 = icmp ne i32 %45, 2
  br i1 %46, label %47, label %48

47:                                               ; preds = %43, %40
  call void @progerror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %116

48:                                               ; preds = %43
  %49 = call i8* @get_suffix(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  store i8* %49, i8** %9, align 8
  %50 = load i8*, i8** %9, align 8
  %51 = icmp ne i8* %50, null
  br i1 %51, label %52, label %53

52:                                               ; preds = %48
  call void @progerror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %116

53:                                               ; preds = %48
  %54 = call i64 @strlen(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  %55 = trunc i64 %54 to i32
  store i32 %55, i32* %6, align 4
  %56 = load i8*, i8** @z_suffix, align 8
  %57 = call i32 @strcmp(i8* %56, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0))
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %53
  %60 = load i8**, i8*** %8, align 8
  %61 = getelementptr inbounds i8*, i8** %60, i32 1
  store i8** %61, i8*** %8, align 8
  br label %62

62:                                               ; preds = %59, %53
  br label %63

63:                                               ; preds = %99, %62
  %64 = load i8**, i8*** %8, align 8
  %65 = load i8*, i8** %64, align 8
  store i8* %65, i8** %9, align 8
  store i8* %65, i8** %12, align 8
  %66 = load i8*, i8** %4, align 8
  %67 = call i8* @__strcpy_chk(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %66, i64 1024) #24
  %68 = load i32, i32* %6, align 4
  %69 = sext i32 %68 to i64
  %70 = load i8*, i8** %9, align 8
  %71 = call i64 @strlen(i8* %70)
  %72 = add i64 %69, %71
  %73 = icmp ule i64 1024, %72
  br i1 %73, label %74, label %75

74:                                               ; preds = %63
  br label %111

75:                                               ; preds = %63
  %76 = load i8*, i8** %9, align 8
  %77 = call i8* @__strcat_chk(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %76, i64 1024) #24
  %78 = load i32, i32* %11, align 4
  %79 = load %struct.stat*, %struct.stat** %5, align 8
  %80 = call i32 @open_and_stat(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %78, %struct.stat* %79)
  store i32 %80, i32* %10, align 4
  %81 = load i32, i32* %10, align 4
  %82 = icmp sle i32 0, %81
  br i1 %82, label %83, label %85

83:                                               ; preds = %75
  %84 = load i32, i32* %10, align 4
  store i32 %84, i32* %3, align 4
  br label %116

85:                                               ; preds = %75
  %86 = call i32* @__error()
  %87 = load i32, i32* %86, align 4
  %88 = icmp ne i32 %87, 2
  br i1 %88, label %89, label %90

89:                                               ; preds = %85
  call void @progerror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %116

90:                                               ; preds = %85
  %91 = load i8*, i8** %12, align 8
  %92 = load i8*, i8** @z_suffix, align 8
  %93 = call i32 @strcmp(i8* %91, i8* %92)
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %98

95:                                               ; preds = %90
  %96 = call i32* @__error()
  %97 = load i32, i32* %96, align 4
  store i32 %97, i32* %7, align 4
  br label %98

98:                                               ; preds = %95, %90
  br label %99

99:                                               ; preds = %98
  %100 = load i8**, i8*** %8, align 8
  %101 = getelementptr inbounds i8*, i8** %100, i32 1
  store i8** %101, i8*** %8, align 8
  %102 = load i8*, i8** %101, align 8
  %103 = icmp ne i8* %102, null
  br i1 %103, label %63, label %104, !llvm.loop !31

104:                                              ; preds = %99
  %105 = load i8*, i8** %4, align 8
  %106 = call i8* @__strcpy_chk(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %105, i64 1024) #24
  %107 = load i8*, i8** @z_suffix, align 8
  %108 = call i8* @__strcat_chk(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %107, i64 1024) #24
  %109 = load i32, i32* %7, align 4
  %110 = call i32* @__error()
  store i32 %109, i32* %110, align 4
  call void @progerror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %116

111:                                              ; preds = %74, %29
  %112 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %113 = load i8*, i8** @program_name, align 8
  %114 = load i8*, i8** %4, align 8
  %115 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %112, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.115, i64 0, i64 0), i8* %113, i8* %114)
  store i32 1, i32* @exit_code, align 4
  store i32 -1, i32* %3, align 4
  br label %116

116:                                              ; preds = %111, %104, %89, %83, %52, %47, %38
  %117 = load i32, i32* %3, align 4
  ret i32 %117
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @treat_dir(i32 %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca %struct.DIR*, align 8
  %6 = alloca [1024 x i8], align 16
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  %11 = load i32, i32* %3, align 4
  %12 = call %struct.DIR* @"\01_fdopendir$INODE64"(i32 %11)
  store %struct.DIR* %12, %struct.DIR** %5, align 8
  %13 = load %struct.DIR*, %struct.DIR** %5, align 8
  %14 = icmp eq %struct.DIR* %13, null
  br i1 %14, label %15, label %19

15:                                               ; preds = %2
  %16 = load i8*, i8** %4, align 8
  call void @progerror(i8* %16)
  %17 = load i32, i32* %3, align 4
  %18 = call i32 @"\01_close"(i32 %17)
  br label %105

19:                                               ; preds = %2
  %20 = load %struct.DIR*, %struct.DIR** %5, align 8
  %21 = call noalias i8* @streamsavedir(%struct.DIR* %20, i32 0)
  store i8* %21, i8** %7, align 8
  %22 = load i8*, i8** %7, align 8
  %23 = icmp ne i8* %22, null
  br i1 %23, label %26, label %24

24:                                               ; preds = %19
  %25 = load i8*, i8** %4, align 8
  call void @progerror(i8* %25)
  br label %26

26:                                               ; preds = %24, %19
  %27 = load %struct.DIR*, %struct.DIR** %5, align 8
  %28 = call i32 @"\01_closedir"(%struct.DIR* %27)
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %26
  %31 = load i8*, i8** %4, align 8
  call void @progerror(i8* %31)
  br label %32

32:                                               ; preds = %30, %26
  %33 = load i8*, i8** %7, align 8
  %34 = icmp ne i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %32
  br label %105

36:                                               ; preds = %32
  %37 = load i8*, i8** %7, align 8
  store i8* %37, i8** %8, align 8
  br label %38

38:                                               ; preds = %98, %36
  %39 = load i8*, i8** %8, align 8
  %40 = load i8, i8* %39, align 1
  %41 = icmp ne i8 %40, 0
  br i1 %41, label %42, label %103

42:                                               ; preds = %38
  %43 = load i8*, i8** %4, align 8
  %44 = call i64 @strlen(i8* %43)
  store i64 %44, i64* %10, align 8
  %45 = load i8*, i8** %8, align 8
  %46 = call i64 @strlen(i8* %45)
  store i64 %46, i64* %9, align 8
  %47 = load i8*, i8** %8, align 8
  %48 = call i32 @strcmp(i8* %47, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.120, i64 0, i64 0))
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %54, label %50

50:                                               ; preds = %42
  %51 = load i8*, i8** %8, align 8
  %52 = call i32 @strcmp(i8* %51, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.121, i64 0, i64 0))
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %50, %42
  br label %98

55:                                               ; preds = %50
  %56 = load i64, i64* %10, align 8
  %57 = load i64, i64* %9, align 8
  %58 = add i64 %56, %57
  %59 = icmp ult i64 %58, 1022
  br i1 %59, label %60, label %91

60:                                               ; preds = %55
  %61 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %62 = load i8*, i8** %4, align 8
  %63 = call i8* @__strcpy_chk(i8* %61, i8* %62, i64 1024) #24
  %64 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %65 = call i8* @last_component(i8* %64) #25
  %66 = load i8, i8* %65, align 1
  %67 = sext i8 %66 to i32
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %69, label %80

69:                                               ; preds = %60
  %70 = load i64, i64* %10, align 8
  %71 = sub i64 %70, 1
  %72 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = sext i8 %73 to i32
  %75 = icmp eq i32 %74, 47
  br i1 %75, label %80, label %76

76:                                               ; preds = %69
  %77 = load i64, i64* %10, align 8
  %78 = add i64 %77, 1
  store i64 %78, i64* %10, align 8
  %79 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 %77
  store i8 47, i8* %79, align 1
  br label %80

80:                                               ; preds = %76, %69, %60
  %81 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %82 = load i64, i64* %10, align 8
  %83 = getelementptr inbounds i8, i8* %81, i64 %82
  %84 = load i8*, i8** %8, align 8
  %85 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %86 = load i64, i64* %10, align 8
  %87 = getelementptr inbounds i8, i8* %85, i64 %86
  %88 = call i64 @llvm.objectsize.i64.p0i8(i8* %87, i1 false, i1 true, i1 false)
  %89 = call i8* @__strcpy_chk(i8* %83, i8* %84, i64 %88) #24
  %90 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  call void @treat_file(i8* %90)
  br label %97

91:                                               ; preds = %55
  %92 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %93 = load i8*, i8** @program_name, align 8
  %94 = load i8*, i8** %4, align 8
  %95 = load i8*, i8** %8, align 8
  %96 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %92, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.122, i64 0, i64 0), i8* %93, i8* %94, i8* %95)
  store i32 1, i32* @exit_code, align 4
  br label %97

97:                                               ; preds = %91, %80
  br label %98

98:                                               ; preds = %97, %54
  %99 = load i64, i64* %9, align 8
  %100 = add i64 %99, 1
  %101 = load i8*, i8** %8, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 %100
  store i8* %102, i8** %8, align 8
  br label %38, !llvm.loop !32

103:                                              ; preds = %38
  %104 = load i8*, i8** %7, align 8
  call void @rpl_free(i8* %104)
  br label %105

105:                                              ; preds = %103, %35, %15
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @make_ofname() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = call i8* @__strcpy_chk(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i64 1024) #24
  %4 = call i8* @get_suffix(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  store i8* %4, i8** %2, align 8
  %5 = load i32, i32* @decompress, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %7, label %57

7:                                                ; preds = %0
  %8 = load i8*, i8** %2, align 8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %10, label %39

10:                                               ; preds = %7
  %11 = load i32, i32* @recursive, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %10
  %14 = load i32, i32* @test, align 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %13
  store i32 0, i32* %1, align 4
  br label %101

17:                                               ; preds = %13, %10
  %18 = load i32, i32* @verbose, align 4
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %26, label %20

20:                                               ; preds = %17
  %21 = load i32, i32* @recursive, align 4
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %38, label %23

23:                                               ; preds = %20
  %24 = load i32, i32* @quiet, align 4
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %23, %17
  %27 = load i32, i32* @quiet, align 4
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %33, label %29

29:                                               ; preds = %26
  %30 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %31 = load i8*, i8** @program_name, align 8
  %32 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %30, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.123, i64 0, i64 0), i8* %31, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %33

33:                                               ; preds = %29, %26
  %34 = load i32, i32* @exit_code, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %33
  store i32 2, i32* @exit_code, align 4
  br label %37

37:                                               ; preds = %36, %33
  br label %38

38:                                               ; preds = %37, %23, %20
  store i32 2, i32* %1, align 4
  br label %101

39:                                               ; preds = %7
  %40 = load i8*, i8** %2, align 8
  %41 = call i8* @strlwr(i8* %40)
  %42 = load i8*, i8** %2, align 8
  %43 = call i32 @strcmp(i8* %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.117, i64 0, i64 0))
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %39
  %46 = load i8*, i8** %2, align 8
  %47 = call i32 @strcmp(i8* %46, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.116, i64 0, i64 0))
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %54

49:                                               ; preds = %45, %39
  %50 = load i8*, i8** %2, align 8
  %51 = load i8*, i8** %2, align 8
  %52 = call i64 @llvm.objectsize.i64.p0i8(i8* %51, i1 false, i1 true, i1 false)
  %53 = call i8* @__strcpy_chk(i8* %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.124, i64 0, i64 0), i64 %52) #24
  br label %56

54:                                               ; preds = %45
  %55 = load i8*, i8** %2, align 8
  store i8 0, i8* %55, align 1
  br label %56

56:                                               ; preds = %54, %49
  br label %88

57:                                               ; preds = %0
  %58 = load i8*, i8** %2, align 8
  %59 = icmp ne i8* %58, null
  br i1 %59, label %60, label %78

60:                                               ; preds = %57
  %61 = load i32, i32* @force, align 4
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %78, label %63

63:                                               ; preds = %60
  %64 = load i32, i32* @verbose, align 4
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %72, label %66

66:                                               ; preds = %63
  %67 = load i32, i32* @recursive, align 4
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %77, label %69

69:                                               ; preds = %66
  %70 = load i32, i32* @quiet, align 4
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %77, label %72

72:                                               ; preds = %69, %63
  %73 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %74 = load i8*, i8** @program_name, align 8
  %75 = load i8*, i8** %2, align 8
  %76 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %73, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.125, i64 0, i64 0), i8* %74, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %75)
  br label %77

77:                                               ; preds = %72, %69, %66
  store i32 2, i32* %1, align 4
  br label %101

78:                                               ; preds = %60, %57
  store i32 0, i32* @save_orig_name, align 4
  %79 = call i64 @strlen(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  %80 = load i64, i64* @z_len, align 8
  %81 = add i64 %79, %80
  %82 = icmp ule i64 1024, %81
  br i1 %82, label %83, label %84

83:                                               ; preds = %78
  br label %89

84:                                               ; preds = %78
  %85 = load i8*, i8** @z_suffix, align 8
  %86 = call i8* @__strcat_chk(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i8* %85, i64 1024) #24
  br label %87

87:                                               ; preds = %84
  br label %88

88:                                               ; preds = %87, %56
  store i32 0, i32* %1, align 4
  br label %101

89:                                               ; preds = %83
  %90 = load i32, i32* @quiet, align 4
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %89
  %93 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %94 = load i8*, i8** @program_name, align 8
  %95 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %93, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.115, i64 0, i64 0), i8* %94, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %96

96:                                               ; preds = %92, %89
  %97 = load i32, i32* @exit_code, align 4
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %100

99:                                               ; preds = %96
  store i32 2, i32* @exit_code, align 4
  br label %100

100:                                              ; preds = %99, %96
  store i32 2, i32* %1, align 4
  br label %101

101:                                              ; preds = %100, %88, %77, %38, %16
  %102 = load i32, i32* %1, align 4
  ret i32 %102
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @create_outfile() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %2, align 4
  %10 = load i32, i32* @ascii, align 4
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %0
  %13 = load i32, i32* @decompress, align 4
  %14 = icmp ne i32 %13, 0
  br label %15

15:                                               ; preds = %12, %0
  %16 = phi i1 [ false, %0 ], [ %14, %12 ]
  %17 = zext i1 %16 to i64
  %18 = select i1 %16, i32 0, i32 0
  %19 = or i32 2561, %18
  store i32 %19, i32* %3, align 4
  store i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i8** %4, align 8
  store i32 -2, i32* %5, align 4
  %20 = load i32, i32* @keep, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %34, label %22

22:                                               ; preds = %15
  %23 = call i8* @last_component(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0)) #25
  store i8* %23, i8** %6, align 8
  %24 = load i8*, i8** %6, align 8
  %25 = ptrtoint i8* %24 to i64
  %26 = sub i64 %25, ptrtoint ([1024 x i8]* @ofname to i64)
  %27 = call i32 @atdir_set(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i64 %26)
  store i32 %27, i32* %7, align 4
  %28 = load i32, i32* %7, align 4
  %29 = icmp sle i32 0, %28
  br i1 %29, label %30, label %33

30:                                               ; preds = %22
  %31 = load i8*, i8** %6, align 8
  store i8* %31, i8** %4, align 8
  %32 = load i32, i32* %7, align 4
  store i32 %32, i32* %5, align 4
  br label %33

33:                                               ; preds = %30, %22
  br label %34

34:                                               ; preds = %33, %15
  br label %35

35:                                               ; preds = %60, %34
  call void @volatile_strcpy(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @remove_ofname, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  %36 = call i32 @sigprocmask(i32 1, i32* @caught_signals, i32* %9)
  %37 = load i32, i32* %5, align 4
  %38 = load i8*, i8** %4, align 8
  %39 = load i32, i32* %3, align 4
  %40 = call i32 (i32, i8*, i32, ...) @openat_safer(i32 %37, i8* %38, i32 %39, i32 384)
  store i32 %40, i32* @ofd, align 4
  store volatile i32 %40, i32* @remove_ofname_fd, align 4
  %41 = call i32* @__error()
  %42 = load i32, i32* %41, align 4
  store i32 %42, i32* %8, align 4
  %43 = call i32 @sigprocmask(i32 3, i32* %9, i32* null)
  %44 = load i32, i32* @ofd, align 4
  %45 = icmp sle i32 0, %44
  br i1 %45, label %46, label %47

46:                                               ; preds = %35
  br label %61

47:                                               ; preds = %35
  %48 = load i32, i32* %8, align 4
  switch i32 %48, label %57 [
    i32 63, label %49
    i32 17, label %50
  ]

49:                                               ; preds = %47
  call void @shorten_name(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  store i32 1, i32* %2, align 4
  br label %60

50:                                               ; preds = %47
  %51 = call i32 @check_ofname()
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %56

53:                                               ; preds = %50
  %54 = load i32, i32* @ifd, align 4
  %55 = call i32 @"\01_close"(i32 %54)
  store i32 1, i32* %1, align 4
  br label %80

56:                                               ; preds = %50
  br label %60

57:                                               ; preds = %47
  call void @progerror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  %58 = load i32, i32* @ifd, align 4
  %59 = call i32 @"\01_close"(i32 %58)
  store i32 1, i32* %1, align 4
  br label %80

60:                                               ; preds = %56, %49
  br label %35

61:                                               ; preds = %46
  %62 = load i32, i32* %2, align 4
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %64, label %79

64:                                               ; preds = %61
  %65 = load i32, i32* @decompress, align 4
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %67, label %79

67:                                               ; preds = %64
  %68 = load i32, i32* @quiet, align 4
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %74, label %70

70:                                               ; preds = %67
  %71 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %72 = load i8*, i8** @program_name, align 8
  %73 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %71, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.126, i64 0, i64 0), i8* %72, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  br label %74

74:                                               ; preds = %70, %67
  %75 = load i32, i32* @exit_code, align 4
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %78

77:                                               ; preds = %74
  store i32 2, i32* @exit_code, align 4
  br label %78

78:                                               ; preds = %77, %74
  br label %79

79:                                               ; preds = %78, %64, %61
  store i32 0, i32* %1, align 4
  br label %80

80:                                               ; preds = %79, %57, %53
  %81 = load i32, i32* %1, align 4
  ret i32 %81
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @copy_stat(%struct.stat* %0) #0 {
  %2 = alloca %struct.stat*, align 8
  %3 = alloca i16, align 2
  %4 = alloca i32, align 4
  %5 = alloca i8, align 1
  %6 = alloca [2 x %struct.timespec], align 16
  %7 = alloca %struct.timespec, align 8
  %8 = alloca %struct.timespec, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.stat* %0, %struct.stat** %2, align 8
  %11 = load %struct.stat*, %struct.stat** %2, align 8
  %12 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 1
  %13 = load i16, i16* %12, align 4
  %14 = zext i16 %13 to i32
  %15 = and i32 %14, 511
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %3, align 2
  %17 = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %6, i64 0, i64 0
  %18 = load %struct.stat*, %struct.stat** %2, align 8
  %19 = call { i64, i64 } @get_stat_atime(%struct.stat* %18) #25
  %20 = bitcast %struct.timespec* %7 to { i64, i64 }*
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 0
  %22 = extractvalue { i64, i64 } %19, 0
  store i64 %22, i64* %21, align 8
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 1
  %24 = extractvalue { i64, i64 } %19, 1
  store i64 %24, i64* %23, align 8
  %25 = bitcast %struct.timespec* %17 to i8*
  %26 = bitcast %struct.timespec* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %25, i8* align 8 %26, i64 16, i1 false)
  %27 = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %6, i64 0, i64 1
  %28 = load %struct.stat*, %struct.stat** %2, align 8
  %29 = call { i64, i64 } @get_stat_mtime(%struct.stat* %28) #25
  %30 = bitcast %struct.timespec* %8 to { i64, i64 }*
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 0
  %32 = extractvalue { i64, i64 } %29, 0
  store i64 %32, i64* %31, align 8
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 1
  %34 = extractvalue { i64, i64 } %29, 1
  store i64 %34, i64* %33, align 8
  %35 = bitcast %struct.timespec* %27 to i8*
  %36 = bitcast %struct.timespec* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %35, i8* align 8 %36, i64 16, i1 false)
  %37 = load i32, i32* @decompress, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %57

39:                                               ; preds = %1
  %40 = load i64, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @time_stamp, i32 0, i32 1), align 8
  %41 = icmp sle i64 0, %40
  br i1 %41, label %42, label %57

42:                                               ; preds = %39
  %43 = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %6, i64 0, i64 1
  %44 = getelementptr inbounds %struct.timespec, %struct.timespec* %43, i32 0, i32 0
  %45 = load i64, i64* %44, align 16
  %46 = load i64, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @time_stamp, i32 0, i32 0), align 8
  %47 = icmp eq i64 %45, %46
  br i1 %47, label %48, label %54

48:                                               ; preds = %42
  %49 = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %6, i64 0, i64 1
  %50 = getelementptr inbounds %struct.timespec, %struct.timespec* %49, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = load i64, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @time_stamp, i32 0, i32 1), align 8
  %53 = icmp eq i64 %51, %52
  br label %54

54:                                               ; preds = %48, %42
  %55 = phi i1 [ false, %42 ], [ %53, %48 ]
  %56 = xor i1 %55, true
  br label %57

57:                                               ; preds = %54, %39, %1
  %58 = phi i1 [ false, %39 ], [ false, %1 ], [ %56, %54 ]
  %59 = zext i1 %58 to i8
  store i8 %59, i8* %5, align 1
  %60 = load i8, i8* %5, align 1
  %61 = trunc i8 %60 to i1
  br i1 %61, label %62, label %65

62:                                               ; preds = %57
  %63 = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %6, i64 0, i64 1
  %64 = bitcast %struct.timespec* %63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %64, i8* align 8 bitcast (%struct.timespec* @time_stamp to i8*), i64 16, i1 false)
  br label %65

65:                                               ; preds = %62, %57
  %66 = load i32, i32* @ofd, align 4
  %67 = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %6, i64 0, i64 0
  %68 = call i32 @fdutimens(i32 %66, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), %struct.timespec* %67)
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %80

70:                                               ; preds = %65
  %71 = load i8, i8* %5, align 1
  %72 = trunc i8 %71 to i1
  br i1 %72, label %73, label %79

73:                                               ; preds = %70
  %74 = load i32, i32* @verbose, align 4
  %75 = icmp slt i32 1, %74
  br i1 %75, label %76, label %79

76:                                               ; preds = %73
  %77 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %78 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %77, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.133, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  br label %79

79:                                               ; preds = %76, %73, %70
  br label %100

80:                                               ; preds = %65
  %81 = call i32* @__error()
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %9, align 4
  %83 = load i32, i32* @quiet, align 4
  %84 = icmp ne i32 %83, 0
  br i1 %84, label %89, label %85

85:                                               ; preds = %80
  %86 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %87 = load i8*, i8** @program_name, align 8
  %88 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %86, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i8* %87)
  br label %89

89:                                               ; preds = %85, %80
  %90 = load i32, i32* @exit_code, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  store i32 2, i32* @exit_code, align 4
  br label %93

93:                                               ; preds = %92, %89
  %94 = load i32, i32* @quiet, align 4
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %99, label %96

96:                                               ; preds = %93
  %97 = load i32, i32* %9, align 4
  %98 = call i32* @__error()
  store i32 %97, i32* %98, align 4
  call void @rpl_perror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  br label %99

99:                                               ; preds = %96, %93
  br label %100

100:                                              ; preds = %99, %79
  %101 = load i32, i32* @ofd, align 4
  %102 = load %struct.stat*, %struct.stat** %2, align 8
  %103 = getelementptr inbounds %struct.stat, %struct.stat* %102, i32 0, i32 5
  %104 = load i32, i32* %103, align 4
  call void @do_chown(i32 %101, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i32 -1, i32 %104)
  %105 = load i32, i32* @ofd, align 4
  %106 = load i16, i16* %3, align 2
  %107 = call i32 @"\01_fchmod"(i32 %105, i16 zeroext %106)
  store i32 %107, i32* %4, align 4
  %108 = load i32, i32* %4, align 4
  %109 = icmp ne i32 %108, 0
  br i1 %109, label %110, label %130

110:                                              ; preds = %100
  %111 = call i32* @__error()
  %112 = load i32, i32* %111, align 4
  store i32 %112, i32* %10, align 4
  %113 = load i32, i32* @quiet, align 4
  %114 = icmp ne i32 %113, 0
  br i1 %114, label %119, label %115

115:                                              ; preds = %110
  %116 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %117 = load i8*, i8** @program_name, align 8
  %118 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %116, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i8* %117)
  br label %119

119:                                              ; preds = %115, %110
  %120 = load i32, i32* @exit_code, align 4
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %119
  store i32 2, i32* @exit_code, align 4
  br label %123

123:                                              ; preds = %122, %119
  %124 = load i32, i32* @quiet, align 4
  %125 = icmp ne i32 %124, 0
  br i1 %125, label %129, label %126

126:                                              ; preds = %123
  %127 = load i32, i32* %10, align 4
  %128 = call i32* @__error()
  store i32 %127, i32* %128, align 4
  call void @rpl_perror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  br label %129

129:                                              ; preds = %126, %123
  br label %130

130:                                              ; preds = %129, %100
  %131 = load i32, i32* @ofd, align 4
  %132 = load %struct.stat*, %struct.stat** %2, align 8
  %133 = getelementptr inbounds %struct.stat, %struct.stat* %132, i32 0, i32 4
  %134 = load i32, i32* %133, align 8
  call void @do_chown(i32 %131, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0), i32 %134, i32 -1)
  ret void
}

declare i32 @"\01_fsync"(i32) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal zeroext i1 @atdir_eq(i8* %0, i64 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  store i8* @dot, i8** %3, align 8
  store i64 1, i64* %4, align 8
  br label %8

8:                                                ; preds = %7, %2
  %9 = load i8*, i8** %3, align 8
  %10 = load i64, i64* %4, align 8
  %11 = call i32 @memcmp(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @dfname, i64 0, i64 0), i8* %9, i64 %10)
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %19

13:                                               ; preds = %8
  %14 = load i64, i64* %4, align 8
  %15 = getelementptr inbounds [1024 x i8], [1024 x i8]* @dfname, i64 0, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = icmp ne i8 %16, 0
  %18 = xor i1 %17, true
  br label %19

19:                                               ; preds = %13, %8
  %20 = phi i1 [ false, %8 ], [ %18, %13 ]
  ret i1 %20
}

declare i32 @sigprocmask(i32, i32*, i32*) #4

declare i32 @rpl_unlinkat(i32, i8*, i32) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @remove_output_file(i1 zeroext %0) #0 {
  %2 = alloca i8, align 1
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [1024 x i8], align 16
  %6 = zext i1 %0 to i8
  store i8 %6, i8* %2, align 1
  %7 = load i8, i8* %2, align 1
  %8 = trunc i8 %7 to i1
  br i1 %8, label %11, label %9

9:                                                ; preds = %1
  %10 = call i32 @sigprocmask(i32 1, i32* @caught_signals, i32* %4)
  br label %11

11:                                               ; preds = %9, %1
  %12 = load volatile i32, i32* @remove_ofname_fd, align 4
  store i32 %12, i32* %3, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp sle i32 0, %13
  br i1 %14, label %15, label %21

15:                                               ; preds = %11
  store volatile i32 -1, i32* @remove_ofname_fd, align 4
  %16 = load i32, i32* %3, align 4
  %17 = call i32 @"\01_close"(i32 %16)
  %18 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  call void @volatile_strcpy(i8* %18, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @remove_ofname, i64 0, i64 0))
  %19 = getelementptr inbounds [1024 x i8], [1024 x i8]* %5, i64 0, i64 0
  %20 = call i32 @xunlink(i8* %19)
  br label %21

21:                                               ; preds = %15, %11
  %22 = load i8, i8* %2, align 1
  %23 = trunc i8 %22 to i1
  br i1 %23, label %26, label %24

24:                                               ; preds = %21
  %25 = call i32 @sigprocmask(i32 3, i32* %4, i32* null)
  br label %26

26:                                               ; preds = %24, %21
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @volatile_strcpy(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  br label %5

5:                                                ; preds = %12, %2
  %6 = load i8*, i8** %4, align 8
  %7 = getelementptr inbounds i8, i8* %6, i32 1
  store i8* %7, i8** %4, align 8
  %8 = load volatile i8, i8* %6, align 1
  %9 = load i8*, i8** %3, align 8
  %10 = getelementptr inbounds i8, i8* %9, i32 1
  store i8* %10, i8** %3, align 8
  store volatile i8 %8, i8* %9, align 1
  %11 = icmp ne i8 %8, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %5
  br label %5, !llvm.loop !33

13:                                               ; preds = %5
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @do_chown(i32 %0, i8* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %9 = load i32, i32* %5, align 4
  %10 = load i32, i32* %7, align 4
  %11 = load i32, i32* %8, align 4
  %12 = call i32 @fchown(i32 %9, i32 %10, i32 %11)
  ret void
}

declare i32 @"\01_fchmod"(i32, i16 zeroext) #4

declare i32 @fchown(i32, i32, i32) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @atdir_set(i8* %0, i64 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = load i64, i64* %4, align 8
  %7 = call zeroext i1 @atdir_eq(i8* %5, i64 %6)
  br i1 %7, label %25, label %8

8:                                                ; preds = %2
  %9 = load i32, i32* @dfd, align 4
  %10 = icmp sle i32 0, %9
  br i1 %10, label %11, label %14

11:                                               ; preds = %8
  %12 = load i32, i32* @dfd, align 4
  %13 = call i32 @"\01_close"(i32 %12)
  br label %14

14:                                               ; preds = %11, %8
  %15 = load i64, i64* %4, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %14
  store i8* @dot, i8** %3, align 8
  store i64 1, i64* %4, align 8
  br label %18

18:                                               ; preds = %17, %14
  %19 = load i8*, i8** %3, align 8
  %20 = load i64, i64* %4, align 8
  %21 = call i8* @__memcpy_chk(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @dfname, i64 0, i64 0), i8* %19, i64 %20, i64 1024) #24
  %22 = load i64, i64* %4, align 8
  %23 = getelementptr inbounds [1024 x i8], [1024 x i8]* @dfname, i64 0, i64 %22
  store i8 0, i8* %23, align 1
  %24 = call i32 (i8*, i32, ...) @open_safer(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @dfname, i64 0, i64 0), i32 1048576)
  store i32 %24, i32* @dfd, align 4
  br label %25

25:                                               ; preds = %18, %2
  %26 = load i32, i32* @dfd, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @shorten_name(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  store i8* null, i8** %4, align 8
  store i32 3, i32* %6, align 4
  %8 = load i8*, i8** %2, align 8
  %9 = call i64 @strlen(i8* %8)
  %10 = trunc i64 %9 to i32
  store i32 %10, i32* %3, align 4
  %11 = load i32, i32* @decompress, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %1
  %14 = load i32, i32* %3, align 4
  %15 = icmp sle i32 %14, 1
  br i1 %15, label %16, label %17

16:                                               ; preds = %13
  call void @gzip_error(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.127, i64 0, i64 0)) #23
  unreachable

17:                                               ; preds = %13
  %18 = load i8*, i8** %2, align 8
  %19 = load i32, i32* %3, align 4
  %20 = sub nsw i32 %19, 1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %18, i64 %21
  store i8 0, i8* %22, align 1
  br label %127

23:                                               ; preds = %1
  %24 = load i8*, i8** %2, align 8
  %25 = call i8* @get_suffix(i8* %24)
  store i8* %25, i8** %7, align 8
  %26 = load i8*, i8** %7, align 8
  %27 = icmp ne i8* %26, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %23
  call void @gzip_error(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.128, i64 0, i64 0)) #23
  unreachable

29:                                               ; preds = %23
  %30 = load i8*, i8** %7, align 8
  store i8 0, i8* %30, align 1
  store i32 1, i32* @save_orig_name, align 4
  %31 = load i32, i32* %3, align 4
  %32 = icmp sgt i32 %31, 4
  br i1 %32, label %33, label %45

33:                                               ; preds = %29
  %34 = load i8*, i8** %7, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 -4
  %36 = call i32 @strcmp(i8* %35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.124, i64 0, i64 0))
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %33
  %39 = load i8*, i8** %7, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 -4
  %41 = load i8*, i8** %7, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 -4
  %43 = call i64 @llvm.objectsize.i64.p0i8(i8* %42, i1 false, i1 true, i1 false)
  %44 = call i8* @__strcpy_chk(i8* %40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.117, i64 0, i64 0), i64 %43) #24
  br label %127

45:                                               ; preds = %33, %29
  br label %46

46:                                               ; preds = %83, %45
  %47 = load i8*, i8** %2, align 8
  %48 = call i8* @last_component(i8* %47) #25
  store i8* %48, i8** %7, align 8
  br label %49

49:                                               ; preds = %74, %46
  %50 = load i8*, i8** %7, align 8
  %51 = load i8, i8* %50, align 1
  %52 = icmp ne i8 %51, 0
  br i1 %52, label %53, label %75

53:                                               ; preds = %49
  %54 = load i8*, i8** %7, align 8
  %55 = call i64 @strcspn(i8* %54, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.120, i64 0, i64 0))
  %56 = trunc i64 %55 to i32
  store i32 %56, i32* %5, align 4
  %57 = load i32, i32* %5, align 4
  %58 = load i8*, i8** %7, align 8
  %59 = sext i32 %57 to i64
  %60 = getelementptr inbounds i8, i8* %58, i64 %59
  store i8* %60, i8** %7, align 8
  %61 = load i32, i32* %5, align 4
  %62 = load i32, i32* %6, align 4
  %63 = icmp sgt i32 %61, %62
  br i1 %63, label %64, label %67

64:                                               ; preds = %53
  %65 = load i8*, i8** %7, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 -1
  store i8* %66, i8** %4, align 8
  br label %67

67:                                               ; preds = %64, %53
  %68 = load i8*, i8** %7, align 8
  %69 = load i8, i8* %68, align 1
  %70 = icmp ne i8 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %67
  %72 = load i8*, i8** %7, align 8
  %73 = getelementptr inbounds i8, i8* %72, i32 1
  store i8* %73, i8** %7, align 8
  br label %74

74:                                               ; preds = %71, %67
  br label %49, !llvm.loop !34

75:                                               ; preds = %49
  br label %76

76:                                               ; preds = %75
  %77 = load i8*, i8** %4, align 8
  %78 = icmp eq i8* %77, null
  br i1 %78, label %79, label %83

79:                                               ; preds = %76
  %80 = load i32, i32* %6, align 4
  %81 = add nsw i32 %80, -1
  store i32 %81, i32* %6, align 4
  %82 = icmp ne i32 %81, 0
  br label %83

83:                                               ; preds = %79, %76
  %84 = phi i1 [ false, %76 ], [ %82, %79 ]
  br i1 %84, label %46, label %85, !llvm.loop !35

85:                                               ; preds = %83
  %86 = load i8*, i8** %4, align 8
  %87 = icmp ne i8* %86, null
  br i1 %87, label %88, label %103

88:                                               ; preds = %85
  br label %89

89:                                               ; preds = %95, %88
  %90 = load i8*, i8** %4, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 1
  %92 = load i8, i8* %91, align 1
  %93 = load i8*, i8** %4, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 0
  store i8 %92, i8* %94, align 1
  br label %95

95:                                               ; preds = %89
  %96 = load i8*, i8** %4, align 8
  %97 = getelementptr inbounds i8, i8* %96, i32 1
  store i8* %97, i8** %4, align 8
  %98 = load i8, i8* %96, align 1
  %99 = icmp ne i8 %98, 0
  br i1 %99, label %89, label %100, !llvm.loop !36

100:                                              ; preds = %95
  %101 = load i8*, i8** %4, align 8
  %102 = getelementptr inbounds i8, i8* %101, i32 -1
  store i8* %102, i8** %4, align 8
  br label %121

103:                                              ; preds = %85
  %104 = load i8*, i8** %2, align 8
  %105 = load i8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.120, i64 0, i64 0), align 1
  %106 = sext i8 %105 to i32
  %107 = call i8* @strrchr(i8* %104, i32 %106)
  store i8* %107, i8** %4, align 8
  %108 = load i8*, i8** %4, align 8
  %109 = icmp ne i8* %108, null
  br i1 %109, label %111, label %110

110:                                              ; preds = %103
  call void @gzip_error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.129, i64 0, i64 0)) #23
  unreachable

111:                                              ; preds = %103
  %112 = load i8*, i8** %4, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 1
  %114 = load i8, i8* %113, align 1
  %115 = sext i8 %114 to i32
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %120

117:                                              ; preds = %111
  %118 = load i8*, i8** %4, align 8
  %119 = getelementptr inbounds i8, i8* %118, i32 -1
  store i8* %119, i8** %4, align 8
  br label %120

120:                                              ; preds = %117, %111
  br label %121

121:                                              ; preds = %120, %100
  %122 = load i8*, i8** %4, align 8
  %123 = load i8*, i8** @z_suffix, align 8
  %124 = load i8*, i8** %4, align 8
  %125 = call i64 @llvm.objectsize.i64.p0i8(i8* %124, i1 false, i1 true, i1 false)
  %126 = call i8* @__strcpy_chk(i8* %122, i8* %123, i64 %125) #24
  br label %127

127:                                              ; preds = %121, %38, %17
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @check_ofname() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = load i32, i32* @force, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %35, label %5

5:                                                ; preds = %0
  store i32 0, i32* %2, align 4
  %6 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %7 = load i8*, i8** @program_name, align 8
  %8 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %6, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.130, i64 0, i64 0), i8* %7, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  %9 = load i32, i32* @foreground, align 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %24

11:                                               ; preds = %5
  %12 = load i8, i8* @presume_input_tty, align 1
  %13 = trunc i8 %12 to i1
  br i1 %13, label %17, label %14

14:                                               ; preds = %11
  %15 = call i32 @isatty(i32 0)
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %24

17:                                               ; preds = %14, %11
  %18 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %19 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %18, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.131, i64 0, i64 0))
  %20 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %21 = call i32 @rpl_fflush(%struct.__sFILE* %20)
  %22 = call zeroext i1 @yesno()
  %23 = zext i1 %22 to i32
  store i32 %23, i32* %2, align 4
  br label %24

24:                                               ; preds = %17, %14, %5
  %25 = load i32, i32* %2, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %24
  %28 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %29 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %28, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.132, i64 0, i64 0))
  %30 = load i32, i32* @exit_code, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %27
  store i32 2, i32* @exit_code, align 4
  br label %33

33:                                               ; preds = %32, %27
  store i32 1, i32* %1, align 4
  br label %40

34:                                               ; preds = %24
  br label %35

35:                                               ; preds = %34, %0
  %36 = call i32 @xunlink(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %39

38:                                               ; preds = %35
  call void @progerror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  store i32 1, i32* %1, align 4
  br label %40

39:                                               ; preds = %35
  store i32 0, i32* %1, align 4
  br label %40

40:                                               ; preds = %39, %38, %33
  %41 = load i32, i32* %1, align 4
  ret i32 %41
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i8* @get_suffix(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [33 x i8], align 16
  %6 = alloca i8**, align 8
  %7 = alloca i8, align 1
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  store i8 0, i8* %7, align 1
  store i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @get_suffix.known_suffixes, i64 0, i64 1), i8*** %6, align 8
  br label %12

12:                                               ; preds = %36, %1
  %13 = load i8**, i8*** %6, align 8
  %14 = load i8*, i8** %13, align 8
  %15 = icmp ne i8* %14, null
  br i1 %15, label %16, label %39

16:                                               ; preds = %12
  %17 = load i8**, i8*** %6, align 8
  %18 = load i8*, i8** %17, align 8
  %19 = call i64 @strlen(i8* %18)
  store i64 %19, i64* %8, align 8
  %20 = load i64, i64* @z_len, align 8
  %21 = load i64, i64* %8, align 8
  %22 = icmp ult i64 %20, %21
  br i1 %22, label %23, label %35

23:                                               ; preds = %16
  %24 = load i8*, i8** @z_suffix, align 8
  %25 = load i8**, i8*** %6, align 8
  %26 = load i8*, i8** %25, align 8
  %27 = load i64, i64* %8, align 8
  %28 = getelementptr inbounds i8, i8* %26, i64 %27
  %29 = load i64, i64* @z_len, align 8
  %30 = sub i64 0, %29
  %31 = getelementptr inbounds i8, i8* %28, i64 %30
  %32 = call i32 @strcmp(i8* %24, i8* %31)
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %23
  store i8 1, i8* %7, align 1
  br label %39

35:                                               ; preds = %23, %16
  br label %36

36:                                               ; preds = %35
  %37 = load i8**, i8*** %6, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i32 1
  store i8** %38, i8*** %6, align 8
  br label %12, !llvm.loop !37

39:                                               ; preds = %34, %12
  %40 = load i8*, i8** @z_suffix, align 8
  %41 = call noalias nonnull i8* @xstrdup(i8* %40)
  store i8* %41, i8** %9, align 8
  %42 = load i8*, i8** %9, align 8
  %43 = call i8* @strlwr(i8* %42)
  %44 = load i8*, i8** %9, align 8
  %45 = load i8, i8* %7, align 1
  %46 = trunc i8 %45 to i1
  %47 = zext i1 %46 to i64
  %48 = select i1 %46, i64 8, i64 0
  %49 = getelementptr inbounds [10 x i8*], [10 x i8*]* @get_suffix.known_suffixes, i64 0, i64 %48
  store i8* %44, i8** %49, align 8
  %50 = load i8, i8* %7, align 1
  %51 = trunc i8 %50 to i1
  %52 = zext i1 %51 to i32
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8*, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @get_suffix.known_suffixes, i64 0, i64 0), i64 %53
  store i8** %54, i8*** %6, align 8
  %55 = load i8*, i8** %2, align 8
  %56 = call i64 @strlen(i8* %55)
  %57 = trunc i64 %56 to i32
  store i32 %57, i32* %3, align 4
  %58 = load i32, i32* %3, align 4
  %59 = icmp sle i32 %58, 32
  br i1 %59, label %60, label %64

60:                                               ; preds = %39
  %61 = getelementptr inbounds [33 x i8], [33 x i8]* %5, i64 0, i64 0
  %62 = load i8*, i8** %2, align 8
  %63 = call i8* @__strcpy_chk(i8* %61, i8* %62, i64 33) #24
  br label %73

64:                                               ; preds = %39
  %65 = getelementptr inbounds [33 x i8], [33 x i8]* %5, i64 0, i64 0
  %66 = load i8*, i8** %2, align 8
  %67 = load i32, i32* %3, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %66, i64 %68
  %70 = getelementptr inbounds i8, i8* %69, i64 -30
  %71 = getelementptr inbounds i8, i8* %70, i64 -2
  %72 = call i8* @__strcpy_chk(i8* %65, i8* %71, i64 33) #24
  br label %73

73:                                               ; preds = %64, %60
  %74 = getelementptr inbounds [33 x i8], [33 x i8]* %5, i64 0, i64 0
  %75 = call i8* @strlwr(i8* %74)
  %76 = getelementptr inbounds [33 x i8], [33 x i8]* %5, i64 0, i64 0
  %77 = call i64 @strlen(i8* %76)
  %78 = trunc i64 %77 to i32
  store i32 %78, i32* %4, align 4
  store i8* null, i8** %10, align 8
  br label %79

79:                                               ; preds = %120, %73
  %80 = load i8**, i8*** %6, align 8
  %81 = load i8*, i8** %80, align 8
  %82 = call i64 @strlen(i8* %81)
  %83 = trunc i64 %82 to i32
  store i32 %83, i32* %11, align 4
  %84 = load i32, i32* %4, align 4
  %85 = load i32, i32* %11, align 4
  %86 = icmp sgt i32 %84, %85
  br i1 %86, label %87, label %119

87:                                               ; preds = %79
  %88 = load i32, i32* %4, align 4
  %89 = load i32, i32* %11, align 4
  %90 = sub nsw i32 %88, %89
  %91 = sub nsw i32 %90, 1
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [33 x i8], [33 x i8]* %5, i64 0, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = sext i8 %94 to i32
  %96 = icmp eq i32 %95, 47
  br i1 %96, label %119, label %97

97:                                               ; preds = %87
  %98 = getelementptr inbounds [33 x i8], [33 x i8]* %5, i64 0, i64 0
  %99 = load i32, i32* %4, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %98, i64 %100
  %102 = load i32, i32* %11, align 4
  %103 = sext i32 %102 to i64
  %104 = sub i64 0, %103
  %105 = getelementptr inbounds i8, i8* %101, i64 %104
  %106 = load i8**, i8*** %6, align 8
  %107 = load i8*, i8** %106, align 8
  %108 = call i32 @strcmp(i8* %105, i8* %107)
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %119

110:                                              ; preds = %97
  %111 = load i8*, i8** %2, align 8
  %112 = load i32, i32* %3, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8, i8* %111, i64 %113
  %115 = load i32, i32* %11, align 4
  %116 = sext i32 %115 to i64
  %117 = sub i64 0, %116
  %118 = getelementptr inbounds i8, i8* %114, i64 %117
  store i8* %118, i8** %10, align 8
  br label %125

119:                                              ; preds = %97, %87, %79
  br label %120

120:                                              ; preds = %119
  %121 = load i8**, i8*** %6, align 8
  %122 = getelementptr inbounds i8*, i8** %121, i32 1
  store i8** %122, i8*** %6, align 8
  %123 = load i8*, i8** %122, align 8
  %124 = icmp ne i8* %123, null
  br i1 %124, label %79, label %125, !llvm.loop !38

125:                                              ; preds = %120, %110
  %126 = load i8*, i8** %9, align 8
  call void @rpl_free(i8* %126)
  %127 = load i8*, i8** %10, align 8
  ret i8* %127
}

declare i64 @strcspn(i8*, i8*) #4

declare i8* @strrchr(i8*, i32) #4

; Function Attrs: nounwind
declare i8* @__strcat_chk(i8*, i8*, i64) #3

declare %struct.DIR* @"\01_fdopendir$INODE64"(i32) #4

declare i32 @"\01_closedir"(%struct.DIR*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @open_and_stat(i8* %0, i32 %1, %struct.stat* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.stat*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store %struct.stat* %2, %struct.stat** %7, align 8
  store i32 -2, i32* %9, align 4
  %14 = load i8*, i8** %5, align 8
  store i8* %14, i8** %10, align 8
  %15 = load i32, i32* @to_stdout, align 4
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %23, label %17

17:                                               ; preds = %3
  %18 = load i32, i32* @force, align 4
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %23, label %20

20:                                               ; preds = %17
  %21 = load i32, i32* %6, align 4
  %22 = or i32 %21, 256
  store i32 %22, i32* %6, align 4
  br label %23

23:                                               ; preds = %20, %17, %3
  %24 = load i32, i32* @keep, align 4
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %42, label %26

26:                                               ; preds = %23
  %27 = load i8*, i8** %5, align 8
  %28 = call i8* @last_component(i8* %27) #25
  store i8* %28, i8** %11, align 8
  %29 = load i8*, i8** %5, align 8
  %30 = load i8*, i8** %11, align 8
  %31 = load i8*, i8** %5, align 8
  %32 = ptrtoint i8* %30 to i64
  %33 = ptrtoint i8* %31 to i64
  %34 = sub i64 %32, %33
  %35 = call i32 @atdir_set(i8* %29, i64 %34)
  store i32 %35, i32* %12, align 4
  %36 = load i32, i32* %12, align 4
  %37 = icmp sle i32 0, %36
  br i1 %37, label %38, label %41

38:                                               ; preds = %26
  %39 = load i8*, i8** %11, align 8
  store i8* %39, i8** %10, align 8
  %40 = load i32, i32* %12, align 4
  store i32 %40, i32* %9, align 4
  br label %41

41:                                               ; preds = %38, %26
  br label %42

42:                                               ; preds = %41, %23
  %43 = load i32, i32* %9, align 4
  %44 = load i8*, i8** %10, align 8
  %45 = load i32, i32* %6, align 4
  %46 = call i32 (i32, i8*, i32, ...) @openat_safer(i32 %43, i8* %44, i32 %45)
  store i32 %46, i32* %8, align 4
  %47 = load i32, i32* %8, align 4
  %48 = icmp sle i32 0, %47
  br i1 %48, label %49, label %61

49:                                               ; preds = %42
  %50 = load i32, i32* %8, align 4
  %51 = load %struct.stat*, %struct.stat** %7, align 8
  %52 = call i32 @"\01_fstat$INODE64"(i32 %50, %struct.stat* %51)
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %61

54:                                               ; preds = %49
  %55 = call i32* @__error()
  %56 = load i32, i32* %55, align 4
  store i32 %56, i32* %13, align 4
  %57 = load i32, i32* %8, align 4
  %58 = call i32 @"\01_close"(i32 %57)
  %59 = load i32, i32* %13, align 4
  %60 = call i32* @__error()
  store i32 %59, i32* %60, align 4
  store i32 -1, i32* %4, align 4
  br label %63

61:                                               ; preds = %49, %42
  %62 = load i32, i32* %8, align 4
  store i32 %62, i32* %4, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = load i32, i32* %4, align 4
  ret i32 %64
}

declare i32 @sigemptyset(i32*) #4

declare i32 @sigaction(i32, %struct.sigaction*, %struct.sigaction*) #4

declare i32 @sigaddset(i32*, i32) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @abort_gzip_signal(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @remove_output_file(i1 zeroext true)
  %3 = load i32, i32* %2, align 4
  %4 = load volatile i32, i32* @exiting_signal, align 4
  %5 = icmp eq i32 %3, %4
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  call void @_exit(i32 2) #23
  unreachable

7:                                                ; preds = %1
  %8 = load i32, i32* %2, align 4
  %9 = call void (i32)* @signal(i32 %8, void (i32)* null)
  %10 = load i32, i32* %2, align 4
  %11 = call i32 @raise(i32 %10)
  ret void
}

declare i32 @sigismember(i32*, i32) #4

; Function Attrs: noreturn
declare void @_exit(i32) #7

declare void (i32)* @signal(i32, void (i32)*) #4

declare i32 @raise(i32) #4

; Function Attrs: noreturn
declare void @exit(i32) #7

; Function Attrs: noinline noreturn nounwind optnone ssp uwtable
define void @abort_gzip() #5 {
  call void @remove_output_file(i1 zeroext false)
  call void @do_exit(i32 1) #23
  unreachable
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @inflate() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* @outcnt, align 4
  store i32 0, i32* @bk, align 4
  store i64 0, i64* @bb, align 8
  store i32 0, i32* %4, align 4
  br label %5

5:                                                ; preds = %17, %0
  store i32 0, i32* @hufts, align 4
  %6 = call i32 @inflate_block(i32* %2)
  store i32 %6, i32* %3, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %5
  %9 = load i32, i32* %3, align 4
  store i32 %9, i32* %1, align 4
  br label %32

10:                                               ; preds = %5
  %11 = load i32, i32* @hufts, align 4
  %12 = load i32, i32* %4, align 4
  %13 = icmp ugt i32 %11, %12
  br i1 %13, label %14, label %16

14:                                               ; preds = %10
  %15 = load i32, i32* @hufts, align 4
  store i32 %15, i32* %4, align 4
  br label %16

16:                                               ; preds = %14, %10
  br label %17

17:                                               ; preds = %16
  %18 = load i32, i32* %2, align 4
  %19 = icmp ne i32 %18, 0
  %20 = xor i1 %19, true
  br i1 %20, label %5, label %21, !llvm.loop !39

21:                                               ; preds = %17
  br label %22

22:                                               ; preds = %25, %21
  %23 = load i32, i32* @bk, align 4
  %24 = icmp uge i32 %23, 8
  br i1 %24, label %25, label %30

25:                                               ; preds = %22
  %26 = load i32, i32* @bk, align 4
  %27 = sub i32 %26, 8
  store i32 %27, i32* @bk, align 4
  %28 = load i32, i32* @inptr, align 4
  %29 = add i32 %28, -1
  store i32 %29, i32* @inptr, align 4
  br label %22, !llvm.loop !40

30:                                               ; preds = %22
  %31 = load i32, i32* @outcnt, align 4
  store i32 %31, i32* @outcnt, align 4
  call void @flush_window()
  store i32 0, i32* %1, align 4
  br label %32

32:                                               ; preds = %30, %8
  %33 = load i32, i32* %1, align 4
  ret i32 %33
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @inflate_block(i32* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  %8 = load i64, i64* @bb, align 8
  store i64 %8, i64* %6, align 8
  %9 = load i32, i32* @bk, align 4
  store i32 %9, i32* %7, align 4
  %10 = load i32, i32* @outcnt, align 4
  store i32 %10, i32* %5, align 4
  br label %11

11:                                               ; preds = %28, %1
  %12 = load i32, i32* %7, align 4
  %13 = icmp ult i32 %12, 1
  br i1 %13, label %14, label %39

14:                                               ; preds = %11
  %15 = load i32, i32* @inptr, align 4
  %16 = load i32, i32* @insize, align 4
  %17 = icmp ult i32 %15, %16
  br i1 %17, label %18, label %25

18:                                               ; preds = %14
  %19 = load i32, i32* @inptr, align 4
  %20 = add i32 %19, 1
  store i32 %20, i32* @inptr, align 4
  %21 = zext i32 %19 to i64
  %22 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  br label %28

25:                                               ; preds = %14
  %26 = load i32, i32* %5, align 4
  store i32 %26, i32* @outcnt, align 4
  %27 = call i32 @fill_inbuf(i32 0)
  br label %28

28:                                               ; preds = %25, %18
  %29 = phi i32 [ %24, %18 ], [ %27, %25 ]
  %30 = trunc i32 %29 to i8
  %31 = zext i8 %30 to i64
  %32 = load i32, i32* %7, align 4
  %33 = zext i32 %32 to i64
  %34 = shl i64 %31, %33
  %35 = load i64, i64* %6, align 8
  %36 = or i64 %35, %34
  store i64 %36, i64* %6, align 8
  %37 = load i32, i32* %7, align 4
  %38 = add i32 %37, 8
  store i32 %38, i32* %7, align 4
  br label %11, !llvm.loop !41

39:                                               ; preds = %11
  %40 = load i64, i64* %6, align 8
  %41 = trunc i64 %40 to i32
  %42 = and i32 %41, 1
  %43 = load i32*, i32** %3, align 8
  store i32 %42, i32* %43, align 4
  %44 = load i64, i64* %6, align 8
  %45 = lshr i64 %44, 1
  store i64 %45, i64* %6, align 8
  %46 = load i32, i32* %7, align 4
  %47 = sub i32 %46, 1
  store i32 %47, i32* %7, align 4
  br label %48

48:                                               ; preds = %65, %39
  %49 = load i32, i32* %7, align 4
  %50 = icmp ult i32 %49, 2
  br i1 %50, label %51, label %76

51:                                               ; preds = %48
  %52 = load i32, i32* @inptr, align 4
  %53 = load i32, i32* @insize, align 4
  %54 = icmp ult i32 %52, %53
  br i1 %54, label %55, label %62

55:                                               ; preds = %51
  %56 = load i32, i32* @inptr, align 4
  %57 = add i32 %56, 1
  store i32 %57, i32* @inptr, align 4
  %58 = zext i32 %56 to i64
  %59 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  br label %65

62:                                               ; preds = %51
  %63 = load i32, i32* %5, align 4
  store i32 %63, i32* @outcnt, align 4
  %64 = call i32 @fill_inbuf(i32 0)
  br label %65

65:                                               ; preds = %62, %55
  %66 = phi i32 [ %61, %55 ], [ %64, %62 ]
  %67 = trunc i32 %66 to i8
  %68 = zext i8 %67 to i64
  %69 = load i32, i32* %7, align 4
  %70 = zext i32 %69 to i64
  %71 = shl i64 %68, %70
  %72 = load i64, i64* %6, align 8
  %73 = or i64 %72, %71
  store i64 %73, i64* %6, align 8
  %74 = load i32, i32* %7, align 4
  %75 = add i32 %74, 8
  store i32 %75, i32* %7, align 4
  br label %48, !llvm.loop !42

76:                                               ; preds = %48
  %77 = load i64, i64* %6, align 8
  %78 = trunc i64 %77 to i32
  %79 = and i32 %78, 3
  store i32 %79, i32* %4, align 4
  %80 = load i64, i64* %6, align 8
  %81 = lshr i64 %80, 2
  store i64 %81, i64* %6, align 8
  %82 = load i32, i32* %7, align 4
  %83 = sub i32 %82, 2
  store i32 %83, i32* %7, align 4
  %84 = load i64, i64* %6, align 8
  store i64 %84, i64* @bb, align 8
  %85 = load i32, i32* %7, align 4
  store i32 %85, i32* @bk, align 4
  %86 = load i32, i32* %4, align 4
  %87 = icmp eq i32 %86, 2
  br i1 %87, label %88, label %90

88:                                               ; preds = %76
  %89 = call i32 @inflate_dynamic()
  store i32 %89, i32* %2, align 4
  br label %101

90:                                               ; preds = %76
  %91 = load i32, i32* %4, align 4
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %90
  %94 = call i32 @inflate_stored()
  store i32 %94, i32* %2, align 4
  br label %101

95:                                               ; preds = %90
  %96 = load i32, i32* %4, align 4
  %97 = icmp eq i32 %96, 1
  br i1 %97, label %98, label %100

98:                                               ; preds = %95
  %99 = call i32 @inflate_fixed()
  store i32 %99, i32* %2, align 4
  br label %101

100:                                              ; preds = %95
  store i32 2, i32* %2, align 4
  br label %101

101:                                              ; preds = %100, %98, %93, %88
  %102 = load i32, i32* %2, align 4
  ret i32 %102
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @inflate_dynamic() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.huft*, align 8
  %9 = alloca %struct.huft*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [316 x i32], align 16
  %16 = alloca i64, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = load i64, i64* @bb, align 8
  store i64 %19, i64* %16, align 8
  %20 = load i32, i32* @bk, align 4
  store i32 %20, i32* %17, align 4
  %21 = load i32, i32* @outcnt, align 4
  store i32 %21, i32* %7, align 4
  br label %22

22:                                               ; preds = %39, %0
  %23 = load i32, i32* %17, align 4
  %24 = icmp ult i32 %23, 5
  br i1 %24, label %25, label %50

25:                                               ; preds = %22
  %26 = load i32, i32* @inptr, align 4
  %27 = load i32, i32* @insize, align 4
  %28 = icmp ult i32 %26, %27
  br i1 %28, label %29, label %36

29:                                               ; preds = %25
  %30 = load i32, i32* @inptr, align 4
  %31 = add i32 %30, 1
  store i32 %31, i32* @inptr, align 4
  %32 = zext i32 %30 to i64
  %33 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  br label %39

36:                                               ; preds = %25
  %37 = load i32, i32* %7, align 4
  store i32 %37, i32* @outcnt, align 4
  %38 = call i32 @fill_inbuf(i32 0)
  br label %39

39:                                               ; preds = %36, %29
  %40 = phi i32 [ %35, %29 ], [ %38, %36 ]
  %41 = trunc i32 %40 to i8
  %42 = zext i8 %41 to i64
  %43 = load i32, i32* %17, align 4
  %44 = zext i32 %43 to i64
  %45 = shl i64 %42, %44
  %46 = load i64, i64* %16, align 8
  %47 = or i64 %46, %45
  store i64 %47, i64* %16, align 8
  %48 = load i32, i32* %17, align 4
  %49 = add i32 %48, 8
  store i32 %49, i32* %17, align 4
  br label %22, !llvm.loop !43

50:                                               ; preds = %22
  %51 = load i64, i64* %16, align 8
  %52 = trunc i64 %51 to i32
  %53 = and i32 %52, 31
  %54 = add i32 257, %53
  store i32 %54, i32* %13, align 4
  %55 = load i64, i64* %16, align 8
  %56 = lshr i64 %55, 5
  store i64 %56, i64* %16, align 8
  %57 = load i32, i32* %17, align 4
  %58 = sub i32 %57, 5
  store i32 %58, i32* %17, align 4
  br label %59

59:                                               ; preds = %76, %50
  %60 = load i32, i32* %17, align 4
  %61 = icmp ult i32 %60, 5
  br i1 %61, label %62, label %87

62:                                               ; preds = %59
  %63 = load i32, i32* @inptr, align 4
  %64 = load i32, i32* @insize, align 4
  %65 = icmp ult i32 %63, %64
  br i1 %65, label %66, label %73

66:                                               ; preds = %62
  %67 = load i32, i32* @inptr, align 4
  %68 = add i32 %67, 1
  store i32 %68, i32* @inptr, align 4
  %69 = zext i32 %67 to i64
  %70 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  br label %76

73:                                               ; preds = %62
  %74 = load i32, i32* %7, align 4
  store i32 %74, i32* @outcnt, align 4
  %75 = call i32 @fill_inbuf(i32 0)
  br label %76

76:                                               ; preds = %73, %66
  %77 = phi i32 [ %72, %66 ], [ %75, %73 ]
  %78 = trunc i32 %77 to i8
  %79 = zext i8 %78 to i64
  %80 = load i32, i32* %17, align 4
  %81 = zext i32 %80 to i64
  %82 = shl i64 %79, %81
  %83 = load i64, i64* %16, align 8
  %84 = or i64 %83, %82
  store i64 %84, i64* %16, align 8
  %85 = load i32, i32* %17, align 4
  %86 = add i32 %85, 8
  store i32 %86, i32* %17, align 4
  br label %59, !llvm.loop !44

87:                                               ; preds = %59
  %88 = load i64, i64* %16, align 8
  %89 = trunc i64 %88 to i32
  %90 = and i32 %89, 31
  %91 = add i32 1, %90
  store i32 %91, i32* %14, align 4
  %92 = load i64, i64* %16, align 8
  %93 = lshr i64 %92, 5
  store i64 %93, i64* %16, align 8
  %94 = load i32, i32* %17, align 4
  %95 = sub i32 %94, 5
  store i32 %95, i32* %17, align 4
  br label %96

96:                                               ; preds = %113, %87
  %97 = load i32, i32* %17, align 4
  %98 = icmp ult i32 %97, 4
  br i1 %98, label %99, label %124

99:                                               ; preds = %96
  %100 = load i32, i32* @inptr, align 4
  %101 = load i32, i32* @insize, align 4
  %102 = icmp ult i32 %100, %101
  br i1 %102, label %103, label %110

103:                                              ; preds = %99
  %104 = load i32, i32* @inptr, align 4
  %105 = add i32 %104, 1
  store i32 %105, i32* @inptr, align 4
  %106 = zext i32 %104 to i64
  %107 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  br label %113

110:                                              ; preds = %99
  %111 = load i32, i32* %7, align 4
  store i32 %111, i32* @outcnt, align 4
  %112 = call i32 @fill_inbuf(i32 0)
  br label %113

113:                                              ; preds = %110, %103
  %114 = phi i32 [ %109, %103 ], [ %112, %110 ]
  %115 = trunc i32 %114 to i8
  %116 = zext i8 %115 to i64
  %117 = load i32, i32* %17, align 4
  %118 = zext i32 %117 to i64
  %119 = shl i64 %116, %118
  %120 = load i64, i64* %16, align 8
  %121 = or i64 %120, %119
  store i64 %121, i64* %16, align 8
  %122 = load i32, i32* %17, align 4
  %123 = add i32 %122, 8
  store i32 %123, i32* %17, align 4
  br label %96, !llvm.loop !45

124:                                              ; preds = %96
  %125 = load i64, i64* %16, align 8
  %126 = trunc i64 %125 to i32
  %127 = and i32 %126, 15
  %128 = add i32 4, %127
  store i32 %128, i32* %12, align 4
  %129 = load i64, i64* %16, align 8
  %130 = lshr i64 %129, 4
  store i64 %130, i64* %16, align 8
  %131 = load i32, i32* %17, align 4
  %132 = sub i32 %131, 4
  store i32 %132, i32* %17, align 4
  %133 = load i32, i32* %13, align 4
  %134 = icmp ugt i32 %133, 286
  br i1 %134, label %138, label %135

135:                                              ; preds = %124
  %136 = load i32, i32* %14, align 4
  %137 = icmp ugt i32 %136, 30
  br i1 %137, label %138, label %139

138:                                              ; preds = %135, %124
  store i32 1, i32* %1, align 4
  br label %529

139:                                              ; preds = %135
  store i32 0, i32* %3, align 4
  br label %140

140:                                              ; preds = %187, %139
  %141 = load i32, i32* %3, align 4
  %142 = load i32, i32* %12, align 4
  %143 = icmp ult i32 %141, %142
  br i1 %143, label %144, label %190

144:                                              ; preds = %140
  br label %145

145:                                              ; preds = %162, %144
  %146 = load i32, i32* %17, align 4
  %147 = icmp ult i32 %146, 3
  br i1 %147, label %148, label %173

148:                                              ; preds = %145
  %149 = load i32, i32* @inptr, align 4
  %150 = load i32, i32* @insize, align 4
  %151 = icmp ult i32 %149, %150
  br i1 %151, label %152, label %159

152:                                              ; preds = %148
  %153 = load i32, i32* @inptr, align 4
  %154 = add i32 %153, 1
  store i32 %154, i32* @inptr, align 4
  %155 = zext i32 %153 to i64
  %156 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  br label %162

159:                                              ; preds = %148
  %160 = load i32, i32* %7, align 4
  store i32 %160, i32* @outcnt, align 4
  %161 = call i32 @fill_inbuf(i32 0)
  br label %162

162:                                              ; preds = %159, %152
  %163 = phi i32 [ %158, %152 ], [ %161, %159 ]
  %164 = trunc i32 %163 to i8
  %165 = zext i8 %164 to i64
  %166 = load i32, i32* %17, align 4
  %167 = zext i32 %166 to i64
  %168 = shl i64 %165, %167
  %169 = load i64, i64* %16, align 8
  %170 = or i64 %169, %168
  store i64 %170, i64* %16, align 8
  %171 = load i32, i32* %17, align 4
  %172 = add i32 %171, 8
  store i32 %172, i32* %17, align 4
  br label %145, !llvm.loop !46

173:                                              ; preds = %145
  %174 = load i64, i64* %16, align 8
  %175 = trunc i64 %174 to i32
  %176 = and i32 %175, 7
  %177 = load i32, i32* %3, align 4
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds [19 x i32], [19 x i32]* @border, i64 0, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds [316 x i32], [316 x i32]* %15, i64 0, i64 %181
  store i32 %176, i32* %182, align 4
  %183 = load i64, i64* %16, align 8
  %184 = lshr i64 %183, 3
  store i64 %184, i64* %16, align 8
  %185 = load i32, i32* %17, align 4
  %186 = sub i32 %185, 3
  store i32 %186, i32* %17, align 4
  br label %187

187:                                              ; preds = %173
  %188 = load i32, i32* %3, align 4
  %189 = add i32 %188, 1
  store i32 %189, i32* %3, align 4
  br label %140, !llvm.loop !47

190:                                              ; preds = %140
  br label %191

191:                                              ; preds = %201, %190
  %192 = load i32, i32* %3, align 4
  %193 = icmp ult i32 %192, 19
  br i1 %193, label %194, label %204

194:                                              ; preds = %191
  %195 = load i32, i32* %3, align 4
  %196 = zext i32 %195 to i64
  %197 = getelementptr inbounds [19 x i32], [19 x i32]* @border, i64 0, i64 %196
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %198 to i64
  %200 = getelementptr inbounds [316 x i32], [316 x i32]* %15, i64 0, i64 %199
  store i32 0, i32* %200, align 4
  br label %201

201:                                              ; preds = %194
  %202 = load i32, i32* %3, align 4
  %203 = add i32 %202, 1
  store i32 %203, i32* %3, align 4
  br label %191, !llvm.loop !48

204:                                              ; preds = %191
  store i32 7, i32* %10, align 4
  %205 = getelementptr inbounds [316 x i32], [316 x i32]* %15, i64 0, i64 0
  %206 = call i32 @huft_build(i32* %205, i32 19, i32 19, i16* null, i16* null, %struct.huft** %8, i32* %10)
  store i32 %206, i32* %2, align 4
  %207 = icmp ne i32 %206, 0
  br i1 %207, label %208, label %216

208:                                              ; preds = %204
  %209 = load i32, i32* %2, align 4
  %210 = icmp eq i32 %209, 1
  br i1 %210, label %211, label %214

211:                                              ; preds = %208
  %212 = load %struct.huft*, %struct.huft** %8, align 8
  %213 = call i32 @huft_free(%struct.huft* %212)
  br label %214

214:                                              ; preds = %211, %208
  %215 = load i32, i32* %2, align 4
  store i32 %215, i32* %1, align 4
  br label %529

216:                                              ; preds = %204
  %217 = load %struct.huft*, %struct.huft** %8, align 8
  %218 = icmp eq %struct.huft* %217, null
  br i1 %218, label %219, label %220

219:                                              ; preds = %216
  store i32 2, i32* %1, align 4
  br label %529

220:                                              ; preds = %216
  %221 = load i32, i32* %13, align 4
  %222 = load i32, i32* %14, align 4
  %223 = add i32 %221, %222
  store i32 %223, i32* %6, align 4
  %224 = load i32, i32* %10, align 4
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i64 0, i64 %225
  %227 = load i16, i16* %226, align 2
  %228 = zext i16 %227 to i32
  store i32 %228, i32* %5, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %2, align 4
  br label %229

229:                                              ; preds = %477, %220
  %230 = load i32, i32* %2, align 4
  %231 = load i32, i32* %6, align 4
  %232 = icmp ult i32 %230, %231
  br i1 %232, label %233, label %478

233:                                              ; preds = %229
  br label %234

234:                                              ; preds = %252, %233
  %235 = load i32, i32* %17, align 4
  %236 = load i32, i32* %10, align 4
  %237 = icmp ult i32 %235, %236
  br i1 %237, label %238, label %263

238:                                              ; preds = %234
  %239 = load i32, i32* @inptr, align 4
  %240 = load i32, i32* @insize, align 4
  %241 = icmp ult i32 %239, %240
  br i1 %241, label %242, label %249

242:                                              ; preds = %238
  %243 = load i32, i32* @inptr, align 4
  %244 = add i32 %243, 1
  store i32 %244, i32* @inptr, align 4
  %245 = zext i32 %243 to i64
  %246 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %245
  %247 = load i8, i8* %246, align 1
  %248 = zext i8 %247 to i32
  br label %252

249:                                              ; preds = %238
  %250 = load i32, i32* %7, align 4
  store i32 %250, i32* @outcnt, align 4
  %251 = call i32 @fill_inbuf(i32 0)
  br label %252

252:                                              ; preds = %249, %242
  %253 = phi i32 [ %248, %242 ], [ %251, %249 ]
  %254 = trunc i32 %253 to i8
  %255 = zext i8 %254 to i64
  %256 = load i32, i32* %17, align 4
  %257 = zext i32 %256 to i64
  %258 = shl i64 %255, %257
  %259 = load i64, i64* %16, align 8
  %260 = or i64 %259, %258
  store i64 %260, i64* %16, align 8
  %261 = load i32, i32* %17, align 4
  %262 = add i32 %261, 8
  store i32 %262, i32* %17, align 4
  br label %234, !llvm.loop !49

263:                                              ; preds = %234
  %264 = load %struct.huft*, %struct.huft** %8, align 8
  %265 = load i64, i64* %16, align 8
  %266 = trunc i64 %265 to i32
  %267 = load i32, i32* %5, align 4
  %268 = and i32 %266, %267
  %269 = zext i32 %268 to i64
  %270 = getelementptr inbounds %struct.huft, %struct.huft* %264, i64 %269
  store %struct.huft* %270, %struct.huft** %9, align 8
  %271 = getelementptr inbounds %struct.huft, %struct.huft* %270, i32 0, i32 1
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i32
  store i32 %273, i32* %3, align 4
  %274 = load i32, i32* %3, align 4
  %275 = load i64, i64* %16, align 8
  %276 = zext i32 %274 to i64
  %277 = lshr i64 %275, %276
  store i64 %277, i64* %16, align 8
  %278 = load i32, i32* %3, align 4
  %279 = load i32, i32* %17, align 4
  %280 = sub i32 %279, %278
  store i32 %280, i32* %17, align 4
  %281 = load %struct.huft*, %struct.huft** %9, align 8
  %282 = getelementptr inbounds %struct.huft, %struct.huft* %281, i32 0, i32 0
  %283 = load i8, i8* %282, align 8
  %284 = zext i8 %283 to i32
  %285 = icmp eq i32 %284, 99
  br i1 %285, label %286, label %289

286:                                              ; preds = %263
  %287 = load %struct.huft*, %struct.huft** %8, align 8
  %288 = call i32 @huft_free(%struct.huft* %287)
  store i32 2, i32* %1, align 4
  br label %529

289:                                              ; preds = %263
  %290 = load %struct.huft*, %struct.huft** %9, align 8
  %291 = getelementptr inbounds %struct.huft, %struct.huft* %290, i32 0, i32 2
  %292 = bitcast %union.anon* %291 to i16*
  %293 = load i16, i16* %292, align 8
  %294 = zext i16 %293 to i32
  store i32 %294, i32* %3, align 4
  %295 = load i32, i32* %3, align 4
  %296 = icmp ult i32 %295, 16
  br i1 %296, label %297, label %303

297:                                              ; preds = %289
  %298 = load i32, i32* %3, align 4
  store i32 %298, i32* %4, align 4
  %299 = load i32, i32* %2, align 4
  %300 = add nsw i32 %299, 1
  store i32 %300, i32* %2, align 4
  %301 = sext i32 %299 to i64
  %302 = getelementptr inbounds [316 x i32], [316 x i32]* %15, i64 0, i64 %301
  store i32 %298, i32* %302, align 4
  br label %477

303:                                              ; preds = %289
  %304 = load i32, i32* %3, align 4
  %305 = icmp eq i32 %304, 16
  br i1 %305, label %306, label %362

306:                                              ; preds = %303
  br label %307

307:                                              ; preds = %324, %306
  %308 = load i32, i32* %17, align 4
  %309 = icmp ult i32 %308, 2
  br i1 %309, label %310, label %335

310:                                              ; preds = %307
  %311 = load i32, i32* @inptr, align 4
  %312 = load i32, i32* @insize, align 4
  %313 = icmp ult i32 %311, %312
  br i1 %313, label %314, label %321

314:                                              ; preds = %310
  %315 = load i32, i32* @inptr, align 4
  %316 = add i32 %315, 1
  store i32 %316, i32* @inptr, align 4
  %317 = zext i32 %315 to i64
  %318 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %317
  %319 = load i8, i8* %318, align 1
  %320 = zext i8 %319 to i32
  br label %324

321:                                              ; preds = %310
  %322 = load i32, i32* %7, align 4
  store i32 %322, i32* @outcnt, align 4
  %323 = call i32 @fill_inbuf(i32 0)
  br label %324

324:                                              ; preds = %321, %314
  %325 = phi i32 [ %320, %314 ], [ %323, %321 ]
  %326 = trunc i32 %325 to i8
  %327 = zext i8 %326 to i64
  %328 = load i32, i32* %17, align 4
  %329 = zext i32 %328 to i64
  %330 = shl i64 %327, %329
  %331 = load i64, i64* %16, align 8
  %332 = or i64 %331, %330
  store i64 %332, i64* %16, align 8
  %333 = load i32, i32* %17, align 4
  %334 = add i32 %333, 8
  store i32 %334, i32* %17, align 4
  br label %307, !llvm.loop !50

335:                                              ; preds = %307
  %336 = load i64, i64* %16, align 8
  %337 = trunc i64 %336 to i32
  %338 = and i32 %337, 3
  %339 = add i32 3, %338
  store i32 %339, i32* %3, align 4
  %340 = load i64, i64* %16, align 8
  %341 = lshr i64 %340, 2
  store i64 %341, i64* %16, align 8
  %342 = load i32, i32* %17, align 4
  %343 = sub i32 %342, 2
  store i32 %343, i32* %17, align 4
  %344 = load i32, i32* %2, align 4
  %345 = load i32, i32* %3, align 4
  %346 = add i32 %344, %345
  %347 = load i32, i32* %6, align 4
  %348 = icmp ugt i32 %346, %347
  br i1 %348, label %349, label %350

349:                                              ; preds = %335
  store i32 1, i32* %1, align 4
  br label %529

350:                                              ; preds = %335
  br label %351

351:                                              ; preds = %355, %350
  %352 = load i32, i32* %3, align 4
  %353 = add i32 %352, -1
  store i32 %353, i32* %3, align 4
  %354 = icmp ne i32 %352, 0
  br i1 %354, label %355, label %361

355:                                              ; preds = %351
  %356 = load i32, i32* %4, align 4
  %357 = load i32, i32* %2, align 4
  %358 = add nsw i32 %357, 1
  store i32 %358, i32* %2, align 4
  %359 = sext i32 %357 to i64
  %360 = getelementptr inbounds [316 x i32], [316 x i32]* %15, i64 0, i64 %359
  store i32 %356, i32* %360, align 4
  br label %351, !llvm.loop !51

361:                                              ; preds = %351
  br label %476

362:                                              ; preds = %303
  %363 = load i32, i32* %3, align 4
  %364 = icmp eq i32 %363, 17
  br i1 %364, label %365, label %420

365:                                              ; preds = %362
  br label %366

366:                                              ; preds = %383, %365
  %367 = load i32, i32* %17, align 4
  %368 = icmp ult i32 %367, 3
  br i1 %368, label %369, label %394

369:                                              ; preds = %366
  %370 = load i32, i32* @inptr, align 4
  %371 = load i32, i32* @insize, align 4
  %372 = icmp ult i32 %370, %371
  br i1 %372, label %373, label %380

373:                                              ; preds = %369
  %374 = load i32, i32* @inptr, align 4
  %375 = add i32 %374, 1
  store i32 %375, i32* @inptr, align 4
  %376 = zext i32 %374 to i64
  %377 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %376
  %378 = load i8, i8* %377, align 1
  %379 = zext i8 %378 to i32
  br label %383

380:                                              ; preds = %369
  %381 = load i32, i32* %7, align 4
  store i32 %381, i32* @outcnt, align 4
  %382 = call i32 @fill_inbuf(i32 0)
  br label %383

383:                                              ; preds = %380, %373
  %384 = phi i32 [ %379, %373 ], [ %382, %380 ]
  %385 = trunc i32 %384 to i8
  %386 = zext i8 %385 to i64
  %387 = load i32, i32* %17, align 4
  %388 = zext i32 %387 to i64
  %389 = shl i64 %386, %388
  %390 = load i64, i64* %16, align 8
  %391 = or i64 %390, %389
  store i64 %391, i64* %16, align 8
  %392 = load i32, i32* %17, align 4
  %393 = add i32 %392, 8
  store i32 %393, i32* %17, align 4
  br label %366, !llvm.loop !52

394:                                              ; preds = %366
  %395 = load i64, i64* %16, align 8
  %396 = trunc i64 %395 to i32
  %397 = and i32 %396, 7
  %398 = add i32 3, %397
  store i32 %398, i32* %3, align 4
  %399 = load i64, i64* %16, align 8
  %400 = lshr i64 %399, 3
  store i64 %400, i64* %16, align 8
  %401 = load i32, i32* %17, align 4
  %402 = sub i32 %401, 3
  store i32 %402, i32* %17, align 4
  %403 = load i32, i32* %2, align 4
  %404 = load i32, i32* %3, align 4
  %405 = add i32 %403, %404
  %406 = load i32, i32* %6, align 4
  %407 = icmp ugt i32 %405, %406
  br i1 %407, label %408, label %409

408:                                              ; preds = %394
  store i32 1, i32* %1, align 4
  br label %529

409:                                              ; preds = %394
  br label %410

410:                                              ; preds = %414, %409
  %411 = load i32, i32* %3, align 4
  %412 = add i32 %411, -1
  store i32 %412, i32* %3, align 4
  %413 = icmp ne i32 %411, 0
  br i1 %413, label %414, label %419

414:                                              ; preds = %410
  %415 = load i32, i32* %2, align 4
  %416 = add nsw i32 %415, 1
  store i32 %416, i32* %2, align 4
  %417 = sext i32 %415 to i64
  %418 = getelementptr inbounds [316 x i32], [316 x i32]* %15, i64 0, i64 %417
  store i32 0, i32* %418, align 4
  br label %410, !llvm.loop !53

419:                                              ; preds = %410
  store i32 0, i32* %4, align 4
  br label %475

420:                                              ; preds = %362
  br label %421

421:                                              ; preds = %438, %420
  %422 = load i32, i32* %17, align 4
  %423 = icmp ult i32 %422, 7
  br i1 %423, label %424, label %449

424:                                              ; preds = %421
  %425 = load i32, i32* @inptr, align 4
  %426 = load i32, i32* @insize, align 4
  %427 = icmp ult i32 %425, %426
  br i1 %427, label %428, label %435

428:                                              ; preds = %424
  %429 = load i32, i32* @inptr, align 4
  %430 = add i32 %429, 1
  store i32 %430, i32* @inptr, align 4
  %431 = zext i32 %429 to i64
  %432 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %431
  %433 = load i8, i8* %432, align 1
  %434 = zext i8 %433 to i32
  br label %438

435:                                              ; preds = %424
  %436 = load i32, i32* %7, align 4
  store i32 %436, i32* @outcnt, align 4
  %437 = call i32 @fill_inbuf(i32 0)
  br label %438

438:                                              ; preds = %435, %428
  %439 = phi i32 [ %434, %428 ], [ %437, %435 ]
  %440 = trunc i32 %439 to i8
  %441 = zext i8 %440 to i64
  %442 = load i32, i32* %17, align 4
  %443 = zext i32 %442 to i64
  %444 = shl i64 %441, %443
  %445 = load i64, i64* %16, align 8
  %446 = or i64 %445, %444
  store i64 %446, i64* %16, align 8
  %447 = load i32, i32* %17, align 4
  %448 = add i32 %447, 8
  store i32 %448, i32* %17, align 4
  br label %421, !llvm.loop !54

449:                                              ; preds = %421
  %450 = load i64, i64* %16, align 8
  %451 = trunc i64 %450 to i32
  %452 = and i32 %451, 127
  %453 = add i32 11, %452
  store i32 %453, i32* %3, align 4
  %454 = load i64, i64* %16, align 8
  %455 = lshr i64 %454, 7
  store i64 %455, i64* %16, align 8
  %456 = load i32, i32* %17, align 4
  %457 = sub i32 %456, 7
  store i32 %457, i32* %17, align 4
  %458 = load i32, i32* %2, align 4
  %459 = load i32, i32* %3, align 4
  %460 = add i32 %458, %459
  %461 = load i32, i32* %6, align 4
  %462 = icmp ugt i32 %460, %461
  br i1 %462, label %463, label %464

463:                                              ; preds = %449
  store i32 1, i32* %1, align 4
  br label %529

464:                                              ; preds = %449
  br label %465

465:                                              ; preds = %469, %464
  %466 = load i32, i32* %3, align 4
  %467 = add i32 %466, -1
  store i32 %467, i32* %3, align 4
  %468 = icmp ne i32 %466, 0
  br i1 %468, label %469, label %474

469:                                              ; preds = %465
  %470 = load i32, i32* %2, align 4
  %471 = add nsw i32 %470, 1
  store i32 %471, i32* %2, align 4
  %472 = sext i32 %470 to i64
  %473 = getelementptr inbounds [316 x i32], [316 x i32]* %15, i64 0, i64 %472
  store i32 0, i32* %473, align 4
  br label %465, !llvm.loop !55

474:                                              ; preds = %465
  store i32 0, i32* %4, align 4
  br label %475

475:                                              ; preds = %474, %419
  br label %476

476:                                              ; preds = %475, %361
  br label %477

477:                                              ; preds = %476, %297
  br label %229, !llvm.loop !56

478:                                              ; preds = %229
  %479 = load %struct.huft*, %struct.huft** %8, align 8
  %480 = call i32 @huft_free(%struct.huft* %479)
  %481 = load i64, i64* %16, align 8
  store i64 %481, i64* @bb, align 8
  %482 = load i32, i32* %17, align 4
  store i32 %482, i32* @bk, align 4
  %483 = load i32, i32* @lbits, align 4
  store i32 %483, i32* %10, align 4
  %484 = getelementptr inbounds [316 x i32], [316 x i32]* %15, i64 0, i64 0
  %485 = load i32, i32* %13, align 4
  %486 = call i32 @huft_build(i32* %484, i32 %485, i32 257, i16* getelementptr inbounds ([31 x i16], [31 x i16]* @cplens, i64 0, i64 0), i16* getelementptr inbounds ([31 x i16], [31 x i16]* @cplext, i64 0, i64 0), %struct.huft** %8, i32* %10)
  store i32 %486, i32* %2, align 4
  %487 = icmp ne i32 %486, 0
  br i1 %487, label %488, label %496

488:                                              ; preds = %478
  %489 = load i32, i32* %2, align 4
  %490 = icmp eq i32 %489, 1
  br i1 %490, label %491, label %494

491:                                              ; preds = %488
  %492 = load %struct.huft*, %struct.huft** %8, align 8
  %493 = call i32 @huft_free(%struct.huft* %492)
  br label %494

494:                                              ; preds = %491, %488
  %495 = load i32, i32* %2, align 4
  store i32 %495, i32* %1, align 4
  br label %529

496:                                              ; preds = %478
  %497 = load i32, i32* @dbits, align 4
  store i32 %497, i32* %11, align 4
  %498 = getelementptr inbounds [316 x i32], [316 x i32]* %15, i64 0, i64 0
  %499 = load i32, i32* %13, align 4
  %500 = zext i32 %499 to i64
  %501 = getelementptr inbounds i32, i32* %498, i64 %500
  %502 = load i32, i32* %14, align 4
  %503 = call i32 @huft_build(i32* %501, i32 %502, i32 0, i16* getelementptr inbounds ([30 x i16], [30 x i16]* @cpdist, i64 0, i64 0), i16* getelementptr inbounds ([30 x i16], [30 x i16]* @cpdext, i64 0, i64 0), %struct.huft** %9, i32* %11)
  store i32 %503, i32* %2, align 4
  %504 = icmp ne i32 %503, 0
  br i1 %504, label %505, label %515

505:                                              ; preds = %496
  %506 = load i32, i32* %2, align 4
  %507 = icmp eq i32 %506, 1
  br i1 %507, label %508, label %511

508:                                              ; preds = %505
  %509 = load %struct.huft*, %struct.huft** %9, align 8
  %510 = call i32 @huft_free(%struct.huft* %509)
  br label %511

511:                                              ; preds = %508, %505
  %512 = load %struct.huft*, %struct.huft** %8, align 8
  %513 = call i32 @huft_free(%struct.huft* %512)
  %514 = load i32, i32* %2, align 4
  store i32 %514, i32* %1, align 4
  br label %529

515:                                              ; preds = %496
  %516 = load %struct.huft*, %struct.huft** %8, align 8
  %517 = load %struct.huft*, %struct.huft** %9, align 8
  %518 = load i32, i32* %10, align 4
  %519 = load i32, i32* %11, align 4
  %520 = call i32 @inflate_codes(%struct.huft* %516, %struct.huft* %517, i32 %518, i32 %519)
  %521 = icmp ne i32 %520, 0
  %522 = zext i1 %521 to i64
  %523 = select i1 %521, i32 1, i32 0
  store i32 %523, i32* %18, align 4
  %524 = load %struct.huft*, %struct.huft** %8, align 8
  %525 = call i32 @huft_free(%struct.huft* %524)
  %526 = load %struct.huft*, %struct.huft** %9, align 8
  %527 = call i32 @huft_free(%struct.huft* %526)
  %528 = load i32, i32* %18, align 4
  store i32 %528, i32* %1, align 4
  br label %529

529:                                              ; preds = %515, %511, %494, %463, %408, %349, %286, %219, %214, %138
  %530 = load i32, i32* %1, align 4
  ret i32 %530
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @inflate_stored() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = load i64, i64* @bb, align 8
  store i64 %6, i64* %4, align 8
  %7 = load i32, i32* @bk, align 4
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* @outcnt, align 4
  store i32 %8, i32* %3, align 4
  %9 = load i32, i32* %5, align 4
  %10 = and i32 %9, 7
  store i32 %10, i32* %2, align 4
  %11 = load i32, i32* %2, align 4
  %12 = load i64, i64* %4, align 8
  %13 = zext i32 %11 to i64
  %14 = lshr i64 %12, %13
  store i64 %14, i64* %4, align 8
  %15 = load i32, i32* %2, align 4
  %16 = load i32, i32* %5, align 4
  %17 = sub i32 %16, %15
  store i32 %17, i32* %5, align 4
  br label %18

18:                                               ; preds = %35, %0
  %19 = load i32, i32* %5, align 4
  %20 = icmp ult i32 %19, 16
  br i1 %20, label %21, label %46

21:                                               ; preds = %18
  %22 = load i32, i32* @inptr, align 4
  %23 = load i32, i32* @insize, align 4
  %24 = icmp ult i32 %22, %23
  br i1 %24, label %25, label %32

25:                                               ; preds = %21
  %26 = load i32, i32* @inptr, align 4
  %27 = add i32 %26, 1
  store i32 %27, i32* @inptr, align 4
  %28 = zext i32 %26 to i64
  %29 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  br label %35

32:                                               ; preds = %21
  %33 = load i32, i32* %3, align 4
  store i32 %33, i32* @outcnt, align 4
  %34 = call i32 @fill_inbuf(i32 0)
  br label %35

35:                                               ; preds = %32, %25
  %36 = phi i32 [ %31, %25 ], [ %34, %32 ]
  %37 = trunc i32 %36 to i8
  %38 = zext i8 %37 to i64
  %39 = load i32, i32* %5, align 4
  %40 = zext i32 %39 to i64
  %41 = shl i64 %38, %40
  %42 = load i64, i64* %4, align 8
  %43 = or i64 %42, %41
  store i64 %43, i64* %4, align 8
  %44 = load i32, i32* %5, align 4
  %45 = add i32 %44, 8
  store i32 %45, i32* %5, align 4
  br label %18, !llvm.loop !57

46:                                               ; preds = %18
  %47 = load i64, i64* %4, align 8
  %48 = trunc i64 %47 to i32
  %49 = and i32 %48, 65535
  store i32 %49, i32* %2, align 4
  %50 = load i64, i64* %4, align 8
  %51 = lshr i64 %50, 16
  store i64 %51, i64* %4, align 8
  %52 = load i32, i32* %5, align 4
  %53 = sub i32 %52, 16
  store i32 %53, i32* %5, align 4
  br label %54

54:                                               ; preds = %71, %46
  %55 = load i32, i32* %5, align 4
  %56 = icmp ult i32 %55, 16
  br i1 %56, label %57, label %82

57:                                               ; preds = %54
  %58 = load i32, i32* @inptr, align 4
  %59 = load i32, i32* @insize, align 4
  %60 = icmp ult i32 %58, %59
  br i1 %60, label %61, label %68

61:                                               ; preds = %57
  %62 = load i32, i32* @inptr, align 4
  %63 = add i32 %62, 1
  store i32 %63, i32* @inptr, align 4
  %64 = zext i32 %62 to i64
  %65 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  br label %71

68:                                               ; preds = %57
  %69 = load i32, i32* %3, align 4
  store i32 %69, i32* @outcnt, align 4
  %70 = call i32 @fill_inbuf(i32 0)
  br label %71

71:                                               ; preds = %68, %61
  %72 = phi i32 [ %67, %61 ], [ %70, %68 ]
  %73 = trunc i32 %72 to i8
  %74 = zext i8 %73 to i64
  %75 = load i32, i32* %5, align 4
  %76 = zext i32 %75 to i64
  %77 = shl i64 %74, %76
  %78 = load i64, i64* %4, align 8
  %79 = or i64 %78, %77
  store i64 %79, i64* %4, align 8
  %80 = load i32, i32* %5, align 4
  %81 = add i32 %80, 8
  store i32 %81, i32* %5, align 4
  br label %54, !llvm.loop !58

82:                                               ; preds = %54
  %83 = load i32, i32* %2, align 4
  %84 = load i64, i64* %4, align 8
  %85 = xor i64 %84, -1
  %86 = and i64 %85, 65535
  %87 = trunc i64 %86 to i32
  %88 = icmp ne i32 %83, %87
  br i1 %88, label %89, label %90

89:                                               ; preds = %82
  store i32 1, i32* %1, align 4
  br label %148

90:                                               ; preds = %82
  %91 = load i64, i64* %4, align 8
  %92 = lshr i64 %91, 16
  store i64 %92, i64* %4, align 8
  %93 = load i32, i32* %5, align 4
  %94 = sub i32 %93, 16
  store i32 %94, i32* %5, align 4
  br label %95

95:                                               ; preds = %139, %90
  %96 = load i32, i32* %2, align 4
  %97 = add i32 %96, -1
  store i32 %97, i32* %2, align 4
  %98 = icmp ne i32 %96, 0
  br i1 %98, label %99, label %144

99:                                               ; preds = %95
  br label %100

100:                                              ; preds = %117, %99
  %101 = load i32, i32* %5, align 4
  %102 = icmp ult i32 %101, 8
  br i1 %102, label %103, label %128

103:                                              ; preds = %100
  %104 = load i32, i32* @inptr, align 4
  %105 = load i32, i32* @insize, align 4
  %106 = icmp ult i32 %104, %105
  br i1 %106, label %107, label %114

107:                                              ; preds = %103
  %108 = load i32, i32* @inptr, align 4
  %109 = add i32 %108, 1
  store i32 %109, i32* @inptr, align 4
  %110 = zext i32 %108 to i64
  %111 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %110
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  br label %117

114:                                              ; preds = %103
  %115 = load i32, i32* %3, align 4
  store i32 %115, i32* @outcnt, align 4
  %116 = call i32 @fill_inbuf(i32 0)
  br label %117

117:                                              ; preds = %114, %107
  %118 = phi i32 [ %113, %107 ], [ %116, %114 ]
  %119 = trunc i32 %118 to i8
  %120 = zext i8 %119 to i64
  %121 = load i32, i32* %5, align 4
  %122 = zext i32 %121 to i64
  %123 = shl i64 %120, %122
  %124 = load i64, i64* %4, align 8
  %125 = or i64 %124, %123
  store i64 %125, i64* %4, align 8
  %126 = load i32, i32* %5, align 4
  %127 = add i32 %126, 8
  store i32 %127, i32* %5, align 4
  br label %100, !llvm.loop !59

128:                                              ; preds = %100
  %129 = load i64, i64* %4, align 8
  %130 = trunc i64 %129 to i8
  %131 = load i32, i32* %3, align 4
  %132 = add i32 %131, 1
  store i32 %132, i32* %3, align 4
  %133 = zext i32 %131 to i64
  %134 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %133
  store i8 %130, i8* %134, align 1
  %135 = load i32, i32* %3, align 4
  %136 = icmp eq i32 %135, 32768
  br i1 %136, label %137, label %139

137:                                              ; preds = %128
  %138 = load i32, i32* %3, align 4
  store i32 %138, i32* @outcnt, align 4
  call void @flush_window()
  store i32 0, i32* %3, align 4
  br label %139

139:                                              ; preds = %137, %128
  %140 = load i64, i64* %4, align 8
  %141 = lshr i64 %140, 8
  store i64 %141, i64* %4, align 8
  %142 = load i32, i32* %5, align 4
  %143 = sub i32 %142, 8
  store i32 %143, i32* %5, align 4
  br label %95, !llvm.loop !60

144:                                              ; preds = %95
  %145 = load i32, i32* %3, align 4
  store i32 %145, i32* @outcnt, align 4
  %146 = load i64, i64* %4, align 8
  store i64 %146, i64* @bb, align 8
  %147 = load i32, i32* %5, align 4
  store i32 %147, i32* @bk, align 4
  store i32 0, i32* %1, align 4
  br label %148

148:                                              ; preds = %144, %89
  %149 = load i32, i32* %1, align 4
  ret i32 %149
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @inflate_fixed() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca %struct.huft*, align 8
  %4 = alloca %struct.huft*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [288 x i32], align 16
  store i32 0, i32* %2, align 4
  br label %8

8:                                                ; preds = %15, %0
  %9 = load i32, i32* %2, align 4
  %10 = icmp slt i32 %9, 144
  br i1 %10, label %11, label %18

11:                                               ; preds = %8
  %12 = load i32, i32* %2, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [288 x i32], [288 x i32]* %7, i64 0, i64 %13
  store i32 8, i32* %14, align 4
  br label %15

15:                                               ; preds = %11
  %16 = load i32, i32* %2, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %2, align 4
  br label %8, !llvm.loop !61

18:                                               ; preds = %8
  br label %19

19:                                               ; preds = %26, %18
  %20 = load i32, i32* %2, align 4
  %21 = icmp slt i32 %20, 256
  br i1 %21, label %22, label %29

22:                                               ; preds = %19
  %23 = load i32, i32* %2, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [288 x i32], [288 x i32]* %7, i64 0, i64 %24
  store i32 9, i32* %25, align 4
  br label %26

26:                                               ; preds = %22
  %27 = load i32, i32* %2, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %2, align 4
  br label %19, !llvm.loop !62

29:                                               ; preds = %19
  br label %30

30:                                               ; preds = %37, %29
  %31 = load i32, i32* %2, align 4
  %32 = icmp slt i32 %31, 280
  br i1 %32, label %33, label %40

33:                                               ; preds = %30
  %34 = load i32, i32* %2, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [288 x i32], [288 x i32]* %7, i64 0, i64 %35
  store i32 7, i32* %36, align 4
  br label %37

37:                                               ; preds = %33
  %38 = load i32, i32* %2, align 4
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %2, align 4
  br label %30, !llvm.loop !63

40:                                               ; preds = %30
  br label %41

41:                                               ; preds = %48, %40
  %42 = load i32, i32* %2, align 4
  %43 = icmp slt i32 %42, 288
  br i1 %43, label %44, label %51

44:                                               ; preds = %41
  %45 = load i32, i32* %2, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [288 x i32], [288 x i32]* %7, i64 0, i64 %46
  store i32 8, i32* %47, align 4
  br label %48

48:                                               ; preds = %44
  %49 = load i32, i32* %2, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %2, align 4
  br label %41, !llvm.loop !64

51:                                               ; preds = %41
  store i32 7, i32* %5, align 4
  %52 = getelementptr inbounds [288 x i32], [288 x i32]* %7, i64 0, i64 0
  %53 = call i32 @huft_build(i32* %52, i32 288, i32 257, i16* getelementptr inbounds ([31 x i16], [31 x i16]* @cplens, i64 0, i64 0), i16* getelementptr inbounds ([31 x i16], [31 x i16]* @cplext, i64 0, i64 0), %struct.huft** %3, i32* %5)
  store i32 %53, i32* %2, align 4
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %51
  %56 = load i32, i32* %2, align 4
  store i32 %56, i32* %1, align 4
  br label %89

57:                                               ; preds = %51
  store i32 0, i32* %2, align 4
  br label %58

58:                                               ; preds = %65, %57
  %59 = load i32, i32* %2, align 4
  %60 = icmp slt i32 %59, 30
  br i1 %60, label %61, label %68

61:                                               ; preds = %58
  %62 = load i32, i32* %2, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [288 x i32], [288 x i32]* %7, i64 0, i64 %63
  store i32 5, i32* %64, align 4
  br label %65

65:                                               ; preds = %61
  %66 = load i32, i32* %2, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %2, align 4
  br label %58, !llvm.loop !65

68:                                               ; preds = %58
  store i32 5, i32* %6, align 4
  %69 = getelementptr inbounds [288 x i32], [288 x i32]* %7, i64 0, i64 0
  %70 = call i32 @huft_build(i32* %69, i32 30, i32 0, i16* getelementptr inbounds ([30 x i16], [30 x i16]* @cpdist, i64 0, i64 0), i16* getelementptr inbounds ([30 x i16], [30 x i16]* @cpdext, i64 0, i64 0), %struct.huft** %4, i32* %6)
  store i32 %70, i32* %2, align 4
  %71 = icmp sgt i32 %70, 1
  br i1 %71, label %72, label %76

72:                                               ; preds = %68
  %73 = load %struct.huft*, %struct.huft** %3, align 8
  %74 = call i32 @huft_free(%struct.huft* %73)
  %75 = load i32, i32* %2, align 4
  store i32 %75, i32* %1, align 4
  br label %89

76:                                               ; preds = %68
  %77 = load %struct.huft*, %struct.huft** %3, align 8
  %78 = load %struct.huft*, %struct.huft** %4, align 8
  %79 = load i32, i32* %5, align 4
  %80 = load i32, i32* %6, align 4
  %81 = call i32 @inflate_codes(%struct.huft* %77, %struct.huft* %78, i32 %79, i32 %80)
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %76
  store i32 1, i32* %1, align 4
  br label %89

84:                                               ; preds = %76
  %85 = load %struct.huft*, %struct.huft** %3, align 8
  %86 = call i32 @huft_free(%struct.huft* %85)
  %87 = load %struct.huft*, %struct.huft** %4, align 8
  %88 = call i32 @huft_free(%struct.huft* %87)
  store i32 0, i32* %1, align 4
  br label %89

89:                                               ; preds = %84, %83, %72, %55
  %90 = load i32, i32* %1, align 4
  ret i32 %90
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @huft_build(i32* %0, i32 %1, i32 %2, i16* %3, i16* %4, %struct.huft** %5, i32* %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i16*, align 8
  %13 = alloca i16*, align 8
  %14 = alloca %struct.huft**, align 8
  %15 = alloca i32*, align 8
  %16 = alloca i32, align 4
  %17 = alloca [17 x i32], align 16
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca %struct.huft*, align 8
  %27 = alloca %struct.huft, align 8
  %28 = alloca [16 x %struct.huft*], align 16
  %29 = alloca [288 x i32], align 16
  %30 = alloca i32, align 4
  %31 = alloca [17 x i32], align 16
  %32 = alloca i32*, align 8
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  store i32* %0, i32** %9, align 8
  store i32 %1, i32* %10, align 4
  store i32 %2, i32* %11, align 4
  store i16* %3, i16** %12, align 8
  store i16* %4, i16** %13, align 8
  store %struct.huft** %5, %struct.huft*** %14, align 8
  store i32* %6, i32** %15, align 8
  %35 = getelementptr inbounds [17 x i32], [17 x i32]* %17, i64 0, i64 0
  %36 = bitcast i32* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %36, i8 0, i64 68, i1 false)
  %37 = load i32*, i32** %9, align 8
  store i32* %37, i32** %25, align 8
  %38 = load i32, i32* %10, align 4
  store i32 %38, i32* %21, align 4
  br label %39

39:                                               ; preds = %48, %7
  %40 = load i32*, i32** %25, align 8
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [17 x i32], [17 x i32]* %17, i64 0, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = add i32 %44, 1
  store i32 %45, i32* %43, align 4
  %46 = load i32*, i32** %25, align 8
  %47 = getelementptr inbounds i32, i32* %46, i32 1
  store i32* %47, i32** %25, align 8
  br label %48

48:                                               ; preds = %39
  %49 = load i32, i32* %21, align 4
  %50 = add i32 %49, -1
  store i32 %50, i32* %21, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %39, label %52, !llvm.loop !66

52:                                               ; preds = %48
  %53 = getelementptr inbounds [17 x i32], [17 x i32]* %17, i64 0, i64 0
  %54 = load i32, i32* %53, align 16
  %55 = load i32, i32* %10, align 4
  %56 = icmp eq i32 %54, %55
  br i1 %56, label %57, label %86

57:                                               ; preds = %52
  %58 = call align 16 i8* @malloc(i64 48) #26
  %59 = bitcast i8* %58 to %struct.huft*
  store %struct.huft* %59, %struct.huft** %26, align 8
  %60 = load %struct.huft*, %struct.huft** %26, align 8
  %61 = icmp ne %struct.huft* %60, null
  br i1 %61, label %63, label %62

62:                                               ; preds = %57
  store i32 3, i32* %8, align 4
  br label %496

63:                                               ; preds = %57
  %64 = load i32, i32* @hufts, align 4
  %65 = add i32 %64, 3
  store i32 %65, i32* @hufts, align 4
  %66 = load %struct.huft*, %struct.huft** %26, align 8
  %67 = getelementptr inbounds %struct.huft, %struct.huft* %66, i64 0
  %68 = getelementptr inbounds %struct.huft, %struct.huft* %67, i32 0, i32 2
  %69 = bitcast %union.anon* %68 to %struct.huft**
  store %struct.huft* null, %struct.huft** %69, align 8
  %70 = load %struct.huft*, %struct.huft** %26, align 8
  %71 = getelementptr inbounds %struct.huft, %struct.huft* %70, i64 1
  %72 = getelementptr inbounds %struct.huft, %struct.huft* %71, i32 0, i32 0
  store i8 99, i8* %72, align 8
  %73 = load %struct.huft*, %struct.huft** %26, align 8
  %74 = getelementptr inbounds %struct.huft, %struct.huft* %73, i64 1
  %75 = getelementptr inbounds %struct.huft, %struct.huft* %74, i32 0, i32 1
  store i8 1, i8* %75, align 1
  %76 = load %struct.huft*, %struct.huft** %26, align 8
  %77 = getelementptr inbounds %struct.huft, %struct.huft* %76, i64 2
  %78 = getelementptr inbounds %struct.huft, %struct.huft* %77, i32 0, i32 0
  store i8 99, i8* %78, align 8
  %79 = load %struct.huft*, %struct.huft** %26, align 8
  %80 = getelementptr inbounds %struct.huft, %struct.huft* %79, i64 2
  %81 = getelementptr inbounds %struct.huft, %struct.huft* %80, i32 0, i32 1
  store i8 1, i8* %81, align 1
  %82 = load %struct.huft*, %struct.huft** %26, align 8
  %83 = getelementptr inbounds %struct.huft, %struct.huft* %82, i64 1
  %84 = load %struct.huft**, %struct.huft*** %14, align 8
  store %struct.huft* %83, %struct.huft** %84, align 8
  %85 = load i32*, i32** %15, align 8
  store i32 1, i32* %85, align 4
  store i32 0, i32* %8, align 4
  br label %496

86:                                               ; preds = %52
  %87 = load i32*, i32** %15, align 8
  %88 = load i32, i32* %87, align 4
  store i32 %88, i32* %24, align 4
  store i32 1, i32* %22, align 4
  br label %89

89:                                               ; preds = %100, %86
  %90 = load i32, i32* %22, align 4
  %91 = icmp ule i32 %90, 16
  br i1 %91, label %92, label %103

92:                                               ; preds = %89
  %93 = load i32, i32* %22, align 4
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds [17 x i32], [17 x i32]* %17, i64 0, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %92
  br label %103

99:                                               ; preds = %92
  br label %100

100:                                              ; preds = %99
  %101 = load i32, i32* %22, align 4
  %102 = add i32 %101, 1
  store i32 %102, i32* %22, align 4
  br label %89, !llvm.loop !67

103:                                              ; preds = %98, %89
  %104 = load i32, i32* %22, align 4
  store i32 %104, i32* %23, align 4
  %105 = load i32, i32* %24, align 4
  %106 = load i32, i32* %22, align 4
  %107 = icmp ult i32 %105, %106
  br i1 %107, label %108, label %110

108:                                              ; preds = %103
  %109 = load i32, i32* %22, align 4
  store i32 %109, i32* %24, align 4
  br label %110

110:                                              ; preds = %108, %103
  store i32 16, i32* %21, align 4
  br label %111

111:                                              ; preds = %122, %110
  %112 = load i32, i32* %21, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %125

114:                                              ; preds = %111
  %115 = load i32, i32* %21, align 4
  %116 = zext i32 %115 to i64
  %117 = getelementptr inbounds [17 x i32], [17 x i32]* %17, i64 0, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = icmp ne i32 %118, 0
  br i1 %119, label %120, label %121

120:                                              ; preds = %114
  br label %125

121:                                              ; preds = %114
  br label %122

122:                                              ; preds = %121
  %123 = load i32, i32* %21, align 4
  %124 = add i32 %123, -1
  store i32 %124, i32* %21, align 4
  br label %111, !llvm.loop !68

125:                                              ; preds = %120, %111
  %126 = load i32, i32* %21, align 4
  store i32 %126, i32* %19, align 4
  %127 = load i32, i32* %24, align 4
  %128 = load i32, i32* %21, align 4
  %129 = icmp ugt i32 %127, %128
  br i1 %129, label %130, label %132

130:                                              ; preds = %125
  %131 = load i32, i32* %21, align 4
  store i32 %131, i32* %24, align 4
  br label %132

132:                                              ; preds = %130, %125
  %133 = load i32, i32* %24, align 4
  %134 = load i32*, i32** %15, align 8
  store i32 %133, i32* %134, align 4
  %135 = load i32, i32* %22, align 4
  %136 = shl i32 1, %135
  store i32 %136, i32* %33, align 4
  br label %137

137:                                              ; preds = %151, %132
  %138 = load i32, i32* %22, align 4
  %139 = load i32, i32* %21, align 4
  %140 = icmp ult i32 %138, %139
  br i1 %140, label %141, label %156

141:                                              ; preds = %137
  %142 = load i32, i32* %22, align 4
  %143 = zext i32 %142 to i64
  %144 = getelementptr inbounds [17 x i32], [17 x i32]* %17, i64 0, i64 %143
  %145 = load i32, i32* %144, align 4
  %146 = load i32, i32* %33, align 4
  %147 = sub i32 %146, %145
  store i32 %147, i32* %33, align 4
  %148 = icmp slt i32 %147, 0
  br i1 %148, label %149, label %150

149:                                              ; preds = %141
  store i32 2, i32* %8, align 4
  br label %496

150:                                              ; preds = %141
  br label %151

151:                                              ; preds = %150
  %152 = load i32, i32* %22, align 4
  %153 = add i32 %152, 1
  store i32 %153, i32* %22, align 4
  %154 = load i32, i32* %33, align 4
  %155 = shl i32 %154, 1
  store i32 %155, i32* %33, align 4
  br label %137, !llvm.loop !69

156:                                              ; preds = %137
  %157 = load i32, i32* %21, align 4
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds [17 x i32], [17 x i32]* %17, i64 0, i64 %158
  %160 = load i32, i32* %159, align 4
  %161 = load i32, i32* %33, align 4
  %162 = sub i32 %161, %160
  store i32 %162, i32* %33, align 4
  %163 = icmp slt i32 %162, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %156
  store i32 2, i32* %8, align 4
  br label %496

165:                                              ; preds = %156
  %166 = load i32, i32* %33, align 4
  %167 = load i32, i32* %21, align 4
  %168 = zext i32 %167 to i64
  %169 = getelementptr inbounds [17 x i32], [17 x i32]* %17, i64 0, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = add i32 %170, %166
  store i32 %171, i32* %169, align 4
  store i32 0, i32* %22, align 4
  %172 = getelementptr inbounds [17 x i32], [17 x i32]* %31, i64 0, i64 1
  store i32 0, i32* %172, align 4
  %173 = getelementptr inbounds [17 x i32], [17 x i32]* %17, i64 0, i64 0
  %174 = getelementptr inbounds i32, i32* %173, i64 1
  store i32* %174, i32** %25, align 8
  %175 = getelementptr inbounds [17 x i32], [17 x i32]* %31, i64 0, i64 0
  %176 = getelementptr inbounds i32, i32* %175, i64 2
  store i32* %176, i32** %32, align 8
  br label %177

177:                                              ; preds = %181, %165
  %178 = load i32, i32* %21, align 4
  %179 = add i32 %178, -1
  store i32 %179, i32* %21, align 4
  %180 = icmp ne i32 %179, 0
  br i1 %180, label %181, label %189

181:                                              ; preds = %177
  %182 = load i32*, i32** %25, align 8
  %183 = getelementptr inbounds i32, i32* %182, i32 1
  store i32* %183, i32** %25, align 8
  %184 = load i32, i32* %182, align 4
  %185 = load i32, i32* %22, align 4
  %186 = add i32 %185, %184
  store i32 %186, i32* %22, align 4
  %187 = load i32*, i32** %32, align 8
  %188 = getelementptr inbounds i32, i32* %187, i32 1
  store i32* %188, i32** %32, align 8
  store i32 %186, i32* %187, align 4
  br label %177, !llvm.loop !70

189:                                              ; preds = %177
  %190 = load i32*, i32** %9, align 8
  store i32* %190, i32** %25, align 8
  store i32 0, i32* %21, align 4
  br label %191

191:                                              ; preds = %206, %189
  %192 = load i32*, i32** %25, align 8
  %193 = getelementptr inbounds i32, i32* %192, i32 1
  store i32* %193, i32** %25, align 8
  %194 = load i32, i32* %192, align 4
  store i32 %194, i32* %22, align 4
  %195 = icmp ne i32 %194, 0
  br i1 %195, label %196, label %205

196:                                              ; preds = %191
  %197 = load i32, i32* %21, align 4
  %198 = load i32, i32* %22, align 4
  %199 = zext i32 %198 to i64
  %200 = getelementptr inbounds [17 x i32], [17 x i32]* %31, i64 0, i64 %199
  %201 = load i32, i32* %200, align 4
  %202 = add i32 %201, 1
  store i32 %202, i32* %200, align 4
  %203 = zext i32 %201 to i64
  %204 = getelementptr inbounds [288 x i32], [288 x i32]* %29, i64 0, i64 %203
  store i32 %197, i32* %204, align 4
  br label %205

205:                                              ; preds = %196, %191
  br label %206

206:                                              ; preds = %205
  %207 = load i32, i32* %21, align 4
  %208 = add i32 %207, 1
  store i32 %208, i32* %21, align 4
  %209 = load i32, i32* %10, align 4
  %210 = icmp ult i32 %208, %209
  br i1 %210, label %191, label %211, !llvm.loop !71

211:                                              ; preds = %206
  %212 = load i32, i32* %19, align 4
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds [17 x i32], [17 x i32]* %31, i64 0, i64 %213
  %215 = load i32, i32* %214, align 4
  store i32 %215, i32* %10, align 4
  store i32 0, i32* %21, align 4
  %216 = getelementptr inbounds [17 x i32], [17 x i32]* %31, i64 0, i64 0
  store i32 0, i32* %216, align 16
  %217 = getelementptr inbounds [288 x i32], [288 x i32]* %29, i64 0, i64 0
  store i32* %217, i32** %25, align 8
  store i32 -1, i32* %20, align 4
  %218 = load i32, i32* %24, align 4
  %219 = sub nsw i32 0, %218
  store i32 %219, i32* %30, align 4
  %220 = getelementptr inbounds [16 x %struct.huft*], [16 x %struct.huft*]* %28, i64 0, i64 0
  store %struct.huft* null, %struct.huft** %220, align 16
  store %struct.huft* null, %struct.huft** %26, align 8
  store i32 0, i32* %34, align 4
  br label %221

221:                                              ; preds = %484, %211
  %222 = load i32, i32* %23, align 4
  %223 = load i32, i32* %19, align 4
  %224 = icmp sle i32 %222, %223
  br i1 %224, label %225, label %487

225:                                              ; preds = %221
  %226 = load i32, i32* %23, align 4
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds [17 x i32], [17 x i32]* %17, i64 0, i64 %227
  %229 = load i32, i32* %228, align 4
  store i32 %229, i32* %16, align 4
  br label %230

230:                                              ; preds = %482, %225
  %231 = load i32, i32* %16, align 4
  %232 = add i32 %231, -1
  store i32 %232, i32* %16, align 4
  %233 = icmp ne i32 %231, 0
  br i1 %233, label %234, label %483

234:                                              ; preds = %230
  br label %235

235:                                              ; preds = %364, %234
  %236 = load i32, i32* %23, align 4
  %237 = load i32, i32* %30, align 4
  %238 = load i32, i32* %24, align 4
  %239 = add nsw i32 %237, %238
  %240 = icmp sgt i32 %236, %239
  br i1 %240, label %241, label %365

241:                                              ; preds = %235
  %242 = load i32, i32* %20, align 4
  %243 = add nsw i32 %242, 1
  store i32 %243, i32* %20, align 4
  %244 = load i32, i32* %24, align 4
  %245 = load i32, i32* %30, align 4
  %246 = add nsw i32 %245, %244
  store i32 %246, i32* %30, align 4
  %247 = load i32, i32* %19, align 4
  %248 = load i32, i32* %30, align 4
  %249 = sub nsw i32 %247, %248
  store i32 %249, i32* %34, align 4
  %250 = load i32, i32* %24, align 4
  %251 = icmp ugt i32 %249, %250
  br i1 %251, label %252, label %254

252:                                              ; preds = %241
  %253 = load i32, i32* %24, align 4
  br label %256

254:                                              ; preds = %241
  %255 = load i32, i32* %34, align 4
  br label %256

256:                                              ; preds = %254, %252
  %257 = phi i32 [ %253, %252 ], [ %255, %254 ]
  store i32 %257, i32* %34, align 4
  %258 = load i32, i32* %23, align 4
  %259 = load i32, i32* %30, align 4
  %260 = sub nsw i32 %258, %259
  store i32 %260, i32* %22, align 4
  %261 = shl i32 1, %260
  store i32 %261, i32* %18, align 4
  %262 = load i32, i32* %16, align 4
  %263 = add i32 %262, 1
  %264 = icmp ugt i32 %261, %263
  br i1 %264, label %265, label %298

265:                                              ; preds = %256
  %266 = load i32, i32* %16, align 4
  %267 = add i32 %266, 1
  %268 = load i32, i32* %18, align 4
  %269 = sub i32 %268, %267
  store i32 %269, i32* %18, align 4
  %270 = getelementptr inbounds [17 x i32], [17 x i32]* %17, i64 0, i64 0
  %271 = load i32, i32* %23, align 4
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds i32, i32* %270, i64 %272
  store i32* %273, i32** %32, align 8
  %274 = load i32, i32* %22, align 4
  %275 = load i32, i32* %34, align 4
  %276 = icmp ult i32 %274, %275
  br i1 %276, label %277, label %297

277:                                              ; preds = %265
  br label %278

278:                                              ; preds = %291, %277
  %279 = load i32, i32* %22, align 4
  %280 = add i32 %279, 1
  store i32 %280, i32* %22, align 4
  %281 = load i32, i32* %34, align 4
  %282 = icmp ult i32 %280, %281
  br i1 %282, label %283, label %296

283:                                              ; preds = %278
  %284 = load i32, i32* %18, align 4
  %285 = shl i32 %284, 1
  store i32 %285, i32* %18, align 4
  %286 = load i32*, i32** %32, align 8
  %287 = getelementptr inbounds i32, i32* %286, i32 1
  store i32* %287, i32** %32, align 8
  %288 = load i32, i32* %287, align 4
  %289 = icmp ule i32 %285, %288
  br i1 %289, label %290, label %291

290:                                              ; preds = %283
  br label %296

291:                                              ; preds = %283
  %292 = load i32*, i32** %32, align 8
  %293 = load i32, i32* %292, align 4
  %294 = load i32, i32* %18, align 4
  %295 = sub i32 %294, %293
  store i32 %295, i32* %18, align 4
  br label %278, !llvm.loop !72

296:                                              ; preds = %290, %278
  br label %297

297:                                              ; preds = %296, %265
  br label %298

298:                                              ; preds = %297, %256
  %299 = load i32, i32* %22, align 4
  %300 = shl i32 1, %299
  store i32 %300, i32* %34, align 4
  %301 = load i32, i32* %34, align 4
  %302 = add i32 %301, 1
  %303 = zext i32 %302 to i64
  %304 = mul i64 %303, 16
  %305 = call align 16 i8* @malloc(i64 %304) #26
  %306 = bitcast i8* %305 to %struct.huft*
  store %struct.huft* %306, %struct.huft** %26, align 8
  %307 = icmp eq %struct.huft* %306, null
  br i1 %307, label %308, label %316

308:                                              ; preds = %298
  %309 = load i32, i32* %20, align 4
  %310 = icmp ne i32 %309, 0
  br i1 %310, label %311, label %315

311:                                              ; preds = %308
  %312 = getelementptr inbounds [16 x %struct.huft*], [16 x %struct.huft*]* %28, i64 0, i64 0
  %313 = load %struct.huft*, %struct.huft** %312, align 16
  %314 = call i32 @huft_free(%struct.huft* %313)
  br label %315

315:                                              ; preds = %311, %308
  store i32 3, i32* %8, align 4
  br label %496

316:                                              ; preds = %298
  %317 = load i32, i32* %34, align 4
  %318 = add i32 %317, 1
  %319 = load i32, i32* @hufts, align 4
  %320 = add i32 %319, %318
  store i32 %320, i32* @hufts, align 4
  %321 = load %struct.huft*, %struct.huft** %26, align 8
  %322 = getelementptr inbounds %struct.huft, %struct.huft* %321, i64 1
  %323 = load %struct.huft**, %struct.huft*** %14, align 8
  store %struct.huft* %322, %struct.huft** %323, align 8
  %324 = load %struct.huft*, %struct.huft** %26, align 8
  %325 = getelementptr inbounds %struct.huft, %struct.huft* %324, i32 0, i32 2
  %326 = bitcast %union.anon* %325 to %struct.huft**
  store %struct.huft** %326, %struct.huft*** %14, align 8
  store %struct.huft* null, %struct.huft** %326, align 8
  %327 = load %struct.huft*, %struct.huft** %26, align 8
  %328 = getelementptr inbounds %struct.huft, %struct.huft* %327, i32 1
  store %struct.huft* %328, %struct.huft** %26, align 8
  %329 = load i32, i32* %20, align 4
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds [16 x %struct.huft*], [16 x %struct.huft*]* %28, i64 0, i64 %330
  store %struct.huft* %328, %struct.huft** %331, align 8
  %332 = load i32, i32* %20, align 4
  %333 = icmp ne i32 %332, 0
  br i1 %333, label %334, label %364

334:                                              ; preds = %316
  %335 = load i32, i32* %21, align 4
  %336 = load i32, i32* %20, align 4
  %337 = sext i32 %336 to i64
  %338 = getelementptr inbounds [17 x i32], [17 x i32]* %31, i64 0, i64 %337
  store i32 %335, i32* %338, align 4
  %339 = load i32, i32* %24, align 4
  %340 = trunc i32 %339 to i8
  %341 = getelementptr inbounds %struct.huft, %struct.huft* %27, i32 0, i32 1
  store i8 %340, i8* %341, align 1
  %342 = load i32, i32* %22, align 4
  %343 = add i32 16, %342
  %344 = trunc i32 %343 to i8
  %345 = getelementptr inbounds %struct.huft, %struct.huft* %27, i32 0, i32 0
  store i8 %344, i8* %345, align 8
  %346 = load %struct.huft*, %struct.huft** %26, align 8
  %347 = getelementptr inbounds %struct.huft, %struct.huft* %27, i32 0, i32 2
  %348 = bitcast %union.anon* %347 to %struct.huft**
  store %struct.huft* %346, %struct.huft** %348, align 8
  %349 = load i32, i32* %21, align 4
  %350 = load i32, i32* %30, align 4
  %351 = load i32, i32* %24, align 4
  %352 = sub nsw i32 %350, %351
  %353 = lshr i32 %349, %352
  store i32 %353, i32* %22, align 4
  %354 = load i32, i32* %20, align 4
  %355 = sub nsw i32 %354, 1
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds [16 x %struct.huft*], [16 x %struct.huft*]* %28, i64 0, i64 %356
  %358 = load %struct.huft*, %struct.huft** %357, align 8
  %359 = load i32, i32* %22, align 4
  %360 = zext i32 %359 to i64
  %361 = getelementptr inbounds %struct.huft, %struct.huft* %358, i64 %360
  %362 = bitcast %struct.huft* %361 to i8*
  %363 = bitcast %struct.huft* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %362, i8* align 8 %363, i64 16, i1 false)
  br label %364

364:                                              ; preds = %334, %316
  br label %235, !llvm.loop !73

365:                                              ; preds = %235
  %366 = load i32, i32* %23, align 4
  %367 = load i32, i32* %30, align 4
  %368 = sub nsw i32 %366, %367
  %369 = trunc i32 %368 to i8
  %370 = getelementptr inbounds %struct.huft, %struct.huft* %27, i32 0, i32 1
  store i8 %369, i8* %370, align 1
  %371 = load i32*, i32** %25, align 8
  %372 = getelementptr inbounds [288 x i32], [288 x i32]* %29, i64 0, i64 0
  %373 = load i32, i32* %10, align 4
  %374 = zext i32 %373 to i64
  %375 = getelementptr inbounds i32, i32* %372, i64 %374
  %376 = icmp uge i32* %371, %375
  br i1 %376, label %377, label %379

377:                                              ; preds = %365
  %378 = getelementptr inbounds %struct.huft, %struct.huft* %27, i32 0, i32 0
  store i8 99, i8* %378, align 8
  br label %422

379:                                              ; preds = %365
  %380 = load i32*, i32** %25, align 8
  %381 = load i32, i32* %380, align 4
  %382 = load i32, i32* %11, align 4
  %383 = icmp ult i32 %381, %382
  br i1 %383, label %384, label %399

384:                                              ; preds = %379
  %385 = load i32*, i32** %25, align 8
  %386 = load i32, i32* %385, align 4
  %387 = icmp ult i32 %386, 256
  %388 = zext i1 %387 to i64
  %389 = select i1 %387, i32 16, i32 15
  %390 = trunc i32 %389 to i8
  %391 = getelementptr inbounds %struct.huft, %struct.huft* %27, i32 0, i32 0
  store i8 %390, i8* %391, align 8
  %392 = load i32*, i32** %25, align 8
  %393 = load i32, i32* %392, align 4
  %394 = trunc i32 %393 to i16
  %395 = getelementptr inbounds %struct.huft, %struct.huft* %27, i32 0, i32 2
  %396 = bitcast %union.anon* %395 to i16*
  store i16 %394, i16* %396, align 8
  %397 = load i32*, i32** %25, align 8
  %398 = getelementptr inbounds i32, i32* %397, i32 1
  store i32* %398, i32** %25, align 8
  br label %421

399:                                              ; preds = %379
  %400 = load i16*, i16** %13, align 8
  %401 = load i32*, i32** %25, align 8
  %402 = load i32, i32* %401, align 4
  %403 = load i32, i32* %11, align 4
  %404 = sub i32 %402, %403
  %405 = zext i32 %404 to i64
  %406 = getelementptr inbounds i16, i16* %400, i64 %405
  %407 = load i16, i16* %406, align 2
  %408 = trunc i16 %407 to i8
  %409 = getelementptr inbounds %struct.huft, %struct.huft* %27, i32 0, i32 0
  store i8 %408, i8* %409, align 8
  %410 = load i16*, i16** %12, align 8
  %411 = load i32*, i32** %25, align 8
  %412 = getelementptr inbounds i32, i32* %411, i32 1
  store i32* %412, i32** %25, align 8
  %413 = load i32, i32* %411, align 4
  %414 = load i32, i32* %11, align 4
  %415 = sub i32 %413, %414
  %416 = zext i32 %415 to i64
  %417 = getelementptr inbounds i16, i16* %410, i64 %416
  %418 = load i16, i16* %417, align 2
  %419 = getelementptr inbounds %struct.huft, %struct.huft* %27, i32 0, i32 2
  %420 = bitcast %union.anon* %419 to i16*
  store i16 %418, i16* %420, align 8
  br label %421

421:                                              ; preds = %399, %384
  br label %422

422:                                              ; preds = %421, %377
  %423 = load i32, i32* %23, align 4
  %424 = load i32, i32* %30, align 4
  %425 = sub nsw i32 %423, %424
  %426 = shl i32 1, %425
  store i32 %426, i32* %18, align 4
  %427 = load i32, i32* %21, align 4
  %428 = load i32, i32* %30, align 4
  %429 = lshr i32 %427, %428
  store i32 %429, i32* %22, align 4
  br label %430

430:                                              ; preds = %441, %422
  %431 = load i32, i32* %22, align 4
  %432 = load i32, i32* %34, align 4
  %433 = icmp ult i32 %431, %432
  br i1 %433, label %434, label %445

434:                                              ; preds = %430
  %435 = load %struct.huft*, %struct.huft** %26, align 8
  %436 = load i32, i32* %22, align 4
  %437 = zext i32 %436 to i64
  %438 = getelementptr inbounds %struct.huft, %struct.huft* %435, i64 %437
  %439 = bitcast %struct.huft* %438 to i8*
  %440 = bitcast %struct.huft* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %439, i8* align 8 %440, i64 16, i1 false)
  br label %441

441:                                              ; preds = %434
  %442 = load i32, i32* %18, align 4
  %443 = load i32, i32* %22, align 4
  %444 = add i32 %443, %442
  store i32 %444, i32* %22, align 4
  br label %430, !llvm.loop !74

445:                                              ; preds = %430
  %446 = load i32, i32* %23, align 4
  %447 = sub nsw i32 %446, 1
  %448 = shl i32 1, %447
  store i32 %448, i32* %22, align 4
  br label %449

449:                                              ; preds = %458, %445
  %450 = load i32, i32* %21, align 4
  %451 = load i32, i32* %22, align 4
  %452 = and i32 %450, %451
  %453 = icmp ne i32 %452, 0
  br i1 %453, label %454, label %461

454:                                              ; preds = %449
  %455 = load i32, i32* %22, align 4
  %456 = load i32, i32* %21, align 4
  %457 = xor i32 %456, %455
  store i32 %457, i32* %21, align 4
  br label %458

458:                                              ; preds = %454
  %459 = load i32, i32* %22, align 4
  %460 = lshr i32 %459, 1
  store i32 %460, i32* %22, align 4
  br label %449, !llvm.loop !75

461:                                              ; preds = %449
  %462 = load i32, i32* %22, align 4
  %463 = load i32, i32* %21, align 4
  %464 = xor i32 %463, %462
  store i32 %464, i32* %21, align 4
  br label %465

465:                                              ; preds = %476, %461
  %466 = load i32, i32* %21, align 4
  %467 = load i32, i32* %30, align 4
  %468 = shl i32 1, %467
  %469 = sub nsw i32 %468, 1
  %470 = and i32 %466, %469
  %471 = load i32, i32* %20, align 4
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds [17 x i32], [17 x i32]* %31, i64 0, i64 %472
  %474 = load i32, i32* %473, align 4
  %475 = icmp ne i32 %470, %474
  br i1 %475, label %476, label %482

476:                                              ; preds = %465
  %477 = load i32, i32* %20, align 4
  %478 = add nsw i32 %477, -1
  store i32 %478, i32* %20, align 4
  %479 = load i32, i32* %24, align 4
  %480 = load i32, i32* %30, align 4
  %481 = sub nsw i32 %480, %479
  store i32 %481, i32* %30, align 4
  br label %465, !llvm.loop !76

482:                                              ; preds = %465
  br label %230, !llvm.loop !77

483:                                              ; preds = %230
  br label %484

484:                                              ; preds = %483
  %485 = load i32, i32* %23, align 4
  %486 = add nsw i32 %485, 1
  store i32 %486, i32* %23, align 4
  br label %221, !llvm.loop !78

487:                                              ; preds = %221
  %488 = load i32, i32* %33, align 4
  %489 = icmp ne i32 %488, 0
  br i1 %489, label %490, label %493

490:                                              ; preds = %487
  %491 = load i32, i32* %19, align 4
  %492 = icmp ne i32 %491, 1
  br label %493

493:                                              ; preds = %490, %487
  %494 = phi i1 [ false, %487 ], [ %492, %490 ]
  %495 = zext i1 %494 to i32
  store i32 %495, i32* %8, align 4
  br label %496

496:                                              ; preds = %493, %315, %164, %149, %63, %62
  %497 = load i32, i32* %8, align 4
  ret i32 %497
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @huft_free(%struct.huft* %0) #0 {
  %2 = alloca %struct.huft*, align 8
  %3 = alloca %struct.huft*, align 8
  %4 = alloca %struct.huft*, align 8
  store %struct.huft* %0, %struct.huft** %2, align 8
  %5 = load %struct.huft*, %struct.huft** %2, align 8
  store %struct.huft* %5, %struct.huft** %3, align 8
  br label %6

6:                                                ; preds = %9, %1
  %7 = load %struct.huft*, %struct.huft** %3, align 8
  %8 = icmp ne %struct.huft* %7, null
  br i1 %8, label %9, label %18

9:                                                ; preds = %6
  %10 = load %struct.huft*, %struct.huft** %3, align 8
  %11 = getelementptr inbounds %struct.huft, %struct.huft* %10, i32 -1
  store %struct.huft* %11, %struct.huft** %3, align 8
  %12 = getelementptr inbounds %struct.huft, %struct.huft* %11, i32 0, i32 2
  %13 = bitcast %union.anon* %12 to %struct.huft**
  %14 = load %struct.huft*, %struct.huft** %13, align 8
  store %struct.huft* %14, %struct.huft** %4, align 8
  %15 = load %struct.huft*, %struct.huft** %3, align 8
  %16 = bitcast %struct.huft* %15 to i8*
  call void @rpl_free(i8* %16)
  %17 = load %struct.huft*, %struct.huft** %4, align 8
  store %struct.huft* %17, %struct.huft** %3, align 8
  br label %6, !llvm.loop !79

18:                                               ; preds = %6
  ret i32 0
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @inflate_codes(%struct.huft* %0, %struct.huft* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.huft*, align 8
  %7 = alloca %struct.huft*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.huft*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  store %struct.huft* %0, %struct.huft** %6, align 8
  store %struct.huft* %1, %struct.huft** %7, align 8
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  %19 = load i64, i64* @bb, align 8
  store i64 %19, i64* %17, align 8
  %20 = load i32, i32* @bk, align 4
  store i32 %20, i32* %18, align 4
  %21 = load i32, i32* @outcnt, align 4
  store i32 %21, i32* %13, align 4
  %22 = load i32, i32* %8, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i64 0, i64 %23
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  store i32 %26, i32* %15, align 4
  %27 = load i32, i32* %9, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i64 0, i64 %28
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  store i32 %31, i32* %16, align 4
  br label %32

32:                                               ; preds = %494, %4
  br label %33

33:                                               ; preds = %51, %32
  %34 = load i32, i32* %18, align 4
  %35 = load i32, i32* %8, align 4
  %36 = icmp ult i32 %34, %35
  br i1 %36, label %37, label %62

37:                                               ; preds = %33
  %38 = load i32, i32* @inptr, align 4
  %39 = load i32, i32* @insize, align 4
  %40 = icmp ult i32 %38, %39
  br i1 %40, label %41, label %48

41:                                               ; preds = %37
  %42 = load i32, i32* @inptr, align 4
  %43 = add i32 %42, 1
  store i32 %43, i32* @inptr, align 4
  %44 = zext i32 %42 to i64
  %45 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  br label %51

48:                                               ; preds = %37
  %49 = load i32, i32* %13, align 4
  store i32 %49, i32* @outcnt, align 4
  %50 = call i32 @fill_inbuf(i32 0)
  br label %51

51:                                               ; preds = %48, %41
  %52 = phi i32 [ %47, %41 ], [ %50, %48 ]
  %53 = trunc i32 %52 to i8
  %54 = zext i8 %53 to i64
  %55 = load i32, i32* %18, align 4
  %56 = zext i32 %55 to i64
  %57 = shl i64 %54, %56
  %58 = load i64, i64* %17, align 8
  %59 = or i64 %58, %57
  store i64 %59, i64* %17, align 8
  %60 = load i32, i32* %18, align 4
  %61 = add i32 %60, 8
  store i32 %61, i32* %18, align 4
  br label %33, !llvm.loop !80

62:                                               ; preds = %33
  %63 = load %struct.huft*, %struct.huft** %6, align 8
  %64 = load i64, i64* %17, align 8
  %65 = trunc i64 %64 to i32
  %66 = load i32, i32* %15, align 4
  %67 = and i32 %65, %66
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds %struct.huft, %struct.huft* %63, i64 %68
  store %struct.huft* %69, %struct.huft** %14, align 8
  %70 = getelementptr inbounds %struct.huft, %struct.huft* %69, i32 0, i32 0
  %71 = load i8, i8* %70, align 8
  %72 = zext i8 %71 to i32
  store i32 %72, i32* %10, align 4
  %73 = icmp ugt i32 %72, 16
  br i1 %73, label %74, label %145

74:                                               ; preds = %62
  br label %75

75:                                               ; preds = %125, %74
  %76 = load i32, i32* %10, align 4
  %77 = icmp eq i32 %76, 99
  br i1 %77, label %78, label %79

78:                                               ; preds = %75
  store i32 1, i32* %5, align 4
  br label %499

79:                                               ; preds = %75
  %80 = load %struct.huft*, %struct.huft** %14, align 8
  %81 = getelementptr inbounds %struct.huft, %struct.huft* %80, i32 0, i32 1
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = load i64, i64* %17, align 8
  %85 = zext i32 %83 to i64
  %86 = lshr i64 %84, %85
  store i64 %86, i64* %17, align 8
  %87 = load %struct.huft*, %struct.huft** %14, align 8
  %88 = getelementptr inbounds %struct.huft, %struct.huft* %87, i32 0, i32 1
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = load i32, i32* %18, align 4
  %92 = sub i32 %91, %90
  store i32 %92, i32* %18, align 4
  %93 = load i32, i32* %10, align 4
  %94 = sub i32 %93, 16
  store i32 %94, i32* %10, align 4
  br label %95

95:                                               ; preds = %113, %79
  %96 = load i32, i32* %18, align 4
  %97 = load i32, i32* %10, align 4
  %98 = icmp ult i32 %96, %97
  br i1 %98, label %99, label %124

99:                                               ; preds = %95
  %100 = load i32, i32* @inptr, align 4
  %101 = load i32, i32* @insize, align 4
  %102 = icmp ult i32 %100, %101
  br i1 %102, label %103, label %110

103:                                              ; preds = %99
  %104 = load i32, i32* @inptr, align 4
  %105 = add i32 %104, 1
  store i32 %105, i32* @inptr, align 4
  %106 = zext i32 %104 to i64
  %107 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  br label %113

110:                                              ; preds = %99
  %111 = load i32, i32* %13, align 4
  store i32 %111, i32* @outcnt, align 4
  %112 = call i32 @fill_inbuf(i32 0)
  br label %113

113:                                              ; preds = %110, %103
  %114 = phi i32 [ %109, %103 ], [ %112, %110 ]
  %115 = trunc i32 %114 to i8
  %116 = zext i8 %115 to i64
  %117 = load i32, i32* %18, align 4
  %118 = zext i32 %117 to i64
  %119 = shl i64 %116, %118
  %120 = load i64, i64* %17, align 8
  %121 = or i64 %120, %119
  store i64 %121, i64* %17, align 8
  %122 = load i32, i32* %18, align 4
  %123 = add i32 %122, 8
  store i32 %123, i32* %18, align 4
  br label %95, !llvm.loop !81

124:                                              ; preds = %95
  br label %125

125:                                              ; preds = %124
  %126 = load %struct.huft*, %struct.huft** %14, align 8
  %127 = getelementptr inbounds %struct.huft, %struct.huft* %126, i32 0, i32 2
  %128 = bitcast %union.anon* %127 to %struct.huft**
  %129 = load %struct.huft*, %struct.huft** %128, align 8
  %130 = load i64, i64* %17, align 8
  %131 = trunc i64 %130 to i32
  %132 = load i32, i32* %10, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i64 0, i64 %133
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = and i32 %131, %136
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds %struct.huft, %struct.huft* %129, i64 %138
  store %struct.huft* %139, %struct.huft** %14, align 8
  %140 = getelementptr inbounds %struct.huft, %struct.huft* %139, i32 0, i32 0
  %141 = load i8, i8* %140, align 8
  %142 = zext i8 %141 to i32
  store i32 %142, i32* %10, align 4
  %143 = icmp ugt i32 %142, 16
  br i1 %143, label %75, label %144, !llvm.loop !82

144:                                              ; preds = %125
  br label %145

145:                                              ; preds = %144, %62
  %146 = load %struct.huft*, %struct.huft** %14, align 8
  %147 = getelementptr inbounds %struct.huft, %struct.huft* %146, i32 0, i32 1
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = load i64, i64* %17, align 8
  %151 = zext i32 %149 to i64
  %152 = lshr i64 %150, %151
  store i64 %152, i64* %17, align 8
  %153 = load %struct.huft*, %struct.huft** %14, align 8
  %154 = getelementptr inbounds %struct.huft, %struct.huft* %153, i32 0, i32 1
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = load i32, i32* %18, align 4
  %158 = sub i32 %157, %156
  store i32 %158, i32* %18, align 4
  %159 = load i32, i32* %10, align 4
  %160 = icmp eq i32 %159, 16
  br i1 %160, label %161, label %176

161:                                              ; preds = %145
  %162 = load %struct.huft*, %struct.huft** %14, align 8
  %163 = getelementptr inbounds %struct.huft, %struct.huft* %162, i32 0, i32 2
  %164 = bitcast %union.anon* %163 to i16*
  %165 = load i16, i16* %164, align 8
  %166 = trunc i16 %165 to i8
  %167 = load i32, i32* %13, align 4
  %168 = add i32 %167, 1
  store i32 %168, i32* %13, align 4
  %169 = zext i32 %167 to i64
  %170 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %169
  store i8 %166, i8* %170, align 1
  %171 = load i32, i32* %13, align 4
  %172 = icmp eq i32 %171, 32768
  br i1 %172, label %173, label %175

173:                                              ; preds = %161
  %174 = load i32, i32* %13, align 4
  store i32 %174, i32* @outcnt, align 4
  call void @flush_window()
  store i32 0, i32* %13, align 4
  br label %175

175:                                              ; preds = %173, %161
  br label %494

176:                                              ; preds = %145
  %177 = load i32, i32* %10, align 4
  %178 = icmp eq i32 %177, 15
  br i1 %178, label %179, label %180

179:                                              ; preds = %176
  br label %495

180:                                              ; preds = %176
  br label %181

181:                                              ; preds = %199, %180
  %182 = load i32, i32* %18, align 4
  %183 = load i32, i32* %10, align 4
  %184 = icmp ult i32 %182, %183
  br i1 %184, label %185, label %210

185:                                              ; preds = %181
  %186 = load i32, i32* @inptr, align 4
  %187 = load i32, i32* @insize, align 4
  %188 = icmp ult i32 %186, %187
  br i1 %188, label %189, label %196

189:                                              ; preds = %185
  %190 = load i32, i32* @inptr, align 4
  %191 = add i32 %190, 1
  store i32 %191, i32* @inptr, align 4
  %192 = zext i32 %190 to i64
  %193 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %192
  %194 = load i8, i8* %193, align 1
  %195 = zext i8 %194 to i32
  br label %199

196:                                              ; preds = %185
  %197 = load i32, i32* %13, align 4
  store i32 %197, i32* @outcnt, align 4
  %198 = call i32 @fill_inbuf(i32 0)
  br label %199

199:                                              ; preds = %196, %189
  %200 = phi i32 [ %195, %189 ], [ %198, %196 ]
  %201 = trunc i32 %200 to i8
  %202 = zext i8 %201 to i64
  %203 = load i32, i32* %18, align 4
  %204 = zext i32 %203 to i64
  %205 = shl i64 %202, %204
  %206 = load i64, i64* %17, align 8
  %207 = or i64 %206, %205
  store i64 %207, i64* %17, align 8
  %208 = load i32, i32* %18, align 4
  %209 = add i32 %208, 8
  store i32 %209, i32* %18, align 4
  br label %181, !llvm.loop !83

210:                                              ; preds = %181
  %211 = load %struct.huft*, %struct.huft** %14, align 8
  %212 = getelementptr inbounds %struct.huft, %struct.huft* %211, i32 0, i32 2
  %213 = bitcast %union.anon* %212 to i16*
  %214 = load i16, i16* %213, align 8
  %215 = zext i16 %214 to i32
  %216 = load i64, i64* %17, align 8
  %217 = trunc i64 %216 to i32
  %218 = load i32, i32* %10, align 4
  %219 = zext i32 %218 to i64
  %220 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i64 0, i64 %219
  %221 = load i16, i16* %220, align 2
  %222 = zext i16 %221 to i32
  %223 = and i32 %217, %222
  %224 = add i32 %215, %223
  store i32 %224, i32* %11, align 4
  %225 = load i32, i32* %10, align 4
  %226 = load i64, i64* %17, align 8
  %227 = zext i32 %225 to i64
  %228 = lshr i64 %226, %227
  store i64 %228, i64* %17, align 8
  %229 = load i32, i32* %10, align 4
  %230 = load i32, i32* %18, align 4
  %231 = sub i32 %230, %229
  store i32 %231, i32* %18, align 4
  br label %232

232:                                              ; preds = %250, %210
  %233 = load i32, i32* %18, align 4
  %234 = load i32, i32* %9, align 4
  %235 = icmp ult i32 %233, %234
  br i1 %235, label %236, label %261

236:                                              ; preds = %232
  %237 = load i32, i32* @inptr, align 4
  %238 = load i32, i32* @insize, align 4
  %239 = icmp ult i32 %237, %238
  br i1 %239, label %240, label %247

240:                                              ; preds = %236
  %241 = load i32, i32* @inptr, align 4
  %242 = add i32 %241, 1
  store i32 %242, i32* @inptr, align 4
  %243 = zext i32 %241 to i64
  %244 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %243
  %245 = load i8, i8* %244, align 1
  %246 = zext i8 %245 to i32
  br label %250

247:                                              ; preds = %236
  %248 = load i32, i32* %13, align 4
  store i32 %248, i32* @outcnt, align 4
  %249 = call i32 @fill_inbuf(i32 0)
  br label %250

250:                                              ; preds = %247, %240
  %251 = phi i32 [ %246, %240 ], [ %249, %247 ]
  %252 = trunc i32 %251 to i8
  %253 = zext i8 %252 to i64
  %254 = load i32, i32* %18, align 4
  %255 = zext i32 %254 to i64
  %256 = shl i64 %253, %255
  %257 = load i64, i64* %17, align 8
  %258 = or i64 %257, %256
  store i64 %258, i64* %17, align 8
  %259 = load i32, i32* %18, align 4
  %260 = add i32 %259, 8
  store i32 %260, i32* %18, align 4
  br label %232, !llvm.loop !84

261:                                              ; preds = %232
  %262 = load %struct.huft*, %struct.huft** %7, align 8
  %263 = load i64, i64* %17, align 8
  %264 = trunc i64 %263 to i32
  %265 = load i32, i32* %16, align 4
  %266 = and i32 %264, %265
  %267 = zext i32 %266 to i64
  %268 = getelementptr inbounds %struct.huft, %struct.huft* %262, i64 %267
  store %struct.huft* %268, %struct.huft** %14, align 8
  %269 = getelementptr inbounds %struct.huft, %struct.huft* %268, i32 0, i32 0
  %270 = load i8, i8* %269, align 8
  %271 = zext i8 %270 to i32
  store i32 %271, i32* %10, align 4
  %272 = icmp ugt i32 %271, 16
  br i1 %272, label %273, label %344

273:                                              ; preds = %261
  br label %274

274:                                              ; preds = %324, %273
  %275 = load i32, i32* %10, align 4
  %276 = icmp eq i32 %275, 99
  br i1 %276, label %277, label %278

277:                                              ; preds = %274
  store i32 1, i32* %5, align 4
  br label %499

278:                                              ; preds = %274
  %279 = load %struct.huft*, %struct.huft** %14, align 8
  %280 = getelementptr inbounds %struct.huft, %struct.huft* %279, i32 0, i32 1
  %281 = load i8, i8* %280, align 1
  %282 = zext i8 %281 to i32
  %283 = load i64, i64* %17, align 8
  %284 = zext i32 %282 to i64
  %285 = lshr i64 %283, %284
  store i64 %285, i64* %17, align 8
  %286 = load %struct.huft*, %struct.huft** %14, align 8
  %287 = getelementptr inbounds %struct.huft, %struct.huft* %286, i32 0, i32 1
  %288 = load i8, i8* %287, align 1
  %289 = zext i8 %288 to i32
  %290 = load i32, i32* %18, align 4
  %291 = sub i32 %290, %289
  store i32 %291, i32* %18, align 4
  %292 = load i32, i32* %10, align 4
  %293 = sub i32 %292, 16
  store i32 %293, i32* %10, align 4
  br label %294

294:                                              ; preds = %312, %278
  %295 = load i32, i32* %18, align 4
  %296 = load i32, i32* %10, align 4
  %297 = icmp ult i32 %295, %296
  br i1 %297, label %298, label %323

298:                                              ; preds = %294
  %299 = load i32, i32* @inptr, align 4
  %300 = load i32, i32* @insize, align 4
  %301 = icmp ult i32 %299, %300
  br i1 %301, label %302, label %309

302:                                              ; preds = %298
  %303 = load i32, i32* @inptr, align 4
  %304 = add i32 %303, 1
  store i32 %304, i32* @inptr, align 4
  %305 = zext i32 %303 to i64
  %306 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %305
  %307 = load i8, i8* %306, align 1
  %308 = zext i8 %307 to i32
  br label %312

309:                                              ; preds = %298
  %310 = load i32, i32* %13, align 4
  store i32 %310, i32* @outcnt, align 4
  %311 = call i32 @fill_inbuf(i32 0)
  br label %312

312:                                              ; preds = %309, %302
  %313 = phi i32 [ %308, %302 ], [ %311, %309 ]
  %314 = trunc i32 %313 to i8
  %315 = zext i8 %314 to i64
  %316 = load i32, i32* %18, align 4
  %317 = zext i32 %316 to i64
  %318 = shl i64 %315, %317
  %319 = load i64, i64* %17, align 8
  %320 = or i64 %319, %318
  store i64 %320, i64* %17, align 8
  %321 = load i32, i32* %18, align 4
  %322 = add i32 %321, 8
  store i32 %322, i32* %18, align 4
  br label %294, !llvm.loop !85

323:                                              ; preds = %294
  br label %324

324:                                              ; preds = %323
  %325 = load %struct.huft*, %struct.huft** %14, align 8
  %326 = getelementptr inbounds %struct.huft, %struct.huft* %325, i32 0, i32 2
  %327 = bitcast %union.anon* %326 to %struct.huft**
  %328 = load %struct.huft*, %struct.huft** %327, align 8
  %329 = load i64, i64* %17, align 8
  %330 = trunc i64 %329 to i32
  %331 = load i32, i32* %10, align 4
  %332 = zext i32 %331 to i64
  %333 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i64 0, i64 %332
  %334 = load i16, i16* %333, align 2
  %335 = zext i16 %334 to i32
  %336 = and i32 %330, %335
  %337 = zext i32 %336 to i64
  %338 = getelementptr inbounds %struct.huft, %struct.huft* %328, i64 %337
  store %struct.huft* %338, %struct.huft** %14, align 8
  %339 = getelementptr inbounds %struct.huft, %struct.huft* %338, i32 0, i32 0
  %340 = load i8, i8* %339, align 8
  %341 = zext i8 %340 to i32
  store i32 %341, i32* %10, align 4
  %342 = icmp ugt i32 %341, 16
  br i1 %342, label %274, label %343, !llvm.loop !86

343:                                              ; preds = %324
  br label %344

344:                                              ; preds = %343, %261
  %345 = load %struct.huft*, %struct.huft** %14, align 8
  %346 = getelementptr inbounds %struct.huft, %struct.huft* %345, i32 0, i32 1
  %347 = load i8, i8* %346, align 1
  %348 = zext i8 %347 to i32
  %349 = load i64, i64* %17, align 8
  %350 = zext i32 %348 to i64
  %351 = lshr i64 %349, %350
  store i64 %351, i64* %17, align 8
  %352 = load %struct.huft*, %struct.huft** %14, align 8
  %353 = getelementptr inbounds %struct.huft, %struct.huft* %352, i32 0, i32 1
  %354 = load i8, i8* %353, align 1
  %355 = zext i8 %354 to i32
  %356 = load i32, i32* %18, align 4
  %357 = sub i32 %356, %355
  store i32 %357, i32* %18, align 4
  br label %358

358:                                              ; preds = %376, %344
  %359 = load i32, i32* %18, align 4
  %360 = load i32, i32* %10, align 4
  %361 = icmp ult i32 %359, %360
  br i1 %361, label %362, label %387

362:                                              ; preds = %358
  %363 = load i32, i32* @inptr, align 4
  %364 = load i32, i32* @insize, align 4
  %365 = icmp ult i32 %363, %364
  br i1 %365, label %366, label %373

366:                                              ; preds = %362
  %367 = load i32, i32* @inptr, align 4
  %368 = add i32 %367, 1
  store i32 %368, i32* @inptr, align 4
  %369 = zext i32 %367 to i64
  %370 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %369
  %371 = load i8, i8* %370, align 1
  %372 = zext i8 %371 to i32
  br label %376

373:                                              ; preds = %362
  %374 = load i32, i32* %13, align 4
  store i32 %374, i32* @outcnt, align 4
  %375 = call i32 @fill_inbuf(i32 0)
  br label %376

376:                                              ; preds = %373, %366
  %377 = phi i32 [ %372, %366 ], [ %375, %373 ]
  %378 = trunc i32 %377 to i8
  %379 = zext i8 %378 to i64
  %380 = load i32, i32* %18, align 4
  %381 = zext i32 %380 to i64
  %382 = shl i64 %379, %381
  %383 = load i64, i64* %17, align 8
  %384 = or i64 %383, %382
  store i64 %384, i64* %17, align 8
  %385 = load i32, i32* %18, align 4
  %386 = add i32 %385, 8
  store i32 %386, i32* %18, align 4
  br label %358, !llvm.loop !87

387:                                              ; preds = %358
  %388 = load i32, i32* %13, align 4
  %389 = load %struct.huft*, %struct.huft** %14, align 8
  %390 = getelementptr inbounds %struct.huft, %struct.huft* %389, i32 0, i32 2
  %391 = bitcast %union.anon* %390 to i16*
  %392 = load i16, i16* %391, align 8
  %393 = zext i16 %392 to i32
  %394 = sub i32 %388, %393
  %395 = load i64, i64* %17, align 8
  %396 = trunc i64 %395 to i32
  %397 = load i32, i32* %10, align 4
  %398 = zext i32 %397 to i64
  %399 = getelementptr inbounds [17 x i16], [17 x i16]* @mask_bits, i64 0, i64 %398
  %400 = load i16, i16* %399, align 2
  %401 = zext i16 %400 to i32
  %402 = and i32 %396, %401
  %403 = sub i32 %394, %402
  store i32 %403, i32* %12, align 4
  %404 = load i32, i32* %10, align 4
  %405 = load i64, i64* %17, align 8
  %406 = zext i32 %404 to i64
  %407 = lshr i64 %405, %406
  store i64 %407, i64* %17, align 8
  %408 = load i32, i32* %10, align 4
  %409 = load i32, i32* %18, align 4
  %410 = sub i32 %409, %408
  store i32 %410, i32* %18, align 4
  br label %411

411:                                              ; preds = %490, %387
  %412 = load i32, i32* %12, align 4
  %413 = and i32 %412, 32767
  store i32 %413, i32* %12, align 4
  %414 = load i32, i32* %13, align 4
  %415 = icmp ugt i32 %413, %414
  br i1 %415, label %416, label %418

416:                                              ; preds = %411
  %417 = load i32, i32* %12, align 4
  br label %420

418:                                              ; preds = %411
  %419 = load i32, i32* %13, align 4
  br label %420

420:                                              ; preds = %418, %416
  %421 = phi i32 [ %417, %416 ], [ %419, %418 ]
  %422 = sub i32 32768, %421
  store i32 %422, i32* %10, align 4
  %423 = load i32, i32* %11, align 4
  %424 = icmp ugt i32 %422, %423
  br i1 %424, label %425, label %427

425:                                              ; preds = %420
  %426 = load i32, i32* %11, align 4
  br label %429

427:                                              ; preds = %420
  %428 = load i32, i32* %10, align 4
  br label %429

429:                                              ; preds = %427, %425
  %430 = phi i32 [ %426, %425 ], [ %428, %427 ]
  store i32 %430, i32* %10, align 4
  %431 = load i32, i32* %11, align 4
  %432 = sub i32 %431, %430
  store i32 %432, i32* %11, align 4
  %433 = load i32, i32* %10, align 4
  %434 = load i32, i32* %12, align 4
  %435 = load i32, i32* %13, align 4
  %436 = icmp ult i32 %434, %435
  br i1 %436, label %437, label %441

437:                                              ; preds = %429
  %438 = load i32, i32* %13, align 4
  %439 = load i32, i32* %12, align 4
  %440 = sub i32 %438, %439
  br label %445

441:                                              ; preds = %429
  %442 = load i32, i32* %12, align 4
  %443 = load i32, i32* %13, align 4
  %444 = sub i32 %442, %443
  br label %445

445:                                              ; preds = %441, %437
  %446 = phi i32 [ %440, %437 ], [ %444, %441 ]
  %447 = icmp ule i32 %433, %446
  br i1 %447, label %448, label %468

448:                                              ; preds = %445
  %449 = load i32, i32* %13, align 4
  %450 = zext i32 %449 to i64
  %451 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %450
  %452 = load i32, i32* %12, align 4
  %453 = zext i32 %452 to i64
  %454 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %453
  %455 = load i32, i32* %10, align 4
  %456 = zext i32 %455 to i64
  %457 = load i32, i32* %13, align 4
  %458 = zext i32 %457 to i64
  %459 = getelementptr inbounds i8, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i64 %458
  %460 = call i64 @llvm.objectsize.i64.p0i8(i8* %459, i1 false, i1 true, i1 false)
  %461 = call i8* @__memcpy_chk(i8* %451, i8* %454, i64 %456, i64 %460) #24
  %462 = load i32, i32* %10, align 4
  %463 = load i32, i32* %13, align 4
  %464 = add i32 %463, %462
  store i32 %464, i32* %13, align 4
  %465 = load i32, i32* %10, align 4
  %466 = load i32, i32* %12, align 4
  %467 = add i32 %466, %465
  store i32 %467, i32* %12, align 4
  br label %484

468:                                              ; preds = %445
  br label %469

469:                                              ; preds = %479, %468
  %470 = load i32, i32* %12, align 4
  %471 = add i32 %470, 1
  store i32 %471, i32* %12, align 4
  %472 = zext i32 %470 to i64
  %473 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %472
  %474 = load i8, i8* %473, align 1
  %475 = load i32, i32* %13, align 4
  %476 = add i32 %475, 1
  store i32 %476, i32* %13, align 4
  %477 = zext i32 %475 to i64
  %478 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %477
  store i8 %474, i8* %478, align 1
  br label %479

479:                                              ; preds = %469
  %480 = load i32, i32* %10, align 4
  %481 = add i32 %480, -1
  store i32 %481, i32* %10, align 4
  %482 = icmp ne i32 %481, 0
  br i1 %482, label %469, label %483, !llvm.loop !88

483:                                              ; preds = %479
  br label %484

484:                                              ; preds = %483, %448
  %485 = load i32, i32* %13, align 4
  %486 = icmp eq i32 %485, 32768
  br i1 %486, label %487, label %489

487:                                              ; preds = %484
  %488 = load i32, i32* %13, align 4
  store i32 %488, i32* @outcnt, align 4
  call void @flush_window()
  store i32 0, i32* %13, align 4
  br label %489

489:                                              ; preds = %487, %484
  br label %490

490:                                              ; preds = %489
  %491 = load i32, i32* %11, align 4
  %492 = icmp ne i32 %491, 0
  br i1 %492, label %411, label %493, !llvm.loop !89

493:                                              ; preds = %490
  br label %494

494:                                              ; preds = %493, %175
  br label %32

495:                                              ; preds = %179
  %496 = load i32, i32* %13, align 4
  store i32 %496, i32* @outcnt, align 4
  %497 = load i64, i64* %17, align 8
  store i64 %497, i64* @bb, align 8
  %498 = load i32, i32* %18, align 4
  store i32 %498, i32* @bk, align 4
  store i32 0, i32* %5, align 4
  br label %499

499:                                              ; preds = %495, %277, %78
  %500 = load i32, i32* %5, align 4
  ret i32 %500
}

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #8

; Function Attrs: allocsize(0)
declare align 16 i8* @malloc(i64) #9

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @ct_init(i16* %0, i32* %1) #0 {
  %3 = alloca i16*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i16* %0, i16** %3, align 8
  store i32* %1, i32** %4, align 8
  %10 = load i16*, i16** %3, align 8
  store i16* %10, i16** @file_type, align 8
  %11 = load i32*, i32** %4, align 8
  store i32* %11, i32** @file_method, align 8
  store i64 0, i64* @input_len, align 8
  store i64 0, i64* @compressed_len, align 8
  %12 = load i16, i16* getelementptr inbounds ([30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i64 0, i64 0, i32 1, i32 0), align 2
  %13 = zext i16 %12 to i32
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %2
  br label %205

16:                                               ; preds = %2
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  br label %17

17:                                               ; preds = %44, %16
  %18 = load i32, i32* %8, align 4
  %19 = icmp slt i32 %18, 28
  br i1 %19, label %20, label %47

20:                                               ; preds = %17
  %21 = load i32, i32* %7, align 4
  %22 = load i32, i32* %8, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [29 x i32], [29 x i32]* @base_length, i64 0, i64 %23
  store i32 %21, i32* %24, align 4
  store i32 0, i32* %5, align 4
  br label %25

25:                                               ; preds = %40, %20
  %26 = load i32, i32* %5, align 4
  %27 = load i32, i32* %8, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [29 x i32], [29 x i32]* @extra_lbits, i64 0, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = shl i32 1, %30
  %32 = icmp slt i32 %26, %31
  br i1 %32, label %33, label %43

33:                                               ; preds = %25
  %34 = load i32, i32* %8, align 4
  %35 = trunc i32 %34 to i8
  %36 = load i32, i32* %7, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %7, align 4
  %38 = sext i32 %36 to i64
  %39 = getelementptr inbounds [256 x i8], [256 x i8]* @length_code, i64 0, i64 %38
  store i8 %35, i8* %39, align 1
  br label %40

40:                                               ; preds = %33
  %41 = load i32, i32* %5, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %5, align 4
  br label %25, !llvm.loop !90

43:                                               ; preds = %25
  br label %44

44:                                               ; preds = %43
  %45 = load i32, i32* %8, align 4
  %46 = add nsw i32 %45, 1
  store i32 %46, i32* %8, align 4
  br label %17, !llvm.loop !91

47:                                               ; preds = %17
  %48 = load i32, i32* %8, align 4
  %49 = trunc i32 %48 to i8
  %50 = load i32, i32* %7, align 4
  %51 = sub nsw i32 %50, 1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [256 x i8], [256 x i8]* @length_code, i64 0, i64 %52
  store i8 %49, i8* %53, align 1
  store i32 0, i32* %9, align 4
  store i32 0, i32* %8, align 4
  br label %54

54:                                               ; preds = %81, %47
  %55 = load i32, i32* %8, align 4
  %56 = icmp slt i32 %55, 16
  br i1 %56, label %57, label %84

57:                                               ; preds = %54
  %58 = load i32, i32* %9, align 4
  %59 = load i32, i32* %8, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [30 x i32], [30 x i32]* @base_dist, i64 0, i64 %60
  store i32 %58, i32* %61, align 4
  store i32 0, i32* %5, align 4
  br label %62

62:                                               ; preds = %77, %57
  %63 = load i32, i32* %5, align 4
  %64 = load i32, i32* %8, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [30 x i32], [30 x i32]* @extra_dbits, i64 0, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = shl i32 1, %67
  %69 = icmp slt i32 %63, %68
  br i1 %69, label %70, label %80

70:                                               ; preds = %62
  %71 = load i32, i32* %8, align 4
  %72 = trunc i32 %71 to i8
  %73 = load i32, i32* %9, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %9, align 4
  %75 = sext i32 %73 to i64
  %76 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i64 0, i64 %75
  store i8 %72, i8* %76, align 1
  br label %77

77:                                               ; preds = %70
  %78 = load i32, i32* %5, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %5, align 4
  br label %62, !llvm.loop !92

80:                                               ; preds = %62
  br label %81

81:                                               ; preds = %80
  %82 = load i32, i32* %8, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %8, align 4
  br label %54, !llvm.loop !93

84:                                               ; preds = %54
  %85 = load i32, i32* %9, align 4
  %86 = ashr i32 %85, 7
  store i32 %86, i32* %9, align 4
  br label %87

87:                                               ; preds = %117, %84
  %88 = load i32, i32* %8, align 4
  %89 = icmp slt i32 %88, 30
  br i1 %89, label %90, label %120

90:                                               ; preds = %87
  %91 = load i32, i32* %9, align 4
  %92 = shl i32 %91, 7
  %93 = load i32, i32* %8, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [30 x i32], [30 x i32]* @base_dist, i64 0, i64 %94
  store i32 %92, i32* %95, align 4
  store i32 0, i32* %5, align 4
  br label %96

96:                                               ; preds = %113, %90
  %97 = load i32, i32* %5, align 4
  %98 = load i32, i32* %8, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [30 x i32], [30 x i32]* @extra_dbits, i64 0, i64 %99
  %101 = load i32, i32* %100, align 4
  %102 = sub nsw i32 %101, 7
  %103 = shl i32 1, %102
  %104 = icmp slt i32 %97, %103
  br i1 %104, label %105, label %116

105:                                              ; preds = %96
  %106 = load i32, i32* %8, align 4
  %107 = trunc i32 %106 to i8
  %108 = load i32, i32* %9, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %9, align 4
  %110 = add nsw i32 256, %108
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i64 0, i64 %111
  store i8 %107, i8* %112, align 1
  br label %113

113:                                              ; preds = %105
  %114 = load i32, i32* %5, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %5, align 4
  br label %96, !llvm.loop !94

116:                                              ; preds = %96
  br label %117

117:                                              ; preds = %116
  %118 = load i32, i32* %8, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %8, align 4
  br label %87, !llvm.loop !95

120:                                              ; preds = %87
  store i32 0, i32* %6, align 4
  br label %121

121:                                              ; preds = %128, %120
  %122 = load i32, i32* %6, align 4
  %123 = icmp sle i32 %122, 15
  br i1 %123, label %124, label %131

124:                                              ; preds = %121
  %125 = load i32, i32* %6, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %126
  store i16 0, i16* %127, align 2
  br label %128

128:                                              ; preds = %124
  %129 = load i32, i32* %6, align 4
  %130 = add nsw i32 %129, 1
  store i32 %130, i32* %6, align 4
  br label %121, !llvm.loop !96

131:                                              ; preds = %121
  store i32 0, i32* %5, align 4
  br label %132

132:                                              ; preds = %135, %131
  %133 = load i32, i32* %5, align 4
  %134 = icmp sle i32 %133, 143
  br i1 %134, label %135, label %144

135:                                              ; preds = %132
  %136 = load i32, i32* %5, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %5, align 4
  %138 = sext i32 %136 to i64
  %139 = getelementptr inbounds [288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i64 0, i64 %138
  %140 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %139, i32 0, i32 1
  %141 = bitcast %union.anon.0* %140 to i16*
  store i16 8, i16* %141, align 2
  %142 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 8), align 16
  %143 = add i16 %142, 1
  store i16 %143, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 8), align 16
  br label %132, !llvm.loop !97

144:                                              ; preds = %132
  br label %145

145:                                              ; preds = %148, %144
  %146 = load i32, i32* %5, align 4
  %147 = icmp sle i32 %146, 255
  br i1 %147, label %148, label %157

148:                                              ; preds = %145
  %149 = load i32, i32* %5, align 4
  %150 = add nsw i32 %149, 1
  store i32 %150, i32* %5, align 4
  %151 = sext i32 %149 to i64
  %152 = getelementptr inbounds [288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i64 0, i64 %151
  %153 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %152, i32 0, i32 1
  %154 = bitcast %union.anon.0* %153 to i16*
  store i16 9, i16* %154, align 2
  %155 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 9), align 2
  %156 = add i16 %155, 1
  store i16 %156, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 9), align 2
  br label %145, !llvm.loop !98

157:                                              ; preds = %145
  br label %158

158:                                              ; preds = %161, %157
  %159 = load i32, i32* %5, align 4
  %160 = icmp sle i32 %159, 279
  br i1 %160, label %161, label %170

161:                                              ; preds = %158
  %162 = load i32, i32* %5, align 4
  %163 = add nsw i32 %162, 1
  store i32 %163, i32* %5, align 4
  %164 = sext i32 %162 to i64
  %165 = getelementptr inbounds [288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i64 0, i64 %164
  %166 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %165, i32 0, i32 1
  %167 = bitcast %union.anon.0* %166 to i16*
  store i16 7, i16* %167, align 2
  %168 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 7), align 2
  %169 = add i16 %168, 1
  store i16 %169, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 7), align 2
  br label %158, !llvm.loop !99

170:                                              ; preds = %158
  br label %171

171:                                              ; preds = %174, %170
  %172 = load i32, i32* %5, align 4
  %173 = icmp sle i32 %172, 287
  br i1 %173, label %174, label %183

174:                                              ; preds = %171
  %175 = load i32, i32* %5, align 4
  %176 = add nsw i32 %175, 1
  store i32 %176, i32* %5, align 4
  %177 = sext i32 %175 to i64
  %178 = getelementptr inbounds [288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i64 0, i64 %177
  %179 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %178, i32 0, i32 1
  %180 = bitcast %union.anon.0* %179 to i16*
  store i16 8, i16* %180, align 2
  %181 = load i16, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 8), align 16
  %182 = add i16 %181, 1
  store i16 %182, i16* getelementptr inbounds ([16 x i16], [16 x i16]* @bl_count, i64 0, i64 8), align 16
  br label %171, !llvm.loop !100

183:                                              ; preds = %171
  call void @gen_codes(%struct.ct_data* getelementptr inbounds ([288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i64 0, i64 0), i32 287)
  store i32 0, i32* %5, align 4
  br label %184

184:                                              ; preds = %201, %183
  %185 = load i32, i32* %5, align 4
  %186 = icmp slt i32 %185, 30
  br i1 %186, label %187, label %204

187:                                              ; preds = %184
  %188 = load i32, i32* %5, align 4
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds [30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i64 0, i64 %189
  %191 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %190, i32 0, i32 1
  %192 = bitcast %union.anon.0* %191 to i16*
  store i16 5, i16* %192, align 2
  %193 = load i32, i32* %5, align 4
  %194 = call i32 @bi_reverse(i32 %193, i32 5) #27
  %195 = trunc i32 %194 to i16
  %196 = load i32, i32* %5, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds [30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i64 0, i64 %197
  %199 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %198, i32 0, i32 0
  %200 = bitcast %union.anon.0* %199 to i16*
  store i16 %195, i16* %200, align 4
  br label %201

201:                                              ; preds = %187
  %202 = load i32, i32* %5, align 4
  %203 = add nsw i32 %202, 1
  store i32 %203, i32* %5, align 4
  br label %184, !llvm.loop !101

204:                                              ; preds = %184
  call void @init_block()
  br label %205

205:                                              ; preds = %204, %15
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @gen_codes(%struct.ct_data* %0, i32 %1) #0 {
  %3 = alloca %struct.ct_data*, align 8
  %4 = alloca i32, align 4
  %5 = alloca [16 x i16], align 16
  %6 = alloca i16, align 2
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store %struct.ct_data* %0, %struct.ct_data** %3, align 8
  store i32 %1, i32* %4, align 4
  store i16 0, i16* %6, align 2
  store i32 1, i32* %7, align 4
  br label %10

10:                                               ; preds = %28, %2
  %11 = load i32, i32* %7, align 4
  %12 = icmp sle i32 %11, 15
  br i1 %12, label %13, label %31

13:                                               ; preds = %10
  %14 = load i16, i16* %6, align 2
  %15 = zext i16 %14 to i32
  %16 = load i32, i32* %7, align 4
  %17 = sub nsw i32 %16, 1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %18
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i32
  %22 = add nsw i32 %15, %21
  %23 = shl i32 %22, 1
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %6, align 2
  %25 = load i32, i32* %7, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 %26
  store i16 %24, i16* %27, align 2
  br label %28

28:                                               ; preds = %13
  %29 = load i32, i32* %7, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %7, align 4
  br label %10, !llvm.loop !102

31:                                               ; preds = %10
  store i32 0, i32* %8, align 4
  br label %32

32:                                               ; preds = %64, %31
  %33 = load i32, i32* %8, align 4
  %34 = load i32, i32* %4, align 4
  %35 = icmp sle i32 %33, %34
  br i1 %35, label %36, label %67

36:                                               ; preds = %32
  %37 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %38 = load i32, i32* %8, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %37, i64 %39
  %41 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %40, i32 0, i32 1
  %42 = bitcast %union.anon.0* %41 to i16*
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  store i32 %44, i32* %9, align 4
  %45 = load i32, i32* %9, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %36
  br label %64

48:                                               ; preds = %36
  %49 = load i32, i32* %9, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [16 x i16], [16 x i16]* %5, i64 0, i64 %50
  %52 = load i16, i16* %51, align 2
  %53 = add i16 %52, 1
  store i16 %53, i16* %51, align 2
  %54 = zext i16 %52 to i32
  %55 = load i32, i32* %9, align 4
  %56 = call i32 @bi_reverse(i32 %54, i32 %55) #27
  %57 = trunc i32 %56 to i16
  %58 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %59 = load i32, i32* %8, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %58, i64 %60
  %62 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %61, i32 0, i32 0
  %63 = bitcast %union.anon.0* %62 to i16*
  store i16 %57, i16* %63, align 2
  br label %64

64:                                               ; preds = %48, %47
  %65 = load i32, i32* %8, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %8, align 4
  br label %32, !llvm.loop !103

67:                                               ; preds = %32
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @init_block() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  br label %2

2:                                                ; preds = %11, %0
  %3 = load i32, i32* %1, align 4
  %4 = icmp slt i32 %3, 286
  br i1 %4, label %5, label %14

5:                                                ; preds = %2
  %6 = load i32, i32* %1, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 %7
  %9 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %8, i32 0, i32 0
  %10 = bitcast %union.anon.0* %9 to i16*
  store i16 0, i16* %10, align 4
  br label %11

11:                                               ; preds = %5
  %12 = load i32, i32* %1, align 4
  %13 = add nsw i32 %12, 1
  store i32 %13, i32* %1, align 4
  br label %2, !llvm.loop !104

14:                                               ; preds = %2
  store i32 0, i32* %1, align 4
  br label %15

15:                                               ; preds = %24, %14
  %16 = load i32, i32* %1, align 4
  %17 = icmp slt i32 %16, 30
  br i1 %17, label %18, label %27

18:                                               ; preds = %15
  %19 = load i32, i32* %1, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i64 0, i64 %20
  %22 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %21, i32 0, i32 0
  %23 = bitcast %union.anon.0* %22 to i16*
  store i16 0, i16* %23, align 4
  br label %24

24:                                               ; preds = %18
  %25 = load i32, i32* %1, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %1, align 4
  br label %15, !llvm.loop !105

27:                                               ; preds = %15
  store i32 0, i32* %1, align 4
  br label %28

28:                                               ; preds = %37, %27
  %29 = load i32, i32* %1, align 4
  %30 = icmp slt i32 %29, 19
  br i1 %30, label %31, label %40

31:                                               ; preds = %28
  %32 = load i32, i32* %1, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %33
  %35 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %34, i32 0, i32 0
  %36 = bitcast %union.anon.0* %35 to i16*
  store i16 0, i16* %36, align 4
  br label %37

37:                                               ; preds = %31
  %38 = load i32, i32* %1, align 4
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %1, align 4
  br label %28, !llvm.loop !106

40:                                               ; preds = %28
  store i16 1, i16* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 256, i32 0, i32 0), align 16
  store i64 0, i64* @static_len, align 8
  store i64 0, i64* @opt_len, align 8
  store i32 0, i32* @last_flags, align 4
  store i32 0, i32* @last_dist, align 4
  store i32 0, i32* @last_lit, align 4
  store i8 0, i8* @flags, align 1
  store i8 1, i8* @flag_bit, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @flush_block(i8* %0, i64 %1, i32 %2, i32 %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %12 = load i8, i8* @flags, align 1
  %13 = load i32, i32* @last_flags, align 4
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds [4096 x i8], [4096 x i8]* @flag_buf, i64 0, i64 %14
  store i8 %12, i8* %15, align 1
  %16 = load i16*, i16** @file_type, align 8
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = icmp eq i32 %18, 65535
  br i1 %19, label %20, label %21

20:                                               ; preds = %4
  call void @set_file_type()
  br label %21

21:                                               ; preds = %20, %4
  call void @build_tree(%struct.tree_desc* @l_desc)
  call void @build_tree(%struct.tree_desc* @d_desc)
  %22 = call i32 @build_bl_tree()
  store i32 %22, i32* %11, align 4
  %23 = load i64, i64* @opt_len, align 8
  %24 = add i64 %23, 3
  %25 = add i64 %24, 7
  %26 = lshr i64 %25, 3
  store i64 %26, i64* %9, align 8
  %27 = load i64, i64* @static_len, align 8
  %28 = add i64 %27, 3
  %29 = add i64 %28, 7
  %30 = lshr i64 %29, 3
  store i64 %30, i64* %10, align 8
  %31 = load i64, i64* %6, align 8
  %32 = load i64, i64* @input_len, align 8
  %33 = add i64 %32, %31
  store i64 %33, i64* @input_len, align 8
  %34 = load i64, i64* %10, align 8
  %35 = load i64, i64* %9, align 8
  %36 = icmp ule i64 %34, %35
  br i1 %36, label %37, label %39

37:                                               ; preds = %21
  %38 = load i64, i64* %10, align 8
  store i64 %38, i64* %9, align 8
  br label %39

39:                                               ; preds = %37, %21
  %40 = load i64, i64* %6, align 8
  %41 = load i64, i64* %9, align 8
  %42 = icmp ule i64 %40, %41
  br i1 %42, label %43, label %61

43:                                               ; preds = %39
  %44 = load i32, i32* %8, align 4
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %61

46:                                               ; preds = %43
  %47 = load i64, i64* @compressed_len, align 8
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %49, label %61

49:                                               ; preds = %46
  br i1 false, label %50, label %61

50:                                               ; preds = %49
  %51 = load i8*, i8** %5, align 8
  %52 = icmp ne i8* %51, null
  br i1 %52, label %54, label %53

53:                                               ; preds = %50
  call void @gzip_error(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.150, i64 0, i64 0)) #23
  unreachable

54:                                               ; preds = %50
  %55 = load i8*, i8** %5, align 8
  %56 = load i64, i64* %6, align 8
  %57 = trunc i64 %56 to i32
  call void @copy_block(i8* %55, i32 %57, i32 0)
  %58 = load i64, i64* %6, align 8
  %59 = shl i64 %58, 3
  store i64 %59, i64* @compressed_len, align 8
  %60 = load i32*, i32** @file_method, align 8
  store i32 0, i32* %60, align 4
  br label %110

61:                                               ; preds = %49, %46, %43, %39
  %62 = load i64, i64* %6, align 8
  %63 = add i64 %62, 4
  %64 = load i64, i64* %9, align 8
  %65 = icmp ule i64 %63, %64
  br i1 %65, label %66, label %84

66:                                               ; preds = %61
  %67 = load i8*, i8** %5, align 8
  %68 = icmp ne i8* %67, null
  br i1 %68, label %69, label %84

69:                                               ; preds = %66
  %70 = load i32, i32* %8, align 4
  %71 = add nsw i32 0, %70
  call void @send_bits(i32 %71, i32 3)
  %72 = load i64, i64* @compressed_len, align 8
  %73 = add nsw i64 %72, 3
  %74 = add nsw i64 %73, 7
  %75 = and i64 %74, -8
  store i64 %75, i64* @compressed_len, align 8
  %76 = load i64, i64* %6, align 8
  %77 = add i64 %76, 4
  %78 = shl i64 %77, 3
  %79 = load i64, i64* @compressed_len, align 8
  %80 = add i64 %79, %78
  store i64 %80, i64* @compressed_len, align 8
  %81 = load i8*, i8** %5, align 8
  %82 = load i64, i64* %6, align 8
  %83 = trunc i64 %82 to i32
  call void @copy_block(i8* %81, i32 %83, i32 1)
  br label %109

84:                                               ; preds = %66, %61
  %85 = load i64, i64* %10, align 8
  %86 = load i64, i64* %9, align 8
  %87 = icmp eq i64 %85, %86
  br i1 %87, label %88, label %95

88:                                               ; preds = %84
  %89 = load i32, i32* %8, align 4
  %90 = add nsw i32 2, %89
  call void @send_bits(i32 %90, i32 3)
  call void @compress_block(%struct.ct_data* getelementptr inbounds ([288 x %struct.ct_data], [288 x %struct.ct_data]* @static_ltree, i64 0, i64 0), %struct.ct_data* getelementptr inbounds ([30 x %struct.ct_data], [30 x %struct.ct_data]* @static_dtree, i64 0, i64 0))
  %91 = load i64, i64* @static_len, align 8
  %92 = add i64 3, %91
  %93 = load i64, i64* @compressed_len, align 8
  %94 = add i64 %93, %92
  store i64 %94, i64* @compressed_len, align 8
  br label %108

95:                                               ; preds = %84
  %96 = load i32, i32* %8, align 4
  %97 = add nsw i32 4, %96
  call void @send_bits(i32 %97, i32 3)
  %98 = load i32, i32* getelementptr inbounds (%struct.tree_desc, %struct.tree_desc* @l_desc, i32 0, i32 6), align 4
  %99 = add nsw i32 %98, 1
  %100 = load i32, i32* getelementptr inbounds (%struct.tree_desc, %struct.tree_desc* @d_desc, i32 0, i32 6), align 4
  %101 = add nsw i32 %100, 1
  %102 = load i32, i32* %11, align 4
  %103 = add nsw i32 %102, 1
  call void @send_all_trees(i32 %99, i32 %101, i32 %103)
  call void @compress_block(%struct.ct_data* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 0), %struct.ct_data* getelementptr inbounds ([61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i64 0, i64 0))
  %104 = load i64, i64* @opt_len, align 8
  %105 = add i64 3, %104
  %106 = load i64, i64* @compressed_len, align 8
  %107 = add i64 %106, %105
  store i64 %107, i64* @compressed_len, align 8
  br label %108

108:                                              ; preds = %95, %88
  br label %109

109:                                              ; preds = %108, %69
  br label %110

110:                                              ; preds = %109, %54
  call void @init_block()
  %111 = load i32, i32* %8, align 4
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %113, label %116

113:                                              ; preds = %110
  call void @bi_windup()
  %114 = load i64, i64* @compressed_len, align 8
  %115 = add nsw i64 %114, 7
  store i64 %115, i64* @compressed_len, align 8
  br label %132

116:                                              ; preds = %110
  %117 = load i32, i32* %7, align 4
  %118 = icmp ne i32 %117, 0
  br i1 %118, label %119, label %131

119:                                              ; preds = %116
  %120 = load i64, i64* @compressed_len, align 8
  %121 = srem i64 %120, 8
  %122 = icmp ne i64 %121, 0
  br i1 %122, label %123, label %131

123:                                              ; preds = %119
  %124 = load i32, i32* %8, align 4
  %125 = add nsw i32 0, %124
  call void @send_bits(i32 %125, i32 3)
  %126 = load i64, i64* @compressed_len, align 8
  %127 = add nsw i64 %126, 3
  %128 = add nsw i64 %127, 7
  %129 = and i64 %128, -8
  store i64 %129, i64* @compressed_len, align 8
  %130 = load i8*, i8** %5, align 8
  call void @copy_block(i8* %130, i32 0, i32 1)
  br label %131

131:                                              ; preds = %123, %119, %116
  br label %132

132:                                              ; preds = %131, %113
  %133 = load i64, i64* @compressed_len, align 8
  %134 = ashr i64 %133, 3
  ret i64 %134
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @set_file_type() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  br label %4

4:                                                ; preds = %7, %0
  %5 = load i32, i32* %1, align 4
  %6 = icmp slt i32 %5, 7
  br i1 %6, label %7, label %18

7:                                                ; preds = %4
  %8 = load i32, i32* %1, align 4
  %9 = add nsw i32 %8, 1
  store i32 %9, i32* %1, align 4
  %10 = sext i32 %8 to i64
  %11 = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 %10
  %12 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %11, i32 0, i32 0
  %13 = bitcast %union.anon.0* %12 to i16*
  %14 = load i16, i16* %13, align 4
  %15 = zext i16 %14 to i32
  %16 = load i32, i32* %3, align 4
  %17 = add i32 %16, %15
  store i32 %17, i32* %3, align 4
  br label %4, !llvm.loop !107

18:                                               ; preds = %4
  br label %19

19:                                               ; preds = %22, %18
  %20 = load i32, i32* %1, align 4
  %21 = icmp slt i32 %20, 128
  br i1 %21, label %22, label %33

22:                                               ; preds = %19
  %23 = load i32, i32* %1, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %1, align 4
  %25 = sext i32 %23 to i64
  %26 = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 %25
  %27 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %26, i32 0, i32 0
  %28 = bitcast %union.anon.0* %27 to i16*
  %29 = load i16, i16* %28, align 4
  %30 = zext i16 %29 to i32
  %31 = load i32, i32* %2, align 4
  %32 = add i32 %31, %30
  store i32 %32, i32* %2, align 4
  br label %19, !llvm.loop !108

33:                                               ; preds = %19
  br label %34

34:                                               ; preds = %37, %33
  %35 = load i32, i32* %1, align 4
  %36 = icmp slt i32 %35, 256
  br i1 %36, label %37, label %48

37:                                               ; preds = %34
  %38 = load i32, i32* %1, align 4
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %1, align 4
  %40 = sext i32 %38 to i64
  %41 = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 %40
  %42 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %41, i32 0, i32 0
  %43 = bitcast %union.anon.0* %42 to i16*
  %44 = load i16, i16* %43, align 4
  %45 = zext i16 %44 to i32
  %46 = load i32, i32* %3, align 4
  %47 = add i32 %46, %45
  store i32 %47, i32* %3, align 4
  br label %34, !llvm.loop !109

48:                                               ; preds = %34
  %49 = load i32, i32* %3, align 4
  %50 = load i32, i32* %2, align 4
  %51 = lshr i32 %50, 2
  %52 = icmp ugt i32 %49, %51
  %53 = zext i1 %52 to i64
  %54 = select i1 %52, i32 0, i32 1
  %55 = trunc i32 %54 to i16
  %56 = load i16*, i16** @file_type, align 8
  store i16 %55, i16* %56, align 2
  %57 = load i16*, i16** @file_type, align 8
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %48
  br i1 false, label %62, label %63

62:                                               ; preds = %61
  call void @warning(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1.151, i64 0, i64 0))
  br label %63

63:                                               ; preds = %62, %61, %48
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @build_tree(%struct.tree_desc* %0) #0 {
  %2 = alloca %struct.tree_desc*, align 8
  %3 = alloca %struct.ct_data*, align 8
  %4 = alloca %struct.ct_data*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.tree_desc* %0, %struct.tree_desc** %2, align 8
  %11 = load %struct.tree_desc*, %struct.tree_desc** %2, align 8
  %12 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %11, i32 0, i32 0
  %13 = load %struct.ct_data*, %struct.ct_data** %12, align 8
  store %struct.ct_data* %13, %struct.ct_data** %3, align 8
  %14 = load %struct.tree_desc*, %struct.tree_desc** %2, align 8
  %15 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %14, i32 0, i32 1
  %16 = load %struct.ct_data*, %struct.ct_data** %15, align 8
  store %struct.ct_data* %16, %struct.ct_data** %4, align 8
  %17 = load %struct.tree_desc*, %struct.tree_desc** %2, align 8
  %18 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %17, i32 0, i32 4
  %19 = load i32, i32* %18, align 4
  store i32 %19, i32* %5, align 4
  store i32 -1, i32* %8, align 4
  %20 = load i32, i32* %5, align 4
  store i32 %20, i32* %9, align 4
  store i32 0, i32* @heap_len, align 4
  store i32 573, i32* @heap_max, align 4
  store i32 0, i32* %6, align 4
  br label %21

21:                                               ; preds = %52, %1
  %22 = load i32, i32* %6, align 4
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %55

25:                                               ; preds = %21
  %26 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %27 = load i32, i32* %6, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %26, i64 %28
  %30 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %29, i32 0, i32 0
  %31 = bitcast %union.anon.0* %30 to i16*
  %32 = load i16, i16* %31, align 2
  %33 = zext i16 %32 to i32
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %44

35:                                               ; preds = %25
  %36 = load i32, i32* %6, align 4
  store i32 %36, i32* %8, align 4
  %37 = load i32, i32* @heap_len, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* @heap_len, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %39
  store i32 %36, i32* %40, align 4
  %41 = load i32, i32* %6, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %42
  store i8 0, i8* %43, align 1
  br label %51

44:                                               ; preds = %25
  %45 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %46 = load i32, i32* %6, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %45, i64 %47
  %49 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %48, i32 0, i32 1
  %50 = bitcast %union.anon.0* %49 to i16*
  store i16 0, i16* %50, align 2
  br label %51

51:                                               ; preds = %44, %35
  br label %52

52:                                               ; preds = %51
  %53 = load i32, i32* %6, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %6, align 4
  br label %21, !llvm.loop !110

55:                                               ; preds = %21
  br label %56

56:                                               ; preds = %96, %55
  %57 = load i32, i32* @heap_len, align 4
  %58 = icmp slt i32 %57, 2
  br i1 %58, label %59, label %97

59:                                               ; preds = %56
  %60 = load i32, i32* %8, align 4
  %61 = icmp slt i32 %60, 2
  br i1 %61, label %62, label %65

62:                                               ; preds = %59
  %63 = load i32, i32* %8, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %8, align 4
  br label %66

65:                                               ; preds = %59
  br label %66

66:                                               ; preds = %65, %62
  %67 = phi i32 [ %64, %62 ], [ 0, %65 ]
  %68 = load i32, i32* @heap_len, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* @heap_len, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %70
  store i32 %67, i32* %71, align 4
  store i32 %67, i32* %10, align 4
  %72 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %73 = load i32, i32* %10, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %72, i64 %74
  %76 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %75, i32 0, i32 0
  %77 = bitcast %union.anon.0* %76 to i16*
  store i16 1, i16* %77, align 2
  %78 = load i32, i32* %10, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %79
  store i8 0, i8* %80, align 1
  %81 = load i64, i64* @opt_len, align 8
  %82 = add i64 %81, -1
  store i64 %82, i64* @opt_len, align 8
  %83 = load %struct.ct_data*, %struct.ct_data** %4, align 8
  %84 = icmp ne %struct.ct_data* %83, null
  br i1 %84, label %85, label %96

85:                                               ; preds = %66
  %86 = load %struct.ct_data*, %struct.ct_data** %4, align 8
  %87 = load i32, i32* %10, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %86, i64 %88
  %90 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %89, i32 0, i32 1
  %91 = bitcast %union.anon.0* %90 to i16*
  %92 = load i16, i16* %91, align 2
  %93 = zext i16 %92 to i64
  %94 = load i64, i64* @static_len, align 8
  %95 = sub i64 %94, %93
  store i64 %95, i64* @static_len, align 8
  br label %96

96:                                               ; preds = %85, %66
  br label %56, !llvm.loop !111

97:                                               ; preds = %56
  %98 = load i32, i32* %8, align 4
  %99 = load %struct.tree_desc*, %struct.tree_desc** %2, align 8
  %100 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %99, i32 0, i32 6
  store i32 %98, i32* %100, align 4
  %101 = load i32, i32* @heap_len, align 4
  %102 = sdiv i32 %101, 2
  store i32 %102, i32* %6, align 4
  br label %103

103:                                              ; preds = %109, %97
  %104 = load i32, i32* %6, align 4
  %105 = icmp sge i32 %104, 1
  br i1 %105, label %106, label %112

106:                                              ; preds = %103
  %107 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %108 = load i32, i32* %6, align 4
  call void @pqdownheap(%struct.ct_data* %107, i32 %108)
  br label %109

109:                                              ; preds = %106
  %110 = load i32, i32* %6, align 4
  %111 = add nsw i32 %110, -1
  store i32 %111, i32* %6, align 4
  br label %103, !llvm.loop !112

112:                                              ; preds = %103
  br label %113

113:                                              ; preds = %203, %112
  %114 = load i32, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i64 0, i64 1), align 4
  store i32 %114, i32* %6, align 4
  %115 = load i32, i32* @heap_len, align 4
  %116 = add nsw i32 %115, -1
  store i32 %116, i32* @heap_len, align 4
  %117 = sext i32 %115 to i64
  %118 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %117
  %119 = load i32, i32* %118, align 4
  store i32 %119, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i64 0, i64 1), align 4
  %120 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  call void @pqdownheap(%struct.ct_data* %120, i32 1)
  %121 = load i32, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i64 0, i64 1), align 4
  store i32 %121, i32* %7, align 4
  %122 = load i32, i32* %6, align 4
  %123 = load i32, i32* @heap_max, align 4
  %124 = add nsw i32 %123, -1
  store i32 %124, i32* @heap_max, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %125
  store i32 %122, i32* %126, align 4
  %127 = load i32, i32* %7, align 4
  %128 = load i32, i32* @heap_max, align 4
  %129 = add nsw i32 %128, -1
  store i32 %129, i32* @heap_max, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %130
  store i32 %127, i32* %131, align 4
  %132 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %133 = load i32, i32* %6, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %132, i64 %134
  %136 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %135, i32 0, i32 0
  %137 = bitcast %union.anon.0* %136 to i16*
  %138 = load i16, i16* %137, align 2
  %139 = zext i16 %138 to i32
  %140 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %141 = load i32, i32* %7, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %140, i64 %142
  %144 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %143, i32 0, i32 0
  %145 = bitcast %union.anon.0* %144 to i16*
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add nsw i32 %139, %147
  %149 = trunc i32 %148 to i16
  %150 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %151 = load i32, i32* %9, align 4
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %150, i64 %152
  %154 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %153, i32 0, i32 0
  %155 = bitcast %union.anon.0* %154 to i16*
  store i16 %149, i16* %155, align 2
  %156 = load i32, i32* %6, align 4
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %157
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = load i32, i32* %7, align 4
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = icmp sge i32 %160, %165
  br i1 %166, label %167, label %173

167:                                              ; preds = %113
  %168 = load i32, i32* %6, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %169
  %171 = load i8, i8* %170, align 1
  %172 = zext i8 %171 to i32
  br label %179

173:                                              ; preds = %113
  %174 = load i32, i32* %7, align 4
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  br label %179

179:                                              ; preds = %173, %167
  %180 = phi i32 [ %172, %167 ], [ %178, %173 ]
  %181 = add nsw i32 %180, 1
  %182 = trunc i32 %181 to i8
  %183 = load i32, i32* %9, align 4
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %184
  store i8 %182, i8* %185, align 1
  %186 = load i32, i32* %9, align 4
  %187 = trunc i32 %186 to i16
  %188 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %189 = load i32, i32* %7, align 4
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %188, i64 %190
  %192 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %191, i32 0, i32 1
  %193 = bitcast %union.anon.0* %192 to i16*
  store i16 %187, i16* %193, align 2
  %194 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %195 = load i32, i32* %6, align 4
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %194, i64 %196
  %198 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %197, i32 0, i32 1
  %199 = bitcast %union.anon.0* %198 to i16*
  store i16 %187, i16* %199, align 2
  %200 = load i32, i32* %9, align 4
  %201 = add nsw i32 %200, 1
  store i32 %201, i32* %9, align 4
  store i32 %200, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i64 0, i64 1), align 4
  %202 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  call void @pqdownheap(%struct.ct_data* %202, i32 1)
  br label %203

203:                                              ; preds = %179
  %204 = load i32, i32* @heap_len, align 4
  %205 = icmp sge i32 %204, 2
  br i1 %205, label %113, label %206, !llvm.loop !113

206:                                              ; preds = %203
  %207 = load i32, i32* getelementptr inbounds ([573 x i32], [573 x i32]* @heap, i64 0, i64 1), align 4
  %208 = load i32, i32* @heap_max, align 4
  %209 = add nsw i32 %208, -1
  store i32 %209, i32* @heap_max, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %210
  store i32 %207, i32* %211, align 4
  %212 = load %struct.tree_desc*, %struct.tree_desc** %2, align 8
  call void @gen_bitlen(%struct.tree_desc* %212)
  %213 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %214 = load i32, i32* %8, align 4
  call void @gen_codes(%struct.ct_data* %213, i32 %214)
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @build_bl_tree() #0 {
  %1 = alloca i32, align 4
  %2 = load i32, i32* getelementptr inbounds (%struct.tree_desc, %struct.tree_desc* @l_desc, i32 0, i32 6), align 4
  call void @scan_tree(%struct.ct_data* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 0), i32 %2)
  %3 = load i32, i32* getelementptr inbounds (%struct.tree_desc, %struct.tree_desc* @d_desc, i32 0, i32 6), align 4
  call void @scan_tree(%struct.ct_data* getelementptr inbounds ([61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i64 0, i64 0), i32 %3)
  call void @build_tree(%struct.tree_desc* @bl_desc)
  store i32 18, i32* %1, align 4
  br label %4

4:                                                ; preds = %21, %0
  %5 = load i32, i32* %1, align 4
  %6 = icmp sge i32 %5, 3
  br i1 %6, label %7, label %24

7:                                                ; preds = %4
  %8 = load i32, i32* %1, align 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds [19 x i8], [19 x i8]* @bl_order, i64 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i64
  %13 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %12
  %14 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %13, i32 0, i32 1
  %15 = bitcast %union.anon.0* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %7
  br label %24

20:                                               ; preds = %7
  br label %21

21:                                               ; preds = %20
  %22 = load i32, i32* %1, align 4
  %23 = add nsw i32 %22, -1
  store i32 %23, i32* %1, align 4
  br label %4, !llvm.loop !114

24:                                               ; preds = %19, %4
  %25 = load i32, i32* %1, align 4
  %26 = add nsw i32 %25, 1
  %27 = mul nsw i32 3, %26
  %28 = add nsw i32 %27, 5
  %29 = add nsw i32 %28, 5
  %30 = add nsw i32 %29, 4
  %31 = sext i32 %30 to i64
  %32 = load i64, i64* @opt_len, align 8
  %33 = add i64 %32, %31
  store i64 %33, i64* @opt_len, align 8
  %34 = load i32, i32* %1, align 4
  ret i32 %34
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @compress_block(%struct.ct_data* %0, %struct.ct_data* %1) #0 {
  %3 = alloca %struct.ct_data*, align 8
  %4 = alloca %struct.ct_data*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8, align 1
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store %struct.ct_data* %0, %struct.ct_data** %3, align 8
  store %struct.ct_data* %1, %struct.ct_data** %4, align 8
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i8 0, i8* %10, align 1
  %13 = load i32, i32* @last_lit, align 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %162

15:                                               ; preds = %2
  br label %16

16:                                               ; preds = %157, %15
  %17 = load i32, i32* %7, align 4
  %18 = and i32 %17, 7
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %26

20:                                               ; preds = %16
  %21 = load i32, i32* %9, align 4
  %22 = add i32 %21, 1
  store i32 %22, i32* %9, align 4
  %23 = zext i32 %21 to i64
  %24 = getelementptr inbounds [4096 x i8], [4096 x i8]* @flag_buf, i64 0, i64 %23
  %25 = load i8, i8* %24, align 1
  store i8 %25, i8* %10, align 1
  br label %26

26:                                               ; preds = %20, %16
  %27 = load i32, i32* %7, align 4
  %28 = add i32 %27, 1
  store i32 %28, i32* %7, align 4
  %29 = zext i32 %27 to i64
  %30 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  store i32 %32, i32* %6, align 4
  %33 = load i8, i8* %10, align 1
  %34 = zext i8 %33 to i32
  %35 = and i32 %34, 1
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %54

37:                                               ; preds = %26
  %38 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %39 = load i32, i32* %6, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %38, i64 %40
  %42 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %41, i32 0, i32 0
  %43 = bitcast %union.anon.0* %42 to i16*
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i32
  %46 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %47 = load i32, i32* %6, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %46, i64 %48
  %50 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %49, i32 0, i32 1
  %51 = bitcast %union.anon.0* %50 to i16*
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i32
  call void @send_bits(i32 %45, i32 %53)
  br label %152

54:                                               ; preds = %26
  %55 = load i32, i32* %6, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [256 x i8], [256 x i8]* @length_code, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  store i32 %59, i32* %11, align 4
  %60 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %61 = load i32, i32* %11, align 4
  %62 = add i32 %61, 256
  %63 = add i32 %62, 1
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %60, i64 %64
  %66 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %65, i32 0, i32 0
  %67 = bitcast %union.anon.0* %66 to i16*
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %71 = load i32, i32* %11, align 4
  %72 = add i32 %71, 256
  %73 = add i32 %72, 1
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %70, i64 %74
  %76 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %75, i32 0, i32 1
  %77 = bitcast %union.anon.0* %76 to i16*
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  call void @send_bits(i32 %69, i32 %79)
  %80 = load i32, i32* %11, align 4
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds [29 x i32], [29 x i32]* @extra_lbits, i64 0, i64 %81
  %83 = load i32, i32* %82, align 4
  store i32 %83, i32* %12, align 4
  %84 = load i32, i32* %12, align 4
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %86, label %95

86:                                               ; preds = %54
  %87 = load i32, i32* %11, align 4
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds [29 x i32], [29 x i32]* @base_length, i64 0, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = load i32, i32* %6, align 4
  %92 = sub nsw i32 %91, %90
  store i32 %92, i32* %6, align 4
  %93 = load i32, i32* %6, align 4
  %94 = load i32, i32* %12, align 4
  call void @send_bits(i32 %93, i32 %94)
  br label %95

95:                                               ; preds = %86, %54
  %96 = load i32, i32* %8, align 4
  %97 = add i32 %96, 1
  store i32 %97, i32* %8, align 4
  %98 = zext i32 %96 to i64
  %99 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([32768 x i16]* @d_buf to [0 x i16]*), i64 0, i64 %98
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  store i32 %101, i32* %5, align 4
  %102 = load i32, i32* %5, align 4
  %103 = icmp ult i32 %102, 256
  br i1 %103, label %104, label %110

104:                                              ; preds = %95
  %105 = load i32, i32* %5, align 4
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i64 0, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  br label %118

110:                                              ; preds = %95
  %111 = load i32, i32* %5, align 4
  %112 = lshr i32 %111, 7
  %113 = add i32 256, %112
  %114 = zext i32 %113 to i64
  %115 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i64 0, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  br label %118

118:                                              ; preds = %110, %104
  %119 = phi i32 [ %109, %104 ], [ %117, %110 ]
  store i32 %119, i32* %11, align 4
  %120 = load %struct.ct_data*, %struct.ct_data** %4, align 8
  %121 = load i32, i32* %11, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %120, i64 %122
  %124 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %123, i32 0, i32 0
  %125 = bitcast %union.anon.0* %124 to i16*
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = load %struct.ct_data*, %struct.ct_data** %4, align 8
  %129 = load i32, i32* %11, align 4
  %130 = zext i32 %129 to i64
  %131 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %128, i64 %130
  %132 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %131, i32 0, i32 1
  %133 = bitcast %union.anon.0* %132 to i16*
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  call void @send_bits(i32 %127, i32 %135)
  %136 = load i32, i32* %11, align 4
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds [30 x i32], [30 x i32]* @extra_dbits, i64 0, i64 %137
  %139 = load i32, i32* %138, align 4
  store i32 %139, i32* %12, align 4
  %140 = load i32, i32* %12, align 4
  %141 = icmp ne i32 %140, 0
  br i1 %141, label %142, label %151

142:                                              ; preds = %118
  %143 = load i32, i32* %11, align 4
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds [30 x i32], [30 x i32]* @base_dist, i64 0, i64 %144
  %146 = load i32, i32* %145, align 4
  %147 = load i32, i32* %5, align 4
  %148 = sub i32 %147, %146
  store i32 %148, i32* %5, align 4
  %149 = load i32, i32* %5, align 4
  %150 = load i32, i32* %12, align 4
  call void @send_bits(i32 %149, i32 %150)
  br label %151

151:                                              ; preds = %142, %118
  br label %152

152:                                              ; preds = %151, %37
  %153 = load i8, i8* %10, align 1
  %154 = zext i8 %153 to i32
  %155 = ashr i32 %154, 1
  %156 = trunc i32 %155 to i8
  store i8 %156, i8* %10, align 1
  br label %157

157:                                              ; preds = %152
  %158 = load i32, i32* %7, align 4
  %159 = load i32, i32* @last_lit, align 4
  %160 = icmp ult i32 %158, %159
  br i1 %160, label %16, label %161, !llvm.loop !115

161:                                              ; preds = %157
  br label %162

162:                                              ; preds = %161, %2
  %163 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %164 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %163, i64 256
  %165 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %164, i32 0, i32 0
  %166 = bitcast %union.anon.0* %165 to i16*
  %167 = load i16, i16* %166, align 2
  %168 = zext i16 %167 to i32
  %169 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %170 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %169, i64 256
  %171 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %170, i32 0, i32 1
  %172 = bitcast %union.anon.0* %171 to i16*
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  call void @send_bits(i32 %168, i32 %174)
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @send_all_trees(i32 %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %8 = load i32, i32* %4, align 4
  %9 = sub nsw i32 %8, 257
  call void @send_bits(i32 %9, i32 5)
  %10 = load i32, i32* %5, align 4
  %11 = sub nsw i32 %10, 1
  call void @send_bits(i32 %11, i32 5)
  %12 = load i32, i32* %6, align 4
  %13 = sub nsw i32 %12, 4
  call void @send_bits(i32 %13, i32 4)
  store i32 0, i32* %7, align 4
  br label %14

14:                                               ; preds = %29, %3
  %15 = load i32, i32* %7, align 4
  %16 = load i32, i32* %6, align 4
  %17 = icmp slt i32 %15, %16
  br i1 %17, label %18, label %32

18:                                               ; preds = %14
  %19 = load i32, i32* %7, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [19 x i8], [19 x i8]* @bl_order, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %23
  %25 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %24, i32 0, i32 1
  %26 = bitcast %union.anon.0* %25 to i16*
  %27 = load i16, i16* %26, align 2
  %28 = zext i16 %27 to i32
  call void @send_bits(i32 %28, i32 3)
  br label %29

29:                                               ; preds = %18
  %30 = load i32, i32* %7, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %7, align 4
  br label %14, !llvm.loop !116

32:                                               ; preds = %14
  %33 = load i32, i32* %4, align 4
  %34 = sub nsw i32 %33, 1
  call void @send_tree(%struct.ct_data* getelementptr inbounds ([573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 0), i32 %34)
  %35 = load i32, i32* %5, align 4
  %36 = sub nsw i32 %35, 1
  call void @send_tree(%struct.ct_data* getelementptr inbounds ([61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i64 0, i64 0), i32 %36)
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @send_tree(%struct.ct_data* %0, i32 %1) #0 {
  %3 = alloca %struct.ct_data*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store %struct.ct_data* %0, %struct.ct_data** %3, align 8
  store i32 %1, i32* %4, align 4
  store i32 -1, i32* %6, align 4
  %12 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %13 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %12, i64 0
  %14 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %13, i32 0, i32 1
  %15 = bitcast %union.anon.0* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  store i32 %17, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i32 7, i32* %10, align 4
  store i32 4, i32* %11, align 4
  %18 = load i32, i32* %8, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %2
  store i32 138, i32* %10, align 4
  store i32 3, i32* %11, align 4
  br label %21

21:                                               ; preds = %20, %2
  store i32 0, i32* %5, align 4
  br label %22

22:                                               ; preds = %135, %21
  %23 = load i32, i32* %5, align 4
  %24 = load i32, i32* %4, align 4
  %25 = icmp sle i32 %23, %24
  br i1 %25, label %26, label %138

26:                                               ; preds = %22
  %27 = load i32, i32* %8, align 4
  store i32 %27, i32* %7, align 4
  %28 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %29 = load i32, i32* %5, align 4
  %30 = add nsw i32 %29, 1
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %28, i64 %31
  %33 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %32, i32 0, i32 1
  %34 = bitcast %union.anon.0* %33 to i16*
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  store i32 %36, i32* %8, align 4
  %37 = load i32, i32* %9, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %9, align 4
  %39 = load i32, i32* %10, align 4
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %41, label %46

41:                                               ; preds = %26
  %42 = load i32, i32* %7, align 4
  %43 = load i32, i32* %8, align 4
  %44 = icmp eq i32 %42, %43
  br i1 %44, label %45, label %46

45:                                               ; preds = %41
  br label %135

46:                                               ; preds = %41, %26
  %47 = load i32, i32* %9, align 4
  %48 = load i32, i32* %11, align 4
  %49 = icmp slt i32 %47, %48
  br i1 %49, label %50, label %71

50:                                               ; preds = %46
  br label %51

51:                                               ; preds = %66, %50
  %52 = load i32, i32* %7, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %53
  %55 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %54, i32 0, i32 0
  %56 = bitcast %union.anon.0* %55 to i16*
  %57 = load i16, i16* %56, align 4
  %58 = zext i16 %57 to i32
  %59 = load i32, i32* %7, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %60
  %62 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %61, i32 0, i32 1
  %63 = bitcast %union.anon.0* %62 to i16*
  %64 = load i16, i16* %63, align 2
  %65 = zext i16 %64 to i32
  call void @send_bits(i32 %58, i32 %65)
  br label %66

66:                                               ; preds = %51
  %67 = load i32, i32* %9, align 4
  %68 = add nsw i32 %67, -1
  store i32 %68, i32* %9, align 4
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %51, label %70, !llvm.loop !117

70:                                               ; preds = %66
  br label %121

71:                                               ; preds = %46
  %72 = load i32, i32* %7, align 4
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %102

74:                                               ; preds = %71
  %75 = load i32, i32* %7, align 4
  %76 = load i32, i32* %6, align 4
  %77 = icmp ne i32 %75, %76
  br i1 %77, label %78, label %95

78:                                               ; preds = %74
  %79 = load i32, i32* %7, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %80
  %82 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %81, i32 0, i32 0
  %83 = bitcast %union.anon.0* %82 to i16*
  %84 = load i16, i16* %83, align 4
  %85 = zext i16 %84 to i32
  %86 = load i32, i32* %7, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %87
  %89 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %88, i32 0, i32 1
  %90 = bitcast %union.anon.0* %89 to i16*
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  call void @send_bits(i32 %85, i32 %92)
  %93 = load i32, i32* %9, align 4
  %94 = add nsw i32 %93, -1
  store i32 %94, i32* %9, align 4
  br label %95

95:                                               ; preds = %78, %74
  %96 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 16, i32 0, i32 0), align 16
  %97 = zext i16 %96 to i32
  %98 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 16, i32 1, i32 0), align 2
  %99 = zext i16 %98 to i32
  call void @send_bits(i32 %97, i32 %99)
  %100 = load i32, i32* %9, align 4
  %101 = sub nsw i32 %100, 3
  call void @send_bits(i32 %101, i32 2)
  br label %120

102:                                              ; preds = %71
  %103 = load i32, i32* %9, align 4
  %104 = icmp sle i32 %103, 10
  br i1 %104, label %105, label %112

105:                                              ; preds = %102
  %106 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 17, i32 0, i32 0), align 4
  %107 = zext i16 %106 to i32
  %108 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 17, i32 1, i32 0), align 2
  %109 = zext i16 %108 to i32
  call void @send_bits(i32 %107, i32 %109)
  %110 = load i32, i32* %9, align 4
  %111 = sub nsw i32 %110, 3
  call void @send_bits(i32 %111, i32 3)
  br label %119

112:                                              ; preds = %102
  %113 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 18, i32 0, i32 0), align 8
  %114 = zext i16 %113 to i32
  %115 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 18, i32 1, i32 0), align 2
  %116 = zext i16 %115 to i32
  call void @send_bits(i32 %114, i32 %116)
  %117 = load i32, i32* %9, align 4
  %118 = sub nsw i32 %117, 11
  call void @send_bits(i32 %118, i32 7)
  br label %119

119:                                              ; preds = %112, %105
  br label %120

120:                                              ; preds = %119, %95
  br label %121

121:                                              ; preds = %120, %70
  br label %122

122:                                              ; preds = %121
  store i32 0, i32* %9, align 4
  %123 = load i32, i32* %7, align 4
  store i32 %123, i32* %6, align 4
  %124 = load i32, i32* %8, align 4
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %127

126:                                              ; preds = %122
  store i32 138, i32* %10, align 4
  store i32 3, i32* %11, align 4
  br label %134

127:                                              ; preds = %122
  %128 = load i32, i32* %7, align 4
  %129 = load i32, i32* %8, align 4
  %130 = icmp eq i32 %128, %129
  br i1 %130, label %131, label %132

131:                                              ; preds = %127
  store i32 6, i32* %10, align 4
  store i32 3, i32* %11, align 4
  br label %133

132:                                              ; preds = %127
  store i32 7, i32* %10, align 4
  store i32 4, i32* %11, align 4
  br label %133

133:                                              ; preds = %132, %131
  br label %134

134:                                              ; preds = %133, %126
  br label %135

135:                                              ; preds = %134, %45
  %136 = load i32, i32* %5, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %5, align 4
  br label %22, !llvm.loop !118

138:                                              ; preds = %22
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @scan_tree(%struct.ct_data* %0, i32 %1) #0 {
  %3 = alloca %struct.ct_data*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store %struct.ct_data* %0, %struct.ct_data** %3, align 8
  store i32 %1, i32* %4, align 4
  store i32 -1, i32* %6, align 4
  %12 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %13 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %12, i64 0
  %14 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %13, i32 0, i32 1
  %15 = bitcast %union.anon.0* %14 to i16*
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  store i32 %17, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i32 7, i32* %10, align 4
  store i32 4, i32* %11, align 4
  %18 = load i32, i32* %8, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %2
  store i32 138, i32* %10, align 4
  store i32 3, i32* %11, align 4
  br label %21

21:                                               ; preds = %20, %2
  %22 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %23 = load i32, i32* %4, align 4
  %24 = add nsw i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %22, i64 %25
  %27 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %26, i32 0, i32 1
  %28 = bitcast %union.anon.0* %27 to i16*
  store i16 -1, i16* %28, align 2
  store i32 0, i32* %5, align 4
  br label %29

29:                                               ; preds = %111, %21
  %30 = load i32, i32* %5, align 4
  %31 = load i32, i32* %4, align 4
  %32 = icmp sle i32 %30, %31
  br i1 %32, label %33, label %114

33:                                               ; preds = %29
  %34 = load i32, i32* %8, align 4
  store i32 %34, i32* %7, align 4
  %35 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %36 = load i32, i32* %5, align 4
  %37 = add nsw i32 %36, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %35, i64 %38
  %40 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %39, i32 0, i32 1
  %41 = bitcast %union.anon.0* %40 to i16*
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  store i32 %43, i32* %8, align 4
  %44 = load i32, i32* %9, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %9, align 4
  %46 = load i32, i32* %10, align 4
  %47 = icmp slt i32 %45, %46
  br i1 %47, label %48, label %53

48:                                               ; preds = %33
  %49 = load i32, i32* %7, align 4
  %50 = load i32, i32* %8, align 4
  %51 = icmp eq i32 %49, %50
  br i1 %51, label %52, label %53

52:                                               ; preds = %48
  br label %111

53:                                               ; preds = %48, %33
  %54 = load i32, i32* %9, align 4
  %55 = load i32, i32* %11, align 4
  %56 = icmp slt i32 %54, %55
  br i1 %56, label %57, label %68

57:                                               ; preds = %53
  %58 = load i32, i32* %9, align 4
  %59 = load i32, i32* %7, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %60
  %62 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %61, i32 0, i32 0
  %63 = bitcast %union.anon.0* %62 to i16*
  %64 = load i16, i16* %63, align 4
  %65 = zext i16 %64 to i32
  %66 = add nsw i32 %65, %58
  %67 = trunc i32 %66 to i16
  store i16 %67, i16* %63, align 4
  br label %97

68:                                               ; preds = %53
  %69 = load i32, i32* %7, align 4
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %71, label %86

71:                                               ; preds = %68
  %72 = load i32, i32* %7, align 4
  %73 = load i32, i32* %6, align 4
  %74 = icmp ne i32 %72, %73
  br i1 %74, label %75, label %83

75:                                               ; preds = %71
  %76 = load i32, i32* %7, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 %77
  %79 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %78, i32 0, i32 0
  %80 = bitcast %union.anon.0* %79 to i16*
  %81 = load i16, i16* %80, align 4
  %82 = add i16 %81, 1
  store i16 %82, i16* %80, align 4
  br label %83

83:                                               ; preds = %75, %71
  %84 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 16, i32 0, i32 0), align 16
  %85 = add i16 %84, 1
  store i16 %85, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 16, i32 0, i32 0), align 16
  br label %96

86:                                               ; preds = %68
  %87 = load i32, i32* %9, align 4
  %88 = icmp sle i32 %87, 10
  br i1 %88, label %89, label %92

89:                                               ; preds = %86
  %90 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 17, i32 0, i32 0), align 4
  %91 = add i16 %90, 1
  store i16 %91, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 17, i32 0, i32 0), align 4
  br label %95

92:                                               ; preds = %86
  %93 = load i16, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 18, i32 0, i32 0), align 8
  %94 = add i16 %93, 1
  store i16 %94, i16* getelementptr inbounds ([39 x %struct.ct_data], [39 x %struct.ct_data]* @bl_tree, i64 0, i64 18, i32 0, i32 0), align 8
  br label %95

95:                                               ; preds = %92, %89
  br label %96

96:                                               ; preds = %95, %83
  br label %97

97:                                               ; preds = %96, %57
  br label %98

98:                                               ; preds = %97
  store i32 0, i32* %9, align 4
  %99 = load i32, i32* %7, align 4
  store i32 %99, i32* %6, align 4
  %100 = load i32, i32* %8, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %98
  store i32 138, i32* %10, align 4
  store i32 3, i32* %11, align 4
  br label %110

103:                                              ; preds = %98
  %104 = load i32, i32* %7, align 4
  %105 = load i32, i32* %8, align 4
  %106 = icmp eq i32 %104, %105
  br i1 %106, label %107, label %108

107:                                              ; preds = %103
  store i32 6, i32* %10, align 4
  store i32 3, i32* %11, align 4
  br label %109

108:                                              ; preds = %103
  store i32 7, i32* %10, align 4
  store i32 4, i32* %11, align 4
  br label %109

109:                                              ; preds = %108, %107
  br label %110

110:                                              ; preds = %109, %102
  br label %111

111:                                              ; preds = %110, %52
  %112 = load i32, i32* %5, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %5, align 4
  br label %29, !llvm.loop !119

114:                                              ; preds = %29
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @pqdownheap(%struct.ct_data* %0, i32 %1) #0 {
  %3 = alloca %struct.ct_data*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct.ct_data* %0, %struct.ct_data** %3, align 8
  store i32 %1, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %8
  %10 = load i32, i32* %9, align 4
  store i32 %10, i32* %5, align 4
  %11 = load i32, i32* %4, align 4
  %12 = shl i32 %11, 1
  store i32 %12, i32* %6, align 4
  br label %13

13:                                               ; preds = %151, %2
  %14 = load i32, i32* %6, align 4
  %15 = load i32, i32* @heap_len, align 4
  %16 = icmp sle i32 %14, %15
  br i1 %16, label %17, label %162

17:                                               ; preds = %13
  %18 = load i32, i32* %6, align 4
  %19 = load i32, i32* @heap_len, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %93

21:                                               ; preds = %17
  %22 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %23 = load i32, i32* %6, align 4
  %24 = add nsw i32 %23, 1
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %22, i64 %28
  %30 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %29, i32 0, i32 0
  %31 = bitcast %union.anon.0* %30 to i16*
  %32 = load i16, i16* %31, align 2
  %33 = zext i16 %32 to i32
  %34 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %35 = load i32, i32* %6, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %34, i64 %39
  %41 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %40, i32 0, i32 0
  %42 = bitcast %union.anon.0* %41 to i16*
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = icmp slt i32 %33, %44
  br i1 %45, label %90, label %46

46:                                               ; preds = %21
  %47 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %48 = load i32, i32* %6, align 4
  %49 = add nsw i32 %48, 1
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %47, i64 %53
  %55 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %54, i32 0, i32 0
  %56 = bitcast %union.anon.0* %55 to i16*
  %57 = load i16, i16* %56, align 2
  %58 = zext i16 %57 to i32
  %59 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %60 = load i32, i32* %6, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %59, i64 %64
  %66 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %65, i32 0, i32 0
  %67 = bitcast %union.anon.0* %66 to i16*
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = icmp eq i32 %58, %69
  br i1 %70, label %71, label %93

71:                                               ; preds = %46
  %72 = load i32, i32* %6, align 4
  %73 = add nsw i32 %72, 1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = load i32, i32* %6, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  %89 = icmp sle i32 %80, %88
  br i1 %89, label %90, label %93

90:                                               ; preds = %71, %21
  %91 = load i32, i32* %6, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %6, align 4
  br label %93

93:                                               ; preds = %90, %71, %46, %17
  %94 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %95 = load i32, i32* %5, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %94, i64 %96
  %98 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %97, i32 0, i32 0
  %99 = bitcast %union.anon.0* %98 to i16*
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %103 = load i32, i32* %6, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %102, i64 %107
  %109 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %108, i32 0, i32 0
  %110 = bitcast %union.anon.0* %109 to i16*
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = icmp slt i32 %101, %112
  br i1 %113, label %150, label %114

114:                                              ; preds = %93
  %115 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %116 = load i32, i32* %5, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %115, i64 %117
  %119 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %118, i32 0, i32 0
  %120 = bitcast %union.anon.0* %119 to i16*
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %124 = load i32, i32* %6, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %125
  %127 = load i32, i32* %126, align 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %123, i64 %128
  %130 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %129, i32 0, i32 0
  %131 = bitcast %union.anon.0* %130 to i16*
  %132 = load i16, i16* %131, align 2
  %133 = zext i16 %132 to i32
  %134 = icmp eq i32 %122, %133
  br i1 %134, label %135, label %151

135:                                              ; preds = %114
  %136 = load i32, i32* %5, align 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = load i32, i32* %6, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %142
  %144 = load i32, i32* %143, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds [573 x i8], [573 x i8]* @depth, i64 0, i64 %145
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = icmp sle i32 %140, %148
  br i1 %149, label %150, label %151

150:                                              ; preds = %135, %93
  br label %162

151:                                              ; preds = %135, %114
  %152 = load i32, i32* %6, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %153
  %155 = load i32, i32* %154, align 4
  %156 = load i32, i32* %4, align 4
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %157
  store i32 %155, i32* %158, align 4
  %159 = load i32, i32* %6, align 4
  store i32 %159, i32* %4, align 4
  %160 = load i32, i32* %6, align 4
  %161 = shl i32 %160, 1
  store i32 %161, i32* %6, align 4
  br label %13, !llvm.loop !120

162:                                              ; preds = %150, %13
  %163 = load i32, i32* %5, align 4
  %164 = load i32, i32* %4, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %165
  store i32 %163, i32* %166, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @gen_bitlen(%struct.tree_desc* %0) #0 {
  %2 = alloca %struct.tree_desc*, align 8
  %3 = alloca %struct.ct_data*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.ct_data*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i16, align 2
  %15 = alloca i32, align 4
  store %struct.tree_desc* %0, %struct.tree_desc** %2, align 8
  %16 = load %struct.tree_desc*, %struct.tree_desc** %2, align 8
  %17 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %16, i32 0, i32 0
  %18 = load %struct.ct_data*, %struct.ct_data** %17, align 8
  store %struct.ct_data* %18, %struct.ct_data** %3, align 8
  %19 = load %struct.tree_desc*, %struct.tree_desc** %2, align 8
  %20 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %19, i32 0, i32 2
  %21 = load i32*, i32** %20, align 8
  store i32* %21, i32** %4, align 8
  %22 = load %struct.tree_desc*, %struct.tree_desc** %2, align 8
  %23 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %22, i32 0, i32 3
  %24 = load i32, i32* %23, align 8
  store i32 %24, i32* %5, align 4
  %25 = load %struct.tree_desc*, %struct.tree_desc** %2, align 8
  %26 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %25, i32 0, i32 6
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %6, align 4
  %28 = load %struct.tree_desc*, %struct.tree_desc** %2, align 8
  %29 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %28, i32 0, i32 5
  %30 = load i32, i32* %29, align 8
  store i32 %30, i32* %7, align 4
  %31 = load %struct.tree_desc*, %struct.tree_desc** %2, align 8
  %32 = getelementptr inbounds %struct.tree_desc, %struct.tree_desc* %31, i32 0, i32 1
  %33 = load %struct.ct_data*, %struct.ct_data** %32, align 8
  store %struct.ct_data* %33, %struct.ct_data** %8, align 8
  store i32 0, i32* %15, align 4
  store i32 0, i32* %12, align 4
  br label %34

34:                                               ; preds = %41, %1
  %35 = load i32, i32* %12, align 4
  %36 = icmp sle i32 %35, 15
  br i1 %36, label %37, label %44

37:                                               ; preds = %34
  %38 = load i32, i32* %12, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %39
  store i16 0, i16* %40, align 2
  br label %41

41:                                               ; preds = %37
  %42 = load i32, i32* %12, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %12, align 4
  br label %34, !llvm.loop !121

44:                                               ; preds = %34
  %45 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %46 = load i32, i32* @heap_max, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %47
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %45, i64 %50
  %52 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %51, i32 0, i32 1
  %53 = bitcast %union.anon.0* %52 to i16*
  store i16 0, i16* %53, align 2
  %54 = load i32, i32* @heap_max, align 4
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %9, align 4
  br label %56

56:                                               ; preds = %153, %44
  %57 = load i32, i32* %9, align 4
  %58 = icmp slt i32 %57, 573
  br i1 %58, label %59, label %156

59:                                               ; preds = %56
  %60 = load i32, i32* %9, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %61
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %10, align 4
  %64 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %65 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %66 = load i32, i32* %10, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %65, i64 %67
  %69 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %68, i32 0, i32 1
  %70 = bitcast %union.anon.0* %69 to i16*
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i64
  %73 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %64, i64 %72
  %74 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %73, i32 0, i32 1
  %75 = bitcast %union.anon.0* %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = zext i16 %76 to i32
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %12, align 4
  %79 = load i32, i32* %12, align 4
  %80 = load i32, i32* %7, align 4
  %81 = icmp sgt i32 %79, %80
  br i1 %81, label %82, label %86

82:                                               ; preds = %59
  %83 = load i32, i32* %7, align 4
  store i32 %83, i32* %12, align 4
  %84 = load i32, i32* %15, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %15, align 4
  br label %86

86:                                               ; preds = %82, %59
  %87 = load i32, i32* %12, align 4
  %88 = trunc i32 %87 to i16
  %89 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %90 = load i32, i32* %10, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %89, i64 %91
  %93 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %92, i32 0, i32 1
  %94 = bitcast %union.anon.0* %93 to i16*
  store i16 %88, i16* %94, align 2
  %95 = load i32, i32* %10, align 4
  %96 = load i32, i32* %6, align 4
  %97 = icmp sgt i32 %95, %96
  br i1 %97, label %98, label %99

98:                                               ; preds = %86
  br label %153

99:                                               ; preds = %86
  %100 = load i32, i32* %12, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %101
  %103 = load i16, i16* %102, align 2
  %104 = add i16 %103, 1
  store i16 %104, i16* %102, align 2
  store i32 0, i32* %13, align 4
  %105 = load i32, i32* %10, align 4
  %106 = load i32, i32* %5, align 4
  %107 = icmp sge i32 %105, %106
  br i1 %107, label %108, label %116

108:                                              ; preds = %99
  %109 = load i32*, i32** %4, align 8
  %110 = load i32, i32* %10, align 4
  %111 = load i32, i32* %5, align 4
  %112 = sub nsw i32 %110, %111
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i32, i32* %109, i64 %113
  %115 = load i32, i32* %114, align 4
  store i32 %115, i32* %13, align 4
  br label %116

116:                                              ; preds = %108, %99
  %117 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %118 = load i32, i32* %10, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %117, i64 %119
  %121 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %120, i32 0, i32 0
  %122 = bitcast %union.anon.0* %121 to i16*
  %123 = load i16, i16* %122, align 2
  store i16 %123, i16* %14, align 2
  %124 = load i16, i16* %14, align 2
  %125 = zext i16 %124 to i64
  %126 = load i32, i32* %12, align 4
  %127 = load i32, i32* %13, align 4
  %128 = add nsw i32 %126, %127
  %129 = sext i32 %128 to i64
  %130 = mul i64 %125, %129
  %131 = load i64, i64* @opt_len, align 8
  %132 = add i64 %131, %130
  store i64 %132, i64* @opt_len, align 8
  %133 = load %struct.ct_data*, %struct.ct_data** %8, align 8
  %134 = icmp ne %struct.ct_data* %133, null
  br i1 %134, label %135, label %152

135:                                              ; preds = %116
  %136 = load i16, i16* %14, align 2
  %137 = zext i16 %136 to i64
  %138 = load %struct.ct_data*, %struct.ct_data** %8, align 8
  %139 = load i32, i32* %10, align 4
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %138, i64 %140
  %142 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %141, i32 0, i32 1
  %143 = bitcast %union.anon.0* %142 to i16*
  %144 = load i16, i16* %143, align 2
  %145 = zext i16 %144 to i32
  %146 = load i32, i32* %13, align 4
  %147 = add nsw i32 %145, %146
  %148 = sext i32 %147 to i64
  %149 = mul i64 %137, %148
  %150 = load i64, i64* @static_len, align 8
  %151 = add i64 %150, %149
  store i64 %151, i64* @static_len, align 8
  br label %152

152:                                              ; preds = %135, %116
  br label %153

153:                                              ; preds = %152, %98
  %154 = load i32, i32* %9, align 4
  %155 = add nsw i32 %154, 1
  store i32 %155, i32* %9, align 4
  br label %56, !llvm.loop !122

156:                                              ; preds = %56
  %157 = load i32, i32* %15, align 4
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %156
  br label %271

160:                                              ; preds = %156
  br label %161

161:                                              ; preds = %195, %160
  %162 = load i32, i32* %7, align 4
  %163 = sub nsw i32 %162, 1
  store i32 %163, i32* %12, align 4
  br label %164

164:                                              ; preds = %171, %161
  %165 = load i32, i32* %12, align 4
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %166
  %168 = load i16, i16* %167, align 2
  %169 = zext i16 %168 to i32
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %174

171:                                              ; preds = %164
  %172 = load i32, i32* %12, align 4
  %173 = add nsw i32 %172, -1
  store i32 %173, i32* %12, align 4
  br label %164, !llvm.loop !123

174:                                              ; preds = %164
  %175 = load i32, i32* %12, align 4
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %176
  %178 = load i16, i16* %177, align 2
  %179 = add i16 %178, -1
  store i16 %179, i16* %177, align 2
  %180 = load i32, i32* %12, align 4
  %181 = add nsw i32 %180, 1
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %182
  %184 = load i16, i16* %183, align 2
  %185 = zext i16 %184 to i32
  %186 = add nsw i32 %185, 2
  %187 = trunc i32 %186 to i16
  store i16 %187, i16* %183, align 2
  %188 = load i32, i32* %7, align 4
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %189
  %191 = load i16, i16* %190, align 2
  %192 = add i16 %191, -1
  store i16 %192, i16* %190, align 2
  %193 = load i32, i32* %15, align 4
  %194 = sub nsw i32 %193, 2
  store i32 %194, i32* %15, align 4
  br label %195

195:                                              ; preds = %174
  %196 = load i32, i32* %15, align 4
  %197 = icmp sgt i32 %196, 0
  br i1 %197, label %161, label %198, !llvm.loop !124

198:                                              ; preds = %195
  %199 = load i32, i32* %7, align 4
  store i32 %199, i32* %12, align 4
  br label %200

200:                                              ; preds = %268, %198
  %201 = load i32, i32* %12, align 4
  %202 = icmp ne i32 %201, 0
  br i1 %202, label %203, label %271

203:                                              ; preds = %200
  %204 = load i32, i32* %12, align 4
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds [16 x i16], [16 x i16]* @bl_count, i64 0, i64 %205
  %207 = load i16, i16* %206, align 2
  %208 = zext i16 %207 to i32
  store i32 %208, i32* %10, align 4
  br label %209

209:                                              ; preds = %264, %221, %203
  %210 = load i32, i32* %10, align 4
  %211 = icmp ne i32 %210, 0
  br i1 %211, label %212, label %267

212:                                              ; preds = %209
  %213 = load i32, i32* %9, align 4
  %214 = add nsw i32 %213, -1
  store i32 %214, i32* %9, align 4
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds [573 x i32], [573 x i32]* @heap, i64 0, i64 %215
  %217 = load i32, i32* %216, align 4
  store i32 %217, i32* %11, align 4
  %218 = load i32, i32* %11, align 4
  %219 = load i32, i32* %6, align 4
  %220 = icmp sgt i32 %218, %219
  br i1 %220, label %221, label %222

221:                                              ; preds = %212
  br label %209, !llvm.loop !125

222:                                              ; preds = %212
  %223 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %224 = load i32, i32* %11, align 4
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %223, i64 %225
  %227 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %226, i32 0, i32 1
  %228 = bitcast %union.anon.0* %227 to i16*
  %229 = load i16, i16* %228, align 2
  %230 = zext i16 %229 to i32
  %231 = load i32, i32* %12, align 4
  %232 = icmp ne i32 %230, %231
  br i1 %232, label %233, label %264

233:                                              ; preds = %222
  %234 = load i32, i32* %12, align 4
  %235 = sext i32 %234 to i64
  %236 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %237 = load i32, i32* %11, align 4
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %236, i64 %238
  %240 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %239, i32 0, i32 1
  %241 = bitcast %union.anon.0* %240 to i16*
  %242 = load i16, i16* %241, align 2
  %243 = zext i16 %242 to i64
  %244 = sub nsw i64 %235, %243
  %245 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %246 = load i32, i32* %11, align 4
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %245, i64 %247
  %249 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %248, i32 0, i32 0
  %250 = bitcast %union.anon.0* %249 to i16*
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i64
  %253 = mul nsw i64 %244, %252
  %254 = load i64, i64* @opt_len, align 8
  %255 = add i64 %254, %253
  store i64 %255, i64* @opt_len, align 8
  %256 = load i32, i32* %12, align 4
  %257 = trunc i32 %256 to i16
  %258 = load %struct.ct_data*, %struct.ct_data** %3, align 8
  %259 = load i32, i32* %11, align 4
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %258, i64 %260
  %262 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %261, i32 0, i32 1
  %263 = bitcast %union.anon.0* %262 to i16*
  store i16 %257, i16* %263, align 2
  br label %264

264:                                              ; preds = %233, %222
  %265 = load i32, i32* %10, align 4
  %266 = add nsw i32 %265, -1
  store i32 %266, i32* %10, align 4
  br label %209, !llvm.loop !125

267:                                              ; preds = %209
  br label %268

268:                                              ; preds = %267
  %269 = load i32, i32* %12, align 4
  %270 = add nsw i32 %269, -1
  store i32 %270, i32* %12, align 4
  br label %200, !llvm.loop !126

271:                                              ; preds = %200, %159
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @ct_tally(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  %9 = load i32, i32* %5, align 4
  %10 = trunc i32 %9 to i8
  %11 = load i32, i32* @last_lit, align 4
  %12 = add i32 %11, 1
  store i32 %12, i32* @last_lit, align 4
  %13 = zext i32 %11 to i64
  %14 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %13
  store i8 %10, i8* %14, align 1
  %15 = load i32, i32* %4, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %25

17:                                               ; preds = %2
  %18 = load i32, i32* %5, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 %19
  %21 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %20, i32 0, i32 0
  %22 = bitcast %union.anon.0* %21 to i16*
  %23 = load i16, i16* %22, align 4
  %24 = add i16 %23, 1
  store i16 %24, i16* %22, align 4
  br label %77

25:                                               ; preds = %2
  %26 = load i32, i32* %4, align 4
  %27 = add nsw i32 %26, -1
  store i32 %27, i32* %4, align 4
  %28 = load i32, i32* %5, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [256 x i8], [256 x i8]* @length_code, i64 0, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = add nsw i32 %32, 256
  %34 = add nsw i32 %33, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [573 x %struct.ct_data], [573 x %struct.ct_data]* @dyn_ltree, i64 0, i64 %35
  %37 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %36, i32 0, i32 0
  %38 = bitcast %union.anon.0* %37 to i16*
  %39 = load i16, i16* %38, align 4
  %40 = add i16 %39, 1
  store i16 %40, i16* %38, align 4
  %41 = load i32, i32* %4, align 4
  %42 = icmp slt i32 %41, 256
  br i1 %42, label %43, label %49

43:                                               ; preds = %25
  %44 = load i32, i32* %4, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  br label %57

49:                                               ; preds = %25
  %50 = load i32, i32* %4, align 4
  %51 = ashr i32 %50, 7
  %52 = add nsw i32 256, %51
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [512 x i8], [512 x i8]* @dist_code, i64 0, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  br label %57

57:                                               ; preds = %49, %43
  %58 = phi i32 [ %48, %43 ], [ %56, %49 ]
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i64 0, i64 %59
  %61 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %60, i32 0, i32 0
  %62 = bitcast %union.anon.0* %61 to i16*
  %63 = load i16, i16* %62, align 4
  %64 = add i16 %63, 1
  store i16 %64, i16* %62, align 4
  %65 = load i32, i32* %4, align 4
  %66 = trunc i32 %65 to i16
  %67 = load i32, i32* @last_dist, align 4
  %68 = add i32 %67, 1
  store i32 %68, i32* @last_dist, align 4
  %69 = zext i32 %67 to i64
  %70 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([32768 x i16]* @d_buf to [0 x i16]*), i64 0, i64 %69
  store i16 %66, i16* %70, align 2
  %71 = load i8, i8* @flag_bit, align 1
  %72 = zext i8 %71 to i32
  %73 = load i8, i8* @flags, align 1
  %74 = zext i8 %73 to i32
  %75 = or i32 %74, %72
  %76 = trunc i32 %75 to i8
  store i8 %76, i8* @flags, align 1
  br label %77

77:                                               ; preds = %57, %17
  %78 = load i8, i8* @flag_bit, align 1
  %79 = zext i8 %78 to i32
  %80 = shl i32 %79, 1
  %81 = trunc i32 %80 to i8
  store i8 %81, i8* @flag_bit, align 1
  %82 = load i32, i32* @last_lit, align 4
  %83 = and i32 %82, 7
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %91

85:                                               ; preds = %77
  %86 = load i8, i8* @flags, align 1
  %87 = load i32, i32* @last_flags, align 4
  %88 = add i32 %87, 1
  store i32 %88, i32* @last_flags, align 4
  %89 = zext i32 %87 to i64
  %90 = getelementptr inbounds [4096 x i8], [4096 x i8]* @flag_buf, i64 0, i64 %89
  store i8 %86, i8* %90, align 1
  store i8 0, i8* @flags, align 1
  store i8 1, i8* @flag_bit, align 1
  br label %91

91:                                               ; preds = %85, %77
  %92 = load i32, i32* @level, align 4
  %93 = icmp sgt i32 %92, 2
  br i1 %93, label %94, label %143

94:                                               ; preds = %91
  %95 = load i32, i32* @last_lit, align 4
  %96 = and i32 %95, 4095
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %143

98:                                               ; preds = %94
  %99 = load i32, i32* @last_lit, align 4
  %100 = zext i32 %99 to i64
  %101 = mul i64 %100, 8
  store i64 %101, i64* %6, align 8
  %102 = load i32, i32* @strstart, align 4
  %103 = zext i32 %102 to i64
  %104 = load i64, i64* @block_start, align 8
  %105 = sub i64 %103, %104
  store i64 %105, i64* %7, align 8
  store i32 0, i32* %8, align 4
  br label %106

106:                                              ; preds = %126, %98
  %107 = load i32, i32* %8, align 4
  %108 = icmp slt i32 %107, 30
  br i1 %108, label %109, label %129

109:                                              ; preds = %106
  %110 = load i32, i32* %8, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds [61 x %struct.ct_data], [61 x %struct.ct_data]* @dyn_dtree, i64 0, i64 %111
  %113 = getelementptr inbounds %struct.ct_data, %struct.ct_data* %112, i32 0, i32 0
  %114 = bitcast %union.anon.0* %113 to i16*
  %115 = load i16, i16* %114, align 4
  %116 = zext i16 %115 to i64
  %117 = load i32, i32* %8, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [30 x i32], [30 x i32]* @extra_dbits, i64 0, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = sext i32 %120 to i64
  %122 = add nsw i64 5, %121
  %123 = mul i64 %116, %122
  %124 = load i64, i64* %6, align 8
  %125 = add i64 %124, %123
  store i64 %125, i64* %6, align 8
  br label %126

126:                                              ; preds = %109
  %127 = load i32, i32* %8, align 4
  %128 = add nsw i32 %127, 1
  store i32 %128, i32* %8, align 4
  br label %106, !llvm.loop !127

129:                                              ; preds = %106
  %130 = load i64, i64* %6, align 8
  %131 = lshr i64 %130, 3
  store i64 %131, i64* %6, align 8
  %132 = load i32, i32* @last_dist, align 4
  %133 = load i32, i32* @last_lit, align 4
  %134 = udiv i32 %133, 2
  %135 = icmp ult i32 %132, %134
  br i1 %135, label %136, label %142

136:                                              ; preds = %129
  %137 = load i64, i64* %6, align 8
  %138 = load i64, i64* %7, align 8
  %139 = udiv i64 %138, 2
  %140 = icmp ult i64 %137, %139
  br i1 %140, label %141, label %142

141:                                              ; preds = %136
  store i32 1, i32* %3, align 4
  br label %152

142:                                              ; preds = %136, %129
  br label %143

143:                                              ; preds = %142, %94, %91
  %144 = load i32, i32* @last_lit, align 4
  %145 = icmp eq i32 %144, 32767
  br i1 %145, label %149, label %146

146:                                              ; preds = %143
  %147 = load i32, i32* @last_dist, align 4
  %148 = icmp eq i32 %147, 32768
  br label %149

149:                                              ; preds = %146, %143
  %150 = phi i1 [ true, %143 ], [ %148, %146 ]
  %151 = zext i1 %150 to i32
  store i32 %151, i32* %3, align 4
  br label %152

152:                                              ; preds = %149, %141
  %153 = load i32, i32* %3, align 4
  ret i32 %153
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @unlzh(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %6 = load i32, i32* %3, align 4
  store i32 %6, i32* @ifd, align 4
  %7 = load i32, i32* %4, align 4
  store i32 %7, i32* @ofd, align 4
  call void @decode_start()
  br label %8

8:                                                ; preds = %19, %2
  %9 = load i32, i32* @done, align 4
  %10 = icmp ne i32 %9, 0
  %11 = xor i1 %10, true
  br i1 %11, label %12, label %20

12:                                               ; preds = %8
  %13 = call i32 @decode(i32 8192, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0))
  store i32 %13, i32* %5, align 4
  %14 = load i32, i32* %5, align 4
  %15 = icmp ugt i32 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %12
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %5, align 4
  call void @write_buf(i32 %17, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i32 %18)
  br label %19

19:                                               ; preds = %16, %12
  br label %8, !llvm.loop !128

20:                                               ; preds = %8
  ret i32 0
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @decode_start() #0 {
  call void @huf_decode_start()
  store i32 0, i32* @j, align 4
  store i32 0, i32* @done, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @decode(i32 %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i32 0, i32* %6, align 4
  br label %8

8:                                                ; preds = %31, %2
  %9 = load i32, i32* @j, align 4
  %10 = add nsw i32 %9, -1
  store i32 %10, i32* @j, align 4
  %11 = icmp sge i32 %10, 0
  br i1 %11, label %12, label %32

12:                                               ; preds = %8
  %13 = load i8*, i8** %5, align 8
  %14 = load i32, i32* @decode.i, align 4
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %13, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = load i8*, i8** %5, align 8
  %19 = load i32, i32* %6, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %18, i64 %20
  store i8 %17, i8* %21, align 1
  %22 = load i32, i32* @decode.i, align 4
  %23 = add i32 %22, 1
  %24 = and i32 %23, 8191
  store i32 %24, i32* @decode.i, align 4
  %25 = load i32, i32* %6, align 4
  %26 = add i32 %25, 1
  store i32 %26, i32* %6, align 4
  %27 = load i32, i32* %4, align 4
  %28 = icmp eq i32 %26, %27
  br i1 %28, label %29, label %31

29:                                               ; preds = %12
  %30 = load i32, i32* %6, align 4
  store i32 %30, i32* %3, align 4
  br label %90

31:                                               ; preds = %12
  br label %8, !llvm.loop !129

32:                                               ; preds = %8
  br label %33

33:                                               ; preds = %89, %32
  %34 = call i32 @decode_c()
  store i32 %34, i32* %7, align 4
  %35 = load i32, i32* %7, align 4
  %36 = icmp eq i32 %35, 510
  br i1 %36, label %37, label %39

37:                                               ; preds = %33
  store i32 1, i32* @done, align 4
  %38 = load i32, i32* %6, align 4
  store i32 %38, i32* %3, align 4
  br label %90

39:                                               ; preds = %33
  %40 = load i32, i32* %7, align 4
  %41 = icmp ule i32 %40, 255
  br i1 %41, label %42, label %56

42:                                               ; preds = %39
  %43 = load i32, i32* %7, align 4
  %44 = trunc i32 %43 to i8
  %45 = load i8*, i8** %5, align 8
  %46 = load i32, i32* %6, align 4
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %45, i64 %47
  store i8 %44, i8* %48, align 1
  %49 = load i32, i32* %6, align 4
  %50 = add i32 %49, 1
  store i32 %50, i32* %6, align 4
  %51 = load i32, i32* %4, align 4
  %52 = icmp eq i32 %50, %51
  br i1 %52, label %53, label %55

53:                                               ; preds = %42
  %54 = load i32, i32* %6, align 4
  store i32 %54, i32* %3, align 4
  br label %90

55:                                               ; preds = %42
  br label %89

56:                                               ; preds = %39
  %57 = load i32, i32* %7, align 4
  %58 = sub i32 %57, 253
  store i32 %58, i32* @j, align 4
  %59 = load i32, i32* %6, align 4
  %60 = call i32 @decode_p()
  %61 = sub i32 %59, %60
  %62 = sub i32 %61, 1
  %63 = and i32 %62, 8191
  store i32 %63, i32* @decode.i, align 4
  br label %64

64:                                               ; preds = %87, %56
  %65 = load i32, i32* @j, align 4
  %66 = add nsw i32 %65, -1
  store i32 %66, i32* @j, align 4
  %67 = icmp sge i32 %66, 0
  br i1 %67, label %68, label %88

68:                                               ; preds = %64
  %69 = load i8*, i8** %5, align 8
  %70 = load i32, i32* @decode.i, align 4
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %69, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = load i8*, i8** %5, align 8
  %75 = load i32, i32* %6, align 4
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %74, i64 %76
  store i8 %73, i8* %77, align 1
  %78 = load i32, i32* @decode.i, align 4
  %79 = add i32 %78, 1
  %80 = and i32 %79, 8191
  store i32 %80, i32* @decode.i, align 4
  %81 = load i32, i32* %6, align 4
  %82 = add i32 %81, 1
  store i32 %82, i32* %6, align 4
  %83 = load i32, i32* %4, align 4
  %84 = icmp eq i32 %82, %83
  br i1 %84, label %85, label %87

85:                                               ; preds = %68
  %86 = load i32, i32* %6, align 4
  store i32 %86, i32* %3, align 4
  br label %90

87:                                               ; preds = %68
  br label %64, !llvm.loop !130

88:                                               ; preds = %64
  br label %89

89:                                               ; preds = %88, %55
  br label %33

90:                                               ; preds = %85, %53, %37, %29
  %91 = load i32, i32* %3, align 4
  ret i32 %91
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @decode_c() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = load i32, i32* @blocksize, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %12

6:                                                ; preds = %0
  %7 = call i32 @getbits(i32 16)
  store i32 %7, i32* @blocksize, align 4
  %8 = load i32, i32* @blocksize, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %6
  store i32 510, i32* %1, align 4
  br label %57

11:                                               ; preds = %6
  call void @read_pt_len(i32 19, i32 5, i32 3)
  call void @read_c_len()
  call void @read_pt_len(i32 14, i32 4, i32 -1)
  br label %12

12:                                               ; preds = %11, %0
  %13 = load i32, i32* @blocksize, align 4
  %14 = add i32 %13, -1
  store i32 %14, i32* @blocksize, align 4
  %15 = load i16, i16* @bitbuf, align 2
  %16 = zext i16 %15 to i32
  %17 = ashr i32 %16, 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([32768 x i16]* @d_buf to [0 x i16]*), i64 0, i64 %18
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i32
  store i32 %21, i32* %2, align 4
  %22 = load i32, i32* %2, align 4
  %23 = icmp uge i32 %22, 510
  br i1 %23, label %24, label %50

24:                                               ; preds = %12
  store i32 8, i32* %3, align 4
  br label %25

25:                                               ; preds = %46, %24
  %26 = load i16, i16* @bitbuf, align 2
  %27 = zext i16 %26 to i32
  %28 = load i32, i32* %3, align 4
  %29 = and i32 %27, %28
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %37

31:                                               ; preds = %25
  %32 = load i32, i32* %2, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  store i32 %36, i32* %2, align 4
  br label %43

37:                                               ; preds = %25
  %38 = load i32, i32* %2, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %39
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  store i32 %42, i32* %2, align 4
  br label %43

43:                                               ; preds = %37, %31
  %44 = load i32, i32* %3, align 4
  %45 = lshr i32 %44, 1
  store i32 %45, i32* %3, align 4
  br label %46

46:                                               ; preds = %43
  %47 = load i32, i32* %2, align 4
  %48 = icmp uge i32 %47, 510
  br i1 %48, label %25, label %49, !llvm.loop !131

49:                                               ; preds = %46
  br label %50

50:                                               ; preds = %49, %12
  %51 = load i32, i32* %2, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  call void @fillbuf(i32 %55)
  %56 = load i32, i32* %2, align 4
  store i32 %56, i32* %1, align 4
  br label %57

57:                                               ; preds = %50, %10
  %58 = load i32, i32* %1, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @decode_p() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = load i16, i16* @bitbuf, align 2
  %4 = zext i16 %3 to i32
  %5 = ashr i32 %4, 8
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds [256 x i16], [256 x i16]* @pt_table, i64 0, i64 %6
  %8 = load i16, i16* %7, align 2
  %9 = zext i16 %8 to i32
  store i32 %9, i32* %1, align 4
  %10 = load i32, i32* %1, align 4
  %11 = icmp uge i32 %10, 14
  br i1 %11, label %12, label %38

12:                                               ; preds = %0
  store i32 128, i32* %2, align 4
  br label %13

13:                                               ; preds = %34, %12
  %14 = load i16, i16* @bitbuf, align 2
  %15 = zext i16 %14 to i32
  %16 = load i32, i32* %2, align 4
  %17 = and i32 %15, %16
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %25

19:                                               ; preds = %13
  %20 = load i32, i32* %1, align 4
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %21
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  store i32 %24, i32* %1, align 4
  br label %31

25:                                               ; preds = %13
  %26 = load i32, i32* %1, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  store i32 %30, i32* %1, align 4
  br label %31

31:                                               ; preds = %25, %19
  %32 = load i32, i32* %2, align 4
  %33 = lshr i32 %32, 1
  store i32 %33, i32* %2, align 4
  br label %34

34:                                               ; preds = %31
  %35 = load i32, i32* %1, align 4
  %36 = icmp uge i32 %35, 14
  br i1 %36, label %13, label %37, !llvm.loop !132

37:                                               ; preds = %34
  br label %38

38:                                               ; preds = %37, %0
  %39 = load i32, i32* %1, align 4
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds [32 x i8], [32 x i8]* @pt_len, i64 0, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  call void @fillbuf(i32 %43)
  %44 = load i32, i32* %1, align 4
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %54

46:                                               ; preds = %38
  %47 = load i32, i32* %1, align 4
  %48 = sub i32 %47, 1
  %49 = shl i32 1, %48
  %50 = load i32, i32* %1, align 4
  %51 = sub i32 %50, 1
  %52 = call i32 @getbits(i32 %51)
  %53 = add i32 %49, %52
  store i32 %53, i32* %1, align 4
  br label %54

54:                                               ; preds = %46, %38
  %55 = load i32, i32* %1, align 4
  ret i32 %55
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @fillbuf(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = load i16, i16* @bitbuf, align 2
  %5 = zext i16 %4 to i32
  %6 = shl i32 %5, %3
  %7 = trunc i32 %6 to i16
  store i16 %7, i16* @bitbuf, align 2
  br label %8

8:                                                ; preds = %39, %1
  %9 = load i32, i32* %2, align 4
  %10 = load i32, i32* @bitcount, align 4
  %11 = icmp sgt i32 %9, %10
  br i1 %11, label %12, label %40

12:                                               ; preds = %8
  %13 = load i32, i32* @subbitbuf, align 4
  %14 = load i32, i32* @bitcount, align 4
  %15 = load i32, i32* %2, align 4
  %16 = sub nsw i32 %15, %14
  store i32 %16, i32* %2, align 4
  %17 = shl i32 %13, %16
  %18 = load i16, i16* @bitbuf, align 2
  %19 = zext i16 %18 to i32
  %20 = or i32 %19, %17
  %21 = trunc i32 %20 to i16
  store i16 %21, i16* @bitbuf, align 2
  %22 = load i32, i32* @inptr, align 4
  %23 = load i32, i32* @insize, align 4
  %24 = icmp ult i32 %22, %23
  br i1 %24, label %25, label %32

25:                                               ; preds = %12
  %26 = load i32, i32* @inptr, align 4
  %27 = add i32 %26, 1
  store i32 %27, i32* @inptr, align 4
  %28 = zext i32 %26 to i64
  %29 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  br label %34

32:                                               ; preds = %12
  %33 = call i32 @fill_inbuf(i32 1)
  br label %34

34:                                               ; preds = %32, %25
  %35 = phi i32 [ %31, %25 ], [ %33, %32 ]
  store i32 %35, i32* @subbitbuf, align 4
  %36 = load i32, i32* @subbitbuf, align 4
  %37 = icmp eq i32 %36, -1
  br i1 %37, label %38, label %39

38:                                               ; preds = %34
  store i32 0, i32* @subbitbuf, align 4
  br label %39

39:                                               ; preds = %38, %34
  store i32 8, i32* @bitcount, align 4
  br label %8, !llvm.loop !133

40:                                               ; preds = %8
  %41 = load i32, i32* @subbitbuf, align 4
  %42 = load i32, i32* %2, align 4
  %43 = load i32, i32* @bitcount, align 4
  %44 = sub nsw i32 %43, %42
  store i32 %44, i32* @bitcount, align 4
  %45 = lshr i32 %41, %44
  %46 = load i16, i16* @bitbuf, align 2
  %47 = zext i16 %46 to i32
  %48 = or i32 %47, %45
  %49 = trunc i32 %48 to i16
  store i16 %49, i16* @bitbuf, align 2
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @getbits(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = load i16, i16* @bitbuf, align 2
  %5 = zext i16 %4 to i32
  %6 = load i32, i32* %2, align 4
  %7 = sext i32 %6 to i64
  %8 = sub i64 16, %7
  %9 = trunc i64 %8 to i32
  %10 = ashr i32 %5, %9
  store i32 %10, i32* %3, align 4
  %11 = load i32, i32* %2, align 4
  call void @fillbuf(i32 %11)
  %12 = load i32, i32* %3, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @read_pt_len(i32 %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %11 = load i32, i32* %5, align 4
  %12 = call i32 @getbits(i32 %11)
  store i32 %12, i32* %9, align 4
  %13 = load i32, i32* %9, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %43

15:                                               ; preds = %3
  %16 = load i32, i32* %5, align 4
  %17 = call i32 @getbits(i32 %16)
  store i32 %17, i32* %8, align 4
  store i32 0, i32* %7, align 4
  br label %18

18:                                               ; preds = %26, %15
  %19 = load i32, i32* %7, align 4
  %20 = load i32, i32* %4, align 4
  %21 = icmp slt i32 %19, %20
  br i1 %21, label %22, label %29

22:                                               ; preds = %18
  %23 = load i32, i32* %7, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [32 x i8], [32 x i8]* @pt_len, i64 0, i64 %24
  store i8 0, i8* %25, align 1
  br label %26

26:                                               ; preds = %22
  %27 = load i32, i32* %7, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %7, align 4
  br label %18, !llvm.loop !134

29:                                               ; preds = %18
  store i32 0, i32* %7, align 4
  br label %30

30:                                               ; preds = %39, %29
  %31 = load i32, i32* %7, align 4
  %32 = icmp slt i32 %31, 256
  br i1 %32, label %33, label %42

33:                                               ; preds = %30
  %34 = load i32, i32* %8, align 4
  %35 = trunc i32 %34 to i16
  %36 = load i32, i32* %7, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [256 x i16], [256 x i16]* @pt_table, i64 0, i64 %37
  store i16 %35, i16* %38, align 2
  br label %39

39:                                               ; preds = %33
  %40 = load i32, i32* %7, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %7, align 4
  br label %30, !llvm.loop !135

42:                                               ; preds = %30
  br label %114

43:                                               ; preds = %3
  store i32 0, i32* %7, align 4
  br label %44

44:                                               ; preds = %101, %43
  %45 = load i32, i32* %7, align 4
  %46 = load i32, i32* %9, align 4
  %47 = icmp slt i32 %45, %46
  br i1 %47, label %48, label %102

48:                                               ; preds = %44
  %49 = load i16, i16* @bitbuf, align 2
  %50 = zext i16 %49 to i32
  %51 = ashr i32 %50, 13
  store i32 %51, i32* %8, align 4
  %52 = load i32, i32* %8, align 4
  %53 = icmp eq i32 %52, 7
  br i1 %53, label %54, label %71

54:                                               ; preds = %48
  store i32 4096, i32* %10, align 4
  br label %55

55:                                               ; preds = %61, %54
  %56 = load i32, i32* %10, align 4
  %57 = load i16, i16* @bitbuf, align 2
  %58 = zext i16 %57 to i32
  %59 = and i32 %56, %58
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %66

61:                                               ; preds = %55
  %62 = load i32, i32* %10, align 4
  %63 = lshr i32 %62, 1
  store i32 %63, i32* %10, align 4
  %64 = load i32, i32* %8, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %8, align 4
  br label %55, !llvm.loop !136

66:                                               ; preds = %55
  %67 = load i32, i32* %8, align 4
  %68 = icmp slt i32 16, %67
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  call void @gzip_error(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.156, i64 0, i64 0)) #23
  unreachable

70:                                               ; preds = %66
  br label %71

71:                                               ; preds = %70, %48
  %72 = load i32, i32* %8, align 4
  %73 = icmp slt i32 %72, 7
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  br label %78

75:                                               ; preds = %71
  %76 = load i32, i32* %8, align 4
  %77 = sub nsw i32 %76, 3
  br label %78

78:                                               ; preds = %75, %74
  %79 = phi i32 [ 3, %74 ], [ %77, %75 ]
  call void @fillbuf(i32 %79)
  %80 = load i32, i32* %8, align 4
  %81 = trunc i32 %80 to i8
  %82 = load i32, i32* %7, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %7, align 4
  %84 = sext i32 %82 to i64
  %85 = getelementptr inbounds [32 x i8], [32 x i8]* @pt_len, i64 0, i64 %84
  store i8 %81, i8* %85, align 1
  %86 = load i32, i32* %7, align 4
  %87 = load i32, i32* %6, align 4
  %88 = icmp eq i32 %86, %87
  br i1 %88, label %89, label %101

89:                                               ; preds = %78
  %90 = call i32 @getbits(i32 2)
  store i32 %90, i32* %8, align 4
  br label %91

91:                                               ; preds = %95, %89
  %92 = load i32, i32* %8, align 4
  %93 = add nsw i32 %92, -1
  store i32 %93, i32* %8, align 4
  %94 = icmp sge i32 %93, 0
  br i1 %94, label %95, label %100

95:                                               ; preds = %91
  %96 = load i32, i32* %7, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %7, align 4
  %98 = sext i32 %96 to i64
  %99 = getelementptr inbounds [32 x i8], [32 x i8]* @pt_len, i64 0, i64 %98
  store i8 0, i8* %99, align 1
  br label %91, !llvm.loop !137

100:                                              ; preds = %91
  br label %101

101:                                              ; preds = %100, %78
  br label %44, !llvm.loop !138

102:                                              ; preds = %44
  br label %103

103:                                              ; preds = %107, %102
  %104 = load i32, i32* %7, align 4
  %105 = load i32, i32* %4, align 4
  %106 = icmp slt i32 %104, %105
  br i1 %106, label %107, label %112

107:                                              ; preds = %103
  %108 = load i32, i32* %7, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %7, align 4
  %110 = sext i32 %108 to i64
  %111 = getelementptr inbounds [32 x i8], [32 x i8]* @pt_len, i64 0, i64 %110
  store i8 0, i8* %111, align 1
  br label %103, !llvm.loop !139

112:                                              ; preds = %103
  %113 = load i32, i32* %4, align 4
  call void @make_table(i32 %113, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @pt_len, i64 0, i64 0), i32 8, i16* getelementptr inbounds ([256 x i16], [256 x i16]* @pt_table, i64 0, i64 0))
  br label %114

114:                                              ; preds = %112, %42
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @read_c_len() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = call i32 @getbits(i32 9)
  store i32 %5, i32* %3, align 4
  %6 = load i32, i32* %3, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %34

8:                                                ; preds = %0
  %9 = call i32 @getbits(i32 9)
  store i32 %9, i32* %2, align 4
  store i32 0, i32* %1, align 4
  br label %10

10:                                               ; preds = %17, %8
  %11 = load i32, i32* %1, align 4
  %12 = icmp slt i32 %11, 510
  br i1 %12, label %13, label %20

13:                                               ; preds = %10
  %14 = load i32, i32* %1, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %15
  store i8 0, i8* %16, align 1
  br label %17

17:                                               ; preds = %13
  %18 = load i32, i32* %1, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %1, align 4
  br label %10, !llvm.loop !140

20:                                               ; preds = %10
  store i32 0, i32* %1, align 4
  br label %21

21:                                               ; preds = %30, %20
  %22 = load i32, i32* %1, align 4
  %23 = icmp slt i32 %22, 4096
  br i1 %23, label %24, label %33

24:                                               ; preds = %21
  %25 = load i32, i32* %2, align 4
  %26 = trunc i32 %25 to i16
  %27 = load i32, i32* %1, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([32768 x i16]* @d_buf to [0 x i16]*), i64 0, i64 %28
  store i16 %26, i16* %29, align 2
  br label %30

30:                                               ; preds = %24
  %31 = load i32, i32* %1, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %1, align 4
  br label %21, !llvm.loop !141

33:                                               ; preds = %21
  br label %127

34:                                               ; preds = %0
  store i32 0, i32* %1, align 4
  br label %35

35:                                               ; preds = %116, %34
  %36 = load i32, i32* %1, align 4
  %37 = load i32, i32* %3, align 4
  %38 = icmp slt i32 %36, %37
  br i1 %38, label %39, label %117

39:                                               ; preds = %35
  %40 = load i16, i16* @bitbuf, align 2
  %41 = zext i16 %40 to i32
  %42 = ashr i32 %41, 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [256 x i16], [256 x i16]* @pt_table, i64 0, i64 %43
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  store i32 %46, i32* %2, align 4
  %47 = load i32, i32* %2, align 4
  %48 = icmp sge i32 %47, 19
  br i1 %48, label %49, label %75

49:                                               ; preds = %39
  store i32 128, i32* %4, align 4
  br label %50

50:                                               ; preds = %71, %49
  %51 = load i16, i16* @bitbuf, align 2
  %52 = zext i16 %51 to i32
  %53 = load i32, i32* %4, align 4
  %54 = and i32 %52, %53
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %62

56:                                               ; preds = %50
  %57 = load i32, i32* %2, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %58
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  store i32 %61, i32* %2, align 4
  br label %68

62:                                               ; preds = %50
  %63 = load i32, i32* %2, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %64
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  store i32 %67, i32* %2, align 4
  br label %68

68:                                               ; preds = %62, %56
  %69 = load i32, i32* %4, align 4
  %70 = lshr i32 %69, 1
  store i32 %70, i32* %4, align 4
  br label %71

71:                                               ; preds = %68
  %72 = load i32, i32* %2, align 4
  %73 = icmp sge i32 %72, 19
  br i1 %73, label %50, label %74, !llvm.loop !142

74:                                               ; preds = %71
  br label %75

75:                                               ; preds = %74, %39
  %76 = load i32, i32* %2, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [32 x i8], [32 x i8]* @pt_len, i64 0, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  call void @fillbuf(i32 %80)
  %81 = load i32, i32* %2, align 4
  %82 = icmp sle i32 %81, 2
  br i1 %82, label %83, label %108

83:                                               ; preds = %75
  %84 = load i32, i32* %2, align 4
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %83
  store i32 1, i32* %2, align 4
  br label %97

87:                                               ; preds = %83
  %88 = load i32, i32* %2, align 4
  %89 = icmp eq i32 %88, 1
  br i1 %89, label %90, label %93

90:                                               ; preds = %87
  %91 = call i32 @getbits(i32 4)
  %92 = add i32 %91, 3
  store i32 %92, i32* %2, align 4
  br label %96

93:                                               ; preds = %87
  %94 = call i32 @getbits(i32 9)
  %95 = add i32 %94, 20
  store i32 %95, i32* %2, align 4
  br label %96

96:                                               ; preds = %93, %90
  br label %97

97:                                               ; preds = %96, %86
  br label %98

98:                                               ; preds = %102, %97
  %99 = load i32, i32* %2, align 4
  %100 = add nsw i32 %99, -1
  store i32 %100, i32* %2, align 4
  %101 = icmp sge i32 %100, 0
  br i1 %101, label %102, label %107

102:                                              ; preds = %98
  %103 = load i32, i32* %1, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %1, align 4
  %105 = sext i32 %103 to i64
  %106 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %105
  store i8 0, i8* %106, align 1
  br label %98, !llvm.loop !143

107:                                              ; preds = %98
  br label %116

108:                                              ; preds = %75
  %109 = load i32, i32* %2, align 4
  %110 = sub nsw i32 %109, 2
  %111 = trunc i32 %110 to i8
  %112 = load i32, i32* %1, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %1, align 4
  %114 = sext i32 %112 to i64
  %115 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %114
  store i8 %111, i8* %115, align 1
  br label %116

116:                                              ; preds = %108, %107
  br label %35, !llvm.loop !144

117:                                              ; preds = %35
  br label %118

118:                                              ; preds = %121, %117
  %119 = load i32, i32* %1, align 4
  %120 = icmp slt i32 %119, 510
  br i1 %120, label %121, label %126

121:                                              ; preds = %118
  %122 = load i32, i32* %1, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %1, align 4
  %124 = sext i32 %122 to i64
  %125 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %124
  store i8 0, i8* %125, align 1
  br label %118, !llvm.loop !145

126:                                              ; preds = %118
  call void @make_table(i32 510, i8* getelementptr inbounds ([264192 x i8], [264192 x i8]* @outbuf, i64 0, i64 0), i32 12, i16* getelementptr inbounds ([32768 x i16], [32768 x i16]* @d_buf, i64 0, i64 0))
  br label %127

127:                                              ; preds = %126, %33
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @make_table(i32 %0, i8* %1, i32 %2, i16* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i16*, align 8
  %9 = alloca [17 x i16], align 16
  %10 = alloca [17 x i16], align 16
  %11 = alloca [18 x i16], align 16
  %12 = alloca i16*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  store i16* %3, i16** %8, align 8
  store i32 1, i32* %13, align 4
  br label %21

21:                                               ; preds = %28, %4
  %22 = load i32, i32* %13, align 4
  %23 = icmp ule i32 %22, 16
  br i1 %23, label %24, label %31

24:                                               ; preds = %21
  %25 = load i32, i32* %13, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [17 x i16], [17 x i16]* %9, i64 0, i64 %26
  store i16 0, i16* %27, align 2
  br label %28

28:                                               ; preds = %24
  %29 = load i32, i32* %13, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %13, align 4
  br label %21, !llvm.loop !146

31:                                               ; preds = %21
  store i32 0, i32* %13, align 4
  br label %32

32:                                               ; preds = %46, %31
  %33 = load i32, i32* %13, align 4
  %34 = load i32, i32* %5, align 4
  %35 = icmp ult i32 %33, %34
  br i1 %35, label %36, label %49

36:                                               ; preds = %32
  %37 = load i8*, i8** %6, align 8
  %38 = load i32, i32* %13, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %37, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds [17 x i16], [17 x i16]* %9, i64 0, i64 %42
  %44 = load i16, i16* %43, align 2
  %45 = add i16 %44, 1
  store i16 %45, i16* %43, align 2
  br label %46

46:                                               ; preds = %36
  %47 = load i32, i32* %13, align 4
  %48 = add i32 %47, 1
  store i32 %48, i32* %13, align 4
  br label %32, !llvm.loop !147

49:                                               ; preds = %32
  %50 = getelementptr inbounds [18 x i16], [18 x i16]* %11, i64 0, i64 1
  store i16 0, i16* %50, align 2
  store i32 1, i32* %13, align 4
  br label %51

51:                                               ; preds = %74, %49
  %52 = load i32, i32* %13, align 4
  %53 = icmp ule i32 %52, 16
  br i1 %53, label %54, label %77

54:                                               ; preds = %51
  %55 = load i32, i32* %13, align 4
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds [18 x i16], [18 x i16]* %11, i64 0, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = load i32, i32* %13, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds [17 x i16], [17 x i16]* %9, i64 0, i64 %61
  %63 = load i16, i16* %62, align 2
  %64 = zext i16 %63 to i32
  %65 = load i32, i32* %13, align 4
  %66 = sub i32 16, %65
  %67 = shl i32 %64, %66
  %68 = add nsw i32 %59, %67
  %69 = trunc i32 %68 to i16
  %70 = load i32, i32* %13, align 4
  %71 = add i32 %70, 1
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds [18 x i16], [18 x i16]* %11, i64 0, i64 %72
  store i16 %69, i16* %73, align 2
  br label %74

74:                                               ; preds = %54
  %75 = load i32, i32* %13, align 4
  %76 = add i32 %75, 1
  store i32 %76, i32* %13, align 4
  br label %51, !llvm.loop !148

77:                                               ; preds = %51
  %78 = getelementptr inbounds [18 x i16], [18 x i16]* %11, i64 0, i64 17
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = and i32 %80, 65535
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %77
  call void @gzip_error(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.156, i64 0, i64 0)) #23
  unreachable

84:                                               ; preds = %77
  %85 = load i32, i32* %7, align 4
  %86 = sub nsw i32 16, %85
  store i32 %86, i32* %17, align 4
  store i32 1, i32* %13, align 4
  br label %87

87:                                               ; preds = %108, %84
  %88 = load i32, i32* %13, align 4
  %89 = load i32, i32* %7, align 4
  %90 = icmp ule i32 %88, %89
  br i1 %90, label %91, label %111

91:                                               ; preds = %87
  %92 = load i32, i32* %17, align 4
  %93 = load i32, i32* %13, align 4
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds [18 x i16], [18 x i16]* %11, i64 0, i64 %94
  %96 = load i16, i16* %95, align 2
  %97 = zext i16 %96 to i32
  %98 = ashr i32 %97, %92
  %99 = trunc i32 %98 to i16
  store i16 %99, i16* %95, align 2
  %100 = load i32, i32* %7, align 4
  %101 = load i32, i32* %13, align 4
  %102 = sub i32 %100, %101
  %103 = shl i32 1, %102
  %104 = trunc i32 %103 to i16
  %105 = load i32, i32* %13, align 4
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds [17 x i16], [17 x i16]* %10, i64 0, i64 %106
  store i16 %104, i16* %107, align 2
  br label %108

108:                                              ; preds = %91
  %109 = load i32, i32* %13, align 4
  %110 = add i32 %109, 1
  store i32 %110, i32* %13, align 4
  br label %87, !llvm.loop !149

111:                                              ; preds = %87
  br label %112

112:                                              ; preds = %115, %111
  %113 = load i32, i32* %13, align 4
  %114 = icmp ule i32 %113, 16
  br i1 %114, label %115, label %125

115:                                              ; preds = %112
  %116 = load i32, i32* %13, align 4
  %117 = sub i32 16, %116
  %118 = shl i32 1, %117
  %119 = trunc i32 %118 to i16
  %120 = load i32, i32* %13, align 4
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds [17 x i16], [17 x i16]* %10, i64 0, i64 %121
  store i16 %119, i16* %122, align 2
  %123 = load i32, i32* %13, align 4
  %124 = add i32 %123, 1
  store i32 %124, i32* %13, align 4
  br label %112, !llvm.loop !150

125:                                              ; preds = %112
  %126 = load i32, i32* %7, align 4
  %127 = add nsw i32 %126, 1
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds [18 x i16], [18 x i16]* %11, i64 0, i64 %128
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = load i32, i32* %17, align 4
  %133 = ashr i32 %131, %132
  store i32 %133, i32* %13, align 4
  %134 = load i32, i32* %13, align 4
  %135 = icmp ne i32 %134, 0
  br i1 %135, label %136, label %150

136:                                              ; preds = %125
  %137 = load i32, i32* %7, align 4
  %138 = shl i32 1, %137
  store i32 %138, i32* %14, align 4
  br label %139

139:                                              ; preds = %143, %136
  %140 = load i32, i32* %13, align 4
  %141 = load i32, i32* %14, align 4
  %142 = icmp ne i32 %140, %141
  br i1 %142, label %143, label %149

143:                                              ; preds = %139
  %144 = load i16*, i16** %8, align 8
  %145 = load i32, i32* %13, align 4
  %146 = add i32 %145, 1
  store i32 %146, i32* %13, align 4
  %147 = zext i32 %145 to i64
  %148 = getelementptr inbounds i16, i16* %144, i64 %147
  store i16 0, i16* %148, align 2
  br label %139, !llvm.loop !151

149:                                              ; preds = %139
  br label %150

150:                                              ; preds = %149, %125
  %151 = load i32, i32* %5, align 4
  store i32 %151, i32* %18, align 4
  %152 = load i32, i32* %7, align 4
  %153 = sub nsw i32 15, %152
  %154 = shl i32 1, %153
  store i32 %154, i32* %20, align 4
  store i32 0, i32* %16, align 4
  br label %155

155:                                              ; preds = %274, %150
  %156 = load i32, i32* %16, align 4
  %157 = load i32, i32* %5, align 4
  %158 = icmp ult i32 %156, %157
  br i1 %158, label %159, label %277

159:                                              ; preds = %155
  %160 = load i8*, i8** %6, align 8
  %161 = load i32, i32* %16, align 4
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds i8, i8* %160, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  store i32 %165, i32* %15, align 4
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %168

167:                                              ; preds = %159
  br label %274

168:                                              ; preds = %159
  %169 = load i32, i32* %15, align 4
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds [18 x i16], [18 x i16]* %11, i64 0, i64 %170
  %172 = load i16, i16* %171, align 2
  %173 = zext i16 %172 to i32
  %174 = load i32, i32* %15, align 4
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds [17 x i16], [17 x i16]* %10, i64 0, i64 %175
  %177 = load i16, i16* %176, align 2
  %178 = zext i16 %177 to i32
  %179 = add nsw i32 %173, %178
  store i32 %179, i32* %19, align 4
  %180 = load i32, i32* %15, align 4
  %181 = load i32, i32* %7, align 4
  %182 = icmp ule i32 %180, %181
  br i1 %182, label %183, label %210

183:                                              ; preds = %168
  %184 = load i32, i32* %7, align 4
  %185 = shl i32 1, %184
  %186 = load i32, i32* %19, align 4
  %187 = icmp ult i32 %185, %186
  br i1 %187, label %188, label %189

188:                                              ; preds = %183
  call void @gzip_error(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.156, i64 0, i64 0)) #23
  unreachable

189:                                              ; preds = %183
  %190 = load i32, i32* %15, align 4
  %191 = zext i32 %190 to i64
  %192 = getelementptr inbounds [18 x i16], [18 x i16]* %11, i64 0, i64 %191
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  store i32 %194, i32* %13, align 4
  br label %195

195:                                              ; preds = %206, %189
  %196 = load i32, i32* %13, align 4
  %197 = load i32, i32* %19, align 4
  %198 = icmp ult i32 %196, %197
  br i1 %198, label %199, label %209

199:                                              ; preds = %195
  %200 = load i32, i32* %16, align 4
  %201 = trunc i32 %200 to i16
  %202 = load i16*, i16** %8, align 8
  %203 = load i32, i32* %13, align 4
  %204 = zext i32 %203 to i64
  %205 = getelementptr inbounds i16, i16* %202, i64 %204
  store i16 %201, i16* %205, align 2
  br label %206

206:                                              ; preds = %199
  %207 = load i32, i32* %13, align 4
  %208 = add i32 %207, 1
  store i32 %208, i32* %13, align 4
  br label %195, !llvm.loop !152

209:                                              ; preds = %195
  br label %268

210:                                              ; preds = %168
  %211 = load i32, i32* %15, align 4
  %212 = zext i32 %211 to i64
  %213 = getelementptr inbounds [18 x i16], [18 x i16]* %11, i64 0, i64 %212
  %214 = load i16, i16* %213, align 2
  %215 = zext i16 %214 to i32
  store i32 %215, i32* %14, align 4
  %216 = load i16*, i16** %8, align 8
  %217 = load i32, i32* %14, align 4
  %218 = load i32, i32* %17, align 4
  %219 = lshr i32 %217, %218
  %220 = zext i32 %219 to i64
  %221 = getelementptr inbounds i16, i16* %216, i64 %220
  store i16* %221, i16** %12, align 8
  %222 = load i32, i32* %15, align 4
  %223 = load i32, i32* %7, align 4
  %224 = sub i32 %222, %223
  store i32 %224, i32* %13, align 4
  br label %225

225:                                              ; preds = %259, %210
  %226 = load i32, i32* %13, align 4
  %227 = icmp ne i32 %226, 0
  br i1 %227, label %228, label %264

228:                                              ; preds = %225
  %229 = load i16*, i16** %12, align 8
  %230 = load i16, i16* %229, align 2
  %231 = zext i16 %230 to i32
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %244

233:                                              ; preds = %228
  %234 = load i32, i32* %18, align 4
  %235 = zext i32 %234 to i64
  %236 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %235
  store i16 0, i16* %236, align 2
  %237 = load i32, i32* %18, align 4
  %238 = zext i32 %237 to i64
  %239 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %238
  store i16 0, i16* %239, align 2
  %240 = load i32, i32* %18, align 4
  %241 = add i32 %240, 1
  store i32 %241, i32* %18, align 4
  %242 = trunc i32 %240 to i16
  %243 = load i16*, i16** %12, align 8
  store i16 %242, i16* %243, align 2
  br label %244

244:                                              ; preds = %233, %228
  %245 = load i32, i32* %14, align 4
  %246 = load i32, i32* %20, align 4
  %247 = and i32 %245, %246
  %248 = icmp ne i32 %247, 0
  br i1 %248, label %249, label %254

249:                                              ; preds = %244
  %250 = load i16*, i16** %12, align 8
  %251 = load i16, i16* %250, align 2
  %252 = zext i16 %251 to i64
  %253 = getelementptr inbounds i16, i16* getelementptr inbounds ([65536 x i16], [65536 x i16]* @prev, i64 0, i64 32768), i64 %252
  store i16* %253, i16** %12, align 8
  br label %259

254:                                              ; preds = %244
  %255 = load i16*, i16** %12, align 8
  %256 = load i16, i16* %255, align 2
  %257 = zext i16 %256 to i64
  %258 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %257
  store i16* %258, i16** %12, align 8
  br label %259

259:                                              ; preds = %254, %249
  %260 = load i32, i32* %14, align 4
  %261 = shl i32 %260, 1
  store i32 %261, i32* %14, align 4
  %262 = load i32, i32* %13, align 4
  %263 = add i32 %262, -1
  store i32 %263, i32* %13, align 4
  br label %225, !llvm.loop !153

264:                                              ; preds = %225
  %265 = load i32, i32* %16, align 4
  %266 = trunc i32 %265 to i16
  %267 = load i16*, i16** %12, align 8
  store i16 %266, i16* %267, align 2
  br label %268

268:                                              ; preds = %264, %209
  %269 = load i32, i32* %19, align 4
  %270 = trunc i32 %269 to i16
  %271 = load i32, i32* %15, align 4
  %272 = zext i32 %271 to i64
  %273 = getelementptr inbounds [18 x i16], [18 x i16]* %11, i64 0, i64 %272
  store i16 %270, i16* %273, align 2
  br label %274

274:                                              ; preds = %268, %167
  %275 = load i32, i32* %16, align 4
  %276 = add i32 %275, 1
  store i32 %276, i32* %16, align 4
  br label %155, !llvm.loop !154

277:                                              ; preds = %155
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @huf_decode_start() #0 {
  call void @init_getbits()
  store i32 0, i32* @blocksize, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @init_getbits() #0 {
  store i16 0, i16* @bitbuf, align 2
  store i32 0, i32* @subbitbuf, align 4
  store i32 0, i32* @bitcount, align 4
  call void @fillbuf(i32 16)
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @unlzw(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i8*, align 8
  %24 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  %25 = load i32, i32* @inptr, align 4
  %26 = load i32, i32* @insize, align 4
  %27 = icmp ult i32 %25, %26
  br i1 %27, label %28, label %35

28:                                               ; preds = %2
  %29 = load i32, i32* @inptr, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* @inptr, align 4
  %31 = zext i32 %29 to i64
  %32 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  br label %37

35:                                               ; preds = %2
  %36 = call i32 @fill_inbuf(i32 0)
  br label %37

37:                                               ; preds = %35, %28
  %38 = phi i32 [ %34, %28 ], [ %36, %35 ]
  store i32 %38, i32* @maxbits, align 4
  %39 = load i32, i32* @maxbits, align 4
  %40 = and i32 %39, 128
  store i32 %40, i32* @block_mode, align 4
  %41 = load i32, i32* @maxbits, align 4
  %42 = and i32 %41, 96
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %58

44:                                               ; preds = %37
  %45 = load i32, i32* @quiet, align 4
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %53, label %47

47:                                               ; preds = %44
  %48 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %49 = load i8*, i8** @program_name, align 8
  %50 = load i32, i32* @maxbits, align 4
  %51 = and i32 %50, 96
  %52 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %48, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.159, i64 0, i64 0), i8* %49, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %51)
  br label %53

53:                                               ; preds = %47, %44
  %54 = load i32, i32* @exit_code, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  store i32 2, i32* @exit_code, align 4
  br label %57

57:                                               ; preds = %56, %53
  br label %58

58:                                               ; preds = %57, %37
  %59 = load i32, i32* @maxbits, align 4
  %60 = and i32 %59, 31
  store i32 %60, i32* @maxbits, align 4
  %61 = load i32, i32* @maxbits, align 4
  %62 = zext i32 %61 to i64
  %63 = shl i64 1, %62
  store i64 %63, i64* %17, align 8
  %64 = load i32, i32* @maxbits, align 4
  %65 = icmp sgt i32 %64, 16
  br i1 %65, label %66, label %71

66:                                               ; preds = %58
  %67 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %68 = load i8*, i8** @program_name, align 8
  %69 = load i32, i32* @maxbits, align 4
  %70 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %67, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.160, i64 0, i64 0), i8* %68, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i32 %69, i32 16)
  store i32 1, i32* @exit_code, align 4
  store i32 1, i32* %3, align 4
  br label %431

71:                                               ; preds = %58
  %72 = load i32, i32* @insize, align 4
  store i32 %72, i32* %19, align 4
  store i32 9, i32* %18, align 4
  store i64 511, i64* %16, align 8
  %73 = load i32, i32* %18, align 4
  %74 = shl i32 1, %73
  %75 = sub nsw i32 %74, 1
  store i32 %75, i32* %14, align 4
  store i64 -1, i64* %9, align 8
  store i32 0, i32* %8, align 4
  store i32 0, i32* %13, align 4
  %76 = load i32, i32* @inptr, align 4
  %77 = shl i32 %76, 3
  %78 = zext i32 %77 to i64
  store i64 %78, i64* %12, align 8
  %79 = load i32, i32* @block_mode, align 4
  %80 = icmp ne i32 %79, 0
  %81 = zext i1 %80 to i64
  %82 = select i1 %80, i32 257, i32 256
  %83 = sext i32 %82 to i64
  store i64 %83, i64* %15, align 8
  %84 = call i64 @llvm.objectsize.i64.p0i8(i8* bitcast ([65536 x i16]* @prev to i8*), i1 false, i1 true, i1 false)
  %85 = call i8* @__memset_chk(i8* bitcast ([65536 x i16]* @prev to i8*), i32 0, i64 256, i64 %84) #24
  store i64 255, i64* %7, align 8
  br label %86

86:                                               ; preds = %94, %71
  %87 = load i64, i64* %7, align 8
  %88 = icmp sge i64 %87, 0
  br i1 %88, label %89, label %97

89:                                               ; preds = %86
  %90 = load i64, i64* %7, align 8
  %91 = trunc i64 %90 to i8
  %92 = load i64, i64* %7, align 8
  %93 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %92
  store i8 %91, i8* %93, align 1
  br label %94

94:                                               ; preds = %89
  %95 = load i64, i64* %7, align 8
  %96 = add nsw i64 %95, -1
  store i64 %96, i64* %7, align 8
  br label %86, !llvm.loop !155

97:                                               ; preds = %86
  br label %98

98:                                               ; preds = %421, %97
  br label %99

99:                                               ; preds = %265, %211, %98
  %100 = load i64, i64* %12, align 8
  %101 = ashr i64 %100, 3
  %102 = trunc i64 %101 to i32
  store i32 %102, i32* %22, align 4
  %103 = load i32, i32* %22, align 4
  %104 = load i32, i32* @insize, align 4
  %105 = icmp ule i32 %103, %104
  br i1 %105, label %106, label %110

106:                                              ; preds = %99
  %107 = load i32, i32* @insize, align 4
  %108 = load i32, i32* %22, align 4
  %109 = sub i32 %107, %108
  br label %111

110:                                              ; preds = %99
  br label %111

111:                                              ; preds = %110, %106
  %112 = phi i32 [ %109, %106 ], [ 0, %110 ]
  store i32 %112, i32* %21, align 4
  store i32 0, i32* %20, align 4
  br label %113

113:                                              ; preds = %127, %111
  %114 = load i32, i32* %20, align 4
  %115 = load i32, i32* %21, align 4
  %116 = icmp slt i32 %114, %115
  br i1 %116, label %117, label %130

117:                                              ; preds = %113
  %118 = load i32, i32* %20, align 4
  %119 = load i32, i32* %22, align 4
  %120 = add nsw i32 %118, %119
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = load i32, i32* %20, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %125
  store i8 %123, i8* %126, align 1
  br label %127

127:                                              ; preds = %117
  %128 = load i32, i32* %20, align 4
  %129 = add nsw i32 %128, 1
  store i32 %129, i32* %20, align 4
  br label %113, !llvm.loop !156

130:                                              ; preds = %113
  %131 = load i32, i32* %21, align 4
  store i32 %131, i32* @insize, align 4
  store i64 0, i64* %12, align 8
  %132 = load i32, i32* @insize, align 4
  %133 = icmp ult i32 %132, 64
  br i1 %133, label %134, label %151

134:                                              ; preds = %130
  %135 = load i32, i32* %4, align 4
  %136 = load i32, i32* @insize, align 4
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 0), i64 %137
  %139 = call i32 @read_buffer(i32 %135, i8* %138, i32 262144)
  store i32 %139, i32* %19, align 4
  %140 = load i32, i32* %19, align 4
  %141 = icmp eq i32 %140, -1
  br i1 %141, label %142, label %143

142:                                              ; preds = %134
  call void @read_error() #23
  unreachable

143:                                              ; preds = %134
  %144 = load i32, i32* %19, align 4
  %145 = load i32, i32* @insize, align 4
  %146 = add i32 %145, %144
  store i32 %146, i32* @insize, align 4
  %147 = load i32, i32* %19, align 4
  %148 = sext i32 %147 to i64
  %149 = load i64, i64* @bytes_in, align 8
  %150 = add nsw i64 %149, %148
  store i64 %150, i64* @bytes_in, align 8
  br label %151

151:                                              ; preds = %143, %130
  %152 = load i32, i32* %19, align 4
  %153 = icmp ne i32 %152, 0
  br i1 %153, label %154, label %163

154:                                              ; preds = %151
  %155 = load i32, i32* @insize, align 4
  %156 = zext i32 %155 to i64
  %157 = load i32, i32* @insize, align 4
  %158 = load i32, i32* %18, align 4
  %159 = urem i32 %157, %158
  %160 = zext i32 %159 to i64
  %161 = sub nsw i64 %156, %160
  %162 = shl i64 %161, 3
  br label %171

163:                                              ; preds = %151
  %164 = load i32, i32* @insize, align 4
  %165 = zext i32 %164 to i64
  %166 = shl i64 %165, 3
  %167 = load i32, i32* %18, align 4
  %168 = sub nsw i32 %167, 1
  %169 = sext i32 %168 to i64
  %170 = sub nsw i64 %166, %169
  br label %171

171:                                              ; preds = %163, %154
  %172 = phi i64 [ %162, %154 ], [ %170, %163 ]
  store i64 %172, i64* %11, align 8
  br label %173

173:                                              ; preds = %418, %251, %171
  %174 = load i64, i64* %11, align 8
  %175 = load i64, i64* %12, align 8
  %176 = icmp sgt i64 %174, %175
  br i1 %176, label %177, label %420

177:                                              ; preds = %173
  %178 = load i64, i64* %15, align 8
  %179 = load i64, i64* %16, align 8
  %180 = icmp sgt i64 %178, %179
  br i1 %180, label %181, label %215

181:                                              ; preds = %177
  %182 = load i64, i64* %12, align 8
  %183 = sub nsw i64 %182, 1
  %184 = load i32, i32* %18, align 4
  %185 = shl i32 %184, 3
  %186 = sext i32 %185 to i64
  %187 = load i64, i64* %12, align 8
  %188 = sub nsw i64 %187, 1
  %189 = load i32, i32* %18, align 4
  %190 = shl i32 %189, 3
  %191 = sext i32 %190 to i64
  %192 = add nsw i64 %188, %191
  %193 = load i32, i32* %18, align 4
  %194 = shl i32 %193, 3
  %195 = sext i32 %194 to i64
  %196 = srem i64 %192, %195
  %197 = sub nsw i64 %186, %196
  %198 = add nsw i64 %183, %197
  store i64 %198, i64* %12, align 8
  %199 = load i32, i32* %18, align 4
  %200 = add nsw i32 %199, 1
  store i32 %200, i32* %18, align 4
  %201 = load i32, i32* %18, align 4
  %202 = load i32, i32* @maxbits, align 4
  %203 = icmp eq i32 %201, %202
  br i1 %203, label %204, label %206

204:                                              ; preds = %181
  %205 = load i64, i64* %17, align 8
  store i64 %205, i64* %16, align 8
  br label %211

206:                                              ; preds = %181
  %207 = load i32, i32* %18, align 4
  %208 = zext i32 %207 to i64
  %209 = shl i64 1, %208
  %210 = sub nsw i64 %209, 1
  store i64 %210, i64* %16, align 8
  br label %211

211:                                              ; preds = %206, %204
  %212 = load i32, i32* %18, align 4
  %213 = shl i32 1, %212
  %214 = sub nsw i32 %213, 1
  store i32 %214, i32* %14, align 4
  br label %99

215:                                              ; preds = %177
  %216 = load i64, i64* %12, align 8
  %217 = ashr i64 %216, 3
  %218 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %217
  store i8* %218, i8** %23, align 8
  %219 = load i8*, i8** %23, align 8
  %220 = getelementptr inbounds i8, i8* %219, i64 0
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i64
  %223 = load i8*, i8** %23, align 8
  %224 = getelementptr inbounds i8, i8* %223, i64 1
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i64
  %227 = shl i64 %226, 8
  %228 = or i64 %222, %227
  %229 = load i8*, i8** %23, align 8
  %230 = getelementptr inbounds i8, i8* %229, i64 2
  %231 = load i8, i8* %230, align 1
  %232 = zext i8 %231 to i64
  %233 = shl i64 %232, 16
  %234 = or i64 %228, %233
  %235 = load i64, i64* %12, align 8
  %236 = and i64 %235, 7
  %237 = ashr i64 %234, %236
  %238 = load i32, i32* %14, align 4
  %239 = zext i32 %238 to i64
  %240 = and i64 %237, %239
  store i64 %240, i64* %7, align 8
  %241 = load i32, i32* %18, align 4
  %242 = sext i32 %241 to i64
  %243 = load i64, i64* %12, align 8
  %244 = add nsw i64 %243, %242
  store i64 %244, i64* %12, align 8
  %245 = load i64, i64* %9, align 8
  %246 = icmp eq i64 %245, -1
  br i1 %246, label %247, label %259

247:                                              ; preds = %215
  %248 = load i64, i64* %7, align 8
  %249 = icmp sle i64 256, %248
  br i1 %249, label %250, label %251

250:                                              ; preds = %247
  call void @gzip_error(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2.161, i64 0, i64 0)) #23
  unreachable

251:                                              ; preds = %247
  %252 = load i64, i64* %7, align 8
  store i64 %252, i64* %9, align 8
  %253 = trunc i64 %252 to i32
  store i32 %253, i32* %8, align 4
  %254 = trunc i32 %253 to i8
  %255 = load i32, i32* %13, align 4
  %256 = add nsw i32 %255, 1
  store i32 %256, i32* %13, align 4
  %257 = sext i32 %255 to i64
  %258 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %257
  store i8 %254, i8* %258, align 1
  br label %173, !llvm.loop !157

259:                                              ; preds = %215
  %260 = load i64, i64* %7, align 8
  %261 = icmp eq i64 %260, 256
  br i1 %261, label %262, label %288

262:                                              ; preds = %259
  %263 = load i32, i32* @block_mode, align 4
  %264 = icmp ne i32 %263, 0
  br i1 %264, label %265, label %288

265:                                              ; preds = %262
  %266 = call i64 @llvm.objectsize.i64.p0i8(i8* bitcast ([65536 x i16]* @prev to i8*), i1 false, i1 true, i1 false)
  %267 = call i8* @__memset_chk(i8* bitcast ([65536 x i16]* @prev to i8*), i32 0, i64 256, i64 %266) #24
  store i64 256, i64* %15, align 8
  %268 = load i64, i64* %12, align 8
  %269 = sub nsw i64 %268, 1
  %270 = load i32, i32* %18, align 4
  %271 = shl i32 %270, 3
  %272 = sext i32 %271 to i64
  %273 = load i64, i64* %12, align 8
  %274 = sub nsw i64 %273, 1
  %275 = load i32, i32* %18, align 4
  %276 = shl i32 %275, 3
  %277 = sext i32 %276 to i64
  %278 = add nsw i64 %274, %277
  %279 = load i32, i32* %18, align 4
  %280 = shl i32 %279, 3
  %281 = sext i32 %280 to i64
  %282 = srem i64 %278, %281
  %283 = sub nsw i64 %272, %282
  %284 = add nsw i64 %269, %283
  store i64 %284, i64* %12, align 8
  store i32 9, i32* %18, align 4
  store i64 511, i64* %16, align 8
  %285 = load i32, i32* %18, align 4
  %286 = shl i32 1, %285
  %287 = sub nsw i32 %286, 1
  store i32 %287, i32* %14, align 4
  br label %99

288:                                              ; preds = %262, %259
  %289 = load i64, i64* %7, align 8
  store i64 %289, i64* %10, align 8
  store i8* bitcast (i16* getelementptr inbounds ([32768 x i16], [32768 x i16]* @d_buf, i64 0, i64 32767) to i8*), i8** %6, align 8
  %290 = load i64, i64* %7, align 8
  %291 = load i64, i64* %15, align 8
  %292 = icmp sge i64 %290, %291
  br i1 %292, label %293, label %314

293:                                              ; preds = %288
  %294 = load i64, i64* %7, align 8
  %295 = load i64, i64* %15, align 8
  %296 = icmp sgt i64 %294, %295
  br i1 %296, label %297, label %308

297:                                              ; preds = %293
  %298 = load i32, i32* %13, align 4
  %299 = icmp sgt i32 %298, 0
  br i1 %299, label %300, label %303

300:                                              ; preds = %297
  %301 = load i32, i32* %5, align 4
  %302 = load i32, i32* %13, align 4
  call void @write_buf(i32 %301, i8* getelementptr inbounds ([264192 x i8], [264192 x i8]* @outbuf, i64 0, i64 0), i32 %302)
  br label %303

303:                                              ; preds = %300, %297
  %304 = load i32, i32* @to_stdout, align 4
  %305 = icmp ne i32 %304, 0
  %306 = zext i1 %305 to i64
  %307 = select i1 %305, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2.161, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3.162, i64 0, i64 0)
  call void @gzip_error(i8* %307) #23
  unreachable

308:                                              ; preds = %293
  %309 = load i32, i32* %8, align 4
  %310 = trunc i32 %309 to i8
  %311 = load i8*, i8** %6, align 8
  %312 = getelementptr inbounds i8, i8* %311, i32 -1
  store i8* %312, i8** %6, align 8
  store i8 %310, i8* %312, align 1
  %313 = load i64, i64* %9, align 8
  store i64 %313, i64* %7, align 8
  br label %314

314:                                              ; preds = %308, %288
  br label %315

315:                                              ; preds = %318, %314
  %316 = load i64, i64* %7, align 8
  %317 = icmp uge i64 %316, 256
  br i1 %317, label %318, label %328

318:                                              ; preds = %315
  %319 = load i64, i64* %7, align 8
  %320 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %319
  %321 = load i8, i8* %320, align 1
  %322 = load i8*, i8** %6, align 8
  %323 = getelementptr inbounds i8, i8* %322, i32 -1
  store i8* %323, i8** %6, align 8
  store i8 %321, i8* %323, align 1
  %324 = load i64, i64* %7, align 8
  %325 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %324
  %326 = load i16, i16* %325, align 2
  %327 = zext i16 %326 to i64
  store i64 %327, i64* %7, align 8
  br label %315, !llvm.loop !158

328:                                              ; preds = %315
  %329 = load i64, i64* %7, align 8
  %330 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %329
  %331 = load i8, i8* %330, align 1
  %332 = zext i8 %331 to i32
  store i32 %332, i32* %8, align 4
  %333 = trunc i32 %332 to i8
  %334 = load i8*, i8** %6, align 8
  %335 = getelementptr inbounds i8, i8* %334, i32 -1
  store i8* %335, i8** %6, align 8
  store i8 %333, i8* %335, align 1
  %336 = load i32, i32* %13, align 4
  %337 = load i8*, i8** %6, align 8
  %338 = ptrtoint i8* %337 to i64
  %339 = sub i64 ptrtoint (i16* getelementptr inbounds ([32768 x i16], [32768 x i16]* @d_buf, i64 0, i64 32767) to i64), %338
  %340 = trunc i64 %339 to i32
  store i32 %340, i32* %24, align 4
  %341 = add nsw i32 %336, %340
  %342 = icmp sge i32 %341, 262144
  br i1 %342, label %343, label %388

343:                                              ; preds = %328
  br label %344

344:                                              ; preds = %381, %343
  %345 = load i32, i32* %24, align 4
  %346 = load i32, i32* %13, align 4
  %347 = sub nsw i32 262144, %346
  %348 = icmp sgt i32 %345, %347
  br i1 %348, label %349, label %352

349:                                              ; preds = %344
  %350 = load i32, i32* %13, align 4
  %351 = sub nsw i32 262144, %350
  store i32 %351, i32* %24, align 4
  br label %352

352:                                              ; preds = %349, %344
  %353 = load i32, i32* %24, align 4
  %354 = icmp sgt i32 %353, 0
  br i1 %354, label %355, label %370

355:                                              ; preds = %352
  %356 = load i32, i32* %13, align 4
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds i8, i8* getelementptr inbounds ([264192 x i8], [264192 x i8]* @outbuf, i64 0, i64 0), i64 %357
  %359 = load i8*, i8** %6, align 8
  %360 = load i32, i32* %24, align 4
  %361 = sext i32 %360 to i64
  %362 = load i32, i32* %13, align 4
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds i8, i8* getelementptr inbounds ([264192 x i8], [264192 x i8]* @outbuf, i64 0, i64 0), i64 %363
  %365 = call i64 @llvm.objectsize.i64.p0i8(i8* %364, i1 false, i1 true, i1 false)
  %366 = call i8* @__memcpy_chk(i8* %358, i8* %359, i64 %361, i64 %365) #24
  %367 = load i32, i32* %24, align 4
  %368 = load i32, i32* %13, align 4
  %369 = add nsw i32 %368, %367
  store i32 %369, i32* %13, align 4
  br label %370

370:                                              ; preds = %355, %352
  %371 = load i32, i32* %13, align 4
  %372 = icmp sge i32 %371, 262144
  br i1 %372, label %373, label %376

373:                                              ; preds = %370
  %374 = load i32, i32* %5, align 4
  %375 = load i32, i32* %13, align 4
  call void @write_buf(i32 %374, i8* getelementptr inbounds ([264192 x i8], [264192 x i8]* @outbuf, i64 0, i64 0), i32 %375)
  store i32 0, i32* %13, align 4
  br label %376

376:                                              ; preds = %373, %370
  %377 = load i32, i32* %24, align 4
  %378 = load i8*, i8** %6, align 8
  %379 = sext i32 %377 to i64
  %380 = getelementptr inbounds i8, i8* %378, i64 %379
  store i8* %380, i8** %6, align 8
  br label %381

381:                                              ; preds = %376
  %382 = load i8*, i8** %6, align 8
  %383 = ptrtoint i8* %382 to i64
  %384 = sub i64 ptrtoint (i16* getelementptr inbounds ([32768 x i16], [32768 x i16]* @d_buf, i64 0, i64 32767) to i64), %383
  %385 = trunc i64 %384 to i32
  store i32 %385, i32* %24, align 4
  %386 = icmp sgt i32 %385, 0
  br i1 %386, label %344, label %387, !llvm.loop !159

387:                                              ; preds = %381
  br label %403

388:                                              ; preds = %328
  %389 = load i32, i32* %13, align 4
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds i8, i8* getelementptr inbounds ([264192 x i8], [264192 x i8]* @outbuf, i64 0, i64 0), i64 %390
  %392 = load i8*, i8** %6, align 8
  %393 = load i32, i32* %24, align 4
  %394 = sext i32 %393 to i64
  %395 = load i32, i32* %13, align 4
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds i8, i8* getelementptr inbounds ([264192 x i8], [264192 x i8]* @outbuf, i64 0, i64 0), i64 %396
  %398 = call i64 @llvm.objectsize.i64.p0i8(i8* %397, i1 false, i1 true, i1 false)
  %399 = call i8* @__memcpy_chk(i8* %391, i8* %392, i64 %394, i64 %398) #24
  %400 = load i32, i32* %24, align 4
  %401 = load i32, i32* %13, align 4
  %402 = add nsw i32 %401, %400
  store i32 %402, i32* %13, align 4
  br label %403

403:                                              ; preds = %388, %387
  %404 = load i64, i64* %15, align 8
  store i64 %404, i64* %7, align 8
  %405 = load i64, i64* %17, align 8
  %406 = icmp slt i64 %404, %405
  br i1 %406, label %407, label %418

407:                                              ; preds = %403
  %408 = load i64, i64* %9, align 8
  %409 = trunc i64 %408 to i16
  %410 = load i64, i64* %7, align 8
  %411 = getelementptr inbounds [0 x i16], [0 x i16]* bitcast ([65536 x i16]* @prev to [0 x i16]*), i64 0, i64 %410
  store i16 %409, i16* %411, align 2
  %412 = load i32, i32* %8, align 4
  %413 = trunc i32 %412 to i8
  %414 = load i64, i64* %7, align 8
  %415 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %414
  store i8 %413, i8* %415, align 1
  %416 = load i64, i64* %7, align 8
  %417 = add nsw i64 %416, 1
  store i64 %417, i64* %15, align 8
  br label %418

418:                                              ; preds = %407, %403
  %419 = load i64, i64* %10, align 8
  store i64 %419, i64* %9, align 8
  br label %173, !llvm.loop !157

420:                                              ; preds = %173
  br label %421

421:                                              ; preds = %420
  %422 = load i32, i32* %19, align 4
  %423 = icmp ne i32 %422, 0
  br i1 %423, label %98, label %424, !llvm.loop !160

424:                                              ; preds = %421
  %425 = load i32, i32* %13, align 4
  %426 = icmp sgt i32 %425, 0
  br i1 %426, label %427, label %430

427:                                              ; preds = %424
  %428 = load i32, i32* %5, align 4
  %429 = load i32, i32* %13, align 4
  call void @write_buf(i32 %428, i8* getelementptr inbounds ([264192 x i8], [264192 x i8]* @outbuf, i64 0, i64 0), i32 %429)
  br label %430

430:                                              ; preds = %427, %424
  store i32 0, i32* %3, align 4
  br label %431

431:                                              ; preds = %430, %66
  %432 = load i32, i32* %3, align 4
  ret i32 %432
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @unpack(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %10 = load i32, i32* %3, align 4
  store i32 %10, i32* @ifd, align 4
  %11 = load i32, i32* %4, align 4
  store i32 %11, i32* @ofd, align 4
  call void @read_tree()
  call void @build_tree.165()
  store i32 0, i32* @valid, align 4
  store i64 0, i64* @bitbuf.166, align 8
  %12 = load i32, i32* @peek_bits, align 4
  %13 = shl i32 1, %12
  %14 = sub nsw i32 %13, 1
  store i32 %14, i32* %8, align 4
  %15 = load i32, i32* @max_len, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = sub nsw i32 %18, 1
  store i32 %19, i32* %6, align 4
  br label %20

20:                                               ; preds = %123, %2
  br label %21

21:                                               ; preds = %25, %20
  %22 = load i32, i32* @valid, align 4
  %23 = load i32, i32* @peek_bits, align 4
  %24 = icmp slt i32 %22, %23
  br i1 %24, label %25, label %33

25:                                               ; preds = %21
  %26 = load i64, i64* @bitbuf.166, align 8
  %27 = shl i64 %26, 8
  %28 = call zeroext i8 @read_byte()
  %29 = zext i8 %28 to i64
  %30 = or i64 %27, %29
  store i64 %30, i64* @bitbuf.166, align 8
  %31 = load i32, i32* @valid, align 4
  %32 = add nsw i32 %31, 8
  store i32 %32, i32* @valid, align 4
  br label %21, !llvm.loop !161

33:                                               ; preds = %21
  %34 = load i64, i64* @bitbuf.166, align 8
  %35 = load i32, i32* @valid, align 4
  %36 = load i32, i32* @peek_bits, align 4
  %37 = sub nsw i32 %35, %36
  %38 = zext i32 %37 to i64
  %39 = lshr i64 %34, %38
  %40 = load i32, i32* %8, align 4
  %41 = zext i32 %40 to i64
  %42 = and i64 %39, %41
  %43 = trunc i64 %42 to i32
  store i32 %43, i32* %7, align 4
  %44 = load i32, i32* %7, align 4
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  store i32 %48, i32* %5, align 4
  %49 = load i32, i32* %5, align 4
  %50 = icmp sgt i32 %49, 0
  br i1 %50, label %51, label %57

51:                                               ; preds = %33
  %52 = load i32, i32* @peek_bits, align 4
  %53 = load i32, i32* %5, align 4
  %54 = sub nsw i32 %52, %53
  %55 = load i32, i32* %7, align 4
  %56 = lshr i32 %55, %54
  store i32 %56, i32* %7, align 4
  br label %97

57:                                               ; preds = %33
  %58 = load i32, i32* %8, align 4
  %59 = zext i32 %58 to i64
  store i64 %59, i64* %9, align 8
  %60 = load i32, i32* @peek_bits, align 4
  store i32 %60, i32* %5, align 4
  br label %61

61:                                               ; preds = %86, %57
  %62 = load i32, i32* %7, align 4
  %63 = load i32, i32* %5, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [26 x i32], [26 x i32]* @parents, i64 0, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = icmp ult i32 %62, %66
  br i1 %67, label %68, label %96

68:                                               ; preds = %61
  %69 = load i32, i32* %5, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %5, align 4
  %71 = load i64, i64* %9, align 8
  %72 = shl i64 %71, 1
  %73 = add i64 %72, 1
  store i64 %73, i64* %9, align 8
  br label %74

74:                                               ; preds = %78, %68
  %75 = load i32, i32* @valid, align 4
  %76 = load i32, i32* %5, align 4
  %77 = icmp slt i32 %75, %76
  br i1 %77, label %78, label %86

78:                                               ; preds = %74
  %79 = load i64, i64* @bitbuf.166, align 8
  %80 = shl i64 %79, 8
  %81 = call zeroext i8 @read_byte()
  %82 = zext i8 %81 to i64
  %83 = or i64 %80, %82
  store i64 %83, i64* @bitbuf.166, align 8
  %84 = load i32, i32* @valid, align 4
  %85 = add nsw i32 %84, 8
  store i32 %85, i32* @valid, align 4
  br label %74, !llvm.loop !162

86:                                               ; preds = %74
  %87 = load i64, i64* @bitbuf.166, align 8
  %88 = load i32, i32* @valid, align 4
  %89 = load i32, i32* %5, align 4
  %90 = sub nsw i32 %88, %89
  %91 = zext i32 %90 to i64
  %92 = lshr i64 %87, %91
  %93 = load i64, i64* %9, align 8
  %94 = and i64 %92, %93
  %95 = trunc i64 %94 to i32
  store i32 %95, i32* %7, align 4
  br label %61, !llvm.loop !163

96:                                               ; preds = %61
  br label %97

97:                                               ; preds = %96, %51
  %98 = load i32, i32* %7, align 4
  %99 = load i32, i32* %6, align 4
  %100 = icmp eq i32 %98, %99
  br i1 %100, label %101, label %106

101:                                              ; preds = %97
  %102 = load i32, i32* %5, align 4
  %103 = load i32, i32* @max_len, align 4
  %104 = icmp eq i32 %102, %103
  br i1 %104, label %105, label %106

105:                                              ; preds = %101
  br label %127

106:                                              ; preds = %101, %97
  %107 = load i32, i32* %7, align 4
  %108 = load i32, i32* %5, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [26 x i32], [26 x i32]* @lit_base, i64 0, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = add i32 %107, %111
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds [256 x i8], [256 x i8]* @literal, i64 0, i64 %113
  %115 = load i8, i8* %114, align 1
  %116 = load i32, i32* @outcnt, align 4
  %117 = add i32 %116, 1
  store i32 %117, i32* @outcnt, align 4
  %118 = zext i32 %116 to i64
  %119 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %118
  store i8 %115, i8* %119, align 1
  %120 = load i32, i32* @outcnt, align 4
  %121 = icmp eq i32 %120, 32768
  br i1 %121, label %122, label %123

122:                                              ; preds = %106
  call void @flush_window()
  br label %123

123:                                              ; preds = %122, %106
  %124 = load i32, i32* %5, align 4
  %125 = load i32, i32* @valid, align 4
  %126 = sub nsw i32 %125, %124
  store i32 %126, i32* @valid, align 4
  br label %20

127:                                              ; preds = %105
  call void @flush_window()
  %128 = load i64, i64* @orig_len, align 8
  %129 = load i64, i64* @bytes_out, align 8
  %130 = and i64 %129, 4294967295
  %131 = icmp ne i64 %128, %130
  br i1 %131, label %132, label %133

132:                                              ; preds = %127
  call void @gzip_error(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.167, i64 0, i64 0)) #23
  unreachable

133:                                              ; preds = %127
  ret i32 0
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @read_tree() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 1, i32* %4, align 4
  store i64 0, i64* @orig_len, align 8
  store i32 1, i32* %3, align 4
  br label %5

5:                                                ; preds = %14, %0
  %6 = load i32, i32* %3, align 4
  %7 = icmp sle i32 %6, 4
  br i1 %7, label %8, label %17

8:                                                ; preds = %5
  %9 = load i64, i64* @orig_len, align 8
  %10 = shl i64 %9, 8
  %11 = call zeroext i8 @read_byte()
  %12 = zext i8 %11 to i64
  %13 = or i64 %10, %12
  store i64 %13, i64* @orig_len, align 8
  br label %14

14:                                               ; preds = %8
  %15 = load i32, i32* %3, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %3, align 4
  br label %5, !llvm.loop !164

17:                                               ; preds = %5
  %18 = call zeroext i8 @read_byte()
  %19 = zext i8 %18 to i32
  store i32 %19, i32* @max_len, align 4
  %20 = load i32, i32* @max_len, align 4
  %21 = icmp slt i32 0, %20
  br i1 %21, label %22, label %25

22:                                               ; preds = %17
  %23 = load i32, i32* @max_len, align 4
  %24 = icmp sle i32 %23, 25
  br i1 %24, label %26, label %25

25:                                               ; preds = %22, %17
  call void @gzip_error(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1.170, i64 0, i64 0)) #23
  unreachable

26:                                               ; preds = %22
  store i32 0, i32* %3, align 4
  store i32 1, i32* %1, align 4
  br label %27

27:                                               ; preds = %65, %26
  %28 = load i32, i32* %1, align 4
  %29 = load i32, i32* @max_len, align 4
  %30 = icmp sle i32 %28, %29
  br i1 %30, label %31, label %68

31:                                               ; preds = %27
  %32 = call zeroext i8 @read_byte()
  %33 = zext i8 %32 to i32
  %34 = load i32, i32* %1, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %35
  store i32 %33, i32* %36, align 4
  %37 = load i32, i32* %4, align 4
  %38 = load i32, i32* %1, align 4
  %39 = load i32, i32* @max_len, align 4
  %40 = icmp eq i32 %38, %39
  %41 = zext i1 %40 to i32
  %42 = sub nsw i32 %37, %41
  %43 = load i32, i32* %1, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = icmp slt i32 %42, %46
  br i1 %47, label %48, label %49

48:                                               ; preds = %31
  call void @gzip_error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2.171, i64 0, i64 0)) #23
  unreachable

49:                                               ; preds = %31
  %50 = load i32, i32* %4, align 4
  %51 = load i32, i32* %1, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = sub nsw i32 %50, %54
  %56 = add nsw i32 %55, 1
  %57 = mul nsw i32 %56, 2
  %58 = sub nsw i32 %57, 1
  store i32 %58, i32* %4, align 4
  %59 = load i32, i32* %1, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = load i32, i32* %3, align 4
  %64 = add nsw i32 %63, %62
  store i32 %64, i32* %3, align 4
  br label %65

65:                                               ; preds = %49
  %66 = load i32, i32* %1, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %1, align 4
  br label %27, !llvm.loop !165

68:                                               ; preds = %27
  %69 = load i32, i32* %3, align 4
  %70 = icmp sle i32 256, %69
  br i1 %70, label %71, label %72

71:                                               ; preds = %68
  call void @gzip_error(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2.171, i64 0, i64 0)) #23
  unreachable

72:                                               ; preds = %68
  %73 = load i32, i32* @max_len, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %75, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %1, align 4
  br label %78

78:                                               ; preds = %104, %72
  %79 = load i32, i32* %1, align 4
  %80 = load i32, i32* @max_len, align 4
  %81 = icmp sle i32 %79, %80
  br i1 %81, label %82, label %107

82:                                               ; preds = %78
  %83 = load i32, i32* %2, align 4
  %84 = load i32, i32* %1, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [26 x i32], [26 x i32]* @lit_base, i64 0, i64 %85
  store i32 %83, i32* %86, align 4
  %87 = load i32, i32* %1, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %88
  %90 = load i32, i32* %89, align 4
  store i32 %90, i32* %3, align 4
  br label %91

91:                                               ; preds = %100, %82
  %92 = load i32, i32* %3, align 4
  %93 = icmp sgt i32 %92, 0
  br i1 %93, label %94, label %103

94:                                               ; preds = %91
  %95 = call zeroext i8 @read_byte()
  %96 = load i32, i32* %2, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %2, align 4
  %98 = sext i32 %96 to i64
  %99 = getelementptr inbounds [256 x i8], [256 x i8]* @literal, i64 0, i64 %98
  store i8 %95, i8* %99, align 1
  br label %100

100:                                              ; preds = %94
  %101 = load i32, i32* %3, align 4
  %102 = add nsw i32 %101, -1
  store i32 %102, i32* %3, align 4
  br label %91, !llvm.loop !166

103:                                              ; preds = %91
  br label %104

104:                                              ; preds = %103
  %105 = load i32, i32* %1, align 4
  %106 = add nsw i32 %105, 1
  store i32 %106, i32* %1, align 4
  br label %78, !llvm.loop !167

107:                                              ; preds = %78
  %108 = load i32, i32* @max_len, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %110, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @build_tree.165() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = load i32, i32* @max_len, align 4
  store i32 %5, i32* %2, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %2, align 4
  %8 = icmp sge i32 %7, 1
  br i1 %8, label %9, label %31

9:                                                ; preds = %6
  %10 = load i32, i32* %1, align 4
  %11 = ashr i32 %10, 1
  store i32 %11, i32* %1, align 4
  %12 = load i32, i32* %1, align 4
  %13 = load i32, i32* %2, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [26 x i32], [26 x i32]* @parents, i64 0, i64 %14
  store i32 %12, i32* %15, align 4
  %16 = load i32, i32* %1, align 4
  %17 = load i32, i32* %2, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [26 x i32], [26 x i32]* @lit_base, i64 0, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = sub nsw i32 %20, %16
  store i32 %21, i32* %19, align 4
  %22 = load i32, i32* %2, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %23
  %25 = load i32, i32* %24, align 4
  %26 = load i32, i32* %1, align 4
  %27 = add nsw i32 %26, %25
  store i32 %27, i32* %1, align 4
  br label %28

28:                                               ; preds = %9
  %29 = load i32, i32* %2, align 4
  %30 = add nsw i32 %29, -1
  store i32 %30, i32* %2, align 4
  br label %6, !llvm.loop !168

31:                                               ; preds = %6
  %32 = load i32, i32* %1, align 4
  %33 = ashr i32 %32, 1
  %34 = icmp ne i32 %33, 1
  br i1 %34, label %35, label %36

35:                                               ; preds = %31
  call void @gzip_error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3.169, i64 0, i64 0)) #23
  unreachable

36:                                               ; preds = %31
  %37 = load i32, i32* @max_len, align 4
  %38 = icmp sle i32 %37, 12
  br i1 %38, label %39, label %41

39:                                               ; preds = %36
  %40 = load i32, i32* @max_len, align 4
  br label %42

41:                                               ; preds = %36
  br label %42

42:                                               ; preds = %41, %39
  %43 = phi i32 [ %40, %39 ], [ 12, %41 ]
  store i32 %43, i32* @peek_bits, align 4
  %44 = load i32, i32* @peek_bits, align 4
  %45 = shl i32 1, %44
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %46
  store i8* %47, i8** %3, align 8
  store i32 1, i32* %2, align 4
  br label %48

48:                                               ; preds = %71, %42
  %49 = load i32, i32* %2, align 4
  %50 = load i32, i32* @peek_bits, align 4
  %51 = icmp sle i32 %49, %50
  br i1 %51, label %52, label %74

52:                                               ; preds = %48
  %53 = load i32, i32* %2, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [26 x i32], [26 x i32]* @leaves, i64 0, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = load i32, i32* @peek_bits, align 4
  %58 = load i32, i32* %2, align 4
  %59 = sub nsw i32 %57, %58
  %60 = shl i32 %56, %59
  store i32 %60, i32* %4, align 4
  br label %61

61:                                               ; preds = %65, %52
  %62 = load i32, i32* %4, align 4
  %63 = add nsw i32 %62, -1
  store i32 %63, i32* %4, align 4
  %64 = icmp ne i32 %62, 0
  br i1 %64, label %65, label %70

65:                                               ; preds = %61
  %66 = load i32, i32* %2, align 4
  %67 = trunc i32 %66 to i8
  %68 = load i8*, i8** %3, align 8
  %69 = getelementptr inbounds i8, i8* %68, i32 -1
  store i8* %69, i8** %3, align 8
  store i8 %67, i8* %69, align 1
  br label %61, !llvm.loop !169

70:                                               ; preds = %61
  br label %71

71:                                               ; preds = %70
  %72 = load i32, i32* %2, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %2, align 4
  br label %48, !llvm.loop !170

74:                                               ; preds = %48
  br label %75

75:                                               ; preds = %78, %74
  %76 = load i8*, i8** %3, align 8
  %77 = icmp ugt i8* %76, getelementptr inbounds ([264192 x i8], [264192 x i8]* @outbuf, i64 0, i64 0)
  br i1 %77, label %78, label %81

78:                                               ; preds = %75
  %79 = load i8*, i8** %3, align 8
  %80 = getelementptr inbounds i8, i8* %79, i32 -1
  store i8* %80, i8** %3, align 8
  store i8 0, i8* %80, align 1
  br label %75, !llvm.loop !171

81:                                               ; preds = %75
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal zeroext i8 @read_byte() #0 {
  %1 = alloca i32, align 4
  %2 = load i32, i32* @inptr, align 4
  %3 = load i32, i32* @insize, align 4
  %4 = icmp ult i32 %2, %3
  br i1 %4, label %5, label %12

5:                                                ; preds = %0
  %6 = load i32, i32* @inptr, align 4
  %7 = add i32 %6, 1
  store i32 %7, i32* @inptr, align 4
  %8 = zext i32 %6 to i64
  %9 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  br label %14

12:                                               ; preds = %0
  %13 = call i32 @fill_inbuf(i32 0)
  br label %14

14:                                               ; preds = %12, %5
  %15 = phi i32 [ %11, %5 ], [ %13, %12 ]
  store i32 %15, i32* %1, align 4
  %16 = load i32, i32* %1, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  call void @gzip_error(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.4.168, i64 0, i64 0)) #23
  unreachable

19:                                               ; preds = %14
  %20 = load i32, i32* %1, align 4
  %21 = trunc i32 %20 to i8
  ret i8 %21
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @check_zipfile(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  %5 = load i32, i32* @inptr, align 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 0), i64 %6
  store i8* %7, i8** %4, align 8
  %8 = load i32, i32* %3, align 4
  store i32 %8, i32* @ifd, align 4
  %9 = load i8*, i8** %4, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 26
  %11 = getelementptr inbounds i8, i8* %10, i64 0
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i16
  %14 = zext i16 %13 to i32
  %15 = load i8*, i8** %4, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 26
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i16
  %20 = zext i16 %19 to i32
  %21 = shl i32 %20, 8
  %22 = or i32 %14, %21
  %23 = add nsw i32 30, %22
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 28
  %26 = getelementptr inbounds i8, i8* %25, i64 0
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i16
  %29 = zext i16 %28 to i32
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 28
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i16
  %35 = zext i16 %34 to i32
  %36 = shl i32 %35, 8
  %37 = or i32 %29, %36
  %38 = add nsw i32 %23, %37
  %39 = load i32, i32* @inptr, align 4
  %40 = add i32 %39, %38
  store i32 %40, i32* @inptr, align 4
  %41 = load i32, i32* @inptr, align 4
  %42 = load i32, i32* @insize, align 4
  %43 = icmp ugt i32 %41, %42
  br i1 %43, label %76, label %44

44:                                               ; preds = %1
  %45 = load i8*, i8** %4, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 0
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i16
  %49 = zext i16 %48 to i32
  %50 = load i8*, i8** %4, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 1
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  %54 = zext i16 %53 to i32
  %55 = shl i32 %54, 8
  %56 = or i32 %49, %55
  %57 = sext i32 %56 to i64
  %58 = load i8*, i8** %4, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 2
  %60 = getelementptr inbounds i8, i8* %59, i64 0
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i16
  %63 = zext i16 %62 to i32
  %64 = load i8*, i8** %4, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 2
  %66 = getelementptr inbounds i8, i8* %65, i64 1
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i16
  %69 = zext i16 %68 to i32
  %70 = shl i32 %69, 8
  %71 = or i32 %63, %70
  %72 = sext i32 %71 to i64
  %73 = shl i64 %72, 16
  %74 = or i64 %57, %73
  %75 = icmp ne i64 %74, 67324752
  br i1 %75, label %76, label %80

76:                                               ; preds = %44, %1
  %77 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %78 = load i8*, i8** @program_name, align 8
  %79 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %77, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.176, i64 0, i64 0), i8* %78, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  store i32 1, i32* @exit_code, align 4
  store i32 1, i32* %2, align 4
  br label %113

80:                                               ; preds = %44
  %81 = load i8*, i8** %4, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 8
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  store i32 %84, i32* @method, align 4
  %85 = load i32, i32* @method, align 4
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %94

87:                                               ; preds = %80
  %88 = load i32, i32* @method, align 4
  %89 = icmp ne i32 %88, 8
  br i1 %89, label %90, label %94

90:                                               ; preds = %87
  %91 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %92 = load i8*, i8** @program_name, align 8
  %93 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %91, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1.177, i64 0, i64 0), i8* %92, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  store i32 1, i32* @exit_code, align 4
  store i32 1, i32* %2, align 4
  br label %113

94:                                               ; preds = %87, %80
  %95 = load i8*, i8** %4, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 6
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = and i32 %98, 1
  store i32 %99, i32* @decrypt, align 4
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %101, label %105

101:                                              ; preds = %94
  %102 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %103 = load i8*, i8** @program_name, align 8
  %104 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %102, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2.178, i64 0, i64 0), i8* %103, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  store i32 1, i32* @exit_code, align 4
  store i32 1, i32* %2, align 4
  br label %113

105:                                              ; preds = %94
  %106 = load i8*, i8** %4, align 8
  %107 = getelementptr inbounds i8, i8* %106, i64 6
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i32
  %110 = and i32 %109, 8
  %111 = icmp ne i32 %110, 0
  %112 = zext i1 %111 to i32
  store i32 %112, i32* @ext_header, align 4
  store i32 1, i32* @pkzip, align 4
  store i32 0, i32* %2, align 4
  br label %113

113:                                              ; preds = %105, %101, %90, %76
  %114 = load i32, i32* %2, align 4
  ret i32 %114
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @unzip(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca [16 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca i8, align 1
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i64 0, i64* %6, align 8
  store i64 0, i64* %7, align 8
  store i32 0, i32* %10, align 4
  %14 = load i32, i32* %4, align 4
  store i32 %14, i32* @ifd, align 4
  %15 = load i32, i32* %5, align 4
  store i32 %15, i32* @ofd, align 4
  %16 = call i64 @updcrc(i8* null, i32 0)
  %17 = load i32, i32* @pkzip, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %63

19:                                               ; preds = %2
  %20 = load i32, i32* @ext_header, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %63, label %22

22:                                               ; preds = %19
  %23 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 14), align 1
  %24 = zext i8 %23 to i16
  %25 = zext i16 %24 to i32
  %26 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 15), align 1
  %27 = zext i8 %26 to i16
  %28 = zext i16 %27 to i32
  %29 = shl i32 %28, 8
  %30 = or i32 %25, %29
  %31 = sext i32 %30 to i64
  %32 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 16), align 1
  %33 = zext i8 %32 to i16
  %34 = zext i16 %33 to i32
  %35 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 17), align 1
  %36 = zext i8 %35 to i16
  %37 = zext i16 %36 to i32
  %38 = shl i32 %37, 8
  %39 = or i32 %34, %38
  %40 = sext i32 %39 to i64
  %41 = shl i64 %40, 16
  %42 = or i64 %31, %41
  store i64 %42, i64* %6, align 8
  %43 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 22), align 1
  %44 = zext i8 %43 to i16
  %45 = zext i16 %44 to i32
  %46 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 23), align 1
  %47 = zext i8 %46 to i16
  %48 = zext i16 %47 to i32
  %49 = shl i32 %48, 8
  %50 = or i32 %45, %49
  %51 = sext i32 %50 to i64
  %52 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 24), align 1
  %53 = zext i8 %52 to i16
  %54 = zext i16 %53 to i32
  %55 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 25), align 1
  %56 = zext i8 %55 to i16
  %57 = zext i16 %56 to i32
  %58 = shl i32 %57, 8
  %59 = or i32 %54, %58
  %60 = sext i32 %59 to i64
  %61 = shl i64 %60, 16
  %62 = or i64 %51, %61
  store i64 %62, i64* %7, align 8
  br label %63

63:                                               ; preds = %22, %19, %2
  %64 = load i32, i32* @method, align 4
  %65 = icmp eq i32 %64, 8
  br i1 %65, label %66, label %77

66:                                               ; preds = %63
  %67 = call i32 @inflate()
  store i32 %67, i32* %11, align 4
  %68 = load i32, i32* %11, align 4
  %69 = icmp eq i32 %68, 3
  br i1 %69, label %70, label %71

70:                                               ; preds = %66
  call void @xalloc_die() #23
  unreachable

71:                                               ; preds = %66
  %72 = load i32, i32* %11, align 4
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  call void @gzip_error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3.181, i64 0, i64 0)) #23
  unreachable

75:                                               ; preds = %71
  br label %76

76:                                               ; preds = %75
  br label %189

77:                                               ; preds = %63
  %78 = load i32, i32* @pkzip, align 4
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %187

80:                                               ; preds = %77
  %81 = load i32, i32* @method, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %187

83:                                               ; preds = %80
  %84 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 22), align 1
  %85 = zext i8 %84 to i16
  %86 = zext i16 %85 to i32
  %87 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 23), align 1
  %88 = zext i8 %87 to i16
  %89 = zext i16 %88 to i32
  %90 = shl i32 %89, 8
  %91 = or i32 %86, %90
  %92 = sext i32 %91 to i64
  %93 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 24), align 1
  %94 = zext i8 %93 to i16
  %95 = zext i16 %94 to i32
  %96 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 25), align 1
  %97 = zext i8 %96 to i16
  %98 = zext i16 %97 to i32
  %99 = shl i32 %98, 8
  %100 = or i32 %95, %99
  %101 = sext i32 %100 to i64
  %102 = shl i64 %101, 16
  %103 = or i64 %92, %102
  store i64 %103, i64* %12, align 8
  %104 = load i64, i64* %12, align 8
  %105 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 18), align 1
  %106 = zext i8 %105 to i16
  %107 = zext i16 %106 to i32
  %108 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 19), align 1
  %109 = zext i8 %108 to i16
  %110 = zext i16 %109 to i32
  %111 = shl i32 %110, 8
  %112 = or i32 %107, %111
  %113 = sext i32 %112 to i64
  %114 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 20), align 1
  %115 = zext i8 %114 to i16
  %116 = zext i16 %115 to i32
  %117 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 21), align 1
  %118 = zext i8 %117 to i16
  %119 = zext i16 %118 to i32
  %120 = shl i32 %119, 8
  %121 = or i32 %116, %120
  %122 = sext i32 %121 to i64
  %123 = shl i64 %122, 16
  %124 = or i64 %113, %123
  %125 = load i32, i32* @decrypt, align 4
  %126 = icmp ne i32 %125, 0
  %127 = zext i1 %126 to i64
  %128 = select i1 %126, i32 12, i32 0
  %129 = sext i32 %128 to i64
  %130 = sub i64 %124, %129
  %131 = icmp ne i64 %104, %130
  br i1 %131, label %132, label %156

132:                                              ; preds = %83
  %133 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %134 = load i64, i64* %12, align 8
  %135 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 18), align 1
  %136 = zext i8 %135 to i16
  %137 = zext i16 %136 to i32
  %138 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 19), align 1
  %139 = zext i8 %138 to i16
  %140 = zext i16 %139 to i32
  %141 = shl i32 %140, 8
  %142 = or i32 %137, %141
  %143 = sext i32 %142 to i64
  %144 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 20), align 1
  %145 = zext i8 %144 to i16
  %146 = zext i16 %145 to i32
  %147 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 21), align 1
  %148 = zext i8 %147 to i16
  %149 = zext i16 %148 to i32
  %150 = shl i32 %149, 8
  %151 = or i32 %146, %150
  %152 = sext i32 %151 to i64
  %153 = shl i64 %152, 16
  %154 = or i64 %143, %153
  %155 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %133, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4.182, i64 0, i64 0), i64 %134, i64 %154)
  call void @gzip_error(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5.183, i64 0, i64 0)) #23
  unreachable

156:                                              ; preds = %83
  br label %157

157:                                              ; preds = %185, %156
  %158 = load i64, i64* %12, align 8
  %159 = add i64 %158, -1
  store i64 %159, i64* %12, align 8
  %160 = icmp ne i64 %158, 0
  br i1 %160, label %161, label %186

161:                                              ; preds = %157
  %162 = load i32, i32* @inptr, align 4
  %163 = load i32, i32* @insize, align 4
  %164 = icmp ult i32 %162, %163
  br i1 %164, label %165, label %172

165:                                              ; preds = %161
  %166 = load i32, i32* @inptr, align 4
  %167 = add i32 %166, 1
  store i32 %167, i32* @inptr, align 4
  %168 = zext i32 %166 to i64
  %169 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i32
  br label %174

172:                                              ; preds = %161
  %173 = call i32 @fill_inbuf(i32 0)
  br label %174

174:                                              ; preds = %172, %165
  %175 = phi i32 [ %171, %165 ], [ %173, %172 ]
  %176 = trunc i32 %175 to i8
  store i8 %176, i8* %13, align 1
  %177 = load i8, i8* %13, align 1
  %178 = load i32, i32* @outcnt, align 4
  %179 = add i32 %178, 1
  store i32 %179, i32* @outcnt, align 4
  %180 = zext i32 %178 to i64
  %181 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([65536 x i8]* @window to [0 x i8]*), i64 0, i64 %180
  store i8 %177, i8* %181, align 1
  %182 = load i32, i32* @outcnt, align 4
  %183 = icmp eq i32 %182, 32768
  br i1 %183, label %184, label %185

184:                                              ; preds = %174
  call void @flush_window()
  br label %185

185:                                              ; preds = %184, %174
  br label %157, !llvm.loop !172

186:                                              ; preds = %157
  call void @flush_window()
  br label %188

187:                                              ; preds = %80, %77
  call void @gzip_error(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6.184, i64 0, i64 0)) #23
  unreachable

188:                                              ; preds = %186
  br label %189

189:                                              ; preds = %188, %76
  %190 = load i32, i32* @pkzip, align 4
  %191 = icmp ne i32 %190, 0
  br i1 %191, label %281, label %192

192:                                              ; preds = %189
  store i32 0, i32* %8, align 4
  br label %193

193:                                              ; preds = %215, %192
  %194 = load i32, i32* %8, align 4
  %195 = icmp slt i32 %194, 8
  br i1 %195, label %196, label %218

196:                                              ; preds = %193
  %197 = load i32, i32* @inptr, align 4
  %198 = load i32, i32* @insize, align 4
  %199 = icmp ult i32 %197, %198
  br i1 %199, label %200, label %207

200:                                              ; preds = %196
  %201 = load i32, i32* @inptr, align 4
  %202 = add i32 %201, 1
  store i32 %202, i32* @inptr, align 4
  %203 = zext i32 %201 to i64
  %204 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %203
  %205 = load i8, i8* %204, align 1
  %206 = zext i8 %205 to i32
  br label %209

207:                                              ; preds = %196
  %208 = call i32 @fill_inbuf(i32 0)
  br label %209

209:                                              ; preds = %207, %200
  %210 = phi i32 [ %206, %200 ], [ %208, %207 ]
  %211 = trunc i32 %210 to i8
  %212 = load i32, i32* %8, align 4
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %213
  store i8 %211, i8* %214, align 1
  br label %215

215:                                              ; preds = %209
  %216 = load i32, i32* %8, align 4
  %217 = add nsw i32 %216, 1
  store i32 %217, i32* %8, align 4
  br label %193, !llvm.loop !173

218:                                              ; preds = %193
  %219 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %220 = load i8, i8* %219, align 16
  %221 = zext i8 %220 to i16
  %222 = zext i16 %221 to i32
  %223 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 1
  %224 = load i8, i8* %223, align 1
  %225 = zext i8 %224 to i16
  %226 = zext i16 %225 to i32
  %227 = shl i32 %226, 8
  %228 = or i32 %222, %227
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %231 = getelementptr inbounds i8, i8* %230, i64 2
  %232 = getelementptr inbounds i8, i8* %231, i64 0
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i16
  %235 = zext i16 %234 to i32
  %236 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %237 = getelementptr inbounds i8, i8* %236, i64 2
  %238 = getelementptr inbounds i8, i8* %237, i64 1
  %239 = load i8, i8* %238, align 1
  %240 = zext i8 %239 to i16
  %241 = zext i16 %240 to i32
  %242 = shl i32 %241, 8
  %243 = or i32 %235, %242
  %244 = sext i32 %243 to i64
  %245 = shl i64 %244, 16
  %246 = or i64 %229, %245
  store i64 %246, i64* %6, align 8
  %247 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %248 = getelementptr inbounds i8, i8* %247, i64 4
  %249 = getelementptr inbounds i8, i8* %248, i64 0
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i16
  %252 = zext i16 %251 to i32
  %253 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %254 = getelementptr inbounds i8, i8* %253, i64 4
  %255 = getelementptr inbounds i8, i8* %254, i64 1
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i16
  %258 = zext i16 %257 to i32
  %259 = shl i32 %258, 8
  %260 = or i32 %252, %259
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %263 = getelementptr inbounds i8, i8* %262, i64 4
  %264 = getelementptr inbounds i8, i8* %263, i64 2
  %265 = getelementptr inbounds i8, i8* %264, i64 0
  %266 = load i8, i8* %265, align 1
  %267 = zext i8 %266 to i16
  %268 = zext i16 %267 to i32
  %269 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %270 = getelementptr inbounds i8, i8* %269, i64 4
  %271 = getelementptr inbounds i8, i8* %270, i64 2
  %272 = getelementptr inbounds i8, i8* %271, i64 1
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i16
  %275 = zext i16 %274 to i32
  %276 = shl i32 %275, 8
  %277 = or i32 %268, %276
  %278 = sext i32 %277 to i64
  %279 = shl i64 %278, 16
  %280 = or i64 %261, %279
  store i64 %280, i64* %7, align 8
  br label %380

281:                                              ; preds = %189
  %282 = load i32, i32* @ext_header, align 4
  %283 = icmp ne i32 %282, 0
  br i1 %283, label %284, label %379

284:                                              ; preds = %281
  store i32 0, i32* %8, align 4
  br label %285

285:                                              ; preds = %307, %284
  %286 = load i32, i32* %8, align 4
  %287 = icmp slt i32 %286, 16
  br i1 %287, label %288, label %310

288:                                              ; preds = %285
  %289 = load i32, i32* @inptr, align 4
  %290 = load i32, i32* @insize, align 4
  %291 = icmp ult i32 %289, %290
  br i1 %291, label %292, label %299

292:                                              ; preds = %288
  %293 = load i32, i32* @inptr, align 4
  %294 = add i32 %293, 1
  store i32 %294, i32* @inptr, align 4
  %295 = zext i32 %293 to i64
  %296 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([262208 x i8]* @inbuf to [0 x i8]*), i64 0, i64 %295
  %297 = load i8, i8* %296, align 1
  %298 = zext i8 %297 to i32
  br label %301

299:                                              ; preds = %288
  %300 = call i32 @fill_inbuf(i32 0)
  br label %301

301:                                              ; preds = %299, %292
  %302 = phi i32 [ %298, %292 ], [ %300, %299 ]
  %303 = trunc i32 %302 to i8
  %304 = load i32, i32* %8, align 4
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 %305
  store i8 %303, i8* %306, align 1
  br label %307

307:                                              ; preds = %301
  %308 = load i32, i32* %8, align 4
  %309 = add nsw i32 %308, 1
  store i32 %309, i32* %8, align 4
  br label %285, !llvm.loop !174

310:                                              ; preds = %285
  %311 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %312 = getelementptr inbounds i8, i8* %311, i64 4
  %313 = getelementptr inbounds i8, i8* %312, i64 0
  %314 = load i8, i8* %313, align 1
  %315 = zext i8 %314 to i16
  %316 = zext i16 %315 to i32
  %317 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %318 = getelementptr inbounds i8, i8* %317, i64 4
  %319 = getelementptr inbounds i8, i8* %318, i64 1
  %320 = load i8, i8* %319, align 1
  %321 = zext i8 %320 to i16
  %322 = zext i16 %321 to i32
  %323 = shl i32 %322, 8
  %324 = or i32 %316, %323
  %325 = sext i32 %324 to i64
  %326 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %327 = getelementptr inbounds i8, i8* %326, i64 4
  %328 = getelementptr inbounds i8, i8* %327, i64 2
  %329 = getelementptr inbounds i8, i8* %328, i64 0
  %330 = load i8, i8* %329, align 1
  %331 = zext i8 %330 to i16
  %332 = zext i16 %331 to i32
  %333 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %334 = getelementptr inbounds i8, i8* %333, i64 4
  %335 = getelementptr inbounds i8, i8* %334, i64 2
  %336 = getelementptr inbounds i8, i8* %335, i64 1
  %337 = load i8, i8* %336, align 1
  %338 = zext i8 %337 to i16
  %339 = zext i16 %338 to i32
  %340 = shl i32 %339, 8
  %341 = or i32 %332, %340
  %342 = sext i32 %341 to i64
  %343 = shl i64 %342, 16
  %344 = or i64 %325, %343
  store i64 %344, i64* %6, align 8
  %345 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %346 = getelementptr inbounds i8, i8* %345, i64 12
  %347 = getelementptr inbounds i8, i8* %346, i64 0
  %348 = load i8, i8* %347, align 1
  %349 = zext i8 %348 to i16
  %350 = zext i16 %349 to i32
  %351 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %352 = getelementptr inbounds i8, i8* %351, i64 12
  %353 = getelementptr inbounds i8, i8* %352, i64 1
  %354 = load i8, i8* %353, align 1
  %355 = zext i8 %354 to i16
  %356 = zext i16 %355 to i32
  %357 = shl i32 %356, 8
  %358 = or i32 %350, %357
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %361 = getelementptr inbounds i8, i8* %360, i64 12
  %362 = getelementptr inbounds i8, i8* %361, i64 2
  %363 = getelementptr inbounds i8, i8* %362, i64 0
  %364 = load i8, i8* %363, align 1
  %365 = zext i8 %364 to i16
  %366 = zext i16 %365 to i32
  %367 = getelementptr inbounds [16 x i8], [16 x i8]* %9, i64 0, i64 0
  %368 = getelementptr inbounds i8, i8* %367, i64 12
  %369 = getelementptr inbounds i8, i8* %368, i64 2
  %370 = getelementptr inbounds i8, i8* %369, i64 1
  %371 = load i8, i8* %370, align 1
  %372 = zext i8 %371 to i16
  %373 = zext i16 %372 to i32
  %374 = shl i32 %373, 8
  %375 = or i32 %366, %374
  %376 = sext i32 %375 to i64
  %377 = shl i64 %376, 16
  %378 = or i64 %359, %377
  store i64 %378, i64* %7, align 8
  br label %379

379:                                              ; preds = %310, %281
  br label %380

380:                                              ; preds = %379, %218
  %381 = load i64, i64* %6, align 8
  %382 = call i64 @updcrc(i8* getelementptr inbounds ([264192 x i8], [264192 x i8]* @outbuf, i64 0, i64 0), i32 0)
  %383 = icmp ne i64 %381, %382
  br i1 %383, label %384, label %388

384:                                              ; preds = %380
  %385 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %386 = load i8*, i8** @program_name, align 8
  %387 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %385, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.7.185, i64 0, i64 0), i8* %386, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  store i32 1, i32* %10, align 4
  br label %388

388:                                              ; preds = %384, %380
  %389 = load i64, i64* %7, align 8
  %390 = load i64, i64* @bytes_out, align 8
  %391 = and i64 %390, 4294967295
  %392 = icmp ne i64 %389, %391
  br i1 %392, label %393, label %397

393:                                              ; preds = %388
  %394 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %395 = load i8*, i8** @program_name, align 8
  %396 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %394, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.8.186, i64 0, i64 0), i8* %395, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  store i32 1, i32* %10, align 4
  br label %397

397:                                              ; preds = %393, %388
  %398 = load i32, i32* @pkzip, align 4
  %399 = icmp ne i32 %398, 0
  br i1 %399, label %400, label %465

400:                                              ; preds = %397
  %401 = load i32, i32* @inptr, align 4
  %402 = add i32 %401, 4
  %403 = load i32, i32* @insize, align 4
  %404 = icmp ult i32 %402, %403
  br i1 %404, label %405, label %465

405:                                              ; preds = %400
  %406 = load i32, i32* @inptr, align 4
  %407 = zext i32 %406 to i64
  %408 = getelementptr inbounds i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 0), i64 %407
  %409 = getelementptr inbounds i8, i8* %408, i64 0
  %410 = load i8, i8* %409, align 1
  %411 = zext i8 %410 to i16
  %412 = zext i16 %411 to i32
  %413 = load i32, i32* @inptr, align 4
  %414 = zext i32 %413 to i64
  %415 = getelementptr inbounds i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 0), i64 %414
  %416 = getelementptr inbounds i8, i8* %415, i64 1
  %417 = load i8, i8* %416, align 1
  %418 = zext i8 %417 to i16
  %419 = zext i16 %418 to i32
  %420 = shl i32 %419, 8
  %421 = or i32 %412, %420
  %422 = sext i32 %421 to i64
  %423 = load i32, i32* @inptr, align 4
  %424 = zext i32 %423 to i64
  %425 = getelementptr inbounds i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 0), i64 %424
  %426 = getelementptr inbounds i8, i8* %425, i64 2
  %427 = getelementptr inbounds i8, i8* %426, i64 0
  %428 = load i8, i8* %427, align 1
  %429 = zext i8 %428 to i16
  %430 = zext i16 %429 to i32
  %431 = load i32, i32* @inptr, align 4
  %432 = zext i32 %431 to i64
  %433 = getelementptr inbounds i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 0), i64 %432
  %434 = getelementptr inbounds i8, i8* %433, i64 2
  %435 = getelementptr inbounds i8, i8* %434, i64 1
  %436 = load i8, i8* %435, align 1
  %437 = zext i8 %436 to i16
  %438 = zext i16 %437 to i32
  %439 = shl i32 %438, 8
  %440 = or i32 %430, %439
  %441 = sext i32 %440 to i64
  %442 = shl i64 %441, 16
  %443 = or i64 %422, %442
  %444 = icmp eq i64 %443, 67324752
  br i1 %444, label %445, label %465

445:                                              ; preds = %405
  %446 = load i32, i32* @to_stdout, align 4
  %447 = icmp ne i32 %446, 0
  br i1 %447, label %448, label %460

448:                                              ; preds = %445
  %449 = load i32, i32* @quiet, align 4
  %450 = icmp ne i32 %449, 0
  br i1 %450, label %455, label %451

451:                                              ; preds = %448
  %452 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %453 = load i8*, i8** @program_name, align 8
  %454 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %452, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.9.187, i64 0, i64 0), i8* %453, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %455

455:                                              ; preds = %451, %448
  %456 = load i32, i32* @exit_code, align 4
  %457 = icmp eq i32 %456, 0
  br i1 %457, label %458, label %459

458:                                              ; preds = %455
  store i32 2, i32* @exit_code, align 4
  br label %459

459:                                              ; preds = %458, %455
  br label %464

460:                                              ; preds = %445
  %461 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %462 = load i8*, i8** @program_name, align 8
  %463 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %461, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.10.188, i64 0, i64 0), i8* %462, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  store i32 1, i32* %10, align 4
  br label %464

464:                                              ; preds = %460, %459
  br label %465

465:                                              ; preds = %464, %405, %400, %397
  store i32 0, i32* @pkzip, align 4
  store i32 0, i32* @ext_header, align 4
  %466 = load i64, i64* %6, align 8
  store i64 %466, i64* @unzip_crc, align 8
  %467 = load i32, i32* %10, align 4
  %468 = icmp eq i32 %467, 0
  br i1 %468, label %469, label %470

469:                                              ; preds = %465
  store i32 0, i32* %3, align 4
  br label %476

470:                                              ; preds = %465
  store i32 1, i32* @exit_code, align 4
  %471 = load i32, i32* @test, align 4
  %472 = icmp ne i32 %471, 0
  br i1 %472, label %474, label %473

473:                                              ; preds = %470
  call void @abort_gzip() #23
  unreachable

474:                                              ; preds = %470
  %475 = load i32, i32* %10, align 4
  store i32 %475, i32* %3, align 4
  br label %476

476:                                              ; preds = %474, %469
  %477 = load i32, i32* %3, align 4
  ret i32 %477
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @copy(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %6 = call i32* @__error()
  store i32 0, i32* %6, align 4
  br label %7

7:                                                ; preds = %24, %2
  %8 = load i32, i32* @insize, align 4
  %9 = load i32, i32* @inptr, align 4
  %10 = icmp ugt i32 %8, %9
  br i1 %10, label %11, label %30

11:                                               ; preds = %7
  %12 = load i32, i32* %4, align 4
  %13 = load i32, i32* @inptr, align 4
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 0), i64 %14
  %16 = load i32, i32* @insize, align 4
  %17 = load i32, i32* @inptr, align 4
  %18 = sub i32 %16, %17
  call void @write_buf(i32 %12, i8* %15, i32 %18)
  %19 = load i32, i32* %3, align 4
  %20 = call i32 @read_buffer(i32 %19, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 0), i32 262144)
  store i32 %20, i32* %5, align 4
  %21 = load i32, i32* %5, align 4
  %22 = icmp eq i32 %21, -1
  br i1 %22, label %23, label %24

23:                                               ; preds = %11
  call void @read_error() #23
  unreachable

24:                                               ; preds = %11
  %25 = load i32, i32* %5, align 4
  %26 = sext i32 %25 to i64
  %27 = load i64, i64* @bytes_in, align 8
  %28 = add nsw i64 %27, %26
  store i64 %28, i64* @bytes_in, align 8
  %29 = load i32, i32* %5, align 4
  store i32 %29, i32* @insize, align 4
  store i32 0, i32* @inptr, align 4
  br label %7, !llvm.loop !175

30:                                               ; preds = %7
  ret i32 0
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @write_buf(i32 %0, i8* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %8 = load i32, i32* %6, align 4
  %9 = zext i32 %8 to i64
  %10 = load i64, i64* @bytes_out, align 8
  %11 = add nsw i64 %10, %9
  store i64 %11, i64* @bytes_out, align 8
  %12 = load i32, i32* @test, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %3
  br label %35

15:                                               ; preds = %3
  br label %16

16:                                               ; preds = %27, %15
  %17 = load i32, i32* %4, align 4
  %18 = load i8*, i8** %5, align 8
  %19 = load i32, i32* %6, align 4
  %20 = call i32 @write_buffer(i32 %17, i8* %18, i32 %19)
  store i32 %20, i32* %7, align 4
  %21 = load i32, i32* %6, align 4
  %22 = icmp ne i32 %20, %21
  br i1 %22, label %23, label %35

23:                                               ; preds = %16
  %24 = load i32, i32* %7, align 4
  %25 = icmp eq i32 %24, -1
  br i1 %25, label %26, label %27

26:                                               ; preds = %23
  call void @write_error() #23
  unreachable

27:                                               ; preds = %23
  %28 = load i32, i32* %7, align 4
  %29 = load i32, i32* %6, align 4
  %30 = sub i32 %29, %28
  store i32 %30, i32* %6, align 4
  %31 = load i8*, i8** %5, align 8
  %32 = load i32, i32* %7, align 4
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %31, i64 %33
  store i8* %34, i8** %5, align 8
  br label %16, !llvm.loop !176

35:                                               ; preds = %16, %14
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @read_buffer(i32 %0, i8* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp ult i32 2147483647, %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %3
  store i32 2147483647, i32* %6, align 4
  br label %12

12:                                               ; preds = %11, %3
  %13 = load i32, i32* %4, align 4
  %14 = load i8*, i8** %5, align 8
  %15 = load i32, i32* %6, align 4
  %16 = zext i32 %15 to i64
  %17 = call i64 @"\01_read"(i32 %13, i8* %14, i64 %16)
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %7, align 4
  %19 = load i32, i32* %7, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %52

21:                                               ; preds = %12
  %22 = call i32* @__error()
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 35
  br i1 %24, label %25, label %52

25:                                               ; preds = %21
  %26 = load i32, i32* %4, align 4
  %27 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %26, i32 3)
  store i32 %27, i32* %8, align 4
  %28 = load i32, i32* %8, align 4
  %29 = icmp sle i32 0, %28
  br i1 %29, label %30, label %51

30:                                               ; preds = %25
  %31 = load i32, i32* %8, align 4
  %32 = and i32 %31, 4
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %36, label %34

34:                                               ; preds = %30
  %35 = call i32* @__error()
  store i32 35, i32* %35, align 4
  br label %50

36:                                               ; preds = %30
  %37 = load i32, i32* %4, align 4
  %38 = load i32, i32* %8, align 4
  %39 = and i32 %38, -5
  %40 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %37, i32 4, i32 %39)
  %41 = icmp ne i32 %40, -1
  br i1 %41, label %42, label %49

42:                                               ; preds = %36
  %43 = load i32, i32* %4, align 4
  %44 = load i8*, i8** %5, align 8
  %45 = load i32, i32* %6, align 4
  %46 = zext i32 %45 to i64
  %47 = call i64 @"\01_read"(i32 %43, i8* %44, i64 %46)
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %7, align 4
  br label %49

49:                                               ; preds = %42, %36
  br label %50

50:                                               ; preds = %49, %34
  br label %51

51:                                               ; preds = %50, %25
  br label %52

52:                                               ; preds = %51, %21, %12
  %53 = load i32, i32* %7, align 4
  ret i32 %53
}

; Function Attrs: noinline noreturn nounwind optnone ssp uwtable
define void @read_error() #5 {
  %1 = alloca i32, align 4
  %2 = call i32* @__error()
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %1, align 4
  %4 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %5 = load i8*, i8** @program_name, align 8
  %6 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.197, i64 0, i64 0), i8* %5)
  %7 = load i32, i32* %1, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %0
  %10 = load i32, i32* %1, align 4
  %11 = call i32* @__error()
  store i32 %10, i32* %11, align 4
  call void @rpl_perror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %15

12:                                               ; preds = %0
  %13 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %14 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %13, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5.198, i64 0, i64 0), i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %15

15:                                               ; preds = %12, %9
  call void @abort_gzip() #23
  unreachable
}

declare i64 @"\01_read"(i32, i8*, i64) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @write_buffer(i32 %0, i8* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 2147483647, %7
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  store i32 2147483647, i32* %6, align 4
  br label %10

10:                                               ; preds = %9, %3
  %11 = load i32, i32* %4, align 4
  %12 = load i8*, i8** %5, align 8
  %13 = load i32, i32* %6, align 4
  %14 = zext i32 %13 to i64
  %15 = call i64 @"\01_write"(i32 %11, i8* %12, i64 %14)
  %16 = trunc i64 %15 to i32
  ret i32 %16
}

; Function Attrs: noinline noreturn nounwind optnone ssp uwtable
define void @write_error() #5 {
  %1 = alloca i32, align 4
  %2 = call i32* @__error()
  %3 = load i32, i32* %2, align 4
  store i32 %3, i32* %1, align 4
  %4 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %5 = load i8*, i8** @program_name, align 8
  %6 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.197, i64 0, i64 0), i8* %5)
  %7 = load i32, i32* %1, align 4
  %8 = call i32* @__error()
  store i32 %7, i32* %8, align 4
  call void @rpl_perror(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ofname, i64 0, i64 0))
  call void @abort_gzip() #23
  unreachable
}

declare i64 @"\01_write"(i32, i8*, i64) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define i64 @updcrc(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %6 = load i8*, i8** %3, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  store i64 4294967295, i64* %5, align 8
  br label %35

9:                                                ; preds = %2
  %10 = load i64, i64* @crc, align 8
  store i64 %10, i64* %5, align 8
  %11 = load i32, i32* %4, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %34

13:                                               ; preds = %9
  br label %14

14:                                               ; preds = %29, %13
  %15 = load i64, i64* %5, align 8
  %16 = trunc i64 %15 to i32
  %17 = load i8*, i8** %3, align 8
  %18 = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %18, i8** %3, align 8
  %19 = load i8, i8* %17, align 1
  %20 = zext i8 %19 to i32
  %21 = xor i32 %16, %20
  %22 = and i32 %21, 255
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [256 x i64], [256 x i64]* @crc_32_tab, i64 0, i64 %23
  %25 = load i64, i64* %24, align 8
  %26 = load i64, i64* %5, align 8
  %27 = lshr i64 %26, 8
  %28 = xor i64 %25, %27
  store i64 %28, i64* %5, align 8
  br label %29

29:                                               ; preds = %14
  %30 = load i32, i32* %4, align 4
  %31 = add i32 %30, -1
  store i32 %31, i32* %4, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %14, label %33, !llvm.loop !177

33:                                               ; preds = %29
  br label %34

34:                                               ; preds = %33, %9
  br label %35

35:                                               ; preds = %34, %8
  %36 = load i64, i64* %5, align 8
  store i64 %36, i64* @crc, align 8
  %37 = load i64, i64* %5, align 8
  %38 = xor i64 %37, 4294967295
  ret i64 %38
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i64 @getcrc() #10 {
  %1 = load i64, i64* @crc, align 8
  %2 = xor i64 %1, 4294967295
  ret i64 %2
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @clear_bufs() #0 {
  store i32 0, i32* @outcnt, align 4
  store i32 0, i32* @inptr, align 4
  store i32 0, i32* @insize, align 4
  store i64 0, i64* @bytes_out, align 8
  store i64 0, i64* @bytes_in, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @fill_inbuf(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 0, i32* @insize, align 4
  br label %5

5:                                                ; preds = %24, %1
  %6 = load i32, i32* @ifd, align 4
  %7 = load i32, i32* @insize, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 0), i64 %8
  %10 = load i32, i32* @insize, align 4
  %11 = sub i32 262144, %10
  %12 = call i32 @read_buffer(i32 %6, i8* %9, i32 %11)
  store i32 %12, i32* %4, align 4
  %13 = load i32, i32* %4, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %5
  br label %27

16:                                               ; preds = %5
  %17 = load i32, i32* %4, align 4
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %19, label %20

19:                                               ; preds = %16
  call void @read_error() #23
  unreachable

20:                                               ; preds = %16
  %21 = load i32, i32* %4, align 4
  %22 = load i32, i32* @insize, align 4
  %23 = add i32 %22, %21
  store i32 %23, i32* @insize, align 4
  br label %24

24:                                               ; preds = %20
  %25 = load i32, i32* @insize, align 4
  %26 = icmp ult i32 %25, 262144
  br i1 %26, label %5, label %27, !llvm.loop !178

27:                                               ; preds = %24, %15
  %28 = load i32, i32* @insize, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %36

30:                                               ; preds = %27
  %31 = load i32, i32* %3, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  store i32 -1, i32* %2, align 4
  br label %43

34:                                               ; preds = %30
  call void @flush_window()
  %35 = call i32* @__error()
  store i32 0, i32* %35, align 4
  call void @read_error() #23
  unreachable

36:                                               ; preds = %27
  %37 = load i32, i32* @insize, align 4
  %38 = zext i32 %37 to i64
  %39 = load i64, i64* @bytes_in, align 8
  %40 = add nsw i64 %39, %38
  store i64 %40, i64* @bytes_in, align 8
  store i32 1, i32* @inptr, align 4
  %41 = load i8, i8* getelementptr inbounds ([262208 x i8], [262208 x i8]* @inbuf, i64 0, i64 0), align 1
  %42 = zext i8 %41 to i32
  store i32 %42, i32* %2, align 4
  br label %43

43:                                               ; preds = %36, %33
  %44 = load i32, i32* %2, align 4
  ret i32 %44
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @flush_window() #0 {
  %1 = load i32, i32* @outcnt, align 4
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %4

3:                                                ; preds = %0
  br label %9

4:                                                ; preds = %0
  %5 = load i32, i32* @outcnt, align 4
  %6 = call i64 @updcrc(i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i32 %5)
  %7 = load i32, i32* @ofd, align 4
  %8 = load i32, i32* @outcnt, align 4
  call void @write_buf(i32 %7, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @window, i64 0, i64 0), i32 %8)
  store i32 0, i32* @outcnt, align 4
  br label %9

9:                                                ; preds = %4, %3
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @flush_outbuf() #0 {
  %1 = load i32, i32* @outcnt, align 4
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %3, label %4

3:                                                ; preds = %0
  br label %7

4:                                                ; preds = %0
  %5 = load i32, i32* @ofd, align 4
  %6 = load i32, i32* @outcnt, align 4
  call void @write_buf(i32 %5, i8* getelementptr inbounds ([264192 x i8], [264192 x i8]* @outbuf, i64 0, i64 0), i32 %6)
  store i32 0, i32* @outcnt, align 4
  br label %7

7:                                                ; preds = %4, %3
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i8* @strlwr(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  store i8* %4, i8** %3, align 8
  br label %5

5:                                                ; preds = %28, %1
  %6 = load i8*, i8** %3, align 8
  %7 = load i8, i8* %6, align 1
  %8 = icmp ne i8 %7, 0
  br i1 %8, label %9, label %31

9:                                                ; preds = %5
  %10 = load i8*, i8** %3, align 8
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = call i32 @isupper(i32 %12) #25
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %20

15:                                               ; preds = %9
  %16 = load i8*, i8** %3, align 8
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = call i32 @tolower(i32 %18) #25
  br label %24

20:                                               ; preds = %9
  %21 = load i8*, i8** %3, align 8
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  br label %24

24:                                               ; preds = %20, %15
  %25 = phi i32 [ %19, %15 ], [ %23, %20 ]
  %26 = trunc i32 %25 to i8
  %27 = load i8*, i8** %3, align 8
  store i8 %26, i8* %27, align 1
  br label %28

28:                                               ; preds = %24
  %29 = load i8*, i8** %3, align 8
  %30 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %30, i8** %3, align 8
  br label %5, !llvm.loop !179

31:                                               ; preds = %5
  %32 = load i8*, i8** %2, align 8
  ret i8* %32
}

; Function Attrs: nounwind readonly willreturn
declare i32 @isupper(i32) #11

; Function Attrs: nounwind readonly willreturn
declare i32 @tolower(i32) #11

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i8* @gzip_base_name(i8* %0) #10 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = call i8* @last_component(i8* %3) #25
  store i8* %4, i8** %2, align 8
  %5 = load i8*, i8** %2, align 8
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @xunlink(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = call i32 @rpl_unlink(i8* %4)
  store i32 %5, i32* %3, align 4
  %6 = load i32, i32* %3, align 4
  ret i32 %6
}

declare i32 @rpl_unlink(i8*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define i8* @add_envopt(i32* %0, i8*** %1, i8* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i8***, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8**, align 8
  %10 = alloca i8**, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32* %0, i32** %5, align 8
  store i8*** %1, i8**** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 0, i32* %11, align 4
  %13 = load i8*, i8** %7, align 8
  %14 = call i8* @getenv(i8* %13)
  store i8* %14, i8** %12, align 8
  %15 = load i8*, i8** %12, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %18

17:                                               ; preds = %3
  store i8* null, i8** %4, align 8
  br label %99

18:                                               ; preds = %3
  %19 = load i8*, i8** %12, align 8
  %20 = call noalias nonnull i8* @xstrdup(i8* %19)
  store i8* %20, i8** %12, align 8
  %21 = load i8*, i8** %12, align 8
  store i8* %21, i8** %8, align 8
  br label %22

22:                                               ; preds = %48, %18
  %23 = load i8*, i8** %8, align 8
  %24 = load i8, i8* %23, align 1
  %25 = icmp ne i8 %24, 0
  br i1 %25, label %26, label %51

26:                                               ; preds = %22
  %27 = load i8*, i8** %8, align 8
  %28 = call i64 @strspn(i8* %27, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.219, i64 0, i64 0))
  %29 = load i8*, i8** %8, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 %28
  store i8* %30, i8** %8, align 8
  %31 = load i8*, i8** %8, align 8
  %32 = load i8, i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %26
  br label %51

36:                                               ; preds = %26
  %37 = load i8*, i8** %8, align 8
  %38 = call i64 @strcspn(i8* %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.219, i64 0, i64 0))
  %39 = load i8*, i8** %8, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %38
  store i8* %40, i8** %8, align 8
  %41 = load i8*, i8** %8, align 8
  %42 = load i8, i8* %41, align 1
  %43 = icmp ne i8 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %36
  %45 = load i8*, i8** %8, align 8
  %46 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %46, i8** %8, align 8
  store i8 0, i8* %45, align 1
  br label %47

47:                                               ; preds = %44, %36
  br label %48

48:                                               ; preds = %47
  %49 = load i32, i32* %11, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %11, align 4
  br label %22, !llvm.loop !180

51:                                               ; preds = %35, %22
  %52 = load i32, i32* %11, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %51
  %55 = load i8*, i8** %12, align 8
  call void @rpl_free(i8* %55)
  store i8* null, i8** %4, align 8
  br label %99

56:                                               ; preds = %51
  %57 = load i32, i32* %11, align 4
  %58 = add nsw i32 %57, 1
  %59 = load i32*, i32** %5, align 8
  store i32 %58, i32* %59, align 4
  %60 = load i32*, i32** %5, align 8
  %61 = load i32, i32* %60, align 4
  %62 = add nsw i32 %61, 1
  %63 = sext i32 %62 to i64
  %64 = call noalias nonnull i8* @xcalloc(i64 %63, i64 8) #28
  %65 = bitcast i8* %64 to i8**
  store i8** %65, i8*** %10, align 8
  %66 = load i8***, i8**** %6, align 8
  %67 = load i8**, i8*** %66, align 8
  store i8** %67, i8*** %9, align 8
  %68 = load i8**, i8*** %10, align 8
  %69 = load i8***, i8**** %6, align 8
  store i8** %68, i8*** %69, align 8
  %70 = load i8**, i8*** %9, align 8
  %71 = load i8*, i8** %70, align 8
  %72 = load i8**, i8*** %10, align 8
  %73 = getelementptr inbounds i8*, i8** %72, i32 1
  store i8** %73, i8*** %10, align 8
  store i8* %71, i8** %72, align 8
  %74 = load i8*, i8** %12, align 8
  store i8* %74, i8** %8, align 8
  br label %75

75:                                               ; preds = %93, %56
  %76 = load i32, i32* %11, align 4
  %77 = icmp sgt i32 %76, 0
  br i1 %77, label %78, label %96

78:                                               ; preds = %75
  %79 = load i8*, i8** %8, align 8
  %80 = call i64 @strspn(i8* %79, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.219, i64 0, i64 0))
  %81 = load i8*, i8** %8, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 %80
  store i8* %82, i8** %8, align 8
  %83 = load i8*, i8** %8, align 8
  %84 = load i8**, i8*** %10, align 8
  %85 = getelementptr inbounds i8*, i8** %84, i32 1
  store i8** %85, i8*** %10, align 8
  store i8* %83, i8** %84, align 8
  br label %86

86:                                               ; preds = %91, %78
  %87 = load i8*, i8** %8, align 8
  %88 = getelementptr inbounds i8, i8* %87, i32 1
  store i8* %88, i8** %8, align 8
  %89 = load i8, i8* %87, align 1
  %90 = icmp ne i8 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %86
  br label %86, !llvm.loop !181

92:                                               ; preds = %86
  br label %93

93:                                               ; preds = %92
  %94 = load i32, i32* %11, align 4
  %95 = add nsw i32 %94, -1
  store i32 %95, i32* %11, align 4
  br label %75, !llvm.loop !182

96:                                               ; preds = %75
  %97 = load i8**, i8*** %10, align 8
  store i8* null, i8** %97, align 8
  %98 = load i8*, i8** %12, align 8
  store i8* %98, i8** %4, align 8
  br label %99

99:                                               ; preds = %96, %54, %17
  %100 = load i8*, i8** %4, align 8
  ret i8* %100
}

declare i8* @getenv(i8*) #4

declare i64 @strspn(i8*, i8*) #4

; Function Attrs: noinline noreturn nounwind optnone ssp uwtable
define void @gzip_error(i8* %0) #5 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %4 = load i8*, i8** @program_name, align 8
  %5 = load i8*, i8** %2, align 8
  %6 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.222, i64 0, i64 0), i8* %4, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %5)
  call void @abort_gzip() #23
  unreachable
}

; Function Attrs: noinline noreturn nounwind optnone ssp uwtable
define void @xalloc_die() #5 {
  %1 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %2 = load i8*, i8** @program_name, align 8
  %3 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2.225, i64 0, i64 0), i8* %2)
  call void @abort_gzip() #23
  unreachable
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @warning(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i32, i32* @quiet, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %7 = load i8*, i8** @program_name, align 8
  %8 = load i8*, i8** %2, align 8
  %9 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %6, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3.228, i64 0, i64 0), i8* %7, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0), i8* %8)
  br label %10

10:                                               ; preds = %5, %1
  %11 = load i32, i32* @exit_code, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %10
  store i32 2, i32* @exit_code, align 4
  br label %14

14:                                               ; preds = %13, %10
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @display_ratio(i64 %0, i64 %1, %struct.__sFILE* %2) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.__sFILE*, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store %struct.__sFILE* %2, %struct.__sFILE** %6, align 8
  %7 = load %struct.__sFILE*, %struct.__sFILE** %6, align 8
  %8 = load i64, i64* %5, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  br label %18

11:                                               ; preds = %3
  %12 = load i64, i64* %4, align 8
  %13 = sitofp i64 %12 to double
  %14 = fmul double 1.000000e+02, %13
  %15 = load i64, i64* %5, align 8
  %16 = sitofp i64 %15 to double
  %17 = fdiv double %14, %16
  br label %18

18:                                               ; preds = %11, %10
  %19 = phi double [ 0.000000e+00, %10 ], [ %17, %11 ]
  %20 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %7, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.231, i64 0, i64 0), double %19)
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @fprint_off(%struct.__sFILE* %0, i64 %1, i32 %2) #0 {
  %4 = alloca %struct.__sFILE*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca [64 x i8], align 16
  %8 = alloca i8*, align 8
  store %struct.__sFILE* %0, %struct.__sFILE** %4, align 8
  store i64 %1, i64* %5, align 8
  store i32 %2, i32* %6, align 4
  %9 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i64 0, i64 0
  %10 = getelementptr inbounds i8, i8* %9, i64 64
  store i8* %10, i8** %8, align 8
  %11 = load i64, i64* %5, align 8
  %12 = icmp slt i64 %11, 0
  br i1 %12, label %13, label %28

13:                                               ; preds = %3
  br label %14

14:                                               ; preds = %21, %13
  %15 = load i64, i64* %5, align 8
  %16 = srem i64 %15, 10
  %17 = sub nsw i64 48, %16
  %18 = trunc i64 %17 to i8
  %19 = load i8*, i8** %8, align 8
  %20 = getelementptr inbounds i8, i8* %19, i32 -1
  store i8* %20, i8** %8, align 8
  store i8 %18, i8* %20, align 1
  br label %21

21:                                               ; preds = %14
  %22 = load i64, i64* %5, align 8
  %23 = sdiv i64 %22, 10
  store i64 %23, i64* %5, align 8
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %14, label %25, !llvm.loop !183

25:                                               ; preds = %21
  %26 = load i8*, i8** %8, align 8
  %27 = getelementptr inbounds i8, i8* %26, i32 -1
  store i8* %27, i8** %8, align 8
  store i8 45, i8* %27, align 1
  br label %41

28:                                               ; preds = %3
  br label %29

29:                                               ; preds = %36, %28
  %30 = load i64, i64* %5, align 8
  %31 = srem i64 %30, 10
  %32 = add nsw i64 48, %31
  %33 = trunc i64 %32 to i8
  %34 = load i8*, i8** %8, align 8
  %35 = getelementptr inbounds i8, i8* %34, i32 -1
  store i8* %35, i8** %8, align 8
  store i8 %33, i8* %35, align 1
  br label %36

36:                                               ; preds = %29
  %37 = load i64, i64* %5, align 8
  %38 = sdiv i64 %37, 10
  store i64 %38, i64* %5, align 8
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %29, label %40, !llvm.loop !184

40:                                               ; preds = %36
  br label %41

41:                                               ; preds = %40, %25
  %42 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i64 0, i64 0
  %43 = getelementptr inbounds i8, i8* %42, i64 64
  %44 = load i8*, i8** %8, align 8
  %45 = ptrtoint i8* %43 to i64
  %46 = ptrtoint i8* %44 to i64
  %47 = sub i64 %45, %46
  %48 = load i32, i32* %6, align 4
  %49 = sext i32 %48 to i64
  %50 = sub nsw i64 %49, %47
  %51 = trunc i64 %50 to i32
  store i32 %51, i32* %6, align 4
  br label %52

52:                                               ; preds = %56, %41
  %53 = load i32, i32* %6, align 4
  %54 = add nsw i32 %53, -1
  store i32 %54, i32* %6, align 4
  %55 = icmp slt i32 0, %53
  br i1 %55, label %56, label %59

56:                                               ; preds = %52
  %57 = load %struct.__sFILE*, %struct.__sFILE** %4, align 8
  %58 = call i32 @putc(i32 32, %struct.__sFILE* %57)
  br label %52, !llvm.loop !185

59:                                               ; preds = %52
  br label %60

60:                                               ; preds = %71, %59
  %61 = load i8*, i8** %8, align 8
  %62 = getelementptr inbounds [64 x i8], [64 x i8]* %7, i64 0, i64 0
  %63 = getelementptr inbounds i8, i8* %62, i64 64
  %64 = icmp ult i8* %61, %63
  br i1 %64, label %65, label %74

65:                                               ; preds = %60
  %66 = load i8*, i8** %8, align 8
  %67 = load i8, i8* %66, align 1
  %68 = sext i8 %67 to i32
  %69 = load %struct.__sFILE*, %struct.__sFILE** %4, align 8
  %70 = call i32 @putc(i32 %68, %struct.__sFILE* %69)
  br label %71

71:                                               ; preds = %65
  %72 = load i8*, i8** %8, align 8
  %73 = getelementptr inbounds i8, i8* %72, i32 1
  store i8* %73, i8** %8, align 8
  br label %60, !llvm.loop !186

74:                                               ; preds = %60
  ret void
}

declare i32 @putc(i32, %struct.__sFILE*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @zip(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8, align 1
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i8 0, i8* %5, align 1
  store i16 0, i16* %6, align 2
  store i16 0, i16* %7, align 2
  %10 = load i32, i32* %3, align 4
  store i32 %10, i32* @ifd, align 4
  %11 = load i32, i32* %4, align 4
  store i32 %11, i32* @ofd, align 4
  store i32 0, i32* @outcnt, align 4
  store i32 8, i32* @method, align 4
  %12 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.241, i64 0, i64 0), align 1
  %13 = load i32, i32* @outcnt, align 4
  %14 = add i32 %13, 1
  store i32 %14, i32* @outcnt, align 4
  %15 = zext i32 %13 to i64
  %16 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %15
  store i8 %12, i8* %16, align 1
  %17 = load i32, i32* @outcnt, align 4
  %18 = icmp eq i32 %17, 262144
  br i1 %18, label %19, label %20

19:                                               ; preds = %2
  call void @flush_outbuf()
  br label %20

20:                                               ; preds = %19, %2
  %21 = load i8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.241, i64 0, i64 1), align 1
  %22 = load i32, i32* @outcnt, align 4
  %23 = add i32 %22, 1
  store i32 %23, i32* @outcnt, align 4
  %24 = zext i32 %22 to i64
  %25 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %24
  store i8 %21, i8* %25, align 1
  %26 = load i32, i32* @outcnt, align 4
  %27 = icmp eq i32 %26, 262144
  br i1 %27, label %28, label %29

28:                                               ; preds = %20
  call void @flush_outbuf()
  br label %29

29:                                               ; preds = %28, %20
  %30 = load i32, i32* @outcnt, align 4
  %31 = add i32 %30, 1
  store i32 %31, i32* @outcnt, align 4
  %32 = zext i32 %30 to i64
  %33 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %32
  store i8 8, i8* %33, align 1
  %34 = load i32, i32* @outcnt, align 4
  %35 = icmp eq i32 %34, 262144
  br i1 %35, label %36, label %37

36:                                               ; preds = %29
  call void @flush_outbuf()
  br label %37

37:                                               ; preds = %36, %29
  %38 = load i32, i32* @save_orig_name, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %45

40:                                               ; preds = %37
  %41 = load i8, i8* %5, align 1
  %42 = zext i8 %41 to i32
  %43 = or i32 %42, 8
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %5, align 1
  br label %45

45:                                               ; preds = %40, %37
  %46 = load i8, i8* %5, align 1
  %47 = load i32, i32* @outcnt, align 4
  %48 = add i32 %47, 1
  store i32 %48, i32* @outcnt, align 4
  %49 = zext i32 %47 to i64
  %50 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %49
  store i8 %46, i8* %50, align 1
  %51 = load i32, i32* @outcnt, align 4
  %52 = icmp eq i32 %51, 262144
  br i1 %52, label %53, label %54

53:                                               ; preds = %45
  call void @flush_outbuf()
  br label %54

54:                                               ; preds = %53, %45
  %55 = load i64, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @time_stamp, i32 0, i32 1), align 8
  %56 = icmp slt i64 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %54
  store i64 0, i64* %8, align 8
  br label %68

58:                                               ; preds = %54
  %59 = load i64, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @time_stamp, i32 0, i32 0), align 8
  %60 = icmp slt i64 0, %59
  br i1 %60, label %61, label %66

61:                                               ; preds = %58
  %62 = load i64, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @time_stamp, i32 0, i32 0), align 8
  %63 = icmp sle i64 %62, 4294967295
  br i1 %63, label %64, label %66

64:                                               ; preds = %61
  %65 = load i64, i64* getelementptr inbounds (%struct.timespec, %struct.timespec* @time_stamp, i32 0, i32 0), align 8
  store i64 %65, i64* %8, align 8
  br label %67

66:                                               ; preds = %61, %58
  call void @warning(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1.242, i64 0, i64 0))
  store i64 0, i64* %8, align 8
  br label %67

67:                                               ; preds = %66, %64
  br label %68

68:                                               ; preds = %67, %57
  %69 = load i32, i32* @outcnt, align 4
  %70 = icmp ult i32 %69, 262142
  br i1 %70, label %71, label %90

71:                                               ; preds = %68
  %72 = load i64, i64* %8, align 8
  %73 = and i64 %72, 65535
  %74 = and i64 %73, 255
  %75 = trunc i64 %74 to i8
  %76 = load i32, i32* @outcnt, align 4
  %77 = add i32 %76, 1
  store i32 %77, i32* @outcnt, align 4
  %78 = zext i32 %76 to i64
  %79 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %78
  store i8 %75, i8* %79, align 1
  %80 = load i64, i64* %8, align 8
  %81 = and i64 %80, 65535
  %82 = trunc i64 %81 to i16
  %83 = zext i16 %82 to i32
  %84 = ashr i32 %83, 8
  %85 = trunc i32 %84 to i8
  %86 = load i32, i32* @outcnt, align 4
  %87 = add i32 %86, 1
  store i32 %87, i32* @outcnt, align 4
  %88 = zext i32 %86 to i64
  %89 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %88
  store i8 %85, i8* %89, align 1
  br label %117

90:                                               ; preds = %68
  %91 = load i64, i64* %8, align 8
  %92 = and i64 %91, 65535
  %93 = and i64 %92, 255
  %94 = trunc i64 %93 to i8
  %95 = load i32, i32* @outcnt, align 4
  %96 = add i32 %95, 1
  store i32 %96, i32* @outcnt, align 4
  %97 = zext i32 %95 to i64
  %98 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %97
  store i8 %94, i8* %98, align 1
  %99 = load i32, i32* @outcnt, align 4
  %100 = icmp eq i32 %99, 262144
  br i1 %100, label %101, label %102

101:                                              ; preds = %90
  call void @flush_outbuf()
  br label %102

102:                                              ; preds = %101, %90
  %103 = load i64, i64* %8, align 8
  %104 = and i64 %103, 65535
  %105 = trunc i64 %104 to i16
  %106 = zext i16 %105 to i32
  %107 = ashr i32 %106, 8
  %108 = trunc i32 %107 to i8
  %109 = load i32, i32* @outcnt, align 4
  %110 = add i32 %109, 1
  store i32 %110, i32* @outcnt, align 4
  %111 = zext i32 %109 to i64
  %112 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %111
  store i8 %108, i8* %112, align 1
  %113 = load i32, i32* @outcnt, align 4
  %114 = icmp eq i32 %113, 262144
  br i1 %114, label %115, label %116

115:                                              ; preds = %102
  call void @flush_outbuf()
  br label %116

116:                                              ; preds = %115, %102
  br label %117

117:                                              ; preds = %116, %71
  %118 = load i32, i32* @outcnt, align 4
  %119 = icmp ult i32 %118, 262142
  br i1 %119, label %120, label %139

120:                                              ; preds = %117
  %121 = load i64, i64* %8, align 8
  %122 = lshr i64 %121, 16
  %123 = and i64 %122, 255
  %124 = trunc i64 %123 to i8
  %125 = load i32, i32* @outcnt, align 4
  %126 = add i32 %125, 1
  store i32 %126, i32* @outcnt, align 4
  %127 = zext i32 %125 to i64
  %128 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %127
  store i8 %124, i8* %128, align 1
  %129 = load i64, i64* %8, align 8
  %130 = lshr i64 %129, 16
  %131 = trunc i64 %130 to i16
  %132 = zext i16 %131 to i32
  %133 = ashr i32 %132, 8
  %134 = trunc i32 %133 to i8
  %135 = load i32, i32* @outcnt, align 4
  %136 = add i32 %135, 1
  store i32 %136, i32* @outcnt, align 4
  %137 = zext i32 %135 to i64
  %138 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %137
  store i8 %134, i8* %138, align 1
  br label %166

139:                                              ; preds = %117
  %140 = load i64, i64* %8, align 8
  %141 = lshr i64 %140, 16
  %142 = and i64 %141, 255
  %143 = trunc i64 %142 to i8
  %144 = load i32, i32* @outcnt, align 4
  %145 = add i32 %144, 1
  store i32 %145, i32* @outcnt, align 4
  %146 = zext i32 %144 to i64
  %147 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %146
  store i8 %143, i8* %147, align 1
  %148 = load i32, i32* @outcnt, align 4
  %149 = icmp eq i32 %148, 262144
  br i1 %149, label %150, label %151

150:                                              ; preds = %139
  call void @flush_outbuf()
  br label %151

151:                                              ; preds = %150, %139
  %152 = load i64, i64* %8, align 8
  %153 = lshr i64 %152, 16
  %154 = trunc i64 %153 to i16
  %155 = zext i16 %154 to i32
  %156 = ashr i32 %155, 8
  %157 = trunc i32 %156 to i8
  %158 = load i32, i32* @outcnt, align 4
  %159 = add i32 %158, 1
  store i32 %159, i32* @outcnt, align 4
  %160 = zext i32 %158 to i64
  %161 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %160
  store i8 %157, i8* %161, align 1
  %162 = load i32, i32* @outcnt, align 4
  %163 = icmp eq i32 %162, 262144
  br i1 %163, label %164, label %165

164:                                              ; preds = %151
  call void @flush_outbuf()
  br label %165

165:                                              ; preds = %164, %151
  br label %166

166:                                              ; preds = %165, %120
  %167 = call i64 @updcrc(i8* null, i32 0)
  %168 = load i32, i32* %4, align 4
  call void @bi_init(i32 %168)
  call void @ct_init(i16* %6, i32* @method)
  %169 = load i32, i32* @level, align 4
  %170 = icmp eq i32 %169, 1
  br i1 %170, label %171, label %176

171:                                              ; preds = %166
  %172 = load i16, i16* %7, align 2
  %173 = zext i16 %172 to i32
  %174 = or i32 %173, 4
  %175 = trunc i32 %174 to i16
  store i16 %175, i16* %7, align 2
  br label %185

176:                                              ; preds = %166
  %177 = load i32, i32* @level, align 4
  %178 = icmp eq i32 %177, 9
  br i1 %178, label %179, label %184

179:                                              ; preds = %176
  %180 = load i16, i16* %7, align 2
  %181 = zext i16 %180 to i32
  %182 = or i32 %181, 2
  %183 = trunc i32 %182 to i16
  store i16 %183, i16* %7, align 2
  br label %184

184:                                              ; preds = %179, %176
  br label %185

185:                                              ; preds = %184, %171
  %186 = load i16, i16* %7, align 2
  %187 = trunc i16 %186 to i8
  %188 = load i32, i32* @outcnt, align 4
  %189 = add i32 %188, 1
  store i32 %189, i32* @outcnt, align 4
  %190 = zext i32 %188 to i64
  %191 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %190
  store i8 %187, i8* %191, align 1
  %192 = load i32, i32* @outcnt, align 4
  %193 = icmp eq i32 %192, 262144
  br i1 %193, label %194, label %195

194:                                              ; preds = %185
  call void @flush_outbuf()
  br label %195

195:                                              ; preds = %194, %185
  %196 = load i32, i32* @outcnt, align 4
  %197 = add i32 %196, 1
  store i32 %197, i32* @outcnt, align 4
  %198 = zext i32 %196 to i64
  %199 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %198
  store i8 3, i8* %199, align 1
  %200 = load i32, i32* @outcnt, align 4
  %201 = icmp eq i32 %200, 262144
  br i1 %201, label %202, label %203

202:                                              ; preds = %195
  call void @flush_outbuf()
  br label %203

203:                                              ; preds = %202, %195
  %204 = load i32, i32* @save_orig_name, align 4
  %205 = icmp ne i32 %204, 0
  br i1 %205, label %206, label %225

206:                                              ; preds = %203
  %207 = call i8* @gzip_base_name(i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0)) #25
  store i8* %207, i8** %9, align 8
  br label %208

208:                                              ; preds = %219, %206
  %209 = load i8*, i8** %9, align 8
  %210 = load i8, i8* %209, align 1
  %211 = load i32, i32* @outcnt, align 4
  %212 = add i32 %211, 1
  store i32 %212, i32* @outcnt, align 4
  %213 = zext i32 %211 to i64
  %214 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %213
  store i8 %210, i8* %214, align 1
  %215 = load i32, i32* @outcnt, align 4
  %216 = icmp eq i32 %215, 262144
  br i1 %216, label %217, label %218

217:                                              ; preds = %208
  call void @flush_outbuf()
  br label %218

218:                                              ; preds = %217, %208
  br label %219

219:                                              ; preds = %218
  %220 = load i8*, i8** %9, align 8
  %221 = getelementptr inbounds i8, i8* %220, i32 1
  store i8* %221, i8** %9, align 8
  %222 = load i8, i8* %220, align 1
  %223 = icmp ne i8 %222, 0
  br i1 %223, label %208, label %224, !llvm.loop !187

224:                                              ; preds = %219
  br label %225

225:                                              ; preds = %224, %203
  %226 = load i32, i32* @outcnt, align 4
  %227 = zext i32 %226 to i64
  store i64 %227, i64* @header_bytes, align 8
  %228 = load i32, i32* @level, align 4
  %229 = call i64 @deflate(i32 %228)
  %230 = load i64, i64* @ifile_size, align 8
  %231 = icmp ne i64 %230, -1
  br i1 %231, label %232, label %240

232:                                              ; preds = %225
  %233 = load i64, i64* @bytes_in, align 8
  %234 = load i64, i64* @ifile_size, align 8
  %235 = icmp ne i64 %233, %234
  br i1 %235, label %236, label %240

236:                                              ; preds = %232
  %237 = load %struct.__sFILE*, %struct.__sFILE** @__stderrp, align 8
  %238 = load i8*, i8** @program_name, align 8
  %239 = call i32 (%struct.__sFILE*, i8*, ...) @rpl_fprintf(%struct.__sFILE* %237, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2.243, i64 0, i64 0), i8* %238, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @ifname, i64 0, i64 0))
  br label %240

240:                                              ; preds = %236, %232, %225
  %241 = load i32, i32* @outcnt, align 4
  %242 = icmp ult i32 %241, 262142
  br i1 %242, label %243, label %262

243:                                              ; preds = %240
  %244 = call i64 @getcrc() #25
  %245 = and i64 %244, 65535
  %246 = and i64 %245, 255
  %247 = trunc i64 %246 to i8
  %248 = load i32, i32* @outcnt, align 4
  %249 = add i32 %248, 1
  store i32 %249, i32* @outcnt, align 4
  %250 = zext i32 %248 to i64
  %251 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %250
  store i8 %247, i8* %251, align 1
  %252 = call i64 @getcrc() #25
  %253 = and i64 %252, 65535
  %254 = trunc i64 %253 to i16
  %255 = zext i16 %254 to i32
  %256 = ashr i32 %255, 8
  %257 = trunc i32 %256 to i8
  %258 = load i32, i32* @outcnt, align 4
  %259 = add i32 %258, 1
  store i32 %259, i32* @outcnt, align 4
  %260 = zext i32 %258 to i64
  %261 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %260
  store i8 %257, i8* %261, align 1
  br label %289

262:                                              ; preds = %240
  %263 = call i64 @getcrc() #25
  %264 = and i64 %263, 65535
  %265 = and i64 %264, 255
  %266 = trunc i64 %265 to i8
  %267 = load i32, i32* @outcnt, align 4
  %268 = add i32 %267, 1
  store i32 %268, i32* @outcnt, align 4
  %269 = zext i32 %267 to i64
  %270 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %269
  store i8 %266, i8* %270, align 1
  %271 = load i32, i32* @outcnt, align 4
  %272 = icmp eq i32 %271, 262144
  br i1 %272, label %273, label %274

273:                                              ; preds = %262
  call void @flush_outbuf()
  br label %274

274:                                              ; preds = %273, %262
  %275 = call i64 @getcrc() #25
  %276 = and i64 %275, 65535
  %277 = trunc i64 %276 to i16
  %278 = zext i16 %277 to i32
  %279 = ashr i32 %278, 8
  %280 = trunc i32 %279 to i8
  %281 = load i32, i32* @outcnt, align 4
  %282 = add i32 %281, 1
  store i32 %282, i32* @outcnt, align 4
  %283 = zext i32 %281 to i64
  %284 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %283
  store i8 %280, i8* %284, align 1
  %285 = load i32, i32* @outcnt, align 4
  %286 = icmp eq i32 %285, 262144
  br i1 %286, label %287, label %288

287:                                              ; preds = %274
  call void @flush_outbuf()
  br label %288

288:                                              ; preds = %287, %274
  br label %289

289:                                              ; preds = %288, %243
  %290 = load i32, i32* @outcnt, align 4
  %291 = icmp ult i32 %290, 262142
  br i1 %291, label %292, label %311

292:                                              ; preds = %289
  %293 = call i64 @getcrc() #25
  %294 = lshr i64 %293, 16
  %295 = and i64 %294, 255
  %296 = trunc i64 %295 to i8
  %297 = load i32, i32* @outcnt, align 4
  %298 = add i32 %297, 1
  store i32 %298, i32* @outcnt, align 4
  %299 = zext i32 %297 to i64
  %300 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %299
  store i8 %296, i8* %300, align 1
  %301 = call i64 @getcrc() #25
  %302 = lshr i64 %301, 16
  %303 = trunc i64 %302 to i16
  %304 = zext i16 %303 to i32
  %305 = ashr i32 %304, 8
  %306 = trunc i32 %305 to i8
  %307 = load i32, i32* @outcnt, align 4
  %308 = add i32 %307, 1
  store i32 %308, i32* @outcnt, align 4
  %309 = zext i32 %307 to i64
  %310 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %309
  store i8 %306, i8* %310, align 1
  br label %338

311:                                              ; preds = %289
  %312 = call i64 @getcrc() #25
  %313 = lshr i64 %312, 16
  %314 = and i64 %313, 255
  %315 = trunc i64 %314 to i8
  %316 = load i32, i32* @outcnt, align 4
  %317 = add i32 %316, 1
  store i32 %317, i32* @outcnt, align 4
  %318 = zext i32 %316 to i64
  %319 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %318
  store i8 %315, i8* %319, align 1
  %320 = load i32, i32* @outcnt, align 4
  %321 = icmp eq i32 %320, 262144
  br i1 %321, label %322, label %323

322:                                              ; preds = %311
  call void @flush_outbuf()
  br label %323

323:                                              ; preds = %322, %311
  %324 = call i64 @getcrc() #25
  %325 = lshr i64 %324, 16
  %326 = trunc i64 %325 to i16
  %327 = zext i16 %326 to i32
  %328 = ashr i32 %327, 8
  %329 = trunc i32 %328 to i8
  %330 = load i32, i32* @outcnt, align 4
  %331 = add i32 %330, 1
  store i32 %331, i32* @outcnt, align 4
  %332 = zext i32 %330 to i64
  %333 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %332
  store i8 %329, i8* %333, align 1
  %334 = load i32, i32* @outcnt, align 4
  %335 = icmp eq i32 %334, 262144
  br i1 %335, label %336, label %337

336:                                              ; preds = %323
  call void @flush_outbuf()
  br label %337

337:                                              ; preds = %336, %323
  br label %338

338:                                              ; preds = %337, %292
  %339 = load i32, i32* @outcnt, align 4
  %340 = icmp ult i32 %339, 262142
  br i1 %340, label %341, label %360

341:                                              ; preds = %338
  %342 = load i64, i64* @bytes_in, align 8
  %343 = and i64 %342, 65535
  %344 = and i64 %343, 255
  %345 = trunc i64 %344 to i8
  %346 = load i32, i32* @outcnt, align 4
  %347 = add i32 %346, 1
  store i32 %347, i32* @outcnt, align 4
  %348 = zext i32 %346 to i64
  %349 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %348
  store i8 %345, i8* %349, align 1
  %350 = load i64, i64* @bytes_in, align 8
  %351 = and i64 %350, 65535
  %352 = trunc i64 %351 to i16
  %353 = zext i16 %352 to i32
  %354 = ashr i32 %353, 8
  %355 = trunc i32 %354 to i8
  %356 = load i32, i32* @outcnt, align 4
  %357 = add i32 %356, 1
  store i32 %357, i32* @outcnt, align 4
  %358 = zext i32 %356 to i64
  %359 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %358
  store i8 %355, i8* %359, align 1
  br label %387

360:                                              ; preds = %338
  %361 = load i64, i64* @bytes_in, align 8
  %362 = and i64 %361, 65535
  %363 = and i64 %362, 255
  %364 = trunc i64 %363 to i8
  %365 = load i32, i32* @outcnt, align 4
  %366 = add i32 %365, 1
  store i32 %366, i32* @outcnt, align 4
  %367 = zext i32 %365 to i64
  %368 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %367
  store i8 %364, i8* %368, align 1
  %369 = load i32, i32* @outcnt, align 4
  %370 = icmp eq i32 %369, 262144
  br i1 %370, label %371, label %372

371:                                              ; preds = %360
  call void @flush_outbuf()
  br label %372

372:                                              ; preds = %371, %360
  %373 = load i64, i64* @bytes_in, align 8
  %374 = and i64 %373, 65535
  %375 = trunc i64 %374 to i16
  %376 = zext i16 %375 to i32
  %377 = ashr i32 %376, 8
  %378 = trunc i32 %377 to i8
  %379 = load i32, i32* @outcnt, align 4
  %380 = add i32 %379, 1
  store i32 %380, i32* @outcnt, align 4
  %381 = zext i32 %379 to i64
  %382 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %381
  store i8 %378, i8* %382, align 1
  %383 = load i32, i32* @outcnt, align 4
  %384 = icmp eq i32 %383, 262144
  br i1 %384, label %385, label %386

385:                                              ; preds = %372
  call void @flush_outbuf()
  br label %386

386:                                              ; preds = %385, %372
  br label %387

387:                                              ; preds = %386, %341
  %388 = load i32, i32* @outcnt, align 4
  %389 = icmp ult i32 %388, 262142
  br i1 %389, label %390, label %409

390:                                              ; preds = %387
  %391 = load i64, i64* @bytes_in, align 8
  %392 = lshr i64 %391, 16
  %393 = and i64 %392, 255
  %394 = trunc i64 %393 to i8
  %395 = load i32, i32* @outcnt, align 4
  %396 = add i32 %395, 1
  store i32 %396, i32* @outcnt, align 4
  %397 = zext i32 %395 to i64
  %398 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %397
  store i8 %394, i8* %398, align 1
  %399 = load i64, i64* @bytes_in, align 8
  %400 = lshr i64 %399, 16
  %401 = trunc i64 %400 to i16
  %402 = zext i16 %401 to i32
  %403 = ashr i32 %402, 8
  %404 = trunc i32 %403 to i8
  %405 = load i32, i32* @outcnt, align 4
  %406 = add i32 %405, 1
  store i32 %406, i32* @outcnt, align 4
  %407 = zext i32 %405 to i64
  %408 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %407
  store i8 %404, i8* %408, align 1
  br label %436

409:                                              ; preds = %387
  %410 = load i64, i64* @bytes_in, align 8
  %411 = lshr i64 %410, 16
  %412 = and i64 %411, 255
  %413 = trunc i64 %412 to i8
  %414 = load i32, i32* @outcnt, align 4
  %415 = add i32 %414, 1
  store i32 %415, i32* @outcnt, align 4
  %416 = zext i32 %414 to i64
  %417 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %416
  store i8 %413, i8* %417, align 1
  %418 = load i32, i32* @outcnt, align 4
  %419 = icmp eq i32 %418, 262144
  br i1 %419, label %420, label %421

420:                                              ; preds = %409
  call void @flush_outbuf()
  br label %421

421:                                              ; preds = %420, %409
  %422 = load i64, i64* @bytes_in, align 8
  %423 = lshr i64 %422, 16
  %424 = trunc i64 %423 to i16
  %425 = zext i16 %424 to i32
  %426 = ashr i32 %425, 8
  %427 = trunc i32 %426 to i8
  %428 = load i32, i32* @outcnt, align 4
  %429 = add i32 %428, 1
  store i32 %429, i32* @outcnt, align 4
  %430 = zext i32 %428 to i64
  %431 = getelementptr inbounds [0 x i8], [0 x i8]* bitcast ([264192 x i8]* @outbuf to [0 x i8]*), i64 0, i64 %430
  store i8 %427, i8* %431, align 1
  %432 = load i32, i32* @outcnt, align 4
  %433 = icmp eq i32 %432, 262144
  br i1 %433, label %434, label %435

434:                                              ; preds = %421
  call void @flush_outbuf()
  br label %435

435:                                              ; preds = %434, %421
  br label %436

436:                                              ; preds = %435, %390
  %437 = load i64, i64* @header_bytes, align 8
  %438 = add nsw i64 %437, 8
  store i64 %438, i64* @header_bytes, align 8
  call void @flush_outbuf()
  ret i32 0
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @file_read(i8* %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  %7 = load i32, i32* @ifd, align 4
  %8 = load i8*, i8** %4, align 8
  %9 = load i32, i32* %5, align 4
  %10 = call i32 @read_buffer(i32 %7, i8* %8, i32 %9)
  store i32 %10, i32* %6, align 4
  %11 = load i32, i32* %6, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = load i32, i32* %6, align 4
  store i32 %14, i32* %3, align 4
  br label %28

15:                                               ; preds = %2
  %16 = load i32, i32* %6, align 4
  %17 = icmp eq i32 %16, -1
  br i1 %17, label %18, label %19

18:                                               ; preds = %15
  call void @read_error() #23
  unreachable

19:                                               ; preds = %15
  %20 = load i8*, i8** %4, align 8
  %21 = load i32, i32* %6, align 4
  %22 = call i64 @updcrc(i8* %20, i32 %21)
  %23 = load i32, i32* %6, align 4
  %24 = zext i32 %23 to i64
  %25 = load i64, i64* @bytes_in, align 8
  %26 = add nsw i64 %25, %24
  store i64 %26, i64* @bytes_in, align 8
  %27 = load i32, i32* %6, align 4
  store i32 %27, i32* %3, align 4
  br label %28

28:                                               ; preds = %19, %13
  %29 = load i32, i32* %3, align 4
  ret i32 %29
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i8* @last_component(i8* %0) #10 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8, align 1
  store i8* %0, i8** %2, align 8
  %6 = load i8*, i8** %2, align 8
  %7 = load i8*, i8** %2, align 8
  %8 = getelementptr inbounds i8, i8* %6, i64 0
  store i8* %8, i8** %3, align 8
  store i8 0, i8* %5, align 1
  br label %9

9:                                                ; preds = %14, %1
  %10 = load i8*, i8** %3, align 8
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp eq i32 %12, 47
  br i1 %13, label %14, label %17

14:                                               ; preds = %9
  %15 = load i8*, i8** %3, align 8
  %16 = getelementptr inbounds i8, i8* %15, i32 1
  store i8* %16, i8** %3, align 8
  br label %9, !llvm.loop !188

17:                                               ; preds = %9
  %18 = load i8*, i8** %3, align 8
  store i8* %18, i8** %4, align 8
  br label %19

19:                                               ; preds = %36, %17
  %20 = load i8*, i8** %4, align 8
  %21 = load i8, i8* %20, align 1
  %22 = icmp ne i8 %21, 0
  br i1 %22, label %23, label %39

23:                                               ; preds = %19
  %24 = load i8*, i8** %4, align 8
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %26, 47
  br i1 %27, label %28, label %29

28:                                               ; preds = %23
  store i8 1, i8* %5, align 1
  br label %35

29:                                               ; preds = %23
  %30 = load i8, i8* %5, align 1
  %31 = trunc i8 %30 to i1
  br i1 %31, label %32, label %34

32:                                               ; preds = %29
  %33 = load i8*, i8** %4, align 8
  store i8* %33, i8** %3, align 8
  store i8 0, i8* %5, align 1
  br label %34

34:                                               ; preds = %32, %29
  br label %35

35:                                               ; preds = %34, %28
  br label %36

36:                                               ; preds = %35
  %37 = load i8*, i8** %4, align 8
  %38 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %38, i8** %4, align 8
  br label %19, !llvm.loop !189

39:                                               ; preds = %19
  %40 = load i8*, i8** %3, align 8
  ret i8* %40
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i64 @base_len(i8* %0) #10 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %2, align 8
  %5 = load i8*, i8** %2, align 8
  store i64 0, i64* %4, align 8
  %6 = load i8*, i8** %2, align 8
  %7 = call i64 @strlen(i8* %6)
  store i64 %7, i64* %3, align 8
  br label %8

8:                                                ; preds = %22, %1
  %9 = load i64, i64* %3, align 8
  %10 = icmp ult i64 1, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %8
  %12 = load i8*, i8** %2, align 8
  %13 = load i64, i64* %3, align 8
  %14 = sub i64 %13, 1
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = icmp eq i32 %17, 47
  br label %19

19:                                               ; preds = %11, %8
  %20 = phi i1 [ false, %8 ], [ %18, %11 ]
  br i1 %20, label %21, label %25

21:                                               ; preds = %19
  br label %22

22:                                               ; preds = %21
  %23 = load i64, i64* %3, align 8
  %24 = add i64 %23, -1
  store i64 %24, i64* %3, align 8
  br label %8, !llvm.loop !190

25:                                               ; preds = %19
  %26 = load i64, i64* %3, align 8
  ret i64 %26
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @chdir_long(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.cd_buf, align 4
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  %14 = load i8*, i8** %3, align 8
  %15 = call i32 @chdir(i8* %14)
  store i32 %15, i32* %4, align 4
  %16 = load i32, i32* %4, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %22, label %18

18:                                               ; preds = %1
  %19 = call i32* @__error()
  %20 = load i32, i32* %19, align 4
  %21 = icmp ne i32 %20, 63
  br i1 %21, label %22, label %24

22:                                               ; preds = %18, %1
  %23 = load i32, i32* %4, align 4
  store i32 %23, i32* %2, align 4
  br label %176

24:                                               ; preds = %18
  %25 = load i8*, i8** %3, align 8
  %26 = call i64 @strlen(i8* %25)
  store i64 %26, i64* %5, align 8
  %27 = load i8*, i8** %3, align 8
  %28 = load i64, i64* %5, align 8
  %29 = getelementptr inbounds i8, i8* %27, i64 %28
  store i8* %29, i8** %6, align 8
  call void @cdb_init(%struct.cd_buf* %7)
  %30 = load i64, i64* %5, align 8
  %31 = icmp ult i64 0, %30
  %32 = xor i1 %31, true
  %33 = zext i1 %32 to i32
  %34 = sext i32 %33 to i64
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %24
  call void @__assert_rtn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__.chdir_long, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.248, i64 0, i64 0), i32 126, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.249, i64 0, i64 0)) #29
  unreachable

37:                                               ; No predecessors!
  br label %39

38:                                               ; preds = %24
  br label %39

39:                                               ; preds = %38, %37
  %40 = load i64, i64* %5, align 8
  %41 = icmp ule i64 1024, %40
  %42 = xor i1 %41, true
  %43 = zext i1 %42 to i32
  %44 = sext i32 %43 to i64
  %45 = icmp ne i64 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %39
  call void @__assert_rtn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__.chdir_long, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.248, i64 0, i64 0), i32 127, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2.250, i64 0, i64 0)) #29
  unreachable

47:                                               ; No predecessors!
  br label %49

48:                                               ; preds = %39
  br label %49

49:                                               ; preds = %48, %47
  %50 = load i8*, i8** %3, align 8
  %51 = call i64 @strspn(i8* %50, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.251, i64 0, i64 0))
  store i64 %51, i64* %8, align 8
  %52 = load i64, i64* %8, align 8
  %53 = icmp eq i64 %52, 2
  br i1 %53, label %54, label %80

54:                                               ; preds = %49
  %55 = load i8*, i8** %3, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 3
  %57 = load i8*, i8** %6, align 8
  %58 = load i8*, i8** %3, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 3
  %60 = ptrtoint i8* %57 to i64
  %61 = ptrtoint i8* %59 to i64
  %62 = sub i64 %60, %61
  %63 = call i8* @memchr(i8* %56, i32 47, i64 %62)
  store i8* %63, i8** %10, align 8
  %64 = load i8*, i8** %10, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %66, label %68

66:                                               ; preds = %54
  %67 = call i32* @__error()
  store i32 63, i32* %67, align 4
  store i32 -1, i32* %2, align 4
  br label %176

68:                                               ; preds = %54
  %69 = load i8*, i8** %10, align 8
  store i8 0, i8* %69, align 1
  %70 = load i8*, i8** %3, align 8
  %71 = call i32 @cdb_advance_fd(%struct.cd_buf* %7, i8* %70)
  store i32 %71, i32* %9, align 4
  %72 = load i8*, i8** %10, align 8
  store i8 47, i8* %72, align 1
  %73 = load i32, i32* %9, align 4
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %68
  br label %171

76:                                               ; preds = %68
  %77 = load i8*, i8** %10, align 8
  %78 = getelementptr inbounds i8, i8* %77, i64 1
  %79 = call i8* @find_non_slash(i8* %78) #25
  store i8* %79, i8** %3, align 8
  br label %92

80:                                               ; preds = %49
  %81 = load i64, i64* %8, align 8
  %82 = icmp ne i64 %81, 0
  br i1 %82, label %83, label %91

83:                                               ; preds = %80
  %84 = call i32 @cdb_advance_fd(%struct.cd_buf* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.251, i64 0, i64 0))
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %83
  br label %171

87:                                               ; preds = %83
  %88 = load i64, i64* %8, align 8
  %89 = load i8*, i8** %3, align 8
  %90 = getelementptr inbounds i8, i8* %89, i64 %88
  store i8* %90, i8** %3, align 8
  br label %91

91:                                               ; preds = %87, %80
  br label %92

92:                                               ; preds = %91, %76
  %93 = load i8*, i8** %3, align 8
  %94 = load i8, i8* %93, align 1
  %95 = sext i8 %94 to i32
  %96 = icmp ne i32 %95, 47
  %97 = xor i1 %96, true
  %98 = zext i1 %97 to i32
  %99 = sext i32 %98 to i64
  %100 = icmp ne i64 %99, 0
  br i1 %100, label %101, label %103

101:                                              ; preds = %92
  call void @__assert_rtn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__.chdir_long, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.248, i64 0, i64 0), i32 162, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4.252, i64 0, i64 0)) #29
  unreachable

102:                                              ; No predecessors!
  br label %104

103:                                              ; preds = %92
  br label %104

104:                                              ; preds = %103, %102
  %105 = load i8*, i8** %3, align 8
  %106 = load i8*, i8** %6, align 8
  %107 = icmp ule i8* %105, %106
  %108 = xor i1 %107, true
  %109 = zext i1 %108 to i32
  %110 = sext i32 %109 to i64
  %111 = icmp ne i64 %110, 0
  br i1 %111, label %112, label %114

112:                                              ; preds = %104
  call void @__assert_rtn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__.chdir_long, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.248, i64 0, i64 0), i32 163, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5.253, i64 0, i64 0)) #29
  unreachable

113:                                              ; No predecessors!
  br label %115

114:                                              ; preds = %104
  br label %115

115:                                              ; preds = %114, %113
  br label %116

116:                                              ; preds = %152, %115
  %117 = load i8*, i8** %6, align 8
  %118 = load i8*, i8** %3, align 8
  %119 = ptrtoint i8* %117 to i64
  %120 = ptrtoint i8* %118 to i64
  %121 = sub i64 %119, %120
  %122 = icmp sle i64 1024, %121
  br i1 %122, label %123, label %156

123:                                              ; preds = %116
  %124 = load i8*, i8** %3, align 8
  %125 = call i8* @memrchr(i8* %124, i32 47, i64 1024) #25
  store i8* %125, i8** %12, align 8
  %126 = load i8*, i8** %12, align 8
  %127 = icmp eq i8* %126, null
  br i1 %127, label %128, label %130

128:                                              ; preds = %123
  %129 = call i32* @__error()
  store i32 63, i32* %129, align 4
  store i32 -1, i32* %2, align 4
  br label %176

130:                                              ; preds = %123
  %131 = load i8*, i8** %12, align 8
  store i8 0, i8* %131, align 1
  %132 = load i8*, i8** %12, align 8
  %133 = load i8*, i8** %3, align 8
  %134 = ptrtoint i8* %132 to i64
  %135 = ptrtoint i8* %133 to i64
  %136 = sub i64 %134, %135
  %137 = icmp slt i64 %136, 1024
  %138 = xor i1 %137, true
  %139 = zext i1 %138 to i32
  %140 = sext i32 %139 to i64
  %141 = icmp ne i64 %140, 0
  br i1 %141, label %142, label %144

142:                                              ; preds = %130
  call void @__assert_rtn(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @__func__.chdir_long, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.248, i64 0, i64 0), i32 179, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6.254, i64 0, i64 0)) #29
  unreachable

143:                                              ; No predecessors!
  br label %145

144:                                              ; preds = %130
  br label %145

145:                                              ; preds = %144, %143
  %146 = load i8*, i8** %3, align 8
  %147 = call i32 @cdb_advance_fd(%struct.cd_buf* %7, i8* %146)
  store i32 %147, i32* %11, align 4
  %148 = load i8*, i8** %12, align 8
  store i8 47, i8* %148, align 1
  %149 = load i32, i32* %11, align 4
  %150 = icmp ne i32 %149, 0
  br i1 %150, label %151, label %152

151:                                              ; preds = %145
  br label %171

152:                                              ; preds = %145
  %153 = load i8*, i8** %12, align 8
  %154 = getelementptr inbounds i8, i8* %153, i64 1
  %155 = call i8* @find_non_slash(i8* %154) #25
  store i8* %155, i8** %3, align 8
  br label %116, !llvm.loop !191

156:                                              ; preds = %116
  %157 = load i8*, i8** %3, align 8
  %158 = load i8*, i8** %6, align 8
  %159 = icmp ult i8* %157, %158
  br i1 %159, label %160, label %166

160:                                              ; preds = %156
  %161 = load i8*, i8** %3, align 8
  %162 = call i32 @cdb_advance_fd(%struct.cd_buf* %7, i8* %161)
  %163 = icmp ne i32 %162, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %160
  br label %171

165:                                              ; preds = %160
  br label %166

166:                                              ; preds = %165, %156
  %167 = call i32 @cdb_fchdir(%struct.cd_buf* %7)
  %168 = icmp ne i32 %167, 0
  br i1 %168, label %169, label %170

169:                                              ; preds = %166
  br label %171

170:                                              ; preds = %166
  call void @cdb_free(%struct.cd_buf* %7)
  store i32 0, i32* %2, align 4
  br label %176

171:                                              ; preds = %169, %164, %151, %86, %75
  %172 = call i32* @__error()
  %173 = load i32, i32* %172, align 4
  store i32 %173, i32* %13, align 4
  call void @cdb_free(%struct.cd_buf* %7)
  %174 = load i32, i32* %13, align 4
  %175 = call i32* @__error()
  store i32 %174, i32* %175, align 4
  store i32 -1, i32* %2, align 4
  br label %176

176:                                              ; preds = %171, %170, %128, %66, %22
  %177 = load i32, i32* %2, align 4
  ret i32 %177
}

declare i32 @chdir(i8*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @cdb_init(%struct.cd_buf* %0) #0 {
  %2 = alloca %struct.cd_buf*, align 8
  store %struct.cd_buf* %0, %struct.cd_buf** %2, align 8
  %3 = load %struct.cd_buf*, %struct.cd_buf** %2, align 8
  %4 = getelementptr inbounds %struct.cd_buf, %struct.cd_buf* %3, i32 0, i32 0
  store i32 -2, i32* %4, align 4
  ret void
}

; Function Attrs: cold noreturn
declare void @__assert_rtn(i8*, i8*, i32, i8*) #12

declare i8* @memchr(i8*, i32, i64) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @cdb_advance_fd(%struct.cd_buf* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.cd_buf*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store %struct.cd_buf* %0, %struct.cd_buf** %4, align 8
  store i8* %1, i8** %5, align 8
  %7 = load %struct.cd_buf*, %struct.cd_buf** %4, align 8
  %8 = getelementptr inbounds %struct.cd_buf, %struct.cd_buf* %7, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = load i8*, i8** %5, align 8
  %11 = call i32 (i32, i8*, i32, ...) @rpl_openat(i32 %9, i8* %10, i32 1179652)
  store i32 %11, i32* %6, align 4
  %12 = load i32, i32* %6, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %2
  store i32 -1, i32* %3, align 4
  br label %20

15:                                               ; preds = %2
  %16 = load %struct.cd_buf*, %struct.cd_buf** %4, align 8
  call void @cdb_free(%struct.cd_buf* %16)
  %17 = load i32, i32* %6, align 4
  %18 = load %struct.cd_buf*, %struct.cd_buf** %4, align 8
  %19 = getelementptr inbounds %struct.cd_buf, %struct.cd_buf* %18, i32 0, i32 0
  store i32 %17, i32* %19, align 4
  store i32 0, i32* %3, align 4
  br label %20

20:                                               ; preds = %15, %14
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define internal i8* @find_non_slash(i8* %0) #10 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  store i8* %0, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = call i64 @strspn(i8* %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.251, i64 0, i64 0))
  store i64 %5, i64* %3, align 8
  %6 = load i8*, i8** %2, align 8
  %7 = load i64, i64* %3, align 8
  %8 = getelementptr inbounds i8, i8* %6, i64 %7
  ret i8* %8
}

; Function Attrs: nounwind readonly willreturn
declare i8* @memrchr(i8*, i32, i64) #11

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @cdb_fchdir(%struct.cd_buf* %0) #0 {
  %2 = alloca %struct.cd_buf*, align 8
  store %struct.cd_buf* %0, %struct.cd_buf** %2, align 8
  %3 = load %struct.cd_buf*, %struct.cd_buf** %2, align 8
  %4 = getelementptr inbounds %struct.cd_buf, %struct.cd_buf* %3, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = call i32 @fchdir(i32 %5)
  ret i32 %6
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @cdb_free(%struct.cd_buf* %0) #0 {
  %2 = alloca %struct.cd_buf*, align 8
  %3 = alloca i8, align 1
  store %struct.cd_buf* %0, %struct.cd_buf** %2, align 8
  %4 = load %struct.cd_buf*, %struct.cd_buf** %2, align 8
  %5 = getelementptr inbounds %struct.cd_buf, %struct.cd_buf* %4, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp sle i32 0, %6
  br i1 %7, label %8, label %26

8:                                                ; preds = %1
  %9 = load %struct.cd_buf*, %struct.cd_buf** %2, align 8
  %10 = getelementptr inbounds %struct.cd_buf, %struct.cd_buf* %9, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = call i32 @"\01_close"(i32 %11)
  %13 = icmp ne i32 %12, 0
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %3, align 1
  %15 = load i8, i8* %3, align 1
  %16 = trunc i8 %15 to i1
  %17 = xor i1 %16, true
  %18 = xor i1 %17, true
  %19 = zext i1 %18 to i32
  %20 = sext i32 %19 to i64
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %8
  call void @__assert_rtn(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @__func__.cdb_free, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.248, i64 0, i64 0), i32 64, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.255, i64 0, i64 0)) #29
  unreachable

23:                                               ; No predecessors!
  br label %25

24:                                               ; preds = %8
  br label %25

25:                                               ; preds = %24, %23
  br label %26

26:                                               ; preds = %25, %1
  ret void
}

declare i32 @fchdir(i32) #4

declare i32 @rpl_openat(i32, i8*, i32, ...) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @set_cloexec_flag(i32 %0, i1 zeroext %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  %8 = zext i1 %1 to i8
  store i8 %8, i8* %5, align 1
  %9 = load i32, i32* %4, align 4
  %10 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %9, i32 1, i32 0)
  store i32 %10, i32* %6, align 4
  %11 = load i32, i32* %6, align 4
  %12 = icmp sle i32 0, %11
  br i1 %12, label %13, label %34

13:                                               ; preds = %2
  %14 = load i8, i8* %5, align 1
  %15 = trunc i8 %14 to i1
  br i1 %15, label %16, label %19

16:                                               ; preds = %13
  %17 = load i32, i32* %6, align 4
  %18 = or i32 %17, 1
  br label %22

19:                                               ; preds = %13
  %20 = load i32, i32* %6, align 4
  %21 = and i32 %20, -2
  br label %22

22:                                               ; preds = %19, %16
  %23 = phi i32 [ %18, %16 ], [ %21, %19 ]
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %6, align 4
  %25 = load i32, i32* %7, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %32, label %27

27:                                               ; preds = %22
  %28 = load i32, i32* %4, align 4
  %29 = load i32, i32* %7, align 4
  %30 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %28, i32 2, i32 %29)
  %31 = icmp ne i32 %30, -1
  br i1 %31, label %32, label %33

32:                                               ; preds = %27, %22
  store i32 0, i32* %3, align 4
  br label %35

33:                                               ; preds = %27
  br label %34

34:                                               ; preds = %33, %2
  store i32 -1, i32* %3, align 4
  br label %35

35:                                               ; preds = %34, %32
  %36 = load i32, i32* %3, align 4
  ret i32 %36
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @dup_cloexec(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %3, i32 67, i32 0)
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @creat_safer(i8* %0, i16 zeroext %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16, align 2
  store i8* %0, i8** %3, align 8
  store i16 %1, i16* %4, align 2
  %5 = load i8*, i8** %3, align 8
  %6 = load i16, i16* %4, align 2
  %7 = call i32 @"\01_creat"(i8* %5, i16 zeroext %6)
  %8 = call i32 @fd_safer(i32 %7)
  ret i32 %8
}

declare i32 @"\01_creat"(i8*, i16 zeroext) #4

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i64 @dir_len(i8* %0) #10 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %2, align 8
  %5 = load i8*, i8** %2, align 8
  store i64 0, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = icmp ne i64 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  br label %17

9:                                                ; preds = %1
  %10 = load i8*, i8** %2, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 0
  %12 = load i8, i8* %11, align 1
  %13 = sext i8 %12 to i32
  %14 = icmp eq i32 %13, 47
  %15 = zext i1 %14 to i64
  %16 = select i1 %14, i32 1, i32 0
  br label %17

17:                                               ; preds = %9, %8
  %18 = phi i32 [ 0, %8 ], [ %16, %9 ]
  %19 = sext i32 %18 to i64
  %20 = load i64, i64* %3, align 8
  %21 = add i64 %20, %19
  store i64 %21, i64* %3, align 8
  %22 = load i8*, i8** %2, align 8
  %23 = call i8* @last_component(i8* %22) #25
  %24 = load i8*, i8** %2, align 8
  %25 = ptrtoint i8* %23 to i64
  %26 = ptrtoint i8* %24 to i64
  %27 = sub i64 %25, %26
  store i64 %27, i64* %4, align 8
  br label %28

28:                                               ; preds = %42, %17
  %29 = load i64, i64* %3, align 8
  %30 = load i64, i64* %4, align 8
  %31 = icmp ult i64 %29, %30
  br i1 %31, label %32, label %45

32:                                               ; preds = %28
  %33 = load i8*, i8** %2, align 8
  %34 = load i64, i64* %4, align 8
  %35 = sub i64 %34, 1
  %36 = getelementptr inbounds i8, i8* %33, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = sext i8 %37 to i32
  %39 = icmp eq i32 %38, 47
  br i1 %39, label %41, label %40

40:                                               ; preds = %32
  br label %45

41:                                               ; preds = %32
  br label %42

42:                                               ; preds = %41
  %43 = load i64, i64* %4, align 8
  %44 = add i64 %43, -1
  store i64 %44, i64* %4, align 8
  br label %28, !llvm.loop !192

45:                                               ; preds = %40, %28
  %46 = load i64, i64* %4, align 8
  ret i64 %46
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define noalias i8* @mdir_name(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8, align 1
  %6 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  %7 = load i8*, i8** %3, align 8
  %8 = call i64 @dir_len(i8* %7) #25
  store i64 %8, i64* %4, align 8
  %9 = load i64, i64* %4, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  br label %12

12:                                               ; preds = %11, %1
  %13 = phi i1 [ true, %1 ], [ false, %11 ]
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %5, align 1
  %15 = load i64, i64* %4, align 8
  %16 = load i8, i8* %5, align 1
  %17 = trunc i8 %16 to i1
  %18 = zext i1 %17 to i64
  %19 = add i64 %15, %18
  %20 = add i64 %19, 1
  %21 = call align 16 i8* @malloc(i64 %20) #26
  store i8* %21, i8** %6, align 8
  %22 = load i8*, i8** %6, align 8
  %23 = icmp ne i8* %22, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %12
  store i8* null, i8** %2, align 8
  br label %44

25:                                               ; preds = %12
  %26 = load i8*, i8** %6, align 8
  %27 = load i8*, i8** %3, align 8
  %28 = load i64, i64* %4, align 8
  %29 = load i8*, i8** %6, align 8
  %30 = call i64 @llvm.objectsize.i64.p0i8(i8* %29, i1 false, i1 true, i1 false)
  %31 = call i8* @__memcpy_chk(i8* %26, i8* %27, i64 %28, i64 %30) #24
  %32 = load i8, i8* %5, align 1
  %33 = trunc i8 %32 to i1
  br i1 %33, label %34, label %39

34:                                               ; preds = %25
  %35 = load i8*, i8** %6, align 8
  %36 = load i64, i64* %4, align 8
  %37 = add i64 %36, 1
  store i64 %37, i64* %4, align 8
  %38 = getelementptr inbounds i8, i8* %35, i64 %36
  store i8 46, i8* %38, align 1
  br label %39

39:                                               ; preds = %34, %25
  %40 = load i8*, i8** %6, align 8
  %41 = load i64, i64* %4, align 8
  %42 = getelementptr inbounds i8, i8* %40, i64 %41
  store i8 0, i8* %42, align 1
  %43 = load i8*, i8** %6, align 8
  store i8* %43, i8** %2, align 8
  br label %44

44:                                               ; preds = %39, %24
  %45 = load i8*, i8** %2, align 8
  ret i8* %45
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @dup_safer_flag(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  %7 = and i32 %6, 16777216
  %8 = icmp ne i32 %7, 0
  %9 = zext i1 %8 to i64
  %10 = select i1 %8, i32 67, i32 0
  %11 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %5, i32 %10, i32 3)
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @dup_safer(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %3, i32 0, i32 3)
  ret i32 %4
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @rpl_fclose(%struct.__sFILE* nonnull %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.__sFILE*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct.__sFILE* %0, %struct.__sFILE** %3, align 8
  store i32 0, i32* %4, align 4
  store i32 0, i32* %6, align 4
  %7 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %8 = call i32 @fileno(%struct.__sFILE* %7)
  store i32 %8, i32* %5, align 4
  %9 = load i32, i32* %5, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %1
  %12 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %13 = call i32 @fclose(%struct.__sFILE* %12)
  store i32 %13, i32* %2, align 4
  br label %39

14:                                               ; preds = %1
  %15 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %16 = call zeroext i1 @freading(%struct.__sFILE* %15) #25
  br i1 %16, label %17, label %22

17:                                               ; preds = %14
  %18 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %19 = call i32 @fileno(%struct.__sFILE* %18)
  %20 = call i64 @rpl_lseek(i32 %19, i64 0, i32 1)
  %21 = icmp ne i64 %20, -1
  br i1 %21, label %22, label %29

22:                                               ; preds = %17, %14
  %23 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %24 = call i32 @rpl_fflush(%struct.__sFILE* %23)
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %22
  %27 = call i32* @__error()
  %28 = load i32, i32* %27, align 4
  store i32 %28, i32* %4, align 4
  br label %29

29:                                               ; preds = %26, %22, %17
  %30 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %31 = call i32 @fclose(%struct.__sFILE* %30)
  store i32 %31, i32* %6, align 4
  %32 = load i32, i32* %4, align 4
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = load i32, i32* %4, align 4
  %36 = call i32* @__error()
  store i32 %35, i32* %36, align 4
  store i32 -1, i32* %6, align 4
  br label %37

37:                                               ; preds = %34, %29
  %38 = load i32, i32* %6, align 4
  store i32 %38, i32* %2, align 4
  br label %39

39:                                               ; preds = %37, %11
  %40 = load i32, i32* %2, align 4
  ret i32 %40
}

declare i32 @fileno(%struct.__sFILE*) #4

declare i32 @fclose(%struct.__sFILE*) #4

declare i64 @rpl_lseek(i32, i64, i32) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @"\01_fcntl"(i32 %0, i32 %1, ...) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca [1 x %struct.__va_list_tag], align 16
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 -1, i32* %6, align 4
  %11 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %5, i64 0, i64 0
  %12 = bitcast %struct.__va_list_tag* %11 to i8*
  call void @llvm.va_start(i8* %12)
  %13 = load i32, i32* %4, align 4
  switch i32 %13, label %58 [
    i32 0, label %14
    i32 67, label %36
  ]

14:                                               ; preds = %2
  %15 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %5, i64 0, i64 0
  %16 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %15, i32 0, i32 0
  %17 = load i32, i32* %16, align 16
  %18 = icmp ule i32 %17, 40
  br i1 %18, label %19, label %25

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %15, i32 0, i32 3
  %21 = load i8*, i8** %20, align 16
  %22 = getelementptr i8, i8* %21, i32 %17
  %23 = bitcast i8* %22 to i32*
  %24 = add i32 %17, 8
  store i32 %24, i32* %16, align 16
  br label %30

25:                                               ; preds = %14
  %26 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %15, i32 0, i32 2
  %27 = load i8*, i8** %26, align 8
  %28 = bitcast i8* %27 to i32*
  %29 = getelementptr i8, i8* %27, i32 8
  store i8* %29, i8** %26, align 8
  br label %30

30:                                               ; preds = %25, %19
  %31 = phi i32* [ %23, %19 ], [ %28, %25 ]
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %7, align 4
  %33 = load i32, i32* %3, align 4
  %34 = load i32, i32* %7, align 4
  %35 = call i32 @rpl_fcntl_DUPFD(i32 %33, i32 %34)
  store i32 %35, i32* %6, align 4
  br label %111

36:                                               ; preds = %2
  %37 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %5, i64 0, i64 0
  %38 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %37, i32 0, i32 0
  %39 = load i32, i32* %38, align 16
  %40 = icmp ule i32 %39, 40
  br i1 %40, label %41, label %47

41:                                               ; preds = %36
  %42 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %37, i32 0, i32 3
  %43 = load i8*, i8** %42, align 16
  %44 = getelementptr i8, i8* %43, i32 %39
  %45 = bitcast i8* %44 to i32*
  %46 = add i32 %39, 8
  store i32 %46, i32* %38, align 16
  br label %52

47:                                               ; preds = %36
  %48 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %37, i32 0, i32 2
  %49 = load i8*, i8** %48, align 8
  %50 = bitcast i8* %49 to i32*
  %51 = getelementptr i8, i8* %49, i32 8
  store i8* %51, i8** %48, align 8
  br label %52

52:                                               ; preds = %47, %41
  %53 = phi i32* [ %45, %41 ], [ %50, %47 ]
  %54 = load i32, i32* %53, align 4
  store i32 %54, i32* %8, align 4
  %55 = load i32, i32* %3, align 4
  %56 = load i32, i32* %8, align 4
  %57 = call i32 @rpl_fcntl_DUPFD_CLOEXEC(i32 %55, i32 %56)
  store i32 %57, i32* %6, align 4
  br label %111

58:                                               ; preds = %2
  %59 = load i32, i32* %4, align 4
  switch i32 %59, label %87 [
    i32 85, label %60
    i32 41, label %60
    i32 40, label %60
    i32 53, label %60
    i32 51, label %60
    i32 1, label %60
    i32 3, label %60
    i32 74, label %60
    i32 5, label %60
    i32 63, label %60
    i32 77, label %60
    i32 54, label %60
    i32 0, label %64
    i32 67, label %64
    i32 55, label %64
    i32 48, label %64
    i32 62, label %64
    i32 45, label %64
    i32 70, label %64
    i32 2, label %64
    i32 4, label %64
    i32 73, label %64
    i32 6, label %64
    i32 64, label %64
    i32 76, label %64
  ]

60:                                               ; preds = %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58
  %61 = load i32, i32* %3, align 4
  %62 = load i32, i32* %4, align 4
  %63 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %61, i32 %62)
  store i32 %63, i32* %6, align 4
  br label %110

64:                                               ; preds = %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58, %58
  %65 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %5, i64 0, i64 0
  %66 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %65, i32 0, i32 0
  %67 = load i32, i32* %66, align 16
  %68 = icmp ule i32 %67, 40
  br i1 %68, label %69, label %75

69:                                               ; preds = %64
  %70 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %65, i32 0, i32 3
  %71 = load i8*, i8** %70, align 16
  %72 = getelementptr i8, i8* %71, i32 %67
  %73 = bitcast i8* %72 to i32*
  %74 = add i32 %67, 8
  store i32 %74, i32* %66, align 16
  br label %80

75:                                               ; preds = %64
  %76 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %65, i32 0, i32 2
  %77 = load i8*, i8** %76, align 8
  %78 = bitcast i8* %77 to i32*
  %79 = getelementptr i8, i8* %77, i32 8
  store i8* %79, i8** %76, align 8
  br label %80

80:                                               ; preds = %75, %69
  %81 = phi i32* [ %73, %69 ], [ %78, %75 ]
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %9, align 4
  %83 = load i32, i32* %3, align 4
  %84 = load i32, i32* %4, align 4
  %85 = load i32, i32* %9, align 4
  %86 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %83, i32 %84, i32 %85)
  store i32 %86, i32* %6, align 4
  br label %110

87:                                               ; preds = %58
  %88 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %5, i64 0, i64 0
  %89 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %88, i32 0, i32 0
  %90 = load i32, i32* %89, align 16
  %91 = icmp ule i32 %90, 40
  br i1 %91, label %92, label %98

92:                                               ; preds = %87
  %93 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %88, i32 0, i32 3
  %94 = load i8*, i8** %93, align 16
  %95 = getelementptr i8, i8* %94, i32 %90
  %96 = bitcast i8* %95 to i8**
  %97 = add i32 %90, 8
  store i32 %97, i32* %89, align 16
  br label %103

98:                                               ; preds = %87
  %99 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %88, i32 0, i32 2
  %100 = load i8*, i8** %99, align 8
  %101 = bitcast i8* %100 to i8**
  %102 = getelementptr i8, i8* %100, i32 8
  store i8* %102, i8** %99, align 8
  br label %103

103:                                              ; preds = %98, %92
  %104 = phi i8** [ %96, %92 ], [ %101, %98 ]
  %105 = load i8*, i8** %104, align 8
  store i8* %105, i8** %10, align 8
  %106 = load i32, i32* %3, align 4
  %107 = load i32, i32* %4, align 4
  %108 = load i8*, i8** %10, align 8
  %109 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %106, i32 %107, i8* %108)
  store i32 %109, i32* %6, align 4
  br label %110

110:                                              ; preds = %103, %80, %60
  br label %111

111:                                              ; preds = %110, %52, %30
  %112 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %5, i64 0, i64 0
  %113 = bitcast %struct.__va_list_tag* %112 to i8*
  call void @llvm.va_end(i8* %113)
  %114 = load i32, i32* %6, align 4
  ret i32 %114
}

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.va_start(i8*) #13

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @rpl_fcntl_DUPFD(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %6 = load i32, i32* %3, align 4
  %7 = load i32, i32* %4, align 4
  %8 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %6, i32 0, i32 %7)
  store i32 %8, i32* %5, align 4
  %9 = load i32, i32* %5, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @rpl_fcntl_DUPFD_CLOEXEC(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %8 = load i32, i32* @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4
  %9 = icmp sle i32 0, %8
  br i1 %9, label %10, label %30

10:                                               ; preds = %2
  %11 = load i32, i32* %3, align 4
  %12 = load i32, i32* %4, align 4
  %13 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %11, i32 67, i32 %12)
  store i32 %13, i32* %5, align 4
  %14 = load i32, i32* %5, align 4
  %15 = icmp sle i32 0, %14
  br i1 %15, label %20, label %16

16:                                               ; preds = %10
  %17 = call i32* @__error()
  %18 = load i32, i32* %17, align 4
  %19 = icmp ne i32 %18, 22
  br i1 %19, label %20, label %21

20:                                               ; preds = %16, %10
  store i32 1, i32* @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4
  br label %29

21:                                               ; preds = %16
  %22 = load i32, i32* %3, align 4
  %23 = load i32, i32* %4, align 4
  %24 = call i32 @rpl_fcntl_DUPFD(i32 %22, i32 %23)
  store i32 %24, i32* %5, align 4
  %25 = load i32, i32* %5, align 4
  %26 = icmp sge i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %21
  store i32 -1, i32* @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4
  br label %28

28:                                               ; preds = %27, %21
  br label %29

29:                                               ; preds = %28, %20
  br label %34

30:                                               ; preds = %2
  %31 = load i32, i32* %3, align 4
  %32 = load i32, i32* %4, align 4
  %33 = call i32 @rpl_fcntl_DUPFD(i32 %31, i32 %32)
  store i32 %33, i32* %5, align 4
  br label %34

34:                                               ; preds = %30, %29
  %35 = load i32, i32* %5, align 4
  %36 = icmp sle i32 0, %35
  br i1 %36, label %37, label %59

37:                                               ; preds = %34
  %38 = load i32, i32* @rpl_fcntl_DUPFD_CLOEXEC.have_dupfd_cloexec, align 4
  %39 = icmp eq i32 %38, -1
  br i1 %39, label %40, label %59

40:                                               ; preds = %37
  %41 = load i32, i32* %5, align 4
  %42 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %41, i32 1)
  store i32 %42, i32* %6, align 4
  %43 = load i32, i32* %6, align 4
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %40
  %46 = load i32, i32* %5, align 4
  %47 = load i32, i32* %6, align 4
  %48 = or i32 %47, 1
  %49 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %46, i32 2, i32 %48)
  %50 = icmp eq i32 %49, -1
  br i1 %50, label %51, label %58

51:                                               ; preds = %45, %40
  %52 = call i32* @__error()
  %53 = load i32, i32* %52, align 4
  store i32 %53, i32* %7, align 4
  %54 = load i32, i32* %5, align 4
  %55 = call i32 @"\01_close"(i32 %54)
  %56 = load i32, i32* %7, align 4
  %57 = call i32* @__error()
  store i32 %56, i32* %57, align 4
  store i32 -1, i32* %5, align 4
  br label %58

58:                                               ; preds = %51, %45
  br label %59

59:                                               ; preds = %58, %37, %34
  %60 = load i32, i32* %5, align 4
  ret i32 %60
}

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.va_end(i8*) #13

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @fd_safer_flag(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %7 = load i32, i32* %3, align 4
  %8 = icmp sle i32 0, %7
  br i1 %8, label %9, label %23

9:                                                ; preds = %2
  %10 = load i32, i32* %3, align 4
  %11 = icmp sle i32 %10, 2
  br i1 %11, label %12, label %23

12:                                               ; preds = %9
  %13 = load i32, i32* %3, align 4
  %14 = load i32, i32* %4, align 4
  %15 = call i32 @dup_safer_flag(i32 %13, i32 %14)
  store i32 %15, i32* %5, align 4
  %16 = call i32* @__error()
  %17 = load i32, i32* %16, align 4
  store i32 %17, i32* %6, align 4
  %18 = load i32, i32* %3, align 4
  %19 = call i32 @"\01_close"(i32 %18)
  %20 = load i32, i32* %6, align 4
  %21 = call i32* @__error()
  store i32 %20, i32* %21, align 4
  %22 = load i32, i32* %5, align 4
  store i32 %22, i32* %3, align 4
  br label %23

23:                                               ; preds = %12, %9, %2
  %24 = load i32, i32* %3, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @fd_safer(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %5 = load i32, i32* %2, align 4
  %6 = icmp sle i32 0, %5
  br i1 %6, label %7, label %20

7:                                                ; preds = %1
  %8 = load i32, i32* %2, align 4
  %9 = icmp sle i32 %8, 2
  br i1 %9, label %10, label %20

10:                                               ; preds = %7
  %11 = load i32, i32* %2, align 4
  %12 = call i32 @dup_safer(i32 %11)
  store i32 %12, i32* %3, align 4
  %13 = call i32* @__error()
  %14 = load i32, i32* %13, align 4
  store i32 %14, i32* %4, align 4
  %15 = load i32, i32* %2, align 4
  %16 = call i32 @"\01_close"(i32 %15)
  %17 = load i32, i32* %4, align 4
  %18 = call i32* @__error()
  store i32 %17, i32* %18, align 4
  %19 = load i32, i32* %3, align 4
  store i32 %19, i32* %2, align 4
  br label %20

20:                                               ; preds = %10, %7, %1
  %21 = load i32, i32* %2, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @rpl_fflush(%struct.__sFILE* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.__sFILE*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store %struct.__sFILE* %0, %struct.__sFILE** %3, align 8
  %8 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %9 = icmp eq %struct.__sFILE* %8, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %12 = call zeroext i1 @freading(%struct.__sFILE* %11) #25
  br i1 %12, label %16, label %13

13:                                               ; preds = %10, %1
  %14 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %15 = call i32 @fflush(%struct.__sFILE* %14)
  store i32 %15, i32* %2, align 4
  br label %40

16:                                               ; preds = %10
  %17 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %18 = call i64 @rpl_ftello(%struct.__sFILE* %17)
  store i64 %18, i64* %4, align 8
  %19 = load i64, i64* %4, align 8
  %20 = icmp eq i64 %19, -1
  br i1 %20, label %21, label %23

21:                                               ; preds = %16
  %22 = call i32* @__error()
  store i32 9, i32* %22, align 4
  store i32 -1, i32* %2, align 4
  br label %40

23:                                               ; preds = %16
  %24 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  call void @clear_ungetc_buffer(%struct.__sFILE* %24)
  %25 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %26 = call i32 @rpl_fpurge(%struct.__sFILE* %25)
  store i32 %26, i32* %5, align 4
  %27 = load i32, i32* %5, align 4
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %23
  %30 = load i32, i32* %5, align 4
  store i32 %30, i32* %2, align 4
  br label %40

31:                                               ; preds = %23
  %32 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %33 = call i32 @disable_seek_optimization(%struct.__sFILE* %32)
  store i32 %33, i32* %6, align 4
  %34 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %35 = load i64, i64* %4, align 8
  %36 = call i32 @rpl_fseeko(%struct.__sFILE* %34, i64 %35, i32 0)
  store i32 %36, i32* %7, align 4
  %37 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %38 = load i32, i32* %6, align 4
  call void @restore_seek_optimization(%struct.__sFILE* %37, i32 %38)
  %39 = load i32, i32* %7, align 4
  store i32 %39, i32* %2, align 4
  br label %40

40:                                               ; preds = %31, %29, %21, %13
  %41 = load i32, i32* %2, align 4
  ret i32 %41
}

declare i32 @fflush(%struct.__sFILE*) #4

declare i64 @rpl_ftello(%struct.__sFILE*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @clear_ungetc_buffer(%struct.__sFILE* %0) #0 {
  %2 = alloca %struct.__sFILE*, align 8
  store %struct.__sFILE* %0, %struct.__sFILE** %2, align 8
  %3 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %4 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %3, i32 0, i32 12
  %5 = getelementptr inbounds %struct.__sbuf, %struct.__sbuf* %4, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %19

8:                                                ; preds = %1
  %9 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %10 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %9, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %13 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %12, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = sext i32 %11 to i64
  %16 = getelementptr inbounds i8, i8* %14, i64 %15
  store i8* %16, i8** %13, align 8
  %17 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %18 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %17, i32 0, i32 1
  store i32 0, i32* %18, align 8
  br label %19

19:                                               ; preds = %8, %1
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @disable_seek_optimization(%struct.__sFILE* %0) #0 {
  %2 = alloca %struct.__sFILE*, align 8
  %3 = alloca i32, align 4
  store %struct.__sFILE* %0, %struct.__sFILE** %2, align 8
  %4 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %5 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %4, i32 0, i32 3
  %6 = load i16, i16* %5, align 8
  %7 = sext i16 %6 to i32
  %8 = and i32 %7, 3072
  store i32 %8, i32* %3, align 4
  %9 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %10 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %9, i32 0, i32 3
  %11 = load i16, i16* %10, align 8
  %12 = sext i16 %11 to i32
  %13 = and i32 %12, -1025
  %14 = or i32 %13, 2048
  %15 = trunc i32 %14 to i16
  %16 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %17 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %16, i32 0, i32 3
  store i16 %15, i16* %17, align 8
  %18 = load i32, i32* %3, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal void @restore_seek_optimization(%struct.__sFILE* %0, i32 %1) #0 {
  %3 = alloca %struct.__sFILE*, align 8
  %4 = alloca i32, align 4
  store %struct.__sFILE* %0, %struct.__sFILE** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %6 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %5, i32 0, i32 3
  %7 = load i16, i16* %6, align 8
  %8 = sext i16 %7 to i32
  %9 = and i32 %8, -3073
  %10 = load i32, i32* %4, align 4
  %11 = or i32 %9, %10
  %12 = trunc i32 %11 to i16
  %13 = load %struct.__sFILE*, %struct.__sFILE** %3, align 8
  %14 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %13, i32 0, i32 3
  store i16 %12, i16* %14, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define noalias i8* @mfile_name_concat(i8* %0, i8* %1, i8** %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8** %2, i8*** %7, align 8
  %15 = load i8*, i8** %5, align 8
  %16 = call i8* @last_component(i8* %15) #25
  store i8* %16, i8** %8, align 8
  %17 = load i8*, i8** %8, align 8
  %18 = call i64 @base_len(i8* %17) #25
  store i64 %18, i64* %9, align 8
  %19 = load i8*, i8** %8, align 8
  %20 = load i8*, i8** %5, align 8
  %21 = ptrtoint i8* %19 to i64
  %22 = ptrtoint i8* %20 to i64
  %23 = sub i64 %21, %22
  %24 = load i64, i64* %9, align 8
  %25 = add i64 %23, %24
  store i64 %25, i64* %10, align 8
  %26 = load i8*, i8** %6, align 8
  %27 = call i64 @strlen(i8* %26)
  store i64 %27, i64* %11, align 8
  store i8 0, i8* %12, align 1
  %28 = load i64, i64* %9, align 8
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %45

30:                                               ; preds = %3
  %31 = load i8*, i8** %5, align 8
  %32 = load i64, i64* %10, align 8
  %33 = sub i64 %32, 1
  %34 = getelementptr inbounds i8, i8* %31, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp eq i32 %36, 47
  br i1 %37, label %44, label %38

38:                                               ; preds = %30
  %39 = load i8*, i8** %6, align 8
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp eq i32 %41, 47
  br i1 %42, label %44, label %43

43:                                               ; preds = %38
  store i8 47, i8* %12, align 1
  br label %44

44:                                               ; preds = %43, %38, %30
  br label %52

45:                                               ; preds = %3
  %46 = load i8*, i8** %6, align 8
  %47 = load i8, i8* %46, align 1
  %48 = sext i8 %47 to i32
  %49 = icmp eq i32 %48, 47
  br i1 %49, label %50, label %51

50:                                               ; preds = %45
  store i8 46, i8* %12, align 1
  br label %51

51:                                               ; preds = %50, %45
  br label %52

52:                                               ; preds = %51, %44
  %53 = load i64, i64* %10, align 8
  %54 = load i8, i8* %12, align 1
  %55 = sext i8 %54 to i32
  %56 = icmp ne i32 %55, 0
  %57 = zext i1 %56 to i32
  %58 = sext i32 %57 to i64
  %59 = add i64 %53, %58
  %60 = load i64, i64* %11, align 8
  %61 = add i64 %59, %60
  %62 = add i64 %61, 1
  %63 = call align 16 i8* @malloc(i64 %62) #26
  store i8* %63, i8** %13, align 8
  %64 = load i8*, i8** %13, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %66, label %67

66:                                               ; preds = %52
  store i8* null, i8** %4, align 8
  br label %101

67:                                               ; preds = %52
  %68 = load i8*, i8** %13, align 8
  %69 = load i8*, i8** %5, align 8
  %70 = load i64, i64* %10, align 8
  %71 = load i8*, i8** %13, align 8
  %72 = call i64 @llvm.objectsize.i64.p0i8(i8* %71, i1 false, i1 true, i1 false)
  %73 = call i8* @__memcpy_chk(i8* %68, i8* %69, i64 %70, i64 %72) #24
  %74 = load i64, i64* %10, align 8
  %75 = getelementptr inbounds i8, i8* %73, i64 %74
  store i8* %75, i8** %14, align 8
  %76 = load i8, i8* %12, align 1
  %77 = load i8*, i8** %14, align 8
  store i8 %76, i8* %77, align 1
  %78 = load i8, i8* %12, align 1
  %79 = sext i8 %78 to i32
  %80 = icmp ne i32 %79, 0
  %81 = zext i1 %80 to i32
  %82 = load i8*, i8** %14, align 8
  %83 = sext i32 %81 to i64
  %84 = getelementptr inbounds i8, i8* %82, i64 %83
  store i8* %84, i8** %14, align 8
  %85 = load i8**, i8*** %7, align 8
  %86 = icmp ne i8** %85, null
  br i1 %86, label %87, label %90

87:                                               ; preds = %67
  %88 = load i8*, i8** %14, align 8
  %89 = load i8**, i8*** %7, align 8
  store i8* %88, i8** %89, align 8
  br label %90

90:                                               ; preds = %87, %67
  %91 = load i8*, i8** %14, align 8
  %92 = load i8*, i8** %6, align 8
  %93 = load i64, i64* %11, align 8
  %94 = load i8*, i8** %14, align 8
  %95 = call i64 @llvm.objectsize.i64.p0i8(i8* %94, i1 false, i1 true, i1 false)
  %96 = call i8* @__memcpy_chk(i8* %91, i8* %92, i64 %93, i64 %95) #24
  %97 = load i64, i64* %11, align 8
  %98 = getelementptr inbounds i8, i8* %96, i64 %97
  store i8* %98, i8** %14, align 8
  %99 = load i8*, i8** %14, align 8
  store i8 0, i8* %99, align 1
  %100 = load i8*, i8** %13, align 8
  store i8* %100, i8** %4, align 8
  br label %101

101:                                              ; preds = %90, %66
  %102 = load i8*, i8** %4, align 8
  ret i8* %102
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @rpl_fprintf(%struct.__sFILE* nonnull %0, i8* nonnull %1, ...) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.__sFILE*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca [2000 x i8], align 16
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.__sFILE* %0, %struct.__sFILE** %4, align 8
  store i8* %1, i8** %5, align 8
  store i64 2000, i64* %9, align 8
  %11 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %10, i64 0, i64 0
  %12 = bitcast %struct.__va_list_tag* %11 to i8*
  call void @llvm.va_start(i8* %12)
  %13 = getelementptr inbounds [2000 x i8], [2000 x i8]* %6, i64 0, i64 0
  %14 = load i8*, i8** %5, align 8
  %15 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %10, i64 0, i64 0
  %16 = call i8* @vasnprintf(i8* %13, i64* %9, i8* %14, %struct.__va_list_tag* %15)
  store i8* %16, i8** %7, align 8
  %17 = load i64, i64* %9, align 8
  store i64 %17, i64* %8, align 8
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %10, i64 0, i64 0
  %19 = bitcast %struct.__va_list_tag* %18 to i8*
  call void @llvm.va_end(i8* %19)
  %20 = load i8*, i8** %7, align 8
  %21 = icmp ne i8* %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %2
  %23 = load %struct.__sFILE*, %struct.__sFILE** %4, align 8
  call void @fseterr(%struct.__sFILE* %23)
  store i32 -1, i32* %3, align 4
  br label %53

24:                                               ; preds = %2
  %25 = load i8*, i8** %7, align 8
  %26 = load i64, i64* %8, align 8
  %27 = load %struct.__sFILE*, %struct.__sFILE** %4, align 8
  %28 = call i64 @"\01_fwrite"(i8* %25, i64 1, i64 %26, %struct.__sFILE* %27)
  %29 = load i64, i64* %8, align 8
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %31, label %38

31:                                               ; preds = %24
  %32 = load i8*, i8** %7, align 8
  %33 = getelementptr inbounds [2000 x i8], [2000 x i8]* %6, i64 0, i64 0
  %34 = icmp ne i8* %32, %33
  br i1 %34, label %35, label %37

35:                                               ; preds = %31
  %36 = load i8*, i8** %7, align 8
  call void @rpl_free(i8* %36)
  br label %37

37:                                               ; preds = %35, %31
  store i32 -1, i32* %3, align 4
  br label %53

38:                                               ; preds = %24
  %39 = load i8*, i8** %7, align 8
  %40 = getelementptr inbounds [2000 x i8], [2000 x i8]* %6, i64 0, i64 0
  %41 = icmp ne i8* %39, %40
  br i1 %41, label %42, label %44

42:                                               ; preds = %38
  %43 = load i8*, i8** %7, align 8
  call void @rpl_free(i8* %43)
  br label %44

44:                                               ; preds = %42, %38
  %45 = load i64, i64* %8, align 8
  %46 = icmp ugt i64 %45, 2147483647
  br i1 %46, label %47, label %50

47:                                               ; preds = %44
  %48 = call i32* @__error()
  store i32 84, i32* %48, align 4
  %49 = load %struct.__sFILE*, %struct.__sFILE** %4, align 8
  call void @fseterr(%struct.__sFILE* %49)
  store i32 -1, i32* %3, align 4
  br label %53

50:                                               ; preds = %44
  %51 = load i64, i64* %8, align 8
  %52 = trunc i64 %51 to i32
  store i32 %52, i32* %3, align 4
  br label %53

53:                                               ; preds = %50, %47, %37, %22
  %54 = load i32, i32* %3, align 4
  ret i32 %54
}

declare i8* @vasnprintf(i8*, i64*, i8*, %struct.__va_list_tag*) #4

declare i64 @"\01_fwrite"(i8*, i64, i64, %struct.__sFILE*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @rpl_fpurge(%struct.__sFILE* nonnull %0) #0 {
  %2 = alloca %struct.__sFILE*, align 8
  %3 = alloca i32, align 4
  store %struct.__sFILE* %0, %struct.__sFILE** %2, align 8
  %4 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %5 = call i32 @fpurge(%struct.__sFILE* %4)
  store i32 %5, i32* %3, align 4
  %6 = load i32, i32* %3, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %19

8:                                                ; preds = %1
  %9 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %10 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %9, i32 0, i32 3
  %11 = load i16, i16* %10, align 8
  %12 = sext i16 %11 to i32
  %13 = and i32 %12, 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %8
  %16 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %17 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %16, i32 0, i32 2
  store i32 0, i32* %17, align 4
  br label %18

18:                                               ; preds = %15, %8
  br label %19

19:                                               ; preds = %18, %1
  %20 = load i32, i32* %3, align 4
  ret i32 %20
}

declare i32 @fpurge(%struct.__sFILE*) #4

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define zeroext i1 @freading(%struct.__sFILE* %0) #10 {
  %2 = alloca %struct.__sFILE*, align 8
  store %struct.__sFILE* %0, %struct.__sFILE** %2, align 8
  %3 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %4 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %3, i32 0, i32 3
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = and i32 %6, 4
  %8 = icmp ne i32 %7, 0
  ret i1 %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @rpl_free(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %4 = call i32* @__error()
  %5 = load i32, i32* %4, align 4
  store i32 %5, i32* %3, align 4
  %6 = load i8*, i8** %2, align 8
  call void @free(i8* %6)
  %7 = load i32, i32* %3, align 4
  %8 = call i32* @__error()
  store i32 %7, i32* %8, align 4
  ret void
}

declare void @free(i8*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @rpl_fseek(%struct.__sFILE* nonnull %0, i64 %1, i32 %2) #0 {
  %4 = alloca %struct.__sFILE*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  store %struct.__sFILE* %0, %struct.__sFILE** %4, align 8
  store i64 %1, i64* %5, align 8
  store i32 %2, i32* %6, align 4
  %7 = load %struct.__sFILE*, %struct.__sFILE** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load i32, i32* %6, align 4
  %10 = call i32 @rpl_fseeko(%struct.__sFILE* %7, i64 %8, i32 %9)
  ret i32 %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @rpl_fseeko(%struct.__sFILE* nonnull %0, i64 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.__sFILE*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca %union.anon.37, align 8
  store %struct.__sFILE* %0, %struct.__sFILE** %5, align 8
  store i64 %1, i64* %6, align 8
  store i32 %2, i32* %7, align 4
  %10 = load %struct.__sFILE*, %struct.__sFILE** %5, align 8
  %11 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %10, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = load %struct.__sFILE*, %struct.__sFILE** %5, align 8
  %14 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %13, i32 0, i32 5
  %15 = getelementptr inbounds %struct.__sbuf, %struct.__sbuf* %14, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %12, %16
  br i1 %17, label %18, label %82

18:                                               ; preds = %3
  %19 = load %struct.__sFILE*, %struct.__sFILE** %5, align 8
  %20 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %19, i32 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %82

23:                                               ; preds = %18
  %24 = load %struct.__sFILE*, %struct.__sFILE** %5, align 8
  %25 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %24, i32 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.__sFILE*, %struct.__sFILE** %5, align 8
  %28 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %27, i32 0, i32 3
  %29 = load i16, i16* %28, align 8
  %30 = sext i16 %29 to i32
  %31 = and i32 %30, 7
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %38

33:                                               ; preds = %23
  %34 = load %struct.__sFILE*, %struct.__sFILE** %5, align 8
  %35 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %34, i32 0, i32 5
  %36 = getelementptr inbounds %struct.__sbuf, %struct.__sbuf* %35, i32 0, i32 1
  %37 = load i32, i32* %36, align 8
  br label %39

38:                                               ; preds = %23
  br label %39

39:                                               ; preds = %38, %33
  %40 = phi i32 [ %37, %33 ], [ 0, %38 ]
  %41 = icmp eq i32 %26, %40
  br i1 %41, label %42, label %82

42:                                               ; preds = %39
  %43 = load %struct.__sFILE*, %struct.__sFILE** %5, align 8
  %44 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %43, i32 0, i32 12
  %45 = getelementptr inbounds %struct.__sbuf, %struct.__sbuf* %44, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = icmp eq i8* %46, null
  br i1 %47, label %48, label %82

48:                                               ; preds = %42
  %49 = load %struct.__sFILE*, %struct.__sFILE** %5, align 8
  %50 = call i32 @fileno(%struct.__sFILE* %49)
  %51 = load i64, i64* %6, align 8
  %52 = load i32, i32* %7, align 4
  %53 = call i64 @rpl_lseek(i32 %50, i64 %51, i32 %52)
  store i64 %53, i64* %8, align 8
  %54 = load i64, i64* %8, align 8
  %55 = icmp eq i64 %54, -1
  br i1 %55, label %56, label %63

56:                                               ; preds = %48
  %57 = load %struct.__sFILE*, %struct.__sFILE** %5, align 8
  %58 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %57, i32 0, i32 3
  %59 = load i16, i16* %58, align 8
  %60 = sext i16 %59 to i32
  %61 = and i32 %60, -4097
  %62 = trunc i32 %61 to i16
  store i16 %62, i16* %58, align 8
  store i32 -1, i32* %4, align 4
  br label %87

63:                                               ; preds = %48
  %64 = load i64, i64* %8, align 8
  %65 = bitcast %union.anon.37* %9 to i64*
  store i64 %64, i64* %65, align 8
  %66 = bitcast %union.anon.37* %9 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = load %struct.__sFILE*, %struct.__sFILE** %5, align 8
  %69 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %68, i32 0, i32 19
  store i64 %67, i64* %69, align 8
  %70 = load %struct.__sFILE*, %struct.__sFILE** %5, align 8
  %71 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %70, i32 0, i32 3
  %72 = load i16, i16* %71, align 8
  %73 = sext i16 %72 to i32
  %74 = or i32 %73, 4096
  %75 = trunc i32 %74 to i16
  store i16 %75, i16* %71, align 8
  %76 = load %struct.__sFILE*, %struct.__sFILE** %5, align 8
  %77 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %76, i32 0, i32 3
  %78 = load i16, i16* %77, align 8
  %79 = sext i16 %78 to i32
  %80 = and i32 %79, -33
  %81 = trunc i32 %80 to i16
  store i16 %81, i16* %77, align 8
  store i32 0, i32* %4, align 4
  br label %87

82:                                               ; preds = %42, %39, %18, %3
  %83 = load %struct.__sFILE*, %struct.__sFILE** %5, align 8
  %84 = load i64, i64* %6, align 8
  %85 = load i32, i32* %7, align 4
  %86 = call i32 @fseeko(%struct.__sFILE* %83, i64 %84, i32 %85)
  store i32 %86, i32* %4, align 4
  br label %87

87:                                               ; preds = %82, %63, %56
  %88 = load i32, i32* %4, align 4
  ret i32 %88
}

declare i32 @fseeko(%struct.__sFILE*, i64, i32) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @fseterr(%struct.__sFILE* %0) #0 {
  %2 = alloca %struct.__sFILE*, align 8
  store %struct.__sFILE* %0, %struct.__sFILE** %2, align 8
  %3 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %4 = getelementptr inbounds %struct.__sFILE, %struct.__sFILE* %3, i32 0, i32 3
  %5 = load i16, i16* %4, align 8
  %6 = sext i16 %5 to i32
  %7 = or i32 %6, 64
  %8 = trunc i32 %7 to i16
  store i16 %8, i16* %4, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @gettime(%struct.timespec* nonnull %0) #0 {
  %2 = alloca %struct.timespec*, align 8
  store %struct.timespec* %0, %struct.timespec** %2, align 8
  %3 = load %struct.timespec*, %struct.timespec** %2, align 8
  %4 = call i32 @clock_gettime(i32 0, %struct.timespec* %3)
  ret void
}

declare i32 @clock_gettime(i32, %struct.timespec*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define { i64, i64 } @current_timespec() #0 {
  %1 = alloca %struct.timespec, align 8
  call void @gettime(%struct.timespec* %1)
  %2 = bitcast %struct.timespec* %1 to { i64, i64 }*
  %3 = load { i64, i64 }, { i64, i64 }* %2, align 8
  ret { i64, i64 } %3
}

; Function Attrs: cold noinline nounwind optnone ssp uwtable
define i8* @_gl_alloc_nomem() #14 {
  %1 = call i32* @__error()
  store i32 12, i32* %1, align 4
  ret i8* null
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define noalias i8* @imalloc(i64 %0) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = icmp ule i64 %3, -1
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = load i64, i64* %2, align 8
  %7 = call align 16 i8* @malloc(i64 %6) #26
  br label %10

8:                                                ; preds = %1
  %9 = call i8* @_gl_alloc_nomem() #30
  br label %10

10:                                               ; preds = %8, %5
  %11 = phi i8* [ %7, %5 ], [ %9, %8 ]
  ret i8* %11
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i8* @irealloc(i8* %0, i64 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  %6 = icmp ule i64 %5, -1
  br i1 %6, label %7, label %17

7:                                                ; preds = %2
  %8 = load i8*, i8** %3, align 8
  %9 = load i64, i64* %4, align 8
  %10 = load i64, i64* %4, align 8
  %11 = icmp ne i64 %10, 0
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i32
  %14 = sext i32 %13 to i64
  %15 = or i64 %9, %14
  %16 = call align 16 i8* @realloc(i8* %8, i64 %15) #31
  br label %19

17:                                               ; preds = %2
  %18 = call i8* @_gl_alloc_nomem() #30
  br label %19

19:                                               ; preds = %17, %7
  %20 = phi i8* [ %16, %7 ], [ %18, %17 ]
  ret i8* %20
}

; Function Attrs: allocsize(1)
declare align 16 i8* @realloc(i8*, i64) #15

; Function Attrs: noinline nounwind optnone ssp uwtable
define noalias i8* @icalloc(i64 %0, i64 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = icmp ult i64 -1, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = load i64, i64* %5, align 8
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = call i8* @_gl_alloc_nomem() #30
  store i8* %12, i8** %3, align 8
  br label %27

13:                                               ; preds = %8
  store i64 0, i64* %4, align 8
  br label %14

14:                                               ; preds = %13, %2
  %15 = load i64, i64* %5, align 8
  %16 = icmp ult i64 -1, %15
  br i1 %16, label %17, label %23

17:                                               ; preds = %14
  %18 = load i64, i64* %4, align 8
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %17
  %21 = call i8* @_gl_alloc_nomem() #30
  store i8* %21, i8** %3, align 8
  br label %27

22:                                               ; preds = %17
  store i64 0, i64* %5, align 8
  br label %23

23:                                               ; preds = %22, %14
  %24 = load i64, i64* %4, align 8
  %25 = load i64, i64* %5, align 8
  %26 = call align 16 i8* @calloc(i64 %24, i64 %25) #28
  store i8* %26, i8** %3, align 8
  br label %27

27:                                               ; preds = %23, %20, %11
  %28 = load i8*, i8** %3, align 8
  ret i8* %28
}

; Function Attrs: allocsize(0,1)
declare align 16 i8* @calloc(i64, i64) #16

; Function Attrs: noinline nounwind optnone ssp uwtable
define i8* @ireallocarray(i8* %0, i64 %1, i64 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i64, i64* %5, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %12, label %9

9:                                                ; preds = %3
  %10 = load i64, i64* %6, align 8
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %9, %3
  store i64 1, i64* %6, align 8
  store i64 1, i64* %5, align 8
  br label %13

13:                                               ; preds = %12, %9
  %14 = load i64, i64* %5, align 8
  %15 = icmp ule i64 %14, -1
  br i1 %15, label %16, label %24

16:                                               ; preds = %13
  %17 = load i64, i64* %6, align 8
  %18 = icmp ule i64 %17, -1
  br i1 %18, label %19, label %24

19:                                               ; preds = %16
  %20 = load i8*, i8** %4, align 8
  %21 = load i64, i64* %5, align 8
  %22 = load i64, i64* %6, align 8
  %23 = call i8* @reallocarray(i8* %20, i64 %21, i64 %22)
  br label %26

24:                                               ; preds = %16, %13
  %25 = call i8* @_gl_alloc_nomem() #30
  br label %26

26:                                               ; preds = %24, %19
  %27 = phi i8* [ %23, %19 ], [ %25, %24 ]
  ret i8* %27
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @glthread_recursive_lock_init_multithreaded(%struct._opaque_pthread_mutex_t* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._opaque_pthread_mutex_t*, align 8
  %4 = alloca %struct._opaque_pthread_mutexattr_t, align 8
  %5 = alloca i32, align 4
  store %struct._opaque_pthread_mutex_t* %0, %struct._opaque_pthread_mutex_t** %3, align 8
  %6 = call i32 @pthread_mutexattr_init(%struct._opaque_pthread_mutexattr_t* %4)
  store i32 %6, i32* %5, align 4
  %7 = load i32, i32* %5, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %5, align 4
  store i32 %10, i32* %2, align 4
  br label %33

11:                                               ; preds = %1
  %12 = call i32 @pthread_mutexattr_settype(%struct._opaque_pthread_mutexattr_t* %4, i32 2)
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %11
  %16 = call i32 @"\01_pthread_mutexattr_destroy"(%struct._opaque_pthread_mutexattr_t* %4)
  %17 = load i32, i32* %5, align 4
  store i32 %17, i32* %2, align 4
  br label %33

18:                                               ; preds = %11
  %19 = load %struct._opaque_pthread_mutex_t*, %struct._opaque_pthread_mutex_t** %3, align 8
  %20 = call i32 @pthread_mutex_init(%struct._opaque_pthread_mutex_t* %19, %struct._opaque_pthread_mutexattr_t* %4)
  store i32 %20, i32* %5, align 4
  %21 = load i32, i32* %5, align 4
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %18
  %24 = call i32 @"\01_pthread_mutexattr_destroy"(%struct._opaque_pthread_mutexattr_t* %4)
  %25 = load i32, i32* %5, align 4
  store i32 %25, i32* %2, align 4
  br label %33

26:                                               ; preds = %18
  %27 = call i32 @"\01_pthread_mutexattr_destroy"(%struct._opaque_pthread_mutexattr_t* %4)
  store i32 %27, i32* %5, align 4
  %28 = load i32, i32* %5, align 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %26
  %31 = load i32, i32* %5, align 4
  store i32 %31, i32* %2, align 4
  br label %33

32:                                               ; preds = %26
  store i32 0, i32* %2, align 4
  br label %33

33:                                               ; preds = %32, %30, %23, %15, %9
  %34 = load i32, i32* %2, align 4
  ret i32 %34
}

declare i32 @pthread_mutexattr_init(%struct._opaque_pthread_mutexattr_t*) #4

declare i32 @pthread_mutexattr_settype(%struct._opaque_pthread_mutexattr_t*, i32) #4

declare i32 @"\01_pthread_mutexattr_destroy"(%struct._opaque_pthread_mutexattr_t*) #4

declare i32 @pthread_mutex_init(%struct._opaque_pthread_mutex_t*, %struct._opaque_pthread_mutexattr_t*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @glthread_once_singlethreaded(%struct._opaque_pthread_mutexattr_t* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._opaque_pthread_mutexattr_t*, align 8
  %4 = alloca i8*, align 8
  store %struct._opaque_pthread_mutexattr_t* %0, %struct._opaque_pthread_mutexattr_t** %3, align 8
  %5 = load %struct._opaque_pthread_mutexattr_t*, %struct._opaque_pthread_mutexattr_t** %3, align 8
  %6 = bitcast %struct._opaque_pthread_mutexattr_t* %5 to i8*
  store i8* %6, i8** %4, align 8
  %7 = load i8*, i8** %4, align 8
  %8 = load i8, i8* %7, align 1
  %9 = sext i8 %8 to i32
  %10 = load i8, i8* bitcast (%struct._opaque_pthread_mutexattr_t* @fresh_once to i8*), align 8
  %11 = sext i8 %10 to i32
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %13, label %19

13:                                               ; preds = %1
  %14 = load i8, i8* bitcast (%struct._opaque_pthread_mutexattr_t* @fresh_once to i8*), align 8
  %15 = sext i8 %14 to i32
  %16 = xor i32 %15, -1
  %17 = trunc i32 %16 to i8
  %18 = load i8*, i8** %4, align 8
  store i8 %17, i8* %18, align 1
  store i32 1, i32* %2, align 4
  br label %20

19:                                               ; preds = %1
  store i32 0, i32* %2, align 4
  br label %20

20:                                               ; preds = %19, %13
  %21 = load i32, i32* %2, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @glthread_once_multithreaded(%struct._opaque_pthread_mutexattr_t* %0, void ()* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct._opaque_pthread_mutexattr_t*, align 8
  %5 = alloca void ()*, align 8
  %6 = alloca i32, align 4
  store %struct._opaque_pthread_mutexattr_t* %0, %struct._opaque_pthread_mutexattr_t** %4, align 8
  store void ()* %1, void ()** %5, align 8
  %7 = load %struct._opaque_pthread_mutexattr_t*, %struct._opaque_pthread_mutexattr_t** %4, align 8
  %8 = load void ()*, void ()** %5, align 8
  %9 = call i32 @pthread_once(%struct._opaque_pthread_mutexattr_t* %7, void ()* %8)
  store i32 %9, i32* %6, align 4
  %10 = load i32, i32* %6, align 4
  %11 = icmp eq i32 %10, 78
  br i1 %11, label %12, label %19

12:                                               ; preds = %2
  %13 = load %struct._opaque_pthread_mutexattr_t*, %struct._opaque_pthread_mutexattr_t** %4, align 8
  %14 = call i32 @glthread_once_singlethreaded(%struct._opaque_pthread_mutexattr_t* %13)
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = load void ()*, void ()** %5, align 8
  call void %17()
  br label %18

18:                                               ; preds = %16, %12
  store i32 0, i32* %3, align 4
  br label %21

19:                                               ; preds = %2
  %20 = load i32, i32* %6, align 4
  store i32 %20, i32* %3, align 4
  br label %21

21:                                               ; preds = %19, %18
  %22 = load i32, i32* %3, align 4
  ret i32 %22
}

declare i32 @pthread_once(%struct._opaque_pthread_mutexattr_t*, void ()*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(0)
define noalias i8* @mmalloca(i64 %0) #17 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i64 %0, i64* %3, align 8
  store i64 31, i64* %4, align 8
  %13 = load i64, i64* %4, align 8
  %14 = add i64 1, %13
  %15 = trunc i64 %14 to i32
  store i32 %15, i32* %5, align 4
  %16 = load i64, i64* %3, align 8
  %17 = load i32, i32* %5, align 4
  %18 = zext i64 %16 to i65
  %19 = sext i32 %17 to i65
  %20 = call { i65, i1 } @llvm.sadd.with.overflow.i65(i65 %18, i65 %19)
  %21 = extractvalue { i65, i1 } %20, 1
  %22 = extractvalue { i65, i1 } %20, 0
  %23 = trunc i65 %22 to i64
  %24 = sext i64 %23 to i65
  %25 = icmp ne i65 %22, %24
  %26 = or i1 %21, %25
  store i64 %23, i64* %6, align 8
  br i1 %26, label %59, label %27

27:                                               ; preds = %1
  %28 = load i64, i64* %6, align 8
  %29 = icmp ult i64 9223372036854775807, %28
  br i1 %29, label %59, label %30

30:                                               ; preds = %27
  %31 = load i64, i64* %6, align 8
  %32 = call align 16 i8* @malloc(i64 %31) #26
  store i8* %32, i8** %7, align 8
  %33 = load i8*, i8** %7, align 8
  %34 = icmp ne i8* %33, null
  br i1 %34, label %35, label %58

35:                                               ; preds = %30
  %36 = load i8*, i8** %7, align 8
  %37 = ptrtoint i8* %36 to i64
  store i64 %37, i64* %8, align 8
  %38 = load i64, i64* %8, align 8
  %39 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %38, i64 16)
  %40 = extractvalue { i64, i1 } %39, 1
  %41 = extractvalue { i64, i1 } %39, 0
  store i64 %41, i64* %9, align 8
  %42 = load i64, i64* %9, align 8
  %43 = load i64, i64* %4, align 8
  %44 = xor i64 %43, -1
  %45 = and i64 %42, %44
  %46 = add i64 %45, 16
  %47 = load i64, i64* %8, align 8
  %48 = sub i64 %46, %47
  store i64 %48, i64* %10, align 8
  %49 = load i8*, i8** %7, align 8
  %50 = load i64, i64* %10, align 8
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  store i8* %51, i8** %11, align 8
  %52 = load i8*, i8** %11, align 8
  store i8* %52, i8** %12, align 8
  %53 = load i64, i64* %10, align 8
  %54 = trunc i64 %53 to i8
  %55 = load i8*, i8** %12, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 -1
  store i8 %54, i8* %56, align 1
  %57 = load i8*, i8** %12, align 8
  store i8* %57, i8** %2, align 8
  br label %60

58:                                               ; preds = %30
  br label %59

59:                                               ; preds = %58, %27, %1
  store i8* null, i8** %2, align 8
  br label %60

60:                                               ; preds = %59, %35
  %61 = load i8*, i8** %2, align 8
  ret i8* %61
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare { i65, i1 } @llvm.sadd.with.overflow.i65(i65, i65) #2

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @freea(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = ptrtoint i8* %4 to i64
  %6 = and i64 %5, 15
  %7 = icmp ne i64 %6, 0
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  call void @abort() #29
  unreachable

9:                                                ; preds = %1
  %10 = load i8*, i8** %2, align 8
  %11 = ptrtoint i8* %10 to i64
  %12 = and i64 %11, 16
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %14, label %24

14:                                               ; preds = %9
  %15 = load i8*, i8** %2, align 8
  %16 = load i8*, i8** %2, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 -1
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  %20 = sext i32 %19 to i64
  %21 = sub i64 0, %20
  %22 = getelementptr inbounds i8, i8* %15, i64 %21
  store i8* %22, i8** %3, align 8
  %23 = load i8*, i8** %3, align 8
  call void @rpl_free(i8* %23)
  br label %24

24:                                               ; preds = %14, %9
  ret void
}

; Function Attrs: cold noreturn
declare void @abort() #18

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @open_safer(i8* %0, i32 %1, ...) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  %6 = alloca [1 x %struct.__va_list_tag], align 16
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  store i16 0, i16* %5, align 2
  %7 = load i32, i32* %4, align 4
  %8 = and i32 %7, 512
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %34

10:                                               ; preds = %2
  %11 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0
  %12 = bitcast %struct.__va_list_tag* %11 to i8*
  call void @llvm.va_start(i8* %12)
  %13 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0
  %14 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %13, i32 0, i32 0
  %15 = load i32, i32* %14, align 16
  %16 = icmp ule i32 %15, 40
  br i1 %16, label %17, label %23

17:                                               ; preds = %10
  %18 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %13, i32 0, i32 3
  %19 = load i8*, i8** %18, align 16
  %20 = getelementptr i8, i8* %19, i32 %15
  %21 = bitcast i8* %20 to i32*
  %22 = add i32 %15, 8
  store i32 %22, i32* %14, align 16
  br label %28

23:                                               ; preds = %10
  %24 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %13, i32 0, i32 2
  %25 = load i8*, i8** %24, align 8
  %26 = bitcast i8* %25 to i32*
  %27 = getelementptr i8, i8* %25, i32 8
  store i8* %27, i8** %24, align 8
  br label %28

28:                                               ; preds = %23, %17
  %29 = phi i32* [ %21, %17 ], [ %26, %23 ]
  %30 = load i32, i32* %29, align 4
  %31 = trunc i32 %30 to i16
  store i16 %31, i16* %5, align 2
  %32 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %6, i64 0, i64 0
  %33 = bitcast %struct.__va_list_tag* %32 to i8*
  call void @llvm.va_end(i8* %33)
  br label %34

34:                                               ; preds = %28, %2
  %35 = load i8*, i8** %3, align 8
  %36 = load i32, i32* %4, align 4
  %37 = load i16, i16* %5, align 2
  %38 = zext i16 %37 to i32
  %39 = call i32 (i8*, i32, ...) @rpl_open(i8* %35, i32 %36, i32 %38)
  %40 = call i32 @fd_safer(i32 %39)
  ret i32 %40
}

declare i32 @rpl_open(i8*, i32, ...) #4

; Function Attrs: noinline noreturn nounwind optnone ssp uwtable
define void @openat_save_fail(i32 %0) #5 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load volatile i32, i32* @exit_failure, align 4
  %4 = load i32, i32* %2, align 4
  call void (i32, i32, i8*, ...) @error(i32 %3, i32 %4, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.278, i64 0, i64 0))
  call void @abort() #29
  unreachable
}

declare void @error(i32, i32, i8*, ...) #4

; Function Attrs: noinline noreturn nounwind optnone ssp uwtable
define void @openat_restore_fail(i32 %0) #5 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load volatile i32, i32* @exit_failure, align 4
  %4 = load i32, i32* %2, align 4
  call void (i32, i32, i8*, ...) @error(i32 %3, i32 %4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1.279, i64 0, i64 0))
  call void @abort() #29
  unreachable
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i8* @openat_proc_name(i8* %0, i32 %1, i8* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [32 x i8], align 16
  %12 = alloca i64, align 8
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i8* %2, i8** %7, align 8
  %13 = load i8*, i8** %5, align 8
  store i8* %13, i8** %8, align 8
  %14 = load i8*, i8** %7, align 8
  %15 = load i8, i8* %14, align 1
  %16 = icmp ne i8 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %3
  %18 = load i8*, i8** %5, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 0
  store i8 0, i8* %19, align 1
  %20 = load i8*, i8** %5, align 8
  store i8* %20, i8** %4, align 8
  br label %77

21:                                               ; preds = %3
  %22 = load i32, i32* @openat_proc_name.proc_status, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %41, label %24

24:                                               ; preds = %21
  %25 = call i32 (i8*, i32, ...) @rpl_open(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.280, i64 0, i64 0), i32 17956868)
  store i32 %25, i32* %10, align 4
  %26 = load i32, i32* %10, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %24
  store i32 -1, i32* @openat_proc_name.proc_status, align 4
  br label %40

29:                                               ; preds = %24
  %30 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %31 = load i32, i32* %10, align 4
  %32 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %30, i32 0, i64 32, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1.281, i64 0, i64 0), i32 %31)
  %33 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %34 = call i32 @access(i8* %33, i32 0)
  %35 = icmp ne i32 %34, 0
  %36 = zext i1 %35 to i64
  %37 = select i1 %35, i32 -1, i32 1
  store i32 %37, i32* @openat_proc_name.proc_status, align 4
  %38 = load i32, i32* %10, align 4
  %39 = call i32 @"\01_close"(i32 %38)
  br label %40

40:                                               ; preds = %29, %28
  br label %41

41:                                               ; preds = %40, %21
  %42 = load i32, i32* @openat_proc_name.proc_status, align 4
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %41
  store i8* null, i8** %4, align 8
  br label %77

45:                                               ; preds = %41
  %46 = load i8*, i8** %7, align 8
  %47 = call i64 @strlen(i8* %46)
  %48 = add i64 27, %47
  store i64 %48, i64* %12, align 8
  %49 = load i64, i64* %12, align 8
  %50 = icmp ult i64 1024, %49
  br i1 %50, label %51, label %58

51:                                               ; preds = %45
  %52 = load i64, i64* %12, align 8
  %53 = call align 16 i8* @malloc(i64 %52) #26
  store i8* %53, i8** %8, align 8
  %54 = load i8*, i8** %8, align 8
  %55 = icmp ne i8* %54, null
  br i1 %55, label %57, label %56

56:                                               ; preds = %51
  store i8* null, i8** %4, align 8
  br label %77

57:                                               ; preds = %51
  br label %58

58:                                               ; preds = %57, %45
  %59 = load i8*, i8** %8, align 8
  %60 = load i8*, i8** %8, align 8
  %61 = call i64 @llvm.objectsize.i64.p0i8(i8* %60, i1 false, i1 true, i1 false)
  %62 = load i32, i32* %6, align 4
  %63 = call i32 (i8*, i32, i64, i8*, ...) @__sprintf_chk(i8* %59, i32 0, i64 %61, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2.282, i64 0, i64 0), i32 %62)
  store i32 %63, i32* %9, align 4
  br label %64

64:                                               ; preds = %58
  %65 = load i8*, i8** %8, align 8
  %66 = load i32, i32* %9, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %65, i64 %67
  %69 = load i8*, i8** %7, align 8
  %70 = load i8*, i8** %8, align 8
  %71 = load i32, i32* %9, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %70, i64 %72
  %74 = call i64 @llvm.objectsize.i64.p0i8(i8* %73, i1 false, i1 true, i1 false)
  %75 = call i8* @__strcpy_chk(i8* %68, i8* %69, i64 %74) #24
  %76 = load i8*, i8** %8, align 8
  store i8* %76, i8** %4, align 8
  br label %77

77:                                               ; preds = %64, %56, %44, %17
  %78 = load i8*, i8** %4, align 8
  ret i8* %78
}

declare i32 @__sprintf_chk(i8*, i32, i64, i8*, ...) #4

declare i32 @access(i8*, i32) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @openat_safer(i32 %0, i8* %1, i32 %2, ...) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i16, align 2
  %8 = alloca [1 x %struct.__va_list_tag], align 16
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  store i16 0, i16* %7, align 2
  %9 = load i32, i32* %6, align 4
  %10 = and i32 %9, 512
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %36

12:                                               ; preds = %3
  %13 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %8, i64 0, i64 0
  %14 = bitcast %struct.__va_list_tag* %13 to i8*
  call void @llvm.va_start(i8* %14)
  %15 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %8, i64 0, i64 0
  %16 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %15, i32 0, i32 0
  %17 = load i32, i32* %16, align 16
  %18 = icmp ule i32 %17, 40
  br i1 %18, label %19, label %25

19:                                               ; preds = %12
  %20 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %15, i32 0, i32 3
  %21 = load i8*, i8** %20, align 16
  %22 = getelementptr i8, i8* %21, i32 %17
  %23 = bitcast i8* %22 to i32*
  %24 = add i32 %17, 8
  store i32 %24, i32* %16, align 16
  br label %30

25:                                               ; preds = %12
  %26 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %15, i32 0, i32 2
  %27 = load i8*, i8** %26, align 8
  %28 = bitcast i8* %27 to i32*
  %29 = getelementptr i8, i8* %27, i32 8
  store i8* %29, i8** %26, align 8
  br label %30

30:                                               ; preds = %25, %19
  %31 = phi i32* [ %23, %19 ], [ %28, %25 ]
  %32 = load i32, i32* %31, align 4
  %33 = trunc i32 %32 to i16
  store i16 %33, i16* %7, align 2
  %34 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %8, i64 0, i64 0
  %35 = bitcast %struct.__va_list_tag* %34 to i8*
  call void @llvm.va_end(i8* %35)
  br label %36

36:                                               ; preds = %30, %3
  %37 = load i32, i32* %4, align 4
  %38 = load i8*, i8** %5, align 8
  %39 = load i32, i32* %6, align 4
  %40 = load i16, i16* %7, align 2
  %41 = zext i16 %40 to i32
  %42 = call i32 (i32, i8*, i32, ...) @rpl_openat(i32 %37, i8* %38, i32 %39, i32 %41)
  %43 = call i32 @fd_safer(i32 %42)
  ret i32 %43
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define %struct.DIR* @opendir_safer(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.DIR*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.DIR*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %8 = load i8*, i8** %2, align 8
  %9 = call %struct.DIR* @"\01_opendir$INODE64"(i8* %8)
  store %struct.DIR* %9, %struct.DIR** %3, align 8
  %10 = load %struct.DIR*, %struct.DIR** %3, align 8
  %11 = icmp ne %struct.DIR* %10, null
  br i1 %11, label %12, label %46

12:                                               ; preds = %1
  %13 = load %struct.DIR*, %struct.DIR** %3, align 8
  %14 = call i32 @dirfd(%struct.DIR* %13)
  store i32 %14, i32* %4, align 4
  %15 = load i32, i32* %4, align 4
  %16 = icmp sle i32 0, %15
  br i1 %16, label %17, label %45

17:                                               ; preds = %12
  %18 = load i32, i32* %4, align 4
  %19 = icmp sle i32 %18, 2
  br i1 %19, label %20, label %45

20:                                               ; preds = %17
  %21 = load i32, i32* %4, align 4
  %22 = call i32 (i32, i32, ...) @"\01_fcntl"(i32 %21, i32 67, i32 3)
  store i32 %22, i32* %7, align 4
  %23 = load i32, i32* %7, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %20
  %26 = call i32* @__error()
  %27 = load i32, i32* %26, align 4
  store i32 %27, i32* %6, align 4
  store %struct.DIR* null, %struct.DIR** %5, align 8
  br label %39

28:                                               ; preds = %20
  %29 = load i32, i32* %7, align 4
  %30 = call %struct.DIR* @"\01_fdopendir$INODE64"(i32 %29)
  store %struct.DIR* %30, %struct.DIR** %5, align 8
  %31 = call i32* @__error()
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %6, align 4
  %33 = load %struct.DIR*, %struct.DIR** %5, align 8
  %34 = icmp ne %struct.DIR* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %28
  %36 = load i32, i32* %7, align 4
  %37 = call i32 @"\01_close"(i32 %36)
  br label %38

38:                                               ; preds = %35, %28
  br label %39

39:                                               ; preds = %38, %25
  %40 = load %struct.DIR*, %struct.DIR** %3, align 8
  %41 = call i32 @"\01_closedir"(%struct.DIR* %40)
  %42 = load i32, i32* %6, align 4
  %43 = call i32* @__error()
  store i32 %42, i32* %43, align 4
  %44 = load %struct.DIR*, %struct.DIR** %5, align 8
  store %struct.DIR* %44, %struct.DIR** %3, align 8
  br label %45

45:                                               ; preds = %39, %17, %12
  br label %46

46:                                               ; preds = %45, %1
  %47 = load %struct.DIR*, %struct.DIR** %3, align 8
  ret %struct.DIR* %47
}

declare %struct.DIR* @"\01_opendir$INODE64"(i8*) #4

declare i32 @dirfd(%struct.DIR*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @pipe_safer(i32* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  %6 = load i32*, i32** %3, align 8
  %7 = call i32 @pipe(i32* %6)
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %47

9:                                                ; preds = %1
  store i32 0, i32* %4, align 4
  br label %10

10:                                               ; preds = %43, %9
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 2
  br i1 %12, label %13, label %46

13:                                               ; preds = %10
  %14 = load i32*, i32** %3, align 8
  %15 = load i32, i32* %4, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i32, i32* %14, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = call i32 @fd_safer(i32 %18)
  %20 = load i32*, i32** %3, align 8
  %21 = load i32, i32* %4, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, i32* %20, i64 %22
  store i32 %19, i32* %23, align 4
  %24 = load i32*, i32** %3, align 8
  %25 = load i32, i32* %4, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i32, i32* %24, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %42

30:                                               ; preds = %13
  %31 = call i32* @__error()
  %32 = load i32, i32* %31, align 4
  store i32 %32, i32* %5, align 4
  %33 = load i32*, i32** %3, align 8
  %34 = load i32, i32* %4, align 4
  %35 = sub nsw i32 1, %34
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %33, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = call i32 @"\01_close"(i32 %38)
  %40 = load i32, i32* %5, align 4
  %41 = call i32* @__error()
  store i32 %40, i32* %41, align 4
  store i32 -1, i32* %2, align 4
  br label %48

42:                                               ; preds = %13
  br label %43

43:                                               ; preds = %42
  %44 = load i32, i32* %4, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %4, align 4
  br label %10, !llvm.loop !193

46:                                               ; preds = %10
  store i32 0, i32* %2, align 4
  br label %48

47:                                               ; preds = %1
  store i32 -1, i32* %2, align 4
  br label %48

48:                                               ; preds = %47, %46, %30
  %49 = load i32, i32* %2, align 4
  ret i32 %49
}

declare i32 @pipe(i32*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define double @printf_frexp(double %0, i32* %1) #0 {
  %3 = alloca double, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  store double %0, double* %3, align 8
  store i32* %1, i32** %4, align 8
  %6 = load double, double* %3, align 8
  %7 = call double @frexp(double %6, i32* %5) #24
  store double %7, double* %3, align 8
  %8 = load double, double* %3, align 8
  %9 = load double, double* %3, align 8
  %10 = fadd double %8, %9
  store double %10, double* %3, align 8
  %11 = load i32, i32* %5, align 4
  %12 = sub nsw i32 %11, 1
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp slt i32 %13, -1022
  br i1 %14, label %15, label %20

15:                                               ; preds = %2
  %16 = load double, double* %3, align 8
  %17 = load i32, i32* %5, align 4
  %18 = sub nsw i32 %17, -1022
  %19 = call double @ldexp(double %16, i32 %18) #27
  store double %19, double* %3, align 8
  store i32 -1022, i32* %5, align 4
  br label %20

20:                                               ; preds = %15, %2
  %21 = load i32, i32* %5, align 4
  %22 = load i32*, i32** %4, align 8
  store i32 %21, i32* %22, align 4
  %23 = load double, double* %3, align 8
  ret double %23
}

; Function Attrs: nounwind
declare double @frexp(double, i32*) #3

; Function Attrs: nounwind readnone willreturn
declare double @ldexp(double, i32) #19

; Function Attrs: noinline nounwind optnone ssp uwtable
define x86_fp80 @printf_frexpl(x86_fp80 %0, i32* %1) #0 {
  %3 = alloca x86_fp80, align 16
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i16, align 2
  %9 = alloca i16, align 2
  %10 = alloca i16, align 2
  store x86_fp80 %0, x86_fp80* %3, align 16
  store i32* %1, i32** %4, align 8
  call void asm sideeffect "fnstcw $0", "=*m,~{dirflag},~{fpsr},~{flags}"(i16* %7) #24, !srcloc !194
  %11 = load i16, i16* %7, align 2
  store i16 %11, i16* %8, align 2
  %12 = load i16, i16* %8, align 2
  store i16 %12, i16* %6, align 2
  %13 = load i16, i16* %6, align 2
  %14 = zext i16 %13 to i32
  %15 = and i32 %14, -769
  %16 = or i32 %15, 768
  %17 = trunc i32 %16 to i16
  store i16 %17, i16* %9, align 2
  call void asm sideeffect "fldcw $0", "*m,~{dirflag},~{fpsr},~{flags}"(i16* %9) #24, !srcloc !195
  %18 = load x86_fp80, x86_fp80* %3, align 16
  %19 = call x86_fp80 @frexpl(x86_fp80 %18, i32* %5) #24
  store x86_fp80 %19, x86_fp80* %3, align 16
  %20 = load x86_fp80, x86_fp80* %3, align 16
  %21 = load x86_fp80, x86_fp80* %3, align 16
  %22 = fadd x86_fp80 %20, %21
  store x86_fp80 %22, x86_fp80* %3, align 16
  %23 = load i32, i32* %5, align 4
  %24 = sub nsw i32 %23, 1
  store i32 %24, i32* %5, align 4
  %25 = load i32, i32* %5, align 4
  %26 = icmp slt i32 %25, -16382
  br i1 %26, label %27, label %32

27:                                               ; preds = %2
  %28 = load x86_fp80, x86_fp80* %3, align 16
  %29 = load i32, i32* %5, align 4
  %30 = sub nsw i32 %29, -16382
  %31 = call x86_fp80 @ldexpl(x86_fp80 %28, i32 %30) #27
  store x86_fp80 %31, x86_fp80* %3, align 16
  store i32 -16382, i32* %5, align 4
  br label %32

32:                                               ; preds = %27, %2
  %33 = load i16, i16* %6, align 2
  store i16 %33, i16* %10, align 2
  call void asm sideeffect "fldcw $0", "*m,~{dirflag},~{fpsr},~{flags}"(i16* %10) #24, !srcloc !196
  %34 = load i32, i32* %5, align 4
  %35 = load i32*, i32** %4, align 8
  store i32 %34, i32* %35, align 4
  %36 = load x86_fp80, x86_fp80* %3, align 16
  ret x86_fp80 %36
}

; Function Attrs: nounwind
declare x86_fp80 @frexpl(x86_fp80, i32*) #3

; Function Attrs: nounwind readnone willreturn
declare x86_fp80 @ldexpl(x86_fp80, i32) #19

; Function Attrs: noinline nounwind optnone ssp uwtable
define i8* @reallocarray(i8* %0, i64 %1, i64 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  br i1 false, label %9, label %204

9:                                                ; preds = %3
  br i1 true, label %104, label %10

10:                                               ; preds = %9
  %11 = load i64, i64* %7, align 8
  %12 = icmp ult i64 %11, 0
  br i1 %12, label %13, label %59

13:                                               ; preds = %10
  %14 = load i64, i64* %6, align 8
  %15 = icmp ult i64 %14, 0
  br i1 %15, label %16, label %39

16:                                               ; preds = %13
  br i1 false, label %17, label %22

17:                                               ; preds = %16
  %18 = load i64, i64* %6, align 8
  %19 = load i64, i64* %7, align 8
  %20 = udiv i64 127, %19
  %21 = icmp ult i64 %18, %20
  br i1 %21, label %88, label %96

22:                                               ; preds = %16
  br i1 false, label %23, label %26

23:                                               ; preds = %22
  %24 = load i64, i64* %7, align 8
  %25 = icmp ult i64 %24, 1
  br i1 %25, label %29, label %30

26:                                               ; preds = %22
  %27 = load i64, i64* %7, align 8
  %28 = icmp ult i64 0, %27
  br i1 %28, label %29, label %30

29:                                               ; preds = %26, %23
  br label %34

30:                                               ; preds = %26, %23
  %31 = load i64, i64* %7, align 8
  %32 = sub i64 0, %31
  %33 = udiv i64 127, %32
  br label %34

34:                                               ; preds = %30, %29
  %35 = phi i64 [ 0, %29 ], [ %33, %30 ]
  %36 = load i64, i64* %6, align 8
  %37 = sub i64 -1, %36
  %38 = icmp ule i64 %35, %37
  br i1 %38, label %88, label %96

39:                                               ; preds = %13
  %40 = load i64, i64* %7, align 8
  %41 = icmp eq i64 %40, -1
  br i1 %41, label %42, label %54

42:                                               ; preds = %39
  br i1 false, label %43, label %47

43:                                               ; preds = %42
  %44 = load i64, i64* %6, align 8
  %45 = add i64 %44, -128
  %46 = icmp ult i64 0, %45
  br i1 %46, label %88, label %96

47:                                               ; preds = %42
  %48 = load i64, i64* %6, align 8
  %49 = icmp ult i64 0, %48
  br i1 %49, label %50, label %96

50:                                               ; preds = %47
  %51 = load i64, i64* %6, align 8
  %52 = sub i64 %51, 1
  %53 = icmp ult i64 127, %52
  br i1 %53, label %88, label %96

54:                                               ; preds = %39
  %55 = load i64, i64* %7, align 8
  %56 = udiv i64 -128, %55
  %57 = load i64, i64* %6, align 8
  %58 = icmp ult i64 %56, %57
  br i1 %58, label %88, label %96

59:                                               ; preds = %10
  %60 = load i64, i64* %7, align 8
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %59
  br i1 false, label %88, label %96

63:                                               ; preds = %59
  %64 = load i64, i64* %6, align 8
  %65 = icmp ult i64 %64, 0
  br i1 %65, label %66, label %83

66:                                               ; preds = %63
  %67 = load i64, i64* %6, align 8
  %68 = icmp eq i64 %67, -1
  br i1 %68, label %69, label %78

69:                                               ; preds = %66
  br i1 false, label %70, label %74

70:                                               ; preds = %69
  %71 = load i64, i64* %7, align 8
  %72 = add i64 %71, -128
  %73 = icmp ult i64 0, %72
  br i1 %73, label %88, label %96

74:                                               ; preds = %69
  %75 = load i64, i64* %7, align 8
  %76 = sub i64 %75, 1
  %77 = icmp ult i64 127, %76
  br i1 %77, label %88, label %96

78:                                               ; preds = %66
  %79 = load i64, i64* %6, align 8
  %80 = udiv i64 -128, %79
  %81 = load i64, i64* %7, align 8
  %82 = icmp ult i64 %80, %81
  br i1 %82, label %88, label %96

83:                                               ; preds = %63
  %84 = load i64, i64* %7, align 8
  %85 = udiv i64 127, %84
  %86 = load i64, i64* %6, align 8
  %87 = icmp ult i64 %85, %86
  br i1 %87, label %88, label %96

88:                                               ; preds = %83, %78, %74, %70, %62, %54, %50, %43, %34, %17
  %89 = load i64, i64* %6, align 8
  %90 = trunc i64 %89 to i32
  %91 = load i64, i64* %7, align 8
  %92 = trunc i64 %91 to i32
  %93 = mul i32 %90, %92
  %94 = trunc i32 %93 to i8
  %95 = sext i8 %94 to i64
  store i64 %95, i64* %8, align 8
  br i1 true, label %951, label %953

96:                                               ; preds = %83, %78, %74, %70, %62, %54, %50, %47, %43, %34, %17
  %97 = load i64, i64* %6, align 8
  %98 = trunc i64 %97 to i32
  %99 = load i64, i64* %7, align 8
  %100 = trunc i64 %99 to i32
  %101 = mul i32 %98, %100
  %102 = trunc i32 %101 to i8
  %103 = sext i8 %102 to i64
  store i64 %103, i64* %8, align 8
  br i1 false, label %951, label %953

104:                                              ; preds = %9
  %105 = load i64, i64* %7, align 8
  %106 = icmp ult i64 %105, 0
  br i1 %106, label %107, label %156

107:                                              ; preds = %104
  %108 = load i64, i64* %6, align 8
  %109 = icmp ult i64 %108, 0
  br i1 %109, label %110, label %133

110:                                              ; preds = %107
  br i1 false, label %111, label %116

111:                                              ; preds = %110
  %112 = load i64, i64* %6, align 8
  %113 = load i64, i64* %7, align 8
  %114 = udiv i64 255, %113
  %115 = icmp ult i64 %112, %114
  br i1 %115, label %188, label %196

116:                                              ; preds = %110
  br i1 false, label %117, label %120

117:                                              ; preds = %116
  %118 = load i64, i64* %7, align 8
  %119 = icmp ult i64 %118, 1
  br i1 %119, label %123, label %124

120:                                              ; preds = %116
  %121 = load i64, i64* %7, align 8
  %122 = icmp ult i64 0, %121
  br i1 %122, label %123, label %124

123:                                              ; preds = %120, %117
  br label %128

124:                                              ; preds = %120, %117
  %125 = load i64, i64* %7, align 8
  %126 = sub i64 0, %125
  %127 = udiv i64 255, %126
  br label %128

128:                                              ; preds = %124, %123
  %129 = phi i64 [ 0, %123 ], [ %127, %124 ]
  %130 = load i64, i64* %6, align 8
  %131 = sub i64 -1, %130
  %132 = icmp ule i64 %129, %131
  br i1 %132, label %188, label %196

133:                                              ; preds = %107
  br i1 false, label %134, label %135

134:                                              ; preds = %133
  br i1 true, label %136, label %151

135:                                              ; preds = %133
  br i1 false, label %136, label %151

136:                                              ; preds = %135, %134
  %137 = load i64, i64* %7, align 8
  %138 = icmp eq i64 %137, -1
  br i1 %138, label %139, label %151

139:                                              ; preds = %136
  br i1 false, label %140, label %144

140:                                              ; preds = %139
  %141 = load i64, i64* %6, align 8
  %142 = add i64 %141, 0
  %143 = icmp ult i64 0, %142
  br i1 %143, label %188, label %196

144:                                              ; preds = %139
  %145 = load i64, i64* %6, align 8
  %146 = icmp ult i64 0, %145
  br i1 %146, label %147, label %196

147:                                              ; preds = %144
  %148 = load i64, i64* %6, align 8
  %149 = sub i64 %148, 1
  %150 = icmp ult i64 -1, %149
  br i1 %150, label %188, label %196

151:                                              ; preds = %136, %135, %134
  %152 = load i64, i64* %7, align 8
  %153 = udiv i64 0, %152
  %154 = load i64, i64* %6, align 8
  %155 = icmp ult i64 %153, %154
  br i1 %155, label %188, label %196

156:                                              ; preds = %104
  %157 = load i64, i64* %7, align 8
  %158 = icmp eq i64 %157, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %156
  br i1 false, label %188, label %196

160:                                              ; preds = %156
  %161 = load i64, i64* %6, align 8
  %162 = icmp ult i64 %161, 0
  br i1 %162, label %163, label %183

163:                                              ; preds = %160
  br i1 false, label %164, label %165

164:                                              ; preds = %163
  br i1 true, label %166, label %178

165:                                              ; preds = %163
  br i1 false, label %166, label %178

166:                                              ; preds = %165, %164
  %167 = load i64, i64* %6, align 8
  %168 = icmp eq i64 %167, -1
  br i1 %168, label %169, label %178

169:                                              ; preds = %166
  br i1 false, label %170, label %174

170:                                              ; preds = %169
  %171 = load i64, i64* %7, align 8
  %172 = add i64 %171, 0
  %173 = icmp ult i64 0, %172
  br i1 %173, label %188, label %196

174:                                              ; preds = %169
  %175 = load i64, i64* %7, align 8
  %176 = sub i64 %175, 1
  %177 = icmp ult i64 -1, %176
  br i1 %177, label %188, label %196

178:                                              ; preds = %166, %165, %164
  %179 = load i64, i64* %6, align 8
  %180 = udiv i64 0, %179
  %181 = load i64, i64* %7, align 8
  %182 = icmp ult i64 %180, %181
  br i1 %182, label %188, label %196

183:                                              ; preds = %160
  %184 = load i64, i64* %7, align 8
  %185 = udiv i64 255, %184
  %186 = load i64, i64* %6, align 8
  %187 = icmp ult i64 %185, %186
  br i1 %187, label %188, label %196

188:                                              ; preds = %183, %178, %174, %170, %159, %151, %147, %140, %128, %111
  %189 = load i64, i64* %6, align 8
  %190 = trunc i64 %189 to i32
  %191 = load i64, i64* %7, align 8
  %192 = trunc i64 %191 to i32
  %193 = mul i32 %190, %192
  %194 = trunc i32 %193 to i8
  %195 = zext i8 %194 to i64
  store i64 %195, i64* %8, align 8
  br i1 true, label %951, label %953

196:                                              ; preds = %183, %178, %174, %170, %159, %151, %147, %144, %140, %128, %111
  %197 = load i64, i64* %6, align 8
  %198 = trunc i64 %197 to i32
  %199 = load i64, i64* %7, align 8
  %200 = trunc i64 %199 to i32
  %201 = mul i32 %198, %200
  %202 = trunc i32 %201 to i8
  %203 = zext i8 %202 to i64
  store i64 %203, i64* %8, align 8
  br i1 false, label %951, label %953

204:                                              ; preds = %3
  br i1 false, label %205, label %400

205:                                              ; preds = %204
  br i1 true, label %300, label %206

206:                                              ; preds = %205
  %207 = load i64, i64* %7, align 8
  %208 = icmp ult i64 %207, 0
  br i1 %208, label %209, label %255

209:                                              ; preds = %206
  %210 = load i64, i64* %6, align 8
  %211 = icmp ult i64 %210, 0
  br i1 %211, label %212, label %235

212:                                              ; preds = %209
  br i1 false, label %213, label %218

213:                                              ; preds = %212
  %214 = load i64, i64* %6, align 8
  %215 = load i64, i64* %7, align 8
  %216 = udiv i64 32767, %215
  %217 = icmp ult i64 %214, %216
  br i1 %217, label %284, label %292

218:                                              ; preds = %212
  br i1 false, label %219, label %222

219:                                              ; preds = %218
  %220 = load i64, i64* %7, align 8
  %221 = icmp ult i64 %220, 1
  br i1 %221, label %225, label %226

222:                                              ; preds = %218
  %223 = load i64, i64* %7, align 8
  %224 = icmp ult i64 0, %223
  br i1 %224, label %225, label %226

225:                                              ; preds = %222, %219
  br label %230

226:                                              ; preds = %222, %219
  %227 = load i64, i64* %7, align 8
  %228 = sub i64 0, %227
  %229 = udiv i64 32767, %228
  br label %230

230:                                              ; preds = %226, %225
  %231 = phi i64 [ 0, %225 ], [ %229, %226 ]
  %232 = load i64, i64* %6, align 8
  %233 = sub i64 -1, %232
  %234 = icmp ule i64 %231, %233
  br i1 %234, label %284, label %292

235:                                              ; preds = %209
  %236 = load i64, i64* %7, align 8
  %237 = icmp eq i64 %236, -1
  br i1 %237, label %238, label %250

238:                                              ; preds = %235
  br i1 false, label %239, label %243

239:                                              ; preds = %238
  %240 = load i64, i64* %6, align 8
  %241 = add i64 %240, -32768
  %242 = icmp ult i64 0, %241
  br i1 %242, label %284, label %292

243:                                              ; preds = %238
  %244 = load i64, i64* %6, align 8
  %245 = icmp ult i64 0, %244
  br i1 %245, label %246, label %292

246:                                              ; preds = %243
  %247 = load i64, i64* %6, align 8
  %248 = sub i64 %247, 1
  %249 = icmp ult i64 32767, %248
  br i1 %249, label %284, label %292

250:                                              ; preds = %235
  %251 = load i64, i64* %7, align 8
  %252 = udiv i64 -32768, %251
  %253 = load i64, i64* %6, align 8
  %254 = icmp ult i64 %252, %253
  br i1 %254, label %284, label %292

255:                                              ; preds = %206
  %256 = load i64, i64* %7, align 8
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %258, label %259

258:                                              ; preds = %255
  br i1 false, label %284, label %292

259:                                              ; preds = %255
  %260 = load i64, i64* %6, align 8
  %261 = icmp ult i64 %260, 0
  br i1 %261, label %262, label %279

262:                                              ; preds = %259
  %263 = load i64, i64* %6, align 8
  %264 = icmp eq i64 %263, -1
  br i1 %264, label %265, label %274

265:                                              ; preds = %262
  br i1 false, label %266, label %270

266:                                              ; preds = %265
  %267 = load i64, i64* %7, align 8
  %268 = add i64 %267, -32768
  %269 = icmp ult i64 0, %268
  br i1 %269, label %284, label %292

270:                                              ; preds = %265
  %271 = load i64, i64* %7, align 8
  %272 = sub i64 %271, 1
  %273 = icmp ult i64 32767, %272
  br i1 %273, label %284, label %292

274:                                              ; preds = %262
  %275 = load i64, i64* %6, align 8
  %276 = udiv i64 -32768, %275
  %277 = load i64, i64* %7, align 8
  %278 = icmp ult i64 %276, %277
  br i1 %278, label %284, label %292

279:                                              ; preds = %259
  %280 = load i64, i64* %7, align 8
  %281 = udiv i64 32767, %280
  %282 = load i64, i64* %6, align 8
  %283 = icmp ult i64 %281, %282
  br i1 %283, label %284, label %292

284:                                              ; preds = %279, %274, %270, %266, %258, %250, %246, %239, %230, %213
  %285 = load i64, i64* %6, align 8
  %286 = trunc i64 %285 to i32
  %287 = load i64, i64* %7, align 8
  %288 = trunc i64 %287 to i32
  %289 = mul i32 %286, %288
  %290 = trunc i32 %289 to i16
  %291 = sext i16 %290 to i64
  store i64 %291, i64* %8, align 8
  br i1 true, label %951, label %953

292:                                              ; preds = %279, %274, %270, %266, %258, %250, %246, %243, %239, %230, %213
  %293 = load i64, i64* %6, align 8
  %294 = trunc i64 %293 to i32
  %295 = load i64, i64* %7, align 8
  %296 = trunc i64 %295 to i32
  %297 = mul i32 %294, %296
  %298 = trunc i32 %297 to i16
  %299 = sext i16 %298 to i64
  store i64 %299, i64* %8, align 8
  br i1 false, label %951, label %953

300:                                              ; preds = %205
  %301 = load i64, i64* %7, align 8
  %302 = icmp ult i64 %301, 0
  br i1 %302, label %303, label %352

303:                                              ; preds = %300
  %304 = load i64, i64* %6, align 8
  %305 = icmp ult i64 %304, 0
  br i1 %305, label %306, label %329

306:                                              ; preds = %303
  br i1 false, label %307, label %312

307:                                              ; preds = %306
  %308 = load i64, i64* %6, align 8
  %309 = load i64, i64* %7, align 8
  %310 = udiv i64 65535, %309
  %311 = icmp ult i64 %308, %310
  br i1 %311, label %384, label %392

312:                                              ; preds = %306
  br i1 false, label %313, label %316

313:                                              ; preds = %312
  %314 = load i64, i64* %7, align 8
  %315 = icmp ult i64 %314, 1
  br i1 %315, label %319, label %320

316:                                              ; preds = %312
  %317 = load i64, i64* %7, align 8
  %318 = icmp ult i64 0, %317
  br i1 %318, label %319, label %320

319:                                              ; preds = %316, %313
  br label %324

320:                                              ; preds = %316, %313
  %321 = load i64, i64* %7, align 8
  %322 = sub i64 0, %321
  %323 = udiv i64 65535, %322
  br label %324

324:                                              ; preds = %320, %319
  %325 = phi i64 [ 0, %319 ], [ %323, %320 ]
  %326 = load i64, i64* %6, align 8
  %327 = sub i64 -1, %326
  %328 = icmp ule i64 %325, %327
  br i1 %328, label %384, label %392

329:                                              ; preds = %303
  br i1 false, label %330, label %331

330:                                              ; preds = %329
  br i1 true, label %332, label %347

331:                                              ; preds = %329
  br i1 false, label %332, label %347

332:                                              ; preds = %331, %330
  %333 = load i64, i64* %7, align 8
  %334 = icmp eq i64 %333, -1
  br i1 %334, label %335, label %347

335:                                              ; preds = %332
  br i1 false, label %336, label %340

336:                                              ; preds = %335
  %337 = load i64, i64* %6, align 8
  %338 = add i64 %337, 0
  %339 = icmp ult i64 0, %338
  br i1 %339, label %384, label %392

340:                                              ; preds = %335
  %341 = load i64, i64* %6, align 8
  %342 = icmp ult i64 0, %341
  br i1 %342, label %343, label %392

343:                                              ; preds = %340
  %344 = load i64, i64* %6, align 8
  %345 = sub i64 %344, 1
  %346 = icmp ult i64 -1, %345
  br i1 %346, label %384, label %392

347:                                              ; preds = %332, %331, %330
  %348 = load i64, i64* %7, align 8
  %349 = udiv i64 0, %348
  %350 = load i64, i64* %6, align 8
  %351 = icmp ult i64 %349, %350
  br i1 %351, label %384, label %392

352:                                              ; preds = %300
  %353 = load i64, i64* %7, align 8
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %355, label %356

355:                                              ; preds = %352
  br i1 false, label %384, label %392

356:                                              ; preds = %352
  %357 = load i64, i64* %6, align 8
  %358 = icmp ult i64 %357, 0
  br i1 %358, label %359, label %379

359:                                              ; preds = %356
  br i1 false, label %360, label %361

360:                                              ; preds = %359
  br i1 true, label %362, label %374

361:                                              ; preds = %359
  br i1 false, label %362, label %374

362:                                              ; preds = %361, %360
  %363 = load i64, i64* %6, align 8
  %364 = icmp eq i64 %363, -1
  br i1 %364, label %365, label %374

365:                                              ; preds = %362
  br i1 false, label %366, label %370

366:                                              ; preds = %365
  %367 = load i64, i64* %7, align 8
  %368 = add i64 %367, 0
  %369 = icmp ult i64 0, %368
  br i1 %369, label %384, label %392

370:                                              ; preds = %365
  %371 = load i64, i64* %7, align 8
  %372 = sub i64 %371, 1
  %373 = icmp ult i64 -1, %372
  br i1 %373, label %384, label %392

374:                                              ; preds = %362, %361, %360
  %375 = load i64, i64* %6, align 8
  %376 = udiv i64 0, %375
  %377 = load i64, i64* %7, align 8
  %378 = icmp ult i64 %376, %377
  br i1 %378, label %384, label %392

379:                                              ; preds = %356
  %380 = load i64, i64* %7, align 8
  %381 = udiv i64 65535, %380
  %382 = load i64, i64* %6, align 8
  %383 = icmp ult i64 %381, %382
  br i1 %383, label %384, label %392

384:                                              ; preds = %379, %374, %370, %366, %355, %347, %343, %336, %324, %307
  %385 = load i64, i64* %6, align 8
  %386 = trunc i64 %385 to i32
  %387 = load i64, i64* %7, align 8
  %388 = trunc i64 %387 to i32
  %389 = mul i32 %386, %388
  %390 = trunc i32 %389 to i16
  %391 = zext i16 %390 to i64
  store i64 %391, i64* %8, align 8
  br i1 true, label %951, label %953

392:                                              ; preds = %379, %374, %370, %366, %355, %347, %343, %340, %336, %324, %307
  %393 = load i64, i64* %6, align 8
  %394 = trunc i64 %393 to i32
  %395 = load i64, i64* %7, align 8
  %396 = trunc i64 %395 to i32
  %397 = mul i32 %394, %396
  %398 = trunc i32 %397 to i16
  %399 = zext i16 %398 to i64
  store i64 %399, i64* %8, align 8
  br i1 false, label %951, label %953

400:                                              ; preds = %204
  br i1 false, label %401, label %592

401:                                              ; preds = %400
  br i1 false, label %402, label %494

402:                                              ; preds = %401
  %403 = load i64, i64* %7, align 8
  %404 = icmp ult i64 %403, 0
  br i1 %404, label %405, label %451

405:                                              ; preds = %402
  %406 = load i64, i64* %6, align 8
  %407 = icmp ult i64 %406, 0
  br i1 %407, label %408, label %431

408:                                              ; preds = %405
  br i1 false, label %409, label %414

409:                                              ; preds = %408
  %410 = load i64, i64* %6, align 8
  %411 = load i64, i64* %7, align 8
  %412 = udiv i64 2147483647, %411
  %413 = icmp ult i64 %410, %412
  br i1 %413, label %480, label %487

414:                                              ; preds = %408
  br i1 false, label %415, label %418

415:                                              ; preds = %414
  %416 = load i64, i64* %7, align 8
  %417 = icmp ult i64 %416, 1
  br i1 %417, label %421, label %422

418:                                              ; preds = %414
  %419 = load i64, i64* %7, align 8
  %420 = icmp ult i64 0, %419
  br i1 %420, label %421, label %422

421:                                              ; preds = %418, %415
  br label %426

422:                                              ; preds = %418, %415
  %423 = load i64, i64* %7, align 8
  %424 = sub i64 0, %423
  %425 = udiv i64 2147483647, %424
  br label %426

426:                                              ; preds = %422, %421
  %427 = phi i64 [ 0, %421 ], [ %425, %422 ]
  %428 = load i64, i64* %6, align 8
  %429 = sub i64 -1, %428
  %430 = icmp ule i64 %427, %429
  br i1 %430, label %480, label %487

431:                                              ; preds = %405
  %432 = load i64, i64* %7, align 8
  %433 = icmp eq i64 %432, -1
  br i1 %433, label %434, label %446

434:                                              ; preds = %431
  br i1 false, label %435, label %439

435:                                              ; preds = %434
  %436 = load i64, i64* %6, align 8
  %437 = add i64 %436, -2147483648
  %438 = icmp ult i64 0, %437
  br i1 %438, label %480, label %487

439:                                              ; preds = %434
  %440 = load i64, i64* %6, align 8
  %441 = icmp ult i64 0, %440
  br i1 %441, label %442, label %487

442:                                              ; preds = %439
  %443 = load i64, i64* %6, align 8
  %444 = sub i64 %443, 1
  %445 = icmp ult i64 2147483647, %444
  br i1 %445, label %480, label %487

446:                                              ; preds = %431
  %447 = load i64, i64* %7, align 8
  %448 = udiv i64 -2147483648, %447
  %449 = load i64, i64* %6, align 8
  %450 = icmp ult i64 %448, %449
  br i1 %450, label %480, label %487

451:                                              ; preds = %402
  %452 = load i64, i64* %7, align 8
  %453 = icmp eq i64 %452, 0
  br i1 %453, label %454, label %455

454:                                              ; preds = %451
  br i1 false, label %480, label %487

455:                                              ; preds = %451
  %456 = load i64, i64* %6, align 8
  %457 = icmp ult i64 %456, 0
  br i1 %457, label %458, label %475

458:                                              ; preds = %455
  %459 = load i64, i64* %6, align 8
  %460 = icmp eq i64 %459, -1
  br i1 %460, label %461, label %470

461:                                              ; preds = %458
  br i1 false, label %462, label %466

462:                                              ; preds = %461
  %463 = load i64, i64* %7, align 8
  %464 = add i64 %463, -2147483648
  %465 = icmp ult i64 0, %464
  br i1 %465, label %480, label %487

466:                                              ; preds = %461
  %467 = load i64, i64* %7, align 8
  %468 = sub i64 %467, 1
  %469 = icmp ult i64 2147483647, %468
  br i1 %469, label %480, label %487

470:                                              ; preds = %458
  %471 = load i64, i64* %6, align 8
  %472 = udiv i64 -2147483648, %471
  %473 = load i64, i64* %7, align 8
  %474 = icmp ult i64 %472, %473
  br i1 %474, label %480, label %487

475:                                              ; preds = %455
  %476 = load i64, i64* %7, align 8
  %477 = udiv i64 2147483647, %476
  %478 = load i64, i64* %6, align 8
  %479 = icmp ult i64 %477, %478
  br i1 %479, label %480, label %487

480:                                              ; preds = %475, %470, %466, %462, %454, %446, %442, %435, %426, %409
  %481 = load i64, i64* %6, align 8
  %482 = trunc i64 %481 to i32
  %483 = load i64, i64* %7, align 8
  %484 = trunc i64 %483 to i32
  %485 = mul i32 %482, %484
  %486 = sext i32 %485 to i64
  store i64 %486, i64* %8, align 8
  br i1 true, label %951, label %953

487:                                              ; preds = %475, %470, %466, %462, %454, %446, %442, %439, %435, %426, %409
  %488 = load i64, i64* %6, align 8
  %489 = trunc i64 %488 to i32
  %490 = load i64, i64* %7, align 8
  %491 = trunc i64 %490 to i32
  %492 = mul i32 %489, %491
  %493 = sext i32 %492 to i64
  store i64 %493, i64* %8, align 8
  br i1 false, label %951, label %953

494:                                              ; preds = %401
  %495 = load i64, i64* %7, align 8
  %496 = icmp ult i64 %495, 0
  br i1 %496, label %497, label %546

497:                                              ; preds = %494
  %498 = load i64, i64* %6, align 8
  %499 = icmp ult i64 %498, 0
  br i1 %499, label %500, label %523

500:                                              ; preds = %497
  br i1 false, label %501, label %506

501:                                              ; preds = %500
  %502 = load i64, i64* %6, align 8
  %503 = load i64, i64* %7, align 8
  %504 = udiv i64 4294967295, %503
  %505 = icmp ult i64 %502, %504
  br i1 %505, label %578, label %585

506:                                              ; preds = %500
  br i1 false, label %507, label %510

507:                                              ; preds = %506
  %508 = load i64, i64* %7, align 8
  %509 = icmp ult i64 %508, 1
  br i1 %509, label %513, label %514

510:                                              ; preds = %506
  %511 = load i64, i64* %7, align 8
  %512 = icmp ult i64 0, %511
  br i1 %512, label %513, label %514

513:                                              ; preds = %510, %507
  br label %518

514:                                              ; preds = %510, %507
  %515 = load i64, i64* %7, align 8
  %516 = sub i64 0, %515
  %517 = udiv i64 4294967295, %516
  br label %518

518:                                              ; preds = %514, %513
  %519 = phi i64 [ 0, %513 ], [ %517, %514 ]
  %520 = load i64, i64* %6, align 8
  %521 = sub i64 -1, %520
  %522 = icmp ule i64 %519, %521
  br i1 %522, label %578, label %585

523:                                              ; preds = %497
  br i1 false, label %524, label %525

524:                                              ; preds = %523
  br i1 true, label %526, label %541

525:                                              ; preds = %523
  br i1 false, label %526, label %541

526:                                              ; preds = %525, %524
  %527 = load i64, i64* %7, align 8
  %528 = icmp eq i64 %527, -1
  br i1 %528, label %529, label %541

529:                                              ; preds = %526
  br i1 false, label %530, label %534

530:                                              ; preds = %529
  %531 = load i64, i64* %6, align 8
  %532 = add i64 %531, 0
  %533 = icmp ult i64 0, %532
  br i1 %533, label %578, label %585

534:                                              ; preds = %529
  %535 = load i64, i64* %6, align 8
  %536 = icmp ult i64 0, %535
  br i1 %536, label %537, label %585

537:                                              ; preds = %534
  %538 = load i64, i64* %6, align 8
  %539 = sub i64 %538, 1
  %540 = icmp ult i64 -1, %539
  br i1 %540, label %578, label %585

541:                                              ; preds = %526, %525, %524
  %542 = load i64, i64* %7, align 8
  %543 = udiv i64 0, %542
  %544 = load i64, i64* %6, align 8
  %545 = icmp ult i64 %543, %544
  br i1 %545, label %578, label %585

546:                                              ; preds = %494
  %547 = load i64, i64* %7, align 8
  %548 = icmp eq i64 %547, 0
  br i1 %548, label %549, label %550

549:                                              ; preds = %546
  br i1 false, label %578, label %585

550:                                              ; preds = %546
  %551 = load i64, i64* %6, align 8
  %552 = icmp ult i64 %551, 0
  br i1 %552, label %553, label %573

553:                                              ; preds = %550
  br i1 false, label %554, label %555

554:                                              ; preds = %553
  br i1 true, label %556, label %568

555:                                              ; preds = %553
  br i1 false, label %556, label %568

556:                                              ; preds = %555, %554
  %557 = load i64, i64* %6, align 8
  %558 = icmp eq i64 %557, -1
  br i1 %558, label %559, label %568

559:                                              ; preds = %556
  br i1 false, label %560, label %564

560:                                              ; preds = %559
  %561 = load i64, i64* %7, align 8
  %562 = add i64 %561, 0
  %563 = icmp ult i64 0, %562
  br i1 %563, label %578, label %585

564:                                              ; preds = %559
  %565 = load i64, i64* %7, align 8
  %566 = sub i64 %565, 1
  %567 = icmp ult i64 -1, %566
  br i1 %567, label %578, label %585

568:                                              ; preds = %556, %555, %554
  %569 = load i64, i64* %6, align 8
  %570 = udiv i64 0, %569
  %571 = load i64, i64* %7, align 8
  %572 = icmp ult i64 %570, %571
  br i1 %572, label %578, label %585

573:                                              ; preds = %550
  %574 = load i64, i64* %7, align 8
  %575 = udiv i64 4294967295, %574
  %576 = load i64, i64* %6, align 8
  %577 = icmp ult i64 %575, %576
  br i1 %577, label %578, label %585

578:                                              ; preds = %573, %568, %564, %560, %549, %541, %537, %530, %518, %501
  %579 = load i64, i64* %6, align 8
  %580 = trunc i64 %579 to i32
  %581 = load i64, i64* %7, align 8
  %582 = trunc i64 %581 to i32
  %583 = mul i32 %580, %582
  %584 = zext i32 %583 to i64
  store i64 %584, i64* %8, align 8
  br i1 true, label %951, label %953

585:                                              ; preds = %573, %568, %564, %560, %549, %541, %537, %534, %530, %518, %501
  %586 = load i64, i64* %6, align 8
  %587 = trunc i64 %586 to i32
  %588 = load i64, i64* %7, align 8
  %589 = trunc i64 %588 to i32
  %590 = mul i32 %587, %589
  %591 = zext i32 %590 to i64
  store i64 %591, i64* %8, align 8
  br i1 false, label %951, label %953

592:                                              ; preds = %400
  br i1 true, label %593, label %772

593:                                              ; preds = %592
  br i1 false, label %594, label %680

594:                                              ; preds = %593
  %595 = load i64, i64* %7, align 8
  %596 = icmp ult i64 %595, 0
  br i1 %596, label %597, label %643

597:                                              ; preds = %594
  %598 = load i64, i64* %6, align 8
  %599 = icmp ult i64 %598, 0
  br i1 %599, label %600, label %623

600:                                              ; preds = %597
  br i1 false, label %601, label %606

601:                                              ; preds = %600
  %602 = load i64, i64* %6, align 8
  %603 = load i64, i64* %7, align 8
  %604 = udiv i64 9223372036854775807, %603
  %605 = icmp ult i64 %602, %604
  br i1 %605, label %672, label %676

606:                                              ; preds = %600
  br i1 false, label %607, label %610

607:                                              ; preds = %606
  %608 = load i64, i64* %7, align 8
  %609 = icmp ult i64 %608, 1
  br i1 %609, label %613, label %614

610:                                              ; preds = %606
  %611 = load i64, i64* %7, align 8
  %612 = icmp ult i64 0, %611
  br i1 %612, label %613, label %614

613:                                              ; preds = %610, %607
  br label %618

614:                                              ; preds = %610, %607
  %615 = load i64, i64* %7, align 8
  %616 = sub i64 0, %615
  %617 = udiv i64 9223372036854775807, %616
  br label %618

618:                                              ; preds = %614, %613
  %619 = phi i64 [ 0, %613 ], [ %617, %614 ]
  %620 = load i64, i64* %6, align 8
  %621 = sub i64 -1, %620
  %622 = icmp ule i64 %619, %621
  br i1 %622, label %672, label %676

623:                                              ; preds = %597
  %624 = load i64, i64* %7, align 8
  %625 = icmp eq i64 %624, -1
  br i1 %625, label %626, label %638

626:                                              ; preds = %623
  br i1 false, label %627, label %631

627:                                              ; preds = %626
  %628 = load i64, i64* %6, align 8
  %629 = add i64 %628, -9223372036854775808
  %630 = icmp ult i64 0, %629
  br i1 %630, label %672, label %676

631:                                              ; preds = %626
  %632 = load i64, i64* %6, align 8
  %633 = icmp ult i64 0, %632
  br i1 %633, label %634, label %676

634:                                              ; preds = %631
  %635 = load i64, i64* %6, align 8
  %636 = sub i64 %635, 1
  %637 = icmp ult i64 9223372036854775807, %636
  br i1 %637, label %672, label %676

638:                                              ; preds = %623
  %639 = load i64, i64* %7, align 8
  %640 = udiv i64 -9223372036854775808, %639
  %641 = load i64, i64* %6, align 8
  %642 = icmp ult i64 %640, %641
  br i1 %642, label %672, label %676

643:                                              ; preds = %594
  %644 = load i64, i64* %7, align 8
  %645 = icmp eq i64 %644, 0
  br i1 %645, label %646, label %647

646:                                              ; preds = %643
  br i1 false, label %672, label %676

647:                                              ; preds = %643
  %648 = load i64, i64* %6, align 8
  %649 = icmp ult i64 %648, 0
  br i1 %649, label %650, label %667

650:                                              ; preds = %647
  %651 = load i64, i64* %6, align 8
  %652 = icmp eq i64 %651, -1
  br i1 %652, label %653, label %662

653:                                              ; preds = %650
  br i1 false, label %654, label %658

654:                                              ; preds = %653
  %655 = load i64, i64* %7, align 8
  %656 = add i64 %655, -9223372036854775808
  %657 = icmp ult i64 0, %656
  br i1 %657, label %672, label %676

658:                                              ; preds = %653
  %659 = load i64, i64* %7, align 8
  %660 = sub i64 %659, 1
  %661 = icmp ult i64 9223372036854775807, %660
  br i1 %661, label %672, label %676

662:                                              ; preds = %650
  %663 = load i64, i64* %6, align 8
  %664 = udiv i64 -9223372036854775808, %663
  %665 = load i64, i64* %7, align 8
  %666 = icmp ult i64 %664, %665
  br i1 %666, label %672, label %676

667:                                              ; preds = %647
  %668 = load i64, i64* %7, align 8
  %669 = udiv i64 9223372036854775807, %668
  %670 = load i64, i64* %6, align 8
  %671 = icmp ult i64 %669, %670
  br i1 %671, label %672, label %676

672:                                              ; preds = %667, %662, %658, %654, %646, %638, %634, %627, %618, %601
  %673 = load i64, i64* %6, align 8
  %674 = load i64, i64* %7, align 8
  %675 = mul i64 %673, %674
  store i64 %675, i64* %8, align 8
  br i1 true, label %951, label %953

676:                                              ; preds = %667, %662, %658, %654, %646, %638, %634, %631, %627, %618, %601
  %677 = load i64, i64* %6, align 8
  %678 = load i64, i64* %7, align 8
  %679 = mul i64 %677, %678
  store i64 %679, i64* %8, align 8
  br i1 false, label %951, label %953

680:                                              ; preds = %593
  %681 = load i64, i64* %7, align 8
  %682 = icmp ult i64 %681, 0
  br i1 %682, label %683, label %732

683:                                              ; preds = %680
  %684 = load i64, i64* %6, align 8
  %685 = icmp ult i64 %684, 0
  br i1 %685, label %686, label %709

686:                                              ; preds = %683
  br i1 false, label %687, label %692

687:                                              ; preds = %686
  %688 = load i64, i64* %6, align 8
  %689 = load i64, i64* %7, align 8
  %690 = udiv i64 -1, %689
  %691 = icmp ult i64 %688, %690
  br i1 %691, label %764, label %768

692:                                              ; preds = %686
  br i1 false, label %693, label %696

693:                                              ; preds = %692
  %694 = load i64, i64* %7, align 8
  %695 = icmp ult i64 %694, 1
  br i1 %695, label %699, label %700

696:                                              ; preds = %692
  %697 = load i64, i64* %7, align 8
  %698 = icmp ult i64 0, %697
  br i1 %698, label %699, label %700

699:                                              ; preds = %696, %693
  br label %704

700:                                              ; preds = %696, %693
  %701 = load i64, i64* %7, align 8
  %702 = sub i64 0, %701
  %703 = udiv i64 -1, %702
  br label %704

704:                                              ; preds = %700, %699
  %705 = phi i64 [ 1, %699 ], [ %703, %700 ]
  %706 = load i64, i64* %6, align 8
  %707 = sub i64 -1, %706
  %708 = icmp ule i64 %705, %707
  br i1 %708, label %764, label %768

709:                                              ; preds = %683
  br i1 false, label %710, label %711

710:                                              ; preds = %709
  br i1 true, label %712, label %727

711:                                              ; preds = %709
  br i1 false, label %712, label %727

712:                                              ; preds = %711, %710
  %713 = load i64, i64* %7, align 8
  %714 = icmp eq i64 %713, -1
  br i1 %714, label %715, label %727

715:                                              ; preds = %712
  br i1 false, label %716, label %720

716:                                              ; preds = %715
  %717 = load i64, i64* %6, align 8
  %718 = add i64 %717, 0
  %719 = icmp ult i64 0, %718
  br i1 %719, label %764, label %768

720:                                              ; preds = %715
  %721 = load i64, i64* %6, align 8
  %722 = icmp ult i64 0, %721
  br i1 %722, label %723, label %768

723:                                              ; preds = %720
  %724 = load i64, i64* %6, align 8
  %725 = sub i64 %724, 1
  %726 = icmp ult i64 -1, %725
  br i1 %726, label %764, label %768

727:                                              ; preds = %712, %711, %710
  %728 = load i64, i64* %7, align 8
  %729 = udiv i64 0, %728
  %730 = load i64, i64* %6, align 8
  %731 = icmp ult i64 %729, %730
  br i1 %731, label %764, label %768

732:                                              ; preds = %680
  %733 = load i64, i64* %7, align 8
  %734 = icmp eq i64 %733, 0
  br i1 %734, label %735, label %736

735:                                              ; preds = %732
  br i1 false, label %764, label %768

736:                                              ; preds = %732
  %737 = load i64, i64* %6, align 8
  %738 = icmp ult i64 %737, 0
  br i1 %738, label %739, label %759

739:                                              ; preds = %736
  br i1 false, label %740, label %741

740:                                              ; preds = %739
  br i1 true, label %742, label %754

741:                                              ; preds = %739
  br i1 false, label %742, label %754

742:                                              ; preds = %741, %740
  %743 = load i64, i64* %6, align 8
  %744 = icmp eq i64 %743, -1
  br i1 %744, label %745, label %754

745:                                              ; preds = %742
  br i1 false, label %746, label %750

746:                                              ; preds = %745
  %747 = load i64, i64* %7, align 8
  %748 = add i64 %747, 0
  %749 = icmp ult i64 0, %748
  br i1 %749, label %764, label %768

750:                                              ; preds = %745
  %751 = load i64, i64* %7, align 8
  %752 = sub i64 %751, 1
  %753 = icmp ult i64 -1, %752
  br i1 %753, label %764, label %768

754:                                              ; preds = %742, %741, %740
  %755 = load i64, i64* %6, align 8
  %756 = udiv i64 0, %755
  %757 = load i64, i64* %7, align 8
  %758 = icmp ult i64 %756, %757
  br i1 %758, label %764, label %768

759:                                              ; preds = %736
  %760 = load i64, i64* %7, align 8
  %761 = udiv i64 -1, %760
  %762 = load i64, i64* %6, align 8
  %763 = icmp ult i64 %761, %762
  br i1 %763, label %764, label %768

764:                                              ; preds = %759, %754, %750, %746, %735, %727, %723, %716, %704, %687
  %765 = load i64, i64* %6, align 8
  %766 = load i64, i64* %7, align 8
  %767 = mul i64 %765, %766
  store i64 %767, i64* %8, align 8
  br i1 true, label %951, label %953

768:                                              ; preds = %759, %754, %750, %746, %735, %727, %723, %720, %716, %704, %687
  %769 = load i64, i64* %6, align 8
  %770 = load i64, i64* %7, align 8
  %771 = mul i64 %769, %770
  store i64 %771, i64* %8, align 8
  br i1 false, label %951, label %953

772:                                              ; preds = %592
  br i1 false, label %773, label %859

773:                                              ; preds = %772
  %774 = load i64, i64* %7, align 8
  %775 = icmp ult i64 %774, 0
  br i1 %775, label %776, label %822

776:                                              ; preds = %773
  %777 = load i64, i64* %6, align 8
  %778 = icmp ult i64 %777, 0
  br i1 %778, label %779, label %802

779:                                              ; preds = %776
  br i1 false, label %780, label %785

780:                                              ; preds = %779
  %781 = load i64, i64* %6, align 8
  %782 = load i64, i64* %7, align 8
  %783 = udiv i64 9223372036854775807, %782
  %784 = icmp ult i64 %781, %783
  br i1 %784, label %851, label %855

785:                                              ; preds = %779
  br i1 false, label %786, label %789

786:                                              ; preds = %785
  %787 = load i64, i64* %7, align 8
  %788 = icmp ult i64 %787, 1
  br i1 %788, label %792, label %793

789:                                              ; preds = %785
  %790 = load i64, i64* %7, align 8
  %791 = icmp ult i64 0, %790
  br i1 %791, label %792, label %793

792:                                              ; preds = %789, %786
  br label %797

793:                                              ; preds = %789, %786
  %794 = load i64, i64* %7, align 8
  %795 = sub i64 0, %794
  %796 = udiv i64 9223372036854775807, %795
  br label %797

797:                                              ; preds = %793, %792
  %798 = phi i64 [ 0, %792 ], [ %796, %793 ]
  %799 = load i64, i64* %6, align 8
  %800 = sub i64 -1, %799
  %801 = icmp ule i64 %798, %800
  br i1 %801, label %851, label %855

802:                                              ; preds = %776
  %803 = load i64, i64* %7, align 8
  %804 = icmp eq i64 %803, -1
  br i1 %804, label %805, label %817

805:                                              ; preds = %802
  br i1 false, label %806, label %810

806:                                              ; preds = %805
  %807 = load i64, i64* %6, align 8
  %808 = add i64 %807, -9223372036854775808
  %809 = icmp ult i64 0, %808
  br i1 %809, label %851, label %855

810:                                              ; preds = %805
  %811 = load i64, i64* %6, align 8
  %812 = icmp ult i64 0, %811
  br i1 %812, label %813, label %855

813:                                              ; preds = %810
  %814 = load i64, i64* %6, align 8
  %815 = sub i64 %814, 1
  %816 = icmp ult i64 9223372036854775807, %815
  br i1 %816, label %851, label %855

817:                                              ; preds = %802
  %818 = load i64, i64* %7, align 8
  %819 = udiv i64 -9223372036854775808, %818
  %820 = load i64, i64* %6, align 8
  %821 = icmp ult i64 %819, %820
  br i1 %821, label %851, label %855

822:                                              ; preds = %773
  %823 = load i64, i64* %7, align 8
  %824 = icmp eq i64 %823, 0
  br i1 %824, label %825, label %826

825:                                              ; preds = %822
  br i1 false, label %851, label %855

826:                                              ; preds = %822
  %827 = load i64, i64* %6, align 8
  %828 = icmp ult i64 %827, 0
  br i1 %828, label %829, label %846

829:                                              ; preds = %826
  %830 = load i64, i64* %6, align 8
  %831 = icmp eq i64 %830, -1
  br i1 %831, label %832, label %841

832:                                              ; preds = %829
  br i1 false, label %833, label %837

833:                                              ; preds = %832
  %834 = load i64, i64* %7, align 8
  %835 = add i64 %834, -9223372036854775808
  %836 = icmp ult i64 0, %835
  br i1 %836, label %851, label %855

837:                                              ; preds = %832
  %838 = load i64, i64* %7, align 8
  %839 = sub i64 %838, 1
  %840 = icmp ult i64 9223372036854775807, %839
  br i1 %840, label %851, label %855

841:                                              ; preds = %829
  %842 = load i64, i64* %6, align 8
  %843 = udiv i64 -9223372036854775808, %842
  %844 = load i64, i64* %7, align 8
  %845 = icmp ult i64 %843, %844
  br i1 %845, label %851, label %855

846:                                              ; preds = %826
  %847 = load i64, i64* %7, align 8
  %848 = udiv i64 9223372036854775807, %847
  %849 = load i64, i64* %6, align 8
  %850 = icmp ult i64 %848, %849
  br i1 %850, label %851, label %855

851:                                              ; preds = %846, %841, %837, %833, %825, %817, %813, %806, %797, %780
  %852 = load i64, i64* %6, align 8
  %853 = load i64, i64* %7, align 8
  %854 = mul i64 %852, %853
  store i64 %854, i64* %8, align 8
  br i1 true, label %951, label %953

855:                                              ; preds = %846, %841, %837, %833, %825, %817, %813, %810, %806, %797, %780
  %856 = load i64, i64* %6, align 8
  %857 = load i64, i64* %7, align 8
  %858 = mul i64 %856, %857
  store i64 %858, i64* %8, align 8
  br i1 false, label %951, label %953

859:                                              ; preds = %772
  %860 = load i64, i64* %7, align 8
  %861 = icmp ult i64 %860, 0
  br i1 %861, label %862, label %911

862:                                              ; preds = %859
  %863 = load i64, i64* %6, align 8
  %864 = icmp ult i64 %863, 0
  br i1 %864, label %865, label %888

865:                                              ; preds = %862
  br i1 false, label %866, label %871

866:                                              ; preds = %865
  %867 = load i64, i64* %6, align 8
  %868 = load i64, i64* %7, align 8
  %869 = udiv i64 -1, %868
  %870 = icmp ult i64 %867, %869
  br i1 %870, label %943, label %947

871:                                              ; preds = %865
  br i1 false, label %872, label %875

872:                                              ; preds = %871
  %873 = load i64, i64* %7, align 8
  %874 = icmp ult i64 %873, 1
  br i1 %874, label %878, label %879

875:                                              ; preds = %871
  %876 = load i64, i64* %7, align 8
  %877 = icmp ult i64 0, %876
  br i1 %877, label %878, label %879

878:                                              ; preds = %875, %872
  br label %883

879:                                              ; preds = %875, %872
  %880 = load i64, i64* %7, align 8
  %881 = sub i64 0, %880
  %882 = udiv i64 -1, %881
  br label %883

883:                                              ; preds = %879, %878
  %884 = phi i64 [ 1, %878 ], [ %882, %879 ]
  %885 = load i64, i64* %6, align 8
  %886 = sub i64 -1, %885
  %887 = icmp ule i64 %884, %886
  br i1 %887, label %943, label %947

888:                                              ; preds = %862
  br i1 false, label %889, label %890

889:                                              ; preds = %888
  br i1 true, label %891, label %906

890:                                              ; preds = %888
  br i1 false, label %891, label %906

891:                                              ; preds = %890, %889
  %892 = load i64, i64* %7, align 8
  %893 = icmp eq i64 %892, -1
  br i1 %893, label %894, label %906

894:                                              ; preds = %891
  br i1 false, label %895, label %899

895:                                              ; preds = %894
  %896 = load i64, i64* %6, align 8
  %897 = add i64 %896, 0
  %898 = icmp ult i64 0, %897
  br i1 %898, label %943, label %947

899:                                              ; preds = %894
  %900 = load i64, i64* %6, align 8
  %901 = icmp ult i64 0, %900
  br i1 %901, label %902, label %947

902:                                              ; preds = %899
  %903 = load i64, i64* %6, align 8
  %904 = sub i64 %903, 1
  %905 = icmp ult i64 -1, %904
  br i1 %905, label %943, label %947

906:                                              ; preds = %891, %890, %889
  %907 = load i64, i64* %7, align 8
  %908 = udiv i64 0, %907
  %909 = load i64, i64* %6, align 8
  %910 = icmp ult i64 %908, %909
  br i1 %910, label %943, label %947

911:                                              ; preds = %859
  %912 = load i64, i64* %7, align 8
  %913 = icmp eq i64 %912, 0
  br i1 %913, label %914, label %915

914:                                              ; preds = %911
  br i1 false, label %943, label %947

915:                                              ; preds = %911
  %916 = load i64, i64* %6, align 8
  %917 = icmp ult i64 %916, 0
  br i1 %917, label %918, label %938

918:                                              ; preds = %915
  br i1 false, label %919, label %920

919:                                              ; preds = %918
  br i1 true, label %921, label %933

920:                                              ; preds = %918
  br i1 false, label %921, label %933

921:                                              ; preds = %920, %919
  %922 = load i64, i64* %6, align 8
  %923 = icmp eq i64 %922, -1
  br i1 %923, label %924, label %933

924:                                              ; preds = %921
  br i1 false, label %925, label %929

925:                                              ; preds = %924
  %926 = load i64, i64* %7, align 8
  %927 = add i64 %926, 0
  %928 = icmp ult i64 0, %927
  br i1 %928, label %943, label %947

929:                                              ; preds = %924
  %930 = load i64, i64* %7, align 8
  %931 = sub i64 %930, 1
  %932 = icmp ult i64 -1, %931
  br i1 %932, label %943, label %947

933:                                              ; preds = %921, %920, %919
  %934 = load i64, i64* %6, align 8
  %935 = udiv i64 0, %934
  %936 = load i64, i64* %7, align 8
  %937 = icmp ult i64 %935, %936
  br i1 %937, label %943, label %947

938:                                              ; preds = %915
  %939 = load i64, i64* %7, align 8
  %940 = udiv i64 -1, %939
  %941 = load i64, i64* %6, align 8
  %942 = icmp ult i64 %940, %941
  br i1 %942, label %943, label %947

943:                                              ; preds = %938, %933, %929, %925, %914, %906, %902, %895, %883, %866
  %944 = load i64, i64* %6, align 8
  %945 = load i64, i64* %7, align 8
  %946 = mul i64 %944, %945
  store i64 %946, i64* %8, align 8
  br i1 true, label %951, label %953

947:                                              ; preds = %938, %933, %929, %925, %914, %906, %902, %899, %895, %883, %866
  %948 = load i64, i64* %6, align 8
  %949 = load i64, i64* %7, align 8
  %950 = mul i64 %948, %949
  store i64 %950, i64* %8, align 8
  br i1 false, label %951, label %953

951:                                              ; preds = %947, %943, %855, %851, %768, %764, %676, %672, %585, %578, %487, %480, %392, %384, %292, %284, %196, %188, %96, %88
  %952 = call i32* @__error()
  store i32 12, i32* %952, align 4
  store i8* null, i8** %4, align 8
  br label %957

953:                                              ; preds = %947, %943, %855, %851, %768, %764, %676, %672, %585, %578, %487, %480, %392, %384, %292, %284, %196, %188, %96, %88
  %954 = load i8*, i8** %5, align 8
  %955 = load i64, i64* %8, align 8
  %956 = call align 16 i8* @realloc(i8* %954, i64 %955) #31
  store i8* %956, i8** %4, align 8
  br label %957

957:                                              ; preds = %953, %951
  %958 = load i8*, i8** %4, align 8
  ret i8* %958
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @save_cwd(%struct.saved_cwd* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.saved_cwd*, align 8
  store %struct.saved_cwd* %0, %struct.saved_cwd** %3, align 8
  %4 = load %struct.saved_cwd*, %struct.saved_cwd** %3, align 8
  %5 = getelementptr inbounds %struct.saved_cwd, %struct.saved_cwd* %4, i32 0, i32 1
  store i8* null, i8** %5, align 8
  %6 = call i32 (i8*, i32, ...) @open_safer(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.287, i64 0, i64 0), i32 16777216)
  %7 = load %struct.saved_cwd*, %struct.saved_cwd** %3, align 8
  %8 = getelementptr inbounds %struct.saved_cwd, %struct.saved_cwd* %7, i32 0, i32 0
  store i32 %6, i32* %8, align 8
  %9 = load %struct.saved_cwd*, %struct.saved_cwd** %3, align 8
  %10 = getelementptr inbounds %struct.saved_cwd, %struct.saved_cwd* %9, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %1
  %14 = call i8* @getcwd(i8* null, i64 0)
  %15 = load %struct.saved_cwd*, %struct.saved_cwd** %3, align 8
  %16 = getelementptr inbounds %struct.saved_cwd, %struct.saved_cwd* %15, i32 0, i32 1
  store i8* %14, i8** %16, align 8
  %17 = load %struct.saved_cwd*, %struct.saved_cwd** %3, align 8
  %18 = getelementptr inbounds %struct.saved_cwd, %struct.saved_cwd* %17, i32 0, i32 1
  %19 = load i8*, i8** %18, align 8
  %20 = icmp ne i8* %19, null
  %21 = zext i1 %20 to i64
  %22 = select i1 %20, i32 0, i32 -1
  store i32 %22, i32* %2, align 4
  br label %24

23:                                               ; preds = %1
  store i32 0, i32* %2, align 4
  br label %24

24:                                               ; preds = %23, %13
  %25 = load i32, i32* %2, align 4
  ret i32 %25
}

declare i8* @getcwd(i8*, i64) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @restore_cwd(%struct.saved_cwd* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.saved_cwd*, align 8
  store %struct.saved_cwd* %0, %struct.saved_cwd** %3, align 8
  %4 = load %struct.saved_cwd*, %struct.saved_cwd** %3, align 8
  %5 = getelementptr inbounds %struct.saved_cwd, %struct.saved_cwd* %4, i32 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp sle i32 0, %6
  br i1 %7, label %8, label %13

8:                                                ; preds = %1
  %9 = load %struct.saved_cwd*, %struct.saved_cwd** %3, align 8
  %10 = getelementptr inbounds %struct.saved_cwd, %struct.saved_cwd* %9, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = call i32 @fchdir(i32 %11)
  store i32 %12, i32* %2, align 4
  br label %18

13:                                               ; preds = %1
  %14 = load %struct.saved_cwd*, %struct.saved_cwd** %3, align 8
  %15 = getelementptr inbounds %struct.saved_cwd, %struct.saved_cwd* %14, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 @chdir_long(i8* %16)
  store i32 %17, i32* %2, align 4
  br label %18

18:                                               ; preds = %13, %8
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @free_cwd(%struct.saved_cwd* %0) #0 {
  %2 = alloca %struct.saved_cwd*, align 8
  store %struct.saved_cwd* %0, %struct.saved_cwd** %2, align 8
  %3 = load %struct.saved_cwd*, %struct.saved_cwd** %2, align 8
  %4 = getelementptr inbounds %struct.saved_cwd, %struct.saved_cwd* %3, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp sge i32 %5, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %1
  %8 = load %struct.saved_cwd*, %struct.saved_cwd** %2, align 8
  %9 = getelementptr inbounds %struct.saved_cwd, %struct.saved_cwd* %8, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = call i32 @"\01_close"(i32 %10)
  br label %12

12:                                               ; preds = %7, %1
  %13 = load %struct.saved_cwd*, %struct.saved_cwd** %2, align 8
  %14 = getelementptr inbounds %struct.saved_cwd, %struct.saved_cwd* %13, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8
  call void @rpl_free(i8* %15)
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define noalias i8* @streamsavedir(%struct.DIR* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.DIR*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.direntry_t*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32 (i8*, i8*)*, align 8
  %13 = alloca %struct.dirent*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i8*, align 8
  store %struct.DIR* %0, %struct.DIR** %4, align 8
  store i32 %1, i32* %5, align 4
  store i8* null, i8** %6, align 8
  store i64 0, i64* %7, align 8
  store %struct.direntry_t* null, %struct.direntry_t** %8, align 8
  store i64 0, i64* %9, align 8
  store i64 0, i64* %10, align 8
  store i64 0, i64* %11, align 8
  %18 = load i32, i32* %5, align 4
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [2 x i32 (i8*, i8*)*], [2 x i32 (i8*, i8*)*]* @comparison_function_table, i64 0, i64 %19
  %21 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %20, align 8
  store i32 (i8*, i8*)* %21, i32 (i8*, i8*)** %12, align 8
  %22 = load %struct.DIR*, %struct.DIR** %4, align 8
  %23 = icmp eq %struct.DIR* %22, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %2
  store i8* null, i8** %3, align 8
  br label %188

25:                                               ; preds = %2
  br label %26

26:                                               ; preds = %114, %25
  %27 = call i32* @__error()
  store i32 0, i32* %27, align 4
  %28 = load %struct.DIR*, %struct.DIR** %4, align 8
  %29 = call %struct.dirent* @"\01_readdir$INODE64"(%struct.DIR* %28)
  store %struct.dirent* %29, %struct.dirent** %13, align 8
  %30 = load %struct.dirent*, %struct.dirent** %13, align 8
  %31 = icmp ne %struct.dirent* %30, null
  br i1 %31, label %33, label %32

32:                                               ; preds = %26
  br label %115

33:                                               ; preds = %26
  %34 = load %struct.dirent*, %struct.dirent** %13, align 8
  %35 = getelementptr inbounds %struct.dirent, %struct.dirent* %34, i32 0, i32 5
  %36 = getelementptr inbounds [1024 x i8], [1024 x i8]* %35, i64 0, i64 0
  store i8* %36, i8** %14, align 8
  %37 = load i8*, i8** %14, align 8
  %38 = load i8*, i8** %14, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 0
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp ne i32 %41, 46
  br i1 %42, label %43, label %44

43:                                               ; preds = %33
  br label %52

44:                                               ; preds = %33
  %45 = load i8*, i8** %14, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  %47 = load i8, i8* %46, align 1
  %48 = sext i8 %47 to i32
  %49 = icmp ne i32 %48, 46
  %50 = zext i1 %49 to i64
  %51 = select i1 %49, i32 1, i32 2
  br label %52

52:                                               ; preds = %44, %43
  %53 = phi i32 [ 0, %43 ], [ %51, %44 ]
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %37, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %59, label %114

59:                                               ; preds = %52
  %60 = load %struct.dirent*, %struct.dirent** %13, align 8
  %61 = getelementptr inbounds %struct.dirent, %struct.dirent* %60, i32 0, i32 5
  %62 = getelementptr inbounds [1024 x i8], [1024 x i8]* %61, i64 0, i64 0
  %63 = call i64 @strlen(i8* %62)
  %64 = add i64 %63, 1
  store i64 %64, i64* %15, align 8
  %65 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %12, align 8
  %66 = icmp ne i32 (i8*, i8*)* %65, null
  br i1 %66, label %67, label %85

67:                                               ; preds = %59
  %68 = load i64, i64* %9, align 8
  %69 = load i64, i64* %10, align 8
  %70 = icmp eq i64 %68, %69
  br i1 %70, label %71, label %76

71:                                               ; preds = %67
  %72 = load %struct.direntry_t*, %struct.direntry_t** %8, align 8
  %73 = bitcast %struct.direntry_t* %72 to i8*
  %74 = call nonnull i8* @xpalloc(i8* %73, i64* %9, i64 1, i64 -1, i64 8)
  %75 = bitcast i8* %74 to %struct.direntry_t*
  store %struct.direntry_t* %75, %struct.direntry_t** %8, align 8
  br label %76

76:                                               ; preds = %71, %67
  %77 = load i8*, i8** %14, align 8
  %78 = call noalias nonnull i8* @xstrdup(i8* %77)
  %79 = load %struct.direntry_t*, %struct.direntry_t** %8, align 8
  %80 = load i64, i64* %10, align 8
  %81 = getelementptr inbounds %struct.direntry_t, %struct.direntry_t* %79, i64 %80
  %82 = getelementptr inbounds %struct.direntry_t, %struct.direntry_t* %81, i32 0, i32 0
  store i8* %78, i8** %82, align 8
  %83 = load i64, i64* %10, align 8
  %84 = add nsw i64 %83, 1
  store i64 %84, i64* %10, align 8
  br label %110

85:                                               ; preds = %59
  %86 = load i64, i64* %7, align 8
  %87 = load i64, i64* %11, align 8
  %88 = sub nsw i64 %86, %87
  %89 = load i64, i64* %15, align 8
  %90 = icmp sle i64 %88, %89
  br i1 %90, label %91, label %99

91:                                               ; preds = %85
  %92 = load i8*, i8** %6, align 8
  %93 = load i64, i64* %15, align 8
  %94 = load i64, i64* %7, align 8
  %95 = load i64, i64* %11, align 8
  %96 = sub nsw i64 %94, %95
  %97 = sub nsw i64 %93, %96
  %98 = call nonnull i8* @xpalloc(i8* %92, i64* %7, i64 %97, i64 9223372036854775806, i64 1)
  store i8* %98, i8** %6, align 8
  br label %99

99:                                               ; preds = %91, %85
  %100 = load i8*, i8** %6, align 8
  %101 = load i64, i64* %11, align 8
  %102 = getelementptr inbounds i8, i8* %100, i64 %101
  %103 = load i8*, i8** %14, align 8
  %104 = load i64, i64* %15, align 8
  %105 = load i8*, i8** %6, align 8
  %106 = load i64, i64* %11, align 8
  %107 = getelementptr inbounds i8, i8* %105, i64 %106
  %108 = call i64 @llvm.objectsize.i64.p0i8(i8* %107, i1 false, i1 true, i1 false)
  %109 = call i8* @__memcpy_chk(i8* %102, i8* %103, i64 %104, i64 %108) #24
  br label %110

110:                                              ; preds = %99, %76
  %111 = load i64, i64* %15, align 8
  %112 = load i64, i64* %11, align 8
  %113 = add nsw i64 %112, %111
  store i64 %113, i64* %11, align 8
  br label %114

114:                                              ; preds = %110, %52
  br label %26

115:                                              ; preds = %32
  %116 = call i32* @__error()
  %117 = load i32, i32* %116, align 4
  %118 = icmp ne i32 %117, 0
  br i1 %118, label %119, label %123

119:                                              ; preds = %115
  %120 = load %struct.direntry_t*, %struct.direntry_t** %8, align 8
  %121 = bitcast %struct.direntry_t* %120 to i8*
  call void @rpl_free(i8* %121)
  %122 = load i8*, i8** %6, align 8
  call void @rpl_free(i8* %122)
  store i8* null, i8** %3, align 8
  br label %188

123:                                              ; preds = %115
  %124 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %12, align 8
  %125 = icmp ne i32 (i8*, i8*)* %124, null
  br i1 %125, label %126, label %173

126:                                              ; preds = %123
  %127 = load i64, i64* %10, align 8
  %128 = icmp ne i64 %127, 0
  br i1 %128, label %129, label %134

129:                                              ; preds = %126
  %130 = load %struct.direntry_t*, %struct.direntry_t** %8, align 8
  %131 = bitcast %struct.direntry_t* %130 to i8*
  %132 = load i64, i64* %10, align 8
  %133 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %12, align 8
  call void @qsort(i8* %131, i64 %132, i64 8, i32 (i8*, i8*)* %133)
  br label %134

134:                                              ; preds = %129, %126
  %135 = load i64, i64* %11, align 8
  %136 = add nsw i64 %135, 1
  %137 = call noalias nonnull i8* @ximalloc(i64 %136) #26
  store i8* %137, i8** %6, align 8
  store i64 0, i64* %11, align 8
  store i64 0, i64* %16, align 8
  br label %138

138:                                              ; preds = %167, %134
  %139 = load i64, i64* %16, align 8
  %140 = load i64, i64* %10, align 8
  %141 = icmp slt i64 %139, %140
  br i1 %141, label %142, label %170

142:                                              ; preds = %138
  %143 = load i8*, i8** %6, align 8
  %144 = load i64, i64* %11, align 8
  %145 = getelementptr inbounds i8, i8* %143, i64 %144
  store i8* %145, i8** %17, align 8
  %146 = load i8*, i8** %17, align 8
  %147 = load %struct.direntry_t*, %struct.direntry_t** %8, align 8
  %148 = load i64, i64* %16, align 8
  %149 = getelementptr inbounds %struct.direntry_t, %struct.direntry_t* %147, i64 %148
  %150 = getelementptr inbounds %struct.direntry_t, %struct.direntry_t* %149, i32 0, i32 0
  %151 = load i8*, i8** %150, align 8
  %152 = load i8*, i8** %17, align 8
  %153 = call i64 @llvm.objectsize.i64.p0i8(i8* %152, i1 false, i1 true, i1 false)
  %154 = call i8* @__stpcpy_chk(i8* %146, i8* %151, i64 %153) #24
  %155 = load i8*, i8** %17, align 8
  %156 = ptrtoint i8* %154 to i64
  %157 = ptrtoint i8* %155 to i64
  %158 = sub i64 %156, %157
  %159 = add nsw i64 %158, 1
  %160 = load i64, i64* %11, align 8
  %161 = add nsw i64 %160, %159
  store i64 %161, i64* %11, align 8
  %162 = load %struct.direntry_t*, %struct.direntry_t** %8, align 8
  %163 = load i64, i64* %16, align 8
  %164 = getelementptr inbounds %struct.direntry_t, %struct.direntry_t* %162, i64 %163
  %165 = getelementptr inbounds %struct.direntry_t, %struct.direntry_t* %164, i32 0, i32 0
  %166 = load i8*, i8** %165, align 8
  call void @rpl_free(i8* %166)
  br label %167

167:                                              ; preds = %142
  %168 = load i64, i64* %16, align 8
  %169 = add nsw i64 %168, 1
  store i64 %169, i64* %16, align 8
  br label %138, !llvm.loop !197

170:                                              ; preds = %138
  %171 = load %struct.direntry_t*, %struct.direntry_t** %8, align 8
  %172 = bitcast %struct.direntry_t* %171 to i8*
  call void @rpl_free(i8* %172)
  br label %183

173:                                              ; preds = %123
  %174 = load i64, i64* %11, align 8
  %175 = load i64, i64* %7, align 8
  %176 = icmp eq i64 %174, %175
  br i1 %176, label %177, label %182

177:                                              ; preds = %173
  %178 = load i8*, i8** %6, align 8
  %179 = load i64, i64* %11, align 8
  %180 = add nsw i64 %179, 1
  %181 = call nonnull i8* @xirealloc(i8* %178, i64 %180) #31
  store i8* %181, i8** %6, align 8
  br label %182

182:                                              ; preds = %177, %173
  br label %183

183:                                              ; preds = %182, %170
  %184 = load i8*, i8** %6, align 8
  %185 = load i64, i64* %11, align 8
  %186 = getelementptr inbounds i8, i8* %184, i64 %185
  store i8 0, i8* %186, align 1
  %187 = load i8*, i8** %6, align 8
  store i8* %187, i8** %3, align 8
  br label %188

188:                                              ; preds = %183, %119, %24
  %189 = load i8*, i8** %3, align 8
  ret i8* %189
}

declare %struct.dirent* @"\01_readdir$INODE64"(%struct.DIR*) #4

declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)*) #4

; Function Attrs: nounwind
declare i8* @__stpcpy_chk(i8*, i8*, i64) #3

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @direntry_cmp_name(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.direntry_t*, align 8
  %6 = alloca %struct.direntry_t*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.direntry_t*
  store %struct.direntry_t* %8, %struct.direntry_t** %5, align 8
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.direntry_t*
  store %struct.direntry_t* %10, %struct.direntry_t** %6, align 8
  %11 = load %struct.direntry_t*, %struct.direntry_t** %5, align 8
  %12 = getelementptr inbounds %struct.direntry_t, %struct.direntry_t* %11, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = load %struct.direntry_t*, %struct.direntry_t** %6, align 8
  %15 = getelementptr inbounds %struct.direntry_t, %struct.direntry_t* %14, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 @strcmp(i8* %13, i8* %16)
  ret i32 %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define noalias i8* @savedir(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.DIR*, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  %8 = load i8*, i8** %4, align 8
  %9 = call %struct.DIR* @opendir_safer(i8* %8)
  store %struct.DIR* %9, %struct.DIR** %6, align 8
  %10 = load %struct.DIR*, %struct.DIR** %6, align 8
  %11 = icmp ne %struct.DIR* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  store i8* null, i8** %3, align 8
  br label %24

13:                                               ; preds = %2
  %14 = load %struct.DIR*, %struct.DIR** %6, align 8
  %15 = load i32, i32* %5, align 4
  %16 = call noalias i8* @streamsavedir(%struct.DIR* %14, i32 %15)
  store i8* %16, i8** %7, align 8
  %17 = load %struct.DIR*, %struct.DIR** %6, align 8
  %18 = call i32 @"\01_closedir"(%struct.DIR* %17)
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %13
  %21 = load i8*, i8** %7, align 8
  call void @rpl_free(i8* %21)
  store i8* null, i8** %3, align 8
  br label %24

22:                                               ; preds = %13
  %23 = load i8*, i8** %7, align 8
  store i8* %23, i8** %3, align 8
  br label %24

24:                                               ; preds = %22, %20, %12
  %25 = load i8*, i8** %3, align 8
  ret i8* %25
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define void (i32)* @get_handler(%struct.sigaction* %0) #10 {
  %2 = alloca %struct.sigaction*, align 8
  store %struct.sigaction* %0, %struct.sigaction** %2, align 8
  %3 = load %struct.sigaction*, %struct.sigaction** %2, align 8
  %4 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %3, i32 0, i32 0
  %5 = bitcast %union.__sigaction_u* %4 to void (i32)**
  %6 = load void (i32)*, void (i32)** %5, align 8
  ret void (i32)* %6
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i64 @get_stat_atime_ns(%struct.stat* %0) #10 {
  %2 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %2, align 8
  %3 = load %struct.stat*, %struct.stat** %2, align 8
  %4 = getelementptr inbounds %struct.stat, %struct.stat* %3, i32 0, i32 7
  %5 = getelementptr inbounds %struct.timespec, %struct.timespec* %4, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  ret i64 %6
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i64 @get_stat_ctime_ns(%struct.stat* %0) #10 {
  %2 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %2, align 8
  %3 = load %struct.stat*, %struct.stat** %2, align 8
  %4 = getelementptr inbounds %struct.stat, %struct.stat* %3, i32 0, i32 9
  %5 = getelementptr inbounds %struct.timespec, %struct.timespec* %4, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  ret i64 %6
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i64 @get_stat_mtime_ns(%struct.stat* %0) #10 {
  %2 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %2, align 8
  %3 = load %struct.stat*, %struct.stat** %2, align 8
  %4 = getelementptr inbounds %struct.stat, %struct.stat* %3, i32 0, i32 8
  %5 = getelementptr inbounds %struct.timespec, %struct.timespec* %4, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  ret i64 %6
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i64 @get_stat_birthtime_ns(%struct.stat* %0) #10 {
  %2 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %2, align 8
  %3 = load %struct.stat*, %struct.stat** %2, align 8
  %4 = getelementptr inbounds %struct.stat, %struct.stat* %3, i32 0, i32 10
  %5 = getelementptr inbounds %struct.timespec, %struct.timespec* %4, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  ret i64 %6
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define { i64, i64 } @get_stat_atime(%struct.stat* %0) #10 {
  %2 = alloca %struct.timespec, align 8
  %3 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %3, align 8
  %4 = load %struct.stat*, %struct.stat** %3, align 8
  %5 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 7
  %6 = bitcast %struct.timespec* %2 to i8*
  %7 = bitcast %struct.timespec* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false)
  %8 = bitcast %struct.timespec* %2 to { i64, i64 }*
  %9 = load { i64, i64 }, { i64, i64 }* %8, align 8
  ret { i64, i64 } %9
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define { i64, i64 } @get_stat_ctime(%struct.stat* %0) #10 {
  %2 = alloca %struct.timespec, align 8
  %3 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %3, align 8
  %4 = load %struct.stat*, %struct.stat** %3, align 8
  %5 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 9
  %6 = bitcast %struct.timespec* %2 to i8*
  %7 = bitcast %struct.timespec* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false)
  %8 = bitcast %struct.timespec* %2 to { i64, i64 }*
  %9 = load { i64, i64 }, { i64, i64 }* %8, align 8
  ret { i64, i64 } %9
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define { i64, i64 } @get_stat_mtime(%struct.stat* %0) #10 {
  %2 = alloca %struct.timespec, align 8
  %3 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %3, align 8
  %4 = load %struct.stat*, %struct.stat** %3, align 8
  %5 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 8
  %6 = bitcast %struct.timespec* %2 to i8*
  %7 = bitcast %struct.timespec* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false)
  %8 = bitcast %struct.timespec* %2 to { i64, i64 }*
  %9 = load { i64, i64 }, { i64, i64 }* %8, align 8
  ret { i64, i64 } %9
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define { i64, i64 } @get_stat_birthtime(%struct.stat* %0) #10 {
  %2 = alloca %struct.timespec, align 8
  %3 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %3, align 8
  %4 = load %struct.stat*, %struct.stat** %3, align 8
  %5 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 10
  %6 = bitcast %struct.timespec* %2 to i8*
  %7 = bitcast %struct.timespec* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false)
  %8 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %19

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp sle i64 0, %13
  br i1 %14, label %15, label %19

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp slt i64 %17, 1000000000
  br i1 %18, label %22, label %19

19:                                               ; preds = %15, %11, %1
  %20 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 0
  store i64 -1, i64* %20, align 8
  %21 = getelementptr inbounds %struct.timespec, %struct.timespec* %2, i32 0, i32 1
  store i64 -1, i64* %21, align 8
  br label %22

22:                                               ; preds = %19, %15
  %23 = bitcast %struct.timespec* %2 to { i64, i64 }*
  %24 = load { i64, i64 }, { i64, i64 }* %23, align 8
  ret { i64, i64 } %24
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @stat_time_normalize(i32 %0, %struct.stat* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.stat*, align 8
  store i32 %0, i32* %3, align 4
  store %struct.stat* %1, %struct.stat** %4, align 8
  %5 = load i32, i32* %3, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i1 @strip_trailing_slashes(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8, align 1
  store i8* %0, i8** %2, align 8
  %6 = load i8*, i8** %2, align 8
  %7 = call i8* @last_component(i8* %6) #25
  store i8* %7, i8** %3, align 8
  %8 = load i8*, i8** %3, align 8
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %1
  %12 = load i8*, i8** %2, align 8
  store i8* %12, i8** %3, align 8
  br label %13

13:                                               ; preds = %11, %1
  %14 = load i8*, i8** %3, align 8
  %15 = load i8*, i8** %3, align 8
  %16 = call i64 @base_len(i8* %15) #25
  %17 = getelementptr inbounds i8, i8* %14, i64 %16
  store i8* %17, i8** %4, align 8
  %18 = load i8*, i8** %4, align 8
  %19 = load i8, i8* %18, align 1
  %20 = sext i8 %19 to i32
  %21 = icmp ne i32 %20, 0
  %22 = zext i1 %21 to i8
  store i8 %22, i8* %5, align 1
  %23 = load i8*, i8** %4, align 8
  store i8 0, i8* %23, align 1
  %24 = load i8, i8* %5, align 1
  %25 = trunc i8 %24 to i1
  ret i1 %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define { i64, i64 } @make_timespec(i64 %0, i64 %1) #0 {
  %3 = alloca %struct.timespec, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %4, align 8
  %7 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 0
  store i64 %6, i64* %7, align 8
  %8 = load i64, i64* %5, align 8
  %9 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 1
  store i64 %8, i64* %9, align 8
  %10 = bitcast %struct.timespec* %3 to { i64, i64 }*
  %11 = load { i64, i64 }, { i64, i64 }* %10, align 8
  ret { i64, i64 } %11
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i32 @timespec_cmp(i64 %0, i64 %1, i64 %2, i64 %3) #10 {
  %5 = alloca %struct.timespec, align 8
  %6 = alloca %struct.timespec, align 8
  %7 = bitcast %struct.timespec* %5 to { i64, i64 }*
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0
  store i64 %0, i64* %8, align 8
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1
  store i64 %1, i64* %9, align 8
  %10 = bitcast %struct.timespec* %6 to { i64, i64 }*
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i32 0, i32 0
  store i64 %2, i64* %11, align 8
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i32 0, i32 1
  store i64 %3, i64* %12, align 8
  %13 = getelementptr inbounds %struct.timespec, %struct.timespec* %5, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = icmp sgt i64 %14, %16
  %18 = zext i1 %17 to i32
  %19 = getelementptr inbounds %struct.timespec, %struct.timespec* %5, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = icmp slt i64 %20, %22
  %24 = zext i1 %23 to i32
  %25 = sub nsw i32 %18, %24
  %26 = mul nsw i32 2, %25
  %27 = getelementptr inbounds %struct.timespec, %struct.timespec* %5, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = icmp sgt i64 %28, %30
  %32 = zext i1 %31 to i32
  %33 = getelementptr inbounds %struct.timespec, %struct.timespec* %5, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = icmp slt i64 %34, %36
  %38 = zext i1 %37 to i32
  %39 = sub nsw i32 %32, %38
  %40 = add nsw i32 %26, %39
  ret i32 %40
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i32 @timespec_sign(i64 %0, i64 %1) #10 {
  %3 = alloca %struct.timespec, align 8
  %4 = bitcast %struct.timespec* %3 to { i64, i64 }*
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 0
  store i64 %0, i64* %5, align 8
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 1
  store i64 %1, i64* %6, align 8
  %7 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp sgt i64 %8, 0
  %10 = zext i1 %9 to i32
  %11 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp slt i64 %12, 0
  %14 = zext i1 %13 to i32
  %15 = sub nsw i32 %10, %14
  %16 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = icmp ne i64 %17, 0
  %19 = xor i1 %18, true
  %20 = zext i1 %19 to i32
  %21 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp ne i64 %22, 0
  %24 = xor i1 %23, true
  %25 = xor i1 %24, true
  %26 = zext i1 %25 to i32
  %27 = and i32 %20, %26
  %28 = add nsw i32 %15, %27
  ret i32 %28
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define double @timespectod(i64 %0, i64 %1) #0 {
  %3 = alloca %struct.timespec, align 8
  %4 = bitcast %struct.timespec* %3 to { i64, i64 }*
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 0
  store i64 %0, i64* %5, align 8
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 1
  store i64 %1, i64* %6, align 8
  %7 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = sitofp i64 %8 to double
  %10 = getelementptr inbounds %struct.timespec, %struct.timespec* %3, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = sitofp i64 %11 to double
  %13 = fdiv double %12, 1.000000e+09
  %14 = fadd double %9, %13
  ret double %14
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @fdutimens(i32 %0, i8* %1, %struct.timespec* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca %struct.timespec*, align 8
  %8 = alloca [2 x %struct.timespec], align 16
  %9 = alloca %struct.timespec*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.stat, align 8
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca %struct.stat, align 8
  %15 = alloca [2 x %struct.timeval], align 16
  %16 = alloca %struct.timeval*, align 8
  store i32 %0, i32* %5, align 4
  store i8* %1, i8** %6, align 8
  store %struct.timespec* %2, %struct.timespec** %7, align 8
  %17 = load %struct.timespec*, %struct.timespec** %7, align 8
  %18 = icmp ne %struct.timespec* %17, null
  br i1 %18, label %19, label %21

19:                                               ; preds = %3
  %20 = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %8, i64 0, i64 0
  br label %22

21:                                               ; preds = %3
  br label %22

22:                                               ; preds = %21, %19
  %23 = phi %struct.timespec* [ %20, %19 ], [ null, %21 ]
  store %struct.timespec* %23, %struct.timespec** %9, align 8
  store i32 0, i32* %10, align 4
  %24 = load %struct.timespec*, %struct.timespec** %9, align 8
  %25 = icmp ne %struct.timespec* %24, null
  br i1 %25, label %26, label %39

26:                                               ; preds = %22
  %27 = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %8, i64 0, i64 0
  %28 = load %struct.timespec*, %struct.timespec** %7, align 8
  %29 = getelementptr inbounds %struct.timespec, %struct.timespec* %28, i64 0
  %30 = bitcast %struct.timespec* %27 to i8*
  %31 = bitcast %struct.timespec* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %30, i8* align 8 %31, i64 16, i1 false)
  %32 = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %8, i64 0, i64 1
  %33 = load %struct.timespec*, %struct.timespec** %7, align 8
  %34 = getelementptr inbounds %struct.timespec, %struct.timespec* %33, i64 1
  %35 = bitcast %struct.timespec* %32 to i8*
  %36 = bitcast %struct.timespec* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %35, i8* align 8 %36, i64 16, i1 false)
  %37 = load %struct.timespec*, %struct.timespec** %9, align 8
  %38 = call i32 @validate_timespec(%struct.timespec* %37)
  store i32 %38, i32* %10, align 4
  br label %39

39:                                               ; preds = %26, %22
  %40 = load i32, i32* %10, align 4
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  store i32 -1, i32* %4, align 4
  br label %195

43:                                               ; preds = %39
  %44 = load i32, i32* %5, align 4
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %46, label %51

46:                                               ; preds = %43
  %47 = load i8*, i8** %6, align 8
  %48 = icmp ne i8* %47, null
  br i1 %48, label %51, label %49

49:                                               ; preds = %46
  %50 = call i32* @__error()
  store i32 9, i32* %50, align 4
  store i32 -1, i32* %4, align 4
  br label %195

51:                                               ; preds = %46, %43
  %52 = load i32, i32* @utimensat_works_really, align 4
  %53 = icmp sle i32 0, %52
  br i1 %53, label %54, label %114

54:                                               ; preds = %51
  %55 = load i32, i32* %5, align 4
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %97

57:                                               ; preds = %54
  %58 = load i8*, i8** %6, align 8
  %59 = call i64 @strlen(i8* %58)
  store i64 %59, i64* %13, align 8
  %60 = load i64, i64* %13, align 8
  %61 = icmp ugt i64 %60, 0
  br i1 %61, label %62, label %84

62:                                               ; preds = %57
  %63 = load i8*, i8** %6, align 8
  %64 = load i64, i64* %13, align 8
  %65 = sub i64 %64, 1
  %66 = getelementptr inbounds i8, i8* %63, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = sext i8 %67 to i32
  %69 = icmp eq i32 %68, 47
  br i1 %69, label %70, label %84

70:                                               ; preds = %62
  %71 = load i8*, i8** %6, align 8
  %72 = call i32 @rpl_stat(i8* %71, %struct.stat* %14)
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %70
  store i32 -1, i32* %4, align 4
  br label %195

75:                                               ; preds = %70
  %76 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 1
  %77 = load i16, i16* %76, align 4
  %78 = zext i16 %77 to i32
  %79 = and i32 %78, 61440
  %80 = icmp eq i32 %79, 16384
  br i1 %80, label %83, label %81

81:                                               ; preds = %75
  %82 = call i32* @__error()
  store i32 20, i32* %82, align 4
  store i32 -1, i32* %4, align 4
  br label %195

83:                                               ; preds = %75
  br label %84

84:                                               ; preds = %83, %62, %57
  %85 = load i8*, i8** %6, align 8
  %86 = load %struct.timespec*, %struct.timespec** %9, align 8
  %87 = call i32 @utimensat(i32 -2, i8* %85, %struct.timespec* %86, i32 0)
  store i32 %87, i32* %12, align 4
  %88 = load i32, i32* %12, align 4
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %94, label %90

90:                                               ; preds = %84
  %91 = call i32* @__error()
  %92 = load i32, i32* %91, align 4
  %93 = icmp ne i32 %92, 78
  br i1 %93, label %94, label %96

94:                                               ; preds = %90, %84
  store i32 1, i32* @utimensat_works_really, align 4
  %95 = load i32, i32* %12, align 4
  store i32 %95, i32* %4, align 4
  br label %195

96:                                               ; preds = %90
  br label %97

97:                                               ; preds = %96, %54
  %98 = load i32, i32* %5, align 4
  %99 = icmp sle i32 0, %98
  br i1 %99, label %100, label %113

100:                                              ; preds = %97
  %101 = load i32, i32* %5, align 4
  %102 = load %struct.timespec*, %struct.timespec** %9, align 8
  %103 = call i32 @futimens(i32 %101, %struct.timespec* %102)
  store i32 %103, i32* %12, align 4
  %104 = load i32, i32* %12, align 4
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %110, label %106

106:                                              ; preds = %100
  %107 = call i32* @__error()
  %108 = load i32, i32* %107, align 4
  %109 = icmp ne i32 %108, 78
  br i1 %109, label %110, label %112

110:                                              ; preds = %106, %100
  store i32 1, i32* @utimensat_works_really, align 4
  %111 = load i32, i32* %12, align 4
  store i32 %111, i32* %4, align 4
  br label %195

112:                                              ; preds = %106
  br label %113

113:                                              ; preds = %112, %97
  br label %114

114:                                              ; preds = %113, %51
  store i32 -1, i32* @utimensat_works_really, align 4
  store i32 -1, i32* @lutimensat_works_really, align 4
  %115 = load i32, i32* %10, align 4
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %120, label %117

117:                                              ; preds = %114
  %118 = load i32, i32* %5, align 4
  %119 = icmp slt i32 %118, 0
  br i1 %119, label %120, label %142

120:                                              ; preds = %117, %114
  %121 = load i32, i32* %10, align 4
  %122 = icmp ne i32 %121, 3
  br i1 %122, label %123, label %135

123:                                              ; preds = %120
  %124 = load i32, i32* %5, align 4
  %125 = icmp slt i32 %124, 0
  br i1 %125, label %126, label %130

126:                                              ; preds = %123
  %127 = load i8*, i8** %6, align 8
  %128 = call i32 @rpl_stat(i8* %127, %struct.stat* %11)
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %134, label %135

130:                                              ; preds = %123
  %131 = load i32, i32* %5, align 4
  %132 = call i32 @"\01_fstat$INODE64"(i32 %131, %struct.stat* %11)
  %133 = icmp ne i32 %132, 0
  br i1 %133, label %134, label %135

134:                                              ; preds = %130, %126
  store i32 -1, i32* %4, align 4
  br label %195

135:                                              ; preds = %130, %126, %120
  %136 = load %struct.timespec*, %struct.timespec** %9, align 8
  %137 = icmp ne %struct.timespec* %136, null
  br i1 %137, label %138, label %141

138:                                              ; preds = %135
  %139 = call zeroext i1 @update_timespec(%struct.stat* %11, %struct.timespec** %9)
  br i1 %139, label %140, label %141

140:                                              ; preds = %138
  store i32 0, i32* %4, align 4
  br label %195

141:                                              ; preds = %138, %135
  br label %142

142:                                              ; preds = %141, %117
  %143 = load %struct.timespec*, %struct.timespec** %9, align 8
  %144 = icmp ne %struct.timespec* %143, null
  br i1 %144, label %145, label %175

145:                                              ; preds = %142
  %146 = load %struct.timespec*, %struct.timespec** %9, align 8
  %147 = getelementptr inbounds %struct.timespec, %struct.timespec* %146, i64 0
  %148 = getelementptr inbounds %struct.timespec, %struct.timespec* %147, i32 0, i32 0
  %149 = load i64, i64* %148, align 8
  %150 = getelementptr inbounds [2 x %struct.timeval], [2 x %struct.timeval]* %15, i64 0, i64 0
  %151 = getelementptr inbounds %struct.timeval, %struct.timeval* %150, i32 0, i32 0
  store i64 %149, i64* %151, align 16
  %152 = load %struct.timespec*, %struct.timespec** %9, align 8
  %153 = getelementptr inbounds %struct.timespec, %struct.timespec* %152, i64 0
  %154 = getelementptr inbounds %struct.timespec, %struct.timespec* %153, i32 0, i32 1
  %155 = load i64, i64* %154, align 8
  %156 = sdiv i64 %155, 1000
  %157 = trunc i64 %156 to i32
  %158 = getelementptr inbounds [2 x %struct.timeval], [2 x %struct.timeval]* %15, i64 0, i64 0
  %159 = getelementptr inbounds %struct.timeval, %struct.timeval* %158, i32 0, i32 1
  store i32 %157, i32* %159, align 8
  %160 = load %struct.timespec*, %struct.timespec** %9, align 8
  %161 = getelementptr inbounds %struct.timespec, %struct.timespec* %160, i64 1
  %162 = getelementptr inbounds %struct.timespec, %struct.timespec* %161, i32 0, i32 0
  %163 = load i64, i64* %162, align 8
  %164 = getelementptr inbounds [2 x %struct.timeval], [2 x %struct.timeval]* %15, i64 0, i64 1
  %165 = getelementptr inbounds %struct.timeval, %struct.timeval* %164, i32 0, i32 0
  store i64 %163, i64* %165, align 16
  %166 = load %struct.timespec*, %struct.timespec** %9, align 8
  %167 = getelementptr inbounds %struct.timespec, %struct.timespec* %166, i64 1
  %168 = getelementptr inbounds %struct.timespec, %struct.timespec* %167, i32 0, i32 1
  %169 = load i64, i64* %168, align 8
  %170 = sdiv i64 %169, 1000
  %171 = trunc i64 %170 to i32
  %172 = getelementptr inbounds [2 x %struct.timeval], [2 x %struct.timeval]* %15, i64 0, i64 1
  %173 = getelementptr inbounds %struct.timeval, %struct.timeval* %172, i32 0, i32 1
  store i32 %171, i32* %173, align 8
  %174 = getelementptr inbounds [2 x %struct.timeval], [2 x %struct.timeval]* %15, i64 0, i64 0
  store %struct.timeval* %174, %struct.timeval** %16, align 8
  br label %176

175:                                              ; preds = %142
  store %struct.timeval* null, %struct.timeval** %16, align 8
  br label %176

176:                                              ; preds = %175, %145
  %177 = load i32, i32* %5, align 4
  %178 = icmp slt i32 %177, 0
  br i1 %178, label %179, label %180

179:                                              ; preds = %176
  br label %187

180:                                              ; preds = %176
  %181 = load i32, i32* %5, align 4
  %182 = load %struct.timeval*, %struct.timeval** %16, align 8
  %183 = call i32 @futimes(i32 %181, %struct.timeval* %182)
  %184 = icmp eq i32 %183, 0
  br i1 %184, label %185, label %186

185:                                              ; preds = %180
  store i32 0, i32* %4, align 4
  br label %195

186:                                              ; preds = %180
  br label %187

187:                                              ; preds = %186, %179
  %188 = load i8*, i8** %6, align 8
  %189 = icmp ne i8* %188, null
  br i1 %189, label %191, label %190

190:                                              ; preds = %187
  store i32 -1, i32* %4, align 4
  br label %195

191:                                              ; preds = %187
  %192 = load i8*, i8** %6, align 8
  %193 = load %struct.timeval*, %struct.timeval** %16, align 8
  %194 = call i32 @utimes(i8* %192, %struct.timeval* %193)
  store i32 %194, i32* %4, align 4
  br label %195

195:                                              ; preds = %191, %190, %185, %140, %134, %110, %94, %81, %74, %49, %42
  %196 = load i32, i32* %4, align 4
  ret i32 %196
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal i32 @validate_timespec(%struct.timespec* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.timespec*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct.timespec* %0, %struct.timespec** %3, align 8
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %6 = load %struct.timespec*, %struct.timespec** %3, align 8
  %7 = getelementptr inbounds %struct.timespec, %struct.timespec* %6, i64 0
  %8 = getelementptr inbounds %struct.timespec, %struct.timespec* %7, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp ne i64 %9, -1
  br i1 %10, label %11, label %29

11:                                               ; preds = %1
  %12 = load %struct.timespec*, %struct.timespec** %3, align 8
  %13 = getelementptr inbounds %struct.timespec, %struct.timespec* %12, i64 0
  %14 = getelementptr inbounds %struct.timespec, %struct.timespec* %13, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp ne i64 %15, -2
  br i1 %16, label %17, label %29

17:                                               ; preds = %11
  %18 = load %struct.timespec*, %struct.timespec** %3, align 8
  %19 = getelementptr inbounds %struct.timespec, %struct.timespec* %18, i64 0
  %20 = getelementptr inbounds %struct.timespec, %struct.timespec* %19, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = icmp sle i64 0, %21
  br i1 %22, label %23, label %53

23:                                               ; preds = %17
  %24 = load %struct.timespec*, %struct.timespec** %3, align 8
  %25 = getelementptr inbounds %struct.timespec, %struct.timespec* %24, i64 0
  %26 = getelementptr inbounds %struct.timespec, %struct.timespec* %25, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = icmp slt i64 %27, 1000000000
  br i1 %28, label %29, label %53

29:                                               ; preds = %23, %11, %1
  %30 = load %struct.timespec*, %struct.timespec** %3, align 8
  %31 = getelementptr inbounds %struct.timespec, %struct.timespec* %30, i64 1
  %32 = getelementptr inbounds %struct.timespec, %struct.timespec* %31, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = icmp ne i64 %33, -1
  br i1 %34, label %35, label %55

35:                                               ; preds = %29
  %36 = load %struct.timespec*, %struct.timespec** %3, align 8
  %37 = getelementptr inbounds %struct.timespec, %struct.timespec* %36, i64 1
  %38 = getelementptr inbounds %struct.timespec, %struct.timespec* %37, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = icmp ne i64 %39, -2
  br i1 %40, label %41, label %55

41:                                               ; preds = %35
  %42 = load %struct.timespec*, %struct.timespec** %3, align 8
  %43 = getelementptr inbounds %struct.timespec, %struct.timespec* %42, i64 1
  %44 = getelementptr inbounds %struct.timespec, %struct.timespec* %43, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = icmp sle i64 0, %45
  br i1 %46, label %47, label %53

47:                                               ; preds = %41
  %48 = load %struct.timespec*, %struct.timespec** %3, align 8
  %49 = getelementptr inbounds %struct.timespec, %struct.timespec* %48, i64 1
  %50 = getelementptr inbounds %struct.timespec, %struct.timespec* %49, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = icmp slt i64 %51, 1000000000
  br i1 %52, label %55, label %53

53:                                               ; preds = %47, %41, %23, %17
  %54 = call i32* @__error()
  store i32 22, i32* %54, align 4
  store i32 -1, i32* %2, align 4
  br label %111

55:                                               ; preds = %47, %35, %29
  %56 = load %struct.timespec*, %struct.timespec** %3, align 8
  %57 = getelementptr inbounds %struct.timespec, %struct.timespec* %56, i64 0
  %58 = getelementptr inbounds %struct.timespec, %struct.timespec* %57, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = icmp eq i64 %59, -1
  br i1 %60, label %67, label %61

61:                                               ; preds = %55
  %62 = load %struct.timespec*, %struct.timespec** %3, align 8
  %63 = getelementptr inbounds %struct.timespec, %struct.timespec* %62, i64 0
  %64 = getelementptr inbounds %struct.timespec, %struct.timespec* %63, i32 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = icmp eq i64 %65, -2
  br i1 %66, label %67, label %80

67:                                               ; preds = %61, %55
  %68 = load %struct.timespec*, %struct.timespec** %3, align 8
  %69 = getelementptr inbounds %struct.timespec, %struct.timespec* %68, i64 0
  %70 = getelementptr inbounds %struct.timespec, %struct.timespec* %69, i32 0, i32 0
  store i64 0, i64* %70, align 8
  store i32 1, i32* %4, align 4
  %71 = load %struct.timespec*, %struct.timespec** %3, align 8
  %72 = getelementptr inbounds %struct.timespec, %struct.timespec* %71, i64 0
  %73 = getelementptr inbounds %struct.timespec, %struct.timespec* %72, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %74, -2
  br i1 %75, label %76, label %79

76:                                               ; preds = %67
  %77 = load i32, i32* %5, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %5, align 4
  br label %79

79:                                               ; preds = %76, %67
  br label %80

80:                                               ; preds = %79, %61
  %81 = load %struct.timespec*, %struct.timespec** %3, align 8
  %82 = getelementptr inbounds %struct.timespec, %struct.timespec* %81, i64 1
  %83 = getelementptr inbounds %struct.timespec, %struct.timespec* %82, i32 0, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = icmp eq i64 %84, -1
  br i1 %85, label %92, label %86

86:                                               ; preds = %80
  %87 = load %struct.timespec*, %struct.timespec** %3, align 8
  %88 = getelementptr inbounds %struct.timespec, %struct.timespec* %87, i64 1
  %89 = getelementptr inbounds %struct.timespec, %struct.timespec* %88, i32 0, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = icmp eq i64 %90, -2
  br i1 %91, label %92, label %105

92:                                               ; preds = %86, %80
  %93 = load %struct.timespec*, %struct.timespec** %3, align 8
  %94 = getelementptr inbounds %struct.timespec, %struct.timespec* %93, i64 1
  %95 = getelementptr inbounds %struct.timespec, %struct.timespec* %94, i32 0, i32 0
  store i64 0, i64* %95, align 8
  store i32 1, i32* %4, align 4
  %96 = load %struct.timespec*, %struct.timespec** %3, align 8
  %97 = getelementptr inbounds %struct.timespec, %struct.timespec* %96, i64 1
  %98 = getelementptr inbounds %struct.timespec, %struct.timespec* %97, i32 0, i32 1
  %99 = load i64, i64* %98, align 8
  %100 = icmp eq i64 %99, -2
  br i1 %100, label %101, label %104

101:                                              ; preds = %92
  %102 = load i32, i32* %5, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %5, align 4
  br label %104

104:                                              ; preds = %101, %92
  br label %105

105:                                              ; preds = %104, %86
  %106 = load i32, i32* %4, align 4
  %107 = load i32, i32* %5, align 4
  %108 = icmp eq i32 %107, 1
  %109 = zext i1 %108 to i32
  %110 = add nsw i32 %106, %109
  store i32 %110, i32* %2, align 4
  br label %111

111:                                              ; preds = %105, %53
  %112 = load i32, i32* %2, align 4
  ret i32 %112
}

declare i32 @rpl_stat(i8*, %struct.stat*) #4

declare i32 @utimensat(i32, i8*, %struct.timespec*, i32) #4

declare i32 @futimens(i32, %struct.timespec*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define internal zeroext i1 @update_timespec(%struct.stat* %0, %struct.timespec** %1) #0 {
  %3 = alloca i1, align 1
  %4 = alloca %struct.stat*, align 8
  %5 = alloca %struct.timespec**, align 8
  %6 = alloca %struct.timespec*, align 8
  %7 = alloca %struct.timespec, align 8
  %8 = alloca %struct.timespec, align 8
  store %struct.stat* %0, %struct.stat** %4, align 8
  store %struct.timespec** %1, %struct.timespec*** %5, align 8
  %9 = load %struct.timespec**, %struct.timespec*** %5, align 8
  %10 = load %struct.timespec*, %struct.timespec** %9, align 8
  store %struct.timespec* %10, %struct.timespec** %6, align 8
  %11 = load %struct.timespec*, %struct.timespec** %6, align 8
  %12 = getelementptr inbounds %struct.timespec, %struct.timespec* %11, i64 0
  %13 = getelementptr inbounds %struct.timespec, %struct.timespec* %12, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, -2
  br i1 %15, label %16, label %23

16:                                               ; preds = %2
  %17 = load %struct.timespec*, %struct.timespec** %6, align 8
  %18 = getelementptr inbounds %struct.timespec, %struct.timespec* %17, i64 1
  %19 = getelementptr inbounds %struct.timespec, %struct.timespec* %18, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp eq i64 %20, -2
  br i1 %21, label %22, label %23

22:                                               ; preds = %16
  store i1 true, i1* %3, align 1
  br label %94

23:                                               ; preds = %16, %2
  %24 = load %struct.timespec*, %struct.timespec** %6, align 8
  %25 = getelementptr inbounds %struct.timespec, %struct.timespec* %24, i64 0
  %26 = getelementptr inbounds %struct.timespec, %struct.timespec* %25, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %27, -1
  br i1 %28, label %29, label %37

29:                                               ; preds = %23
  %30 = load %struct.timespec*, %struct.timespec** %6, align 8
  %31 = getelementptr inbounds %struct.timespec, %struct.timespec* %30, i64 1
  %32 = getelementptr inbounds %struct.timespec, %struct.timespec* %31, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %33, -1
  br i1 %34, label %35, label %37

35:                                               ; preds = %29
  %36 = load %struct.timespec**, %struct.timespec*** %5, align 8
  store %struct.timespec* null, %struct.timespec** %36, align 8
  store i1 false, i1* %3, align 1
  br label %94

37:                                               ; preds = %29, %23
  %38 = load %struct.timespec*, %struct.timespec** %6, align 8
  %39 = getelementptr inbounds %struct.timespec, %struct.timespec* %38, i64 0
  %40 = getelementptr inbounds %struct.timespec, %struct.timespec* %39, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = icmp eq i64 %41, -2
  br i1 %42, label %43, label %55

43:                                               ; preds = %37
  %44 = load %struct.timespec*, %struct.timespec** %6, align 8
  %45 = getelementptr inbounds %struct.timespec, %struct.timespec* %44, i64 0
  %46 = load %struct.stat*, %struct.stat** %4, align 8
  %47 = call { i64, i64 } @get_stat_atime(%struct.stat* %46) #25
  %48 = bitcast %struct.timespec* %7 to { i64, i64 }*
  %49 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %48, i32 0, i32 0
  %50 = extractvalue { i64, i64 } %47, 0
  store i64 %50, i64* %49, align 8
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %48, i32 0, i32 1
  %52 = extractvalue { i64, i64 } %47, 1
  store i64 %52, i64* %51, align 8
  %53 = bitcast %struct.timespec* %45 to i8*
  %54 = bitcast %struct.timespec* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %54, i64 16, i1 false)
  br label %65

55:                                               ; preds = %37
  %56 = load %struct.timespec*, %struct.timespec** %6, align 8
  %57 = getelementptr inbounds %struct.timespec, %struct.timespec* %56, i64 0
  %58 = getelementptr inbounds %struct.timespec, %struct.timespec* %57, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = icmp eq i64 %59, -1
  br i1 %60, label %61, label %64

61:                                               ; preds = %55
  %62 = load %struct.timespec*, %struct.timespec** %6, align 8
  %63 = getelementptr inbounds %struct.timespec, %struct.timespec* %62, i64 0
  call void @gettime(%struct.timespec* %63)
  br label %64

64:                                               ; preds = %61, %55
  br label %65

65:                                               ; preds = %64, %43
  %66 = load %struct.timespec*, %struct.timespec** %6, align 8
  %67 = getelementptr inbounds %struct.timespec, %struct.timespec* %66, i64 1
  %68 = getelementptr inbounds %struct.timespec, %struct.timespec* %67, i32 0, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = icmp eq i64 %69, -2
  br i1 %70, label %71, label %83

71:                                               ; preds = %65
  %72 = load %struct.timespec*, %struct.timespec** %6, align 8
  %73 = getelementptr inbounds %struct.timespec, %struct.timespec* %72, i64 1
  %74 = load %struct.stat*, %struct.stat** %4, align 8
  %75 = call { i64, i64 } @get_stat_mtime(%struct.stat* %74) #25
  %76 = bitcast %struct.timespec* %8 to { i64, i64 }*
  %77 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %76, i32 0, i32 0
  %78 = extractvalue { i64, i64 } %75, 0
  store i64 %78, i64* %77, align 8
  %79 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %76, i32 0, i32 1
  %80 = extractvalue { i64, i64 } %75, 1
  store i64 %80, i64* %79, align 8
  %81 = bitcast %struct.timespec* %73 to i8*
  %82 = bitcast %struct.timespec* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 16, i1 false)
  br label %93

83:                                               ; preds = %65
  %84 = load %struct.timespec*, %struct.timespec** %6, align 8
  %85 = getelementptr inbounds %struct.timespec, %struct.timespec* %84, i64 1
  %86 = getelementptr inbounds %struct.timespec, %struct.timespec* %85, i32 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = icmp eq i64 %87, -1
  br i1 %88, label %89, label %92

89:                                               ; preds = %83
  %90 = load %struct.timespec*, %struct.timespec** %6, align 8
  %91 = getelementptr inbounds %struct.timespec, %struct.timespec* %90, i64 1
  call void @gettime(%struct.timespec* %91)
  br label %92

92:                                               ; preds = %89, %83
  br label %93

93:                                               ; preds = %92, %71
  store i1 false, i1* %3, align 1
  br label %94

94:                                               ; preds = %93, %35, %22
  %95 = load i1, i1* %3, align 1
  ret i1 %95
}

declare i32 @futimes(i32, %struct.timeval*) #4

declare i32 @utimes(i8*, %struct.timeval*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @utimens(i8* %0, %struct.timespec* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.timespec*, align 8
  store i8* %0, i8** %3, align 8
  store %struct.timespec* %1, %struct.timespec** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = load %struct.timespec*, %struct.timespec** %4, align 8
  %7 = call i32 @fdutimens(i32 -1, i8* %5, %struct.timespec* %6)
  ret i32 %7
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define i32 @lutimens(i8* %0, %struct.timespec* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca %struct.timespec*, align 8
  %6 = alloca [2 x %struct.timespec], align 16
  %7 = alloca %struct.timespec*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.stat, align 8
  %10 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store %struct.timespec* %1, %struct.timespec** %5, align 8
  %11 = load %struct.timespec*, %struct.timespec** %5, align 8
  %12 = icmp ne %struct.timespec* %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %6, i64 0, i64 0
  br label %16

15:                                               ; preds = %2
  br label %16

16:                                               ; preds = %15, %13
  %17 = phi %struct.timespec* [ %14, %13 ], [ null, %15 ]
  store %struct.timespec* %17, %struct.timespec** %7, align 8
  store i32 0, i32* %8, align 4
  %18 = load %struct.timespec*, %struct.timespec** %7, align 8
  %19 = icmp ne %struct.timespec* %18, null
  br i1 %19, label %20, label %33

20:                                               ; preds = %16
  %21 = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %6, i64 0, i64 0
  %22 = load %struct.timespec*, %struct.timespec** %5, align 8
  %23 = getelementptr inbounds %struct.timespec, %struct.timespec* %22, i64 0
  %24 = bitcast %struct.timespec* %21 to i8*
  %25 = bitcast %struct.timespec* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %24, i8* align 8 %25, i64 16, i1 false)
  %26 = getelementptr inbounds [2 x %struct.timespec], [2 x %struct.timespec]* %6, i64 0, i64 1
  %27 = load %struct.timespec*, %struct.timespec** %5, align 8
  %28 = getelementptr inbounds %struct.timespec, %struct.timespec* %27, i64 1
  %29 = bitcast %struct.timespec* %26 to i8*
  %30 = bitcast %struct.timespec* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %29, i8* align 8 %30, i64 16, i1 false)
  %31 = load %struct.timespec*, %struct.timespec** %7, align 8
  %32 = call i32 @validate_timespec(%struct.timespec* %31)
  store i32 %32, i32* %8, align 4
  br label %33

33:                                               ; preds = %20, %16
  %34 = load i32, i32* %8, align 4
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %33
  store i32 -1, i32* %3, align 4
  br label %93

37:                                               ; preds = %33
  %38 = load i32, i32* @lutimensat_works_really, align 4
  %39 = icmp sle i32 0, %38
  br i1 %39, label %40, label %53

40:                                               ; preds = %37
  %41 = load i8*, i8** %4, align 8
  %42 = load %struct.timespec*, %struct.timespec** %7, align 8
  %43 = call i32 @utimensat(i32 -2, i8* %41, %struct.timespec* %42, i32 32)
  store i32 %43, i32* %10, align 4
  %44 = load i32, i32* %10, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %50, label %46

46:                                               ; preds = %40
  %47 = call i32* @__error()
  %48 = load i32, i32* %47, align 4
  %49 = icmp ne i32 %48, 78
  br i1 %49, label %50, label %52

50:                                               ; preds = %46, %40
  store i32 1, i32* @utimensat_works_really, align 4
  store i32 1, i32* @lutimensat_works_really, align 4
  %51 = load i32, i32* %10, align 4
  store i32 %51, i32* %3, align 4
  br label %93

52:                                               ; preds = %46
  br label %53

53:                                               ; preds = %52, %37
  store i32 -1, i32* @lutimensat_works_really, align 4
  %54 = load i32, i32* %8, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %57, label %56

56:                                               ; preds = %53
  br i1 true, label %57, label %72

57:                                               ; preds = %56, %53
  %58 = load i32, i32* %8, align 4
  %59 = icmp ne i32 %58, 3
  br i1 %59, label %60, label %65

60:                                               ; preds = %57
  %61 = load i8*, i8** %4, align 8
  %62 = call i32 @rpl_lstat(i8* %61, %struct.stat* %9)
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %60
  store i32 -1, i32* %3, align 4
  br label %93

65:                                               ; preds = %60, %57
  %66 = load %struct.timespec*, %struct.timespec** %7, align 8
  %67 = icmp ne %struct.timespec* %66, null
  br i1 %67, label %68, label %71

68:                                               ; preds = %65
  %69 = call zeroext i1 @update_timespec(%struct.stat* %9, %struct.timespec** %7)
  br i1 %69, label %70, label %71

70:                                               ; preds = %68
  store i32 0, i32* %3, align 4
  br label %93

71:                                               ; preds = %68, %65
  br label %72

72:                                               ; preds = %71, %56
  %73 = load i32, i32* %8, align 4
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %81, label %75

75:                                               ; preds = %72
  br i1 true, label %81, label %76

76:                                               ; preds = %75
  %77 = load i8*, i8** %4, align 8
  %78 = call i32 @rpl_lstat(i8* %77, %struct.stat* %9)
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %76
  store i32 -1, i32* %3, align 4
  br label %93

81:                                               ; preds = %76, %75, %72
  %82 = getelementptr inbounds %struct.stat, %struct.stat* %9, i32 0, i32 1
  %83 = load i16, i16* %82, align 4
  %84 = zext i16 %83 to i32
  %85 = and i32 %84, 61440
  %86 = icmp eq i32 %85, 40960
  br i1 %86, label %91, label %87

87:                                               ; preds = %81
  %88 = load i8*, i8** %4, align 8
  %89 = load %struct.timespec*, %struct.timespec** %7, align 8
  %90 = call i32 @fdutimens(i32 -1, i8* %88, %struct.timespec* %89)
  store i32 %90, i32* %3, align 4
  br label %93

91:                                               ; preds = %81
  %92 = call i32* @__error()
  store i32 78, i32* %92, align 4
  store i32 -1, i32* %3, align 4
  br label %93

93:                                               ; preds = %91, %87, %80, %70, %64, %50, %36
  %94 = load i32, i32* %3, align 4
  ret i32 %94
}

declare i32 @rpl_lstat(i8*, %struct.stat*) #4

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(1,2)
define i8* @xnrealloc(i8* %0, i64 %1, i64 %2) #20 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i8*, i8** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load i64, i64* %6, align 8
  %10 = call i8* @xreallocarray(i8* %7, i64 %8, i64 %9) #32
  ret i8* %10
}

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(1,2)
define i8* @xreallocarray(i8* %0, i64 %1, i64 %2) #20 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %8 = load i8*, i8** %4, align 8
  %9 = load i64, i64* %5, align 8
  %10 = load i64, i64* %6, align 8
  %11 = call i8* @reallocarray(i8* %8, i64 %9, i64 %10)
  store i8* %11, i8** %7, align 8
  %12 = load i8*, i8** %7, align 8
  %13 = icmp ne i8* %12, null
  br i1 %13, label %24, label %14

14:                                               ; preds = %3
  %15 = load i8*, i8** %4, align 8
  %16 = icmp ne i8* %15, null
  br i1 %16, label %17, label %23

17:                                               ; preds = %14
  %18 = load i64, i64* %5, align 8
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %17
  %21 = load i64, i64* %6, align 8
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %20, %14
  call void @xalloc_die() #23
  unreachable

24:                                               ; preds = %20, %17, %3
  %25 = load i8*, i8** %7, align 8
  ret i8* %25
}

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(0)
define noalias nonnull i8* @xmalloc(i64 %0) #17 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call align 16 i8* @malloc(i64 %3) #26
  %5 = call i8* @nonnull(i8* %4) #25
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define internal i8* @nonnull(i8* %0) #10 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = icmp ne i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  call void @xalloc_die() #23
  unreachable

6:                                                ; preds = %1
  %7 = load i8*, i8** %2, align 8
  ret i8* %7
}

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(0)
define noalias nonnull i8* @ximalloc(i64 %0) #17 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call noalias i8* @imalloc(i64 %3)
  %5 = call i8* @nonnull(i8* %4) #25
  ret i8* %5
}

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(0)
define noalias nonnull i8* @xcharalloc(i64 %0) #17 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call noalias nonnull i8* @xmalloc(i64 %3) #26
  ret i8* %4
}

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(1)
define i8* @xrealloc(i8* %0, i64 %1) #21 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %6 = load i8*, i8** %3, align 8
  %7 = load i64, i64* %4, align 8
  %8 = call align 16 i8* @realloc(i8* %6, i64 %7) #31
  store i8* %8, i8** %5, align 8
  %9 = load i8*, i8** %5, align 8
  %10 = icmp ne i8* %9, null
  br i1 %10, label %18, label %11

11:                                               ; preds = %2
  %12 = load i8*, i8** %3, align 8
  %13 = icmp ne i8* %12, null
  br i1 %13, label %14, label %17

14:                                               ; preds = %11
  %15 = load i64, i64* %4, align 8
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %14, %11
  call void @xalloc_die() #23
  unreachable

18:                                               ; preds = %14, %2
  %19 = load i8*, i8** %5, align 8
  ret i8* %19
}

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(1)
define nonnull i8* @xirealloc(i8* %0, i64 %1) #21 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = load i64, i64* %4, align 8
  %7 = call i8* @irealloc(i8* %5, i64 %6)
  %8 = call i8* @nonnull(i8* %7) #25
  ret i8* %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(1,2)
define nonnull i8* @xireallocarray(i8* %0, i64 %1, i64 %2) #20 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i8*, i8** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load i64, i64* %6, align 8
  %10 = call i8* @ireallocarray(i8* %7, i64 %8, i64 %9)
  %11 = call i8* @nonnull(i8* %10) #25
  ret i8* %11
}

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(0,1)
define noalias nonnull i8* @xnmalloc(i64 %0, i64 %1) #22 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = load i64, i64* %4, align 8
  %7 = call i8* @xreallocarray(i8* null, i64 %5, i64 %6) #32
  ret i8* %7
}

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(0,1)
define noalias nonnull i8* @xinmalloc(i64 %0, i64 %1) #22 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = load i64, i64* %4, align 8
  %7 = call nonnull i8* @xireallocarray(i8* null, i64 %5, i64 %6) #32
  ret i8* %7
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define nonnull i8* @x2realloc(i8* %0, i64* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64*, align 8
  store i8* %0, i8** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = load i64*, i64** %4, align 8
  %7 = call nonnull i8* @x2nrealloc(i8* %5, i64* %6, i64 1)
  ret i8* %7
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define nonnull i8* @x2nrealloc(i8* %0, i64* %1, i64 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64 %2, i64* %6, align 8
  %8 = load i64*, i64** %5, align 8
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %7, align 8
  %10 = load i8*, i8** %4, align 8
  %11 = icmp ne i8* %10, null
  br i1 %11, label %26, label %12

12:                                               ; preds = %3
  %13 = load i64, i64* %7, align 8
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %25, label %15

15:                                               ; preds = %12
  %16 = load i64, i64* %6, align 8
  %17 = udiv i64 128, %16
  store i64 %17, i64* %7, align 8
  %18 = load i64, i64* %7, align 8
  %19 = icmp ne i64 %18, 0
  %20 = xor i1 %19, true
  %21 = zext i1 %20 to i32
  %22 = sext i32 %21 to i64
  %23 = load i64, i64* %7, align 8
  %24 = add i64 %23, %22
  store i64 %24, i64* %7, align 8
  br label %25

25:                                               ; preds = %15, %12
  br label %36

26:                                               ; preds = %3
  %27 = load i64, i64* %7, align 8
  %28 = load i64, i64* %7, align 8
  %29 = lshr i64 %28, 1
  %30 = add i64 %29, 1
  %31 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %27, i64 %30)
  %32 = extractvalue { i64, i1 } %31, 1
  %33 = extractvalue { i64, i1 } %31, 0
  store i64 %33, i64* %7, align 8
  br i1 %32, label %34, label %35

34:                                               ; preds = %26
  call void @xalloc_die() #23
  unreachable

35:                                               ; preds = %26
  br label %36

36:                                               ; preds = %35, %25
  %37 = load i8*, i8** %4, align 8
  %38 = load i64, i64* %7, align 8
  %39 = load i64, i64* %6, align 8
  %40 = call i8* @xreallocarray(i8* %37, i64 %38, i64 %39) #32
  store i8* %40, i8** %4, align 8
  %41 = load i64, i64* %7, align 8
  %42 = load i64*, i64** %5, align 8
  store i64 %41, i64* %42, align 8
  %43 = load i8*, i8** %4, align 8
  ret i8* %43
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define nonnull i8* @xpalloc(i8* %0, i64* %1, i64 %2, i64 %3, i64 %4) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store i8* %0, i8** %6, align 8
  store i64* %1, i64** %7, align 8
  store i64 %2, i64* %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  %15 = load i64*, i64** %7, align 8
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %11, align 8
  %17 = load i64, i64* %11, align 8
  %18 = load i64, i64* %11, align 8
  %19 = ashr i64 %18, 1
  %20 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %17, i64 %19)
  %21 = extractvalue { i64, i1 } %20, 1
  %22 = extractvalue { i64, i1 } %20, 0
  store i64 %22, i64* %12, align 8
  br i1 %21, label %23, label %24

23:                                               ; preds = %5
  store i64 9223372036854775807, i64* %12, align 8
  br label %24

24:                                               ; preds = %23, %5
  %25 = load i64, i64* %9, align 8
  %26 = icmp sle i64 0, %25
  br i1 %26, label %27, label %33

27:                                               ; preds = %24
  %28 = load i64, i64* %9, align 8
  %29 = load i64, i64* %12, align 8
  %30 = icmp slt i64 %28, %29
  br i1 %30, label %31, label %33

31:                                               ; preds = %27
  %32 = load i64, i64* %9, align 8
  store i64 %32, i64* %12, align 8
  br label %33

33:                                               ; preds = %31, %27, %24
  br i1 false, label %34, label %235

34:                                               ; preds = %33
  br i1 false, label %135, label %35

35:                                               ; preds = %34
  %36 = load i64, i64* %10, align 8
  %37 = icmp slt i64 %36, 0
  br i1 %37, label %38, label %87

38:                                               ; preds = %35
  %39 = load i64, i64* %12, align 8
  %40 = icmp slt i64 %39, 0
  br i1 %40, label %41, label %64

41:                                               ; preds = %38
  br i1 true, label %42, label %47

42:                                               ; preds = %41
  %43 = load i64, i64* %12, align 8
  %44 = load i64, i64* %10, align 8
  %45 = sdiv i64 127, %44
  %46 = icmp slt i64 %43, %45
  br i1 %46, label %119, label %127

47:                                               ; preds = %41
  br i1 true, label %48, label %51

48:                                               ; preds = %47
  %49 = load i64, i64* %10, align 8
  %50 = icmp slt i64 %49, -9223372036854775807
  br i1 %50, label %54, label %55

51:                                               ; preds = %47
  %52 = load i64, i64* %10, align 8
  %53 = icmp slt i64 0, %52
  br i1 %53, label %54, label %55

54:                                               ; preds = %51, %48
  br label %59

55:                                               ; preds = %51, %48
  %56 = load i64, i64* %10, align 8
  %57 = sub nsw i64 0, %56
  %58 = sdiv i64 127, %57
  br label %59

59:                                               ; preds = %55, %54
  %60 = phi i64 [ 0, %54 ], [ %58, %55 ]
  %61 = load i64, i64* %12, align 8
  %62 = sub nsw i64 -1, %61
  %63 = icmp sle i64 %60, %62
  br i1 %63, label %119, label %127

64:                                               ; preds = %38
  br i1 true, label %65, label %66

65:                                               ; preds = %64
  br i1 false, label %67, label %82

66:                                               ; preds = %64
  br i1 false, label %67, label %82

67:                                               ; preds = %66, %65
  %68 = load i64, i64* %10, align 8
  %69 = icmp eq i64 %68, -1
  br i1 %69, label %70, label %82

70:                                               ; preds = %67
  br i1 true, label %71, label %75

71:                                               ; preds = %70
  %72 = load i64, i64* %12, align 8
  %73 = add nsw i64 %72, -128
  %74 = icmp slt i64 0, %73
  br i1 %74, label %119, label %127

75:                                               ; preds = %70
  %76 = load i64, i64* %12, align 8
  %77 = icmp slt i64 0, %76
  br i1 %77, label %78, label %127

78:                                               ; preds = %75
  %79 = load i64, i64* %12, align 8
  %80 = sub nsw i64 %79, 1
  %81 = icmp slt i64 127, %80
  br i1 %81, label %119, label %127

82:                                               ; preds = %67, %66, %65
  %83 = load i64, i64* %10, align 8
  %84 = sdiv i64 -128, %83
  %85 = load i64, i64* %12, align 8
  %86 = icmp slt i64 %84, %85
  br i1 %86, label %119, label %127

87:                                               ; preds = %35
  %88 = load i64, i64* %10, align 8
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %87
  br i1 false, label %119, label %127

91:                                               ; preds = %87
  %92 = load i64, i64* %12, align 8
  %93 = icmp slt i64 %92, 0
  br i1 %93, label %94, label %114

94:                                               ; preds = %91
  br i1 true, label %95, label %96

95:                                               ; preds = %94
  br i1 false, label %97, label %109

96:                                               ; preds = %94
  br i1 false, label %97, label %109

97:                                               ; preds = %96, %95
  %98 = load i64, i64* %12, align 8
  %99 = icmp eq i64 %98, -1
  br i1 %99, label %100, label %109

100:                                              ; preds = %97
  br i1 true, label %101, label %105

101:                                              ; preds = %100
  %102 = load i64, i64* %10, align 8
  %103 = add nsw i64 %102, -128
  %104 = icmp slt i64 0, %103
  br i1 %104, label %119, label %127

105:                                              ; preds = %100
  %106 = load i64, i64* %10, align 8
  %107 = sub nsw i64 %106, 1
  %108 = icmp slt i64 127, %107
  br i1 %108, label %119, label %127

109:                                              ; preds = %97, %96, %95
  %110 = load i64, i64* %12, align 8
  %111 = sdiv i64 -128, %110
  %112 = load i64, i64* %10, align 8
  %113 = icmp slt i64 %111, %112
  br i1 %113, label %119, label %127

114:                                              ; preds = %91
  %115 = load i64, i64* %10, align 8
  %116 = sdiv i64 127, %115
  %117 = load i64, i64* %12, align 8
  %118 = icmp slt i64 %116, %117
  br i1 %118, label %119, label %127

119:                                              ; preds = %114, %109, %105, %101, %90, %82, %78, %71, %59, %42
  %120 = load i64, i64* %12, align 8
  %121 = trunc i64 %120 to i32
  %122 = load i64, i64* %10, align 8
  %123 = trunc i64 %122 to i32
  %124 = mul i32 %121, %123
  %125 = trunc i32 %124 to i8
  %126 = sext i8 %125 to i64
  store i64 %126, i64* %13, align 8
  br i1 true, label %994, label %995

127:                                              ; preds = %114, %109, %105, %101, %90, %82, %78, %75, %71, %59, %42
  %128 = load i64, i64* %12, align 8
  %129 = trunc i64 %128 to i32
  %130 = load i64, i64* %10, align 8
  %131 = trunc i64 %130 to i32
  %132 = mul i32 %129, %131
  %133 = trunc i32 %132 to i8
  %134 = sext i8 %133 to i64
  store i64 %134, i64* %13, align 8
  br i1 false, label %994, label %995

135:                                              ; preds = %34
  %136 = load i64, i64* %10, align 8
  %137 = icmp slt i64 %136, 0
  br i1 %137, label %138, label %187

138:                                              ; preds = %135
  %139 = load i64, i64* %12, align 8
  %140 = icmp slt i64 %139, 0
  br i1 %140, label %141, label %164

141:                                              ; preds = %138
  br i1 true, label %142, label %147

142:                                              ; preds = %141
  %143 = load i64, i64* %12, align 8
  %144 = load i64, i64* %10, align 8
  %145 = sdiv i64 255, %144
  %146 = icmp slt i64 %143, %145
  br i1 %146, label %219, label %227

147:                                              ; preds = %141
  br i1 true, label %148, label %151

148:                                              ; preds = %147
  %149 = load i64, i64* %10, align 8
  %150 = icmp slt i64 %149, -9223372036854775807
  br i1 %150, label %154, label %155

151:                                              ; preds = %147
  %152 = load i64, i64* %10, align 8
  %153 = icmp slt i64 0, %152
  br i1 %153, label %154, label %155

154:                                              ; preds = %151, %148
  br label %159

155:                                              ; preds = %151, %148
  %156 = load i64, i64* %10, align 8
  %157 = sub nsw i64 0, %156
  %158 = sdiv i64 255, %157
  br label %159

159:                                              ; preds = %155, %154
  %160 = phi i64 [ 0, %154 ], [ %158, %155 ]
  %161 = load i64, i64* %12, align 8
  %162 = sub nsw i64 -1, %161
  %163 = icmp sle i64 %160, %162
  br i1 %163, label %219, label %227

164:                                              ; preds = %138
  br i1 true, label %165, label %166

165:                                              ; preds = %164
  br i1 false, label %167, label %182

166:                                              ; preds = %164
  br i1 false, label %167, label %182

167:                                              ; preds = %166, %165
  %168 = load i64, i64* %10, align 8
  %169 = icmp eq i64 %168, -1
  br i1 %169, label %170, label %182

170:                                              ; preds = %167
  br i1 true, label %171, label %175

171:                                              ; preds = %170
  %172 = load i64, i64* %12, align 8
  %173 = add nsw i64 %172, 0
  %174 = icmp slt i64 0, %173
  br i1 %174, label %219, label %227

175:                                              ; preds = %170
  %176 = load i64, i64* %12, align 8
  %177 = icmp slt i64 0, %176
  br i1 %177, label %178, label %227

178:                                              ; preds = %175
  %179 = load i64, i64* %12, align 8
  %180 = sub nsw i64 %179, 1
  %181 = icmp slt i64 -1, %180
  br i1 %181, label %219, label %227

182:                                              ; preds = %167, %166, %165
  %183 = load i64, i64* %10, align 8
  %184 = sdiv i64 0, %183
  %185 = load i64, i64* %12, align 8
  %186 = icmp slt i64 %184, %185
  br i1 %186, label %219, label %227

187:                                              ; preds = %135
  %188 = load i64, i64* %10, align 8
  %189 = icmp eq i64 %188, 0
  br i1 %189, label %190, label %191

190:                                              ; preds = %187
  br i1 false, label %219, label %227

191:                                              ; preds = %187
  %192 = load i64, i64* %12, align 8
  %193 = icmp slt i64 %192, 0
  br i1 %193, label %194, label %214

194:                                              ; preds = %191
  br i1 true, label %195, label %196

195:                                              ; preds = %194
  br i1 false, label %197, label %209

196:                                              ; preds = %194
  br i1 false, label %197, label %209

197:                                              ; preds = %196, %195
  %198 = load i64, i64* %12, align 8
  %199 = icmp eq i64 %198, -1
  br i1 %199, label %200, label %209

200:                                              ; preds = %197
  br i1 true, label %201, label %205

201:                                              ; preds = %200
  %202 = load i64, i64* %10, align 8
  %203 = add nsw i64 %202, 0
  %204 = icmp slt i64 0, %203
  br i1 %204, label %219, label %227

205:                                              ; preds = %200
  %206 = load i64, i64* %10, align 8
  %207 = sub nsw i64 %206, 1
  %208 = icmp slt i64 -1, %207
  br i1 %208, label %219, label %227

209:                                              ; preds = %197, %196, %195
  %210 = load i64, i64* %12, align 8
  %211 = sdiv i64 0, %210
  %212 = load i64, i64* %10, align 8
  %213 = icmp slt i64 %211, %212
  br i1 %213, label %219, label %227

214:                                              ; preds = %191
  %215 = load i64, i64* %10, align 8
  %216 = sdiv i64 255, %215
  %217 = load i64, i64* %12, align 8
  %218 = icmp slt i64 %216, %217
  br i1 %218, label %219, label %227

219:                                              ; preds = %214, %209, %205, %201, %190, %182, %178, %171, %159, %142
  %220 = load i64, i64* %12, align 8
  %221 = trunc i64 %220 to i32
  %222 = load i64, i64* %10, align 8
  %223 = trunc i64 %222 to i32
  %224 = mul i32 %221, %223
  %225 = trunc i32 %224 to i8
  %226 = zext i8 %225 to i64
  store i64 %226, i64* %13, align 8
  br i1 true, label %994, label %995

227:                                              ; preds = %214, %209, %205, %201, %190, %182, %178, %175, %171, %159, %142
  %228 = load i64, i64* %12, align 8
  %229 = trunc i64 %228 to i32
  %230 = load i64, i64* %10, align 8
  %231 = trunc i64 %230 to i32
  %232 = mul i32 %229, %231
  %233 = trunc i32 %232 to i8
  %234 = zext i8 %233 to i64
  store i64 %234, i64* %13, align 8
  br i1 false, label %994, label %995

235:                                              ; preds = %33
  br i1 false, label %236, label %437

236:                                              ; preds = %235
  br i1 false, label %337, label %237

237:                                              ; preds = %236
  %238 = load i64, i64* %10, align 8
  %239 = icmp slt i64 %238, 0
  br i1 %239, label %240, label %289

240:                                              ; preds = %237
  %241 = load i64, i64* %12, align 8
  %242 = icmp slt i64 %241, 0
  br i1 %242, label %243, label %266

243:                                              ; preds = %240
  br i1 true, label %244, label %249

244:                                              ; preds = %243
  %245 = load i64, i64* %12, align 8
  %246 = load i64, i64* %10, align 8
  %247 = sdiv i64 32767, %246
  %248 = icmp slt i64 %245, %247
  br i1 %248, label %321, label %329

249:                                              ; preds = %243
  br i1 true, label %250, label %253

250:                                              ; preds = %249
  %251 = load i64, i64* %10, align 8
  %252 = icmp slt i64 %251, -9223372036854775807
  br i1 %252, label %256, label %257

253:                                              ; preds = %249
  %254 = load i64, i64* %10, align 8
  %255 = icmp slt i64 0, %254
  br i1 %255, label %256, label %257

256:                                              ; preds = %253, %250
  br label %261

257:                                              ; preds = %253, %250
  %258 = load i64, i64* %10, align 8
  %259 = sub nsw i64 0, %258
  %260 = sdiv i64 32767, %259
  br label %261

261:                                              ; preds = %257, %256
  %262 = phi i64 [ 0, %256 ], [ %260, %257 ]
  %263 = load i64, i64* %12, align 8
  %264 = sub nsw i64 -1, %263
  %265 = icmp sle i64 %262, %264
  br i1 %265, label %321, label %329

266:                                              ; preds = %240
  br i1 true, label %267, label %268

267:                                              ; preds = %266
  br i1 false, label %269, label %284

268:                                              ; preds = %266
  br i1 false, label %269, label %284

269:                                              ; preds = %268, %267
  %270 = load i64, i64* %10, align 8
  %271 = icmp eq i64 %270, -1
  br i1 %271, label %272, label %284

272:                                              ; preds = %269
  br i1 true, label %273, label %277

273:                                              ; preds = %272
  %274 = load i64, i64* %12, align 8
  %275 = add nsw i64 %274, -32768
  %276 = icmp slt i64 0, %275
  br i1 %276, label %321, label %329

277:                                              ; preds = %272
  %278 = load i64, i64* %12, align 8
  %279 = icmp slt i64 0, %278
  br i1 %279, label %280, label %329

280:                                              ; preds = %277
  %281 = load i64, i64* %12, align 8
  %282 = sub nsw i64 %281, 1
  %283 = icmp slt i64 32767, %282
  br i1 %283, label %321, label %329

284:                                              ; preds = %269, %268, %267
  %285 = load i64, i64* %10, align 8
  %286 = sdiv i64 -32768, %285
  %287 = load i64, i64* %12, align 8
  %288 = icmp slt i64 %286, %287
  br i1 %288, label %321, label %329

289:                                              ; preds = %237
  %290 = load i64, i64* %10, align 8
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %293

292:                                              ; preds = %289
  br i1 false, label %321, label %329

293:                                              ; preds = %289
  %294 = load i64, i64* %12, align 8
  %295 = icmp slt i64 %294, 0
  br i1 %295, label %296, label %316

296:                                              ; preds = %293
  br i1 true, label %297, label %298

297:                                              ; preds = %296
  br i1 false, label %299, label %311

298:                                              ; preds = %296
  br i1 false, label %299, label %311

299:                                              ; preds = %298, %297
  %300 = load i64, i64* %12, align 8
  %301 = icmp eq i64 %300, -1
  br i1 %301, label %302, label %311

302:                                              ; preds = %299
  br i1 true, label %303, label %307

303:                                              ; preds = %302
  %304 = load i64, i64* %10, align 8
  %305 = add nsw i64 %304, -32768
  %306 = icmp slt i64 0, %305
  br i1 %306, label %321, label %329

307:                                              ; preds = %302
  %308 = load i64, i64* %10, align 8
  %309 = sub nsw i64 %308, 1
  %310 = icmp slt i64 32767, %309
  br i1 %310, label %321, label %329

311:                                              ; preds = %299, %298, %297
  %312 = load i64, i64* %12, align 8
  %313 = sdiv i64 -32768, %312
  %314 = load i64, i64* %10, align 8
  %315 = icmp slt i64 %313, %314
  br i1 %315, label %321, label %329

316:                                              ; preds = %293
  %317 = load i64, i64* %10, align 8
  %318 = sdiv i64 32767, %317
  %319 = load i64, i64* %12, align 8
  %320 = icmp slt i64 %318, %319
  br i1 %320, label %321, label %329

321:                                              ; preds = %316, %311, %307, %303, %292, %284, %280, %273, %261, %244
  %322 = load i64, i64* %12, align 8
  %323 = trunc i64 %322 to i32
  %324 = load i64, i64* %10, align 8
  %325 = trunc i64 %324 to i32
  %326 = mul i32 %323, %325
  %327 = trunc i32 %326 to i16
  %328 = sext i16 %327 to i64
  store i64 %328, i64* %13, align 8
  br i1 true, label %994, label %995

329:                                              ; preds = %316, %311, %307, %303, %292, %284, %280, %277, %273, %261, %244
  %330 = load i64, i64* %12, align 8
  %331 = trunc i64 %330 to i32
  %332 = load i64, i64* %10, align 8
  %333 = trunc i64 %332 to i32
  %334 = mul i32 %331, %333
  %335 = trunc i32 %334 to i16
  %336 = sext i16 %335 to i64
  store i64 %336, i64* %13, align 8
  br i1 false, label %994, label %995

337:                                              ; preds = %236
  %338 = load i64, i64* %10, align 8
  %339 = icmp slt i64 %338, 0
  br i1 %339, label %340, label %389

340:                                              ; preds = %337
  %341 = load i64, i64* %12, align 8
  %342 = icmp slt i64 %341, 0
  br i1 %342, label %343, label %366

343:                                              ; preds = %340
  br i1 true, label %344, label %349

344:                                              ; preds = %343
  %345 = load i64, i64* %12, align 8
  %346 = load i64, i64* %10, align 8
  %347 = sdiv i64 65535, %346
  %348 = icmp slt i64 %345, %347
  br i1 %348, label %421, label %429

349:                                              ; preds = %343
  br i1 true, label %350, label %353

350:                                              ; preds = %349
  %351 = load i64, i64* %10, align 8
  %352 = icmp slt i64 %351, -9223372036854775807
  br i1 %352, label %356, label %357

353:                                              ; preds = %349
  %354 = load i64, i64* %10, align 8
  %355 = icmp slt i64 0, %354
  br i1 %355, label %356, label %357

356:                                              ; preds = %353, %350
  br label %361

357:                                              ; preds = %353, %350
  %358 = load i64, i64* %10, align 8
  %359 = sub nsw i64 0, %358
  %360 = sdiv i64 65535, %359
  br label %361

361:                                              ; preds = %357, %356
  %362 = phi i64 [ 0, %356 ], [ %360, %357 ]
  %363 = load i64, i64* %12, align 8
  %364 = sub nsw i64 -1, %363
  %365 = icmp sle i64 %362, %364
  br i1 %365, label %421, label %429

366:                                              ; preds = %340
  br i1 true, label %367, label %368

367:                                              ; preds = %366
  br i1 false, label %369, label %384

368:                                              ; preds = %366
  br i1 false, label %369, label %384

369:                                              ; preds = %368, %367
  %370 = load i64, i64* %10, align 8
  %371 = icmp eq i64 %370, -1
  br i1 %371, label %372, label %384

372:                                              ; preds = %369
  br i1 true, label %373, label %377

373:                                              ; preds = %372
  %374 = load i64, i64* %12, align 8
  %375 = add nsw i64 %374, 0
  %376 = icmp slt i64 0, %375
  br i1 %376, label %421, label %429

377:                                              ; preds = %372
  %378 = load i64, i64* %12, align 8
  %379 = icmp slt i64 0, %378
  br i1 %379, label %380, label %429

380:                                              ; preds = %377
  %381 = load i64, i64* %12, align 8
  %382 = sub nsw i64 %381, 1
  %383 = icmp slt i64 -1, %382
  br i1 %383, label %421, label %429

384:                                              ; preds = %369, %368, %367
  %385 = load i64, i64* %10, align 8
  %386 = sdiv i64 0, %385
  %387 = load i64, i64* %12, align 8
  %388 = icmp slt i64 %386, %387
  br i1 %388, label %421, label %429

389:                                              ; preds = %337
  %390 = load i64, i64* %10, align 8
  %391 = icmp eq i64 %390, 0
  br i1 %391, label %392, label %393

392:                                              ; preds = %389
  br i1 false, label %421, label %429

393:                                              ; preds = %389
  %394 = load i64, i64* %12, align 8
  %395 = icmp slt i64 %394, 0
  br i1 %395, label %396, label %416

396:                                              ; preds = %393
  br i1 true, label %397, label %398

397:                                              ; preds = %396
  br i1 false, label %399, label %411

398:                                              ; preds = %396
  br i1 false, label %399, label %411

399:                                              ; preds = %398, %397
  %400 = load i64, i64* %12, align 8
  %401 = icmp eq i64 %400, -1
  br i1 %401, label %402, label %411

402:                                              ; preds = %399
  br i1 true, label %403, label %407

403:                                              ; preds = %402
  %404 = load i64, i64* %10, align 8
  %405 = add nsw i64 %404, 0
  %406 = icmp slt i64 0, %405
  br i1 %406, label %421, label %429

407:                                              ; preds = %402
  %408 = load i64, i64* %10, align 8
  %409 = sub nsw i64 %408, 1
  %410 = icmp slt i64 -1, %409
  br i1 %410, label %421, label %429

411:                                              ; preds = %399, %398, %397
  %412 = load i64, i64* %12, align 8
  %413 = sdiv i64 0, %412
  %414 = load i64, i64* %10, align 8
  %415 = icmp slt i64 %413, %414
  br i1 %415, label %421, label %429

416:                                              ; preds = %393
  %417 = load i64, i64* %10, align 8
  %418 = sdiv i64 65535, %417
  %419 = load i64, i64* %12, align 8
  %420 = icmp slt i64 %418, %419
  br i1 %420, label %421, label %429

421:                                              ; preds = %416, %411, %407, %403, %392, %384, %380, %373, %361, %344
  %422 = load i64, i64* %12, align 8
  %423 = trunc i64 %422 to i32
  %424 = load i64, i64* %10, align 8
  %425 = trunc i64 %424 to i32
  %426 = mul i32 %423, %425
  %427 = trunc i32 %426 to i16
  %428 = zext i16 %427 to i64
  store i64 %428, i64* %13, align 8
  br i1 true, label %994, label %995

429:                                              ; preds = %416, %411, %407, %403, %392, %384, %380, %377, %373, %361, %344
  %430 = load i64, i64* %12, align 8
  %431 = trunc i64 %430 to i32
  %432 = load i64, i64* %10, align 8
  %433 = trunc i64 %432 to i32
  %434 = mul i32 %431, %433
  %435 = trunc i32 %434 to i16
  %436 = zext i16 %435 to i64
  store i64 %436, i64* %13, align 8
  br i1 false, label %994, label %995

437:                                              ; preds = %235
  br i1 false, label %438, label %635

438:                                              ; preds = %437
  br i1 true, label %439, label %537

439:                                              ; preds = %438
  %440 = load i64, i64* %10, align 8
  %441 = icmp slt i64 %440, 0
  br i1 %441, label %442, label %491

442:                                              ; preds = %439
  %443 = load i64, i64* %12, align 8
  %444 = icmp slt i64 %443, 0
  br i1 %444, label %445, label %468

445:                                              ; preds = %442
  br i1 true, label %446, label %451

446:                                              ; preds = %445
  %447 = load i64, i64* %12, align 8
  %448 = load i64, i64* %10, align 8
  %449 = sdiv i64 2147483647, %448
  %450 = icmp slt i64 %447, %449
  br i1 %450, label %523, label %530

451:                                              ; preds = %445
  br i1 true, label %452, label %455

452:                                              ; preds = %451
  %453 = load i64, i64* %10, align 8
  %454 = icmp slt i64 %453, -9223372036854775807
  br i1 %454, label %458, label %459

455:                                              ; preds = %451
  %456 = load i64, i64* %10, align 8
  %457 = icmp slt i64 0, %456
  br i1 %457, label %458, label %459

458:                                              ; preds = %455, %452
  br label %463

459:                                              ; preds = %455, %452
  %460 = load i64, i64* %10, align 8
  %461 = sub nsw i64 0, %460
  %462 = sdiv i64 2147483647, %461
  br label %463

463:                                              ; preds = %459, %458
  %464 = phi i64 [ 0, %458 ], [ %462, %459 ]
  %465 = load i64, i64* %12, align 8
  %466 = sub nsw i64 -1, %465
  %467 = icmp sle i64 %464, %466
  br i1 %467, label %523, label %530

468:                                              ; preds = %442
  br i1 true, label %469, label %470

469:                                              ; preds = %468
  br i1 false, label %471, label %486

470:                                              ; preds = %468
  br i1 false, label %471, label %486

471:                                              ; preds = %470, %469
  %472 = load i64, i64* %10, align 8
  %473 = icmp eq i64 %472, -1
  br i1 %473, label %474, label %486

474:                                              ; preds = %471
  br i1 true, label %475, label %479

475:                                              ; preds = %474
  %476 = load i64, i64* %12, align 8
  %477 = add nsw i64 %476, -2147483648
  %478 = icmp slt i64 0, %477
  br i1 %478, label %523, label %530

479:                                              ; preds = %474
  %480 = load i64, i64* %12, align 8
  %481 = icmp slt i64 0, %480
  br i1 %481, label %482, label %530

482:                                              ; preds = %479
  %483 = load i64, i64* %12, align 8
  %484 = sub nsw i64 %483, 1
  %485 = icmp slt i64 2147483647, %484
  br i1 %485, label %523, label %530

486:                                              ; preds = %471, %470, %469
  %487 = load i64, i64* %10, align 8
  %488 = sdiv i64 -2147483648, %487
  %489 = load i64, i64* %12, align 8
  %490 = icmp slt i64 %488, %489
  br i1 %490, label %523, label %530

491:                                              ; preds = %439
  %492 = load i64, i64* %10, align 8
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %494, label %495

494:                                              ; preds = %491
  br i1 false, label %523, label %530

495:                                              ; preds = %491
  %496 = load i64, i64* %12, align 8
  %497 = icmp slt i64 %496, 0
  br i1 %497, label %498, label %518

498:                                              ; preds = %495
  br i1 true, label %499, label %500

499:                                              ; preds = %498
  br i1 false, label %501, label %513

500:                                              ; preds = %498
  br i1 false, label %501, label %513

501:                                              ; preds = %500, %499
  %502 = load i64, i64* %12, align 8
  %503 = icmp eq i64 %502, -1
  br i1 %503, label %504, label %513

504:                                              ; preds = %501
  br i1 true, label %505, label %509

505:                                              ; preds = %504
  %506 = load i64, i64* %10, align 8
  %507 = add nsw i64 %506, -2147483648
  %508 = icmp slt i64 0, %507
  br i1 %508, label %523, label %530

509:                                              ; preds = %504
  %510 = load i64, i64* %10, align 8
  %511 = sub nsw i64 %510, 1
  %512 = icmp slt i64 2147483647, %511
  br i1 %512, label %523, label %530

513:                                              ; preds = %501, %500, %499
  %514 = load i64, i64* %12, align 8
  %515 = sdiv i64 -2147483648, %514
  %516 = load i64, i64* %10, align 8
  %517 = icmp slt i64 %515, %516
  br i1 %517, label %523, label %530

518:                                              ; preds = %495
  %519 = load i64, i64* %10, align 8
  %520 = sdiv i64 2147483647, %519
  %521 = load i64, i64* %12, align 8
  %522 = icmp slt i64 %520, %521
  br i1 %522, label %523, label %530

523:                                              ; preds = %518, %513, %509, %505, %494, %486, %482, %475, %463, %446
  %524 = load i64, i64* %12, align 8
  %525 = trunc i64 %524 to i32
  %526 = load i64, i64* %10, align 8
  %527 = trunc i64 %526 to i32
  %528 = mul i32 %525, %527
  %529 = sext i32 %528 to i64
  store i64 %529, i64* %13, align 8
  br i1 true, label %994, label %995

530:                                              ; preds = %518, %513, %509, %505, %494, %486, %482, %479, %475, %463, %446
  %531 = load i64, i64* %12, align 8
  %532 = trunc i64 %531 to i32
  %533 = load i64, i64* %10, align 8
  %534 = trunc i64 %533 to i32
  %535 = mul i32 %532, %534
  %536 = sext i32 %535 to i64
  store i64 %536, i64* %13, align 8
  br i1 false, label %994, label %995

537:                                              ; preds = %438
  %538 = load i64, i64* %10, align 8
  %539 = icmp slt i64 %538, 0
  br i1 %539, label %540, label %589

540:                                              ; preds = %537
  %541 = load i64, i64* %12, align 8
  %542 = icmp slt i64 %541, 0
  br i1 %542, label %543, label %566

543:                                              ; preds = %540
  br i1 true, label %544, label %549

544:                                              ; preds = %543
  %545 = load i64, i64* %12, align 8
  %546 = load i64, i64* %10, align 8
  %547 = sdiv i64 4294967295, %546
  %548 = icmp slt i64 %545, %547
  br i1 %548, label %621, label %628

549:                                              ; preds = %543
  br i1 true, label %550, label %553

550:                                              ; preds = %549
  %551 = load i64, i64* %10, align 8
  %552 = icmp slt i64 %551, -9223372036854775807
  br i1 %552, label %556, label %557

553:                                              ; preds = %549
  %554 = load i64, i64* %10, align 8
  %555 = icmp slt i64 0, %554
  br i1 %555, label %556, label %557

556:                                              ; preds = %553, %550
  br label %561

557:                                              ; preds = %553, %550
  %558 = load i64, i64* %10, align 8
  %559 = sub nsw i64 0, %558
  %560 = sdiv i64 4294967295, %559
  br label %561

561:                                              ; preds = %557, %556
  %562 = phi i64 [ 0, %556 ], [ %560, %557 ]
  %563 = load i64, i64* %12, align 8
  %564 = sub nsw i64 -1, %563
  %565 = icmp sle i64 %562, %564
  br i1 %565, label %621, label %628

566:                                              ; preds = %540
  br i1 true, label %567, label %568

567:                                              ; preds = %566
  br i1 false, label %569, label %584

568:                                              ; preds = %566
  br i1 false, label %569, label %584

569:                                              ; preds = %568, %567
  %570 = load i64, i64* %10, align 8
  %571 = icmp eq i64 %570, -1
  br i1 %571, label %572, label %584

572:                                              ; preds = %569
  br i1 true, label %573, label %577

573:                                              ; preds = %572
  %574 = load i64, i64* %12, align 8
  %575 = add nsw i64 %574, 0
  %576 = icmp slt i64 0, %575
  br i1 %576, label %621, label %628

577:                                              ; preds = %572
  %578 = load i64, i64* %12, align 8
  %579 = icmp slt i64 0, %578
  br i1 %579, label %580, label %628

580:                                              ; preds = %577
  %581 = load i64, i64* %12, align 8
  %582 = sub nsw i64 %581, 1
  %583 = icmp slt i64 -1, %582
  br i1 %583, label %621, label %628

584:                                              ; preds = %569, %568, %567
  %585 = load i64, i64* %10, align 8
  %586 = sdiv i64 0, %585
  %587 = load i64, i64* %12, align 8
  %588 = icmp slt i64 %586, %587
  br i1 %588, label %621, label %628

589:                                              ; preds = %537
  %590 = load i64, i64* %10, align 8
  %591 = icmp eq i64 %590, 0
  br i1 %591, label %592, label %593

592:                                              ; preds = %589
  br i1 false, label %621, label %628

593:                                              ; preds = %589
  %594 = load i64, i64* %12, align 8
  %595 = icmp slt i64 %594, 0
  br i1 %595, label %596, label %616

596:                                              ; preds = %593
  br i1 true, label %597, label %598

597:                                              ; preds = %596
  br i1 false, label %599, label %611

598:                                              ; preds = %596
  br i1 false, label %599, label %611

599:                                              ; preds = %598, %597
  %600 = load i64, i64* %12, align 8
  %601 = icmp eq i64 %600, -1
  br i1 %601, label %602, label %611

602:                                              ; preds = %599
  br i1 true, label %603, label %607

603:                                              ; preds = %602
  %604 = load i64, i64* %10, align 8
  %605 = add nsw i64 %604, 0
  %606 = icmp slt i64 0, %605
  br i1 %606, label %621, label %628

607:                                              ; preds = %602
  %608 = load i64, i64* %10, align 8
  %609 = sub nsw i64 %608, 1
  %610 = icmp slt i64 -1, %609
  br i1 %610, label %621, label %628

611:                                              ; preds = %599, %598, %597
  %612 = load i64, i64* %12, align 8
  %613 = sdiv i64 0, %612
  %614 = load i64, i64* %10, align 8
  %615 = icmp slt i64 %613, %614
  br i1 %615, label %621, label %628

616:                                              ; preds = %593
  %617 = load i64, i64* %10, align 8
  %618 = sdiv i64 4294967295, %617
  %619 = load i64, i64* %12, align 8
  %620 = icmp slt i64 %618, %619
  br i1 %620, label %621, label %628

621:                                              ; preds = %616, %611, %607, %603, %592, %584, %580, %573, %561, %544
  %622 = load i64, i64* %12, align 8
  %623 = trunc i64 %622 to i32
  %624 = load i64, i64* %10, align 8
  %625 = trunc i64 %624 to i32
  %626 = mul i32 %623, %625
  %627 = zext i32 %626 to i64
  store i64 %627, i64* %13, align 8
  br i1 true, label %994, label %995

628:                                              ; preds = %616, %611, %607, %603, %592, %584, %580, %577, %573, %561, %544
  %629 = load i64, i64* %12, align 8
  %630 = trunc i64 %629 to i32
  %631 = load i64, i64* %10, align 8
  %632 = trunc i64 %631 to i32
  %633 = mul i32 %630, %632
  %634 = zext i32 %633 to i64
  store i64 %634, i64* %13, align 8
  br i1 false, label %994, label %995

635:                                              ; preds = %437
  br i1 true, label %636, label %815

636:                                              ; preds = %635
  br i1 true, label %637, label %723

637:                                              ; preds = %636
  %638 = load i64, i64* %10, align 8
  %639 = icmp slt i64 %638, 0
  br i1 %639, label %640, label %686

640:                                              ; preds = %637
  %641 = load i64, i64* %12, align 8
  %642 = icmp slt i64 %641, 0
  br i1 %642, label %643, label %666

643:                                              ; preds = %640
  br i1 true, label %644, label %649

644:                                              ; preds = %643
  %645 = load i64, i64* %12, align 8
  %646 = load i64, i64* %10, align 8
  %647 = sdiv i64 9223372036854775807, %646
  %648 = icmp slt i64 %645, %647
  br i1 %648, label %715, label %719

649:                                              ; preds = %643
  br i1 true, label %650, label %653

650:                                              ; preds = %649
  %651 = load i64, i64* %10, align 8
  %652 = icmp slt i64 %651, -9223372036854775807
  br i1 %652, label %656, label %657

653:                                              ; preds = %649
  %654 = load i64, i64* %10, align 8
  %655 = icmp slt i64 0, %654
  br i1 %655, label %656, label %657

656:                                              ; preds = %653, %650
  br label %661

657:                                              ; preds = %653, %650
  %658 = load i64, i64* %10, align 8
  %659 = sub nsw i64 0, %658
  %660 = sdiv i64 9223372036854775807, %659
  br label %661

661:                                              ; preds = %657, %656
  %662 = phi i64 [ 0, %656 ], [ %660, %657 ]
  %663 = load i64, i64* %12, align 8
  %664 = sub nsw i64 -1, %663
  %665 = icmp sle i64 %662, %664
  br i1 %665, label %715, label %719

666:                                              ; preds = %640
  %667 = load i64, i64* %10, align 8
  %668 = icmp eq i64 %667, -1
  br i1 %668, label %669, label %681

669:                                              ; preds = %666
  br i1 true, label %670, label %674

670:                                              ; preds = %669
  %671 = load i64, i64* %12, align 8
  %672 = add nsw i64 %671, -9223372036854775808
  %673 = icmp slt i64 0, %672
  br i1 %673, label %715, label %719

674:                                              ; preds = %669
  %675 = load i64, i64* %12, align 8
  %676 = icmp slt i64 0, %675
  br i1 %676, label %677, label %719

677:                                              ; preds = %674
  %678 = load i64, i64* %12, align 8
  %679 = sub nsw i64 %678, 1
  %680 = icmp slt i64 9223372036854775807, %679
  br i1 %680, label %715, label %719

681:                                              ; preds = %666
  %682 = load i64, i64* %10, align 8
  %683 = sdiv i64 -9223372036854775808, %682
  %684 = load i64, i64* %12, align 8
  %685 = icmp slt i64 %683, %684
  br i1 %685, label %715, label %719

686:                                              ; preds = %637
  %687 = load i64, i64* %10, align 8
  %688 = icmp eq i64 %687, 0
  br i1 %688, label %689, label %690

689:                                              ; preds = %686
  br i1 false, label %715, label %719

690:                                              ; preds = %686
  %691 = load i64, i64* %12, align 8
  %692 = icmp slt i64 %691, 0
  br i1 %692, label %693, label %710

693:                                              ; preds = %690
  %694 = load i64, i64* %12, align 8
  %695 = icmp eq i64 %694, -1
  br i1 %695, label %696, label %705

696:                                              ; preds = %693
  br i1 true, label %697, label %701

697:                                              ; preds = %696
  %698 = load i64, i64* %10, align 8
  %699 = add nsw i64 %698, -9223372036854775808
  %700 = icmp slt i64 0, %699
  br i1 %700, label %715, label %719

701:                                              ; preds = %696
  %702 = load i64, i64* %10, align 8
  %703 = sub nsw i64 %702, 1
  %704 = icmp slt i64 9223372036854775807, %703
  br i1 %704, label %715, label %719

705:                                              ; preds = %693
  %706 = load i64, i64* %12, align 8
  %707 = sdiv i64 -9223372036854775808, %706
  %708 = load i64, i64* %10, align 8
  %709 = icmp slt i64 %707, %708
  br i1 %709, label %715, label %719

710:                                              ; preds = %690
  %711 = load i64, i64* %10, align 8
  %712 = sdiv i64 9223372036854775807, %711
  %713 = load i64, i64* %12, align 8
  %714 = icmp slt i64 %712, %713
  br i1 %714, label %715, label %719

715:                                              ; preds = %710, %705, %701, %697, %689, %681, %677, %670, %661, %644
  %716 = load i64, i64* %12, align 8
  %717 = load i64, i64* %10, align 8
  %718 = mul i64 %716, %717
  store i64 %718, i64* %13, align 8
  br i1 true, label %994, label %995

719:                                              ; preds = %710, %705, %701, %697, %689, %681, %677, %674, %670, %661, %644
  %720 = load i64, i64* %12, align 8
  %721 = load i64, i64* %10, align 8
  %722 = mul i64 %720, %721
  store i64 %722, i64* %13, align 8
  br i1 false, label %994, label %995

723:                                              ; preds = %636
  %724 = load i64, i64* %10, align 8
  %725 = icmp slt i64 %724, 0
  br i1 %725, label %726, label %775

726:                                              ; preds = %723
  %727 = load i64, i64* %12, align 8
  %728 = icmp slt i64 %727, 0
  br i1 %728, label %729, label %752

729:                                              ; preds = %726
  br i1 false, label %730, label %735

730:                                              ; preds = %729
  %731 = load i64, i64* %12, align 8
  %732 = load i64, i64* %10, align 8
  %733 = udiv i64 -1, %732
  %734 = icmp ult i64 %731, %733
  br i1 %734, label %807, label %811

735:                                              ; preds = %729
  br i1 true, label %736, label %739

736:                                              ; preds = %735
  %737 = load i64, i64* %10, align 8
  %738 = icmp slt i64 %737, -9223372036854775807
  br i1 %738, label %742, label %743

739:                                              ; preds = %735
  %740 = load i64, i64* %10, align 8
  %741 = icmp slt i64 0, %740
  br i1 %741, label %742, label %743

742:                                              ; preds = %739, %736
  br label %747

743:                                              ; preds = %739, %736
  %744 = load i64, i64* %10, align 8
  %745 = sub nsw i64 0, %744
  %746 = udiv i64 -1, %745
  br label %747

747:                                              ; preds = %743, %742
  %748 = phi i64 [ 1, %742 ], [ %746, %743 ]
  %749 = load i64, i64* %12, align 8
  %750 = sub nsw i64 -1, %749
  %751 = icmp ule i64 %748, %750
  br i1 %751, label %807, label %811

752:                                              ; preds = %726
  br i1 true, label %753, label %754

753:                                              ; preds = %752
  br i1 false, label %755, label %770

754:                                              ; preds = %752
  br i1 false, label %755, label %770

755:                                              ; preds = %754, %753
  %756 = load i64, i64* %10, align 8
  %757 = icmp eq i64 %756, -1
  br i1 %757, label %758, label %770

758:                                              ; preds = %755
  br i1 true, label %759, label %763

759:                                              ; preds = %758
  %760 = load i64, i64* %12, align 8
  %761 = add nsw i64 %760, 0
  %762 = icmp slt i64 0, %761
  br i1 %762, label %807, label %811

763:                                              ; preds = %758
  %764 = load i64, i64* %12, align 8
  %765 = icmp slt i64 0, %764
  br i1 %765, label %766, label %811

766:                                              ; preds = %763
  %767 = load i64, i64* %12, align 8
  %768 = sub nsw i64 %767, 1
  %769 = icmp slt i64 -1, %768
  br i1 %769, label %807, label %811

770:                                              ; preds = %755, %754, %753
  %771 = load i64, i64* %10, align 8
  %772 = sdiv i64 0, %771
  %773 = load i64, i64* %12, align 8
  %774 = icmp slt i64 %772, %773
  br i1 %774, label %807, label %811

775:                                              ; preds = %723
  %776 = load i64, i64* %10, align 8
  %777 = icmp eq i64 %776, 0
  br i1 %777, label %778, label %779

778:                                              ; preds = %775
  br i1 false, label %807, label %811

779:                                              ; preds = %775
  %780 = load i64, i64* %12, align 8
  %781 = icmp slt i64 %780, 0
  br i1 %781, label %782, label %802

782:                                              ; preds = %779
  br i1 true, label %783, label %784

783:                                              ; preds = %782
  br i1 false, label %785, label %797

784:                                              ; preds = %782
  br i1 false, label %785, label %797

785:                                              ; preds = %784, %783
  %786 = load i64, i64* %12, align 8
  %787 = icmp eq i64 %786, -1
  br i1 %787, label %788, label %797

788:                                              ; preds = %785
  br i1 true, label %789, label %793

789:                                              ; preds = %788
  %790 = load i64, i64* %10, align 8
  %791 = add nsw i64 %790, 0
  %792 = icmp slt i64 0, %791
  br i1 %792, label %807, label %811

793:                                              ; preds = %788
  %794 = load i64, i64* %10, align 8
  %795 = sub nsw i64 %794, 1
  %796 = icmp slt i64 -1, %795
  br i1 %796, label %807, label %811

797:                                              ; preds = %785, %784, %783
  %798 = load i64, i64* %12, align 8
  %799 = sdiv i64 0, %798
  %800 = load i64, i64* %10, align 8
  %801 = icmp slt i64 %799, %800
  br i1 %801, label %807, label %811

802:                                              ; preds = %779
  %803 = load i64, i64* %10, align 8
  %804 = udiv i64 -1, %803
  %805 = load i64, i64* %12, align 8
  %806 = icmp ult i64 %804, %805
  br i1 %806, label %807, label %811

807:                                              ; preds = %802, %797, %793, %789, %778, %770, %766, %759, %747, %730
  %808 = load i64, i64* %12, align 8
  %809 = load i64, i64* %10, align 8
  %810 = mul i64 %808, %809
  store i64 %810, i64* %13, align 8
  br i1 true, label %994, label %995

811:                                              ; preds = %802, %797, %793, %789, %778, %770, %766, %763, %759, %747, %730
  %812 = load i64, i64* %12, align 8
  %813 = load i64, i64* %10, align 8
  %814 = mul i64 %812, %813
  store i64 %814, i64* %13, align 8
  br i1 false, label %994, label %995

815:                                              ; preds = %635
  br i1 true, label %816, label %902

816:                                              ; preds = %815
  %817 = load i64, i64* %10, align 8
  %818 = icmp slt i64 %817, 0
  br i1 %818, label %819, label %865

819:                                              ; preds = %816
  %820 = load i64, i64* %12, align 8
  %821 = icmp slt i64 %820, 0
  br i1 %821, label %822, label %845

822:                                              ; preds = %819
  br i1 true, label %823, label %828

823:                                              ; preds = %822
  %824 = load i64, i64* %12, align 8
  %825 = load i64, i64* %10, align 8
  %826 = sdiv i64 9223372036854775807, %825
  %827 = icmp slt i64 %824, %826
  br i1 %827, label %894, label %898

828:                                              ; preds = %822
  br i1 true, label %829, label %832

829:                                              ; preds = %828
  %830 = load i64, i64* %10, align 8
  %831 = icmp slt i64 %830, -9223372036854775807
  br i1 %831, label %835, label %836

832:                                              ; preds = %828
  %833 = load i64, i64* %10, align 8
  %834 = icmp slt i64 0, %833
  br i1 %834, label %835, label %836

835:                                              ; preds = %832, %829
  br label %840

836:                                              ; preds = %832, %829
  %837 = load i64, i64* %10, align 8
  %838 = sub nsw i64 0, %837
  %839 = sdiv i64 9223372036854775807, %838
  br label %840

840:                                              ; preds = %836, %835
  %841 = phi i64 [ 0, %835 ], [ %839, %836 ]
  %842 = load i64, i64* %12, align 8
  %843 = sub nsw i64 -1, %842
  %844 = icmp sle i64 %841, %843
  br i1 %844, label %894, label %898

845:                                              ; preds = %819
  %846 = load i64, i64* %10, align 8
  %847 = icmp eq i64 %846, -1
  br i1 %847, label %848, label %860

848:                                              ; preds = %845
  br i1 true, label %849, label %853

849:                                              ; preds = %848
  %850 = load i64, i64* %12, align 8
  %851 = add nsw i64 %850, -9223372036854775808
  %852 = icmp slt i64 0, %851
  br i1 %852, label %894, label %898

853:                                              ; preds = %848
  %854 = load i64, i64* %12, align 8
  %855 = icmp slt i64 0, %854
  br i1 %855, label %856, label %898

856:                                              ; preds = %853
  %857 = load i64, i64* %12, align 8
  %858 = sub nsw i64 %857, 1
  %859 = icmp slt i64 9223372036854775807, %858
  br i1 %859, label %894, label %898

860:                                              ; preds = %845
  %861 = load i64, i64* %10, align 8
  %862 = sdiv i64 -9223372036854775808, %861
  %863 = load i64, i64* %12, align 8
  %864 = icmp slt i64 %862, %863
  br i1 %864, label %894, label %898

865:                                              ; preds = %816
  %866 = load i64, i64* %10, align 8
  %867 = icmp eq i64 %866, 0
  br i1 %867, label %868, label %869

868:                                              ; preds = %865
  br i1 false, label %894, label %898

869:                                              ; preds = %865
  %870 = load i64, i64* %12, align 8
  %871 = icmp slt i64 %870, 0
  br i1 %871, label %872, label %889

872:                                              ; preds = %869
  %873 = load i64, i64* %12, align 8
  %874 = icmp eq i64 %873, -1
  br i1 %874, label %875, label %884

875:                                              ; preds = %872
  br i1 true, label %876, label %880

876:                                              ; preds = %875
  %877 = load i64, i64* %10, align 8
  %878 = add nsw i64 %877, -9223372036854775808
  %879 = icmp slt i64 0, %878
  br i1 %879, label %894, label %898

880:                                              ; preds = %875
  %881 = load i64, i64* %10, align 8
  %882 = sub nsw i64 %881, 1
  %883 = icmp slt i64 9223372036854775807, %882
  br i1 %883, label %894, label %898

884:                                              ; preds = %872
  %885 = load i64, i64* %12, align 8
  %886 = sdiv i64 -9223372036854775808, %885
  %887 = load i64, i64* %10, align 8
  %888 = icmp slt i64 %886, %887
  br i1 %888, label %894, label %898

889:                                              ; preds = %869
  %890 = load i64, i64* %10, align 8
  %891 = sdiv i64 9223372036854775807, %890
  %892 = load i64, i64* %12, align 8
  %893 = icmp slt i64 %891, %892
  br i1 %893, label %894, label %898

894:                                              ; preds = %889, %884, %880, %876, %868, %860, %856, %849, %840, %823
  %895 = load i64, i64* %12, align 8
  %896 = load i64, i64* %10, align 8
  %897 = mul i64 %895, %896
  store i64 %897, i64* %13, align 8
  br i1 true, label %994, label %995

898:                                              ; preds = %889, %884, %880, %876, %868, %860, %856, %853, %849, %840, %823
  %899 = load i64, i64* %12, align 8
  %900 = load i64, i64* %10, align 8
  %901 = mul i64 %899, %900
  store i64 %901, i64* %13, align 8
  br i1 false, label %994, label %995

902:                                              ; preds = %815
  %903 = load i64, i64* %10, align 8
  %904 = icmp slt i64 %903, 0
  br i1 %904, label %905, label %954

905:                                              ; preds = %902
  %906 = load i64, i64* %12, align 8
  %907 = icmp slt i64 %906, 0
  br i1 %907, label %908, label %931

908:                                              ; preds = %905
  br i1 false, label %909, label %914

909:                                              ; preds = %908
  %910 = load i64, i64* %12, align 8
  %911 = load i64, i64* %10, align 8
  %912 = udiv i64 -1, %911
  %913 = icmp ult i64 %910, %912
  br i1 %913, label %986, label %990

914:                                              ; preds = %908
  br i1 true, label %915, label %918

915:                                              ; preds = %914
  %916 = load i64, i64* %10, align 8
  %917 = icmp slt i64 %916, -9223372036854775807
  br i1 %917, label %921, label %922

918:                                              ; preds = %914
  %919 = load i64, i64* %10, align 8
  %920 = icmp slt i64 0, %919
  br i1 %920, label %921, label %922

921:                                              ; preds = %918, %915
  br label %926

922:                                              ; preds = %918, %915
  %923 = load i64, i64* %10, align 8
  %924 = sub nsw i64 0, %923
  %925 = udiv i64 -1, %924
  br label %926

926:                                              ; preds = %922, %921
  %927 = phi i64 [ 1, %921 ], [ %925, %922 ]
  %928 = load i64, i64* %12, align 8
  %929 = sub nsw i64 -1, %928
  %930 = icmp ule i64 %927, %929
  br i1 %930, label %986, label %990

931:                                              ; preds = %905
  br i1 true, label %932, label %933

932:                                              ; preds = %931
  br i1 false, label %934, label %949

933:                                              ; preds = %931
  br i1 false, label %934, label %949

934:                                              ; preds = %933, %932
  %935 = load i64, i64* %10, align 8
  %936 = icmp eq i64 %935, -1
  br i1 %936, label %937, label %949

937:                                              ; preds = %934
  br i1 true, label %938, label %942

938:                                              ; preds = %937
  %939 = load i64, i64* %12, align 8
  %940 = add nsw i64 %939, 0
  %941 = icmp slt i64 0, %940
  br i1 %941, label %986, label %990

942:                                              ; preds = %937
  %943 = load i64, i64* %12, align 8
  %944 = icmp slt i64 0, %943
  br i1 %944, label %945, label %990

945:                                              ; preds = %942
  %946 = load i64, i64* %12, align 8
  %947 = sub nsw i64 %946, 1
  %948 = icmp slt i64 -1, %947
  br i1 %948, label %986, label %990

949:                                              ; preds = %934, %933, %932
  %950 = load i64, i64* %10, align 8
  %951 = sdiv i64 0, %950
  %952 = load i64, i64* %12, align 8
  %953 = icmp slt i64 %951, %952
  br i1 %953, label %986, label %990

954:                                              ; preds = %902
  %955 = load i64, i64* %10, align 8
  %956 = icmp eq i64 %955, 0
  br i1 %956, label %957, label %958

957:                                              ; preds = %954
  br i1 false, label %986, label %990

958:                                              ; preds = %954
  %959 = load i64, i64* %12, align 8
  %960 = icmp slt i64 %959, 0
  br i1 %960, label %961, label %981

961:                                              ; preds = %958
  br i1 true, label %962, label %963

962:                                              ; preds = %961
  br i1 false, label %964, label %976

963:                                              ; preds = %961
  br i1 false, label %964, label %976

964:                                              ; preds = %963, %962
  %965 = load i64, i64* %12, align 8
  %966 = icmp eq i64 %965, -1
  br i1 %966, label %967, label %976

967:                                              ; preds = %964
  br i1 true, label %968, label %972

968:                                              ; preds = %967
  %969 = load i64, i64* %10, align 8
  %970 = add nsw i64 %969, 0
  %971 = icmp slt i64 0, %970
  br i1 %971, label %986, label %990

972:                                              ; preds = %967
  %973 = load i64, i64* %10, align 8
  %974 = sub nsw i64 %973, 1
  %975 = icmp slt i64 -1, %974
  br i1 %975, label %986, label %990

976:                                              ; preds = %964, %963, %962
  %977 = load i64, i64* %12, align 8
  %978 = sdiv i64 0, %977
  %979 = load i64, i64* %10, align 8
  %980 = icmp slt i64 %978, %979
  br i1 %980, label %986, label %990

981:                                              ; preds = %958
  %982 = load i64, i64* %10, align 8
  %983 = udiv i64 -1, %982
  %984 = load i64, i64* %12, align 8
  %985 = icmp ult i64 %983, %984
  br i1 %985, label %986, label %990

986:                                              ; preds = %981, %976, %972, %968, %957, %949, %945, %938, %926, %909
  %987 = load i64, i64* %12, align 8
  %988 = load i64, i64* %10, align 8
  %989 = mul i64 %987, %988
  store i64 %989, i64* %13, align 8
  br i1 true, label %994, label %995

990:                                              ; preds = %981, %976, %972, %968, %957, %949, %945, %942, %938, %926, %909
  %991 = load i64, i64* %12, align 8
  %992 = load i64, i64* %10, align 8
  %993 = mul i64 %991, %992
  store i64 %993, i64* %13, align 8
  br i1 false, label %994, label %995

994:                                              ; preds = %990, %986, %898, %894, %811, %807, %719, %715, %628, %621, %530, %523, %429, %421, %329, %321, %227, %219, %127, %119
  br label %1001

995:                                              ; preds = %990, %986, %898, %894, %811, %807, %719, %715, %628, %621, %530, %523, %429, %421, %329, %321, %227, %219, %127, %119
  %996 = load i64, i64* %13, align 8
  %997 = icmp slt i64 %996, 128
  %998 = zext i1 %997 to i64
  %999 = select i1 %997, i32 128, i32 0
  %1000 = sext i32 %999 to i64
  br label %1001

1001:                                             ; preds = %995, %994
  %1002 = phi i64 [ 9223372036854775807, %994 ], [ %1000, %995 ]
  store i64 %1002, i64* %14, align 8
  %1003 = load i64, i64* %14, align 8
  %1004 = icmp ne i64 %1003, 0
  br i1 %1004, label %1005, label %1014

1005:                                             ; preds = %1001
  %1006 = load i64, i64* %14, align 8
  %1007 = load i64, i64* %10, align 8
  %1008 = sdiv i64 %1006, %1007
  store i64 %1008, i64* %12, align 8
  %1009 = load i64, i64* %14, align 8
  %1010 = load i64, i64* %14, align 8
  %1011 = load i64, i64* %10, align 8
  %1012 = srem i64 %1010, %1011
  %1013 = sub nsw i64 %1009, %1012
  store i64 %1013, i64* %13, align 8
  br label %1014

1014:                                             ; preds = %1005, %1001
  %1015 = load i8*, i8** %6, align 8
  %1016 = icmp ne i8* %1015, null
  br i1 %1016, label %1019, label %1017

1017:                                             ; preds = %1014
  %1018 = load i64*, i64** %7, align 8
  store i64 0, i64* %1018, align 8
  br label %1019

1019:                                             ; preds = %1017, %1014
  %1020 = load i64, i64* %12, align 8
  %1021 = load i64, i64* %11, align 8
  %1022 = sub nsw i64 %1020, %1021
  %1023 = load i64, i64* %8, align 8
  %1024 = icmp slt i64 %1022, %1023
  br i1 %1024, label %1025, label %2000

1025:                                             ; preds = %1019
  %1026 = load i64, i64* %11, align 8
  %1027 = load i64, i64* %8, align 8
  %1028 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %1026, i64 %1027)
  %1029 = extractvalue { i64, i1 } %1028, 1
  %1030 = extractvalue { i64, i1 } %1028, 0
  store i64 %1030, i64* %12, align 8
  br i1 %1029, label %1999, label %1031

1031:                                             ; preds = %1025
  %1032 = load i64, i64* %9, align 8
  %1033 = icmp sle i64 0, %1032
  br i1 %1033, label %1034, label %1038

1034:                                             ; preds = %1031
  %1035 = load i64, i64* %9, align 8
  %1036 = load i64, i64* %12, align 8
  %1037 = icmp slt i64 %1035, %1036
  br i1 %1037, label %1999, label %1038

1038:                                             ; preds = %1034, %1031
  br i1 false, label %1039, label %1240

1039:                                             ; preds = %1038
  br i1 false, label %1140, label %1040

1040:                                             ; preds = %1039
  %1041 = load i64, i64* %10, align 8
  %1042 = icmp slt i64 %1041, 0
  br i1 %1042, label %1043, label %1092

1043:                                             ; preds = %1040
  %1044 = load i64, i64* %12, align 8
  %1045 = icmp slt i64 %1044, 0
  br i1 %1045, label %1046, label %1069

1046:                                             ; preds = %1043
  br i1 true, label %1047, label %1052

1047:                                             ; preds = %1046
  %1048 = load i64, i64* %12, align 8
  %1049 = load i64, i64* %10, align 8
  %1050 = sdiv i64 127, %1049
  %1051 = icmp slt i64 %1048, %1050
  br i1 %1051, label %1124, label %1132

1052:                                             ; preds = %1046
  br i1 true, label %1053, label %1056

1053:                                             ; preds = %1052
  %1054 = load i64, i64* %10, align 8
  %1055 = icmp slt i64 %1054, -9223372036854775807
  br i1 %1055, label %1059, label %1060

1056:                                             ; preds = %1052
  %1057 = load i64, i64* %10, align 8
  %1058 = icmp slt i64 0, %1057
  br i1 %1058, label %1059, label %1060

1059:                                             ; preds = %1056, %1053
  br label %1064

1060:                                             ; preds = %1056, %1053
  %1061 = load i64, i64* %10, align 8
  %1062 = sub nsw i64 0, %1061
  %1063 = sdiv i64 127, %1062
  br label %1064

1064:                                             ; preds = %1060, %1059
  %1065 = phi i64 [ 0, %1059 ], [ %1063, %1060 ]
  %1066 = load i64, i64* %12, align 8
  %1067 = sub nsw i64 -1, %1066
  %1068 = icmp sle i64 %1065, %1067
  br i1 %1068, label %1124, label %1132

1069:                                             ; preds = %1043
  br i1 true, label %1070, label %1071

1070:                                             ; preds = %1069
  br i1 false, label %1072, label %1087

1071:                                             ; preds = %1069
  br i1 false, label %1072, label %1087

1072:                                             ; preds = %1071, %1070
  %1073 = load i64, i64* %10, align 8
  %1074 = icmp eq i64 %1073, -1
  br i1 %1074, label %1075, label %1087

1075:                                             ; preds = %1072
  br i1 true, label %1076, label %1080

1076:                                             ; preds = %1075
  %1077 = load i64, i64* %12, align 8
  %1078 = add nsw i64 %1077, -128
  %1079 = icmp slt i64 0, %1078
  br i1 %1079, label %1124, label %1132

1080:                                             ; preds = %1075
  %1081 = load i64, i64* %12, align 8
  %1082 = icmp slt i64 0, %1081
  br i1 %1082, label %1083, label %1132

1083:                                             ; preds = %1080
  %1084 = load i64, i64* %12, align 8
  %1085 = sub nsw i64 %1084, 1
  %1086 = icmp slt i64 127, %1085
  br i1 %1086, label %1124, label %1132

1087:                                             ; preds = %1072, %1071, %1070
  %1088 = load i64, i64* %10, align 8
  %1089 = sdiv i64 -128, %1088
  %1090 = load i64, i64* %12, align 8
  %1091 = icmp slt i64 %1089, %1090
  br i1 %1091, label %1124, label %1132

1092:                                             ; preds = %1040
  %1093 = load i64, i64* %10, align 8
  %1094 = icmp eq i64 %1093, 0
  br i1 %1094, label %1095, label %1096

1095:                                             ; preds = %1092
  br i1 false, label %1124, label %1132

1096:                                             ; preds = %1092
  %1097 = load i64, i64* %12, align 8
  %1098 = icmp slt i64 %1097, 0
  br i1 %1098, label %1099, label %1119

1099:                                             ; preds = %1096
  br i1 true, label %1100, label %1101

1100:                                             ; preds = %1099
  br i1 false, label %1102, label %1114

1101:                                             ; preds = %1099
  br i1 false, label %1102, label %1114

1102:                                             ; preds = %1101, %1100
  %1103 = load i64, i64* %12, align 8
  %1104 = icmp eq i64 %1103, -1
  br i1 %1104, label %1105, label %1114

1105:                                             ; preds = %1102
  br i1 true, label %1106, label %1110

1106:                                             ; preds = %1105
  %1107 = load i64, i64* %10, align 8
  %1108 = add nsw i64 %1107, -128
  %1109 = icmp slt i64 0, %1108
  br i1 %1109, label %1124, label %1132

1110:                                             ; preds = %1105
  %1111 = load i64, i64* %10, align 8
  %1112 = sub nsw i64 %1111, 1
  %1113 = icmp slt i64 127, %1112
  br i1 %1113, label %1124, label %1132

1114:                                             ; preds = %1102, %1101, %1100
  %1115 = load i64, i64* %12, align 8
  %1116 = sdiv i64 -128, %1115
  %1117 = load i64, i64* %10, align 8
  %1118 = icmp slt i64 %1116, %1117
  br i1 %1118, label %1124, label %1132

1119:                                             ; preds = %1096
  %1120 = load i64, i64* %10, align 8
  %1121 = sdiv i64 127, %1120
  %1122 = load i64, i64* %12, align 8
  %1123 = icmp slt i64 %1121, %1122
  br i1 %1123, label %1124, label %1132

1124:                                             ; preds = %1119, %1114, %1110, %1106, %1095, %1087, %1083, %1076, %1064, %1047
  %1125 = load i64, i64* %12, align 8
  %1126 = trunc i64 %1125 to i32
  %1127 = load i64, i64* %10, align 8
  %1128 = trunc i64 %1127 to i32
  %1129 = mul i32 %1126, %1128
  %1130 = trunc i32 %1129 to i8
  %1131 = sext i8 %1130 to i64
  store i64 %1131, i64* %13, align 8
  br i1 true, label %1999, label %2000

1132:                                             ; preds = %1119, %1114, %1110, %1106, %1095, %1087, %1083, %1080, %1076, %1064, %1047
  %1133 = load i64, i64* %12, align 8
  %1134 = trunc i64 %1133 to i32
  %1135 = load i64, i64* %10, align 8
  %1136 = trunc i64 %1135 to i32
  %1137 = mul i32 %1134, %1136
  %1138 = trunc i32 %1137 to i8
  %1139 = sext i8 %1138 to i64
  store i64 %1139, i64* %13, align 8
  br i1 false, label %1999, label %2000

1140:                                             ; preds = %1039
  %1141 = load i64, i64* %10, align 8
  %1142 = icmp slt i64 %1141, 0
  br i1 %1142, label %1143, label %1192

1143:                                             ; preds = %1140
  %1144 = load i64, i64* %12, align 8
  %1145 = icmp slt i64 %1144, 0
  br i1 %1145, label %1146, label %1169

1146:                                             ; preds = %1143
  br i1 true, label %1147, label %1152

1147:                                             ; preds = %1146
  %1148 = load i64, i64* %12, align 8
  %1149 = load i64, i64* %10, align 8
  %1150 = sdiv i64 255, %1149
  %1151 = icmp slt i64 %1148, %1150
  br i1 %1151, label %1224, label %1232

1152:                                             ; preds = %1146
  br i1 true, label %1153, label %1156

1153:                                             ; preds = %1152
  %1154 = load i64, i64* %10, align 8
  %1155 = icmp slt i64 %1154, -9223372036854775807
  br i1 %1155, label %1159, label %1160

1156:                                             ; preds = %1152
  %1157 = load i64, i64* %10, align 8
  %1158 = icmp slt i64 0, %1157
  br i1 %1158, label %1159, label %1160

1159:                                             ; preds = %1156, %1153
  br label %1164

1160:                                             ; preds = %1156, %1153
  %1161 = load i64, i64* %10, align 8
  %1162 = sub nsw i64 0, %1161
  %1163 = sdiv i64 255, %1162
  br label %1164

1164:                                             ; preds = %1160, %1159
  %1165 = phi i64 [ 0, %1159 ], [ %1163, %1160 ]
  %1166 = load i64, i64* %12, align 8
  %1167 = sub nsw i64 -1, %1166
  %1168 = icmp sle i64 %1165, %1167
  br i1 %1168, label %1224, label %1232

1169:                                             ; preds = %1143
  br i1 true, label %1170, label %1171

1170:                                             ; preds = %1169
  br i1 false, label %1172, label %1187

1171:                                             ; preds = %1169
  br i1 false, label %1172, label %1187

1172:                                             ; preds = %1171, %1170
  %1173 = load i64, i64* %10, align 8
  %1174 = icmp eq i64 %1173, -1
  br i1 %1174, label %1175, label %1187

1175:                                             ; preds = %1172
  br i1 true, label %1176, label %1180

1176:                                             ; preds = %1175
  %1177 = load i64, i64* %12, align 8
  %1178 = add nsw i64 %1177, 0
  %1179 = icmp slt i64 0, %1178
  br i1 %1179, label %1224, label %1232

1180:                                             ; preds = %1175
  %1181 = load i64, i64* %12, align 8
  %1182 = icmp slt i64 0, %1181
  br i1 %1182, label %1183, label %1232

1183:                                             ; preds = %1180
  %1184 = load i64, i64* %12, align 8
  %1185 = sub nsw i64 %1184, 1
  %1186 = icmp slt i64 -1, %1185
  br i1 %1186, label %1224, label %1232

1187:                                             ; preds = %1172, %1171, %1170
  %1188 = load i64, i64* %10, align 8
  %1189 = sdiv i64 0, %1188
  %1190 = load i64, i64* %12, align 8
  %1191 = icmp slt i64 %1189, %1190
  br i1 %1191, label %1224, label %1232

1192:                                             ; preds = %1140
  %1193 = load i64, i64* %10, align 8
  %1194 = icmp eq i64 %1193, 0
  br i1 %1194, label %1195, label %1196

1195:                                             ; preds = %1192
  br i1 false, label %1224, label %1232

1196:                                             ; preds = %1192
  %1197 = load i64, i64* %12, align 8
  %1198 = icmp slt i64 %1197, 0
  br i1 %1198, label %1199, label %1219

1199:                                             ; preds = %1196
  br i1 true, label %1200, label %1201

1200:                                             ; preds = %1199
  br i1 false, label %1202, label %1214

1201:                                             ; preds = %1199
  br i1 false, label %1202, label %1214

1202:                                             ; preds = %1201, %1200
  %1203 = load i64, i64* %12, align 8
  %1204 = icmp eq i64 %1203, -1
  br i1 %1204, label %1205, label %1214

1205:                                             ; preds = %1202
  br i1 true, label %1206, label %1210

1206:                                             ; preds = %1205
  %1207 = load i64, i64* %10, align 8
  %1208 = add nsw i64 %1207, 0
  %1209 = icmp slt i64 0, %1208
  br i1 %1209, label %1224, label %1232

1210:                                             ; preds = %1205
  %1211 = load i64, i64* %10, align 8
  %1212 = sub nsw i64 %1211, 1
  %1213 = icmp slt i64 -1, %1212
  br i1 %1213, label %1224, label %1232

1214:                                             ; preds = %1202, %1201, %1200
  %1215 = load i64, i64* %12, align 8
  %1216 = sdiv i64 0, %1215
  %1217 = load i64, i64* %10, align 8
  %1218 = icmp slt i64 %1216, %1217
  br i1 %1218, label %1224, label %1232

1219:                                             ; preds = %1196
  %1220 = load i64, i64* %10, align 8
  %1221 = sdiv i64 255, %1220
  %1222 = load i64, i64* %12, align 8
  %1223 = icmp slt i64 %1221, %1222
  br i1 %1223, label %1224, label %1232

1224:                                             ; preds = %1219, %1214, %1210, %1206, %1195, %1187, %1183, %1176, %1164, %1147
  %1225 = load i64, i64* %12, align 8
  %1226 = trunc i64 %1225 to i32
  %1227 = load i64, i64* %10, align 8
  %1228 = trunc i64 %1227 to i32
  %1229 = mul i32 %1226, %1228
  %1230 = trunc i32 %1229 to i8
  %1231 = zext i8 %1230 to i64
  store i64 %1231, i64* %13, align 8
  br i1 true, label %1999, label %2000

1232:                                             ; preds = %1219, %1214, %1210, %1206, %1195, %1187, %1183, %1180, %1176, %1164, %1147
  %1233 = load i64, i64* %12, align 8
  %1234 = trunc i64 %1233 to i32
  %1235 = load i64, i64* %10, align 8
  %1236 = trunc i64 %1235 to i32
  %1237 = mul i32 %1234, %1236
  %1238 = trunc i32 %1237 to i8
  %1239 = zext i8 %1238 to i64
  store i64 %1239, i64* %13, align 8
  br i1 false, label %1999, label %2000

1240:                                             ; preds = %1038
  br i1 false, label %1241, label %1442

1241:                                             ; preds = %1240
  br i1 false, label %1342, label %1242

1242:                                             ; preds = %1241
  %1243 = load i64, i64* %10, align 8
  %1244 = icmp slt i64 %1243, 0
  br i1 %1244, label %1245, label %1294

1245:                                             ; preds = %1242
  %1246 = load i64, i64* %12, align 8
  %1247 = icmp slt i64 %1246, 0
  br i1 %1247, label %1248, label %1271

1248:                                             ; preds = %1245
  br i1 true, label %1249, label %1254

1249:                                             ; preds = %1248
  %1250 = load i64, i64* %12, align 8
  %1251 = load i64, i64* %10, align 8
  %1252 = sdiv i64 32767, %1251
  %1253 = icmp slt i64 %1250, %1252
  br i1 %1253, label %1326, label %1334

1254:                                             ; preds = %1248
  br i1 true, label %1255, label %1258

1255:                                             ; preds = %1254
  %1256 = load i64, i64* %10, align 8
  %1257 = icmp slt i64 %1256, -9223372036854775807
  br i1 %1257, label %1261, label %1262

1258:                                             ; preds = %1254
  %1259 = load i64, i64* %10, align 8
  %1260 = icmp slt i64 0, %1259
  br i1 %1260, label %1261, label %1262

1261:                                             ; preds = %1258, %1255
  br label %1266

1262:                                             ; preds = %1258, %1255
  %1263 = load i64, i64* %10, align 8
  %1264 = sub nsw i64 0, %1263
  %1265 = sdiv i64 32767, %1264
  br label %1266

1266:                                             ; preds = %1262, %1261
  %1267 = phi i64 [ 0, %1261 ], [ %1265, %1262 ]
  %1268 = load i64, i64* %12, align 8
  %1269 = sub nsw i64 -1, %1268
  %1270 = icmp sle i64 %1267, %1269
  br i1 %1270, label %1326, label %1334

1271:                                             ; preds = %1245
  br i1 true, label %1272, label %1273

1272:                                             ; preds = %1271
  br i1 false, label %1274, label %1289

1273:                                             ; preds = %1271
  br i1 false, label %1274, label %1289

1274:                                             ; preds = %1273, %1272
  %1275 = load i64, i64* %10, align 8
  %1276 = icmp eq i64 %1275, -1
  br i1 %1276, label %1277, label %1289

1277:                                             ; preds = %1274
  br i1 true, label %1278, label %1282

1278:                                             ; preds = %1277
  %1279 = load i64, i64* %12, align 8
  %1280 = add nsw i64 %1279, -32768
  %1281 = icmp slt i64 0, %1280
  br i1 %1281, label %1326, label %1334

1282:                                             ; preds = %1277
  %1283 = load i64, i64* %12, align 8
  %1284 = icmp slt i64 0, %1283
  br i1 %1284, label %1285, label %1334

1285:                                             ; preds = %1282
  %1286 = load i64, i64* %12, align 8
  %1287 = sub nsw i64 %1286, 1
  %1288 = icmp slt i64 32767, %1287
  br i1 %1288, label %1326, label %1334

1289:                                             ; preds = %1274, %1273, %1272
  %1290 = load i64, i64* %10, align 8
  %1291 = sdiv i64 -32768, %1290
  %1292 = load i64, i64* %12, align 8
  %1293 = icmp slt i64 %1291, %1292
  br i1 %1293, label %1326, label %1334

1294:                                             ; preds = %1242
  %1295 = load i64, i64* %10, align 8
  %1296 = icmp eq i64 %1295, 0
  br i1 %1296, label %1297, label %1298

1297:                                             ; preds = %1294
  br i1 false, label %1326, label %1334

1298:                                             ; preds = %1294
  %1299 = load i64, i64* %12, align 8
  %1300 = icmp slt i64 %1299, 0
  br i1 %1300, label %1301, label %1321

1301:                                             ; preds = %1298
  br i1 true, label %1302, label %1303

1302:                                             ; preds = %1301
  br i1 false, label %1304, label %1316

1303:                                             ; preds = %1301
  br i1 false, label %1304, label %1316

1304:                                             ; preds = %1303, %1302
  %1305 = load i64, i64* %12, align 8
  %1306 = icmp eq i64 %1305, -1
  br i1 %1306, label %1307, label %1316

1307:                                             ; preds = %1304
  br i1 true, label %1308, label %1312

1308:                                             ; preds = %1307
  %1309 = load i64, i64* %10, align 8
  %1310 = add nsw i64 %1309, -32768
  %1311 = icmp slt i64 0, %1310
  br i1 %1311, label %1326, label %1334

1312:                                             ; preds = %1307
  %1313 = load i64, i64* %10, align 8
  %1314 = sub nsw i64 %1313, 1
  %1315 = icmp slt i64 32767, %1314
  br i1 %1315, label %1326, label %1334

1316:                                             ; preds = %1304, %1303, %1302
  %1317 = load i64, i64* %12, align 8
  %1318 = sdiv i64 -32768, %1317
  %1319 = load i64, i64* %10, align 8
  %1320 = icmp slt i64 %1318, %1319
  br i1 %1320, label %1326, label %1334

1321:                                             ; preds = %1298
  %1322 = load i64, i64* %10, align 8
  %1323 = sdiv i64 32767, %1322
  %1324 = load i64, i64* %12, align 8
  %1325 = icmp slt i64 %1323, %1324
  br i1 %1325, label %1326, label %1334

1326:                                             ; preds = %1321, %1316, %1312, %1308, %1297, %1289, %1285, %1278, %1266, %1249
  %1327 = load i64, i64* %12, align 8
  %1328 = trunc i64 %1327 to i32
  %1329 = load i64, i64* %10, align 8
  %1330 = trunc i64 %1329 to i32
  %1331 = mul i32 %1328, %1330
  %1332 = trunc i32 %1331 to i16
  %1333 = sext i16 %1332 to i64
  store i64 %1333, i64* %13, align 8
  br i1 true, label %1999, label %2000

1334:                                             ; preds = %1321, %1316, %1312, %1308, %1297, %1289, %1285, %1282, %1278, %1266, %1249
  %1335 = load i64, i64* %12, align 8
  %1336 = trunc i64 %1335 to i32
  %1337 = load i64, i64* %10, align 8
  %1338 = trunc i64 %1337 to i32
  %1339 = mul i32 %1336, %1338
  %1340 = trunc i32 %1339 to i16
  %1341 = sext i16 %1340 to i64
  store i64 %1341, i64* %13, align 8
  br i1 false, label %1999, label %2000

1342:                                             ; preds = %1241
  %1343 = load i64, i64* %10, align 8
  %1344 = icmp slt i64 %1343, 0
  br i1 %1344, label %1345, label %1394

1345:                                             ; preds = %1342
  %1346 = load i64, i64* %12, align 8
  %1347 = icmp slt i64 %1346, 0
  br i1 %1347, label %1348, label %1371

1348:                                             ; preds = %1345
  br i1 true, label %1349, label %1354

1349:                                             ; preds = %1348
  %1350 = load i64, i64* %12, align 8
  %1351 = load i64, i64* %10, align 8
  %1352 = sdiv i64 65535, %1351
  %1353 = icmp slt i64 %1350, %1352
  br i1 %1353, label %1426, label %1434

1354:                                             ; preds = %1348
  br i1 true, label %1355, label %1358

1355:                                             ; preds = %1354
  %1356 = load i64, i64* %10, align 8
  %1357 = icmp slt i64 %1356, -9223372036854775807
  br i1 %1357, label %1361, label %1362

1358:                                             ; preds = %1354
  %1359 = load i64, i64* %10, align 8
  %1360 = icmp slt i64 0, %1359
  br i1 %1360, label %1361, label %1362

1361:                                             ; preds = %1358, %1355
  br label %1366

1362:                                             ; preds = %1358, %1355
  %1363 = load i64, i64* %10, align 8
  %1364 = sub nsw i64 0, %1363
  %1365 = sdiv i64 65535, %1364
  br label %1366

1366:                                             ; preds = %1362, %1361
  %1367 = phi i64 [ 0, %1361 ], [ %1365, %1362 ]
  %1368 = load i64, i64* %12, align 8
  %1369 = sub nsw i64 -1, %1368
  %1370 = icmp sle i64 %1367, %1369
  br i1 %1370, label %1426, label %1434

1371:                                             ; preds = %1345
  br i1 true, label %1372, label %1373

1372:                                             ; preds = %1371
  br i1 false, label %1374, label %1389

1373:                                             ; preds = %1371
  br i1 false, label %1374, label %1389

1374:                                             ; preds = %1373, %1372
  %1375 = load i64, i64* %10, align 8
  %1376 = icmp eq i64 %1375, -1
  br i1 %1376, label %1377, label %1389

1377:                                             ; preds = %1374
  br i1 true, label %1378, label %1382

1378:                                             ; preds = %1377
  %1379 = load i64, i64* %12, align 8
  %1380 = add nsw i64 %1379, 0
  %1381 = icmp slt i64 0, %1380
  br i1 %1381, label %1426, label %1434

1382:                                             ; preds = %1377
  %1383 = load i64, i64* %12, align 8
  %1384 = icmp slt i64 0, %1383
  br i1 %1384, label %1385, label %1434

1385:                                             ; preds = %1382
  %1386 = load i64, i64* %12, align 8
  %1387 = sub nsw i64 %1386, 1
  %1388 = icmp slt i64 -1, %1387
  br i1 %1388, label %1426, label %1434

1389:                                             ; preds = %1374, %1373, %1372
  %1390 = load i64, i64* %10, align 8
  %1391 = sdiv i64 0, %1390
  %1392 = load i64, i64* %12, align 8
  %1393 = icmp slt i64 %1391, %1392
  br i1 %1393, label %1426, label %1434

1394:                                             ; preds = %1342
  %1395 = load i64, i64* %10, align 8
  %1396 = icmp eq i64 %1395, 0
  br i1 %1396, label %1397, label %1398

1397:                                             ; preds = %1394
  br i1 false, label %1426, label %1434

1398:                                             ; preds = %1394
  %1399 = load i64, i64* %12, align 8
  %1400 = icmp slt i64 %1399, 0
  br i1 %1400, label %1401, label %1421

1401:                                             ; preds = %1398
  br i1 true, label %1402, label %1403

1402:                                             ; preds = %1401
  br i1 false, label %1404, label %1416

1403:                                             ; preds = %1401
  br i1 false, label %1404, label %1416

1404:                                             ; preds = %1403, %1402
  %1405 = load i64, i64* %12, align 8
  %1406 = icmp eq i64 %1405, -1
  br i1 %1406, label %1407, label %1416

1407:                                             ; preds = %1404
  br i1 true, label %1408, label %1412

1408:                                             ; preds = %1407
  %1409 = load i64, i64* %10, align 8
  %1410 = add nsw i64 %1409, 0
  %1411 = icmp slt i64 0, %1410
  br i1 %1411, label %1426, label %1434

1412:                                             ; preds = %1407
  %1413 = load i64, i64* %10, align 8
  %1414 = sub nsw i64 %1413, 1
  %1415 = icmp slt i64 -1, %1414
  br i1 %1415, label %1426, label %1434

1416:                                             ; preds = %1404, %1403, %1402
  %1417 = load i64, i64* %12, align 8
  %1418 = sdiv i64 0, %1417
  %1419 = load i64, i64* %10, align 8
  %1420 = icmp slt i64 %1418, %1419
  br i1 %1420, label %1426, label %1434

1421:                                             ; preds = %1398
  %1422 = load i64, i64* %10, align 8
  %1423 = sdiv i64 65535, %1422
  %1424 = load i64, i64* %12, align 8
  %1425 = icmp slt i64 %1423, %1424
  br i1 %1425, label %1426, label %1434

1426:                                             ; preds = %1421, %1416, %1412, %1408, %1397, %1389, %1385, %1378, %1366, %1349
  %1427 = load i64, i64* %12, align 8
  %1428 = trunc i64 %1427 to i32
  %1429 = load i64, i64* %10, align 8
  %1430 = trunc i64 %1429 to i32
  %1431 = mul i32 %1428, %1430
  %1432 = trunc i32 %1431 to i16
  %1433 = zext i16 %1432 to i64
  store i64 %1433, i64* %13, align 8
  br i1 true, label %1999, label %2000

1434:                                             ; preds = %1421, %1416, %1412, %1408, %1397, %1389, %1385, %1382, %1378, %1366, %1349
  %1435 = load i64, i64* %12, align 8
  %1436 = trunc i64 %1435 to i32
  %1437 = load i64, i64* %10, align 8
  %1438 = trunc i64 %1437 to i32
  %1439 = mul i32 %1436, %1438
  %1440 = trunc i32 %1439 to i16
  %1441 = zext i16 %1440 to i64
  store i64 %1441, i64* %13, align 8
  br i1 false, label %1999, label %2000

1442:                                             ; preds = %1240
  br i1 false, label %1443, label %1640

1443:                                             ; preds = %1442
  br i1 true, label %1444, label %1542

1444:                                             ; preds = %1443
  %1445 = load i64, i64* %10, align 8
  %1446 = icmp slt i64 %1445, 0
  br i1 %1446, label %1447, label %1496

1447:                                             ; preds = %1444
  %1448 = load i64, i64* %12, align 8
  %1449 = icmp slt i64 %1448, 0
  br i1 %1449, label %1450, label %1473

1450:                                             ; preds = %1447
  br i1 true, label %1451, label %1456

1451:                                             ; preds = %1450
  %1452 = load i64, i64* %12, align 8
  %1453 = load i64, i64* %10, align 8
  %1454 = sdiv i64 2147483647, %1453
  %1455 = icmp slt i64 %1452, %1454
  br i1 %1455, label %1528, label %1535

1456:                                             ; preds = %1450
  br i1 true, label %1457, label %1460

1457:                                             ; preds = %1456
  %1458 = load i64, i64* %10, align 8
  %1459 = icmp slt i64 %1458, -9223372036854775807
  br i1 %1459, label %1463, label %1464

1460:                                             ; preds = %1456
  %1461 = load i64, i64* %10, align 8
  %1462 = icmp slt i64 0, %1461
  br i1 %1462, label %1463, label %1464

1463:                                             ; preds = %1460, %1457
  br label %1468

1464:                                             ; preds = %1460, %1457
  %1465 = load i64, i64* %10, align 8
  %1466 = sub nsw i64 0, %1465
  %1467 = sdiv i64 2147483647, %1466
  br label %1468

1468:                                             ; preds = %1464, %1463
  %1469 = phi i64 [ 0, %1463 ], [ %1467, %1464 ]
  %1470 = load i64, i64* %12, align 8
  %1471 = sub nsw i64 -1, %1470
  %1472 = icmp sle i64 %1469, %1471
  br i1 %1472, label %1528, label %1535

1473:                                             ; preds = %1447
  br i1 true, label %1474, label %1475

1474:                                             ; preds = %1473
  br i1 false, label %1476, label %1491

1475:                                             ; preds = %1473
  br i1 false, label %1476, label %1491

1476:                                             ; preds = %1475, %1474
  %1477 = load i64, i64* %10, align 8
  %1478 = icmp eq i64 %1477, -1
  br i1 %1478, label %1479, label %1491

1479:                                             ; preds = %1476
  br i1 true, label %1480, label %1484

1480:                                             ; preds = %1479
  %1481 = load i64, i64* %12, align 8
  %1482 = add nsw i64 %1481, -2147483648
  %1483 = icmp slt i64 0, %1482
  br i1 %1483, label %1528, label %1535

1484:                                             ; preds = %1479
  %1485 = load i64, i64* %12, align 8
  %1486 = icmp slt i64 0, %1485
  br i1 %1486, label %1487, label %1535

1487:                                             ; preds = %1484
  %1488 = load i64, i64* %12, align 8
  %1489 = sub nsw i64 %1488, 1
  %1490 = icmp slt i64 2147483647, %1489
  br i1 %1490, label %1528, label %1535

1491:                                             ; preds = %1476, %1475, %1474
  %1492 = load i64, i64* %10, align 8
  %1493 = sdiv i64 -2147483648, %1492
  %1494 = load i64, i64* %12, align 8
  %1495 = icmp slt i64 %1493, %1494
  br i1 %1495, label %1528, label %1535

1496:                                             ; preds = %1444
  %1497 = load i64, i64* %10, align 8
  %1498 = icmp eq i64 %1497, 0
  br i1 %1498, label %1499, label %1500

1499:                                             ; preds = %1496
  br i1 false, label %1528, label %1535

1500:                                             ; preds = %1496
  %1501 = load i64, i64* %12, align 8
  %1502 = icmp slt i64 %1501, 0
  br i1 %1502, label %1503, label %1523

1503:                                             ; preds = %1500
  br i1 true, label %1504, label %1505

1504:                                             ; preds = %1503
  br i1 false, label %1506, label %1518

1505:                                             ; preds = %1503
  br i1 false, label %1506, label %1518

1506:                                             ; preds = %1505, %1504
  %1507 = load i64, i64* %12, align 8
  %1508 = icmp eq i64 %1507, -1
  br i1 %1508, label %1509, label %1518

1509:                                             ; preds = %1506
  br i1 true, label %1510, label %1514

1510:                                             ; preds = %1509
  %1511 = load i64, i64* %10, align 8
  %1512 = add nsw i64 %1511, -2147483648
  %1513 = icmp slt i64 0, %1512
  br i1 %1513, label %1528, label %1535

1514:                                             ; preds = %1509
  %1515 = load i64, i64* %10, align 8
  %1516 = sub nsw i64 %1515, 1
  %1517 = icmp slt i64 2147483647, %1516
  br i1 %1517, label %1528, label %1535

1518:                                             ; preds = %1506, %1505, %1504
  %1519 = load i64, i64* %12, align 8
  %1520 = sdiv i64 -2147483648, %1519
  %1521 = load i64, i64* %10, align 8
  %1522 = icmp slt i64 %1520, %1521
  br i1 %1522, label %1528, label %1535

1523:                                             ; preds = %1500
  %1524 = load i64, i64* %10, align 8
  %1525 = sdiv i64 2147483647, %1524
  %1526 = load i64, i64* %12, align 8
  %1527 = icmp slt i64 %1525, %1526
  br i1 %1527, label %1528, label %1535

1528:                                             ; preds = %1523, %1518, %1514, %1510, %1499, %1491, %1487, %1480, %1468, %1451
  %1529 = load i64, i64* %12, align 8
  %1530 = trunc i64 %1529 to i32
  %1531 = load i64, i64* %10, align 8
  %1532 = trunc i64 %1531 to i32
  %1533 = mul i32 %1530, %1532
  %1534 = sext i32 %1533 to i64
  store i64 %1534, i64* %13, align 8
  br i1 true, label %1999, label %2000

1535:                                             ; preds = %1523, %1518, %1514, %1510, %1499, %1491, %1487, %1484, %1480, %1468, %1451
  %1536 = load i64, i64* %12, align 8
  %1537 = trunc i64 %1536 to i32
  %1538 = load i64, i64* %10, align 8
  %1539 = trunc i64 %1538 to i32
  %1540 = mul i32 %1537, %1539
  %1541 = sext i32 %1540 to i64
  store i64 %1541, i64* %13, align 8
  br i1 false, label %1999, label %2000

1542:                                             ; preds = %1443
  %1543 = load i64, i64* %10, align 8
  %1544 = icmp slt i64 %1543, 0
  br i1 %1544, label %1545, label %1594

1545:                                             ; preds = %1542
  %1546 = load i64, i64* %12, align 8
  %1547 = icmp slt i64 %1546, 0
  br i1 %1547, label %1548, label %1571

1548:                                             ; preds = %1545
  br i1 true, label %1549, label %1554

1549:                                             ; preds = %1548
  %1550 = load i64, i64* %12, align 8
  %1551 = load i64, i64* %10, align 8
  %1552 = sdiv i64 4294967295, %1551
  %1553 = icmp slt i64 %1550, %1552
  br i1 %1553, label %1626, label %1633

1554:                                             ; preds = %1548
  br i1 true, label %1555, label %1558

1555:                                             ; preds = %1554
  %1556 = load i64, i64* %10, align 8
  %1557 = icmp slt i64 %1556, -9223372036854775807
  br i1 %1557, label %1561, label %1562

1558:                                             ; preds = %1554
  %1559 = load i64, i64* %10, align 8
  %1560 = icmp slt i64 0, %1559
  br i1 %1560, label %1561, label %1562

1561:                                             ; preds = %1558, %1555
  br label %1566

1562:                                             ; preds = %1558, %1555
  %1563 = load i64, i64* %10, align 8
  %1564 = sub nsw i64 0, %1563
  %1565 = sdiv i64 4294967295, %1564
  br label %1566

1566:                                             ; preds = %1562, %1561
  %1567 = phi i64 [ 0, %1561 ], [ %1565, %1562 ]
  %1568 = load i64, i64* %12, align 8
  %1569 = sub nsw i64 -1, %1568
  %1570 = icmp sle i64 %1567, %1569
  br i1 %1570, label %1626, label %1633

1571:                                             ; preds = %1545
  br i1 true, label %1572, label %1573

1572:                                             ; preds = %1571
  br i1 false, label %1574, label %1589

1573:                                             ; preds = %1571
  br i1 false, label %1574, label %1589

1574:                                             ; preds = %1573, %1572
  %1575 = load i64, i64* %10, align 8
  %1576 = icmp eq i64 %1575, -1
  br i1 %1576, label %1577, label %1589

1577:                                             ; preds = %1574
  br i1 true, label %1578, label %1582

1578:                                             ; preds = %1577
  %1579 = load i64, i64* %12, align 8
  %1580 = add nsw i64 %1579, 0
  %1581 = icmp slt i64 0, %1580
  br i1 %1581, label %1626, label %1633

1582:                                             ; preds = %1577
  %1583 = load i64, i64* %12, align 8
  %1584 = icmp slt i64 0, %1583
  br i1 %1584, label %1585, label %1633

1585:                                             ; preds = %1582
  %1586 = load i64, i64* %12, align 8
  %1587 = sub nsw i64 %1586, 1
  %1588 = icmp slt i64 -1, %1587
  br i1 %1588, label %1626, label %1633

1589:                                             ; preds = %1574, %1573, %1572
  %1590 = load i64, i64* %10, align 8
  %1591 = sdiv i64 0, %1590
  %1592 = load i64, i64* %12, align 8
  %1593 = icmp slt i64 %1591, %1592
  br i1 %1593, label %1626, label %1633

1594:                                             ; preds = %1542
  %1595 = load i64, i64* %10, align 8
  %1596 = icmp eq i64 %1595, 0
  br i1 %1596, label %1597, label %1598

1597:                                             ; preds = %1594
  br i1 false, label %1626, label %1633

1598:                                             ; preds = %1594
  %1599 = load i64, i64* %12, align 8
  %1600 = icmp slt i64 %1599, 0
  br i1 %1600, label %1601, label %1621

1601:                                             ; preds = %1598
  br i1 true, label %1602, label %1603

1602:                                             ; preds = %1601
  br i1 false, label %1604, label %1616

1603:                                             ; preds = %1601
  br i1 false, label %1604, label %1616

1604:                                             ; preds = %1603, %1602
  %1605 = load i64, i64* %12, align 8
  %1606 = icmp eq i64 %1605, -1
  br i1 %1606, label %1607, label %1616

1607:                                             ; preds = %1604
  br i1 true, label %1608, label %1612

1608:                                             ; preds = %1607
  %1609 = load i64, i64* %10, align 8
  %1610 = add nsw i64 %1609, 0
  %1611 = icmp slt i64 0, %1610
  br i1 %1611, label %1626, label %1633

1612:                                             ; preds = %1607
  %1613 = load i64, i64* %10, align 8
  %1614 = sub nsw i64 %1613, 1
  %1615 = icmp slt i64 -1, %1614
  br i1 %1615, label %1626, label %1633

1616:                                             ; preds = %1604, %1603, %1602
  %1617 = load i64, i64* %12, align 8
  %1618 = sdiv i64 0, %1617
  %1619 = load i64, i64* %10, align 8
  %1620 = icmp slt i64 %1618, %1619
  br i1 %1620, label %1626, label %1633

1621:                                             ; preds = %1598
  %1622 = load i64, i64* %10, align 8
  %1623 = sdiv i64 4294967295, %1622
  %1624 = load i64, i64* %12, align 8
  %1625 = icmp slt i64 %1623, %1624
  br i1 %1625, label %1626, label %1633

1626:                                             ; preds = %1621, %1616, %1612, %1608, %1597, %1589, %1585, %1578, %1566, %1549
  %1627 = load i64, i64* %12, align 8
  %1628 = trunc i64 %1627 to i32
  %1629 = load i64, i64* %10, align 8
  %1630 = trunc i64 %1629 to i32
  %1631 = mul i32 %1628, %1630
  %1632 = zext i32 %1631 to i64
  store i64 %1632, i64* %13, align 8
  br i1 true, label %1999, label %2000

1633:                                             ; preds = %1621, %1616, %1612, %1608, %1597, %1589, %1585, %1582, %1578, %1566, %1549
  %1634 = load i64, i64* %12, align 8
  %1635 = trunc i64 %1634 to i32
  %1636 = load i64, i64* %10, align 8
  %1637 = trunc i64 %1636 to i32
  %1638 = mul i32 %1635, %1637
  %1639 = zext i32 %1638 to i64
  store i64 %1639, i64* %13, align 8
  br i1 false, label %1999, label %2000

1640:                                             ; preds = %1442
  br i1 true, label %1641, label %1820

1641:                                             ; preds = %1640
  br i1 true, label %1642, label %1728

1642:                                             ; preds = %1641
  %1643 = load i64, i64* %10, align 8
  %1644 = icmp slt i64 %1643, 0
  br i1 %1644, label %1645, label %1691

1645:                                             ; preds = %1642
  %1646 = load i64, i64* %12, align 8
  %1647 = icmp slt i64 %1646, 0
  br i1 %1647, label %1648, label %1671

1648:                                             ; preds = %1645
  br i1 true, label %1649, label %1654

1649:                                             ; preds = %1648
  %1650 = load i64, i64* %12, align 8
  %1651 = load i64, i64* %10, align 8
  %1652 = sdiv i64 9223372036854775807, %1651
  %1653 = icmp slt i64 %1650, %1652
  br i1 %1653, label %1720, label %1724

1654:                                             ; preds = %1648
  br i1 true, label %1655, label %1658

1655:                                             ; preds = %1654
  %1656 = load i64, i64* %10, align 8
  %1657 = icmp slt i64 %1656, -9223372036854775807
  br i1 %1657, label %1661, label %1662

1658:                                             ; preds = %1654
  %1659 = load i64, i64* %10, align 8
  %1660 = icmp slt i64 0, %1659
  br i1 %1660, label %1661, label %1662

1661:                                             ; preds = %1658, %1655
  br label %1666

1662:                                             ; preds = %1658, %1655
  %1663 = load i64, i64* %10, align 8
  %1664 = sub nsw i64 0, %1663
  %1665 = sdiv i64 9223372036854775807, %1664
  br label %1666

1666:                                             ; preds = %1662, %1661
  %1667 = phi i64 [ 0, %1661 ], [ %1665, %1662 ]
  %1668 = load i64, i64* %12, align 8
  %1669 = sub nsw i64 -1, %1668
  %1670 = icmp sle i64 %1667, %1669
  br i1 %1670, label %1720, label %1724

1671:                                             ; preds = %1645
  %1672 = load i64, i64* %10, align 8
  %1673 = icmp eq i64 %1672, -1
  br i1 %1673, label %1674, label %1686

1674:                                             ; preds = %1671
  br i1 true, label %1675, label %1679

1675:                                             ; preds = %1674
  %1676 = load i64, i64* %12, align 8
  %1677 = add nsw i64 %1676, -9223372036854775808
  %1678 = icmp slt i64 0, %1677
  br i1 %1678, label %1720, label %1724

1679:                                             ; preds = %1674
  %1680 = load i64, i64* %12, align 8
  %1681 = icmp slt i64 0, %1680
  br i1 %1681, label %1682, label %1724

1682:                                             ; preds = %1679
  %1683 = load i64, i64* %12, align 8
  %1684 = sub nsw i64 %1683, 1
  %1685 = icmp slt i64 9223372036854775807, %1684
  br i1 %1685, label %1720, label %1724

1686:                                             ; preds = %1671
  %1687 = load i64, i64* %10, align 8
  %1688 = sdiv i64 -9223372036854775808, %1687
  %1689 = load i64, i64* %12, align 8
  %1690 = icmp slt i64 %1688, %1689
  br i1 %1690, label %1720, label %1724

1691:                                             ; preds = %1642
  %1692 = load i64, i64* %10, align 8
  %1693 = icmp eq i64 %1692, 0
  br i1 %1693, label %1694, label %1695

1694:                                             ; preds = %1691
  br i1 false, label %1720, label %1724

1695:                                             ; preds = %1691
  %1696 = load i64, i64* %12, align 8
  %1697 = icmp slt i64 %1696, 0
  br i1 %1697, label %1698, label %1715

1698:                                             ; preds = %1695
  %1699 = load i64, i64* %12, align 8
  %1700 = icmp eq i64 %1699, -1
  br i1 %1700, label %1701, label %1710

1701:                                             ; preds = %1698
  br i1 true, label %1702, label %1706

1702:                                             ; preds = %1701
  %1703 = load i64, i64* %10, align 8
  %1704 = add nsw i64 %1703, -9223372036854775808
  %1705 = icmp slt i64 0, %1704
  br i1 %1705, label %1720, label %1724

1706:                                             ; preds = %1701
  %1707 = load i64, i64* %10, align 8
  %1708 = sub nsw i64 %1707, 1
  %1709 = icmp slt i64 9223372036854775807, %1708
  br i1 %1709, label %1720, label %1724

1710:                                             ; preds = %1698
  %1711 = load i64, i64* %12, align 8
  %1712 = sdiv i64 -9223372036854775808, %1711
  %1713 = load i64, i64* %10, align 8
  %1714 = icmp slt i64 %1712, %1713
  br i1 %1714, label %1720, label %1724

1715:                                             ; preds = %1695
  %1716 = load i64, i64* %10, align 8
  %1717 = sdiv i64 9223372036854775807, %1716
  %1718 = load i64, i64* %12, align 8
  %1719 = icmp slt i64 %1717, %1718
  br i1 %1719, label %1720, label %1724

1720:                                             ; preds = %1715, %1710, %1706, %1702, %1694, %1686, %1682, %1675, %1666, %1649
  %1721 = load i64, i64* %12, align 8
  %1722 = load i64, i64* %10, align 8
  %1723 = mul i64 %1721, %1722
  store i64 %1723, i64* %13, align 8
  br i1 true, label %1999, label %2000

1724:                                             ; preds = %1715, %1710, %1706, %1702, %1694, %1686, %1682, %1679, %1675, %1666, %1649
  %1725 = load i64, i64* %12, align 8
  %1726 = load i64, i64* %10, align 8
  %1727 = mul i64 %1725, %1726
  store i64 %1727, i64* %13, align 8
  br i1 false, label %1999, label %2000

1728:                                             ; preds = %1641
  %1729 = load i64, i64* %10, align 8
  %1730 = icmp slt i64 %1729, 0
  br i1 %1730, label %1731, label %1780

1731:                                             ; preds = %1728
  %1732 = load i64, i64* %12, align 8
  %1733 = icmp slt i64 %1732, 0
  br i1 %1733, label %1734, label %1757

1734:                                             ; preds = %1731
  br i1 false, label %1735, label %1740

1735:                                             ; preds = %1734
  %1736 = load i64, i64* %12, align 8
  %1737 = load i64, i64* %10, align 8
  %1738 = udiv i64 -1, %1737
  %1739 = icmp ult i64 %1736, %1738
  br i1 %1739, label %1812, label %1816

1740:                                             ; preds = %1734
  br i1 true, label %1741, label %1744

1741:                                             ; preds = %1740
  %1742 = load i64, i64* %10, align 8
  %1743 = icmp slt i64 %1742, -9223372036854775807
  br i1 %1743, label %1747, label %1748

1744:                                             ; preds = %1740
  %1745 = load i64, i64* %10, align 8
  %1746 = icmp slt i64 0, %1745
  br i1 %1746, label %1747, label %1748

1747:                                             ; preds = %1744, %1741
  br label %1752

1748:                                             ; preds = %1744, %1741
  %1749 = load i64, i64* %10, align 8
  %1750 = sub nsw i64 0, %1749
  %1751 = udiv i64 -1, %1750
  br label %1752

1752:                                             ; preds = %1748, %1747
  %1753 = phi i64 [ 1, %1747 ], [ %1751, %1748 ]
  %1754 = load i64, i64* %12, align 8
  %1755 = sub nsw i64 -1, %1754
  %1756 = icmp ule i64 %1753, %1755
  br i1 %1756, label %1812, label %1816

1757:                                             ; preds = %1731
  br i1 true, label %1758, label %1759

1758:                                             ; preds = %1757
  br i1 false, label %1760, label %1775

1759:                                             ; preds = %1757
  br i1 false, label %1760, label %1775

1760:                                             ; preds = %1759, %1758
  %1761 = load i64, i64* %10, align 8
  %1762 = icmp eq i64 %1761, -1
  br i1 %1762, label %1763, label %1775

1763:                                             ; preds = %1760
  br i1 true, label %1764, label %1768

1764:                                             ; preds = %1763
  %1765 = load i64, i64* %12, align 8
  %1766 = add nsw i64 %1765, 0
  %1767 = icmp slt i64 0, %1766
  br i1 %1767, label %1812, label %1816

1768:                                             ; preds = %1763
  %1769 = load i64, i64* %12, align 8
  %1770 = icmp slt i64 0, %1769
  br i1 %1770, label %1771, label %1816

1771:                                             ; preds = %1768
  %1772 = load i64, i64* %12, align 8
  %1773 = sub nsw i64 %1772, 1
  %1774 = icmp slt i64 -1, %1773
  br i1 %1774, label %1812, label %1816

1775:                                             ; preds = %1760, %1759, %1758
  %1776 = load i64, i64* %10, align 8
  %1777 = sdiv i64 0, %1776
  %1778 = load i64, i64* %12, align 8
  %1779 = icmp slt i64 %1777, %1778
  br i1 %1779, label %1812, label %1816

1780:                                             ; preds = %1728
  %1781 = load i64, i64* %10, align 8
  %1782 = icmp eq i64 %1781, 0
  br i1 %1782, label %1783, label %1784

1783:                                             ; preds = %1780
  br i1 false, label %1812, label %1816

1784:                                             ; preds = %1780
  %1785 = load i64, i64* %12, align 8
  %1786 = icmp slt i64 %1785, 0
  br i1 %1786, label %1787, label %1807

1787:                                             ; preds = %1784
  br i1 true, label %1788, label %1789

1788:                                             ; preds = %1787
  br i1 false, label %1790, label %1802

1789:                                             ; preds = %1787
  br i1 false, label %1790, label %1802

1790:                                             ; preds = %1789, %1788
  %1791 = load i64, i64* %12, align 8
  %1792 = icmp eq i64 %1791, -1
  br i1 %1792, label %1793, label %1802

1793:                                             ; preds = %1790
  br i1 true, label %1794, label %1798

1794:                                             ; preds = %1793
  %1795 = load i64, i64* %10, align 8
  %1796 = add nsw i64 %1795, 0
  %1797 = icmp slt i64 0, %1796
  br i1 %1797, label %1812, label %1816

1798:                                             ; preds = %1793
  %1799 = load i64, i64* %10, align 8
  %1800 = sub nsw i64 %1799, 1
  %1801 = icmp slt i64 -1, %1800
  br i1 %1801, label %1812, label %1816

1802:                                             ; preds = %1790, %1789, %1788
  %1803 = load i64, i64* %12, align 8
  %1804 = sdiv i64 0, %1803
  %1805 = load i64, i64* %10, align 8
  %1806 = icmp slt i64 %1804, %1805
  br i1 %1806, label %1812, label %1816

1807:                                             ; preds = %1784
  %1808 = load i64, i64* %10, align 8
  %1809 = udiv i64 -1, %1808
  %1810 = load i64, i64* %12, align 8
  %1811 = icmp ult i64 %1809, %1810
  br i1 %1811, label %1812, label %1816

1812:                                             ; preds = %1807, %1802, %1798, %1794, %1783, %1775, %1771, %1764, %1752, %1735
  %1813 = load i64, i64* %12, align 8
  %1814 = load i64, i64* %10, align 8
  %1815 = mul i64 %1813, %1814
  store i64 %1815, i64* %13, align 8
  br i1 true, label %1999, label %2000

1816:                                             ; preds = %1807, %1802, %1798, %1794, %1783, %1775, %1771, %1768, %1764, %1752, %1735
  %1817 = load i64, i64* %12, align 8
  %1818 = load i64, i64* %10, align 8
  %1819 = mul i64 %1817, %1818
  store i64 %1819, i64* %13, align 8
  br i1 false, label %1999, label %2000

1820:                                             ; preds = %1640
  br i1 true, label %1821, label %1907

1821:                                             ; preds = %1820
  %1822 = load i64, i64* %10, align 8
  %1823 = icmp slt i64 %1822, 0
  br i1 %1823, label %1824, label %1870

1824:                                             ; preds = %1821
  %1825 = load i64, i64* %12, align 8
  %1826 = icmp slt i64 %1825, 0
  br i1 %1826, label %1827, label %1850

1827:                                             ; preds = %1824
  br i1 true, label %1828, label %1833

1828:                                             ; preds = %1827
  %1829 = load i64, i64* %12, align 8
  %1830 = load i64, i64* %10, align 8
  %1831 = sdiv i64 9223372036854775807, %1830
  %1832 = icmp slt i64 %1829, %1831
  br i1 %1832, label %1899, label %1903

1833:                                             ; preds = %1827
  br i1 true, label %1834, label %1837

1834:                                             ; preds = %1833
  %1835 = load i64, i64* %10, align 8
  %1836 = icmp slt i64 %1835, -9223372036854775807
  br i1 %1836, label %1840, label %1841

1837:                                             ; preds = %1833
  %1838 = load i64, i64* %10, align 8
  %1839 = icmp slt i64 0, %1838
  br i1 %1839, label %1840, label %1841

1840:                                             ; preds = %1837, %1834
  br label %1845

1841:                                             ; preds = %1837, %1834
  %1842 = load i64, i64* %10, align 8
  %1843 = sub nsw i64 0, %1842
  %1844 = sdiv i64 9223372036854775807, %1843
  br label %1845

1845:                                             ; preds = %1841, %1840
  %1846 = phi i64 [ 0, %1840 ], [ %1844, %1841 ]
  %1847 = load i64, i64* %12, align 8
  %1848 = sub nsw i64 -1, %1847
  %1849 = icmp sle i64 %1846, %1848
  br i1 %1849, label %1899, label %1903

1850:                                             ; preds = %1824
  %1851 = load i64, i64* %10, align 8
  %1852 = icmp eq i64 %1851, -1
  br i1 %1852, label %1853, label %1865

1853:                                             ; preds = %1850
  br i1 true, label %1854, label %1858

1854:                                             ; preds = %1853
  %1855 = load i64, i64* %12, align 8
  %1856 = add nsw i64 %1855, -9223372036854775808
  %1857 = icmp slt i64 0, %1856
  br i1 %1857, label %1899, label %1903

1858:                                             ; preds = %1853
  %1859 = load i64, i64* %12, align 8
  %1860 = icmp slt i64 0, %1859
  br i1 %1860, label %1861, label %1903

1861:                                             ; preds = %1858
  %1862 = load i64, i64* %12, align 8
  %1863 = sub nsw i64 %1862, 1
  %1864 = icmp slt i64 9223372036854775807, %1863
  br i1 %1864, label %1899, label %1903

1865:                                             ; preds = %1850
  %1866 = load i64, i64* %10, align 8
  %1867 = sdiv i64 -9223372036854775808, %1866
  %1868 = load i64, i64* %12, align 8
  %1869 = icmp slt i64 %1867, %1868
  br i1 %1869, label %1899, label %1903

1870:                                             ; preds = %1821
  %1871 = load i64, i64* %10, align 8
  %1872 = icmp eq i64 %1871, 0
  br i1 %1872, label %1873, label %1874

1873:                                             ; preds = %1870
  br i1 false, label %1899, label %1903

1874:                                             ; preds = %1870
  %1875 = load i64, i64* %12, align 8
  %1876 = icmp slt i64 %1875, 0
  br i1 %1876, label %1877, label %1894

1877:                                             ; preds = %1874
  %1878 = load i64, i64* %12, align 8
  %1879 = icmp eq i64 %1878, -1
  br i1 %1879, label %1880, label %1889

1880:                                             ; preds = %1877
  br i1 true, label %1881, label %1885

1881:                                             ; preds = %1880
  %1882 = load i64, i64* %10, align 8
  %1883 = add nsw i64 %1882, -9223372036854775808
  %1884 = icmp slt i64 0, %1883
  br i1 %1884, label %1899, label %1903

1885:                                             ; preds = %1880
  %1886 = load i64, i64* %10, align 8
  %1887 = sub nsw i64 %1886, 1
  %1888 = icmp slt i64 9223372036854775807, %1887
  br i1 %1888, label %1899, label %1903

1889:                                             ; preds = %1877
  %1890 = load i64, i64* %12, align 8
  %1891 = sdiv i64 -9223372036854775808, %1890
  %1892 = load i64, i64* %10, align 8
  %1893 = icmp slt i64 %1891, %1892
  br i1 %1893, label %1899, label %1903

1894:                                             ; preds = %1874
  %1895 = load i64, i64* %10, align 8
  %1896 = sdiv i64 9223372036854775807, %1895
  %1897 = load i64, i64* %12, align 8
  %1898 = icmp slt i64 %1896, %1897
  br i1 %1898, label %1899, label %1903

1899:                                             ; preds = %1894, %1889, %1885, %1881, %1873, %1865, %1861, %1854, %1845, %1828
  %1900 = load i64, i64* %12, align 8
  %1901 = load i64, i64* %10, align 8
  %1902 = mul i64 %1900, %1901
  store i64 %1902, i64* %13, align 8
  br i1 true, label %1999, label %2000

1903:                                             ; preds = %1894, %1889, %1885, %1881, %1873, %1865, %1861, %1858, %1854, %1845, %1828
  %1904 = load i64, i64* %12, align 8
  %1905 = load i64, i64* %10, align 8
  %1906 = mul i64 %1904, %1905
  store i64 %1906, i64* %13, align 8
  br i1 false, label %1999, label %2000

1907:                                             ; preds = %1820
  %1908 = load i64, i64* %10, align 8
  %1909 = icmp slt i64 %1908, 0
  br i1 %1909, label %1910, label %1959

1910:                                             ; preds = %1907
  %1911 = load i64, i64* %12, align 8
  %1912 = icmp slt i64 %1911, 0
  br i1 %1912, label %1913, label %1936

1913:                                             ; preds = %1910
  br i1 false, label %1914, label %1919

1914:                                             ; preds = %1913
  %1915 = load i64, i64* %12, align 8
  %1916 = load i64, i64* %10, align 8
  %1917 = udiv i64 -1, %1916
  %1918 = icmp ult i64 %1915, %1917
  br i1 %1918, label %1991, label %1995

1919:                                             ; preds = %1913
  br i1 true, label %1920, label %1923

1920:                                             ; preds = %1919
  %1921 = load i64, i64* %10, align 8
  %1922 = icmp slt i64 %1921, -9223372036854775807
  br i1 %1922, label %1926, label %1927

1923:                                             ; preds = %1919
  %1924 = load i64, i64* %10, align 8
  %1925 = icmp slt i64 0, %1924
  br i1 %1925, label %1926, label %1927

1926:                                             ; preds = %1923, %1920
  br label %1931

1927:                                             ; preds = %1923, %1920
  %1928 = load i64, i64* %10, align 8
  %1929 = sub nsw i64 0, %1928
  %1930 = udiv i64 -1, %1929
  br label %1931

1931:                                             ; preds = %1927, %1926
  %1932 = phi i64 [ 1, %1926 ], [ %1930, %1927 ]
  %1933 = load i64, i64* %12, align 8
  %1934 = sub nsw i64 -1, %1933
  %1935 = icmp ule i64 %1932, %1934
  br i1 %1935, label %1991, label %1995

1936:                                             ; preds = %1910
  br i1 true, label %1937, label %1938

1937:                                             ; preds = %1936
  br i1 false, label %1939, label %1954

1938:                                             ; preds = %1936
  br i1 false, label %1939, label %1954

1939:                                             ; preds = %1938, %1937
  %1940 = load i64, i64* %10, align 8
  %1941 = icmp eq i64 %1940, -1
  br i1 %1941, label %1942, label %1954

1942:                                             ; preds = %1939
  br i1 true, label %1943, label %1947

1943:                                             ; preds = %1942
  %1944 = load i64, i64* %12, align 8
  %1945 = add nsw i64 %1944, 0
  %1946 = icmp slt i64 0, %1945
  br i1 %1946, label %1991, label %1995

1947:                                             ; preds = %1942
  %1948 = load i64, i64* %12, align 8
  %1949 = icmp slt i64 0, %1948
  br i1 %1949, label %1950, label %1995

1950:                                             ; preds = %1947
  %1951 = load i64, i64* %12, align 8
  %1952 = sub nsw i64 %1951, 1
  %1953 = icmp slt i64 -1, %1952
  br i1 %1953, label %1991, label %1995

1954:                                             ; preds = %1939, %1938, %1937
  %1955 = load i64, i64* %10, align 8
  %1956 = sdiv i64 0, %1955
  %1957 = load i64, i64* %12, align 8
  %1958 = icmp slt i64 %1956, %1957
  br i1 %1958, label %1991, label %1995

1959:                                             ; preds = %1907
  %1960 = load i64, i64* %10, align 8
  %1961 = icmp eq i64 %1960, 0
  br i1 %1961, label %1962, label %1963

1962:                                             ; preds = %1959
  br i1 false, label %1991, label %1995

1963:                                             ; preds = %1959
  %1964 = load i64, i64* %12, align 8
  %1965 = icmp slt i64 %1964, 0
  br i1 %1965, label %1966, label %1986

1966:                                             ; preds = %1963
  br i1 true, label %1967, label %1968

1967:                                             ; preds = %1966
  br i1 false, label %1969, label %1981

1968:                                             ; preds = %1966
  br i1 false, label %1969, label %1981

1969:                                             ; preds = %1968, %1967
  %1970 = load i64, i64* %12, align 8
  %1971 = icmp eq i64 %1970, -1
  br i1 %1971, label %1972, label %1981

1972:                                             ; preds = %1969
  br i1 true, label %1973, label %1977

1973:                                             ; preds = %1972
  %1974 = load i64, i64* %10, align 8
  %1975 = add nsw i64 %1974, 0
  %1976 = icmp slt i64 0, %1975
  br i1 %1976, label %1991, label %1995

1977:                                             ; preds = %1972
  %1978 = load i64, i64* %10, align 8
  %1979 = sub nsw i64 %1978, 1
  %1980 = icmp slt i64 -1, %1979
  br i1 %1980, label %1991, label %1995

1981:                                             ; preds = %1969, %1968, %1967
  %1982 = load i64, i64* %12, align 8
  %1983 = sdiv i64 0, %1982
  %1984 = load i64, i64* %10, align 8
  %1985 = icmp slt i64 %1983, %1984
  br i1 %1985, label %1991, label %1995

1986:                                             ; preds = %1963
  %1987 = load i64, i64* %10, align 8
  %1988 = udiv i64 -1, %1987
  %1989 = load i64, i64* %12, align 8
  %1990 = icmp ult i64 %1988, %1989
  br i1 %1990, label %1991, label %1995

1991:                                             ; preds = %1986, %1981, %1977, %1973, %1962, %1954, %1950, %1943, %1931, %1914
  %1992 = load i64, i64* %12, align 8
  %1993 = load i64, i64* %10, align 8
  %1994 = mul i64 %1992, %1993
  store i64 %1994, i64* %13, align 8
  br i1 true, label %1999, label %2000

1995:                                             ; preds = %1986, %1981, %1977, %1973, %1962, %1954, %1950, %1947, %1943, %1931, %1914
  %1996 = load i64, i64* %12, align 8
  %1997 = load i64, i64* %10, align 8
  %1998 = mul i64 %1996, %1997
  store i64 %1998, i64* %13, align 8
  br i1 false, label %1999, label %2000

1999:                                             ; preds = %1995, %1991, %1903, %1899, %1816, %1812, %1724, %1720, %1633, %1626, %1535, %1528, %1434, %1426, %1334, %1326, %1232, %1224, %1132, %1124, %1034, %1025
  call void @xalloc_die() #23
  unreachable

2000:                                             ; preds = %1995, %1991, %1903, %1899, %1816, %1812, %1724, %1720, %1633, %1626, %1535, %1528, %1434, %1426, %1334, %1326, %1232, %1224, %1132, %1124, %1019
  %2001 = load i8*, i8** %6, align 8
  %2002 = load i64, i64* %13, align 8
  %2003 = call i8* @xrealloc(i8* %2001, i64 %2002) #31
  store i8* %2003, i8** %6, align 8
  %2004 = load i64, i64* %12, align 8
  %2005 = load i64*, i64** %7, align 8
  store i64 %2004, i64* %2005, align 8
  %2006 = load i8*, i8** %6, align 8
  ret i8* %2006
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #2

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(0)
define noalias nonnull i8* @xzalloc(i64 %0) #17 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call noalias nonnull i8* @xcalloc(i64 %3, i64 1) #28
  ret i8* %4
}

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(0,1)
define noalias nonnull i8* @xcalloc(i64 %0, i64 %1) #22 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = load i64, i64* %4, align 8
  %7 = call align 16 i8* @calloc(i64 %5, i64 %6) #28
  %8 = call i8* @nonnull(i8* %7) #25
  ret i8* %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(0)
define noalias nonnull i8* @xizalloc(i64 %0) #17 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call noalias nonnull i8* @xicalloc(i64 %3, i64 1) #28
  ret i8* %4
}

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(0,1)
define noalias nonnull i8* @xicalloc(i64 %0, i64 %1) #22 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = load i64, i64* %4, align 8
  %7 = call noalias i8* @icalloc(i64 %5, i64 %6)
  %8 = call i8* @nonnull(i8* %7) #25
  ret i8* %8
}

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(1)
define noalias nonnull i8* @xmemdup(i8* %0, i64 %1) #21 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  %6 = call noalias nonnull i8* @xmalloc(i64 %5) #26
  %7 = load i8*, i8** %3, align 8
  %8 = load i64, i64* %4, align 8
  %9 = call i8* @__memcpy_chk(i8* %6, i8* %7, i64 %8, i64 -1) #24
  ret i8* %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable allocsize(1)
define noalias nonnull i8* @ximemdup(i8* %0, i64 %1) #21 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  %6 = call noalias nonnull i8* @ximalloc(i64 %5) #26
  %7 = load i8*, i8** %3, align 8
  %8 = load i64, i64* %4, align 8
  %9 = call i8* @__memcpy_chk(i8* %6, i8* %7, i64 %8, i64 -1) #24
  ret i8* %9
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define noalias nonnull i8* @ximemdup0(i8* %0, i64 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %6 = load i64, i64* %4, align 8
  %7 = add nsw i64 %6, 1
  %8 = call noalias nonnull i8* @ximalloc(i64 %7) #26
  store i8* %8, i8** %5, align 8
  %9 = load i8*, i8** %5, align 8
  %10 = load i64, i64* %4, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 %10
  store i8 0, i8* %11, align 1
  %12 = load i8*, i8** %5, align 8
  %13 = load i8*, i8** %3, align 8
  %14 = load i64, i64* %4, align 8
  %15 = load i8*, i8** %5, align 8
  %16 = call i64 @llvm.objectsize.i64.p0i8(i8* %15, i1 false, i1 true, i1 false)
  %17 = call i8* @__memcpy_chk(i8* %12, i8* %13, i64 %14, i64 %16) #24
  ret i8* %17
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define noalias nonnull i8* @xstrdup(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = call i64 @strlen(i8* %4)
  %6 = add i64 %5, 1
  %7 = call noalias nonnull i8* @xmemdup(i8* %3, i64 %6) #31
  ret i8* %7
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i64 @xsum(i64 %0, i64 %1) #10 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %6 = load i64, i64* %3, align 8
  %7 = load i64, i64* %4, align 8
  %8 = add i64 %6, %7
  store i64 %8, i64* %5, align 8
  %9 = load i64, i64* %5, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp uge i64 %9, %10
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = load i64, i64* %5, align 8
  br label %15

14:                                               ; preds = %2
  br label %15

15:                                               ; preds = %14, %12
  %16 = phi i64 [ %13, %12 ], [ -1, %14 ]
  ret i64 %16
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i64 @xsum3(i64 %0, i64 %1, i64 %2) #10 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i64, i64* %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = call i64 @xsum(i64 %7, i64 %8) #25
  %10 = load i64, i64* %6, align 8
  %11 = call i64 @xsum(i64 %9, i64 %10) #25
  ret i64 %11
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i64 @xsum4(i64 %0, i64 %1, i64 %2, i64 %3) #10 {
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  store i64 %0, i64* %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  store i64 %3, i64* %8, align 8
  %9 = load i64, i64* %5, align 8
  %10 = load i64, i64* %6, align 8
  %11 = call i64 @xsum(i64 %9, i64 %10) #25
  %12 = load i64, i64* %7, align 8
  %13 = call i64 @xsum(i64 %11, i64 %12) #25
  %14 = load i64, i64* %8, align 8
  %15 = call i64 @xsum(i64 %13, i64 %14) #25
  ret i64 %15
}

; Function Attrs: noinline nounwind optnone readonly ssp uwtable willreturn
define i64 @xmax(i64 %0, i64 %1) #10 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = load i64, i64* %4, align 8
  %7 = icmp uge i64 %5, %6
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = load i64, i64* %3, align 8
  br label %12

10:                                               ; preds = %2
  %11 = load i64, i64* %4, align 8
  br label %12

12:                                               ; preds = %10, %8
  %13 = phi i64 [ %9, %8 ], [ %11, %10 ]
  ret i64 %13
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define zeroext i1 @yesno() #0 {
  %1 = alloca i8, align 1
  %2 = alloca i32, align 4
  %3 = call i32 @getchar()
  store i32 %3, i32* %2, align 4
  %4 = load i32, i32* %2, align 4
  %5 = icmp eq i32 %4, 121
  br i1 %5, label %9, label %6

6:                                                ; preds = %0
  %7 = load i32, i32* %2, align 4
  %8 = icmp eq i32 %7, 89
  br label %9

9:                                                ; preds = %6, %0
  %10 = phi i1 [ true, %0 ], [ %8, %6 ]
  %11 = zext i1 %10 to i8
  store i8 %11, i8* %1, align 1
  br label %12

12:                                               ; preds = %20, %9
  %13 = load i32, i32* %2, align 4
  %14 = icmp ne i32 %13, 10
  br i1 %14, label %15, label %18

15:                                               ; preds = %12
  %16 = load i32, i32* %2, align 4
  %17 = icmp ne i32 %16, -1
  br label %18

18:                                               ; preds = %15, %12
  %19 = phi i1 [ false, %12 ], [ %17, %15 ]
  br i1 %19, label %20, label %22

20:                                               ; preds = %18
  %21 = call i32 @getchar()
  store i32 %21, i32* %2, align 4
  br label %12, !llvm.loop !198

22:                                               ; preds = %18
  %23 = load i8, i8* %1, align 1
  %24 = trunc i8 %23 to i1
  ret i1 %24
}

declare i32 @getchar() #4

attributes #0 = { noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #1 = { noinline nounwind optnone readnone ssp uwtable willreturn "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #2 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #4 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #5 = { noinline noreturn nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #6 = { argmemonly nofree nounwind willreturn }
attributes #7 = { noreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #8 = { argmemonly nofree nounwind willreturn writeonly }
attributes #9 = { allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #10 = { noinline nounwind optnone readonly ssp uwtable willreturn "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #11 = { nounwind readonly willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #12 = { cold noreturn "disable-tail-calls"="true" "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #13 = { nofree nosync nounwind willreturn }
attributes #14 = { cold noinline nounwind optnone ssp uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #15 = { allocsize(1) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #16 = { allocsize(0,1) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #17 = { noinline nounwind optnone ssp uwtable allocsize(0) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #18 = { cold noreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #19 = { nounwind readnone willreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #20 = { noinline nounwind optnone ssp uwtable allocsize(1,2) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #21 = { noinline nounwind optnone ssp uwtable allocsize(1) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #22 = { noinline nounwind optnone ssp uwtable allocsize(0,1) "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "tune-cpu"="generic" }
attributes #23 = { noreturn }
attributes #24 = { nounwind }
attributes #25 = { nounwind readonly willreturn }
attributes #26 = { allocsize(0) }
attributes #27 = { nounwind readnone willreturn }
attributes #28 = { allocsize(0,1) }
attributes #29 = { cold noreturn }
attributes #30 = { cold }
attributes #31 = { allocsize(1) }
attributes #32 = { allocsize(1,2) }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4, !5}

!0 = !{!"Homebrew clang version 13.0.0"}
!1 = !{i32 2, !"SDK Version", [3 x i32] [i32 10, i32 15, i32 6]}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 7, !"PIC Level", i32 2}
!4 = !{i32 7, !"uwtable", i32 1}
!5 = !{i32 7, !"frame-pointer", i32 2}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
!8 = distinct !{!8, !7}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !7}
!11 = distinct !{!11, !7}
!12 = distinct !{!12, !7}
!13 = distinct !{!13, !7}
!14 = distinct !{!14, !7}
!15 = distinct !{!15, !7}
!16 = distinct !{!16, !7}
!17 = distinct !{!17, !7}
!18 = distinct !{!18, !7}
!19 = distinct !{!19, !7}
!20 = distinct !{!20, !7}
!21 = distinct !{!21, !7}
!22 = distinct !{!22, !7}
!23 = distinct !{!23, !7}
!24 = distinct !{!24, !7}
!25 = distinct !{!25, !7}
!26 = distinct !{!26, !7}
!27 = distinct !{!27, !7}
!28 = distinct !{!28, !7}
!29 = distinct !{!29, !7}
!30 = distinct !{!30, !7}
!31 = distinct !{!31, !7}
!32 = distinct !{!32, !7}
!33 = distinct !{!33, !7}
!34 = distinct !{!34, !7}
!35 = distinct !{!35, !7}
!36 = distinct !{!36, !7}
!37 = distinct !{!37, !7}
!38 = distinct !{!38, !7}
!39 = distinct !{!39, !7}
!40 = distinct !{!40, !7}
!41 = distinct !{!41, !7}
!42 = distinct !{!42, !7}
!43 = distinct !{!43, !7}
!44 = distinct !{!44, !7}
!45 = distinct !{!45, !7}
!46 = distinct !{!46, !7}
!47 = distinct !{!47, !7}
!48 = distinct !{!48, !7}
!49 = distinct !{!49, !7}
!50 = distinct !{!50, !7}
!51 = distinct !{!51, !7}
!52 = distinct !{!52, !7}
!53 = distinct !{!53, !7}
!54 = distinct !{!54, !7}
!55 = distinct !{!55, !7}
!56 = distinct !{!56, !7}
!57 = distinct !{!57, !7}
!58 = distinct !{!58, !7}
!59 = distinct !{!59, !7}
!60 = distinct !{!60, !7}
!61 = distinct !{!61, !7}
!62 = distinct !{!62, !7}
!63 = distinct !{!63, !7}
!64 = distinct !{!64, !7}
!65 = distinct !{!65, !7}
!66 = distinct !{!66, !7}
!67 = distinct !{!67, !7}
!68 = distinct !{!68, !7}
!69 = distinct !{!69, !7}
!70 = distinct !{!70, !7}
!71 = distinct !{!71, !7}
!72 = distinct !{!72, !7}
!73 = distinct !{!73, !7}
!74 = distinct !{!74, !7}
!75 = distinct !{!75, !7}
!76 = distinct !{!76, !7}
!77 = distinct !{!77, !7}
!78 = distinct !{!78, !7}
!79 = distinct !{!79, !7}
!80 = distinct !{!80, !7}
!81 = distinct !{!81, !7}
!82 = distinct !{!82, !7}
!83 = distinct !{!83, !7}
!84 = distinct !{!84, !7}
!85 = distinct !{!85, !7}
!86 = distinct !{!86, !7}
!87 = distinct !{!87, !7}
!88 = distinct !{!88, !7}
!89 = distinct !{!89, !7}
!90 = distinct !{!90, !7}
!91 = distinct !{!91, !7}
!92 = distinct !{!92, !7}
!93 = distinct !{!93, !7}
!94 = distinct !{!94, !7}
!95 = distinct !{!95, !7}
!96 = distinct !{!96, !7}
!97 = distinct !{!97, !7}
!98 = distinct !{!98, !7}
!99 = distinct !{!99, !7}
!100 = distinct !{!100, !7}
!101 = distinct !{!101, !7}
!102 = distinct !{!102, !7}
!103 = distinct !{!103, !7}
!104 = distinct !{!104, !7}
!105 = distinct !{!105, !7}
!106 = distinct !{!106, !7}
!107 = distinct !{!107, !7}
!108 = distinct !{!108, !7}
!109 = distinct !{!109, !7}
!110 = distinct !{!110, !7}
!111 = distinct !{!111, !7}
!112 = distinct !{!112, !7}
!113 = distinct !{!113, !7}
!114 = distinct !{!114, !7}
!115 = distinct !{!115, !7}
!116 = distinct !{!116, !7}
!117 = distinct !{!117, !7}
!118 = distinct !{!118, !7}
!119 = distinct !{!119, !7}
!120 = distinct !{!120, !7}
!121 = distinct !{!121, !7}
!122 = distinct !{!122, !7}
!123 = distinct !{!123, !7}
!124 = distinct !{!124, !7}
!125 = distinct !{!125, !7}
!126 = distinct !{!126, !7}
!127 = distinct !{!127, !7}
!128 = distinct !{!128, !7}
!129 = distinct !{!129, !7}
!130 = distinct !{!130, !7}
!131 = distinct !{!131, !7}
!132 = distinct !{!132, !7}
!133 = distinct !{!133, !7}
!134 = distinct !{!134, !7}
!135 = distinct !{!135, !7}
!136 = distinct !{!136, !7}
!137 = distinct !{!137, !7}
!138 = distinct !{!138, !7}
!139 = distinct !{!139, !7}
!140 = distinct !{!140, !7}
!141 = distinct !{!141, !7}
!142 = distinct !{!142, !7}
!143 = distinct !{!143, !7}
!144 = distinct !{!144, !7}
!145 = distinct !{!145, !7}
!146 = distinct !{!146, !7}
!147 = distinct !{!147, !7}
!148 = distinct !{!148, !7}
!149 = distinct !{!149, !7}
!150 = distinct !{!150, !7}
!151 = distinct !{!151, !7}
!152 = distinct !{!152, !7}
!153 = distinct !{!153, !7}
!154 = distinct !{!154, !7}
!155 = distinct !{!155, !7}
!156 = distinct !{!156, !7}
!157 = distinct !{!157, !7}
!158 = distinct !{!158, !7}
!159 = distinct !{!159, !7}
!160 = distinct !{!160, !7}
!161 = distinct !{!161, !7}
!162 = distinct !{!162, !7}
!163 = distinct !{!163, !7}
!164 = distinct !{!164, !7}
!165 = distinct !{!165, !7}
!166 = distinct !{!166, !7}
!167 = distinct !{!167, !7}
!168 = distinct !{!168, !7}
!169 = distinct !{!169, !7}
!170 = distinct !{!170, !7}
!171 = distinct !{!171, !7}
!172 = distinct !{!172, !7}
!173 = distinct !{!173, !7}
!174 = distinct !{!174, !7}
!175 = distinct !{!175, !7}
!176 = distinct !{!176, !7}
!177 = distinct !{!177, !7}
!178 = distinct !{!178, !7}
!179 = distinct !{!179, !7}
!180 = distinct !{!180, !7}
!181 = distinct !{!181, !7}
!182 = distinct !{!182, !7}
!183 = distinct !{!183, !7}
!184 = distinct !{!184, !7}
!185 = distinct !{!185, !7}
!186 = distinct !{!186, !7}
!187 = distinct !{!187, !7}
!188 = distinct !{!188, !7}
!189 = distinct !{!189, !7}
!190 = distinct !{!190, !7}
!191 = distinct !{!191, !7}
!192 = distinct !{!192, !7}
!193 = distinct !{!193, !7}
!194 = !{i64 2148257021}
!195 = !{i64 2148257247}
!196 = !{i64 2148257625}
!197 = distinct !{!197, !7}
!198 = distinct !{!198, !7}
